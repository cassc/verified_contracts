{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"WHO404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {ERC333} from \\\"ERC333.sol\\\";\\r\\nimport {FullMath} from \\\"./utils/FullMath.sol\\\";\\r\\n\\r\\ncontract WHO404 is ERC333 {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    string private constant __NAME = \\\"WHO404\\\";\\r\\n    string private constant __SYM = \\\"WHO\\\";\\r\\n    uint256 private constant __MINT_SUPPLY = 10000;\\r\\n    uint24 private constant __TAX_PERCENT = 80000;\\r\\n    uint8 private constant __DECIMALS = 18;\\r\\n    uint8 private constant __RATIO = 100;\\r\\n\\r\\n    address constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n\\r\\n    constructor(\\r\\n        address initialOwner_,\\r\\n        address initialMintRecipient_\\r\\n    )\\r\\n        ERC333(\\r\\n            initialOwner_,\\r\\n            initialMintRecipient_,\\r\\n            __MINT_SUPPLY,\\r\\n            __TAX_PERCENT,\\r\\n            __NAME,\\r\\n            __SYM,\\r\\n            __DECIMALS,\\r\\n            __RATIO\\r\\n        )\\r\\n    {\\r\\n        baseURI = \\\"ipfs://bafkreihaeaww3gqst4smw3evfff7lmvbnsp6gljpavhswhoqtjgr5scvva\\\";\\r\\n    }\\r\\n\\r\\n    function initialize() external payable override onlyOwner {\\r\\n        address positionManagerAddress = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88;\\r\\n        address swapRouterAddress = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\\r\\n\\r\\n        if (msg.value > 0) {\\r\\n            depositETH(msg.value);\\r\\n        }\\r\\n\\r\\n        uint160 sqrtPriceX96 = (address(this) < WETH)\\r\\n            ? 396140812571321687967719751680\\r\\n            : 15845632502852868398318092288;\\r\\n\\r\\n        uint256 quoteTokenAmount = _getWETHAtSqrtPriceX96(sqrtPriceX96);\\r\\n\\r\\n        uint256 wethAmount = balanceOfWETH();\\r\\n        require(wethAmount >= quoteTokenAmount, \\\"weth amount is too low\\\");\\r\\n\\r\\n        _initialize(\\r\\n            sqrtPriceX96,\\r\\n            3000,\\r\\n            WETH,\\r\\n            quoteTokenAmount,\\r\\n            60,\\r\\n            positionManagerAddress,\\r\\n            swapRouterAddress\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function balanceOfWETH() internal returns (uint256 amount) {\\r\\n        // Call balanceOf\\r\\n        // 0x70a08231: keccak256(balanceOf(address))\\r\\n        (bool success, bytes memory data) = WETH.staticcall(\\r\\n            abi.encodeWithSelector(0x70a08231, address(this))\\r\\n        );\\r\\n        if (success) {\\r\\n            // Decode `uint256` from returned data\\r\\n            amount = abi.decode(data, (uint256));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function depositETH(uint256 amount) internal returns (bool) {\\r\\n        // Deposit the eth\\r\\n        // Call deposit\\r\\n        // 0xd0e30db0: keccak256(deposit())\\r\\n        (bool success, ) = WETH.call{value: amount}(\\r\\n            abi.encodeWithSelector(0xd0e30db0)\\r\\n        );\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function _getWETHAtSqrtPriceX96(\\r\\n        uint160 sqrtPriceX96\\r\\n    ) private view returns (uint256 quoteAmount) {\\r\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\r\\n        uint256 thisAmount = balanceOf[address(this)];\\r\\n        if (sqrtPriceX96 <= type(uint128).max) {\\r\\n            uint256 ratioX192 = uint256(sqrtPriceX96) * sqrtPriceX96;\\r\\n            quoteAmount = address(this) < WETH\\r\\n                ? FullMath.mulDiv(1 << 192, thisAmount, ratioX192)\\r\\n                : FullMath.mulDiv(ratioX192, thisAmount, 1 << 192);\\r\\n        } else {\\r\\n            uint256 ratioX128 = FullMath.mulDiv(\\r\\n                sqrtPriceX96,\\r\\n                sqrtPriceX96,\\r\\n                1 << 64\\r\\n            );\\r\\n            quoteAmount = address(this) < WETH\\r\\n                ? FullMath.mulDiv(1 << 128, thisAmount, ratioX128)\\r\\n                : FullMath.mulDiv(ratioX128, thisAmount, 1 << 128);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 id) public view override returns (string memory) {\\r\\n        uint8 seed = uint8(bytes1(keccak256(abi.encodePacked(id))));\\r\\n        string memory image;\\r\\n        string memory color;\\r\\n\\r\\n        if (seed <= 100) {\\r\\n            image = \\\"1.gif\\\";\\r\\n            color = \\\"Green\\\";\\r\\n        } else if (seed <= 160) {\\r\\n            image = \\\"2.gif\\\";\\r\\n            color = \\\"Blue\\\";\\r\\n        } else if (seed <= 210) {\\r\\n            image = \\\"3.gif\\\";\\r\\n            color = \\\"Purple\\\";\\r\\n        } else if (seed <= 240) {\\r\\n            image = \\\"4.gif\\\";\\r\\n            color = \\\"Orange\\\";\\r\\n        } else if (seed <= 255) {\\r\\n            image = \\\"5.gif\\\";\\r\\n            color = \\\"Red\\\";\\r\\n        }\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    '{\\\"name\\\": \\\"WHO404 #',\\r\\n                    Strings.toString(id),\\r\\n                    '\\\",\\\"description\\\":\\\"A collection of ',\\r\\n                    Strings.toString(mintSupply),\\r\\n                    \\\" ERC-404 Tokens enhanced with ERC-5169 TokenScript\\\",\\r\\n                    '\\\",\\\"external_url\\\":\\\"https://who404.wtf/\\\",\\\"image\\\":\\\"',\\r\\n                    baseURI,\\r\\n                    image,\\r\\n                    '\\\",\\\"attributes\\\":[{\\\"trait_type\\\":\\\"Color\\\",\\\"value\\\":\\\"',\\r\\n                    color,\\r\\n                    '\\\"}]}'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        depositETH(msg.value);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"utils/FullMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n    /// @notice Calculates floor(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n    function mulDiv(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        unchecked {\\r\\n            // 512-bit multiply [prod1 prod0] = a * b\\r\\n            // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n            // then use the Chinese Remainder Theorem to reconstruct\\r\\n            // the 512 bit result. The result is stored in two 256\\r\\n            // variables such that product = prod1 * 2**256 + prod0\\r\\n            uint256 prod0; // Least significant 256 bits of the product\\r\\n            uint256 prod1; // Most significant 256 bits of the product\\r\\n            assembly {\\r\\n                let mm := mulmod(a, b, not(0))\\r\\n                prod0 := mul(a, b)\\r\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n            }\\r\\n\\r\\n            // Handle non-overflow cases, 256 by 256 division\\r\\n            if (prod1 == 0) {\\r\\n                require(denominator > 0);\\r\\n                assembly {\\r\\n                    result := div(prod0, denominator)\\r\\n                }\\r\\n                return result;\\r\\n            }\\r\\n\\r\\n            // Make sure the result is less than 2**256.\\r\\n            // Also prevents denominator == 0\\r\\n            require(denominator > prod1);\\r\\n\\r\\n            ///////////////////////////////////////////////\\r\\n            // 512 by 256 division.\\r\\n            ///////////////////////////////////////////////\\r\\n\\r\\n            // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n            // Compute remainder using mulmod\\r\\n            uint256 remainder;\\r\\n            assembly {\\r\\n                remainder := mulmod(a, b, denominator)\\r\\n            }\\r\\n            // Subtract 256 bit number from 512 bit number\\r\\n            assembly {\\r\\n                prod1 := sub(prod1, gt(remainder, prod0))\\r\\n                prod0 := sub(prod0, remainder)\\r\\n            }\\r\\n\\r\\n            // Factor powers of two out of denominator\\r\\n            // Compute largest power of two divisor of denominator.\\r\\n            // Always >= 1.\\r\\n            // EDIT for 0.8 compatibility:\\r\\n            // see: https://ethereum.stackexchange.com/questions/96642/unary-operator-cannot-be-applied-to-type-uint256\\r\\n            uint256 twos = denominator & (~denominator + 1);\\r\\n\\r\\n            // Divide denominator by power of two\\r\\n            assembly {\\r\\n                denominator := div(denominator, twos)\\r\\n            }\\r\\n\\r\\n            // Divide [prod1 prod0] by the factors of two\\r\\n            assembly {\\r\\n                prod0 := div(prod0, twos)\\r\\n            }\\r\\n            // Shift in bits from prod1 into prod0. For this we need\\r\\n            // to flip `twos` such that it is 2**256 / twos.\\r\\n            // If twos is zero, then it becomes one\\r\\n            assembly {\\r\\n                twos := add(div(sub(0, twos), twos), 1)\\r\\n            }\\r\\n            prod0 |= prod1 * twos;\\r\\n\\r\\n            // Invert denominator mod 2**256\\r\\n            // Now that denominator is an odd number, it has an inverse\\r\\n            // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n            // Compute the inverse by starting with a seed that is correct\\r\\n            // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n            uint256 inv = (3 * denominator) ^ 2;\\r\\n            // Now use Newton-Raphson iteration to improve the precision.\\r\\n            // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n            // arithmetic, doubling the correct bits in each step.\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n            inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n            // Because the division is now exact we can divide by multiplying\\r\\n            // with the modular inverse of denominator. This will give us the\\r\\n            // correct result modulo 2**256. Since the precoditions guarantee\\r\\n            // that the outcome is less than 2**256, this is the final result.\\r\\n            // We don't need to compute the high bits of the result and prod1\\r\\n            // is no longer required.\\r\\n            result = prod0 * inv;\\r\\n            return result;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates ceil(a\u00d7b\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n    /// @param a The multiplicand\\r\\n    /// @param b The multiplier\\r\\n    /// @param denominator The divisor\\r\\n    /// @return result The 256-bit result\\r\\n    function mulDivRoundingUp(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        uint256 denominator\\r\\n    ) internal pure returns (uint256 result) {\\r\\n        result = mulDiv(a, b, denominator);\\r\\n        if (mulmod(a, b, denominator) > 0) {\\r\\n            require(result < type(uint256).max);\\r\\n            result++;\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"ERC333.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport {Strings} from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport {ERC404} from \\\"ERC404.sol\\\";\\r\\nimport {ERC5169} from \\\"stl-contracts/ERC/ERC5169.sol\\\";\\r\\nimport {IERC721Metadata} from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\\\";\\r\\n\\r\\nimport {PoolAddress} from \\\"../utils/PoolAddress.sol\\\";\\r\\nimport {TickMath} from \\\"../utils/TickMath.sol\\\";\\r\\nimport {PoolData} from \\\"../structs/PoolData.sol\\\";\\r\\nimport {MintParams, IncreaseLiquidityParams, DecreaseLiquidityParams, CollectParams} from \\\"../structs/PositionParams.sol\\\";\\r\\nimport {ExactInputSingleParams} from \\\"../structs/RouterParams.sol\\\";\\r\\n\\r\\n abstract contract ERC333 is Ownable, ERC404, ERC5169 {\\r\\n    event Initialize(PoolData poolData);\\r\\n    event ReceiveTax(uint256 value);\\r\\n    event ERC20Burn(uint256 value);\\r\\n    event RefundETH(address sender, uint256 value);\\r\\n    // event IncreaseLiquidity(uint256 amount);\\r\\n\\r\\n    using Strings for uint256;\\r\\n\\r\\n    string constant _JSON_FILE = \\\".json\\\";\\r\\n\\r\\n    // default settings\\r\\n    uint256 public mintSupply = 10000; // max NFT count\\r\\n    uint24 public taxPercent = 80000;\\r\\n    address public initialMintRecipient; // the first token owner\\r\\n\\r\\n    bool public initialized;\\r\\n    PoolData public currentPoolData;\\r\\n\\r\\n    /// @dev for the tick bar of ERC333\\r\\n    int24 public tickThreshold;\\r\\n    int24 public currentTick;\\r\\n    uint256 public mintTimestamp;\\r\\n\\r\\n    /// @dev Total tax in ERC-20 token representation\\r\\n    uint256 public totalTax;\\r\\n\\r\\n    address public positionManagerAddress;\\r\\n    address public swapRouterAddress;\\r\\n\\r\\n    /// @dev for compute arithmetic mean tick by observation\\r\\n    uint32 constant TWAP_INTERVAL = 30 minutes;\\r\\n\\r\\n    event BaseUriUpdate(string uri);\\r\\n\\r\\n    string public baseURI;\\r\\n\\r\\n    constructor(\\r\\n        address initialOwner_,\\r\\n        address initialMintRecipient_,\\r\\n        uint256 mintSupply_,\\r\\n        uint24 taxPercent_,\\r\\n        string memory name_,\\r\\n        string memory sym_,\\r\\n        uint8 decimals_,\\r\\n        uint8 ratio_\\r\\n    ) ERC404(name_, sym_, decimals_, ratio_) Ownable(initialOwner_) {\\r\\n        // init settings\\r\\n        mintSupply = mintSupply_;\\r\\n        taxPercent = taxPercent_;\\r\\n        initialMintRecipient = initialMintRecipient_;\\r\\n\\r\\n        // Do not mint the ERC721s to the initial owner, as it's a waste of gas.\\r\\n        _setERC721TransferExempt(initialMintRecipient_, true);\\r\\n        _mintERC20(initialMintRecipient_, mintSupply * units, false);\\r\\n    }\\r\\n\\r\\n    // Treat as ERC721 type, provide ERC20 interface in TokenScript\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view override(ERC5169, ERC404) returns (bool) {\\r\\n        return\\r\\n            ERC5169.supportsInterface(interfaceId) ||\\r\\n            ERC404.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    // ERC-5169\\r\\n    function _authorizeSetScripts(\\r\\n        string[] memory\\r\\n    ) internal view override(ERC5169) onlyOwner {}\\r\\n\\r\\n    // ======================================================================================================\\r\\n    //\\r\\n    // ERC333 overrides\\r\\n    //\\r\\n    // ======================================================================================================\\r\\n\\r\\n    function initialize() external payable virtual;\\r\\n\\r\\n    function _initialize(\\r\\n        uint160 sqrtPriceX96,\\r\\n        uint24 fee,\\r\\n        address quoteToken,\\r\\n        uint256 quoteTokenAmount,\\r\\n        uint16 observationCardinalityNext,\\r\\n        address positionManagerAddress_,\\r\\n        address swapRouterAddress_\\r\\n    ) internal virtual onlyOwner {\\r\\n        require(!initialized, \\\"has initialized\\\");\\r\\n        positionManagerAddress = positionManagerAddress_;\\r\\n        swapRouterAddress = swapRouterAddress_;\\r\\n\\r\\n        currentPoolData.quoteToken = quoteToken;\\r\\n        currentPoolData.fee = fee;\\r\\n        currentPoolData.sqrtPriceX96 = sqrtPriceX96;\\r\\n\\r\\n        (address token0, address token1) = (address(this), quoteToken);\\r\\n        (uint256 amount0, uint256 amount1) = (\\r\\n            balanceOf[address(this)],\\r\\n            quoteTokenAmount\\r\\n        );\\r\\n        if (token0 > token1) {\\r\\n            (token0, token1) = (token1, token0);\\r\\n            (amount0, amount1) = (amount1, amount0);\\r\\n        }\\r\\n        _approveUniswap(token0, type(uint256).max);\\r\\n        _approveUniswap(token1, type(uint256).max);\\r\\n\\r\\n        // step1 create pool\\r\\n        int24 tickSpacing;\\r\\n        (\\r\\n            currentPoolData.poolAddress,\\r\\n            currentTick,\\r\\n            tickSpacing\\r\\n        ) = _initializePool(token0, token1, fee, sqrtPriceX96);\\r\\n        require(\\r\\n            currentPoolData.poolAddress != address(0) && tickSpacing != 0,\\r\\n            \\\"initialize pool failed\\\"\\r\\n        );\\r\\n        tickThreshold = currentTick;\\r\\n\\r\\n        currentPoolData.tickLower = (tickThreshold / tickSpacing) * tickSpacing;\\r\\n        if (tickThreshold < 0) {\\r\\n            currentPoolData.tickLower -= 60;\\r\\n        }\\r\\n        currentPoolData.tickUpper =\\r\\n            (TickMath.MAX_TICK / tickSpacing) *\\r\\n            tickSpacing;\\r\\n\\r\\n        // step2 increase observation cardinality\\r\\n        if (observationCardinalityNext > 0) {\\r\\n            bool success = _initializeObservations(\\r\\n                currentPoolData.poolAddress,\\r\\n                observationCardinalityNext\\r\\n            );\\r\\n            require(success, \\\"initialize observations failed\\\");\\r\\n        }\\r\\n\\r\\n        // step3 create liquidity\\r\\n        (\\r\\n            currentPoolData.positionId,\\r\\n            currentPoolData.liquidity,\\r\\n            ,\\r\\n\\r\\n        ) = _initializeLiquidity(\\r\\n            token0,\\r\\n            token1,\\r\\n            fee,\\r\\n            amount0,\\r\\n            amount1,\\r\\n            currentPoolData.tickLower,\\r\\n            currentPoolData.tickUpper,\\r\\n            address(this)\\r\\n        );\\r\\n        require(currentPoolData.positionId != 0, \\\"initialize liquidity failed\\\");\\r\\n        mintTimestamp = block.timestamp;\\r\\n\\r\\n        initialized = true;\\r\\n        emit Initialize(currentPoolData);\\r\\n    }\\r\\n\\r\\n    /// @notice Explain to an end user what this does\\r\\n    /// @dev Explain to a developer any extra details\\r\\n    function _getCurrentTokenTick() internal virtual returns (int24) {\\r\\n        if (!initialized) {\\r\\n            return tickThreshold;\\r\\n        }\\r\\n\\r\\n        // Call uniswapV3Pool.slot0\\r\\n        // 0x3850c7bd: keccak256(slot0())\\r\\n        (bool success0, bytes memory data0) = currentPoolData\\r\\n            .poolAddress\\r\\n            .staticcall(abi.encodeWithSelector(0x3850c7bd));\\r\\n        if (!success0) {\\r\\n            return tickThreshold;\\r\\n        }\\r\\n\\r\\n        // Decode `Slot` from returned data\\r\\n        (, int24 tick, uint16 index, uint16 cardinality, , , ) = abi.decode(\\r\\n            data0,\\r\\n            (uint160, int24, uint16, uint16, uint16, uint8, bool)\\r\\n        );\\r\\n\\r\\n        uint32 delta = TWAP_INTERVAL;\\r\\n        if (uint32(block.timestamp - mintTimestamp) < delta) {\\r\\n            return tick;\\r\\n        }\\r\\n\\r\\n        uint32[] memory secondsTwapIntervals = new uint32[](2);\\r\\n        secondsTwapIntervals[0] = delta;\\r\\n        secondsTwapIntervals[1] = 0;\\r\\n\\r\\n        // Call uniswapV3Pool.observe\\r\\n        // 0x883bdbfd: keccak256(observe(uint32[]))\\r\\n        // require(pools[poolFee] != address(0), \\\"Pool must init\\\");\\r\\n        (bool success, bytes memory data) = currentPoolData\\r\\n            .poolAddress\\r\\n            .staticcall(\\r\\n                abi.encodeWithSelector(0x883bdbfd, secondsTwapIntervals)\\r\\n            );\\r\\n\\r\\n        if (!success) {\\r\\n            return tick;\\r\\n        }\\r\\n\\r\\n        // Decode `tickCumulatives` from returned data\\r\\n        (int56[] memory tickCumulatives, ) = abi.decode(\\r\\n            data,\\r\\n            (int56[], uint160[])\\r\\n        );\\r\\n\\r\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\r\\n\\r\\n        tick = int24(tickCumulativesDelta / int56(uint56(delta)));\\r\\n        // Always round to negative infinity\\r\\n        if (\\r\\n            tickCumulativesDelta < 0 &&\\r\\n            (tickCumulativesDelta % int56(uint56(delta)) != 0)\\r\\n        ) tick--;\\r\\n\\r\\n        return tick;\\r\\n    }\\r\\n\\r\\n    function _approveUniswap(\\r\\n        address token,\\r\\n        uint256 amount\\r\\n    ) internal virtual returns (bool) {\\r\\n        if (amount == 0) {\\r\\n            return true;\\r\\n        }\\r\\n        if (token == address(this)) {\\r\\n            allowance[address(this)][positionManagerAddress] = amount;\\r\\n            allowance[address(this)][swapRouterAddress] = amount;\\r\\n            return true;\\r\\n        }\\r\\n\\r\\n        // Approve the position manager\\r\\n        // Call approve\\r\\n        // 0x095ea7b3: keccak256(approve(address,uint256))\\r\\n        (bool success0, ) = token.call(\\r\\n            abi.encodeWithSelector(0x095ea7b3, positionManagerAddress, amount)\\r\\n        );\\r\\n\\r\\n        (bool success1, ) = token.call(\\r\\n            abi.encodeWithSelector(0x095ea7b3, swapRouterAddress, amount)\\r\\n        );\\r\\n        return success0 && success1;\\r\\n    }\\r\\n\\r\\n    function _initializePool(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint24 fee,\\r\\n        uint160 sqrtPriceX96\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        returns (address poolAddress, int24 tick, int24 tickSpacing)\\r\\n    {\\r\\n        // Call position manager createAndInitializePoolIfNecessary\\r\\n        // 0x13ead562: keccak256(createAndInitializePoolIfNecessary(address,address,uint24,uint160))\\r\\n        (bool success0, bytes memory data0) = positionManagerAddress.call(\\r\\n            abi.encodeWithSelector(\\r\\n                0x13ead562,\\r\\n                token0,\\r\\n                token1,\\r\\n                fee,\\r\\n                sqrtPriceX96\\r\\n            )\\r\\n        );\\r\\n        // If createAndInitializePoolIfNecessary hasn't reverted\\r\\n        if (!success0) {\\r\\n            return (address(0), 0, 0);\\r\\n        }\\r\\n        // Decode `address` from returned data\\r\\n        poolAddress = abi.decode(data0, (address));\\r\\n\\r\\n        // Call uniswapV3Pool.slot0\\r\\n        // 0x3850c7bd: keccak256(slot0())\\r\\n        (bool success1, bytes memory data1) = poolAddress.staticcall(\\r\\n            abi.encodeWithSelector(0x3850c7bd)\\r\\n        );\\r\\n        if (!success1) {\\r\\n            return (address(0), 0, 0);\\r\\n        }\\r\\n        // Decode `Slot` from returned data\\r\\n        (, tick, , , , , ) = abi.decode(\\r\\n            data1,\\r\\n            (uint160, int24, uint16, uint16, uint16, uint8, bool)\\r\\n        );\\r\\n\\r\\n        // Call uniswapV3Pool.tickSpacing\\r\\n        // 0xd0c93a7c: keccak256(tickSpacing())\\r\\n        (bool success2, bytes memory data2) = poolAddress.staticcall(\\r\\n            abi.encodeWithSelector(0xd0c93a7c)\\r\\n        );\\r\\n        if (!success2) {\\r\\n            return (address(0), 0, 0);\\r\\n        }\\r\\n        tickSpacing = abi.decode(data2, (int24));\\r\\n    }\\r\\n\\r\\n    function _initializeObservations(\\r\\n        address poolAddress,\\r\\n        uint16 observationCardinalityNext\\r\\n    ) internal virtual returns (bool) {\\r\\n        // Call pool increaseObservationCardinalityNext\\r\\n        // 0x32148f67: keccak256(increaseObservationCardinalityNext(uint16))\\r\\n        (bool success, ) = poolAddress.call(\\r\\n            abi.encodeWithSelector(0x32148f67, observationCardinalityNext)\\r\\n        );\\r\\n        return success;\\r\\n    }\\r\\n\\r\\n    function _initializeLiquidity(\\r\\n        address token0,\\r\\n        address token1,\\r\\n        uint24 fee,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        address recipient\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        returns (\\r\\n            uint256 positionId,\\r\\n            uint128 liquidity,\\r\\n            uint256 amount0Used,\\r\\n            uint256 amount1Used\\r\\n        )\\r\\n    {\\r\\n        MintParams memory params = MintParams({\\r\\n            token0: token0,\\r\\n            token1: token1,\\r\\n            fee: fee,\\r\\n            tickLower: tickLower,\\r\\n            tickUpper: tickUpper,\\r\\n            amount0Desired: amount0,\\r\\n            amount1Desired: amount1,\\r\\n            amount0Min: 0,\\r\\n            amount1Min: 0,\\r\\n            recipient: recipient,\\r\\n            deadline: block.timestamp\\r\\n        });\\r\\n        // Call position manager mint\\r\\n        // 0x88316456: keccak256(mint((address,address,uint24,int24,int24,uint256,\\r\\n        // uint256,uint256,uint256,address,uint256)))\\r\\n        (bool success, bytes memory data) = positionManagerAddress.call(\\r\\n            abi.encodeWithSelector(0x88316456, params)\\r\\n        );\\r\\n\\r\\n        // If mint hasn't reverted\\r\\n        if (success) {\\r\\n            // Decode `(uint256, uint128, uint256, uint256)` from returned data\\r\\n            (positionId, liquidity, amount0Used, amount1Used) = abi.decode(\\r\\n                data,\\r\\n                (uint256, uint128, uint256, uint256)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _exactInputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        address recipient,\\r\\n        uint256 amountIn\\r\\n    ) internal virtual returns (uint256 amountOut) {\\r\\n        ExactInputSingleParams memory params = ExactInputSingleParams({\\r\\n            tokenIn: tokenIn,\\r\\n            tokenOut: tokenOut,\\r\\n            fee: currentPoolData.fee,\\r\\n            recipient: recipient,\\r\\n            amountIn: amountIn,\\r\\n            amountOutMinimum: 0,\\r\\n            sqrtPriceLimitX96: 0,\\r\\n            deadline: block.timestamp\\r\\n        });\\r\\n        // Call position manager increaseLiquidity\\r\\n        // 0x414bf389: keccak256(exactInputSingle((address,address,uint24,address,uint256,uint256,uint256,uint160)))\\r\\n        (bool success, bytes memory data) = swapRouterAddress.call(\\r\\n            abi.encodeWithSelector(0x414bf389, params)\\r\\n        );\\r\\n\\r\\n        // If exactInputSingle hasn't reverted\\r\\n        if (success) {\\r\\n            // Decode `(uint128, uint256, uint256)` from returned data\\r\\n            amountOut = abi.decode(data, (uint256));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _increaseLiquidity(\\r\\n        uint256 positionId,\\r\\n        uint256 amount0,\\r\\n        uint256 amount1\\r\\n    )\\r\\n        internal\\r\\n        virtual\\r\\n        returns (uint128 liquidity, uint256 amount0Used, uint256 amount1Used)\\r\\n    {\\r\\n        IncreaseLiquidityParams memory params = IncreaseLiquidityParams({\\r\\n            tokenId: positionId,\\r\\n            amount0Desired: amount0,\\r\\n            amount1Desired: amount1,\\r\\n            amount0Min: 0,\\r\\n            amount1Min: 0,\\r\\n            deadline: block.timestamp\\r\\n        });\\r\\n        // Call position manager increaseLiquidity\\r\\n        // 0x219f5d17: keccak256(increaseLiquidity((uint256,uint256,uint256,uint256,uint256,uint256)))\\r\\n        (bool success, bytes memory data) = positionManagerAddress.call(\\r\\n            abi.encodeWithSelector(0x219f5d17, params)\\r\\n        );\\r\\n\\r\\n        // If increaseLiquidity hasn't reverted\\r\\n        if (success) {\\r\\n            // Decode `(uint128, uint256, uint256)` from returned data\\r\\n            (liquidity, amount0Used, amount1Used) = abi.decode(\\r\\n                data,\\r\\n                (uint128, uint256, uint256)\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _decreaseLiquidity(\\r\\n        uint256 positionId,\\r\\n        uint128 liquidity\\r\\n    ) internal virtual returns (uint256 amount0, uint256 amount1) {\\r\\n        DecreaseLiquidityParams memory params = DecreaseLiquidityParams({\\r\\n            tokenId: positionId,\\r\\n            liquidity: liquidity,\\r\\n            amount0Min: 0,\\r\\n            amount1Min: 0,\\r\\n            deadline: block.timestamp\\r\\n        });\\r\\n        // Call position manager increaseLiquidity\\r\\n        // 0x0c49ccbe: keccak256(decreaseLiquidity((uint256,uint128,uint256,uint256,uint256)))\\r\\n        (bool success, bytes memory data) = positionManagerAddress.call(\\r\\n            abi.encodeWithSelector(0x0c49ccbe, params)\\r\\n        );\\r\\n\\r\\n        // If decreaseLiquidity hasn't reverted\\r\\n        if (success) {\\r\\n            // Decode `(uint128, uint256, uint256)` from returned data\\r\\n            (amount0, amount1) = abi.decode(data, (uint256, uint256));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _collect(\\r\\n        uint256 positionId,\\r\\n        address recipient\\r\\n    ) internal virtual returns (uint256 amount0, uint256 amount1) {\\r\\n        CollectParams memory params = CollectParams({\\r\\n            tokenId: positionId,\\r\\n            recipient: recipient,\\r\\n            amount0Max: type(uint128).max,\\r\\n            amount1Max: type(uint128).max\\r\\n        });\\r\\n        // Call position manager increaseLiquidity\\r\\n        // 0xfc6f7865: keccak256(collect((uint256,address,uint128,uint128)))\\r\\n        (bool success, bytes memory data) = positionManagerAddress.call(\\r\\n            abi.encodeWithSelector(0xfc6f7865, params)\\r\\n        );\\r\\n\\r\\n        // If decreaseLiquidity hasn't reverted\\r\\n        if (success) {\\r\\n            // Decode `(uint128, uint256, uint256)` from returned data\\r\\n            (amount0, amount1) = abi.decode(data, (uint256, uint256));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _getTaxOrBurned(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) internal virtual returns (uint256 tax, bool burned) {\\r\\n        if (\\r\\n            msg.sender == initialMintRecipient ||\\r\\n            msg.sender == swapRouterAddress ||\\r\\n            from_ == address(this) ||\\r\\n            to_ == address(currentPoolData.poolAddress)\\r\\n        ) {\\r\\n            return (0, false);\\r\\n        }\\r\\n\\r\\n        // get token tick\\r\\n        currentTick = _getCurrentTokenTick();\\r\\n        if (currentTick > tickThreshold) {\\r\\n            tax = (value_ * taxPercent) / 1000000;\\r\\n        } else if (currentTick < tickThreshold) {\\r\\n            burned = true;\\r\\n        } else {\\r\\n            // do someting if getCurrentTokenTick failed\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferWithTax(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) public virtual returns (bool) {\\r\\n        (uint256 tax, bool burned) = _getTaxOrBurned(from_, to_, value_);\\r\\n        if (burned) {\\r\\n            // burn from_ token,\\r\\n            _transferERC20WithERC721(from_, address(0), value_);\\r\\n            // refund the ETH value to the to_ address\\r\\n            _refundETH(to_, value_);\\r\\n            totalSupply -= value_;\\r\\n            emit ERC20Burn(value_);\\r\\n        } else if (tax > 0) {\\r\\n            _transferERC20WithERC721(from_, to_, value_ - tax);\\r\\n            _transferERC20WithERC721(from_, address(this), tax);\\r\\n            totalTax += tax;\\r\\n            emit ReceiveTax(tax);\\r\\n        } else {\\r\\n            // Transferring ERC-20s directly requires the _transfer function.\\r\\n            _transferERC20WithERC721(from_, to_, value_);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function swapAndLiquify(uint256 amount) external virtual onlyOwner {\\r\\n        require(\\r\\n            amount <= (balanceOf[address(this)] / 2),\\r\\n            \\\"amount is too large\\\"\\r\\n        );\\r\\n\\r\\n        // swap tokens for ETH\\r\\n        uint256 quoteAmount = swapTokensForQuote(amount);\\r\\n\\r\\n        if (quoteAmount > 0) {\\r\\n            // add liquidity to uniswap\\r\\n            addLiquidity(balanceOf[address(this)], quoteAmount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function liquifyAndCollect(uint128 liquidity) external virtual onlyOwner {\\r\\n        require(\\r\\n            liquidity <= (currentPoolData.liquidity),\\r\\n            \\\"liquidity is too large\\\"\\r\\n        );\\r\\n        if (liquidity > 0) {\\r\\n            subLiquidity(liquidity);\\r\\n        }\\r\\n        _collect(currentPoolData.positionId, initialMintRecipient);\\r\\n    }\\r\\n\\r\\n    function swapTokensForQuote(uint256 tokenAmount) private returns (uint256) {\\r\\n        return\\r\\n            _exactInputSingle(\\r\\n                address(this),\\r\\n                currentPoolData.quoteToken,\\r\\n                address(this),\\r\\n                tokenAmount\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function addLiquidity(uint256 thisAmount, uint256 quoteAmount) private {\\r\\n        (address token0, address token1) = (\\r\\n            address(this),\\r\\n            currentPoolData.quoteToken\\r\\n        );\\r\\n\\r\\n        (uint256 amount0, uint256 amount1) = (thisAmount, quoteAmount);\\r\\n\\r\\n        if (token0 > token1) {\\r\\n            (token0, token1) = (token1, token0);\\r\\n            (amount0, amount1) = (amount1, amount0);\\r\\n        }\\r\\n\\r\\n        uint128 liquidity;\\r\\n        (liquidity, amount0, amount1) = _increaseLiquidity(\\r\\n            currentPoolData.positionId,\\r\\n            amount0,\\r\\n            amount1\\r\\n        );\\r\\n        if (liquidity > 0) {\\r\\n            currentPoolData.liquidity += liquidity;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function subLiquidity(uint128 liquidity) private {\\r\\n        (uint256 amount0, uint256 amount1) = _decreaseLiquidity(\\r\\n            currentPoolData.positionId,\\r\\n            liquidity\\r\\n        );\\r\\n        if (amount0 > 0 || amount1 > 0) {\\r\\n            currentPoolData.liquidity -= liquidity;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-20 transfers.\\r\\n    /// @dev This function assumes the operator is attempting to transfer as ERC-20\\r\\n    ///      given this function is only supported on the ERC-20 interface\\r\\n    function transfer(\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) public override returns (bool) {\\r\\n        // Prevent burning tokens to 0x0.\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        return _transferWithTax(msg.sender, to_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for mixed transfers from an operator that may be different than 'from'.\\r\\n    /// @dev This function assumes the operator is attempting to transfer an ERC-721\\r\\n    ///      if valueOrId is less than or equal to current max id.\\r\\n    function transferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 valueOrId_\\r\\n    ) public override returns (bool) {\\r\\n        // Prevent transferring tokens from 0x0.\\r\\n        if (from_ == address(0)) {\\r\\n            revert InvalidSender();\\r\\n        }\\r\\n\\r\\n        // Prevent burning tokens to 0x0.\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        if (valueOrId_ <= _minted) {\\r\\n            // Intention is to transfer as ERC-721 token (id).\\r\\n            uint256 id = valueOrId_;\\r\\n\\r\\n            if (from_ != _getOwnerOf(id)) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            // Check that the operator is either the sender or approved for the transfer.\\r\\n            if (\\r\\n                msg.sender != from_ &&\\r\\n                !isApprovedForAll[from_][msg.sender] &&\\r\\n                msg.sender != getApproved[id]\\r\\n            ) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            // Transfer 1 * units ERC-20 and 1 ERC-721 token.\\r\\n            _transferERC20(from_, to_, units);\\r\\n            _transferERC721(from_, to_, id);\\r\\n        } else {\\r\\n            // Intention is to transfer as ERC-20 token (value).\\r\\n            uint256 value = valueOrId_;\\r\\n            uint256 allowed = allowance[from_][msg.sender];\\r\\n\\r\\n            // Check that the operator has sufficient allowance.\\r\\n            if (allowed != type(uint256).max) {\\r\\n                allowance[from_][msg.sender] = allowed - value;\\r\\n            }\\r\\n\\r\\n            return _transferWithTax(from_, to_, value);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _refundETH(address account, uint256 value) internal virtual {\\r\\n        if (account == address(0)) {\\r\\n            revert InvalidSender();\\r\\n        }\\r\\n\\r\\n        // Call balanceOf\\r\\n        // 0x70a08231: keccak256(balanceOf(address))\\r\\n        (bool success0, bytes memory data0) = currentPoolData\\r\\n            .quoteToken\\r\\n            .staticcall(abi.encodeWithSelector(0x70a08231, address(this)));\\r\\n        if (!success0) {\\r\\n            return;\\r\\n        }\\r\\n        // Decode `uint256` from returned data\\r\\n        uint256 totalWETHAmount = abi.decode(data0, (uint256));\\r\\n\\r\\n        uint256 wethAmount = (value * totalWETHAmount) / totalSupply;\\r\\n\\r\\n        // Call WETH transfer\\r\\n        // 0xa9059cbb: keccak256(transfer(address,uint256))\\r\\n        (bool success, ) = currentPoolData.quoteToken.call(\\r\\n            abi.encodeWithSelector(0xa9059cbb, account, wethAmount)\\r\\n        );\\r\\n\\r\\n        // If transfer hasn't reverted\\r\\n        if (success) {\\r\\n            emit RefundETH(account, wethAmount);\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"structs/RouterParams.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nstruct ExactInputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n    uint160 sqrtPriceLimitX96;\\r\\n}\"\r\n    },\r\n    \"structs/PositionParams.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nstruct MintParams {\\r\\n    address token0;\\r\\n    address token1;\\r\\n    uint24 fee;\\r\\n    int24 tickLower;\\r\\n    int24 tickUpper;\\r\\n    uint256 amount0Desired;\\r\\n    uint256 amount1Desired;\\r\\n    uint256 amount0Min;\\r\\n    uint256 amount1Min;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n}\\r\\n\\r\\nstruct IncreaseLiquidityParams {\\r\\n    uint256 tokenId;\\r\\n    uint256 amount0Desired;\\r\\n    uint256 amount1Desired;\\r\\n    uint256 amount0Min;\\r\\n    uint256 amount1Min;\\r\\n    uint256 deadline;\\r\\n}\\r\\n\\r\\nstruct DecreaseLiquidityParams {\\r\\n    uint256 tokenId;\\r\\n    uint128 liquidity;\\r\\n    uint256 amount0Min;\\r\\n    uint256 amount1Min;\\r\\n    uint256 deadline;\\r\\n}\\r\\n\\r\\nstruct CollectParams {\\r\\n    uint256 tokenId;\\r\\n    address recipient;\\r\\n    uint128 amount0Max;\\r\\n    uint128 amount1Max;\\r\\n}\"\r\n    },\r\n    \"structs/PoolData.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.9;\\r\\n\\r\\nstruct PoolData {\\r\\n  address poolAddress;\\r\\n  address quoteToken;\\r\\n  uint24 fee;\\r\\n  uint256 positionId;\\r\\n  uint160 sqrtPriceX96;\\r\\n  int24 tickLower;\\r\\n  int24 tickUpper;\\r\\n  uint128 liquidity;\\r\\n}\"\r\n    },\r\n    \"utils/TickMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\nlibrary TickMath {\\r\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n    int24 internal constant MIN_TICK = -887272;\\r\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n    /// @dev Throws if |tick| > max tick\\r\\n    /// @param tick The input tick for the above formula\\r\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n    /// at the given tick\\r\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\r\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\r\\n\\r\\n        // EDIT: 0.8 compatibility\\r\\n        require(absTick <= uint256(int256(MAX_TICK)), \\\"T\\\");\\r\\n\\r\\n        uint256 ratio = absTick & 0x1 != 0\\r\\n            ? 0xfffcb933bd6fad37aa2d162d1a594001\\r\\n            : 0x100000000000000000000000000000000;\\r\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n\\r\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\r\\n\\r\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\r\\n    }\\r\\n\\r\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n    /// ever return.\\r\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\r\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\r\\n        // second inequality must be < because the price can never reach the price at the max tick\\r\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, \\\"R\\\");\\r\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\r\\n\\r\\n        uint256 r = ratio;\\r\\n        uint256 msb = 0;\\r\\n\\r\\n        assembly {\\r\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(4, gt(r, 0xFFFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(3, gt(r, 0xFF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(2, gt(r, 0xF))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := shl(1, gt(r, 0x3))\\r\\n            msb := or(msb, f)\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            let f := gt(r, 0x1)\\r\\n            msb := or(msb, f)\\r\\n        }\\r\\n\\r\\n        if (msb >= 128) r = ratio >> (msb - 127);\\r\\n        else r = ratio << (127 - msb);\\r\\n\\r\\n        int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(63, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(62, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(61, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(60, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(59, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(58, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(57, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(56, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(55, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(54, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(53, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(52, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(51, f))\\r\\n            r := shr(f, r)\\r\\n        }\\r\\n        assembly {\\r\\n            r := shr(127, mul(r, r))\\r\\n            let f := shr(128, r)\\r\\n            log_2 := or(log_2, shl(50, f))\\r\\n        }\\r\\n\\r\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96\\r\\n            ? tickHi\\r\\n            : tickLow;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"utils/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title PoolAddress modified to have <0.8 POOL_INIT_CODE_HASH\\r\\nlibrary PoolAddress {\\r\\n  bytes32 internal constant POOL_INIT_CODE_HASH =\\r\\n    0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\r\\n\\r\\n  /// @notice The identifying key of the pool\\r\\n  struct PoolKey {\\r\\n    address token0;\\r\\n    address token1;\\r\\n    uint24 fee;\\r\\n  }\\r\\n\\r\\n  /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\r\\n  /// @param tokenA The first token of a pool, unsorted\\r\\n  /// @param tokenB The second token of a pool, unsorted\\r\\n  /// @param fee The fee level of the pool\\r\\n  /// @return Poolkey The pool details with ordered token0 and token1 assignments\\r\\n  function getPoolKey(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint24 fee\\r\\n  ) internal pure returns (PoolKey memory) {\\r\\n    if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\r\\n    return PoolKey({ token0: tokenA, token1: tokenB, fee: fee });\\r\\n  }\\r\\n\\r\\n  /// @notice Deterministically computes the pool address given the factory and PoolKey\\r\\n  /// @param factory The Uniswap V3 factory contract address\\r\\n  /// @param key The PoolKey\\r\\n  /// @return pool The contract address of the V3 pool\\r\\n  function computeAddress(address factory, PoolKey memory key)\\r\\n    internal\\r\\n    pure\\r\\n    returns (address pool)\\r\\n  {\\r\\n    require(key.token0 < key.token1);\\r\\n    pool = address(\\r\\n      uint160(\\r\\n        uint256(\\r\\n          keccak256(\\r\\n            abi.encodePacked(\\r\\n              hex\\\"ff\\\",\\r\\n              factory,\\r\\n              keccak256(abi.encode(key.token0, key.token1, key.fee)),\\r\\n              POOL_INIT_CODE_HASH\\r\\n            )\\r\\n          )\\r\\n        )\\r\\n      )\\r\\n    );\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"stl-contracts/ERC/ERC5169.sol\": {\r\n      \"content\": \"/* Attestation decode and validation */\\n/* AlphaWallet 2021 - 2022 */\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\nimport \\\"./IERC5169.sol\\\";\\n\\nabstract contract ERC5169 is IERC5169 {\\n    string[] private _scriptURI;\\n\\n    function scriptURI() external view override returns (string[] memory) {\\n        return _scriptURI;\\n    }\\n\\n    function setScriptURI(string[] memory newScriptURI) external override {\\n        _authorizeSetScripts(newScriptURI);\\n\\n        _scriptURI = newScriptURI;\\n\\n        emit ScriptUpdate(newScriptURI);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC5169).interfaceId;\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to set script URI. Called by\\n     * {setScriptURI}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeSetScripts(string[] memory) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeSetScripts(string[] memory newScriptURI) internal virtual;\\n}\\n\"\r\n    },\r\n    \"ERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC404} from \\\"IERC404.sol\\\";\\r\\nimport {ERC721Receiver} from \\\"lib/ERC721Receiver.sol\\\";\\r\\nimport {DoubleEndedQueue} from \\\"./lib/DoubleEndedQueue.sol\\\";\\r\\nimport {IERC165} from \\\"lib/IERC165.sol\\\";\\r\\n\\r\\n abstract contract ERC404 is IERC404 {\\r\\n    using DoubleEndedQueue for DoubleEndedQueue.Uint256Deque;\\r\\n\\r\\n    /// @dev The queue of ERC-721 tokens stored in the contract.\\r\\n    DoubleEndedQueue.Uint256Deque private _storedERC721Ids;\\r\\n\\r\\n    /// @dev Token name\\r\\n    string public name;\\r\\n\\r\\n    /// @dev Token symbol\\r\\n    string public symbol;\\r\\n\\r\\n    /// @dev Decimals for ERC-20 representation\\r\\n    uint8 public immutable decimals;\\r\\n\\r\\n    /// @dev Units for ERC-20 representation\\r\\n    uint256 public immutable units;\\r\\n\\r\\n    /// @dev Total supply in ERC-20 representation\\r\\n    uint256 public totalSupply;\\r\\n\\r\\n    /// @dev Current mint counter which also represents the highest\\r\\n    ///      minted id, monotonically increasing to ensure accurate ownership\\r\\n    uint256 internal _minted;\\r\\n\\r\\n    /// @dev Initial chain id for EIP-2612 support\\r\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\r\\n\\r\\n    /// @dev Initial domain separator for EIP-2612 support\\r\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\r\\n\\r\\n    /// @dev Balance of user in ERC-20 representation\\r\\n    mapping(address => uint256) public balanceOf;\\r\\n\\r\\n    /// @dev Allowance of user in ERC-20 representation\\r\\n    mapping(address => mapping(address => uint256)) public allowance;\\r\\n\\r\\n    /// @dev Approval in ERC-721 representaion\\r\\n    mapping(uint256 => address) public getApproved;\\r\\n\\r\\n    /// @dev Approval for all in ERC-721 representation\\r\\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\\r\\n\\r\\n    /// @dev Packed representation of ownerOf and owned indices\\r\\n    mapping(uint256 => uint256) internal _ownedData;\\r\\n\\r\\n    /// @dev Array of owned ids in ERC-721 representation\\r\\n    mapping(address => uint256[]) internal _owned;\\r\\n\\r\\n    /// @dev Addresses that are exempt from ERC-721 transfer, typically for gas savings (pairs, routers, etc)\\r\\n    mapping(address => bool) public erc721TransferExempt;\\r\\n\\r\\n    /// @dev EIP-2612 nonces\\r\\n    mapping(address => uint256) public nonces;\\r\\n\\r\\n    /// @dev Address bitmask for packed ownership data\\r\\n    uint256 private constant _BITMASK_ADDRESS = (1 << 160) - 1;\\r\\n\\r\\n    /// @dev Owned index bitmask for packed ownership data\\r\\n    uint256 private constant _BITMASK_OWNED_INDEX = ((1 << 96) - 1) << 160;\\r\\n\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        uint8 decimals_,\\r\\n        uint8 ratio_\\r\\n    ) {\\r\\n        name = name_;\\r\\n        symbol = symbol_;\\r\\n\\r\\n        if (decimals_ < 18) {\\r\\n            revert DecimalsTooLow();\\r\\n        }\\r\\n\\r\\n        decimals = decimals_;\\r\\n        units = 10 ** decimals * ratio_;\\r\\n\\r\\n        // EIP-2612 initialization\\r\\n        INITIAL_CHAIN_ID = block.chainid;\\r\\n        INITIAL_DOMAIN_SEPARATOR = _computeDomainSeparator();\\r\\n    }\\r\\n\\r\\n    /// @notice Function to find owner of a given ERC-721 token\\r\\n    function ownerOf(\\r\\n        uint256 id_\\r\\n    ) public view virtual returns (address erc721Owner) {\\r\\n        erc721Owner = _getOwnerOf(id_);\\r\\n\\r\\n        // If the id_ is beyond the range of minted tokens, is 0, or the token is not owned by anyone, revert.\\r\\n        if (id_ > _minted || id_ == 0 || erc721Owner == address(0)) {\\r\\n            revert NotFound();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function owned(\\r\\n        address owner_\\r\\n    ) public view virtual returns (uint256[] memory) {\\r\\n        return _owned[owner_];\\r\\n    }\\r\\n\\r\\n    function erc721BalanceOf(\\r\\n        address owner_\\r\\n    ) public view virtual returns (uint256) {\\r\\n        return _owned[owner_].length;\\r\\n    }\\r\\n\\r\\n    function erc20BalanceOf(\\r\\n        address owner_\\r\\n    ) public view virtual returns (uint256) {\\r\\n        return balanceOf[owner_];\\r\\n    }\\r\\n\\r\\n    function erc20TotalSupply() public view virtual returns (uint256) {\\r\\n        return totalSupply;\\r\\n    }\\r\\n\\r\\n    function erc721TotalSupply() public view virtual returns (uint256) {\\r\\n        return _minted;\\r\\n    }\\r\\n\\r\\n    function erc721TokensBankedInQueue() public view virtual returns (uint256) {\\r\\n        return _storedERC721Ids.length();\\r\\n    }\\r\\n\\r\\n    /// @notice tokenURI must be implemented by child contract\\r\\n    function tokenURI(uint256 id_) public view virtual returns (string memory);\\r\\n\\r\\n    /// @notice Function for token approvals\\r\\n    /// @dev This function assumes the operator is attempting to approve an ERC-721\\r\\n    ///      if valueOrId is less than the minted count. Note: Unlike setApprovalForAll,\\r\\n    ///      spender_ must be allowed to be 0x0 so that approval can be revoked.\\r\\n    function approve(\\r\\n        address spender_,\\r\\n        uint256 valueOrId_\\r\\n    ) public virtual returns (bool) {\\r\\n        // The ERC-721 tokens are 1-indexed, so 0 is not a valid id and indicates that\\r\\n        // operator is attempting to set the ERC-20 allowance to 0.\\r\\n        if (valueOrId_ <= _minted && valueOrId_ > 0) {\\r\\n            // Intention is to approve as ERC-721 token (id).\\r\\n            uint256 id = valueOrId_;\\r\\n            address erc721Owner = _getOwnerOf(id);\\r\\n\\r\\n            if (\\r\\n                msg.sender != erc721Owner &&\\r\\n                !isApprovedForAll[erc721Owner][msg.sender]\\r\\n            ) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            getApproved[id] = spender_;\\r\\n\\r\\n            emit ERC721Approval(erc721Owner, spender_, id);\\r\\n        } else {\\r\\n            // Prevent granting 0x0 an ERC-20 allowance.\\r\\n            if (spender_ == address(0)) {\\r\\n                revert InvalidSpender();\\r\\n            }\\r\\n\\r\\n            // Intention is to approve as ERC-20 token (value).\\r\\n            uint256 value = valueOrId_;\\r\\n            allowance[msg.sender][spender_] = value;\\r\\n\\r\\n            emit ERC20Approval(msg.sender, spender_, value);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 approvals\\r\\n    function setApprovalForAll(\\r\\n        address operator_,\\r\\n        bool approved_\\r\\n    ) public virtual {\\r\\n        // Prevent approvals to 0x0.\\r\\n        if (operator_ == address(0)) {\\r\\n            revert InvalidOperator();\\r\\n        }\\r\\n        isApprovedForAll[msg.sender][operator_] = approved_;\\r\\n        emit ApprovalForAll(msg.sender, operator_, approved_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for mixed transfers from an operator that may be different than 'from'.\\r\\n    /// @dev This function assumes the operator is attempting to transfer an ERC-721\\r\\n    ///      if valueOrId is less than or equal to current max id.\\r\\n    function transferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 valueOrId_\\r\\n    ) public virtual returns (bool) {\\r\\n        // Prevent transferring tokens from 0x0.\\r\\n        if (from_ == address(0)) {\\r\\n            revert InvalidSender();\\r\\n        }\\r\\n\\r\\n        // Prevent burning tokens to 0x0.\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        if (valueOrId_ <= _minted) {\\r\\n            // Intention is to transfer as ERC-721 token (id).\\r\\n            uint256 id = valueOrId_;\\r\\n\\r\\n            if (from_ != _getOwnerOf(id)) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            // Check that the operator is either the sender or approved for the transfer.\\r\\n            if (\\r\\n                msg.sender != from_ &&\\r\\n                !isApprovedForAll[from_][msg.sender] &&\\r\\n                msg.sender != getApproved[id]\\r\\n            ) {\\r\\n                revert Unauthorized();\\r\\n            }\\r\\n\\r\\n            // Transfer 1 * units ERC-20 and 1 ERC-721 token.\\r\\n            _transferERC20(from_, to_, units);\\r\\n            _transferERC721(from_, to_, id);\\r\\n        } else {\\r\\n            // Intention is to transfer as ERC-20 token (value).\\r\\n            uint256 value = valueOrId_;\\r\\n            uint256 allowed = allowance[from_][msg.sender];\\r\\n\\r\\n            // Check that the operator has sufficient allowance.\\r\\n            if (allowed != type(uint256).max) {\\r\\n                allowance[from_][msg.sender] = allowed - value;\\r\\n            }\\r\\n\\r\\n            // Transferring ERC-20s directly requires the _transfer function.\\r\\n            _transferERC20WithERC721(from_, to_, value);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-20 transfers.\\r\\n    /// @dev This function assumes the operator is attempting to transfer as ERC-20\\r\\n    ///      given this function is only supported on the ERC-20 interface\\r\\n    function transfer(\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) public virtual returns (bool) {\\r\\n        // Prevent burning tokens to 0x0.\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        // Transferring ERC-20s directly requires the _transfer function.\\r\\n        return _transferERC20WithERC721(msg.sender, to_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 transfers with contract support.\\r\\n    function safeTransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_\\r\\n    ) public virtual {\\r\\n        transferFrom(from_, to_, id_);\\r\\n\\r\\n        if (\\r\\n            to_.code.length != 0 &&\\r\\n            ERC721Receiver(to_).onERC721Received(msg.sender, from_, id_, \\\"\\\") !=\\r\\n            ERC721Receiver.onERC721Received.selector\\r\\n        ) {\\r\\n            revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function for ERC-721 transfers with contract support and callback data.\\r\\n    function safeTransferFrom(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_,\\r\\n        bytes calldata data_\\r\\n    ) public virtual {\\r\\n        transferFrom(from_, to_, id_);\\r\\n\\r\\n        if (\\r\\n            to_.code.length != 0 &&\\r\\n            ERC721Receiver(to_).onERC721Received(\\r\\n                msg.sender,\\r\\n                from_,\\r\\n                id_,\\r\\n                data_\\r\\n            ) !=\\r\\n            ERC721Receiver.onERC721Received.selector\\r\\n        ) {\\r\\n            revert UnsafeRecipient();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Function for EIP-2612 permits\\r\\n    function permit(\\r\\n        address owner_,\\r\\n        address spender_,\\r\\n        uint256 value_,\\r\\n        uint256 deadline_,\\r\\n        uint8 v_,\\r\\n        bytes32 r_,\\r\\n        bytes32 s_\\r\\n    ) public virtual {\\r\\n        if (deadline_ < block.timestamp) {\\r\\n            revert PermitDeadlineExpired();\\r\\n        }\\r\\n\\r\\n        if (value_ <= _minted && value_ > 0) {\\r\\n            revert InvalidApproval();\\r\\n        }\\r\\n\\r\\n        if (spender_ == address(0)) {\\r\\n            revert InvalidSpender();\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            address recoveredAddress = ecrecover(\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"\\\\x19\\\\x01\\\",\\r\\n                        DOMAIN_SEPARATOR(),\\r\\n                        keccak256(\\r\\n                            abi.encode(\\r\\n                                keccak256(\\r\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\r\\n                                ),\\r\\n                                owner_,\\r\\n                                spender_,\\r\\n                                value_,\\r\\n                                nonces[owner_]++,\\r\\n                                deadline_\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                v_,\\r\\n                r_,\\r\\n                s_\\r\\n            );\\r\\n\\r\\n            if (recoveredAddress == address(0) || recoveredAddress != owner_) {\\r\\n                revert InvalidSigner();\\r\\n            }\\r\\n\\r\\n            allowance[recoveredAddress][spender_] = value_;\\r\\n        }\\r\\n\\r\\n        emit ERC20Approval(owner_, spender_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns domain initial domain separator, or recomputes if chain id is not equal to initial chain id\\r\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\r\\n        return\\r\\n            block.chainid == INITIAL_CHAIN_ID\\r\\n                ? INITIAL_DOMAIN_SEPARATOR\\r\\n                : _computeDomainSeparator();\\r\\n    }\\r\\n\\r\\n    function supportsInterface(\\r\\n        bytes4 interfaceId\\r\\n    ) public view virtual returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC404).interfaceId ||\\r\\n            interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function to compute domain separator for EIP-2612 permits\\r\\n    function _computeDomainSeparator() internal view virtual returns (bytes32) {\\r\\n        return\\r\\n            keccak256(\\r\\n                abi.encode(\\r\\n                    keccak256(\\r\\n                        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n                    ),\\r\\n                    keccak256(bytes(name)),\\r\\n                    keccak256(\\\"1\\\"),\\r\\n                    block.chainid,\\r\\n                    address(this)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function calculateERC721Transfers(\\r\\n        address from_,\\r\\n        uint256 value_\\r\\n    ) public view returns (uint256[] memory tokenIds) {\\r\\n        //first check it's possible to send this value\\r\\n        uint256 erc20BalanceOfSenderBefore = erc20BalanceOf(from_);\\r\\n\\r\\n        if (!erc721TransferExempt[from_]) {\\r\\n            uint256 nftsToTransfer = value_ / units;\\r\\n            uint256 fractionalAmount = value_ % units;\\r\\n\\r\\n            //account for fractional NFT removal\\r\\n            if (\\r\\n                (erc20BalanceOfSenderBefore - fractionalAmount) / units <\\r\\n                (erc20BalanceOfSenderBefore / units)\\r\\n            ) {\\r\\n                nftsToTransfer++;\\r\\n            }\\r\\n\\r\\n            if (nftsToTransfer > 0) {\\r\\n                tokenIds = new uint256[](nftsToTransfer);\\r\\n\\r\\n                for (uint256 i = 0; i < nftsToTransfer; i++) {\\r\\n                    // Pop from sender's ERC-721 stack and transfer them (LIFO)\\r\\n                    uint256 indexOfLastToken = _owned[from_].length - (1 + i);\\r\\n                    tokenIds[i] = _owned[from_][indexOfLastToken];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice This is the lowest level ERC-20 transfer function, which\\r\\n    ///         should be used for both normal ERC-20 transfers as well as minting.\\r\\n    /// Note that this function allows transfers to and from 0x0.\\r\\n    function _transferERC20(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) internal virtual {\\r\\n        // Minting is a special case for which we should not check the balance of\\r\\n        // the sender, and we should increase the total supply.\\r\\n        if (from_ == address(0)) {\\r\\n            totalSupply += value_;\\r\\n        } else {\\r\\n            // Deduct value from sender's balance.\\r\\n            balanceOf[from_] -= value_;\\r\\n        }\\r\\n\\r\\n        // Update the recipient's balance.\\r\\n        // Can be unchecked because on mint, adding to totalSupply is checked, and on transfer balance deduction is checked.\\r\\n        unchecked {\\r\\n            balanceOf[to_] += value_;\\r\\n        }\\r\\n\\r\\n        emit ERC20Transfer(from_, to_, value_);\\r\\n    }\\r\\n\\r\\n    /// @notice Consolidated record keeping function for transferring ERC-721s.\\r\\n    /// @dev Assign the token to the new owner, and remove from the old owner.\\r\\n    /// Note that this function allows transfers to and from 0x0.\\r\\n    function _transferERC721(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 id_\\r\\n    ) internal virtual {\\r\\n        // If this is not a mint, handle record keeping for transfer from previous owner.\\r\\n        if (from_ != address(0)) {\\r\\n            // On transfer of an NFT, any previous approval is reset.\\r\\n            delete getApproved[id_];\\r\\n\\r\\n            uint256 updatedId = _owned[from_][_owned[from_].length - 1];\\r\\n            if (updatedId != id_) {\\r\\n                uint256 updatedIndex = _getOwnedIndex(id_);\\r\\n                // update _owned for sender\\r\\n                _owned[from_][updatedIndex] = updatedId;\\r\\n                // update index for the moved id\\r\\n                _setOwnedIndex(updatedId, updatedIndex);\\r\\n            }\\r\\n\\r\\n            // pop\\r\\n            _owned[from_].pop();\\r\\n        }\\r\\n\\r\\n        if (to_ != address(0)) {\\r\\n            // Update owner of the token to the new owner.\\r\\n            _setOwnerOf(id_, to_);\\r\\n            // Push token onto the new owner's stack.\\r\\n            _owned[to_].push(id_);\\r\\n            // Update index for new owner's stack.\\r\\n            _setOwnedIndex(id_, _owned[to_].length - 1);\\r\\n        } else {\\r\\n            delete _ownedData[id_];\\r\\n        }\\r\\n\\r\\n        emit ERC721Transfer(from_, to_, id_);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for ERC-20 transfers. Also handles any ERC-721 transfers that may be required.\\r\\n    function _transferERC20WithERC721(\\r\\n        address from_,\\r\\n        address to_,\\r\\n        uint256 value_\\r\\n    ) internal virtual returns (bool) {\\r\\n        uint256 erc20BalanceOfSenderBefore = erc20BalanceOf(from_);\\r\\n        uint256 erc20BalanceOfReceiverBefore = erc20BalanceOf(to_);\\r\\n\\r\\n        _transferERC20(from_, to_, value_);\\r\\n\\r\\n        // Preload for gas savings on branches\\r\\n        bool isFromERC721TransferExempt = erc721TransferExempt[from_];\\r\\n        bool isToERC721TransferExempt = erc721TransferExempt[to_];\\r\\n\\r\\n        // Skip _withdrawAndStoreERC721 and/or _retrieveOrMintERC721 for ERC-721 transfer exempt addresses\\r\\n        // 1) to save gas\\r\\n        // 2) because ERC-721 transfer exempt addresses won't always have/need ERC-721s corresponding to their ERC20s.\\r\\n        if (isFromERC721TransferExempt && isToERC721TransferExempt) {\\r\\n            // Case 1) Both sender and recipient are ERC-721 transfer exempt. No ERC-721s need to be transferred.\\r\\n            // NOOP.\\r\\n        } else if (isFromERC721TransferExempt) {\\r\\n            // Case 2) The sender is ERC-721 transfer exempt, but the recipient is not. Contract should not attempt\\r\\n            //         to transfer ERC-721s from the sender, but the recipient should receive ERC-721s\\r\\n            //         from the bank/minted for any whole number increase in their balance.\\r\\n            // Only cares about whole number increments.\\r\\n            uint256 tokensToRetrieveOrMint = (balanceOf[to_] / units) -\\r\\n                (erc20BalanceOfReceiverBefore / units);\\r\\n            for (uint256 i = 0; i < tokensToRetrieveOrMint; i++) {\\r\\n                _retrieveOrMintERC721(to_);\\r\\n            }\\r\\n        } else if (isToERC721TransferExempt) {\\r\\n            // Case 3) The sender is not ERC-721 transfer exempt, but the recipient is. Contract should attempt\\r\\n            //         to withdraw and store ERC-721s from the sender, but the recipient should not\\r\\n            //         receive ERC-721s from the bank/minted.\\r\\n            // Only cares about whole number increments.\\r\\n            uint256 tokensToWithdrawAndStore = (erc20BalanceOfSenderBefore /\\r\\n                units) - (balanceOf[from_] / units);\\r\\n            for (uint256 i = 0; i < tokensToWithdrawAndStore; i++) {\\r\\n                _withdrawAndStoreERC721(from_);\\r\\n            }\\r\\n        } else {\\r\\n            // Case 4) Neither the sender nor the recipient are ERC-721 transfer exempt.\\r\\n            // Strategy:\\r\\n            // 1. First deal with the whole tokens. These are easy and will just be transferred.\\r\\n            // 2. Look at the fractional part of the value:\\r\\n            //   a) If it causes the sender to lose a whole token that was represented by an NFT due to a\\r\\n            //      fractional part being transferred, withdraw and store an additional NFT from the sender.\\r\\n            //   b) If it causes the receiver to gain a whole new token that should be represented by an NFT\\r\\n            //      due to receiving a fractional part that completes a whole token, retrieve or mint an NFT to the recevier.\\r\\n\\r\\n            // Whole tokens worth of ERC-20s get transferred as ERC-721s without any burning/minting.\\r\\n            uint256 nftsToTransfer = value_ / units;\\r\\n            for (uint256 i = 0; i < nftsToTransfer; i++) {\\r\\n                // Pop from sender's ERC-721 stack and transfer them (LIFO)\\r\\n                uint256 indexOfLastToken = _owned[from_].length - 1;\\r\\n                uint256 tokenId = _owned[from_][indexOfLastToken];\\r\\n                _transferERC721(from_, to_, tokenId);\\r\\n            }\\r\\n\\r\\n            // If the sender's transaction changes their holding from a fractional to a non-fractional\\r\\n            // amount (or vice versa), adjust ERC-721s.\\r\\n            //\\r\\n            // Check if the send causes the sender to lose a whole token that was represented by an ERC-721\\r\\n            // due to a fractional part being transferred.\\r\\n            //\\r\\n            // To check this, look if subtracting the fractional amount from the balance causes the balance to\\r\\n            // drop below the original balance % units, which represents the number of whole tokens they started with.\\r\\n            uint256 fractionalAmount = value_ % units;\\r\\n\\r\\n            if (\\r\\n                (erc20BalanceOfSenderBefore - fractionalAmount) / units <\\r\\n                (erc20BalanceOfSenderBefore / units)\\r\\n            ) {\\r\\n                _withdrawAndStoreERC721(from_);\\r\\n            }\\r\\n\\r\\n            // Check if the receive causes the receiver to gain a whole new token that should be represented\\r\\n            // by an NFT due to receiving a fractional part that completes a whole token.\\r\\n            if (\\r\\n                (erc20BalanceOfReceiverBefore + fractionalAmount) / units >\\r\\n                (erc20BalanceOfReceiverBefore / units)\\r\\n            ) {\\r\\n                _retrieveOrMintERC721(to_);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for ERC20 minting\\r\\n    /// @dev This function will allow minting of new ERC20s.\\r\\n    ///      If mintCorrespondingERC721s_ is true, it will also mint the corresponding ERC721s.\\r\\n    function _mintERC20(\\r\\n        address to_,\\r\\n        uint256 value_,\\r\\n        bool mintCorrespondingERC721s_\\r\\n    ) internal virtual {\\r\\n        /// You cannot mint to the zero address (you can't mint and immediately burn in the same transfer).\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        _transferERC20(address(0), to_, value_);\\r\\n\\r\\n        // If mintCorrespondingERC721s_ is true, mint the corresponding ERC721s.\\r\\n        if (mintCorrespondingERC721s_) {\\r\\n            uint256 nftsToRetrieveOrMint = value_ / units;\\r\\n            for (uint256 i = 0; i < nftsToRetrieveOrMint; i++) {\\r\\n                _retrieveOrMintERC721(to_);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for ERC-721 minting and retrieval from the bank.\\r\\n    /// @dev This function will allow minting of new ERC-721s up to the total fractional supply. It will\\r\\n    ///      first try to pull from the bank, and if the bank is empty, it will mint a new token.\\r\\n    function _retrieveOrMintERC721(address to_) internal virtual {\\r\\n        if (to_ == address(0)) {\\r\\n            revert InvalidRecipient();\\r\\n        }\\r\\n\\r\\n        uint256 id;\\r\\n\\r\\n        if (!DoubleEndedQueue.empty(_storedERC721Ids)) {\\r\\n            // If there are any tokens in the bank, use those first.\\r\\n            // Pop off the end of the queue (FIFO).\\r\\n            id = _storedERC721Ids.popBack();\\r\\n        } else {\\r\\n            // Otherwise, mint a new token, should not be able to go over the total fractional supply.\\r\\n            _minted++;\\r\\n            id = _minted;\\r\\n        }\\r\\n\\r\\n        address erc721Owner = _getOwnerOf(id);\\r\\n\\r\\n        // The token should not already belong to anyone besides 0x0 or this contract.\\r\\n        // If it does, something is wrong, as this should never happen.\\r\\n        if (erc721Owner != address(0)) {\\r\\n            revert AlreadyExists();\\r\\n        }\\r\\n\\r\\n        // Transfer the token to the recipient, either transferring from the contract's bank or minting.\\r\\n        _transferERC721(erc721Owner, to_, id);\\r\\n    }\\r\\n\\r\\n    /// @notice Internal function for ERC-721 deposits to bank (this contract).\\r\\n    /// @dev This function will allow depositing of ERC-721s to the bank, which can be retrieved by future minters.\\r\\n    function _withdrawAndStoreERC721(address from_) internal virtual {\\r\\n        if (from_ == address(0)) {\\r\\n            revert InvalidSender();\\r\\n        }\\r\\n\\r\\n        // Retrieve the latest token added to the owner's stack (LIFO).\\r\\n        uint256 id = _owned[from_][_owned[from_].length - 1];\\r\\n\\r\\n        // Transfer the token to the contract.\\r\\n        _transferERC721(from_, address(0), id);\\r\\n\\r\\n        // Record the token in the contract's bank queue.\\r\\n        _storedERC721Ids.pushFront(id);\\r\\n    }\\r\\n\\r\\n    /// @notice Initialization function to set pairs / etc, saving gas by avoiding mint / burn on unnecessary targets\\r\\n    function _setERC721TransferExempt(\\r\\n        address target_,\\r\\n        bool state_\\r\\n    ) internal virtual {\\r\\n        // If the target has at least 1 full ERC-20 token, they should not be removed from the exempt list\\r\\n        // because if they were and then they attempted to transfer, it would revert as they would not\\r\\n        // necessarily have ehough ERC-721s to bank.\\r\\n        if (erc20BalanceOf(target_) >= units && !state_) {\\r\\n            revert CannotRemoveFromERC721TransferExempt();\\r\\n        }\\r\\n        erc721TransferExempt[target_] = state_;\\r\\n    }\\r\\n\\r\\n    function _getOwnerOf(\\r\\n        uint256 id_\\r\\n    ) internal view virtual returns (address ownerOf_) {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        assembly {\\r\\n            ownerOf_ := and(data, _BITMASK_ADDRESS)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setOwnerOf(uint256 id_, address owner_) internal virtual {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        assembly {\\r\\n            data := add(\\r\\n                and(data, _BITMASK_OWNED_INDEX),\\r\\n                and(owner_, _BITMASK_ADDRESS)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        _ownedData[id_] = data;\\r\\n    }\\r\\n\\r\\n    function _getOwnedIndex(\\r\\n        uint256 id_\\r\\n    ) internal view virtual returns (uint256 ownedIndex_) {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        assembly {\\r\\n            ownedIndex_ := shr(160, data)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setOwnedIndex(uint256 id_, uint256 index_) internal virtual {\\r\\n        uint256 data = _ownedData[id_];\\r\\n\\r\\n        if (index_ > _BITMASK_OWNED_INDEX >> 160) {\\r\\n            revert OwnedIndexOverflow();\\r\\n        }\\r\\n\\r\\n        assembly {\\r\\n            data := add(\\r\\n                and(data, _BITMASK_ADDRESS),\\r\\n                and(shl(160, index_), _BITMASK_OWNED_INDEX)\\r\\n            )\\r\\n        }\\r\\n\\r\\n        _ownedData[id_] = data;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"stl-contracts/ERC/IERC5169.sol\": {\r\n      \"content\": \"/* Attestation decode and validation */\\n/* AlphaWallet 2021 - 2022 */\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.16;\\n\\ninterface IERC5169 {\\n    /// @dev This event emits when the scriptURI is updated,\\n    /// so wallets implementing this interface can update a cached script\\n    event ScriptUpdate(string[]);\\n\\n    /// @notice Get the scriptURI for the contract\\n    /// @return The scriptURI\\n    function scriptURI() external view returns (string[] memory);\\n\\n    /// @notice Update the scriptURI\\n    /// emits event ScriptUpdate(string[])\\n    function setScriptURI(string[] memory) external;\\n}\\n\"\r\n    },\r\n    \"lib/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC-165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n  /**\\r\\n   * @dev Returns true if this contract implements the interface defined by\\r\\n   * `interfaceId`. See the corresponding\\r\\n   * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\r\\n   * to learn more about how these ids are created.\\r\\n   *\\r\\n   * This function call must use less than 30 000 gas.\\r\\n   */\\r\\n  function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"lib/DoubleEndedQueue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/DoubleEndedQueue.sol)\\r\\n// Modified by Pandora Labs to support native uint256 operations\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\n/**\\r\\n * @dev A sequence of items with the ability to efficiently push and pop items (i.e. insert and remove) on both ends of\\r\\n * the sequence (called front and back). Among other access patterns, it can be used to implement efficient LIFO and\\r\\n * FIFO queues. Storage use is optimized, and all operations are O(1) constant time. This includes {clear}, given that\\r\\n * the existing queue contents are left in storage.\\r\\n *\\r\\n * The struct is called `Uint256Deque`. This data structure can only be used in storage, and not in memory.\\r\\n *\\r\\n * ```solidity\\r\\n * DoubleEndedQueue.Uint256Deque queue;\\r\\n * ```\\r\\n */\\r\\nlibrary DoubleEndedQueue {\\r\\n  /**\\r\\n   * @dev An operation (e.g. {front}) couldn't be completed due to the queue being empty.\\r\\n   */\\r\\n  error QueueEmpty();\\r\\n\\r\\n  /**\\r\\n   * @dev A push operation couldn't be completed due to the queue being full.\\r\\n   */\\r\\n  error QueueFull();\\r\\n\\r\\n  /**\\r\\n   * @dev An operation (e.g. {at}) couldn't be completed due to an index being out of bounds.\\r\\n   */\\r\\n  error QueueOutOfBounds();\\r\\n\\r\\n  /**\\r\\n   * @dev Indices are 128 bits so begin and end are packed in a single storage slot for efficient access.\\r\\n   *\\r\\n   * Struct members have an underscore prefix indicating that they are \\\"private\\\" and should not be read or written to\\r\\n   * directly. Use the functions provided below instead. Modifying the struct manually may violate assumptions and\\r\\n   * lead to unexpected behavior.\\r\\n   *\\r\\n   * The first item is at data[begin] and the last item is at data[end - 1]. This range can wrap around.\\r\\n   */\\r\\n  struct Uint256Deque {\\r\\n    uint128 _begin;\\r\\n    uint128 _end;\\r\\n    mapping(uint128 index => uint256) _data;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Inserts an item at the end of the queue.\\r\\n   *\\r\\n   * Reverts with {QueueFull} if the queue is full.\\r\\n   */\\r\\n  function pushBack(Uint256Deque storage deque, uint256 value) internal {\\r\\n    unchecked {\\r\\n      uint128 backIndex = deque._end;\\r\\n      if (backIndex + 1 == deque._begin) revert QueueFull();\\r\\n      deque._data[backIndex] = value;\\r\\n      deque._end = backIndex + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes the item at the end of the queue and returns it.\\r\\n   *\\r\\n   * Reverts with {QueueEmpty} if the queue is empty.\\r\\n   */\\r\\n  function popBack(\\r\\n    Uint256Deque storage deque\\r\\n  ) internal returns (uint256 value) {\\r\\n    unchecked {\\r\\n      uint128 backIndex = deque._end;\\r\\n      if (backIndex == deque._begin) revert QueueEmpty();\\r\\n      --backIndex;\\r\\n      value = deque._data[backIndex];\\r\\n      delete deque._data[backIndex];\\r\\n      deque._end = backIndex;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Inserts an item at the beginning of the queue.\\r\\n   *\\r\\n   * Reverts with {QueueFull} if the queue is full.\\r\\n   */\\r\\n  function pushFront(Uint256Deque storage deque, uint256 value) internal {\\r\\n    unchecked {\\r\\n      uint128 frontIndex = deque._begin - 1;\\r\\n      if (frontIndex == deque._end) revert QueueFull();\\r\\n      deque._data[frontIndex] = value;\\r\\n      deque._begin = frontIndex;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Removes the item at the beginning of the queue and returns it.\\r\\n   *\\r\\n   * Reverts with `QueueEmpty` if the queue is empty.\\r\\n   */\\r\\n  function popFront(\\r\\n    Uint256Deque storage deque\\r\\n  ) internal returns (uint256 value) {\\r\\n    unchecked {\\r\\n      uint128 frontIndex = deque._begin;\\r\\n      if (frontIndex == deque._end) revert QueueEmpty();\\r\\n      value = deque._data[frontIndex];\\r\\n      delete deque._data[frontIndex];\\r\\n      deque._begin = frontIndex + 1;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the item at the beginning of the queue.\\r\\n   *\\r\\n   * Reverts with `QueueEmpty` if the queue is empty.\\r\\n   */\\r\\n  function front(\\r\\n    Uint256Deque storage deque\\r\\n  ) internal view returns (uint256 value) {\\r\\n    if (empty(deque)) revert QueueEmpty();\\r\\n    return deque._data[deque._begin];\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the item at the end of the queue.\\r\\n   *\\r\\n   * Reverts with `QueueEmpty` if the queue is empty.\\r\\n   */\\r\\n  function back(\\r\\n    Uint256Deque storage deque\\r\\n  ) internal view returns (uint256 value) {\\r\\n    if (empty(deque)) revert QueueEmpty();\\r\\n    unchecked {\\r\\n      return deque._data[deque._end - 1];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Return the item at a position in the queue given by `index`, with the first item at 0 and last item at\\r\\n   * `length(deque) - 1`.\\r\\n   *\\r\\n   * Reverts with `QueueOutOfBounds` if the index is out of bounds.\\r\\n   */\\r\\n  function at(\\r\\n    Uint256Deque storage deque,\\r\\n    uint256 index\\r\\n  ) internal view returns (uint256 value) {\\r\\n    if (index >= length(deque)) revert QueueOutOfBounds();\\r\\n    // By construction, length is a uint128, so the check above ensures that index can be safely downcast to uint128\\r\\n    unchecked {\\r\\n      return deque._data[deque._begin + uint128(index)];\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Resets the queue back to being empty.\\r\\n   *\\r\\n   * NOTE: The current items are left behind in storage. This does not affect the functioning of the queue, but misses\\r\\n   * out on potential gas refunds.\\r\\n   */\\r\\n  function clear(Uint256Deque storage deque) internal {\\r\\n    deque._begin = 0;\\r\\n    deque._end = 0;\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns the number of items in the queue.\\r\\n   */\\r\\n  function length(Uint256Deque storage deque) internal view returns (uint256) {\\r\\n    unchecked {\\r\\n      return uint256(deque._end - deque._begin);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /**\\r\\n   * @dev Returns true if the queue is empty.\\r\\n   */\\r\\n  function empty(Uint256Deque storage deque) internal view returns (bool) {\\r\\n    return deque._end == deque._begin;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"lib/ERC721Receiver.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nabstract contract ERC721Receiver {\\r\\n  function onERC721Received(\\r\\n    address,\\r\\n    address,\\r\\n    uint256,\\r\\n    bytes calldata\\r\\n  ) external virtual returns (bytes4) {\\r\\n    return ERC721Receiver.onERC721Received.selector;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"IERC404.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {IERC165} from \\\"lib/IERC165.sol\\\";\\r\\n\\r\\ninterface IERC404 is IERC165 {\\r\\n  event ERC20Approval(address owner, address spender, uint256 value);\\r\\n  event ApprovalForAll(\\r\\n    address indexed owner,\\r\\n    address indexed operator,\\r\\n    bool approved\\r\\n  );\\r\\n  event ERC721Approval(\\r\\n    address indexed owner,\\r\\n    address indexed spender,\\r\\n    uint256 indexed id\\r\\n  );\\r\\n  event ERC20Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n  event ERC721Transfer(\\r\\n    address indexed from,\\r\\n    address indexed to,\\r\\n    uint256 indexed id\\r\\n  );\\r\\n\\r\\n  error NotFound();\\r\\n  error InvalidId();\\r\\n  error AlreadyExists();\\r\\n  error InvalidRecipient();\\r\\n  error InvalidSender();\\r\\n  error InvalidSpender();\\r\\n  error InvalidOperator();\\r\\n  error UnsafeRecipient();\\r\\n  error NotERC721TransferExempt();\\r\\n  error Unauthorized();\\r\\n  error InsufficientAllowance();\\r\\n  error DecimalsTooLow();\\r\\n  error CannotRemoveFromERC721TransferExempt();\\r\\n  error PermitDeadlineExpired();\\r\\n  error InvalidSigner();\\r\\n  error InvalidApproval();\\r\\n  error OwnedIndexOverflow();\\r\\n\\r\\n  function name() external view returns (string memory);\\r\\n  function symbol() external view returns (string memory);\\r\\n  function decimals() external view returns (uint8);\\r\\n  function totalSupply() external view returns (uint256);\\r\\n  function erc20TotalSupply() external view returns (uint256);\\r\\n  function erc721TotalSupply() external view returns (uint256);\\r\\n  function balanceOf(address owner_) external view returns (uint256);\\r\\n  function erc721BalanceOf(address owner_) external view returns (uint256);\\r\\n  function erc20BalanceOf(address owner_) external view returns (uint256);\\r\\n  function erc721TransferExempt(address account_) external view returns (bool);\\r\\n  function isApprovedForAll(\\r\\n    address owner_,\\r\\n    address operator_\\r\\n  ) external view returns (bool);\\r\\n  function allowance(\\r\\n    address owner_,\\r\\n    address spender_\\r\\n  ) external view returns (uint256);\\r\\n  function owned(address owner_) external view returns (uint256[] memory);\\r\\n  function ownerOf(uint256 id_) external view returns (address erc721Owner);\\r\\n  function tokenURI(uint256 id_) external view returns (string memory);\\r\\n  function approve(\\r\\n    address spender_,\\r\\n    uint256 valueOrId_\\r\\n  ) external returns (bool);\\r\\n  function setApprovalForAll(address operator_, bool approved_) external;\\r\\n  function transferFrom(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 valueOrId_\\r\\n  ) external returns (bool);\\r\\n  function transfer(address to_, uint256 amount_) external returns (bool);\\r\\n  function erc721TokensBankedInQueue() external view returns (uint256);\\r\\n  function safeTransferFrom(address from_, address to_, uint256 id_) external;\\r\\n  function safeTransferFrom(\\r\\n    address from_,\\r\\n    address to_,\\r\\n    uint256 id_,\\r\\n    bytes calldata data_\\r\\n  ) external;\\r\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n  function permit(\\r\\n    address owner_,\\r\\n    address spender_,\\r\\n    uint256 value_,\\r\\n    uint256 deadline_,\\r\\n    uint8 v_,\\r\\n    bytes32 r_,\\r\\n    bytes32 s_\\r\\n  ) external;\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialMintRecipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotRemoveFromERC721TransferExempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecimalsTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidApproval\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperator\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotERC721TransferExempt\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFound\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OwnedIndexOverflow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermitDeadlineExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsafeRecipient\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"BaseUriUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC20Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ERC20Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ERC20Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ERC721Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"indexed\":false,\"internalType\":\"struct PoolData\",\"name\":\"poolData\",\"type\":\"tuple\"}],\"name\":\"Initialize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"ReceiveTax\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"RefundETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"name\":\"ScriptUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"_transferWithTax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"calculateERC721Transfers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPoolData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"fee\",\"type\":\"uint24\"},{\"internalType\":\"uint256\",\"name\":\"positionId\",\"type\":\"uint256\"},{\"internalType\":\"uint160\",\"name\":\"sqrtPriceX96\",\"type\":\"uint160\"},{\"internalType\":\"int24\",\"name\":\"tickLower\",\"type\":\"int24\"},{\"internalType\":\"int24\",\"name\":\"tickUpper\",\"type\":\"int24\"},{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTick\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc20BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"erc721BalanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TokensBankedInQueue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc721TotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc721TransferExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialMintRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"liquidity\",\"type\":\"uint128\"}],\"name\":\"liquifyAndCollect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"owned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"erc721Owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionManagerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scriptURI\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved_\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"newScriptURI\",\"type\":\"string[]\"}],\"name\":\"setScriptURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"swapAndLiquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouterAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxPercent\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tickThreshold\",\"outputs\":[{\"internalType\":\"int24\",\"name\":\"\",\"type\":\"int24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"valueOrId_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"units\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "WHO404", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001405e07832f8a3f8d010246188c382b0505815c80000000000000000000000001405e07832f8a3f8d010246188c382b0505815c8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}