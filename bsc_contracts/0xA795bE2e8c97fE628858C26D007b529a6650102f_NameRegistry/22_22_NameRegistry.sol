// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/presets/ERC721PresetMinterPauserAutoId.sol";

contract NameRegistry is
    Context,
    AccessControlEnumerable,
    ERC721Enumerable,
    ERC721Burnable,
    ERC721Pausable
{
    using Counters for Counters.Counter;

    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;

    mapping(address => uint256) reverseRegistry;

    uint256 fee;
    address payable feeDestination;

    event ReverseRecordSet(address indexed owner, uint256 indexed name);
    event MintFeeChanged(address indexed owner, uint256 newFee);
    event FeeDestinationChanged(address indexed owner, address newDestination);

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE`, `ADMIN_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(
        ) ERC721("VW Name Service", "VWNS") {
            _baseTokenURI = "ipfs://test";

            _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
            _setupRole(ADMIN_ROLE, _msgSender());
        }
    
    function mintName(uint256 name) external payable {
        require(msg.value == fee, "Must include fee");
        require(name > 65535, "Name too small");
        require(_msgSender() == tx.origin, "Contract call not allowed");
        _safeMint(_msgSender(), name);
        // Set this name if no reverse record is present
        if (reverseRegistry[_msgSender()] == 0) {
            setReverseRecord(name);
        }
        if (fee != 0 && feeDestination != address(0)) {
            (bool res, ) = feeDestination.call{value: msg.value}("");
            require(res, "Failed to forward fee");
        }
    }

    function reverseResolve(address owner) external view returns (uint256) {
        if (reverseRegistry[owner] != 0 && ownerOf(reverseRegistry[owner]) == owner) {
            return reverseRegistry[owner];
        }
        return 0;
    }

    function setReverseRecord(uint256 name) public {
        require(ownerOf(name) == _msgSender(), "Not owner of name");
        reverseRegistry[_msgSender()] = name;
        emit ReverseRecordSet(_msgSender(), name);
    }

    function setMintFee(uint256 _fee) public {
        require(hasRole(ADMIN_ROLE, _msgSender()), "NFT: must have admin role");
        fee = _fee;
        emit MintFeeChanged(_msgSender(), fee);
    }

    function setFeeDestination(address payable _feeDest) public {
        require(hasRole(ADMIN_ROLE, _msgSender()), "NFT: must have admin role");
        feeDestination = _feeDest;
        emit FeeDestinationChanged(_msgSender(), _feeDest);
    }

    function setBaseTokenURI(string calldata uri) public {
        require(hasRole(ADMIN_ROLE, _msgSender()), "NFT: must have admin role");
        _baseTokenURI = uri;
    }

    function tokenURI(uint256 _tokenId) public view override returns (string memory) {
        return string(abi.encodePacked(_baseTokenURI, "/", uintToString(_tokenId), ".json"));
    }
    
    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function uintToString(uint v) internal pure returns (string memory) {
        uint maxlength = 100;
        bytes memory reversed = new bytes(maxlength);
        uint i = 0;
        while (v != 0) {
            uint remainder = v % 10;
            v = v / 10;
            reversed[i++] = bytes1(uint8(48 + remainder));
        }
        bytes memory s = new bytes(i); // i + 1 is inefficient
        for (uint j = 0; j < i; j++) {
            s[j] = reversed[i - j - 1]; // to avoid the off-by-one error
        }
        string memory str = string(s);  // memory isn't implicitly convertible to storage
        return str;
    }
    
    function nameCollectionOf(address owner) external view returns (uint256[] memory) {
        uint256 nftBalance = balanceOf(owner);
        uint256[] memory nftCollection = new uint256[](nftBalance);
        for (uint256 i = 0 ; i < nftBalance; i++) {
            uint256 tokenId = tokenOfOwnerByIndex(owner, i);
            nftCollection[i] = tokenId;
        }
        return nftCollection;
    }

    function _beforeTokenTransfer(
        address from,
        address to,
        uint256 tokenId
    ) internal virtual override(ERC721, ERC721Enumerable, ERC721Pausable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId)
        public
        view
        virtual
        override(AccessControlEnumerable, ERC721, ERC721Enumerable)
        returns (bool)
    {
        return super.supportsInterface(interfaceId);
    }
}