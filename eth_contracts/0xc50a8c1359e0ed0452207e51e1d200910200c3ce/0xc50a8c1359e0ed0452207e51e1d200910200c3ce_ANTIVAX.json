{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ANTIVAX.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/*\\n\\nANTI-VAX (AVAX)\\nDon't vax me bro.\\n\\nhttps://antivax.me\\n\\n*/\\n\\ninterface Callable {\\n\\tfunction tokenCallback(address _from, uint256 _tokens, bytes calldata _data) external returns (bool);\\n}\\n\\ninterface Router {\\n\\tfunction factory() external view returns (address);\\n\\tfunction positionManager() external view returns (address);\\n\\tfunction WETH9() external view returns (address);\\n}\\n\\ninterface Factory {\\n\\tfunction createPool(address _tokenA, address _tokenB, uint24 _fee) external returns (address);\\n}\\n\\ninterface Pool {\\n\\tfunction initialize(uint160 _sqrtPriceX96) external;\\n}\\n\\ninterface PositionManager {\\n\\tstruct MintParams {\\n\\t\\taddress token0;\\n\\t\\taddress token1;\\n\\t\\tuint24 fee;\\n\\t\\tint24 tickLower;\\n\\t\\tint24 tickUpper;\\n\\t\\tuint256 amount0Desired;\\n\\t\\tuint256 amount1Desired;\\n\\t\\tuint256 amount0Min;\\n\\t\\tuint256 amount1Min;\\n\\t\\taddress recipient;\\n\\t\\tuint256 deadline;\\n\\t}\\n\\tstruct CollectParams {\\n\\t\\tuint256 tokenId;\\n\\t\\taddress recipient;\\n\\t\\tuint128 amount0Max;\\n\\t\\tuint128 amount1Max;\\n\\t}\\n\\tfunction mint(MintParams calldata) external payable returns (uint256 tokenId, uint128 liquidity, uint256 amount0, uint256 amount1);\\n\\tfunction collect(CollectParams calldata) external payable returns (uint256 amount0, uint256 amount1);\\n}\\n\\ninterface ERC20 {\\n\\tfunction balanceOf(address) external view returns (uint256);\\n\\tfunction transfer(address, uint256) external returns (bool);\\n}\\n\\ninterface WETH is ERC20 {\\n\\tfunction withdraw(uint256) external;\\n}\\n\\n\\ncontract Team {\\n\\n\\tRouter constant private ROUTER = Router(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\n\\n\\tstruct Share {\\n\\t\\taddress payable user;\\n\\t\\tuint256 shares;\\n\\t}\\n\\tShare[] public shares;\\n\\tuint256 public totalShares;\\n\\tERC20 public token;\\n\\n\\n\\tconstructor() {\\n\\t\\ttoken = ERC20(msg.sender);\\n\\t\\t_addShare(0x4EA1aE75549E7Ff811e085e488E4B4838E15437C, 6);\\n\\t\\t_addShare(0x58861456b23F1b7E4C223aE173F5e754ac9f21Ea, 6);\\n\\t\\t_addShare(0xC8102750bAa229321de3A468f891D37c667e0d03, 6);\\n\\t\\t_addShare(0x732422A4afDe3DaE61657F0731AC1101b061918B, 1);\\n\\t\\t_addShare(0x10f9D64b91c44b0DE1688d78cFF833Ae061268C6, 1);\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\tfunction withdrawETH() public {\\n\\t\\tuint256 _balance = address(this).balance;\\n\\t\\tif (_balance > 0) {\\n\\t\\t\\tfor (uint256 i = 0; i < shares.length; i++) {\\n\\t\\t\\t\\tShare memory _share = shares[i];\\n\\t\\t\\t\\t!_share.user.send(_balance * _share.shares / totalShares);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawToken(ERC20 _token) public {\\n\\t\\tWETH _weth = WETH(ROUTER.WETH9());\\n\\t\\tif (address(_token) == address(_weth)) {\\n\\t\\t\\t_weth.withdraw(_weth.balanceOf(address(this)));\\n\\t\\t\\twithdrawETH();\\n\\t\\t} else {\\n\\t\\t\\tuint256 _balance = _token.balanceOf(address(this));\\n\\t\\t\\tif (_balance > 0) {\\n\\t\\t\\t\\tfor (uint256 i = 0; i < shares.length; i++) {\\n\\t\\t\\t\\t\\tShare memory _share = shares[i];\\n\\t\\t\\t\\t\\t_token.transfer(_share.user, _balance * _share.shares / totalShares);\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction withdrawWETH() public {\\n\\t\\twithdrawToken(ERC20(ROUTER.WETH9()));\\n\\t}\\n\\n\\tfunction withdrawFees() external {\\n\\t\\twithdrawWETH();\\n\\t\\twithdrawToken(token);\\n\\t}\\n\\n\\n\\tfunction _addShare(address _user, uint256 _shares) internal {\\n\\t\\tshares.push(Share(payable(_user), _shares));\\n\\t\\ttotalShares += _shares;\\n\\t}\\n}\\n\\n\\ncontract ANTIVAX {\\n\\n\\tuint256 constant private UINT_MAX = type(uint256).max;\\n\\tuint128 constant private UINT128_MAX = type(uint128).max;\\n\\tuint256 constant private INITIAL_SUPPLY = 72e25; // 720,000,000 AVAX\\n\\tuint256 constant private TREASURY_PERCENT = 5; // 5% = 36,000,000 AVAX\\n\\tRouter constant private ROUTER = Router(0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45);\\n\\tuint256 constant private INITIAL_ETH_MC = 100 ether; // 100 ETH initial market cap price\\n\\tuint256 constant private UPPER_ETH_MC = 1e6 ether; // 1,000,000 ETH max market cap price\\n\\n\\tint24 constant private MIN_TICK = -887272;\\n\\tint24 constant private MAX_TICK = -MIN_TICK;\\n\\tuint160 constant private MIN_SQRT_RATIO = 4295128739;\\n\\tuint160 constant private MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n\\tstring constant public name = \\\"ANTI-VAX\\\";\\n\\tstring constant public symbol = \\\"AVAX\\\";\\n\\tuint8 constant public decimals = 18;\\n\\n\\tstruct User {\\n\\t\\tuint256 balance;\\n\\t\\tmapping(address => uint256) allowance;\\n\\t}\\n\\n\\tstruct Info {\\n\\t\\tTeam team;\\n\\t\\taddress pool;\\n\\t\\tuint256 totalSupply;\\n\\t\\tmapping(address => User) users;\\n\\t\\tuint256 positionId;\\n\\t}\\n\\tInfo private info;\\n\\n\\n\\tevent Transfer(address indexed from, address indexed to, uint256 tokens);\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 tokens);\\n\\n\\n\\tconstructor() {\\n\\t\\tinfo.team = new Team();\\n\\t\\taddress _this = address(this);\\n\\t\\taddress _weth = ROUTER.WETH9();\\n\\t\\t(uint160 _initialSqrtPrice, ) = _getPriceAndTickFromValues(_weth < _this, INITIAL_SUPPLY, INITIAL_ETH_MC);\\n\\t\\tinfo.pool = Factory(ROUTER.factory()).createPool(_this, _weth, 10000);\\n\\t\\tPool(pool()).initialize(_initialSqrtPrice);\\n\\t}\\n\\t\\n\\tfunction initialize() external {\\n\\t\\trequire(totalSupply() == 0);\\n\\t\\taddress _this = address(this);\\n\\t\\taddress _weth = ROUTER.WETH9();\\n\\t\\tbool _weth0 = _weth < _this;\\n\\t\\tPositionManager _pm = PositionManager(ROUTER.positionManager());\\n\\t\\tinfo.totalSupply = INITIAL_SUPPLY;\\n\\t\\tinfo.users[_this].balance = INITIAL_SUPPLY;\\n\\t\\temit Transfer(address(0x0), _this, INITIAL_SUPPLY);\\n\\t\\t_approve(_this, address(_pm), INITIAL_SUPPLY);\\n\\t\\t( , int24 _minTick) = _getPriceAndTickFromValues(_weth0, INITIAL_SUPPLY, INITIAL_ETH_MC);\\n\\t\\t( , int24 _maxTick) = _getPriceAndTickFromValues(_weth0, INITIAL_SUPPLY, UPPER_ETH_MC);\\n\\t\\t(info.positionId, , , ) = _pm.mint(PositionManager.MintParams({\\n\\t\\t\\ttoken0: _weth0 ? _weth : _this,\\n\\t\\t\\ttoken1: !_weth0 ? _weth : _this,\\n\\t\\t\\tfee: 10000,\\n\\t\\t\\ttickLower: _weth0 ? _maxTick : _minTick,\\n\\t\\t\\ttickUpper: !_weth0 ? _maxTick : _minTick,\\n\\t\\t\\tamount0Desired: _weth0 ? 0 : INITIAL_SUPPLY * (100 - TREASURY_PERCENT) / 100,\\n\\t\\t\\tamount1Desired: !_weth0 ? 0 : INITIAL_SUPPLY * (100 - TREASURY_PERCENT) / 100,\\n\\t\\t\\tamount0Min: 0,\\n\\t\\t\\tamount1Min: 0,\\n\\t\\t\\trecipient: _this,\\n\\t\\t\\tdeadline: block.timestamp\\n\\t\\t}));\\n\\t\\t_transfer(_this, 0x6Ae7DE5fD16D36953Cbc352e6a9BD55226d072E1, balanceOf(_this));\\n\\t}\\n\\n\\tfunction collectTradingFees() external {\\n\\t\\tPositionManager _pm = PositionManager(ROUTER.positionManager());\\n\\t\\t_pm.collect(PositionManager.CollectParams({\\n\\t\\t\\ttokenId: position(),\\n\\t\\t\\trecipient: team(),\\n\\t\\t\\tamount0Max: UINT128_MAX,\\n\\t\\t\\tamount1Max: UINT128_MAX\\n\\t\\t}));\\n\\t\\tinfo.team.withdrawFees();\\n\\t}\\n\\n\\tfunction transfer(address _to, uint256 _tokens) external returns (bool) {\\n\\t\\treturn _transfer(msg.sender, _to, _tokens);\\n\\t}\\n\\n\\tfunction approve(address _spender, uint256 _tokens) external returns (bool) {\\n\\t\\treturn _approve(msg.sender, _spender, _tokens);\\n\\t}\\n\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokens) external returns (bool) {\\n\\t\\tuint256 _allowance = allowance(_from, msg.sender);\\n\\t\\trequire(_allowance >= _tokens);\\n\\t\\tif (_allowance != UINT_MAX) {\\n\\t\\t\\tinfo.users[_from].allowance[msg.sender] -= _tokens;\\n\\t\\t}\\n\\t\\treturn _transfer(_from, _to, _tokens);\\n\\t}\\n\\n\\tfunction transferAndCall(address _to, uint256 _tokens, bytes calldata _data) external returns (bool) {\\n\\t\\t_transfer(msg.sender, _to, _tokens);\\n\\t\\tuint32 _size;\\n\\t\\tassembly {\\n\\t\\t\\t_size := extcodesize(_to)\\n\\t\\t}\\n\\t\\tif (_size > 0) {\\n\\t\\t\\trequire(Callable(_to).tokenCallback(msg.sender, _tokens, _data));\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\n\\tfunction team() public view returns (address) {\\n\\t\\treturn address(info.team);\\n\\t}\\n\\n\\tfunction pool() public view returns (address) {\\n\\t\\treturn info.pool;\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn info.totalSupply;\\n\\t}\\n\\n\\tfunction balanceOf(address _user) public view returns (uint256) {\\n\\t\\treturn info.users[_user].balance;\\n\\t}\\n\\n\\tfunction allowance(address _user, address _spender) public view returns (uint256) {\\n\\t\\treturn info.users[_user].allowance[_spender];\\n\\t}\\n\\n\\tfunction position() public view returns (uint256) {\\n\\t\\treturn info.positionId;\\n\\t}\\n\\n\\n\\tfunction _approve(address _owner, address _spender, uint256 _tokens) internal returns (bool) {\\n\\t\\tinfo.users[_owner].allowance[_spender] = _tokens;\\n\\t\\temit Approval(_owner, _spender, _tokens);\\n\\t\\treturn true;\\n\\t}\\n\\t\\n\\tfunction _transfer(address _from, address _to, uint256 _tokens) internal returns (bool) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(balanceOf(_from) >= _tokens);\\n\\t\\t\\tinfo.users[_from].balance -= _tokens;\\n\\t\\t\\tinfo.users[_to].balance += _tokens;\\n\\t\\t\\temit Transfer(_from, _to, _tokens);\\n\\t\\t\\treturn true;\\n\\t\\t}\\n\\t}\\n\\n\\n\\tfunction _getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n\\t\\tunchecked {\\n\\t\\t\\tuint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n\\t\\t\\trequire(absTick <= uint256(int256(MAX_TICK)), 'T');\\n\\n\\t\\t\\tuint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n\\t\\t\\tif (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n\\t\\t\\tif (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n\\t\\t\\tif (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n\\t\\t\\tif (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n\\t\\t\\tif (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n\\t\\t\\tif (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n\\t\\t\\tif (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n\\t\\t\\tif (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n\\t\\t\\tif (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n\\t\\t\\tif (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n\\t\\t\\tif (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n\\t\\t\\tif (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n\\t\\t\\tif (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n\\t\\t\\tif (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n\\t\\t\\tif (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n\\t\\t\\tif (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n\\t\\t\\tif (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n\\t\\t\\tif (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n\\t\\t\\tif (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n\\t\\t\\tif (tick > 0) ratio = type(uint256).max / ratio;\\n\\n\\t\\t\\tsqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n\\t\\tunchecked {\\n\\t\\t\\trequire(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n\\t\\t\\tuint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n\\t\\t\\tuint256 r = ratio;\\n\\t\\t\\tuint256 msb = 0;\\n\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(5, gt(r, 0xFFFFFFFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(4, gt(r, 0xFFFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(3, gt(r, 0xFF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(2, gt(r, 0xF))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := shl(1, gt(r, 0x3))\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet f := gt(r, 0x1)\\n\\t\\t\\t\\tmsb := or(msb, f)\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (msb >= 128) r = ratio >> (msb - 127);\\n\\t\\t\\telse r = ratio << (127 - msb);\\n\\n\\t\\t\\tint256 log_2 = (int256(msb) - 128) << 64;\\n\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(63, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(62, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(61, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(60, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(59, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(58, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(57, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(56, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(55, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(54, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(53, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(52, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(51, f))\\n\\t\\t\\t\\tr := shr(f, r)\\n\\t\\t\\t}\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tr := shr(127, mul(r, r))\\n\\t\\t\\t\\tlet f := shr(128, r)\\n\\t\\t\\t\\tlog_2 := or(log_2, shl(50, f))\\n\\t\\t\\t}\\n\\n\\t\\t\\tint256 log_sqrt10001 = log_2 * 255738958999603826347141;\\n\\n\\t\\t\\tint24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n\\t\\t\\tint24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n\\t\\t\\ttick = tickLow == tickHi ? tickLow : _getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _sqrt(uint256 _n) internal pure returns (uint256 result) {\\n\\t\\tunchecked {\\n\\t\\t\\tuint256 _tmp = (_n + 1) / 2;\\n\\t\\t\\tresult = _n;\\n\\t\\t\\twhile (_tmp < result) {\\n\\t\\t\\t\\tresult = _tmp;\\n\\t\\t\\t\\t_tmp = (_n / _tmp + _tmp) / 2;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getPriceAndTickFromValues(bool _weth0, uint256 _tokens, uint256 _weth) internal pure returns (uint160 price, int24 tick) {\\n\\t\\tuint160 _tmpPrice = uint160(_sqrt(2**192 / (!_weth0 ? _tokens : _weth) * (_weth0 ? _tokens : _weth)));\\n\\t\\ttick = _getTickAtSqrtRatio(_tmpPrice);\\n\\t\\ttick = tick - (tick % 200);\\n\\t\\tprice = _getSqrtRatioAtTick(tick);\\n\\t}\\n}\\n\\n\\ncontract Deploy {\\n\\tANTIVAX immutable public antivax;\\n\\tconstructor() {\\n\\t\\tantivax = new ANTIVAX();\\n\\t\\tantivax.initialize();\\n\\t}\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectTradingFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"position\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"team\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"transferAndCall\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ANTIVAX", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}