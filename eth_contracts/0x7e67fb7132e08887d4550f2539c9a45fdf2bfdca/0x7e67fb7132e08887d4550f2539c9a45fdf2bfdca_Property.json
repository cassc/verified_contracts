{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Property.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./interfaces/IManagement.sol\\\";\\nimport \\\"./interfaces/IProperty.sol\\\";\\nimport \\\"./interfaces/IEIP712.sol\\\";\\n\\ncontract Property is IProperty, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    uint256 private constant FEE_DENOMINATOR = 10**4;\\n\\n    // the property ID\\n    uint256 public propertyId;\\n\\n    // list of booking indexes\\n    uint256[] public bookingIds;\\n\\n    // host of the property\\n    address public host;\\n\\n    // address of booking payment recipient\\n    address public paymentReceiver;\\n\\n    // address of the property's factory\\n    address public factory;\\n\\n    // mapping of addresses that have an authority to cancel a booking\\n    mapping(address => bool) public authorized;\\n\\n    // returns the booking info for a given booking id\\n    mapping(uint256 => BookingInfo) private booking;\\n\\n    // linked management instance\\n    IManagement public management;\\n\\n    // returns the insurance info for a given booking id\\n    mapping(uint256 => InsuranceInfo) private insurance;\\n\\n    // mapping of bookings that have pending insurance fees\\n    mapping(uint256 => bool) public isInsuranceFeePending;\\n\\n    function init(\\n        uint256 _propertyId,\\n        address _host,\\n        address _management,\\n        address _delegate\\n    ) external initializer {\\n        __Ownable_init();\\n        __ReentrancyGuard_init();\\n\\n        propertyId = _propertyId;\\n        host = _host;\\n        paymentReceiver = _host;\\n        factory = _msgSender();\\n        management = IManagement(_management);\\n        authorized[_delegate] = true;\\n    }\\n\\n    /**\\n       @notice Grant authorized role\\n       @dev    Caller must be HOST or AUTHORIZED ADDRESS\\n       @param _addr authorized address\\n     */\\n    function grantAuthorized(address _addr) external {\\n        address sender = _msgSender();\\n        require(sender == host || authorized[sender], \\\"Unauthorized\\\");\\n        require(_addr != address(0), \\\"ZeroAddress\\\");\\n        require(!authorized[_addr], \\\"GrantedAlready\\\");\\n\\n        authorized[_addr] = true;\\n\\n        emit GrantAuthorized(_addr);\\n    }\\n\\n    /**\\n       @notice Revoke authorized role\\n       @dev    Caller must be HOST or AUTHORIZED ADDRESS\\n       @param _addr authorized address\\n     */\\n    function revokeAuthorized(address _addr) external {\\n        address sender = _msgSender();\\n        require(sender == host || authorized[sender], \\\"Unauthorized\\\");\\n        require(_addr != address(0), \\\"ZeroAddress\\\");\\n        require(authorized[_addr], \\\"NotYetGranted\\\");\\n\\n        authorized[_addr] = false;\\n\\n        emit RevokeAuthorized(_addr);\\n    }\\n\\n    /**\\n       @notice Update host wallet\\n       @dev    Caller must be HOST or AUTHORIZED ADDRESS\\n       @param _addr new host address\\n     */\\n    function updateHost(address _addr) external {\\n        address sender = _msgSender();\\n        require(sender == host || authorized[sender], \\\"Unauthorized\\\");\\n        require(_addr != address(0), \\\"ZeroAddress\\\");\\n        require(_addr != host, \\\"HostExisted\\\");\\n\\n        host = _addr;\\n\\n        emit NewHost(_addr);\\n    }\\n\\n    /**\\n        @notice Update payment receiver wallet\\n        @dev    Caller must be HOST or AUTHORIZED ADDRESS\\n        @param _addr new payment receiver address\\n     */\\n    function updatePaymentReceiver(address _addr) external {\\n        address sender = _msgSender();\\n        require(sender == host || authorized[sender], \\\"Unauthorized\\\");\\n        require(_addr != address(0), \\\"ZeroAddress\\\");\\n        require(_addr != paymentReceiver, \\\"PaymentReceiverExisted\\\");\\n\\n        paymentReceiver = _addr;\\n\\n        emit NewPaymentReceiver(_addr);\\n    }\\n\\n    /**\\n        @notice Update KYG status of the given booking ID\\n        @dev    Caller must be OPERATOR\\n        @param  _id booking ID\\n        @param  _status new KYG status\\n     */\\n    function updateKygStatusById(uint256 _id, KygStatus _status) external {\\n        require(_msgSender() == management.operator(), \\\"OnlyOperator\\\");\\n        BookingInfo memory info = booking[_id];\\n        require(info.guest != address(0), \\\"BookingNotFound\\\");\\n        require(\\n            info.balance > 0 || isInsuranceFeePending[_id],\\n            \\\"BookingAlreadyFinalized\\\"\\n        );\\n\\n        InsuranceInfo storage insuranceInfo = insurance[_id];\\n        require(insuranceInfo.damageProtectionFee > 0, \\\"InsuranceNotFound\\\");\\n\\n        // only accept to change status from IN_PROGRESS to PASSED/FAILED\\n        require(\\n            insuranceInfo.kygStatus == KygStatus.IN_PROGRESS,\\n            \\\"StatusAlreadyFinalized\\\"\\n        );\\n        require(\\n            _status == KygStatus.PASSED || _status == KygStatus.FAILED,\\n            \\\"InvalidKYGStatus\\\"\\n        );\\n        insuranceInfo.kygStatus = _status;\\n    }\\n\\n    /**\\n        @notice Book a property\\n        @dev    Caller can be ANYONE\\n        @param  _setting booking input setting by user\\n        @param  _signature signed message using EIP712\\n     */\\n    function book(BookingSetting calldata _setting, bytes calldata _signature)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n        _validateSetting(_setting);\\n\\n        // verify signed message\\n        IEIP712(management.eip712()).verify(propertyId, _setting, _signature);\\n\\n        // contract charges booking payment\\n        address sender = _msgSender();\\n        if (_setting.paymentToken == address(0)) {\\n            require(msg.value == _setting.bookingAmount, \\\"InsufficientPayment\\\");\\n        } else {\\n            IERC20Upgradeable(_setting.paymentToken).safeTransferFrom(\\n                sender,\\n                address(this),\\n                _setting.bookingAmount\\n            );\\n        }\\n\\n        // Update a new booking record\\n        BookingInfo storage bookingInfo = booking[_setting.bookingId];\\n        bookingInfo.checkIn = _setting.checkIn;\\n        bookingInfo.checkOut = _setting.checkOut;\\n        bookingInfo.balance = _setting.bookingAmount;\\n        bookingInfo.feeNumerator = management.feeNumerator();\\n        bookingInfo.guest = sender;\\n        bookingInfo.paymentToken = _setting.paymentToken;\\n        bookingInfo.paymentReceiver = paymentReceiver;\\n        if (_setting.referrer != address(0)) {\\n            bookingInfo.referrer = _setting.referrer;\\n            bookingInfo.referralFeeNumerator = management\\n                .referralFeeNumerator();\\n        }\\n\\n        if (_setting.insuranceInfo.damageProtectionFee > 0) {\\n            insurance[_setting.bookingId] = _setting.insuranceInfo;\\n        }\\n\\n        uint256 n = _setting.policies.length;\\n        for (uint256 i; i < n; i++)\\n            bookingInfo.policies.push(_setting.policies[i]);\\n\\n        bookingIds.push(_setting.bookingId);\\n\\n        emit NewBooking(sender, _setting.bookingId, block.timestamp);\\n    }\\n\\n    function _validateSetting(BookingSetting calldata _setting) private {\\n        uint256 current = block.timestamp;\\n\\n        // validate input params\\n        require(_setting.guest == _msgSender(), \\\"InvalidGuest\\\");\\n\\n        require(_setting.property == address(this), \\\"InvalidProperty\\\");\\n\\n        require(_setting.expireAt > current, \\\"RequestExpired\\\");\\n\\n        require(_setting.checkIn + 1 days >= current, \\\"InvalidCheckIn\\\");\\n\\n        require(\\n            _setting.checkOut >= _setting.checkIn + 1 days,\\n            \\\"InvalidCheckOut\\\"\\n        );\\n\\n        uint256 n = _setting.policies.length;\\n        require(n > 0, \\\"EmptyPolicies\\\");\\n        for (uint256 i = 0; i < n; i++) {\\n            require(\\n                _setting.bookingAmount >= _setting.policies[i].refundAmount,\\n                \\\"InvalidBookingAmount\\\"\\n            );\\n\\n            if (i < n - 1)\\n                require(\\n                    _setting.policies[i].expireAt <\\n                        _setting.policies[i + 1].expireAt,\\n                    \\\"InvalidPolicy\\\"\\n                );\\n        }\\n\\n        // validate states\\n        require(\\n            booking[_setting.bookingId].guest == address(0),\\n            \\\"BookingExisted\\\"\\n        );\\n\\n        require(\\n            management.paymentToken(_setting.paymentToken),\\n            \\\"InvalidPayment\\\"\\n        );\\n\\n        if (_setting.paymentToken == address(0)) {\\n            require(\\n                msg.value >= _setting.bookingAmount,\\n                \\\"InvalidTransactionValue\\\"\\n            );\\n        }\\n\\n        // validate insurance fee\\n        require(\\n            _setting.insuranceInfo.damageProtectionFee <\\n                (_setting.bookingAmount *\\n                    (FEE_DENOMINATOR - management.feeNumerator())) /\\n                    FEE_DENOMINATOR,\\n            \\\"InvalidInsuranceFee\\\"\\n        );\\n        require(\\n            _setting.insuranceInfo.damageProtectionFee == 0 ||\\n                _setting.insuranceInfo.feeReceiver != address(0),\\n            \\\"InvalidInsuranceFeeReceiver\\\"\\n        );\\n    }\\n\\n    /**\\n        @notice Cancel the booking for the given id\\n        @dev    Caller must be the booking owner\\n        @param  _bookingId the booking id to cancel\\n     */\\n    function cancel(uint256 _bookingId) external nonReentrant {\\n        BookingInfo memory info = booking[_bookingId];\\n        require(_msgSender() == info.guest, \\\"InvalidGuest\\\");\\n        require(info.balance > 0, \\\"PaidOrCancelledAlready\\\");\\n\\n        uint256 refundAmount;\\n        uint256 n = info.policies.length;\\n        uint256 current = block.timestamp;\\n        for (uint256 i = 0; i < n; i++) {\\n            if (info.policies[i].expireAt >= current) {\\n                refundAmount = info.policies[i].refundAmount;\\n                break;\\n            }\\n        }\\n\\n        // refund to the guest\\n        require(info.balance >= refundAmount, \\\"InsufficientBalance\\\");\\n        uint256 remainingAmount = info.balance - refundAmount;\\n        uint256 referralFee;\\n        if (info.referrer != address(0)) {\\n            referralFee = ((remainingAmount * info.referralFeeNumerator) /\\n                FEE_DENOMINATOR);\\n        }\\n        uint256 fee = (remainingAmount * info.feeNumerator) /\\n            FEE_DENOMINATOR -\\n            referralFee;\\n        uint256 hostRevenue = remainingAmount - fee - referralFee;\\n\\n        // transfer payment and charge fee\\n        _payment(info.paymentToken, info.guest, refundAmount);\\n        _payment(info.paymentToken, info.paymentReceiver, hostRevenue);\\n        _payment(info.paymentToken, management.treasury(), fee);\\n        if (info.referrer != address(0)) {\\n            _payment(info.paymentToken, info.referrer, referralFee);\\n        }\\n\\n        // update booking storage\\n        booking[_bookingId].status = BookingStatus.GUEST_CANCELLED;\\n        booking[_bookingId].balance = 0;\\n\\n        emit GuestCancelled(\\n            info.guest,\\n            _bookingId,\\n            current,\\n            refundAmount,\\n            hostRevenue,\\n            fee,\\n            referralFee\\n        );\\n    }\\n\\n    /**\\n        @notice Pay out the booking\\n        @dev    Caller can be ANYONE\\n        @param  _bookingId the booking id to pay out\\n     */\\n    function payout(uint256 _bookingId) external nonReentrant {\\n        BookingInfo memory info = booking[_bookingId];\\n\\n        require(info.guest != address(0), \\\"BookingNotFound\\\");\\n\\n        bool pendingFee = isInsuranceFeePending[_bookingId];\\n        require(info.balance > 0 || pendingFee, \\\"PaidOrCancelledAlready\\\");\\n\\n        if (info.balance == 0 && pendingFee) {\\n            _finalizeInsuranceFee(_bookingId);\\n            return;\\n        }\\n\\n        uint256 toBePaid;\\n        uint256 current = block.timestamp;\\n        {\\n            uint256 n = info.policies.length;\\n            uint256 delay = management.payoutDelay();\\n            if (info.policies[n - 1].expireAt + delay < current) {\\n                toBePaid = info.balance;\\n            } else {\\n                for (uint256 i = 0; i < n; i++) {\\n                    if (info.policies[i].expireAt + delay >= current) {\\n                        require(\\n                            info.balance >= info.policies[i].refundAmount,\\n                            \\\"InsufficientBalance\\\"\\n                        );\\n                        // we allow guests to deposit funds in property contract even though these funds are insufficient to charge payment later.\\n                        // Guests have to ask host for refund. Therefore, the condition to check if info.balance >= sum of required refund in policies is ignored.\\n                        // This also saves us some gas to validate a new booking input in function `_validateSetting`.\\n                        toBePaid = info.balance - info.policies[i].refundAmount;\\n                        break;\\n                    }\\n                }\\n            }\\n        }\\n\\n        require(toBePaid > 0, \\\"NotPaidEnough\\\");\\n        uint256 remain = info.balance - toBePaid;\\n\\n        InsuranceInfo memory insuranceInfo = insurance[_bookingId];\\n        bool isInsuranceFeeActive = insuranceInfo.damageProtectionFee > 0 &&\\n            insuranceInfo.kygStatus != KygStatus.FAILED;\\n        // check insurance fee to decide the amount can be paid for this time\\n        // if it is not the final payout and insurance fee is active\\n        if (isInsuranceFeeActive && remain > 0) {\\n            uint256 netRemain = remain -\\n                (remain * info.feeNumerator) /\\n                FEE_DENOMINATOR;\\n            // if booking balance is not sufficient for insurance fee\\n            // then the payout will be suspended until the final payout,\\n            // in order to ensure that booking balance is enough to charge insurance fee\\n            if (netRemain < insuranceInfo.damageProtectionFee) {\\n                remain = remain + toBePaid;\\n                toBePaid = 0;\\n            }\\n        }\\n\\n        BookingStatus status = remain == 0\\n            ? BookingStatus.FULLY_PAID\\n            : BookingStatus.PARTIAL_PAID;\\n\\n        // update booking storage\\n        booking[_bookingId].balance = remain;\\n        booking[_bookingId].status = status;\\n\\n        // split the payment\\n        uint256 referralFee;\\n        if (info.referrer != address(0)) {\\n            referralFee =\\n                (toBePaid * info.referralFeeNumerator) /\\n                FEE_DENOMINATOR;\\n        }\\n        uint256 fee = (toBePaid * info.feeNumerator) /\\n            FEE_DENOMINATOR -\\n            referralFee;\\n        uint256 hostRevenue = toBePaid - fee - referralFee;\\n\\n        // check logic to collect insurance fee in the final payout\\n        if (isInsuranceFeeActive && remain == 0) {\\n            // deduct insurance fee from host revenue\\n            // this subtraction won't be overflowed because remaining booking balance\\n            // is hold to ensure to be greater than insurance fee until the final payout\\n            hostRevenue = hostRevenue - insuranceInfo.damageProtectionFee;\\n            if (\\n                info.checkIn > current &&\\n                insuranceInfo.kygStatus != KygStatus.PASSED\\n            ) {\\n                // if it is the final payout but not reach check-in date and kyg status is not passed (still in progress)\\n                // then contract will continue holding insurance fee until check-in date\\n                isInsuranceFeePending[_bookingId] = true;\\n                // update booking storage\\n                status = BookingStatus.PENDING_INSURANCE_FEE;\\n                booking[_bookingId].status = status;\\n            } else {\\n                // collect insurance fee\\n                _payment(\\n                    info.paymentToken,\\n                    insuranceInfo.feeReceiver,\\n                    insuranceInfo.damageProtectionFee\\n                );\\n                emit InsuranceFeeCollected(\\n                    insuranceInfo.feeReceiver,\\n                    _bookingId,\\n                    current,\\n                    insuranceInfo.damageProtectionFee\\n                );\\n            }\\n        }\\n\\n        // transfer payment and charge booking fee\\n        _payment(info.paymentToken, info.paymentReceiver, hostRevenue);\\n        _payment(info.paymentToken, management.treasury(), fee);\\n        if (info.referrer != address(0)) {\\n            _payment(info.paymentToken, info.referrer, referralFee);\\n        }\\n\\n        emit PayOut(\\n            info.guest,\\n            _bookingId,\\n            current,\\n            hostRevenue,\\n            fee,\\n            referralFee,\\n            status\\n        );\\n    }\\n\\n    function _finalizeInsuranceFee(uint256 _bookingId) private {\\n        uint256 current = block.timestamp;\\n        BookingInfo memory info = booking[_bookingId];\\n        require(info.checkIn <= current, \\\"CannotChargeInsuranceFee\\\");\\n\\n        // update storage\\n        booking[_bookingId].status = BookingStatus.FULLY_PAID;\\n        isInsuranceFeePending[_bookingId] = false;\\n\\n        InsuranceInfo memory insuranceInfo = insurance[_bookingId];\\n        uint256 refundAmount;\\n        if (insuranceInfo.kygStatus == KygStatus.FAILED) {\\n            refundAmount = insuranceInfo.damageProtectionFee;\\n            // refund insurance fee to host\\n            _payment(info.paymentToken, info.paymentReceiver, refundAmount);\\n        } else {\\n            // collect pending insurance fee\\n            _payment(\\n                info.paymentToken,\\n                insuranceInfo.feeReceiver,\\n                insuranceInfo.damageProtectionFee\\n            );\\n            emit InsuranceFeeCollected(\\n                insuranceInfo.feeReceiver,\\n                _bookingId,\\n                current,\\n                insuranceInfo.damageProtectionFee\\n            );\\n        }\\n        emit PayOut(\\n            info.guest,\\n            _bookingId,\\n            current,\\n            refundAmount,\\n            0,\\n            0,\\n            BookingStatus.FULLY_PAID\\n        );\\n    }\\n\\n    function _payment(\\n        address _paymentToken,\\n        address _to,\\n        uint256 _amount\\n    ) private {\\n        if (_paymentToken == address(0)) {\\n            // solhint-disable-next-line avoid-low-level-calls\\n            (bool sent, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n            require(sent, \\\"TransferFailed\\\");\\n        } else {\\n            IERC20Upgradeable(_paymentToken).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n        @notice Cancel the booking\\n        @dev    Caller must be the host or authorized addresses\\n        @param  _bookingId the booking id to cancel\\n     */\\n    function cancelByHost(uint256 _bookingId) external nonReentrant {\\n        address sender = _msgSender();\\n        require(sender == host || authorized[sender], \\\"Unauthorized\\\");\\n\\n        BookingInfo memory info = booking[_bookingId];\\n        require(info.guest != address(0), \\\"BookingNotFound\\\");\\n        require(info.balance > 0, \\\"PaidOrCancelledAlready\\\");\\n\\n        // refund to the guest\\n        _payment(info.paymentToken, info.guest, info.balance);\\n\\n        // update booking storage\\n        booking[_bookingId].status = BookingStatus.HOST_CANCELLED;\\n        booking[_bookingId].balance = 0;\\n\\n        emit HostCancelled(sender, _bookingId, block.timestamp, info.balance);\\n    }\\n\\n    /**\\n        @notice Get a booking info by given ID\\n        @param _id booking ID\\n     */\\n    function getBookingById(uint256 _id)\\n        external\\n        view\\n        returns (BookingInfo memory)\\n    {\\n        return booking[_id];\\n    }\\n\\n    /**\\n        @notice Get the total number of bookings\\n     */\\n    function totalBookings() external view returns (uint256) {\\n        return bookingIds.length;\\n    }\\n\\n    /**\\n        @notice Get insurance info of given booking ID\\n        @param _id booking ID\\n     */\\n    function getInsuranceInfoById(uint256 _id)\\n        external\\n        view\\n        returns (InsuranceInfo memory)\\n    {\\n        return insurance[_id];\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.3) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../StringsUpgradeable.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSAUpgradeable {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", StringsUpgradeable.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface IManagement {\\n    function feeNumerator() external returns (uint256);\\n\\n    function referralFeeNumerator() external returns (uint256);\\n\\n    function payoutDelay() external returns (uint256);\\n\\n    function operator() external returns (address);\\n\\n    function treasury() external returns (address);\\n\\n    function verifier() external returns (address);\\n\\n    function factory() external returns (address);\\n\\n    function eip712() external returns (address);\\n\\n    function paymentToken(address) external returns (bool);\\n\\n    function admin() external returns (address);\\n\\n    function setReferralFeeRatio(uint256 _feeNumerator) external;\\n\\n    function setFeeRatio(uint256 _feeNumerator) external;\\n\\n    function setPayoutDelay(uint256 _period) external;\\n\\n    function setOperator(address _newManager) external;\\n\\n    function setTreasury(address _newTreasury) external;\\n\\n    function setVerifier(address _newVerifier) external;\\n\\n    function setFactory(address _factory) external;\\n\\n    function setEIP712(address _eip712) external;\\n\\n    function addPayment(address _token) external;\\n\\n    function removePayment(address _token) external;\\n\\n    event NewFeeNumerator(uint256 feeNumerator);\\n\\n    event NewReferralFeeNumerator(uint256 feeNumerator);\\n\\n    event NewPayoutDelay(uint256 payoutDelay);\\n\\n    event NewOperator(address indexed manager);\\n\\n    event NewTreasury(address indexed treasury);\\n\\n    event NewVerifier(address indexed verifier);\\n\\n    event NewFactory(address indexed factory);\\n\\n    event NewEIP712(address indexed eip712);\\n\\n    event PaymentTokensAdd(address indexed token);\\n\\n    event PaymentTokensRemove(address indexed token);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProperty.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\ninterface IProperty {\\n    struct CancellationPolicy {\\n        uint256 expireAt;\\n        uint256 refundAmount;\\n    }\\n\\n    struct InsuranceInfo {\\n        uint256 damageProtectionFee;\\n        address feeReceiver;\\n        KygStatus kygStatus;\\n    }\\n\\n    struct BookingInfo {\\n        uint256 checkIn;\\n        uint256 checkOut;\\n        uint256 balance;\\n        uint256 feeNumerator;\\n        uint256 referralFeeNumerator;\\n        address guest;\\n        address paymentToken;\\n        address paymentReceiver;\\n        address referrer;\\n        BookingStatus status;\\n        CancellationPolicy[] policies;\\n    }\\n\\n    enum BookingStatus {\\n        IN_PROGRESS,\\n        PARTIAL_PAID,\\n        FULLY_PAID,\\n        GUEST_CANCELLED,\\n        HOST_CANCELLED,\\n        PENDING_INSURANCE_FEE\\n    }\\n\\n    enum KygStatus {\\n        IN_PROGRESS,\\n        PASSED,\\n        FAILED\\n    }\\n\\n    struct BookingSetting {\\n        uint256 bookingId;\\n        uint256 checkIn;\\n        uint256 checkOut;\\n        uint256 expireAt;\\n        uint256 bookingAmount;\\n        address paymentToken;\\n        address referrer;\\n        address guest;\\n        address property;\\n        InsuranceInfo insuranceInfo;\\n        CancellationPolicy[] policies;\\n    }\\n\\n    function init(\\n        uint256 _propertyId,\\n        address _host,\\n        address _management,\\n        address _delegate\\n    ) external;\\n\\n    function grantAuthorized(address _addr) external;\\n\\n    function revokeAuthorized(address _addr) external;\\n\\n    function updateHost(address _addr) external;\\n\\n    function updatePaymentReceiver(address _addr) external;\\n\\n    function book(BookingSetting calldata _setting, bytes calldata _signature)\\n        external\\n        payable;\\n\\n    function cancel(uint256 _bookingId) external;\\n\\n    function payout(uint256 _bookingId) external;\\n\\n    function cancelByHost(uint256 _bookingId) external;\\n\\n    function getBookingById(uint256 _id) external returns (BookingInfo memory);\\n\\n    function getInsuranceInfoById(uint256 _id)\\n        external\\n        returns (InsuranceInfo memory);\\n\\n    function totalBookings() external view returns (uint256);\\n\\n    event NewHost(address indexed host);\\n\\n    event NewPaymentReceiver(address indexed paymentReceiver);\\n\\n    event NewBooking(\\n        address indexed guest,\\n        uint256 indexed bookingId,\\n        uint256 bookedAt\\n    );\\n\\n    event GuestCancelled(\\n        address indexed guest,\\n        uint256 indexed bookingId,\\n        uint256 cancelledAt,\\n        uint256 guestAmount,\\n        uint256 hostAmount,\\n        uint256 treasuryAmount,\\n        uint256 referrerAmount\\n    );\\n\\n    event HostCancelled(\\n        address indexed host,\\n        uint256 indexed bookingId,\\n        uint256 cancelledAt,\\n        uint256 guestAmount\\n    );\\n\\n    event PayOut(\\n        address indexed guest,\\n        uint256 indexed bookingId,\\n        uint256 payAt,\\n        uint256 hostAmount,\\n        uint256 treasuryAmount,\\n        uint256 referrerAmount,\\n        BookingStatus status\\n    );\\n\\n    event InsuranceFeeCollected(\\n        address indexed receiver,\\n        uint256 indexed bookingId,\\n        uint256 collectAt,\\n        uint256 feeAmount\\n    );\\n\\n    event GrantAuthorized(address indexed addr);\\n\\n    event RevokeAuthorized(address indexed addr);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IEIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.4;\\n\\nimport \\\"./IProperty.sol\\\";\\n\\ninterface IEIP712 {\\n    function verify(\\n        uint256 _propertyId,\\n        IProperty.BookingSetting calldata _setting,\\n        bytes calldata _signature\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"GrantAuthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guest\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bookingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelledAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guestAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hostAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerAmount\",\"type\":\"uint256\"}],\"name\":\"GuestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bookingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cancelledAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"guestAmount\",\"type\":\"uint256\"}],\"name\":\"HostCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bookingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collectAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"InsuranceFeeCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guest\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bookingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bookedAt\",\"type\":\"uint256\"}],\"name\":\"NewBooking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"host\",\"type\":\"address\"}],\"name\":\"NewHost\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentReceiver\",\"type\":\"address\"}],\"name\":\"NewPaymentReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guest\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bookingId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payAt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"hostAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"treasuryAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"referrerAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum IProperty.BookingStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"name\":\"PayOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"RevokeAuthorized\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bookingId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expireAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bookingAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"guest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"property\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"damageProtectionFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"enum IProperty.KygStatus\",\"name\":\"kygStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct IProperty.InsuranceInfo\",\"name\":\"insuranceInfo\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expireAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProperty.CancellationPolicy[]\",\"name\":\"policies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IProperty.BookingSetting\",\"name\":\"_setting\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"book\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bookingIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bookingId\",\"type\":\"uint256\"}],\"name\":\"cancel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bookingId\",\"type\":\"uint256\"}],\"name\":\"cancelByHost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getBookingById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"checkIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"checkOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"referralFeeNumerator\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guest\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"paymentReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"referrer\",\"type\":\"address\"},{\"internalType\":\"enum IProperty.BookingStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"expireAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProperty.CancellationPolicy[]\",\"name\":\"policies\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IProperty.BookingInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getInsuranceInfoById\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"damageProtectionFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"feeReceiver\",\"type\":\"address\"},{\"internalType\":\"enum IProperty.KygStatus\",\"name\":\"kygStatus\",\"type\":\"uint8\"}],\"internalType\":\"struct IProperty.InsuranceInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"grantAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"host\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_propertyId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_host\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isInsuranceFeePending\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"contract IManagement\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bookingId\",\"type\":\"uint256\"}],\"name\":\"payout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"propertyId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"revokeAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBookings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updateHost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"enum IProperty.KygStatus\",\"name\":\"_status\",\"type\":\"uint8\"}],\"name\":\"updateKygStatusById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"updatePaymentReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Property", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}