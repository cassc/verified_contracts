{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/ERC721A-Upgradeable/contracts/IERC721AUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// ERC721A Contracts v4.2.3\\n// Creator: Chiru Labs\\n\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Interface of ERC721A.\\n */\\ninterface IERC721AUpgradeable {\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error ApprovalCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error ApprovalQueryForNonexistentToken();\\n\\n    /**\\n     * Cannot query the balance for the zero address.\\n     */\\n    error BalanceQueryForZeroAddress();\\n\\n    /**\\n     * Cannot mint to the zero address.\\n     */\\n    error MintToZeroAddress();\\n\\n    /**\\n     * The quantity of tokens minted must be more than zero.\\n     */\\n    error MintZeroQuantity();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error OwnerQueryForNonexistentToken();\\n\\n    /**\\n     * The caller must own the token or be an approved operator.\\n     */\\n    error TransferCallerNotOwnerNorApproved();\\n\\n    /**\\n     * The token must be owned by `from`.\\n     */\\n    error TransferFromIncorrectOwner();\\n\\n    /**\\n     * Cannot safely transfer to a contract that does not implement the\\n     * ERC721Receiver interface.\\n     */\\n    error TransferToNonERC721ReceiverImplementer();\\n\\n    /**\\n     * Cannot transfer to the zero address.\\n     */\\n    error TransferToZeroAddress();\\n\\n    /**\\n     * The token does not exist.\\n     */\\n    error URIQueryForNonexistentToken();\\n\\n    /**\\n     * The `quantity` minted with ERC2309 exceeds the safety limit.\\n     */\\n    error MintERC2309QuantityExceedsLimit();\\n\\n    /**\\n     * The `extraData` cannot be set on an unintialized ownership slot.\\n     */\\n    error OwnershipNotInitializedForExtraData();\\n\\n    // =============================================================\\n    //                            STRUCTS\\n    // =============================================================\\n\\n    struct TokenOwnership {\\n        // The address of the owner.\\n        address addr;\\n        // Stores the start time of ownership with minimal overhead for tokenomics.\\n        uint64 startTimestamp;\\n        // Whether the token has been burned.\\n        bool burned;\\n        // Arbitrary data similar to `startTimestamp` that can be set via {_extraData}.\\n        uint24 extraData;\\n    }\\n\\n    // =============================================================\\n    //                         TOKEN COUNTERS\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the total number of tokens in existence.\\n     * Burned tokens will reduce the count.\\n     * To get the total number of tokens minted, please see {_totalMinted}.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    // =============================================================\\n    //                            IERC165\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * [EIP section](https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified)\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n\\n    // =============================================================\\n    //                            IERC721\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables\\n     * (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in `owner`'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`,\\n     * checking first that contract recipients are aware of the ERC721 protocol\\n     * to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move\\n     * this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement\\n     * {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external payable;\\n\\n    /**\\n     * @dev Equivalent to `safeTransferFrom(from, to, tokenId, '')`.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom}\\n     * whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token\\n     * by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external payable;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the\\n     * zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external payable;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom}\\n     * for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    // =============================================================\\n    //                        IERC721Metadata\\n    // =============================================================\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // =============================================================\\n    //                           IERC2309\\n    // =============================================================\\n\\n    /**\\n     * @dev Emitted when tokens in `fromTokenId` to `toTokenId`\\n     * (inclusive) is transferred from `from` to `to`, as defined in the\\n     * [ERC2309](https://eips.ethereum.org/EIPS/eip-2309) standard.\\n     *\\n     * See {_mintERC2309} for more details.\\n     */\\n    event ConsecutiveTransfer(uint256 indexed fromTokenId, uint256 toTokenId, address indexed from, address indexed to);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IELVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.8;\\n\\n/**\\n * @title Interface for IELVault\\n * @notice Vault will manage methods for rewards, commissions, tax\\n */\\ninterface IELVault {\\n    /**\\n     * @notice transfer ETH\\n     * @param _amount transfer amount\\n     * @param _to transfer to address\\n     */\\n    function transfer(uint256 _amount, address _to) external;\\n\\n    /**\\n     * @notice transfer ETH\\n     * @param _amount transfer amount\\n     */\\n    function reinvestment(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IELVaultFactory.sol\": {\r\n      \"content\": \"pragma solidity 0.8.8;\\n\\n/**\\n * @title Interface for ELVaultFactory\\n * @notice Vault factory\\n */\\n\\ninterface IELVaultFactory {\\n    /**\\n     * @notice create vault contract proxy\\n     * @param _operatorId operator id\\n     */\\n    function create(uint256 _operatorId) external returns (address);\\n\\n    event ELVaultProxyDeployed(address _proxyAddress);\\n    event NodeOperatorRegistrySet(address _oldNodeOperatorRegistryAddress, address _nodeOperatorRegistryAddress);\\n    event DaoAddressChanged(address _oldDao, address _dao);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILargeStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.8.8;\\n\\n/**\\n * @title Interface for LargeStaking\\n * @notice Vault factory\\n */\\n\\nimport {CLStakingExitInfo, CLStakingSlashInfo} from \\\"src/library/ConsensusStruct.sol\\\";\\n\\ninterface ILargeStaking {\\n    event SharedRewardPoolStart(uint256 _operatorId, address _elRewardPoolAddr);\\n    event LargeStake(\\n        uint256 _operatorId,\\n        uint256 _curStakingId,\\n        uint256 _amount,\\n        address _owner,\\n        address _elRewardAddr,\\n        address _withdrawCredentials,\\n        bool _isELRewardSharing\\n    );\\n    event MigretaStake(\\n        uint256 _operatorId,\\n        uint256 _curStakingId,\\n        uint256 _amount,\\n        address _owner,\\n        address _elRewardAddr,\\n        address _withdrawCredentials,\\n        bool _isELRewardSharing\\n    );\\n    event AppendStake(uint256 _stakingId, uint256 _amount);\\n    event AppendMigretaStake(uint256 _stakingId, uint256 _stakeAmounts);\\n    event ValidatorRegistered(uint256 _operatorId, uint256 _stakeingId, bytes _pubKey);\\n    event FastUnstake(uint256 _stakingId, uint256 _unstakeAmount);\\n    event LargeUnstake(uint256 _stakingId, uint256 _amount);\\n    event ELShareingRewardSettle(uint256 _operatorId, uint256 _daoReward, uint256 _operatorReward, uint256 _poolReward);\\n    event ElPrivateRewardSettle(\\n        uint256 _stakingId, uint256 _operatorId, uint256 _daoReward, uint256 _operatorReward, uint256 _poolReward\\n    );\\n    event UserRewardClaimed(uint256 _stakingId, address _beneficiary, uint256 _rewards);\\n    event OperatorRewardClaimed(uint256 _operatorId, address _rewardAddresses, uint256 _rewardAmounts);\\n    event OperatorPrivateRewardClaimed(uint256 _stakingId, uint256 _operatorId, uint256 _operatorRewards);\\n    event OperatorSharedRewardClaimed(uint256 _operatorId, uint256 _operatorRewards);\\n    event DaoPrivateRewardClaimed(uint256 _stakingId, address _daoVaultAddress, uint256 _daoRewards);\\n    event DaoSharedRewardClaimed(uint256 _operatorId, address daoVaultAddress, uint256 _daoRewards);\\n    event LargeStakingSlash(uint256 _stakingIds, uint256 _operatorIds, bytes _pubkey, uint256 _amounts);\\n    event ValidatorExitReport(uint256 _operatorId, bytes _pubkey);\\n    event DaoAddressChanged(address _oldDao, address _dao);\\n    event DaoVaultAddressChanged(address _oldDaoVaultAddress, address _daoVaultAddress);\\n    event DaoELCommissionRateChanged(uint256 _oldDaoElCommissionRate, uint256 _daoElCommissionRate);\\n    event NodeOperatorsRegistryChanged(address _oldNodeOperatorRegistryContract, address _nodeOperatorRegistryAddress);\\n    event ConsensusOracleChanged(address _oldLargeOracleContractAddr, address _largeOracleContractAddr);\\n    event ELRewardFactoryChanged(address _oldElRewardFactory, address _elRewardFactory);\\n    event OperatorSlashChanged(address _oldOperatorSlashContract, address _operatorSlashContract);\\n    event MinStakeAmountChanged(uint256 _oldMinStakeAmount, uint256 _minStakeAmount);\\n    event MaxSlashAmountChanged(uint256 _oldMaxSlashAmount, uint256 _maxSlashAmount);\\n    event ElRewardAddressChanged(address _oldElRewardAddr, address _elRewardAddr);\\n\\n    function getOperatorValidatorCounts(uint256 _operatorId) external view returns (uint256);\\n\\n    function reportCLStakingData(\\n        CLStakingExitInfo[] memory _clStakingExitInfo,\\n        CLStakingSlashInfo[] memory _clStakingSlashInfo\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ILiquidStaking.sol\": {\r\n      \"content\": \"pragma solidity 0.8.8;\\n\\n/**\\n * @title Interface fro NodeDao LiquidStaking Contract\\n *\\n * NodeDao is a DAO that provides decentralized solutions for Ethereum liquidity,\\n * jointly initiated by ChainUp Cloud, XHash, AntAlpha, ImToken, and Bitrise.\\n *\\n * The NodeDAO protocol is a smart contract for next-generation liquid staking derivatives,\\n * which includes all the concepts of traditional liquid staking, re-staking, distributed validators, and validator NFTs in a single protocol.\\n *\\n * Our vision is to use our innovative liquidity solution to provide more options for the Ethereum liquidity market,\\n * thereby making Ethereum staking more decentralized.\\n */\\ninterface ILiquidStaking {\\n    /**\\n     * @notice Receive Rewards\\n     * @param _rewards rewards amount\\n     */\\n    function receiveRewards(uint256 _rewards) external payable;\\n\\n    /**\\n     * @notice Update the status of the corresponding nft according to the report result of the oracle machine\\n     * @param _tokenIds token id\\n     * @param _exitBlockNumbers exit block number\\n     */\\n    function nftExitHandle(uint256[] memory _tokenIds, uint256[] memory _exitBlockNumbers) external;\\n\\n    /**\\n     * @notice According to the settlement results of the vaultManager, the income of the re-investment execution layer\\n     * @param _operatorIds operator id\\n     * @param _amounts reinvest amounts\\n     */\\n    function reinvestElRewards(uint256[] memory _operatorIds, uint256[] memory _amounts) external;\\n\\n    /**\\n     * @notice According to the reported results of the oracle machine, the income of the consensus layer is re-invested\\n     * @param _operatorIds operator id\\n     * @param _amounts reinvest amounts\\n     * @param _totalAmount totalAmount\\n     */\\n    function reinvestClRewards(uint256[] memory _operatorIds, uint256[] memory _amounts, uint256 _totalAmount)\\n        external;\\n\\n    /**\\n     * @notice nETH to ETH exchange rate\\n     * @param _nethAmountIn nETH amount\\n     */\\n    function getEthOut(uint256 _nethAmountIn) external view returns (uint256);\\n\\n    /**\\n     * @notice ETH to nETH exchange rate\\n     * @param _ethAmountIn ETH amount\\n     */\\n    function getNethOut(uint256 _ethAmountIn) external view returns (uint256);\\n\\n    /**\\n     * @notice When withdrawing a large amount, update the user's unstake quota\\n     * @param _operatorId operator id\\n     * @param _from user address\\n     * @param _amount unstakeETH amount\\n     */\\n    function largeWithdrawalUnstake(uint256 _operatorId, address _from, uint256 _amount) external;\\n\\n    /**\\n     * @notice large withdrawals, when users claim eth, will trigger the burning of locked Neth\\n     * @param _totalRequestNethAmount totalRequestNethAmount will burn\\n     * @param _to burn neth address\\n     */\\n    function LargeWithdrawalRequestBurnNeth(uint256 _totalRequestNethAmount, address _to) external;\\n\\n    /**\\n     * @notice When unstakeNFT, if the funds pledged by the user have not been deposited, the user is allowed to withdraw directly\\n     * @param _operatorId operator id\\n     * @param _tokenId tokenId\\n     * @param _to receiving address\\n     */\\n    function fastUnstakeNFT(uint256 _operatorId, uint256 _tokenId, address _to) external;\\n\\n    /**\\n     * @notice When the operator is punished due to an error in operation, the penalty funds are recharged to its own pledge pool\\n     * @param _operatorId operator id\\n     * @param _amount slash amount\\n     */\\n    function addPenaltyFundToStakePool(uint256 _operatorId, uint256 _amount) external payable;\\n\\n    /**\\n     * @notice Users claim vNFT rewards\\n     * @dev There is no need to judge whether this nft belongs to the liquidStaking,\\n     *      because the liquidStaking cannot directly reward\\n     * @param _operatorId operator id\\n     * @param _tokenIds vNFT tokenIds\\n     * @param _totalNftRewards _totalNftRewards\\n     * @param _gasHeight update claim gasHeigt\\n     * @param _owner _owner\\n     */\\n    function claimRewardsOfUser(\\n        uint256 _operatorId,\\n        uint256[] memory _tokenIds,\\n        uint256 _totalNftRewards,\\n        uint256 _gasHeight,\\n        address _owner\\n    ) external;\\n\\n    /**\\n     * @notice The operator claims the operation reward\\n     * @param _operatorId operator Id\\n     * @param _rewardAddresses reward address\\n     * @param _rewards _rewards\\n     */\\n    function claimRewardsOfOperator(uint256 _operatorId, address[] memory _rewardAddresses, uint256[] memory _rewards)\\n        external;\\n\\n    /**\\n     * @notice The dao claims to belong to the dao reward\\n     * @param _operatorIds operators Id\\n     * @param _rewards rewards\\n     */\\n    function claimRewardsOfDao(uint256[] memory _operatorIds, uint256[] memory _rewards) external;\\n\\n    /**\\n     * @notice nETH to ETH exchange rate\\n     */\\n    function getExchangeRate() external view returns (uint256);\\n\\n    event OperatorAssigned(uint256 indexed _blacklistOperatorId, uint256 _operatorId, uint256 _totalAmount);\\n    event EthStake(uint256 indexed _operatorId, address indexed _from, uint256 _amount, uint256 _amountOut);\\n    event EthUnstake(\\n        uint256 indexed _operatorId, uint256 targetOperatorId, address ender, uint256 _amounts, uint256 amountOut\\n    );\\n    event NftStake(uint256 indexed _operatorId, address indexed _from, uint256 _count);\\n    event ValidatorRegistered(uint256 indexed _operatorId, uint256 _tokenId, bytes _pubkey);\\n    event UserClaimRewards(uint256 _operatorId, uint256[] _tokenIds, uint256 _rewards);\\n    event Transferred(address _to, uint256 _amount);\\n    event OperatorReinvestClRewards(uint256 _operatorId, uint256 _rewards);\\n    event OperatorReinvestElRewards(uint256 _operatorId, uint256 _rewards);\\n    event RewardsReceive(uint256 _rewards);\\n    event LiquidStakingWithdrawalCredentialsSet(\\n        bytes _oldLiquidStakingWithdrawalCredentials, bytes _liquidStakingWithdrawalCredentials\\n    );\\n    event WithdrawOracleContractSet(address _oldWithdrawOracleContractSet, address _withdrawOracleContractSetAddress);\\n    event NodeOperatorRegistryContractSet(\\n        address _oldNodeOperatorRegistryContract, address _nodeOperatorRegistryContract\\n    );\\n    event DaoAddressChanged(address _oldDao, address _dao);\\n    event DaoVaultAddressChanged(address _oldDaoVaultAddress, address _daoVaultAddress);\\n    event DepositFeeRateSet(uint256 _oldFeeRate, uint256 _feeRate);\\n    event OperatorClaimRewards(uint256 _operatorId, uint256 _rewards);\\n    event DaoClaimRewards(uint256 _operatorId, uint256 _rewards);\\n    event NftExitBlockNumberSet(uint256[] tokenIds, uint256[] exitBlockNumbers);\\n    event VaultManagerContractSet(address vaultManagerContractAddress, address _vaultManagerContract);\\n    event ConsensusVaultContractSet(address vaultManagerContractAddress, address _consensusVaultContract);\\n    event OperatorCanLoanAmountsSet(uint256 operatorCanLoanAmounts, uint256 _newCanloadAmounts);\\n    event WithdrawalRequestContractSet(address _withdrawalRequestContract, address _withdrawalRequestContractAddress);\\n    event OperatorSlashContractSet(address oldOperatorSlashContract, address _operatorSlashContract);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/INodeOperatorsRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.8;\\n\\n/**\\n * @title Node Operator registry\\n *\\n * Registration and management of Node Operator\\n */\\ninterface INodeOperatorsRegistry {\\n    /**\\n     * @notice Add node operator named `name` with reward address `rewardAddress` and _owner\\n     * @param _name Human-readable name\\n     * @param _controllerAddress Ethereum 1 address for the operator's management authority\\n     * @param _owner operator owner address\\n     * @param _rewardAddresses reward addresses\\n     * @param _ratios reward ratios\\n     * @return id a unique key of the added operator\\n     */\\n    function registerOperator(\\n        string calldata _name,\\n        address _controllerAddress,\\n        address _owner,\\n        address[] calldata _rewardAddresses,\\n        uint256[] calldata _ratios\\n    ) external payable returns (uint256 id);\\n\\n    /**\\n     * @notice Set an operator as trusted\\n     * @param _id operator id\\n     */\\n    function setTrustedOperator(uint256 _id) external;\\n\\n    /**\\n     * @notice Remove an operator as trusted\\n     * @param _id operator id\\n     */\\n    function removeTrustedOperator(uint256 _id) external;\\n\\n    /**\\n     * @notice Get information about an operator\\n     * @param _id operator id\\n     * @param _fullInfo Get all information\\n     */\\n    function getNodeOperator(uint256 _id, bool _fullInfo)\\n        external\\n        view\\n        returns (\\n            bool trusted,\\n            string memory name,\\n            address owner,\\n            address controllerAddress,\\n            address vaultContractAddress\\n        );\\n\\n    /**\\n     * @notice Returns total number of node operators\\n     */\\n    function getNodeOperatorsCount() external view returns (uint256);\\n\\n    /**\\n     * @notice Get information about an operator vault contract address\\n     * @param _id operator id\\n     */\\n    function getNodeOperatorVaultContract(uint256 _id) external view returns (address vaultContractAddress);\\n\\n    /**\\n     * @notice Get operator rewardSetting\\n     * @param operatorId operator id\\n     */\\n    function getNodeOperatorRewardSetting(uint256 operatorId)\\n        external\\n        view\\n        returns (address[] memory, uint256[] memory);\\n\\n    /**\\n     * @notice Returns whether an operator is trusted\\n     * @param _id operator id\\n     */\\n    function isTrustedOperator(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether an operator is trusted\\n     * @param _controllerAddress controller address\\n     */\\n    function isTrustedOperatorOfControllerAddress(address _controllerAddress) external view returns (uint256);\\n\\n    /**\\n     * @notice operator pledge balance\\n     * @param _operatorId operator id\\n     */\\n    function getPledgeInfoOfOperator(uint256 _operatorId) external view returns (uint256, uint256);\\n\\n    /**\\n     * @notice get operator comission rate\\n     * @param _operatorIds operator id\\n     */\\n    function getOperatorCommissionRate(uint256[] memory _operatorIds) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice When a validator run by an operator goes seriously offline, it will be slashed\\n     * @param _slashType slashType\\n     * @param _slashIds tokenId or stakingId\\n     * @param _operatorIds operator id\\n     * @param _amounts slash amount\\n     */\\n    function slash(\\n        uint256 _slashType,\\n        uint256[] memory _slashIds,\\n        uint256[] memory _operatorIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    /**\\n     * @notice deposit pledge fund for operator\\n     * @param _operatorId operator Id\\n     */\\n    function deposit(uint256 _operatorId) external payable;\\n\\n    /**\\n     * @notice Returns whether an operator is Blacklist\\n     * @param _operatorId operator id\\n     */\\n    function isBlacklistOperator(uint256 _operatorId) external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether an operator is quit\\n     * @param _id operator id\\n     */\\n    function isQuitOperator(uint256 _id) external view returns (bool);\\n\\n    /**\\n     * @notice Determine whether the operator meets the pledge requirements\\n     * @param _operatorId operator id\\n     */\\n    function isConformBasicPledge(uint256 _operatorId) external view returns (bool);\\n\\n    event NodeOperatorRegistered(\\n        uint256 _id,\\n        string _name,\\n        address _controllerAddress,\\n        address _vaultContractAddress,\\n        address[] _rewardAddresses,\\n        uint256[] _ratios\\n    );\\n    event OperatorWithdraw(uint256 _operatorId, uint256 _withdrawAmount, address _to);\\n    event OperatorQuit(uint256 _operatorId, uint256 _nowVault, address _to);\\n    event NodeOperatorTrustedSet(uint256 _id, string _name, bool _trusted);\\n    event NodeOperatorTrustedRemove(uint256 _id, string _name, bool _trusted);\\n    event NodeOperatorBlacklistSet(uint256 _id);\\n    event NodeOperatorBlacklistRemove(uint256 _id);\\n    event NodeOperatorNameSet(uint256 _id, string _name);\\n    event NodeOperatorRewardAddressSet(uint256 _id, address[] _rewardAddresses, uint256[] _ratios);\\n    event NodeOperatorControllerAddressSet(uint256 _id, string _name, address _controllerAddress);\\n    event NodeOperatorOwnerAddressSet(uint256 _id, string _name, address _ownerAddress);\\n    event Transferred(address _to, uint256 _amount);\\n    event Slashed(uint256 _operatorId, uint256 _amount);\\n    event PledgeDeposited(uint256 _amount, uint256 _operatorId);\\n    event Withdraw(uint256 _amount, uint256 _operatorId, address _to);\\n    event LiquidStakingChanged(address _from, address _to);\\n    event DaoAddressChanged(address _oldDao, address _dao);\\n    event DaoVaultAddressChanged(address _oldDaoVaultAddress, address _daoVaultAddress);\\n    event RegistrationFeeChanged(uint256 _oldFee, uint256 _fee);\\n    event PermissionlessBlockNumberSet(uint256 _blockNumber);\\n    event OperatorClaimRewards(uint256 _operatorId, uint256 _rewards);\\n    event DaoClaimRewards(uint256 _operatorId, uint256 _rewards);\\n    event CommissionRateChanged(uint256 _oldRate, uint256 _rate);\\n    event OperatorArrearsReduce(uint256 _operatorId, uint256 value);\\n    event OperatorArrearsIncrease(uint256 _operatorId, uint256 value);\\n    event VaultFactorContractSet(address _vaultFactoryContract, address _vaultFactoryContractAddress);\\n    event OperatorVaultContractReset(address _oldVaultContractAddress, address _vaultContractAddress);\\n    event OperatorSlashContractSet(address _oldOperatorSlashContract, address _operatorSlashContractAddress);\\n    event DefaultOperatorCommissionRateChanged(\\n        uint256 _oldDefaultOperatorCommission, uint256 _defaultOperatorCommission\\n    );\\n    event LargeStakingChanged(address _oldLargeStakingContractAddress, address _largeStakingContractAddress);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOperatorSlash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.8;\\n\\n/**\\n * @title Interface for OperatorSlash\\n * @notice OperatorSlash contract\\n */\\ninterface IOperatorSlash {\\n    /**\\n     * @notice Receive slash fund, Because the operator may have insufficient margin, _slashAmounts may be less than or equal to _requireAmounts\\n     * @param _slashType slashType\\n     * @param _slashIds exit tokenIds\\n     * @param _operatorIds operator\\n     * @param _slashAmounts slash amount\\n     * @param _requireAmounts require slas amount\\n     */\\n    function slashReceive(\\n        uint256 _slashType,\\n        uint256[] memory _slashIds,\\n        uint256[] memory _operatorIds,\\n        uint256[] memory _slashAmounts,\\n        uint256[] memory _requireAmounts\\n    ) external payable;\\n\\n    function claimCompensated(uint256[] memory _tokenIds, address _owner) external returns (uint256);\\n\\n    function claimCompensatedOfLargeStaking(uint256[] memory _stakingIds, address _owner) external returns (uint256);\\n    /**\\n     * @notice According to the report results of the oracle machine, the operator who has reduced nft will be punished\\n     * @param _exitTokenIds token id\\n     * @param _amounts slash amounts\\n     */\\n    function slashOperator(uint256[] memory _exitTokenIds, uint256[] memory _amounts) external;\\n    function slashOperatorOfLargeStaking(\\n        uint256[] memory _stakingIds,\\n        uint256[] memory _operatorIds,\\n        uint256[] memory _amounts\\n    ) external;\\n\\n    /**\\n     * @notice The receiving function of the penalty, used for the automatic transfer after the operator recharges the margin\\n     * @param _operatorId operator Id\\n     * @param _amount slash amount\\n     */\\n    function slashArrearsReceive(uint256 _operatorId, uint256 _amount) external payable;\\n\\n    event SlashArrearsReceive(uint256 _operatorId, uint256 _amount);\\n    event SlashArrearsReceiveOfNft(uint256 _operatorId, uint256 _tokenId, uint256 _amount);\\n    event SlashArrearsReceiveOfLargeStaking(uint256 _operatorId, uint256 stakingId, uint256 _amount);\\n    event SlashReceiveOfNft(uint256 _operatorId, uint256 tokenId, uint256 _slashAmount, uint256 _requirAmounts);\\n    event SlashReceiveOfLargeStaking(\\n        uint256 _operatorId, uint256 stakingId, uint256 _slashAmount, uint256 _requirAmounts\\n    );\\n    event SlashAmountPerBlockPerValidatorSet(\\n        uint256 _oldSlashAmountPerBlockPerValidator, uint256 _slashAmountPerBlockPerValidator\\n    );\\n\\n    event NodeOperatorRegistryContractSet(\\n        address _oldNodeOperatorRegistryContract, address _nodeOperatorRegistryContract\\n    );\\n    event VaultManagerContractSet(address _oldVaultManagerContractAddress, address _vaultManagerContract);\\n    event WithdrawalRequestContractSet(\\n        address _oldWithdrawalRequestContract, address _withdrawalRequestContractAddress\\n    );\\n    event LiquidStakingChanged(address _oldLiquidStakingContract, address _liquidStakingContractAddress);\\n    event LargeStakingChanged(address _oldLargeStakingContractAddress, address _largeStakingContractAddress);\\n    event DaoAddressChanged(address oldDao, address _dao);\\n    event CompensatedClaimedOfNft(address _owner, uint256 _tokenId, uint256 _compensated);\\n    event CompensatedClaimedOfLargeStaking(address _owner, uint256 _stakingId, uint256 _compensated);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVNFT.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.8;\\n\\nimport \\\"lib/ERC721A-Upgradeable/contracts/IERC721AUpgradeable.sol\\\";\\n\\ninterface IVNFT is IERC721AUpgradeable {\\n    function activeNfts() external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Returns the validators that are active (may contain validator that are yet active on beacon chain)\\n     */\\n    function activeValidatorsOfStakingPool() external view returns (bytes[] memory);\\n\\n    /**\\n     * @notice Returns the tokenId that are active (may contain validator that are yet active on beacon chain)\\n     */\\n    function activeNftsOfStakingPool() external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice get empty nft counts\\n     */\\n    function getEmptyNftCounts() external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a validator exists\\n     * @param _pubkey - A 48 bytes representing the validator's public key\\n     */\\n    function validatorExists(bytes calldata _pubkey) external view returns (bool);\\n\\n    /**\\n     * @notice Finds the validator's public key of a nft\\n     * @param _tokenId - tokenId of the validator nft\\n     */\\n    function validatorOf(uint256 _tokenId) external view returns (bytes memory);\\n\\n    /**\\n     * @notice Finds all the validator's public key of a particular address\\n     * @param _owner - The particular address\\n     */\\n    function validatorsOfOwner(address _owner) external view returns (bytes[] memory);\\n\\n    /**\\n     * @notice Finds the operator id of a nft\\n     * @param _tokenId - tokenId of the validator nft\\n     */\\n    function operatorOf(uint256 _tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the number of operator's active nft\\n     * @param _operatorId - operator id\\n     */\\n    function getActiveNftCountsOfOperator(uint256 _operatorId) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the number of operator's empty nft\\n     * @param _operatorId - operator id\\n     */\\n    function getEmptyNftCountsOfOperator(uint256 _operatorId) external view returns (uint256);\\n\\n    /**\\n     * @notice Get the number of user's active nft\\n     * @param _operatorId - operator id\\n     */\\n    function getUserActiveNftCountsOfOperator(uint256 _operatorId) external view returns (uint256);\\n\\n    /**\\n     * @notice Finds the tokenId of a validator\\n     * @dev Returns MAX_SUPPLY if not found\\n     * @param _pubkey - A 48 bytes representing the validator's public key\\n     */\\n    function tokenOfValidator(bytes calldata _pubkey) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the last owner before the nft is burned\\n     * @param _tokenId - tokenId of the validator nft\\n     */\\n    function lastOwnerOf(uint256 _tokenId) external view returns (address);\\n\\n    /**\\n     * @notice Mints a Validator nft (vNFT)\\n     * @param _pubkey -  A 48 bytes representing the validator's public key\\n     * @param _to - The recipient of the nft\\n     * @param _operatorId - The operator repsonsible for operating the physical node\\n     */\\n    function whiteListMint(\\n        bytes calldata _pubkey,\\n        bytes calldata _withdrawalCredentials,\\n        address _to,\\n        uint256 _operatorId\\n    ) external returns (uint256);\\n\\n    /**\\n     * @notice Burns a Validator nft (vNFT)\\n     * @param _tokenId - tokenId of the validator nft\\n     */\\n    function whiteListBurn(uint256 _tokenId) external;\\n\\n    /**\\n     * @notice Obtain the withdrawal voucher used by tokenid,\\n     * if it is bytes(\\\"\\\"), it means it is not the user's nft, and the voucher will be the withdrawal contract address of the nodedao protocol\\n     * @param _tokenId - tokenId\\n     */\\n    function getUserNftWithdrawalCredentialOfTokenId(uint256 _tokenId) external view returns (bytes memory);\\n\\n    /**\\n     * @notice The operator obtains the withdrawal voucher to be used for the next registration of the validator.\\n     *  // If it is bytes (\\\"\\\"), it means that it is not the user's NFT, and the voucher will be the withdrawal contract address of the nodedao protocol.\\n     * @param _operatorId - operatorId\\n     */\\n    function getNextValidatorWithdrawalCredential(uint256 _operatorId) external view returns (bytes memory);\\n\\n    /**\\n     * @notice set nft exit height\\n     * @param _tokenIds - tokenIds\\n     * @param _exitBlockNumbers - tokenIds\\n     */\\n    function setNftExitBlockNumbers(uint256[] memory _tokenIds, uint256[] memory _exitBlockNumbers) external;\\n\\n    /**\\n     * @notice Get the number of nft exit height\\n     * @param _tokenIds - tokenIds\\n     */\\n    function getNftExitBlockNumbers(uint256[] memory _tokenIds) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice set nft gas height\\n     * @param _tokenId - tokenId\\n     * @param _number - gas height\\n     */\\n    function setUserNftGasHeight(uint256 _tokenId, uint256 _number) external;\\n\\n    /**\\n     * @notice Get the number of user's nft gas height\\n     * @param _tokenIds - tokenIds\\n     */\\n    function getUserNftGasHeight(uint256[] memory _tokenIds) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Get the number of total active nft counts\\n     */\\n    function getTotalActiveNftCounts() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/library/ConsensusStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.8;\\n\\nstruct WithdrawInfo {\\n    uint64 operatorId;\\n    // The income that should be issued by this operatorId in this settlement\\n    uint96 clReward;\\n    // For this settlement, whether operatorId has exit node, if no exit node is 0;\\n    // The value of one node exiting is 32 eth(or 32.9 ETH), and the value of two nodes exiting is 64eth (or 63 ETH).\\n    // If the value is less than 32, the corresponding amount will be punished\\n    // clCapital is the principal of nft exit held by the protocol\\n    uint96 clCapital;\\n}\\n\\nstruct ExitValidatorInfo {\\n    // Example Exit the token Id of the validator. No exit is an empty array.\\n    uint64 exitTokenId;\\n    // Height of exit block\\n    uint96 exitBlockNumber;\\n    // Amount of slash\\n    uint96 slashAmount;\\n}\\n\\n// Validator quits reporting information\\nstruct CLStakingExitInfo {\\n    uint128 stakingId;\\n    bytes pubkey;\\n}\\n\\n// Verifier penalty reporting information\\nstruct CLStakingSlashInfo {\\n    uint128 stakingId;\\n    // Trigger penalty on operator if slash occurs\\n    uint128 slashAmount;\\n    bytes pubkey;\\n}\\n\"\r\n    },\r\n    \"src/registries/NodeOperatorRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.8;\\n\\nimport \\\"openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\nimport \\\"src/interfaces/INodeOperatorsRegistry.sol\\\";\\nimport \\\"src/interfaces/IELVaultFactory.sol\\\";\\nimport \\\"src/interfaces/ILiquidStaking.sol\\\";\\nimport \\\"src/interfaces/IVNFT.sol\\\";\\nimport \\\"src/interfaces/IELVault.sol\\\";\\nimport \\\"src/interfaces/IOperatorSlash.sol\\\";\\nimport \\\"src/interfaces/ILargeStaking.sol\\\";\\n\\n/**\\n * @title Node Operator registry\\n *\\n * Registration and management of Node Operator\\n */\\ncontract NodeOperatorRegistry is\\n    Initializable,\\n    OwnableUpgradeable,\\n    INodeOperatorsRegistry,\\n    UUPSUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    using Math for uint256;\\n\\n    struct RewardSetting {\\n        address rewardAddress;\\n        uint256 ratio;\\n    }\\n\\n    /// @dev Node Operator parameters\\n    struct NodeOperator {\\n        bool trusted; // Trusted operator approved by dao\\n        bool isQuit;\\n        address owner;\\n        address controllerAddress; // Ethereum 1 address for the operator's management authority\\n        address vaultContractAddress; // Ethereum 1 contract address for the operator's vault\\n        string name; // operator name, Human-readable name\\n    }\\n\\n    IELVaultFactory public vaultFactoryContract;\\n\\n    ILiquidStaking public liquidStakingContract;\\n\\n    IVNFT public vNFTContract;\\n\\n    /// @dev Mapping of all node operators. Mapping is used to be able to extend the struct.\\n    mapping(uint256 => NodeOperator) internal operators;\\n\\n    uint256 internal constant MAX_REWARDSETTING_LENGTH = 3;\\n    // operator reward settings\\n    mapping(uint256 => RewardSetting[]) internal operatorRewardSetting;\\n\\n    // trusted operator set\\n    mapping(address => uint256) public trustedControllerAddress;\\n    // The operator corresponding to the control address\\n    mapping(address => uint256) public controllerAddress;\\n    // The used control address, an address can only be used once\\n    mapping(address => bool) public usedControllerAddress;\\n    // blacklist operator set\\n    mapping(uint256 => bool) public blacklistOperators;\\n\\n    // Total number of operators\\n    uint256 internal totalOperators;\\n    uint256 internal totalTrustedOperators;\\n    uint256 internal totalBlacklistOperators;\\n\\n    // dao address\\n    address public dao;\\n    // dao treasury address\\n    address public daoVaultAddress;\\n\\n    // operator registration fee\\n    uint256 public registrationFee;\\n\\n    // The block height at the start of the permissionless phase\\n    uint256 public permissionlessBlockNumber;\\n\\n    uint256 public constant BASIC_PLEDGE = 1 ether;\\n    // operator pledge funds set\\n    mapping(uint256 => uint256) public operatorPledgeVaultBalances;\\n\\n    // v2 storage\\n    IOperatorSlash public operatorSlashContract;\\n\\n    mapping(uint256 => uint256) public operatorSlashAmountOwed;\\n    mapping(uint256 => uint256) internal operatorCommissionRate;\\n    uint256 public defaultOperatorCommission;\\n\\n    // v3 storage\\n    ILargeStaking public largeStakingContract;\\n\\n    error PermissionDenied();\\n    error InvalidAddr();\\n    error InvalidParameter();\\n    error OperatorNotFound();\\n    error InvalidCommission();\\n    error InsufficientAmount();\\n    error ControllerAddrUsed();\\n    error OperatorHasArrears();\\n    error OperatorHasBlacklisted();\\n    error InsufficientMargin();\\n    error OperatorHasExited();\\n    error OperatorExitFailed();\\n    error OperatorAlreadyTrusted();\\n    error OperatorNotTrusted();\\n    error OperatorNotBlacklisted();\\n    error NoPermissionPhase();\\n    error InvalidRewardRatio();\\n    error PermissionlessPhaseStart();\\n\\n    modifier onlyOperatorSlash() {\\n        if (msg.sender != address(operatorSlashContract)) revert PermissionDenied();\\n        _;\\n    }\\n\\n    modifier onlyDao() {\\n        if (msg.sender != dao) revert PermissionDenied();\\n        _;\\n    }\\n\\n    modifier validAddress(address _a) {\\n        if (_a == address(0)) revert InvalidParameter();\\n        _;\\n    }\\n\\n    modifier operatorExists(uint256 _id) {\\n        if (_id == 0 || _id > totalOperators) revert OperatorNotFound();\\n        _;\\n    }\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {}\\n\\n    /**\\n     * @notice initialize NodeOperatorRegistry Contract\\n     * @param _dao Dao contract address\\n     * @param _daoVaultAddress Dao Vault Address\\n     * @param _vaultFactoryContractAddress vault factory contract address\\n     */\\n    function initialize(\\n        address _dao,\\n        address _daoVaultAddress,\\n        address _vaultFactoryContractAddress,\\n        address _nVNFTContractAddress\\n    ) public initializer {\\n        __Ownable_init();\\n        __UUPSUpgradeable_init();\\n        __ReentrancyGuard_init();\\n\\n        dao = _dao;\\n        daoVaultAddress = _daoVaultAddress;\\n        vaultFactoryContract = IELVaultFactory(_vaultFactoryContractAddress);\\n        vNFTContract = IVNFT(_nVNFTContractAddress);\\n        registrationFee = 0.1 ether;\\n        permissionlessBlockNumber = 0;\\n    }\\n\\n    /**\\n     * @notice initializeV2 NodeOperatorRegistry Contract\\n     * @param _vaultFactoryContractAddress new vault factory contract address\\n     * @param _resetVaultOperatorIds reset vault contract\\n     */\\n    function initializeV2(\\n        address _vaultFactoryContractAddress,\\n        address _operatorSlashContractAddress,\\n        uint256[] memory _resetVaultOperatorIds\\n    ) public reinitializer(2) onlyDao {\\n        defaultOperatorCommission = 2000;\\n        emit VaultFactorContractSet(address(vaultFactoryContract), _vaultFactoryContractAddress);\\n        vaultFactoryContract = IELVaultFactory(_vaultFactoryContractAddress);\\n\\n        emit OperatorSlashContractSet(address(operatorSlashContract), _operatorSlashContractAddress);\\n        operatorSlashContract = IOperatorSlash(_operatorSlashContractAddress);\\n        for (uint256 i = 0; i < _resetVaultOperatorIds.length; ++i) {\\n            _resetOperatorVaultContract(_resetVaultOperatorIds[i]);\\n        }\\n    }\\n\\n    function initializeV3(address _largeStakingContractAddress) public reinitializer(3) onlyOwner {\\n        largeStakingContract = ILargeStaking(_largeStakingContractAddress);\\n    }\\n\\n    /**\\n     * @notice Add node operator named `name` with reward address `rewardAddress` and _owner\\n     * @param _name Human-readable name\\n     * @param _controllerAddress Ethereum 1 address for the operator's management authority\\n     * @param _owner operator owner address\\n     * @param _rewardAddresses reward addresses\\n     * @param _ratios reward ratios\\n     * @return id a unique key of the added operator\\n     */\\n\\n    function registerOperator(\\n        string calldata _name,\\n        address _controllerAddress,\\n        address _owner,\\n        address[] calldata _rewardAddresses,\\n        uint256[] calldata _ratios\\n    ) external payable nonReentrant validAddress(_controllerAddress) validAddress(_owner) returns (uint256 id) {\\n        if (bytes(_name).length > 32) revert InvalidParameter();\\n        if (msg.value < BASIC_PLEDGE + registrationFee) revert InsufficientAmount();\\n        if (usedControllerAddress[_controllerAddress]) revert ControllerAddrUsed();\\n        id = totalOperators + 1;\\n\\n        totalOperators = id;\\n\\n        // Generate a vault contract for the operator\\n        address vaultContractAddress = vaultFactoryContract.create(id);\\n\\n        operators[id] = NodeOperator({\\n            trusted: false,\\n            isQuit: false,\\n            owner: _owner,\\n            controllerAddress: _controllerAddress,\\n            vaultContractAddress: vaultContractAddress,\\n            name: _name\\n        });\\n\\n        _setNodeOperatorRewardAddress(id, _rewardAddresses, _ratios);\\n\\n        usedControllerAddress[_controllerAddress] = true;\\n        controllerAddress[_controllerAddress] = id;\\n\\n        uint256 pledgeAmount = msg.value - registrationFee;\\n        operatorPledgeVaultBalances[id] += pledgeAmount;\\n        emit PledgeDeposited(pledgeAmount, id);\\n\\n        if (registrationFee > 0) {\\n            transfer(registrationFee, daoVaultAddress);\\n        }\\n\\n        emit NodeOperatorRegistered(id, _name, _controllerAddress, vaultContractAddress, _rewardAddresses, _ratios);\\n    }\\n\\n    /**\\n     * @notice Withdraw the deposit available to the operator, it must be sent by the operator owner\\n     * @param _operatorId operator id\\n     * @param _withdrawAmount withdrawal amount\\n     * @param _to receiving address\\n     */\\n\\n    function withdrawOperator(uint256 _operatorId, uint256 _withdrawAmount, address _to) external nonReentrant {\\n        if (blacklistOperators[_operatorId]) revert OperatorHasBlacklisted();\\n        if (operatorSlashAmountOwed[_operatorId] != 0) revert OperatorHasArrears();\\n        if (_to == address(0)) revert InvalidAddr();\\n\\n        NodeOperator memory operator = operators[_operatorId];\\n        if (operator.owner != msg.sender) revert PermissionDenied();\\n\\n        uint256 requireVault = calcRequirePledgeBalance(_operatorId);\\n\\n        // After the withdrawal is completed, the pledge funds requirements must also be met\\n        if (operatorPledgeVaultBalances[_operatorId] < requireVault + _withdrawAmount) revert InsufficientMargin();\\n        operatorPledgeVaultBalances[_operatorId] -= _withdrawAmount;\\n        payable(_to).transfer(_withdrawAmount);\\n\\n        emit OperatorWithdraw(_operatorId, _withdrawAmount, _to);\\n    }\\n\\n    function calcRequirePledgeBalance(uint256 _operatorId) internal view returns (uint256) {\\n        uint256 operatorNftCounts = vNFTContract.getActiveNftCountsOfOperator(_operatorId)\\n            + vNFTContract.getEmptyNftCountsOfOperator(_operatorId)\\n            + largeStakingContract.getOperatorValidatorCounts(_operatorId);\\n        // Pledge the required funds based on the number of validators\\n        uint256 requireVault = 0;\\n        if (operatorNftCounts <= 100) {\\n            requireVault = (operatorNftCounts * 10 / 100) * 1 ether;\\n            if (requireVault < 1 ether) {\\n                requireVault = 1 ether;\\n            }\\n        } else {\\n            requireVault = operatorNftCounts.sqrt() * 1 ether;\\n        }\\n\\n        return requireVault;\\n    }\\n\\n    /**\\n     * @notice Exit the operator. When there are no validators running, the owner of the operator has the right to opt out.\\n     * Unused funds must be transferred to another active operator\\n     * @param _operatorId operator id\\n     * @param _to The receiving address of the pledged funds of the withdrawn operator\\n     */\\n    function quitOperator(uint256 _operatorId, address _to) external {\\n        if (blacklistOperators[_operatorId]) revert OperatorHasBlacklisted();\\n        if (operatorSlashAmountOwed[_operatorId] != 0) revert OperatorHasArrears();\\n        NodeOperator memory operator = operators[_operatorId];\\n        if (operator.owner != msg.sender) revert PermissionDenied();\\n        if (operators[_operatorId].isQuit) revert OperatorHasExited();\\n\\n        uint256 operatorNftCounts = vNFTContract.getActiveNftCountsOfOperator(_operatorId)\\n            + vNFTContract.getEmptyNftCountsOfOperator(_operatorId);\\n        // There are active validators and cannot exit\\n        if (operatorNftCounts != 0) revert OperatorExitFailed();\\n\\n        uint256 nowPledge = operatorPledgeVaultBalances[_operatorId];\\n        operatorPledgeVaultBalances[_operatorId] = 0;\\n\\n        if (_to == address(0)) revert InvalidAddr();\\n        payable(_to).transfer(nowPledge);\\n        operators[_operatorId].isQuit = true;\\n\\n        emit OperatorQuit(_operatorId, nowPledge, _to);\\n    }\\n\\n    /**\\n     * @notice Set an operator as trusted\\n     * @param _id operator id\\n     */\\n\\n    function setTrustedOperator(uint256 _id) external onlyDao operatorExists(_id) {\\n        _checkPermission();\\n\\n        NodeOperator memory operator = operators[_id];\\n        if (operator.trusted) revert OperatorAlreadyTrusted();\\n        operators[_id].trusted = true;\\n        totalTrustedOperators += 1;\\n        trustedControllerAddress[operator.controllerAddress] = _id;\\n        emit NodeOperatorTrustedSet(_id, operator.name, true);\\n    }\\n\\n    /**\\n     * @notice Remove an operator as trusted\\n     * @param _id operator id\\n     */\\n\\n    function removeTrustedOperator(uint256 _id) external onlyDao operatorExists(_id) {\\n        _checkPermission();\\n\\n        NodeOperator memory operator = operators[_id];\\n        if (!operator.trusted) revert OperatorNotTrusted();\\n        operators[_id].trusted = false;\\n        totalTrustedOperators -= 1;\\n        trustedControllerAddress[operator.controllerAddress] = 0;\\n        emit NodeOperatorTrustedRemove(_id, operator.name, false);\\n    }\\n\\n    /**\\n     * @notice Set an operator as blacklist\\n     * @param _id operator id\\n     */\\n    function setBlacklistOperator(uint256 _id) external onlyDao operatorExists(_id) {\\n        if (blacklistOperators[_id]) revert OperatorHasBlacklisted();\\n        blacklistOperators[_id] = true;\\n        totalBlacklistOperators += 1;\\n        emit NodeOperatorBlacklistSet(_id);\\n    }\\n\\n    /**\\n     * @notice Remove an operator as blacklist\\n     * @param _id operator id\\n     */\\n\\n    function removeBlacklistOperator(uint256 _id) external onlyDao operatorExists(_id) {\\n        if (!blacklistOperators[_id]) revert OperatorNotBlacklisted();\\n        blacklistOperators[_id] = false;\\n        totalBlacklistOperators -= 1;\\n        emit NodeOperatorBlacklistRemove(_id);\\n    }\\n\\n    function _checkPermission() internal view {\\n        if (permissionlessBlockNumber != 0) {\\n            if (block.number >= permissionlessBlockNumber) revert NoPermissionPhase();\\n        }\\n    }\\n\\n    function _setNodeOperatorRewardAddress(uint256 _id, address[] calldata _rewardAddresses, uint256[] calldata _ratios)\\n        internal\\n    {\\n        if (\\n            _rewardAddresses.length == 0 || _rewardAddresses.length > MAX_REWARDSETTING_LENGTH\\n                || _rewardAddresses.length != _ratios.length\\n        ) revert InvalidParameter();\\n\\n        // clear old settings\\n        delete operatorRewardSetting[_id];\\n\\n        uint256 totalRatio = 0;\\n        for (uint256 i = 0; i < _rewardAddresses.length; ++i) {\\n            if (_rewardAddresses[i] == address(0)) revert InvalidAddr();\\n            operatorRewardSetting[_id].push(RewardSetting({rewardAddress: _rewardAddresses[i], ratio: _ratios[i]}));\\n\\n            totalRatio += _ratios[i];\\n        }\\n\\n        // Ratio sum should be 100%\\n        if (totalRatio != 100) revert InvalidRewardRatio();\\n    }\\n\\n    /**\\n     * @notice Get information about an operator\\n     * @param _id operator id\\n     * @param _fullInfo Get all information\\n     */\\n    function getNodeOperator(uint256 _id, bool _fullInfo)\\n        external\\n        view\\n        operatorExists(_id)\\n        returns (\\n            bool _trusted,\\n            string memory _name,\\n            address _owner,\\n            address _controllerAddress,\\n            address _vaultContractAddress\\n        )\\n    {\\n        NodeOperator memory operator = operators[_id];\\n\\n        _trusted = operator.trusted;\\n        _name = _fullInfo ? operator.name : \\\"\\\";\\n        _owner = operator.owner;\\n        _controllerAddress = operator.controllerAddress;\\n        _vaultContractAddress = operator.vaultContractAddress;\\n    }\\n\\n    /**\\n     * @notice Get information about an operator vault contract address\\n     * @param _id operator id\\n     */\\n    function getNodeOperatorVaultContract(uint256 _id)\\n        external\\n        view\\n        operatorExists(_id)\\n        returns (address vaultContractAddress)\\n    {\\n        return operators[_id].vaultContractAddress;\\n    }\\n\\n    /**\\n     * @notice Get operator rewardSetting\\n     * @param _operatorId operator id\\n     */\\n    function getNodeOperatorRewardSetting(uint256 _operatorId)\\n        external\\n        view\\n        returns (address[] memory rewardAddresses, uint256[] memory ratios)\\n    {\\n        RewardSetting[] memory rewardSetting = operatorRewardSetting[_operatorId];\\n        rewardAddresses = new address[] (rewardSetting.length);\\n        ratios = new uint256[] (rewardSetting.length);\\n        for (uint256 i = 0; i < rewardSetting.length; ++i) {\\n            rewardAddresses[i] = rewardSetting[i].rewardAddress;\\n            ratios[i] = rewardSetting[i].ratio;\\n        }\\n\\n        return (rewardAddresses, ratios);\\n    }\\n\\n    /**\\n     * @notice Returns whether an operator is trusted\\n     * @param _operatorId operator id\\n     */\\n    function isTrustedOperator(uint256 _operatorId) external view operatorExists(_operatorId) returns (bool) {\\n        if (blacklistOperators[_operatorId]) {\\n            return false;\\n        }\\n\\n        if (operators[_operatorId].isQuit) {\\n            return false;\\n        }\\n\\n        if (permissionlessBlockNumber != 0 && block.number >= permissionlessBlockNumber) {\\n            return true;\\n        }\\n\\n        return operators[_operatorId].trusted;\\n    }\\n\\n    /**\\n     * @notice Returns whether an operator is quit\\n     * @param _operatorId operator id\\n     */\\n    function isQuitOperator(uint256 _operatorId) external view operatorExists(_operatorId) returns (bool) {\\n        return operators[_operatorId].isQuit;\\n    }\\n\\n    /**\\n     * @notice Returns whether an operator is Blacklist\\n     * @param _operatorId operator id\\n     */\\n    function isBlacklistOperator(uint256 _operatorId) external view operatorExists(_operatorId) returns (bool) {\\n        if (blacklistOperators[_operatorId]) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @notice Returns whether an operator is trusted\uff0c return operatorId\\n     * @param _controllerAddress controller address\\n     */\\n    function isTrustedOperatorOfControllerAddress(address _controllerAddress) external view returns (uint256) {\\n        uint256 _id = controllerAddress[_controllerAddress];\\n        if (blacklistOperators[_id]) {\\n            return 0;\\n        }\\n\\n        if (operators[_id].isQuit) {\\n            return 0;\\n        }\\n\\n        if (permissionlessBlockNumber != 0 && block.number >= permissionlessBlockNumber) {\\n            return _id;\\n        }\\n\\n        return trustedControllerAddress[_controllerAddress];\\n    }\\n\\n    /**\\n     * @notice deposit pledge fund for operator\\n     * @param _operatorId operator Id\\n     */\\n    function deposit(uint256 _operatorId) external payable nonReentrant {\\n        if (operators[_operatorId].isQuit) revert OperatorHasExited();\\n\\n        uint256 amountOwed = operatorSlashAmountOwed[_operatorId];\\n        if (amountOwed > 0) {\\n            if (amountOwed > msg.value) {\\n                operatorSlashContract.slashArrearsReceive{value: msg.value}(_operatorId, msg.value);\\n                operatorSlashAmountOwed[_operatorId] -= msg.value;\\n                emit OperatorArrearsReduce(_operatorId, msg.value);\\n            } else {\\n                operatorSlashContract.slashArrearsReceive{value: amountOwed}(_operatorId, amountOwed);\\n                operatorSlashAmountOwed[_operatorId] = 0;\\n                operatorPledgeVaultBalances[_operatorId] += msg.value - amountOwed;\\n                emit OperatorArrearsReduce(_operatorId, amountOwed);\\n            }\\n        } else {\\n            operatorPledgeVaultBalances[_operatorId] += msg.value;\\n        }\\n\\n        emit PledgeDeposited(msg.value, _operatorId);\\n    }\\n\\n    function _slash(uint256 _operatorId, uint256 _amount) internal operatorExists(_operatorId) returns (uint256) {\\n        uint256 pledgeAmounts = operatorPledgeVaultBalances[_operatorId];\\n        if (pledgeAmounts == 0) {\\n            emit OperatorArrearsIncrease(_operatorId, _amount);\\n            operatorSlashAmountOwed[_operatorId] += _amount;\\n            return 0;\\n        }\\n\\n        if (pledgeAmounts >= _amount) {\\n            operatorPledgeVaultBalances[_operatorId] -= _amount;\\n            emit Slashed(_operatorId, _amount);\\n            return _amount;\\n        } else {\\n            uint256 slashAmountAdded = _amount - pledgeAmounts;\\n            operatorSlashAmountOwed[_operatorId] += slashAmountAdded;\\n            emit OperatorArrearsIncrease(_operatorId, slashAmountAdded);\\n            operatorPledgeVaultBalances[_operatorId] = 0;\\n            emit Slashed(_operatorId, pledgeAmounts);\\n            return pledgeAmounts;\\n        }\\n    }\\n\\n    /**\\n     * @notice When a validator run by an operator goes seriously offline, it will be slashed\\n     * @param _slashType slashType\\n     * @param _slashIds tokenId or stakingId\\n     * @param _operatorIds operator id\\n     * @param _amounts slash amount\\n     */\\n    function slash(\\n        uint256 _slashType,\\n        uint256[] memory _slashIds,\\n        uint256[] memory _operatorIds,\\n        uint256[] memory _amounts\\n    ) external nonReentrant onlyOperatorSlash {\\n        uint256 totalSlashAmounts = 0;\\n        uint256[] memory slashAmounts = new uint256[] (_operatorIds.length);\\n        for (uint256 i = 0; i < _operatorIds.length; ++i) {\\n            uint256 amount = _amounts[i];\\n            if (amount == 0) {\\n                continue;\\n            }\\n\\n            uint256 operatorId = _operatorIds[i];\\n            uint256 slashAmount = _slash(operatorId, amount);\\n            slashAmounts[i] = slashAmount;\\n            totalSlashAmounts += slashAmount;\\n        }\\n\\n        operatorSlashContract.slashReceive{value: totalSlashAmounts}(\\n            _slashType, _slashIds, _operatorIds, slashAmounts, _amounts\\n        );\\n    }\\n\\n    /**\\n     * @notice Determine whether the operator meets the pledge requirements\\n     * @param _operatorId operator id\\n     */\\n    function isConformBasicPledge(uint256 _operatorId) external view returns (bool) {\\n        return operatorPledgeVaultBalances[_operatorId] >= BASIC_PLEDGE;\\n    }\\n\\n    /**\\n     * @notice operator pledge balance\\n     * @param _operatorId operator id\\n     */\\n    function getPledgeInfoOfOperator(uint256 _operatorId) external view returns (uint256, uint256) {\\n        uint256 requireBalance = calcRequirePledgeBalance(_operatorId);\\n        return (operatorPledgeVaultBalances[_operatorId], requireBalance);\\n    }\\n\\n    /**\\n     * @notice reset a new vault contract for operator\\n     * @param _operatorIds operators id\\n     */\\n    function resetOperatorVaultContract(uint256[] calldata _operatorIds) external onlyDao {\\n        for (uint256 i = 0; i < _operatorIds.length; ++i) {\\n            uint256 operatorId = _operatorIds[i];\\n            _resetOperatorVaultContract(operatorId);\\n        }\\n    }\\n\\n    function _resetOperatorVaultContract(uint256 _operatorId) internal {\\n        address vaultContractAddress = vaultFactoryContract.create(_operatorId);\\n        emit OperatorVaultContractReset(operators[_operatorId].vaultContractAddress, vaultContractAddress);\\n        operators[_operatorId].vaultContractAddress = vaultContractAddress;\\n    }\\n\\n    /**\\n     * @notice get operator commission rate\\n     * @param _operatorIds operator id\\n     */\\n    function getOperatorCommissionRate(uint256[] memory _operatorIds) external view returns (uint256[] memory) {\\n        uint256[] memory commissions = new uint256[] (_operatorIds.length);\\n        for (uint256 i = 0; i < _operatorIds.length; ++i) {\\n            if (operatorCommissionRate[_operatorIds[i]] == 0) {\\n                commissions[i] = defaultOperatorCommission;\\n            } else {\\n                commissions[i] = operatorCommissionRate[_operatorIds[i]];\\n            }\\n        }\\n\\n        return commissions;\\n    }\\n\\n    /**\\n     * @notice set operator comission rate\\n     * @param _operatorId operator id\\n     * @param _rate _rate\\n     */\\n    function setOperatorCommissionRate(uint256 _operatorId, uint256 _rate) external onlyDao {\\n        if (_rate >= 5000) revert InvalidCommission();\\n        uint256 commissionRate = operatorCommissionRate[_operatorId];\\n        emit CommissionRateChanged(commissionRate == 0 ? defaultOperatorCommission : commissionRate, _rate);\\n        operatorCommissionRate[_operatorId] = _rate;\\n    }\\n\\n    /**\\n     * @notice Change the owner of the operator\\n     * @param _id operator id\\n     * @param _owner Ethereum 1 address for the operator's owner authority\\n     */\\n    function setNodeOperatorOwnerAddress(uint256 _id, address _owner) external operatorExists(_id) {\\n        NodeOperator memory operator = operators[_id];\\n        if (operator.owner != msg.sender && msg.sender != dao) revert PermissionDenied();\\n\\n        operators[_id].owner = _owner;\\n\\n        emit NodeOperatorOwnerAddressSet(_id, operator.name, _owner);\\n    }\\n\\n    /**\\n     * @notice set operator setting\\n     */\\n    function setOperatorSetting(\\n        uint256 _id,\\n        string calldata _name,\\n        address _controllerAddress,\\n        address[] calldata _rewardAddresses,\\n        uint256[] calldata _ratios\\n    ) public operatorExists(_id) {\\n        NodeOperator memory operator = operators[_id];\\n\\n        if (msg.sender != operator.owner) revert PermissionDenied();\\n\\n        if (bytes(_name).length != 0) {\\n            operators[_id].name = _name;\\n            emit NodeOperatorNameSet(_id, _name);\\n        }\\n        if (_controllerAddress != address(0)) {\\n            // The same address can only be used once\\n            if (usedControllerAddress[_controllerAddress]) revert ControllerAddrUsed();\\n\\n            if (operator.owner != msg.sender) revert PermissionDenied();\\n            if (trustedControllerAddress[operator.controllerAddress] == _id) {\\n                trustedControllerAddress[operator.controllerAddress] = 0;\\n                trustedControllerAddress[_controllerAddress] = _id;\\n            }\\n\\n            // Update the control address set to ensure that the operatorid can be obtained according to the control address\\n            controllerAddress[operator.controllerAddress] = 0;\\n            controllerAddress[_controllerAddress] = _id;\\n            operators[_id].controllerAddress = _controllerAddress;\\n            usedControllerAddress[_controllerAddress] = true;\\n\\n            emit NodeOperatorControllerAddressSet(_id, operator.name, _controllerAddress);\\n        }\\n        if (_rewardAddresses.length != 0) {\\n            _setNodeOperatorRewardAddress(_id, _rewardAddresses, _ratios);\\n            emit NodeOperatorRewardAddressSet(_id, _rewardAddresses, _ratios);\\n        }\\n    }\\n\\n    /**\\n     * @notice set contract setting\\n     */\\n    function setNodeOperatorRegistrySetting(\\n        address _dao,\\n        address _daoVaultAddress,\\n        address _liquidStakingContractAddress,\\n        address _operatorSlashContractAddress,\\n        address _vaultFactoryContractAddress,\\n        address _largeStakingContractAddress,\\n        uint256 _defaultOperatorCommission,\\n        uint256 _registrationFee,\\n        uint256 _permissionlessBlockNumber\\n    ) public onlyDao {\\n        if (_dao != address(0)) {\\n            emit DaoAddressChanged(dao, _dao);\\n            dao = _dao;\\n        }\\n\\n        if (_daoVaultAddress != address(0)) {\\n            emit DaoVaultAddressChanged(daoVaultAddress, _daoVaultAddress);\\n            daoVaultAddress = _daoVaultAddress;\\n        }\\n\\n        if (_liquidStakingContractAddress != address(0)) {\\n            emit LiquidStakingChanged(address(liquidStakingContract), _liquidStakingContractAddress);\\n            liquidStakingContract = ILiquidStaking(_liquidStakingContractAddress);\\n        }\\n\\n        if (_operatorSlashContractAddress != address(0)) {\\n            emit OperatorSlashContractSet(address(operatorSlashContract), _operatorSlashContractAddress);\\n            operatorSlashContract = IOperatorSlash(_operatorSlashContractAddress);\\n        }\\n\\n        if (_vaultFactoryContractAddress != address(0)) {\\n            emit VaultFactorContractSet(address(vaultFactoryContract), _vaultFactoryContractAddress);\\n            vaultFactoryContract = IELVaultFactory(_vaultFactoryContractAddress);\\n        }\\n\\n        if (_defaultOperatorCommission != 0) {\\n            if (_defaultOperatorCommission >= 5000) revert InvalidCommission();\\n            emit DefaultOperatorCommissionRateChanged(defaultOperatorCommission, _defaultOperatorCommission);\\n            defaultOperatorCommission = _defaultOperatorCommission;\\n        }\\n\\n        if (_registrationFee != 0) {\\n            emit RegistrationFeeChanged(registrationFee, _registrationFee);\\n            registrationFee = _registrationFee;\\n        }\\n\\n        if (_permissionlessBlockNumber != 0) {\\n            if (permissionlessBlockNumber != 0) revert PermissionlessPhaseStart();\\n            if (_permissionlessBlockNumber <= block.number) revert InvalidParameter();\\n            permissionlessBlockNumber = _permissionlessBlockNumber;\\n            emit PermissionlessBlockNumberSet(_permissionlessBlockNumber);\\n        }\\n\\n        if (_largeStakingContractAddress != address(0)) {\\n            emit LargeStakingChanged(address(largeStakingContract), _largeStakingContractAddress);\\n            largeStakingContract = ILargeStaking(_largeStakingContractAddress);\\n        }\\n    }\\n\\n    /**\\n     * @notice transfer amount to an address\\n     */\\n    function transfer(uint256 _amount, address _to) internal {\\n        if (_to == address(0)) revert InvalidAddr();\\n        payable(_to).transfer(_amount);\\n        emit Transferred(_to, _amount);\\n    }\\n\\n    /**\\n     * @notice Returns total number of node operators\\n     */\\n    function getNodeOperatorsCount() external view returns (uint256) {\\n        return totalOperators;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"openzeppelin-upgrades/=lib/openzeppelin-upgrades/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {\r\n      \"src/utils/Array.sol\": {\r\n        \"Array\": \"0x926cf8c6c07beaba0ecf55c9c41443614c4bedf1\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ControllerAddrUsed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientMargin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommission\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParameter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardRatio\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPermissionPhase\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadyTrusted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorExitFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorHasArrears\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorHasBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorHasExited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotBlacklisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorNotTrusted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermissionDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PermissionlessPhaseStart\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldRate\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"CommissionRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldDao\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"DaoAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"DaoClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldDaoVaultAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_daoVaultAddress\",\"type\":\"address\"}],\"name\":\"DaoVaultAddressChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldDefaultOperatorCommission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_defaultOperatorCommission\",\"type\":\"uint256\"}],\"name\":\"DefaultOperatorCommissionRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldLargeStakingContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_largeStakingContractAddress\",\"type\":\"address\"}],\"name\":\"LargeStakingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"LiquidStakingChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NodeOperatorBlacklistRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"NodeOperatorBlacklistSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"name\":\"NodeOperatorControllerAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"NodeOperatorNameSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_ownerAddress\",\"type\":\"address\"}],\"name\":\"NodeOperatorOwnerAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vaultContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_rewardAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ratios\",\"type\":\"uint256[]\"}],\"name\":\"NodeOperatorRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"_rewardAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"_ratios\",\"type\":\"uint256[]\"}],\"name\":\"NodeOperatorRewardAddressSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_trusted\",\"type\":\"bool\"}],\"name\":\"NodeOperatorTrustedRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_trusted\",\"type\":\"bool\"}],\"name\":\"NodeOperatorTrustedSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OperatorArrearsIncrease\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OperatorArrearsReduce\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"OperatorClaimRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_nowVault\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OperatorQuit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldOperatorSlashContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operatorSlashContractAddress\",\"type\":\"address\"}],\"name\":\"OperatorSlashContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldVaultContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vaultContractAddress\",\"type\":\"address\"}],\"name\":\"OperatorVaultContractReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OperatorWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"}],\"name\":\"PermissionlessBlockNumberSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"PledgeDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"RegistrationFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Slashed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Transferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vaultFactoryContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vaultFactoryContractAddress\",\"type\":\"address\"}],\"name\":\"VaultFactorContractSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASIC_PLEDGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blacklistOperators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultOperatorCommission\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_fullInfo\",\"type\":\"bool\"}],\"name\":\"getNodeOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_trusted\",\"type\":\"bool\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"getNodeOperatorRewardSetting\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"rewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ratios\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"getNodeOperatorVaultContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vaultContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNodeOperatorsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_operatorIds\",\"type\":\"uint256[]\"}],\"name\":\"getOperatorCommissionRate\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"getPledgeInfoOfOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoVaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultFactoryContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nVNFTContractAddress\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vaultFactoryContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorSlashContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_resetVaultOperatorIds\",\"type\":\"uint256[]\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_largeStakingContractAddress\",\"type\":\"address\"}],\"name\":\"initializeV3\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"isBlacklistOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"isConformBasicPledge\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"isQuitOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"}],\"name\":\"isTrustedOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"}],\"name\":\"isTrustedOperatorOfControllerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"largeStakingContract\",\"outputs\":[{\"internalType\":\"contract ILargeStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidStakingContract\",\"outputs\":[{\"internalType\":\"contract ILiquidStaking\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operatorPledgeVaultBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"operatorSlashAmountOwed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operatorSlashContract\",\"outputs\":[{\"internalType\":\"contract IOperatorSlash\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"permissionlessBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"quitOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ratios\",\"type\":\"uint256[]\"}],\"name\":\"registerOperator\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registrationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeBlacklistOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"removeTrustedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_operatorIds\",\"type\":\"uint256[]\"}],\"name\":\"resetOperatorVaultContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setBlacklistOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setNodeOperatorOwnerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_daoVaultAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidStakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operatorSlashContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultFactoryContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_largeStakingContractAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultOperatorCommission\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_registrationFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_permissionlessBlockNumber\",\"type\":\"uint256\"}],\"name\":\"setNodeOperatorRegistrySetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rate\",\"type\":\"uint256\"}],\"name\":\"setOperatorCommissionRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_controllerAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_rewardAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_ratios\",\"type\":\"uint256[]\"}],\"name\":\"setOperatorSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"setTrustedOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slashType\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_slashIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_operatorIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"slash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"trustedControllerAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedControllerAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vNFTContract\",\"outputs\":[{\"internalType\":\"contract IVNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultFactoryContract\",\"outputs\":[{\"internalType\":\"contract IELVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_operatorId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NodeOperatorRegistry", "CompilerVersion": "v0.8.8+commit.dddeac2f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}