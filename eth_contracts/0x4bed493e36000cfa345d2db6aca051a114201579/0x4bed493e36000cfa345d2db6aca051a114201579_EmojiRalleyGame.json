{"SourceCode": "// SPDX-License-Identifier: MIT\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC1155/IERC1155.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\r\n *\r\n * _Available since v3.1._\r\n */\r\ninterface IERC1155 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\r\n     */\r\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\r\n\r\n    /**\r\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\r\n     * transfers.\r\n     */\r\n    event TransferBatch(\r\n        address indexed operator,\r\n        address indexed from,\r\n        address indexed to,\r\n        uint256[] ids,\r\n        uint256[] values\r\n    );\r\n\r\n    /**\r\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\r\n     * `approved`.\r\n     */\r\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\r\n     *\r\n     * If an {URI} event was emitted for `id`, the standard\r\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\r\n     * returned by {IERC1155MetadataURI-uri}.\r\n     */\r\n    event URI(string value, uint256 indexed id);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `accounts` and `ids` must have the same length.\r\n     */\r\n    function balanceOfBatch(\r\n        address[] calldata accounts,\r\n        uint256[] calldata ids\r\n    ) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `operator` cannot be the caller.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\r\n     *\r\n     * See {setApprovalForAll}.\r\n     */\r\n    function isApprovedForAll(address account, address operator) external view returns (bool);\r\n\r\n    /**\r\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\r\n     *\r\n     * Emits a {TransferSingle} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\r\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\r\n     *\r\n     * Emits a {TransferBatch} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `ids` and `amounts` must have the same length.\r\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\r\n     * acceptance magic value.\r\n     */\r\n    function safeBatchTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256[] calldata ids,\r\n        uint256[] calldata amounts,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the caller.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// File: contracts/NewEmojiGame.sol\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract EmojiRalleyGame is Ownable, ReentrancyGuard {\r\n    using SafeMath for uint256;\r\n\r\n    // State variables\r\n    mapping(address => uint256) public ethBalances;\r\n    mapping(address => mapping(address => uint256)) public tokenBalances; // ERC20 token balances\r\n    mapping(address => bool) public allowedTokens; // Allowed ERC20 tokens for deposit\r\n    address[] public allowedTokenAddresses; // List of allowed ERC20 token addresses\r\n\r\n    mapping(address => bool) public allowedERC721s; // Allowed ERC721 tokens for free game rewards\r\n    mapping(address => bool) public allowedERC1155s; // Allowed ERC1155 tokens for free game rewards\r\n\r\n    struct Player {\r\n        bool exists;\r\n        uint256 totalWon;\r\n        uint256 totalWonERC20;\r\n        uint256 gamesPlayed;\r\n        uint256 gamesWon;\r\n        uint256 totalWageredEth; // Total ETH wagered by the player\r\n        uint256 totalWageredErc20; // Total ERC20 wagered by the player\r\n        mapping(address => uint256) erc20Winnings; // ERC20 token address to amount won\r\n        uint256 totalEthRewards;  // Total ETH rewards earned by the player\r\n        mapping(address => uint256) erc20Rewards; // ERC20 token address to rewards earned\r\n        mapping(address => uint256) totalErc20Rewards; // Total ERC20 rewards earned by the player for each token\r\n    }\r\n\r\n    mapping(address => Player) public leaderboard;\r\n\r\n    struct RewardsInfo {\r\n        bool rewardsEnabled;\r\n        uint256 thresholdEth;\r\n        uint256 thresholdErc20;\r\n        uint256 rewardPercentage; // Represented in basis points, so 100 = 1%\r\n        uint256 epoch; // Epoch for controlling reward periods\r\n    }\r\n\r\n    RewardsInfo public rewardsInfo;\r\n    mapping(address => uint256) public ethWageredSinceLastReward; // Tracks ETH wagered since last reward for each player\r\n    mapping(address => mapping(address => uint256)) public erc20WageredSinceLastReward; // Tracks ERC20 wagered since last reward for each player\r\n\r\n    // Events\r\n    event Deposited(address indexed user, uint256 amount);\r\n    event TokenDeposited(address indexed user, address token, uint256 amount);\r\n    event Withdrawn(address indexed user, uint256 amount);\r\n    event TokenWithdrawn(address indexed user, address token, uint256 amount);\r\n    event TokenAdded(address token);\r\n    event WinnerPaid(address indexed winner, uint256 amount);\r\n    event RewardClaimed(address indexed user, uint256 amount);\r\n\r\n    address public HOUSE_ADDRESS;\r\n\r\n    constructor() {\r\n        // Initialize rewards parameters\r\n        rewardsInfo = RewardsInfo({\r\n            rewardsEnabled: false,\r\n            thresholdEth: 0.5 ether,\r\n            thresholdErc20: 10000,\r\n            rewardPercentage: 100, // 1%\r\n            epoch: 0\r\n        });\r\n    }\r\n\r\n    function deposit() external payable {\r\n        ethBalances[msg.sender] = ethBalances[msg.sender].add(msg.value);\r\n        emit Deposited(msg.sender, msg.value);\r\n    }\r\n\r\n    function depositToken(address token, uint256 amount) external {\r\n        require(allowedTokens[token], \"Token not allowed\");\r\n        IERC20(token).transferFrom(msg.sender, address(this), amount);\r\n        tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token].add(amount);\r\n        emit TokenDeposited(msg.sender, token, amount);\r\n    }\r\n\r\n    function depositERC721(address token, uint256 tokenId) external {\r\n        require(allowedERC721s[token], \"ERC721 token not allowed\");\r\n        IERC721(token).transferFrom(msg.sender, address(this), tokenId);\r\n    }\r\n\r\n    function depositERC1155(address token, uint256 tokenId, uint256 amount, bytes calldata data) external {\r\n        require(allowedERC1155s[token], \"ERC1155 token not allowed\");\r\n        IERC1155(token).safeTransferFrom(msg.sender, address(this), tokenId, amount, data);\r\n    }\r\n\r\n    function withdraw(uint256 amount) external nonReentrant {\r\n        require(ethBalances[msg.sender] >= amount, \"Insufficient balance\");\r\n        ethBalances[msg.sender] = ethBalances[msg.sender].sub(amount);\r\n        payable(msg.sender).transfer(amount);\r\n        emit Withdrawn(msg.sender, amount);\r\n    }\r\n\r\n    function withdrawToken(address token, uint256 amount) external nonReentrant {\r\n        require(tokenBalances[msg.sender][token] >= amount, \"Insufficient balance\");\r\n        tokenBalances[msg.sender][token] = tokenBalances[msg.sender][token].sub(amount);\r\n        IERC20(token).transfer(msg.sender, amount);\r\n        emit TokenWithdrawn(msg.sender, token, amount);\r\n    }\r\n\r\n    function addAllowedToken(address token) external onlyOwner {\r\n        if (!allowedTokens[token]) {\r\n            allowedTokens[token] = true;\r\n            allowedTokenAddresses.push(token);\r\n            emit TokenAdded(token);\r\n        }\r\n    }\r\n\r\n    function addAllowedERC721(address token) external onlyOwner {\r\n        allowedERC721s[token] = true;\r\n    }\r\n\r\n    function addAllowedERC1155(address token) external onlyOwner {\r\n        allowedERC1155s[token] = true;\r\n    }\r\n\r\n    function setHouseAddress(address _newHouseAddress) external onlyOwner {\r\n        HOUSE_ADDRESS = _newHouseAddress;\r\n    }\r\n\r\n    function deductPlayerWagersAndHouseShare(address[] memory players, uint256[] memory wagers) external onlyOwner {\r\n        require(players.length == wagers.length, \"Players and wagers length mismatch\");\r\n\r\n        uint256 totalWagered = 0;\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            require(ethBalances[players[i]] >= wagers[i], \"Insufficient balance for wager\");\r\n            ethBalances[players[i]] = ethBalances[players[i]].sub(wagers[i]);\r\n            totalWagered = totalWagered.add(wagers[i]);\r\n\r\n            // Update individual player's wagered amount for reward calculations\r\n            ethWageredSinceLastReward[players[i]] = ethWageredSinceLastReward[players[i]].add(wagers[i]);\r\n        }\r\n\r\n        uint256 houseShare = totalWagered.mul(10).div(100);\r\n        ethBalances[HOUSE_ADDRESS] = ethBalances[HOUSE_ADDRESS].add(houseShare);\r\n    }\r\n\r\n    function refundPlayers(address token, address[] memory players, uint256[] memory wagers) external onlyOwner {\r\n        require(players.length == wagers.length, \"Players and wagers length mismatch\");\r\n\r\n        uint256 totalWagered = 0;\r\n\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            if (token == address(0)) {\r\n                // Handle ETH refunds\r\n                ethBalances[players[i]] = ethBalances[players[i]].add(wagers[i]);\r\n                ethWageredSinceLastReward[players[i]] = ethWageredSinceLastReward[players[i]].sub(wagers[i]);\r\n            } else {\r\n                // Handle ERC20 refunds\r\n                require(allowedTokens[token], \"Token not allowed\");\r\n                tokenBalances[players[i]][token] = tokenBalances[players[i]][token].add(wagers[i]);\r\n                erc20WageredSinceLastReward[players[i]][token] = erc20WageredSinceLastReward[players[i]][token].sub(wagers[i]);\r\n            }\r\n\r\n            totalWagered = totalWagered.add(wagers[i]);\r\n        }\r\n\r\n        uint256 houseShare = totalWagered.mul(10).div(100);\r\n\r\n        if (token == address(0)) {\r\n            ethBalances[HOUSE_ADDRESS] = ethBalances[HOUSE_ADDRESS].sub(houseShare);\r\n        } else {\r\n            tokenBalances[HOUSE_ADDRESS][token] = tokenBalances[HOUSE_ADDRESS][token].sub(houseShare);\r\n        }\r\n    }\r\n\r\n\r\n    function deductPlayerWagersAndHouseShareERC20(address token, address[] memory players, uint256[] memory wagers) external onlyOwner {\r\n        require(allowedTokens[token], \"Token not allowed\");\r\n        require(players.length == wagers.length, \"Players and wagers length mismatch\");\r\n\r\n        uint256 totalWagered = 0;\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            require(tokenBalances[players[i]][token] >= wagers[i], \"Insufficient balance for wager\");\r\n            tokenBalances[players[i]][token] = tokenBalances[players[i]][token].sub(wagers[i]);\r\n            totalWagered = totalWagered.add(wagers[i]);\r\n\r\n            // Update individual player's wagered amount for reward calculations\r\n            erc20WageredSinceLastReward[players[i]][token] = erc20WageredSinceLastReward[players[i]][token].add(wagers[i]);\r\n        }\r\n\r\n        uint256 houseShare = totalWagered.mul(10).div(100);\r\n        tokenBalances[HOUSE_ADDRESS][token] = tokenBalances[HOUSE_ADDRESS][token].add(houseShare);\r\n    }\r\n\r\n    function handleFreeGameResults(address winner, uint256 winningsAmount) external onlyOwner {\r\n        // Credit ETH winnings to the winner's balance from the house\r\n        ethBalances[HOUSE_ADDRESS] = ethBalances[HOUSE_ADDRESS].sub(winningsAmount);\r\n        ethBalances[winner] = ethBalances[winner].add(winningsAmount);\r\n        emit WinnerPaid(winner, winningsAmount);\r\n    }\r\n\r\n    function handleFreeGameResultsERC20(address token, address winner, uint256 winningsAmount) external onlyOwner {\r\n        require(allowedTokens[token], \"Token not allowed\");\r\n\r\n        // Credit ERC20 winnings to the winner's balance from the house\r\n        tokenBalances[HOUSE_ADDRESS][token] = tokenBalances[HOUSE_ADDRESS][token].sub(winningsAmount);\r\n        tokenBalances[winner][token] = tokenBalances[winner][token].add(winningsAmount);\r\n        emit WinnerPaid(winner, winningsAmount);\r\n    }\r\n\r\n    function handleFreeGameResultsERC721(address token, address winner, uint256 tokenId) external onlyOwner {\r\n        require(allowedERC721s[token], \"ERC721 token not allowed\");\r\n        IERC721(token).transferFrom(address(this), winner, tokenId);\r\n    }\r\n\r\n    function handleFreeGameResultsERC1155(address token, address winner, uint256 tokenId, uint256 amount, bytes calldata data) external onlyOwner {\r\n        require(allowedERC1155s[token], \"ERC1155 token not allowed\");\r\n        IERC1155(token).safeTransferFrom(address(this), winner, tokenId, amount, data);\r\n    }\r\n\r\n    function handleGameResults(address winner, uint256 winningsAmount, address[] memory players, uint256[] memory wagers) external onlyOwner {\r\n        require(players.length == wagers.length, \"Players and wagers length mismatch\");\r\n\r\n        // Credit ETH winnings to the winner's balance inside the contract\r\n        ethBalances[winner] = ethBalances[winner].add(winningsAmount);\r\n        updateLeaderboard(winner, winningsAmount, false, address(0)); // Update the leaderboard for ETH game\r\n        emit WinnerPaid(winner, winningsAmount);\r\n    }\r\n\r\n    function handleGameResultsERC20(address token, address winner, uint256 winningsAmount, address[] memory players, uint256[] memory wagers) external onlyOwner {\r\n        require(allowedTokens[token], \"Token not allowed\");\r\n        require(players.length == wagers.length, \"Players and wagers length mismatch\");\r\n\r\n        // Credit ERC20 winnings to the winner's balance inside the contract\r\n        tokenBalances[winner][token] = tokenBalances[winner][token].add(winningsAmount);\r\n\r\n        uint256 winnerWager = 0;\r\n\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            if (players[i] == winner) {\r\n                winnerWager = wagers[i];\r\n                break;\r\n            }\r\n        }\r\n\r\n        updateLeaderboard(winner, winningsAmount, true, token); // Update the leaderboard for ERC20 game including wagered amount\r\n        \r\n        emit WinnerPaid(winner, winningsAmount);\r\n    }\r\n\r\n    function handleGameResultsERC721(address winner, address[] memory players, address[] memory tokenAddresses, uint256[] memory tokenIds) external onlyOwner {\r\n        require(players.length == tokenAddresses.length && players.length == tokenIds.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            require(IERC721(tokenAddresses[i]).ownerOf(tokenIds[i]) == address(this), \"The contract does not own this token\");\r\n            require(allowedERC721s[tokenAddresses[i]], \"Token not allowed\");\r\n            IERC721(tokenAddresses[i]).transferFrom(address(this), winner, tokenIds[i]);\r\n        }\r\n    }\r\n\r\n    function handleGameResultsERC1155(address winner, address[] memory players, address[] memory tokenAddresses, uint256[] memory tokenIds, uint256[] memory amounts) external onlyOwner {\r\n        require(players.length == tokenAddresses.length && players.length == tokenIds.length && players.length == amounts.length, \"Arrays length mismatch\");\r\n\r\n        for (uint256 i = 0; i < players.length; i++) {\r\n            require(allowedERC1155s[tokenAddresses[i]], \"Token not allowed\");\r\n            require(IERC1155(tokenAddresses[i]).balanceOf(address(this), tokenIds[i]) >= amounts[i], \"Not enough tokens to transfer\");\r\n            IERC1155(tokenAddresses[i]).safeTransferFrom(address(this), winner, tokenIds[i], amounts[i], \"\");\r\n        }\r\n    }\r\n\r\n    function updateLeaderboard(address _player, uint256 _amount, bool isERC20, address token) internal {\r\n    uint256 netWinnings = _amount;\r\n\r\n    if (leaderboard[_player].exists) {\r\n        leaderboard[_player].gamesWon = leaderboard[_player].gamesWon.add(1);\r\n        if (isERC20) {\r\n            leaderboard[_player].erc20Winnings[token] = leaderboard[_player].erc20Winnings[token].add(netWinnings);\r\n            leaderboard[_player].totalWonERC20 = leaderboard[_player].totalWonERC20.add(netWinnings);  // Add the net winnings to totalWonERC20\r\n            leaderboard[_player].totalWageredErc20 = leaderboard[_player].totalWageredErc20.add(_amount); \r\n        } else {\r\n            leaderboard[_player].totalWon = leaderboard[_player].totalWon.add(netWinnings);\r\n            leaderboard[_player].totalWageredEth = leaderboard[_player].totalWageredEth.add(_amount);\r\n        }\r\n    } else {\r\n        leaderboard[_player].exists = true;\r\n        leaderboard[_player].gamesPlayed = 1;\r\n        leaderboard[_player].gamesWon = 1;\r\n        if (isERC20) {\r\n            leaderboard[_player].erc20Winnings[token] = netWinnings;\r\n            leaderboard[_player].totalWonERC20 = netWinnings;  // Set the net winnings to totalWonERC20\r\n            leaderboard[_player].totalWageredErc20 = _amount;\r\n        } else {\r\n            leaderboard[_player].totalWon = netWinnings;\r\n            leaderboard[_player].totalWageredEth = _amount;\r\n        }\r\n    }\r\n}\r\n\r\n    function updateRewardParameters(bool _rewardsEnabled, uint256 _thresholdEth, uint256 _thresholdErc20, uint256 _rewardPercentage) external onlyOwner {\r\n        bool changedRewardsStatus = (_rewardsEnabled != rewardsInfo.rewardsEnabled);\r\n        rewardsInfo.rewardsEnabled = _rewardsEnabled;\r\n        rewardsInfo.thresholdEth = _thresholdEth;\r\n        rewardsInfo.thresholdErc20 = _thresholdErc20;\r\n        rewardsInfo.rewardPercentage = _rewardPercentage;\r\n        \r\n        // Only increment the epoch if the rewards status is toggled\r\n        if (changedRewardsStatus) {\r\n            rewardsInfo.epoch = rewardsInfo.epoch.add(1);\r\n        }\r\n    }\r\n\r\n    function hasRewardsAvailable(address user) external view returns (bool) {\r\n        if (ethWageredSinceLastReward[user] >= rewardsInfo.thresholdEth) {\r\n            return true;\r\n        }\r\n\r\n        for (uint256 i = 0; i < allowedTokenAddresses.length; i++) {\r\n            address tokenAddress = allowedTokenAddresses[i];\r\n            if (erc20WageredSinceLastReward[user][tokenAddress] >= rewardsInfo.thresholdErc20) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function claimRewardForPlayers(address[] memory _players) external onlyOwner {\r\n        require(rewardsInfo.rewardsEnabled, \"Rewards are not enabled\");\r\n\r\n        for (uint256 j = 0; j < _players.length; j++) {\r\n            address currentPlayer = _players[j];\r\n            uint256 rewardAmountEth = 0;\r\n            uint256 rewardAmountErc20 = 0;\r\n            address tokenAddress;\r\n\r\n            if (ethWageredSinceLastReward[currentPlayer] >= rewardsInfo.thresholdEth) {\r\n                rewardAmountEth = ethWageredSinceLastReward[currentPlayer].mul(rewardsInfo.rewardPercentage).div(10000); // Convert basis points to percentage\r\n                ethBalances[currentPlayer] = ethBalances[currentPlayer].add(rewardAmountEth);\r\n                ethBalances[HOUSE_ADDRESS] = ethBalances[HOUSE_ADDRESS].sub(rewardAmountEth);  // Deduct from house balance\r\n                ethWageredSinceLastReward[currentPlayer] = 0; // Reset the wagered amount for ETH\r\n                \r\n                leaderboard[currentPlayer].totalEthRewards = leaderboard[currentPlayer].totalEthRewards.add(rewardAmountEth); // Record the ETH reward\r\n            }\r\n\r\n            for (uint256 i = 0; i < allowedTokenAddresses.length; i++) {\r\n                tokenAddress = allowedTokenAddresses[i];\r\n                if (erc20WageredSinceLastReward[currentPlayer][tokenAddress] >= rewardsInfo.thresholdErc20) {\r\n                    rewardAmountErc20 = erc20WageredSinceLastReward[currentPlayer][tokenAddress].mul(rewardsInfo.rewardPercentage).div(10000); // Convert basis points to percentage\r\n                    tokenBalances[currentPlayer][tokenAddress] = tokenBalances[currentPlayer][tokenAddress].add(rewardAmountErc20);\r\n                    tokenBalances[HOUSE_ADDRESS][tokenAddress] = tokenBalances[HOUSE_ADDRESS][tokenAddress].sub(rewardAmountErc20);  // Deduct from house balance\r\n                    erc20WageredSinceLastReward[currentPlayer][tokenAddress] = 0; // Reset the wagered amount for this ERC20 token\r\n                            \r\n                    leaderboard[currentPlayer].erc20Rewards[tokenAddress] = leaderboard[currentPlayer].erc20Rewards[tokenAddress].add(rewardAmountErc20); // Record the ERC20 reward\r\n\r\n                    // Update the total ERC20 rewards for this token\r\n                    leaderboard[currentPlayer].totalErc20Rewards[tokenAddress] = leaderboard[currentPlayer].totalErc20Rewards[tokenAddress].add(rewardAmountErc20);\r\n                }\r\n            }\r\n\r\n            emit RewardClaimed(currentPlayer, rewardAmountEth.add(rewardAmountErc20));\r\n        }\r\n    }\r\n\r\n\r\n    function withdrawERC721(address tokenAddress, uint256 tokenId) external {\r\n        require(IERC721(tokenAddress).ownerOf(tokenId) == address(this), \"The contract does not own this token\");\r\n        require(allowedERC721s[tokenAddress], \"Token not allowed\");\r\n        IERC721(tokenAddress).transferFrom(address(this), msg.sender, tokenId);\r\n    }\r\n\r\n    function withdrawERC1155(address tokenAddress, uint256 tokenId, uint256 amount, bytes calldata data) external {\r\n        require(allowedERC1155s[tokenAddress], \"Token not allowed\");\r\n        require(IERC1155(tokenAddress).balanceOf(address(this), tokenId) >= amount, \"Not enough tokens to withdraw\");\r\n        IERC1155(tokenAddress).safeTransferFrom(address(this), msg.sender, tokenId, amount, data);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RewardClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokenWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WinnerPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HOUSE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addAllowedERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addAllowedERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"addAllowedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedERC1155s\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedERC721s\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTokenAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowedTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"}],\"name\":\"claimRewardForPlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"wagers\",\"type\":\"uint256[]\"}],\"name\":\"deductPlayerWagersAndHouseShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"wagers\",\"type\":\"uint256[]\"}],\"name\":\"deductPlayerWagersAndHouseShareERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"depositERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"erc20WageredSinceLastReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ethWageredSinceLastReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winningsAmount\",\"type\":\"uint256\"}],\"name\":\"handleFreeGameResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"handleFreeGameResultsERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winningsAmount\",\"type\":\"uint256\"}],\"name\":\"handleFreeGameResultsERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"handleFreeGameResultsERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winningsAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"wagers\",\"type\":\"uint256[]\"}],\"name\":\"handleGameResults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"handleGameResultsERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"winningsAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"wagers\",\"type\":\"uint256[]\"}],\"name\":\"handleGameResultsERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"handleGameResultsERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"hasRewardsAvailable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"leaderboard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"totalWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWonERC20\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamesPlayed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamesWon\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWageredEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWageredErc20\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEthRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"wagers\",\"type\":\"uint256[]\"}],\"name\":\"refundPlayers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"rewardsEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"thresholdEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"thresholdErc20\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newHouseAddress\",\"type\":\"address\"}],\"name\":\"setHouseAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_rewardsEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_thresholdErc20\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewardPercentage\",\"type\":\"uint256\"}],\"name\":\"updateRewardParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"withdrawERC1155\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EmojiRalleyGame", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e6c450b86b643ea1cbc7cfca451e1a5fa7842fce4bca7f245ea547bdd657abe"}