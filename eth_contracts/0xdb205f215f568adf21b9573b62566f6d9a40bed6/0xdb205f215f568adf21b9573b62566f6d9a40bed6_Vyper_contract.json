{"SourceCode": "# @version 0.3.1\r\n\"\"\"\r\n@title Root Liquidity Gauge Factory\r\n@license MIT\r\n@author Curve Finance\r\n\"\"\"\r\n\r\n\r\ninterface Bridger:\r\n    def check(_addr: address) -> bool: view\r\n\r\ninterface RootGauge:\r\n    def bridger() -> address: view\r\n    def initialize(_bridger: address, _chain_id: uint256): nonpayable\r\n    def transmit_emissions(): nonpayable\r\n\r\ninterface CallProxy:\r\n    def anyCall(\r\n        _to: address, _data: Bytes[1024], _fallback: address, _to_chain_id: uint256\r\n    ): nonpayable\r\n\r\n\r\nevent BridgerUpdated:\r\n    _chain_id: indexed(uint256)\r\n    _old_bridger: address\r\n    _new_bridger: address\r\n\r\nevent DeployedGauge:\r\n    _implementation: indexed(address)\r\n    _chain_id: indexed(uint256)\r\n    _deployer: indexed(address)\r\n    _salt: bytes32\r\n    _gauge: address\r\n\r\nevent TransferOwnership:\r\n    _old_owner: address\r\n    _new_owner: address\r\n\r\nevent UpdateCallProxy:\r\n    _old_call_proxy: address\r\n    _new_call_proxy: address\r\n\r\nevent UpdateImplementation:\r\n    _old_implementation: address\r\n    _new_implementation: address\r\n\r\n\r\ncall_proxy: public(address)\r\n\r\nget_bridger: public(HashMap[uint256, address])\r\nget_implementation: public(address)\r\n\r\nget_gauge: public(HashMap[uint256, address[MAX_UINT256]])\r\nget_gauge_count: public(HashMap[uint256, uint256])\r\nis_valid_gauge: public(HashMap[address, bool])\r\n\r\nowner: public(address)\r\nfuture_owner: public(address)\r\n\r\n\r\n@external\r\ndef __init__(_call_proxy: address, _owner: address):\r\n    self.call_proxy = _call_proxy\r\n    log UpdateCallProxy(ZERO_ADDRESS, _call_proxy)\r\n\r\n    self.owner = _owner\r\n    log TransferOwnership(ZERO_ADDRESS, _owner)\r\n\r\n\r\n@external\r\ndef transmit_emissions(_gauge: address):\r\n    \"\"\"\r\n    @notice Call `transmit_emissions` on a root gauge\r\n    @dev Entrypoint for anycall to request emissions for a child gauge.\r\n        The way that gauges work, this can also be called on the root\r\n        chain without a request.\r\n    \"\"\"\r\n    # in most cases this will return True\r\n    # for special bridges *cough cough Multichain, we can only do\r\n    # one bridge per tx, therefore this will verify msg.sender in [tx.origin, self.call_proxy]\r\n    assert Bridger(RootGauge(_gauge).bridger()).check(msg.sender)\r\n    RootGauge(_gauge).transmit_emissions()\r\n\r\n\r\n@payable\r\n@external\r\ndef deploy_gauge(_chain_id: uint256, _salt: bytes32) -> address:\r\n    \"\"\"\r\n    @notice Deploy a root liquidity gauge\r\n    @param _chain_id The chain identifier of the counterpart child gauge\r\n    @param _salt A value to deterministically deploy a gauge\r\n    \"\"\"\r\n    bridger: address = self.get_bridger[_chain_id]\r\n    assert bridger != ZERO_ADDRESS  # dev: chain id not supported\r\n\r\n    implementation: address = self.get_implementation\r\n    gauge: address = create_forwarder_to(\r\n        implementation,\r\n        value=msg.value,\r\n        salt=keccak256(_abi_encode(_chain_id, msg.sender, _salt))\r\n    )\r\n\r\n    idx: uint256 = self.get_gauge_count[_chain_id]\r\n    self.get_gauge[_chain_id][idx] = gauge\r\n    self.get_gauge_count[_chain_id] = idx + 1\r\n    self.is_valid_gauge[gauge] = True\r\n\r\n    RootGauge(gauge).initialize(bridger, _chain_id)\r\n\r\n    log DeployedGauge(implementation, _chain_id, msg.sender, _salt, gauge)\r\n    return gauge\r\n\r\n\r\n@external\r\ndef deploy_child_gauge(_chain_id: uint256, _lp_token: address, _salt: bytes32, _manager: address = msg.sender):\r\n    bridger: address = self.get_bridger[_chain_id]\r\n    assert bridger != ZERO_ADDRESS  # dev: chain id not supported\r\n\r\n    CallProxy(self.call_proxy).anyCall(\r\n        self,\r\n        _abi_encode(\r\n            _lp_token,\r\n            _salt,\r\n            _manager,\r\n            method_id=method_id(\"deploy_gauge(address,bytes32,address)\")\r\n        ),\r\n        ZERO_ADDRESS,\r\n        _chain_id\r\n    )\r\n\r\n\r\n@external\r\ndef set_bridger(_chain_id: uint256, _bridger: address):\r\n    \"\"\"\r\n    @notice Set the bridger for `_chain_id`\r\n    @param _chain_id The chain identifier to set the bridger for\r\n    @param _bridger The bridger contract to use\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    log BridgerUpdated(_chain_id, self.get_bridger[_chain_id], _bridger)\r\n    self.get_bridger[_chain_id] = _bridger\r\n\r\n\r\n@external\r\ndef set_implementation(_implementation: address):\r\n    \"\"\"\r\n    @notice Set the implementation\r\n    @param _implementation The address of the implementation to use\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    log UpdateImplementation(self.get_implementation, _implementation)\r\n    self.get_implementation = _implementation\r\n\r\n\r\n@external\r\ndef set_call_proxy(_new_call_proxy: address):\r\n    \"\"\"\r\n    @notice Set the address of the call proxy used\r\n    @dev _new_call_proxy should adhere to the same interface as defined\r\n    @param _new_call_proxy Address of the cross chain call proxy\r\n    \"\"\"\r\n    assert msg.sender == self.owner\r\n\r\n    log UpdateCallProxy(self.call_proxy, _new_call_proxy)\r\n    self.call_proxy = _new_call_proxy\r\n\r\n\r\n@external\r\ndef commit_transfer_ownership(_future_owner: address):\r\n    \"\"\"\r\n    @notice Transfer ownership to `_future_owner`\r\n    @param _future_owner The account to commit as the future owner\r\n    \"\"\"\r\n    assert msg.sender == self.owner  # dev: only owner\r\n\r\n    self.future_owner = _future_owner\r\n\r\n\r\n@external\r\ndef accept_transfer_ownership():\r\n    \"\"\"\r\n    @notice Accept the transfer of ownership\r\n    @dev Only the committed future owner can call this function\r\n    \"\"\"\r\n    assert msg.sender == self.future_owner  # dev: only future owner\r\n\r\n    log TransferOwnership(self.owner, msg.sender)\r\n    self.owner = msg.sender", "ABI": "[{\"name\":\"BridgerUpdated\",\"inputs\":[{\"name\":\"_chain_id\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"_old_bridger\",\"type\":\"address\",\"indexed\":false},{\"name\":\"_new_bridger\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"DeployedGauge\",\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_chain_id\",\"type\":\"uint256\",\"indexed\":true},{\"name\":\"_deployer\",\"type\":\"address\",\"indexed\":true},{\"name\":\"_salt\",\"type\":\"bytes32\",\"indexed\":false},{\"name\":\"_gauge\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"TransferOwnership\",\"inputs\":[{\"name\":\"_old_owner\",\"type\":\"address\",\"indexed\":false},{\"name\":\"_new_owner\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateCallProxy\",\"inputs\":[{\"name\":\"_old_call_proxy\",\"type\":\"address\",\"indexed\":false},{\"name\":\"_new_call_proxy\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"UpdateImplementation\",\"inputs\":[{\"name\":\"_old_implementation\",\"type\":\"address\",\"indexed\":false},{\"name\":\"_new_implementation\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_call_proxy\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"transmit_emissions\",\"inputs\":[{\"name\":\"_gauge\",\"type\":\"address\"}],\"outputs\":[],\"gas\":10132},{\"stateMutability\":\"payable\",\"type\":\"function\",\"name\":\"deploy_gauge\",\"inputs\":[{\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":165352},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploy_child_gauge\",\"inputs\":[{\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"name\":\"_lp_token\",\"type\":\"address\"},{\"name\":\"_salt\",\"type\":\"bytes32\"}],\"outputs\":[],\"gas\":18165},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"deploy_child_gauge\",\"inputs\":[{\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"name\":\"_lp_token\",\"type\":\"address\"},{\"name\":\"_salt\",\"type\":\"bytes32\"},{\"name\":\"_manager\",\"type\":\"address\"}],\"outputs\":[],\"gas\":18165},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_bridger\",\"inputs\":[{\"name\":\"_chain_id\",\"type\":\"uint256\"},{\"name\":\"_bridger\",\"type\":\"address\"}],\"outputs\":[],\"gas\":42889},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_implementation\",\"inputs\":[{\"name\":\"_implementation\",\"type\":\"address\"}],\"outputs\":[],\"gas\":41933},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_call_proxy\",\"inputs\":[{\"name\":\"_new_call_proxy\",\"type\":\"address\"}],\"outputs\":[],\"gas\":41963},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_transfer_ownership\",\"inputs\":[{\"name\":\"_future_owner\",\"type\":\"address\"}],\"outputs\":[],\"gas\":37785},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"accept_transfer_ownership\",\"inputs\":[],\"outputs\":[],\"gas\":41864},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"call_proxy\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2700},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_bridger\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2845},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_implementation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2760},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_gauge\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"},{\"name\":\"arg1\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2950},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"get_gauge_count\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"gas\":2935},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"is_valid_gauge\",\"inputs\":[{\"name\":\"arg0\",\"type\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"gas\":3116},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2880},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"gas\":2910}]", "ContractName": "Vyper_contract", "CompilerVersion": "vyper:0.3.1", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "00000000000000000000000037414a8662bc1d25be3ee51fb27c2686e2490a89000000000000000000000000919124f5f5135d3020a0b075412679755545f7c5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}