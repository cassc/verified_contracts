{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMK:. .'cx0XWMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMO'      .,:oxOXWMMMMMM\r\n// MMMMMMMMMMMMMMMMWXKOxolclxXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0xoc;'.      .;oONMMM\r\n// MMMMMMMMMMMMN0xc;..      'OMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWNKOxoc;..  .:kNM\r\n// MMMMMMMMMW0o,.     ..';coONMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWN0xc' .:0\r\n// MMMMMMMWO:.  .';ldk0XNWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXx,.'\r\n// MMMMMWO:. .,o0NWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMNko\r\n// MMMWOc. .;kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXkolc::coONMMMMMMM\r\n// MW0c. .;kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMXd'..       ;OWMMMMM\r\n// Nd. .:kNMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMW0; .o0o.      .xWMMMM\r\n// c..:ONMMMMMMMMMMMWNXXXNWWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWk.  'OMX:    .'..kWMMM\r\n// ',xNMMMMMMMMMNOdc;,...',:okXWMMMMMMMMMMMMMMMMMMMMMMMMMMMMO'   .cko.    .:'.,OMMM\r\n// KXWMMMMMMMW0o,. ...        'dXMMMMMMMMMMMMMMMMMMMMMMMMMMWl..           'l;:oOWMM\r\n// MMMMMMMMNO:.  .lOKo.         ;0WMMMMMMMMMMMMMMMMMMMMMMMMX;.:'          ;l,kWMMMM\r\n// MMMMMMWO:. .   .,;.           ;KMMMMMMMMMMMMMMMMMMMMMMMMX;.xl         .l:;0WMMMM\r\n// MMMMMNd.  ,d,                 .oWMMMMMMMMMMMMMMMMMMMMMMMNc'kO'        :d,cXMMMMM\r\n// MMMMWk'.,.'Ok.              ,o':XMMMMMMMMMMMMMMMMMMMMMMMMx,xNk,     ..,',kWMMMMM\r\n// MMMMNc.dO,.dXd.            .oXl:KMMMMMMMMMMMMMMMMMMMMMMMMKccXWKd,...,c'.lNMMMMMM\r\n// MMMMNxxXNo.,ONx.           .xWd:0MMMMMMMMMMMMMMMMMMMMMMMMMKdox0XXKKXO;.lXMMMMMMM\r\n// MMMMMMMMMXc.:0N0c.       .,',d:lNMMMMMMMMMMMMMMMMMMMMMMMMMMWXOxdodddc;dXMMMMMMMM\r\n// MMMMMMMMMMKc.,kNN0dc:;;:..xl..;0MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWKOxl::dXMMMMMMMM\r\n// MMMMMMMMMMMNx;.;xXWMWWWNx,'..;OWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMWXNWMMMMMMMM\r\n// MMMMMMMMMMMMMNk:.'cx0XNXOc.'oXMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMO,   .';::cdKWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n// MMMMMMMMMMMMMMMXd,..,cd0XWMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\r\n\r\n// Milady Wealth Protocol (MILADY)\r\n// Milady Wealth Protocol aims to restore balance to the network through reflections, creating an everflowing river of abundance.\r\n// Telegram: https://t.me/miladyprotocol\r\n// Twitter: https://twitter.com/miladyprotocol\r\n// Website: https://miladyprotocol.com\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n    function factory() external view returns (address);\r\n    function token0() external view returns (address);\r\n    function token1() external view returns (address);\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function price0CumulativeLast() external view returns (uint);\r\n    function price1CumulativeLast() external view returns (uint);\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function skim(address to) external;\r\n    function sync() external;\r\n\r\n    function initialize(address, address) external;\r\n}\r\n\r\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\r\n\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\r\n\r\npragma solidity >=0.6.2;\r\n\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n// File: contracts/Milady.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\ncontract Milady is IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                   events                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n    event ReflectAccumulated(uint256 amountAdded, uint256 totalAmountAccumulated);\r\n    event ReflectDistributed(uint256 amountDistributer);\r\n    event ReflectNotification(string message);\r\n    event ModeChanged(string mode);\r\n    event HolderMinimumChanged(uint256 newMinimum);\r\n    event LogInfo(string info);\r\n    event LogError(string error);\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                  constants                                 */\r\n    /* -------------------------------------------------------------------------- */\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                   states                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\r\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    address public immutable UNISWAP_V2_PAIR;\r\n\r\n    struct Fee {\r\n        uint8 reflection;\r\n        uint8 milady;\r\n        uint8 devs;\r\n        uint128 total;\r\n    }\r\n    \r\n    struct HolderInfo {\r\n        uint256 balance;\r\n        uint256 eventReflection;\r\n        uint256 baseReflection;\r\n        uint256 holdingTime;\r\n        uint256 lastBuy;\r\n        uint256 lastSell;\r\n        uint256 keyIndex;\r\n        bool isHolder;\r\n    }\r\n\r\n    string _name = \"Milady Wealth Protocol\";\r\n    string _symbol = \"MILADY\";\r\n\r\n    uint256 _totalSupply = 21e8 ether;\r\n\r\n    uint256 public _swapThreshold = (_totalSupply * 10) / 10000;\r\n    uint256 public _minSupplyHolding = 69e4 ether;\r\n    uint256 public _maxWalletSize = _totalSupply / 100;\r\n\r\n    mapping(address => uint256) public _balances;\r\n    mapping(address => uint256) public _baseReflection;\r\n    mapping(address => uint256) public _historyReflectionTransfered;\r\n    mapping(address => uint256) public _holdingTime;\r\n    mapping(address => uint256) public _lastBuy;\r\n    mapping(address => uint256) public _lastSell;\r\n    mapping(address => uint256) public _keyIndex;\r\n    mapping(address => bool) public _isHolder;\r\n\r\n    address[] public holderAddresses;\r\n\r\n    uint256 public totalReflections = 0;\r\n    uint256 public normalReflectedToken = 0;\r\n    uint256 public totalRemainder = 0;\r\n\r\n    string public currentTokenMode = \"sniper\";\r\n\r\n    mapping(address => mapping(address => uint256)) _allowances;\r\n\r\n    bool public enableTrading = false;\r\n    bool public enableAutoAdjust = false;\r\n    mapping(address => bool) public isFeeExempt;\r\n    mapping(address => bool) public isReflectionExempt;\r\n\r\n    Fee public sniper = Fee({reflection: 0, milady: 0, devs: 30, total: 30});\r\n    Fee public pajeetBuy = Fee({reflection: 1, milady: 1, devs: 1, total: 3});\r\n    Fee public pajeetSell = Fee({reflection: 4, milady: 2, devs: 3, total: 9});\r\n    Fee public milady = Fee({reflection: 2, milady: 1, devs: 2, total: 5});\r\n\r\n    Fee public buyFee;\r\n    Fee public sellFee;\r\n\r\n    address private miladyFeeReceiver;\r\n    address private devsFeeReceiver;\r\n\r\n    bool public claimingFees = true;\r\n    bool inSwap;\r\n    mapping(address => bool) public blacklists;\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                  modifiers                                 */\r\n    /* -------------------------------------------------------------------------- */\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                 constructor                                */\r\n    /* -------------------------------------------------------------------------- */\r\n    constructor() payable {\r\n        // create uniswap pair\r\n        address _uniswapPair = IUniswapV2Factory(UNISWAP_V2_ROUTER.factory()).createPair(address(this), UNISWAP_V2_ROUTER.WETH());\r\n        UNISWAP_V2_PAIR = _uniswapPair;\r\n\r\n        _allowances[address(this)][address(UNISWAP_V2_ROUTER)] = type(uint256).max;\r\n        _allowances[address(this)][msg.sender] = type(uint256).max;\r\n\r\n        miladyFeeReceiver = address(0x11bd6E7e5409d0Aad2e952d5703Efc5B7dA9348B);\r\n        devsFeeReceiver = address(0x4352e0152413b57a530f1BC7daFe1e539133baCD);\r\n\r\n        isFeeExempt[msg.sender] = true;\r\n        isFeeExempt[miladyFeeReceiver] = true;\r\n        isFeeExempt[devsFeeReceiver] = true;\r\n        isFeeExempt[ZERO] = true;\r\n        isFeeExempt[DEAD] = true;\r\n\r\n        isReflectionExempt[address(this)] = true;\r\n        isReflectionExempt[address(UNISWAP_V2_ROUTER)] = true;\r\n        isReflectionExempt[_uniswapPair] = true;\r\n        isReflectionExempt[msg.sender] = true;\r\n        isReflectionExempt[miladyFeeReceiver] = true;\r\n        isReflectionExempt[devsFeeReceiver] = true;\r\n        isReflectionExempt[ZERO] = true;\r\n        isReflectionExempt[DEAD] = true;\r\n\r\n        buyFee = sniper;\r\n        sellFee = sniper;\r\n\r\n        _balances[address(this)] = _totalSupply;\r\n        emit Transfer(address(0), address(this), _totalSupply);\r\n\r\n        emit ModeChanged(currentTokenMode);\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                    ERC20                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            require(_allowances[sender][msg.sender] >= amount, \"ERC20: insufficient allowance\");\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                    views                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n    function totalSupply() external view override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function name() external view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        uint256 balanceNormalReflection = 0;\r\n        if (isHolder(account)){\r\n            if (holderAddresses.length > 0 && normalReflectedToken > 0) {\r\n                uint256 baseReflection = 0;\r\n                if (_baseReflection[account] > 0) {\r\n                    baseReflection = _baseReflection[account];\r\n                }\r\n                uint256 calculatePersonnalReflection = normalReflectedToken / holderAddresses.length;\r\n                if (calculatePersonnalReflection > baseReflection) {\r\n                    balanceNormalReflection = calculatePersonnalReflection - baseReflection;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 totalBalance = _balances[account];\r\n        if (balanceNormalReflection > 0) {\r\n            totalBalance += balanceNormalReflection;\r\n        }\r\n\r\n        return totalBalance;\r\n    }\r\n\r\n    function getHolderNormalReflection(address account) public view returns (uint256) {\r\n        uint256 balanceNormalReflection = 0;\r\n        if (isHolder(account)){\r\n            if (holderAddresses.length > 0 && normalReflectedToken > 0) {\r\n                uint256 baseReflection = 0;\r\n                if (_baseReflection[account] > 0) {\r\n                    baseReflection = _baseReflection[account];\r\n                }\r\n                uint256 calculatePersonnalReflection = normalReflectedToken / holderAddresses.length;\r\n                if (calculatePersonnalReflection > baseReflection) {\r\n                    balanceNormalReflection = calculatePersonnalReflection - baseReflection;\r\n                }\r\n            }\r\n        }\r\n        return balanceNormalReflection;\r\n    }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n    \r\n    function isHolder(address holderAddress) public view returns (bool) {\r\n        if (isReflectionExempt[holderAddress] || blacklists[holderAddress]){\r\n            return false;\r\n        }\r\n        return _balances[holderAddress] >= _minSupplyHolding;\r\n    }\r\n\r\n    function isHolderInArray(address holderAddress) public view returns (bool) {\r\n        return _isHolder[holderAddress];\r\n    }\r\n\r\n    function addressToString(address _address) internal pure returns (string memory) {\r\n        bytes32 value = bytes32(uint256(uint160(_address)));\r\n        bytes memory alphabet = \"0123456789abcdef\";\r\n        bytes memory str = new bytes(42);\r\n        str[0] = '0';\r\n        str[1] = 'x';\r\n        for (uint256 i = 0; i < 20; i++) {\r\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\r\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\r\n        }\r\n        return string(str);\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                   owners                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    function setMode(string calldata modeName) external {\r\n        require(msg.sender == owner() || msg.sender == devsFeeReceiver, \"setMode: Forbidden\");\r\n\r\n        if (compareStrings(modeName, \"pajeet\")) {\r\n            buyFee = pajeetBuy;\r\n            sellFee = pajeetSell;\r\n        } else {\r\n            // milady mode in every other cases\r\n            buyFee = milady;\r\n            sellFee = milady;\r\n        }\r\n\r\n        currentTokenMode = modeName;\r\n        emit ModeChanged(modeName);\r\n    }\r\n\r\n    function getCurrentMode() external view returns (string memory) {\r\n        return currentTokenMode;\r\n    }\r\n\r\n    function clearStuckBalance() external {\r\n        require(msg.sender == owner() || msg.sender == devsFeeReceiver, \"Forbidden\");\r\n        (bool success,) = payable(msg.sender).call{value: address(this).balance}(\"\");\r\n        require(success);\r\n    }\r\n    function clearStuckToken() external {\r\n        require(msg.sender == owner() || msg.sender == devsFeeReceiver, \"Forbidden\");\r\n        _transferFrom(address(this), msg.sender, balanceOf(address(this)));\r\n    }\r\n\r\n    function setSwapBackSettings(bool _enabled, uint256 _pt) external onlyOwner {\r\n        claimingFees = _enabled;\r\n        _swapThreshold = (_totalSupply * _pt) / 10000;\r\n    }\r\n\r\n    function manualSwapBack() external onlyOwner {\r\n        if (_shouldSwapBack()) {\r\n            _swapBack();\r\n        }\r\n    }\r\n\r\n    function startTrading() external onlyOwner {\r\n        UNISWAP_V2_ROUTER.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        enableTrading = true;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setIsReflectionExempt(address holder, bool exempt) external onlyOwner {\r\n        isReflectionExempt[holder] = exempt;\r\n    }\r\n\r\n    function setEnableAutoAdjust(bool e_) external onlyOwner {\r\n        enableAutoAdjust = e_;\r\n    }\r\n\r\n    function blacklist(address _address, bool _isBlacklisting) external onlyOwner {\r\n        blacklists[_address] = _isBlacklisting;\r\n    }\r\n\r\n    function sendAutoAdjustHolding() external onlyOwner {\r\n        adjustMinimumHolding();\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxWalletSize = _totalSupply;\r\n        _swapThreshold = (_totalSupply * 2) / 10000;\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                   private                                  */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    function adjustMinimumHolding() internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = UNISWAP_V2_ROUTER.WETH();\r\n        path[1] = address(this);\r\n\r\n        uint256[] memory amounts = UNISWAP_V2_ROUTER.getAmountsOut(0.05 ether, path);\r\n\r\n        uint256 amountAdjusted = amounts[1];\r\n\r\n        _minSupplyHolding = amountAdjusted;\r\n    }\r\n\r\n    function _claim(address holder) internal {\r\n        uint256 balanceNormalReflection = 0;\r\n        if (isHolder(holder)){\r\n            if (holderAddresses.length > 0 && normalReflectedToken > 0) {\r\n                uint256 baseReflection = 0;\r\n                if (_baseReflection[holder] > 0) {\r\n                    baseReflection = _baseReflection[holder];\r\n                }\r\n                uint256 calculatePersonnalReflection = normalReflectedToken / holderAddresses.length;\r\n                if (calculatePersonnalReflection > baseReflection) {\r\n                    balanceNormalReflection = calculatePersonnalReflection - baseReflection;\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 totalBalance = _balances[holder];\r\n        if (balanceNormalReflection > 0) {\r\n            totalBalance += balanceNormalReflection;\r\n        }\r\n        uint256 amountReflection = balanceNormalReflection;\r\n        if (amountReflection > 0){\r\n            _basicTransfer(address(this), holder, amountReflection);\r\n            _historyReflectionTransfered[holder] = _historyReflectionTransfered[holder] + amountReflection;\r\n            if (balanceNormalReflection > 0) {\r\n                _baseReflection[holder] = _baseReflection[holder] + balanceNormalReflection;\r\n                normalReflectedToken -= balanceNormalReflection;\r\n            }\r\n        }\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(!blacklists[recipient] && !blacklists[sender], \"Blacklisted\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        require(sender != DEAD && sender != ZERO, \"Please use a good address\");\r\n\r\n        if (recipient != UNISWAP_V2_PAIR && recipient != address(this)) {\r\n            require(balanceOf(recipient) + amount <= _maxWalletSize, \"Exceeds max wallet size\");\r\n        }\r\n\r\n        if (inSwap) {\r\n            return _basicTransfer(sender, recipient, amount);\r\n        }\r\n\r\n        if (!enableTrading) {\r\n            if (sender == address(this) || sender == owner() || sender == devsFeeReceiver){\r\n                emit LogInfo(\"bypass enableTrading\");\r\n                return _basicTransfer(sender, recipient, amount);\r\n            } else {\r\n                revert(string(abi.encodePacked(\"Trading not enabled yet, please wait. Sender: \", addressToString(sender), \" Recipient: \", addressToString(recipient))));\r\n            }\r\n        } else {\r\n            if (sender == owner() || sender == devsFeeReceiver){\r\n                return _basicTransfer(sender, recipient, amount);\r\n            }\r\n        }\r\n\r\n        if (_shouldSwapBack()) {\r\n            _swapBack();\r\n        }\r\n\r\n        if (!isReflectionExempt[sender]){\r\n            _claim(sender);\r\n        }\r\n\r\n        require(_balances[sender] >= amount, \"Insufficient Real Balance\");\r\n        _balances[sender] = _balances[sender] - amount;\r\n\r\n        updateStateHolder(sender);\r\n\r\n        if (sender != UNISWAP_V2_PAIR) { // WHEN SELL\r\n            _lastSell[sender] = block.timestamp;\r\n        }\r\n\r\n        uint256 fees = _takeFees(sender, recipient, amount);\r\n        uint256 amountWithoutFees = amount;\r\n        if (fees > 0) {\r\n            amountWithoutFees -= fees;\r\n            _balances[address(this)] = _balances[address(this)] + fees;\r\n            emit Transfer(sender, address(this), fees);\r\n        }\r\n\r\n        _balances[recipient] = _balances[recipient] + amountWithoutFees;\r\n        \r\n        updateStateHolder(recipient);\r\n\r\n        if (sender == UNISWAP_V2_PAIR) { // WHEN BUY\r\n            _lastBuy[recipient] = block.timestamp;\r\n        }\r\n\r\n        emit Transfer(sender, recipient, amountWithoutFees);\r\n        if (sender == UNISWAP_V2_PAIR || recipient == UNISWAP_V2_PAIR) { \r\n            if (enableAutoAdjust) {\r\n                adjustMinimumHolding();\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(_balances[sender] >= amount, \"Insufficient Balance\");\r\n        _balances[sender] = _balances[sender] - amount;\r\n        updateStateHolder(sender);\r\n        _balances[recipient] = _balances[recipient] + amount;\r\n        updateStateHolder(recipient);\r\n        _lastBuy[recipient] = block.timestamp;\r\n        emit Transfer(sender, recipient, amount);\r\n        if (sender == UNISWAP_V2_PAIR || recipient == UNISWAP_V2_PAIR) { \r\n            if (enableAutoAdjust) {\r\n                adjustMinimumHolding();\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _takeFees(address sender, address recipient, uint256 amount) internal returns (uint256) {\r\n        uint256 fees = 0;\r\n        Fee memory __buyFee = buyFee;\r\n        Fee memory __sellFee = sellFee;\r\n        if(_shouldTakeFee(sender, recipient))\r\n        {\r\n            uint256 proportionReflected = 0;\r\n            if (sender == UNISWAP_V2_PAIR) {\r\n                fees = amount.mul(__buyFee.total).div(100);\r\n                proportionReflected = fees.mul(__buyFee.reflection).div(__buyFee.total);\r\n            } else {\r\n                fees = amount.mul(__sellFee.total).div(100);\r\n                proportionReflected = fees.mul(__sellFee.reflection).div(__sellFee.total);\r\n            }\r\n\r\n            if (proportionReflected > 0) {\r\n                totalReflections += proportionReflected;\r\n                normalReflectedToken += proportionReflected;\r\n                emit ReflectAccumulated(proportionReflected, totalReflections);\r\n            }\r\n        }\r\n        return fees;\r\n    }\r\n\r\n    function _checkBalanceForSwapping() internal view returns (bool) {\r\n        uint256 totalBalance = _balances[address(this)];\r\n        uint256 totalToSub = normalReflectedToken + totalRemainder;\r\n        if (totalToSub > totalBalance) {\r\n            return false;\r\n        }\r\n        totalBalance -= totalToSub;\r\n        return totalBalance >= _swapThreshold;\r\n    }\r\n\r\n    function _shouldSwapBack() internal view returns (bool) {\r\n        return msg.sender != UNISWAP_V2_PAIR && !inSwap && claimingFees && _checkBalanceForSwapping();\r\n    }\r\n\r\n    function _swapBack() internal swapping {\r\n        Fee memory __sellFee = sellFee;\r\n\r\n        uint256 amountToSwap = _swapThreshold;\r\n        approve(address(UNISWAP_V2_ROUTER), amountToSwap);\r\n\r\n        // swap\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = UNISWAP_V2_ROUTER.WETH();\r\n\r\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap, 0, path, address(this), block.timestamp\r\n        );\r\n\r\n        uint256 amountETH = address(this).balance;\r\n\r\n        uint256 totalSwapFee = __sellFee.total - __sellFee.reflection;\r\n        uint256 amountETHMilady = amountETH * __sellFee.milady / totalSwapFee;\r\n        uint256 amountETHDevs = amountETH * __sellFee.devs / totalSwapFee;\r\n\r\n        // send\r\n        if (amountETHMilady > 0) {\r\n            (bool tmpSuccess,) = payable(miladyFeeReceiver).call{value: amountETHMilady}(\"\");\r\n        }\r\n        if (amountETHDevs > 0) {\r\n            (bool tmpSuccess,) = payable(devsFeeReceiver).call{value: amountETHDevs}(\"\");\r\n        }\r\n    }\r\n\r\n    function _shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\r\n    }\r\n\r\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\r\n        return keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n\r\n    /* -------------------------------------------------------------------------- */\r\n    /*                                   public                                   */\r\n    /* -------------------------------------------------------------------------- */\r\n\r\n    function updateStateHolder(address holder) public {\r\n        if (!isReflectionExempt[holder]){\r\n            if (isHolder(holder)){\r\n                if (_isHolder[holder] == false){\r\n                    _isHolder[holder] = true;\r\n                    _holdingTime[holder] = block.timestamp;\r\n                    holderAddresses.push(holder);\r\n                    _keyIndex[holder] = holderAddresses.length - 1;\r\n                }\r\n            } else {\r\n                if (_isHolder[holder] == true){\r\n                    _isHolder[holder] = false;\r\n                    _holdingTime[holder] = 0;\r\n                    _keyIndex[holderAddresses[holderAddresses.length - 1]] = _keyIndex[holder];\r\n                    holderAddresses[_keyIndex[holder]] = holderAddresses[holderAddresses.length - 1];\r\n                    holderAddresses.pop();\r\n                }\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"HolderMinimumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"LogError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"LogInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mode\",\"type\":\"string\"}],\"name\":\"ModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmountAccumulated\",\"type\":\"uint256\"}],\"name\":\"ReflectAccumulated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDistributer\",\"type\":\"uint256\"}],\"name\":\"ReflectDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ReflectNotification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_baseReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_historyReflectionTransfered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_holdingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_keyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minSupplyHolding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisting\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"milady\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"devs\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoAdjust\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHolderNormalReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"isHolderInArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReflectionExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"milady\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"milady\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"devs\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalReflectedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pajeetBuy\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"milady\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"devs\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pajeetSell\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"milady\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"devs\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"milady\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"devs\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendAutoAdjustHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"e_\",\"type\":\"bool\"}],\"name\":\"setEnableAutoAdjust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsReflectionExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modeName\",\"type\":\"string\"}],\"name\":\"setMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_pt\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sniper\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"milady\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"devs\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRemainder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"updateStateHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Milady", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fd5c2b82fdd1cc58f43b407262ad5e75c1fbb71f4eba97883bd6943a84e6bd43"}