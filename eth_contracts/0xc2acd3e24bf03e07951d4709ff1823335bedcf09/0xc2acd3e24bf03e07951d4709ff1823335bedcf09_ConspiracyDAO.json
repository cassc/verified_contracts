{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ConspiracyDAO.sol\": {\r\n      \"content\": \"// ********************************************* //\\r\\n// ********       Our Social Handles     ****** //\\r\\n// ******************************************* //\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// https://twitter.com/TokenConspiracy\\r\\n\\r\\n// https://t.me/ConspiracyDAO\\r\\n\\r\\n// Conspiracydaotoken.com\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n// ********************************************* //\\r\\n\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\ncontract ConspiracyDAO is Ownable {\\r\\n    struct Conspiracy{\\r\\n        uint256 id;\\r\\n        address creator;\\r\\n        string name;\\r\\n        string description;\\r\\n        string imageUri;\\r\\n        uint256 upvotes;\\r\\n        uint256 downvotes;\\r\\n    }\\r\\n\\r\\n    address public constant cdaoTokenAddress = 0xADF2c192Ba98A6700E15d412F26e904843363867;\\r\\n    IERC20 private constant cdaoToken = IERC20(cdaoTokenAddress);\\r\\n\\r\\n    uint256 public createConspiracyCost;\\r\\n\\r\\n    Conspiracy[] private conspiracies;\\r\\n\\r\\n    // voterAddress => conspiracy Id => upvoted bool\\r\\n    mapping(address => mapping(uint256 => bool)) private upvoted;\\r\\n    // voterAddress => conspiracy Id => downvoted bool\\r\\n    mapping(address => mapping(uint256 => bool)) private downvoted;\\r\\n\\r\\n    //////////////////////////////////////////\\r\\n    //////////     Events     ///////////////\\r\\n    ////////////////////////////////////////\\r\\n    event CreatedConspiracy(uint256 id, address creator, string name, string description, string imageUri);\\r\\n    event Upvoted(address upvoter, uint256 conspiracyId, uint256 latestUpvotes, uint256 latestDownvotes);\\r\\n    event Downvoted(address downvoter, uint256 conspiracyId, uint256 latestUpvotes, uint256 latestDownvotes);\\r\\n\\r\\n\\r\\n    constructor(uint256 _createConspiracyCost) {\\r\\n        createConspiracyCost = _createConspiracyCost * 1e18;\\r\\n    }\\r\\n\\r\\n    //////////////////////////////////////////\\r\\n    //////////     Modifiers     ////////////\\r\\n    ////////////////////////////////////////\\r\\n\\r\\n    modifier shouldNotBeUpvoted(uint256 conspiracyId){\\r\\n        require(!upvoted[msg.sender][conspiracyId], \\\"You have already Updvoted this conspiracy\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier shouldNotBeDownvoted(uint256 conspiracyId) {\\r\\n        require(!downvoted[msg.sender][conspiracyId], \\\"You have already Downvoted this conspiracy\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    ///////////////////////////////////////////////////\\r\\n    //////////     External Functions     ////////////\\r\\n    /////////////////////////////////////////////////\\r\\n\\r\\n    /**\\r\\n     * \\r\\n     * @param name Conspiracy Name\\r\\n     * @param description Conspiracy Description\\r\\n     * @param imageUri Conspiracy Image URI\\r\\n     * \\r\\n     * @notice It checks and deducts the createConspiracyCost from the creators wallet\\r\\n     */\\r\\n    function createConspiracy(string calldata name, string calldata description, string calldata imageUri) external {\\r\\n        // Basic Validations\\r\\n        require(bytes(name).length > 0, \\\"Name cannot be empty\\\");\\r\\n        require(bytes(description).length > 0, \\\"Description cannot be empty\\\");\\r\\n        require(bytes(imageUri).length > 0, \\\"Image URI cannot be empty\\\");\\r\\n        \\r\\n\\r\\n        address creator = msg.sender;\\r\\n\\r\\n        require(cdaoToken.balanceOf(creator) >= createConspiracyCost, \\\"Your CDAO Token Balance is too low to create a conspiracy!\\\");\\r\\n\\r\\n        uint256 conspiracyId = conspiracies.length;\\r\\n\\r\\n        Conspiracy memory conspiracy = Conspiracy({\\r\\n            name: name,\\r\\n            id: conspiracyId,\\r\\n            creator: creator,\\r\\n            description: description,\\r\\n            imageUri: imageUri,\\r\\n            upvotes: 0,\\r\\n            downvotes: 0\\r\\n        });\\r\\n\\r\\n        conspiracies.push(conspiracy);\\r\\n\\r\\n        cdaoToken.transferFrom(creator, owner(), createConspiracyCost);\\r\\n        \\r\\n        emit CreatedConspiracy(conspiracyId, creator, name, description, imageUri);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * \\r\\n     * @param conspiracyId Id of the conspiracy that the user wants to Upvote\\r\\n     * \\r\\n     * @notice This function check if the user has already upvoted and reverts &\\r\\n     * If the user has downvoted the conspiracy before then it changes it to a upvote\\r\\n     */\\r\\n    function upvote(uint256 conspiracyId) external shouldNotBeUpvoted(conspiracyId) {\\r\\n        address user = msg.sender;\\r\\n        Conspiracy storage conspiracy = conspiracies[conspiracyId];\\r\\n\\r\\n        if(downvoted[user][conspiracyId]){\\r\\n            downvoted[user][conspiracyId] = false;\\r\\n            conspiracy.downvotes--;\\r\\n        }\\r\\n        \\r\\n        upvoted[user][conspiracyId] = true;\\r\\n        conspiracy.upvotes++;\\r\\n\\r\\n        emit Upvoted(user, conspiracyId, conspiracy.upvotes, conspiracy.downvotes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * \\r\\n     * @param conspiracyId Id of the conspiracy that the user wants to Downvote\\r\\n     * \\r\\n     * @notice This function check if the user has already Downvoted and reverts &\\r\\n     * If the user has Upvoted the conspiracy before then it changes it to a Downvote\\r\\n     */\\r\\n    function downvote(uint256 conspiracyId) external shouldNotBeDownvoted(conspiracyId){\\r\\n        address user = msg.sender;\\r\\n        Conspiracy storage conspiracy = conspiracies[conspiracyId]; \\r\\n\\r\\n        if(upvoted[user][conspiracyId]){\\r\\n            upvoted[user][conspiracyId] = false;\\r\\n            conspiracy.upvotes--;\\r\\n        }\\r\\n        \\r\\n        downvoted[user][conspiracyId] = true;\\r\\n        conspiracy.downvotes++;\\r\\n\\r\\n        emit Downvoted(user, conspiracyId, conspiracy.upvotes, conspiracy.downvotes);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * \\r\\n     * @param newCreateConspiracyCost New cost for creating conspiracy\\r\\n     * \\r\\n     * @notice Only owner can call this function\\r\\n     * @notice Multiplies by 1e18 \\\"So enter a normal number and not a token number (without adding 18 extra zeros)\\\"\\r\\n     */\\r\\n    function setCreateConspiracyCost(uint256 newCreateConspiracyCost) external onlyOwner {\\r\\n        createConspiracyCost = newCreateConspiracyCost * 1e18;\\r\\n    }\\r\\n\\r\\n\\r\\n    ///////////////////////////////////////////////////\\r\\n    //////////     External View Functions     ////////////\\r\\n    /////////////////////////////////////////////////\\r\\n\\r\\n    function getAllConspiracies() external view returns(Conspiracy[] memory){\\r\\n        return conspiracies;\\r\\n    }\\r\\n\\r\\n    function getConspiracy(uint256 conspiracyId) external view returns(Conspiracy memory){\\r\\n        return conspiracies[conspiracyId];\\r\\n    } \\r\\n\\r\\n    function getUsersVoteFor(uint256 conspiracyId) external view returns(string memory) {\\r\\n        address user = msg.sender;\\r\\n        if(upvoted[user][conspiracyId]){\\r\\n            return \\\"Upvoted\\\";\\r\\n        } else if(downvoted[user][conspiracyId]){\\r\\n            return \\\"Downvoted\\\";\\r\\n        } else {\\r\\n            return \\\"Not voted\\\";\\r\\n        }\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_createConspiracyCost\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"}],\"name\":\"CreatedConspiracy\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"downvoter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conspiracyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestUpvotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestDownvotes\",\"type\":\"uint256\"}],\"name\":\"Downvoted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"upvoter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"conspiracyId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestUpvotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"latestDownvotes\",\"type\":\"uint256\"}],\"name\":\"Upvoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cdaoTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"}],\"name\":\"createConspiracy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createConspiracyCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conspiracyId\",\"type\":\"uint256\"}],\"name\":\"downvote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllConspiracies\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"upvotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downvotes\",\"type\":\"uint256\"}],\"internalType\":\"struct ConspiracyDAO.Conspiracy[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conspiracyId\",\"type\":\"uint256\"}],\"name\":\"getConspiracy\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"upvotes\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downvotes\",\"type\":\"uint256\"}],\"internalType\":\"struct ConspiracyDAO.Conspiracy\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conspiracyId\",\"type\":\"uint256\"}],\"name\":\"getUsersVoteFor\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newCreateConspiracyCost\",\"type\":\"uint256\"}],\"name\":\"setCreateConspiracyCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"conspiracyId\",\"type\":\"uint256\"}],\"name\":\"upvote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ConspiracyDAO", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000064", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}