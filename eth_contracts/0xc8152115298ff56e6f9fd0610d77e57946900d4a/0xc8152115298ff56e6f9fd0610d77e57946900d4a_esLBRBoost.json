{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lybra/miner/esLBRBoost.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../interfaces/IesLBR.sol\\\";\\r\\nimport \\\"../interfaces/IMiningIncentives.sol\\\";\\r\\n\\r\\n\\r\\ncontract esLBRBoost is Ownable {\\r\\n    esLBRLockSetting[] public esLBRLockSettings;\\r\\n    mapping(address => LockStatus) public userLockStatus;\\r\\n    IMiningIncentives public miningIncentives;\\r\\n\\r\\n    // Define a struct for the lock settings\\r\\n    struct esLBRLockSetting {\\r\\n        uint256 duration;\\r\\n        uint256 miningBoost;\\r\\n    }\\r\\n\\r\\n    // Define a struct for the user's lock status\\r\\n    struct LockStatus {\\r\\n        uint256 lockAmount;\\r\\n        uint256 unlockTime;\\r\\n        uint256 duration;\\r\\n        uint256 miningBoost;\\r\\n    }\\r\\n\\r\\n    event StakeLBR(address indexed user, uint256 amount, uint256 time);\\r\\n    event NewLockSetting(uint256 duration, uint256 miningBoost);\\r\\n    event UserLockStatus(address indexed user, uint256 lockAmount, uint256 unlockTime, uint256 duration, uint256 miningBoost);\\r\\n    event Unlock(address indexed user, uint256 unLockAmount, uint256 unlockTime);\\r\\n\\r\\n    // Constructor to initialize the default lock settings\\r\\n    constructor(address _miningIncentives) {\\r\\n        esLBRLockSettings.push(esLBRLockSetting(30 days, 5 * 1e18));\\r\\n        esLBRLockSettings.push(esLBRLockSetting(90 days, 10 * 1e18));\\r\\n        esLBRLockSettings.push(esLBRLockSetting(180 days, 25 * 1e18));\\r\\n        esLBRLockSettings.push(esLBRLockSetting(365 days, 50 * 1e18));\\r\\n        miningIncentives = IMiningIncentives(_miningIncentives);\\r\\n    }\\r\\n\\r\\n    // Function to add a new lock setting\\r\\n    function addLockSetting(esLBRLockSetting memory setting) external onlyOwner {\\r\\n        esLBRLockSettings.push(setting);\\r\\n        emit NewLockSetting(setting.duration, setting.miningBoost);\\r\\n    }\\r\\n\\r\\n    function setMiningIncentives(address _addr) external onlyOwner {\\r\\n        miningIncentives = IMiningIncentives(_addr);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice The user can set the lock status and choose to use either esLBR or LBR.\\r\\n     * @param id The ID of the lock setting.\\r\\n     * @param lbrAmount The amount of LBR to be locked.\\r\\n     * @param useLBR A flag indicating whether to use LBR or not.\\r\\n     */\\r\\n    function setLockStatus(uint256 id, uint256 lbrAmount, bool useLBR) external {\\r\\n        require(id < esLBRLockSettings.length, \\\"Invalid lock setting ID\\\");\\r\\n        esLBRLockSetting memory _setting = esLBRLockSettings[id];\\r\\n        LockStatus memory userStatus = userLockStatus[msg.sender];\\r\\n        if (userStatus.unlockTime > block.timestamp) {\\r\\n            require(userStatus.duration <= _setting.duration, \\\"Your lock-in period has not ended, and the term can only be extended, not reduced.\\\");\\r\\n        }\\r\\n        if(useLBR) {\\r\\n            IesLBR(miningIncentives.LBR()).burn(msg.sender, lbrAmount);\\r\\n            IesLBR(miningIncentives.esLBR()).mint(msg.sender, lbrAmount);\\r\\n            emit StakeLBR(msg.sender, lbrAmount, block.timestamp);\\r\\n        }\\r\\n        require(IesLBR(miningIncentives.esLBR()).balanceOf(msg.sender) >= userStatus.lockAmount + lbrAmount, \\\"IB\\\");\\r\\n        miningIncentives.refreshReward(msg.sender);\\r\\n        userLockStatus[msg.sender] = LockStatus(userStatus.lockAmount + lbrAmount, block.timestamp + _setting.duration, _setting.duration, _setting.miningBoost);\\r\\n        emit UserLockStatus(msg.sender, userLockStatus[msg.sender].lockAmount, userLockStatus[msg.sender].duration, _setting.duration, _setting.miningBoost);\\r\\n    }\\r\\n\\r\\n    function unlock() external {\\r\\n        LockStatus storage userStatus = userLockStatus[msg.sender];\\r\\n        require(userStatus.unlockTime < block.timestamp, \\\"TNM\\\");\\r\\n        emit Unlock(msg.sender, userStatus.lockAmount, block.timestamp);\\r\\n        userStatus.lockAmount = 0;\\r\\n    }\\r\\n\\r\\n    // Function to get the user's unlock time\\r\\n    function getUnlockTime(address user) external view returns (uint256 unlockTime) {\\r\\n        unlockTime = userLockStatus[user].unlockTime;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice calculate the user's mining boost based on their lock status\\r\\n     * @dev Based on the user's userUpdatedAt time, finishAt time, and the current time,\\r\\n     * there are several scenarios that could occur, including no acceleration, full acceleration, and partial acceleration.\\r\\n     */\\r\\n    function getUserBoost(address user, uint256 userUpdatedAt, uint256 finishAt) external view returns (uint256) {\\r\\n        LockStatus memory userStatus = userLockStatus[user];\\r\\n        uint256 boostEndTime = userStatus.unlockTime;\\r\\n        if (userUpdatedAt >= boostEndTime || userUpdatedAt >= finishAt || userStatus.lockAmount == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint needLockedAmount = getAmountNeedLocked(user);\\r\\n        if(needLockedAmount == 0) return 0;\\r\\n        uint256 maxBoost = userLockStatus[user].miningBoost;\\r\\n\\r\\n        if (finishAt > boostEndTime && block.timestamp > boostEndTime) {\\r\\n            uint256 time = block.timestamp > finishAt ? finishAt : block.timestamp;\\r\\n            maxBoost = ((boostEndTime - userUpdatedAt) * maxBoost) / (time - userUpdatedAt);\\r\\n        }\\r\\n        if (userStatus.lockAmount >= needLockedAmount) {\\r\\n            return maxBoost;\\r\\n        }\\r\\n        return maxBoost * userStatus.lockAmount / needLockedAmount;\\r\\n    }\\r\\n\\r\\n    function getAmountNeedLocked(address user) public view returns (uint256) {\\r\\n        uint256 stakedAmount = miningIncentives.stakedOf(user);\\r\\n        uint256 totalStaked = miningIncentives.totalStaked();\\r\\n        if(stakedAmount == 0 || totalStaked == 0) return 0;\\r\\n        return stakedAmount * (IesLBR(miningIncentives.LBR()).totalSupply() + IesLBR(miningIncentives.esLBR()).totalSupply()) / totalStaked;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"lybra/interfaces/IMiningIncentives.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IMiningIncentives {\\r\\n    function totalStaked() external view returns (uint256);\\r\\n    function stakedOf(address user) external view returns (uint256);\\r\\n    function earned(address user) external view returns (uint256);\\r\\n    function isOtherEarningsClaimable(address user) external view returns (bool);\\r\\n    function esLBR() external view returns (address);\\r\\n    function LBR() external view returns (address);\\r\\n    function refreshReward(address _account) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"lybra/interfaces/IesLBR.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity ^0.8.17;\\r\\n\\r\\ninterface IesLBR {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function mint(address user, uint256 amount) external returns(bool);\\r\\n    function burn(address user, uint256 amount) external returns(bool);\\r\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\r\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_miningIncentives\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"miningBoost\",\"type\":\"uint256\"}],\"name\":\"NewLockSetting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"StakeLBR\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unLockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"miningBoost\",\"type\":\"uint256\"}],\"name\":\"UserLockStatus\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningBoost\",\"type\":\"uint256\"}],\"internalType\":\"struct esLBRBoost.esLBRLockSetting\",\"name\":\"setting\",\"type\":\"tuple\"}],\"name\":\"addLockSetting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"esLBRLockSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningBoost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAmountNeedLocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUnlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"userUpdatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finishAt\",\"type\":\"uint256\"}],\"name\":\"getUserBoost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"miningIncentives\",\"outputs\":[{\"internalType\":\"contract IMiningIncentives\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lbrAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"useLBR\",\"type\":\"bool\"}],\"name\":\"setLockStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setMiningIncentives\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userLockStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"miningBoost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "esLBRBoost", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000b2659734121feb636534213a159ac91691edbde", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}