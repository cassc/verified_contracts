{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\n/**\r\n * @title Owner\r\n * @dev Set & change owner\r\n */\r\ncontract Ownable {\r\n\r\n    address private owner;\r\n    \r\n    // event for EVM logging\r\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\r\n    \r\n    // modifier to check if caller is owner\r\n    modifier onlyOwner() {\r\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\r\n        // changes to the state and to Ether balances are reverted.\r\n        // This used to consume all gas in old EVM versions, but not anymore.\r\n        // It is often a good idea to use 'require' to check if functions are called correctly.\r\n        // As a second argument, you can also provide an explanation about what went wrong.\r\n        require(msg.sender == owner, \"Caller is not owner\");\r\n        _;\r\n    }\r\n    \r\n    /**\r\n     * @dev Set contract deployer as owner\r\n     */\r\n    constructor() {\r\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\r\n        emit OwnerSet(address(0), owner);\r\n    }\r\n\r\n    /**\r\n     * @dev Change owner\r\n     * @param newOwner address of new owner\r\n     */\r\n    function changeOwner(address newOwner) public onlyOwner {\r\n        emit OwnerSet(owner, newOwner);\r\n        owner = newOwner;\r\n    }\r\n\r\n    /**\r\n     * @dev Return owner address \r\n     * @return address of owner\r\n     */\r\n    function getOwner() external view returns (address) {\r\n        return owner;\r\n    }\r\n}\r\n\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n    external\r\n    returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n    external\r\n    payable\r\n    returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function allPairs(uint) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IERC20 {\r\n\r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function symbol() external view returns(string memory);\r\n    \r\n    function name() external view returns(string memory);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    /**\r\n     * @dev Returns the number of decimal places\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n    function safeApprove(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeApprove: approve failed'\r\n        );\r\n    }\r\n\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::safeTransfer: transfer failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            'TransferHelper::transferFrom: transferFrom failed'\r\n        );\r\n    }\r\n\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success, ) = to.call{value: value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n}\r\n\r\n/**\r\n * @title IGovernable Interface\r\n * @notice This is an interface used by the AxelarGateway contract to manage governance and mint limiter roles.\r\n */\r\ninterface IGovernable {\r\n    error NotGovernance();\r\n    error NotMintLimiter();\r\n    error InvalidGovernance();\r\n    error InvalidMintLimiter();\r\n\r\n    event GovernanceTransferred(address indexed previousGovernance, address indexed newGovernance);\r\n    event MintLimiterTransferred(address indexed previousGovernance, address indexed newGovernance);\r\n\r\n    /**\r\n     * @notice Returns the governance address.\r\n     * @return address of the governance\r\n     */\r\n    function governance() external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the mint limiter address.\r\n     * @return address of the mint limiter\r\n     */\r\n    function mintLimiter() external view returns (address);\r\n\r\n    /**\r\n     * @notice Transfer the governance role to another address.\r\n     * @param newGovernance The new governance address\r\n     */\r\n    function transferGovernance(address newGovernance) external;\r\n\r\n    /**\r\n     * @notice Transfer the mint limiter role to another address.\r\n     * @param newGovernance The new mint limiter address\r\n     */\r\n    function transferMintLimiter(address newGovernance) external;\r\n}\r\n\r\n// General interface for upgradable contracts\r\ninterface IContractIdentifier {\r\n    /**\r\n     * @notice Returns the contract ID. It can be used as a check during upgrades.\r\n     * @dev Meant to be overridden in derived contracts.\r\n     * @return bytes32 The contract ID\r\n     */\r\n    function contractId() external pure returns (bytes32);\r\n}\r\n\r\n\r\ninterface IImplementation is IContractIdentifier {\r\n    error NotProxy();\r\n\r\n    function setup(bytes calldata data) external;\r\n}\r\n\r\n\r\n/**\r\n * @title IOwnable Interface\r\n * @notice IOwnable is an interface that abstracts the implementation of a\r\n * contract with ownership control features. It's commonly used in upgradable\r\n * contracts and includes the functionality to get current owner, transfer\r\n * ownership, and propose and accept ownership.\r\n */\r\ninterface IOwnable {\r\n    error NotOwner();\r\n    error InvalidOwner();\r\n    error InvalidOwnerAddress();\r\n\r\n    event OwnershipTransferStarted(address indexed newOwner);\r\n    event OwnershipTransferred(address indexed newOwner);\r\n\r\n    /**\r\n     * @notice Returns the current owner of the contract.\r\n     * @return address The address of the current owner\r\n     */\r\n    function owner() external view returns (address);\r\n\r\n    /**\r\n     * @notice Returns the address of the pending owner of the contract.\r\n     * @return address The address of the pending owner\r\n     */\r\n    function pendingOwner() external view returns (address);\r\n\r\n    /**\r\n     * @notice Transfers ownership of the contract to a new address\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function transferOwnership(address newOwner) external;\r\n\r\n    /**\r\n     * @notice Proposes to transfer the contract's ownership to a new address.\r\n     * The new owner needs to accept the ownership explicitly.\r\n     * @param newOwner The address to transfer ownership to\r\n     */\r\n    function proposeOwnership(address newOwner) external;\r\n\r\n    /**\r\n     * @notice Transfers ownership to the pending owner.\r\n     * @dev Can only be called by the pending owner\r\n     */\r\n    function acceptOwnership() external;\r\n}\r\n\r\n// General interface for upgradable contracts\r\ninterface IUpgradable is IOwnable, IImplementation {\r\n    error InvalidCodeHash();\r\n    error InvalidImplementation();\r\n    error SetupFailed();\r\n\r\n    event Upgraded(address indexed newImplementation);\r\n\r\n    function implementation() external view returns (address);\r\n\r\n    function upgrade(\r\n        address newImplementation,\r\n        bytes32 newImplementationCodeHash,\r\n        bytes calldata params\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @title IAxelarGasService Interface\r\n * @notice This is an interface for the AxelarGasService contract which manages gas payments\r\n * and refunds for cross-chain communication on the Axelar network.\r\n * @dev This interface inherits IUpgradable\r\n */\r\ninterface IAxelarGasService is IUpgradable {\r\n    error NothingReceived();\r\n    error InvalidAddress();\r\n    error NotCollector();\r\n    error InvalidAmounts();\r\n\r\n    event GasPaidForContractCall(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event GasPaidForContractCallWithToken(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        string symbol,\r\n        uint256 amount,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event NativeGasPaidForContractCall(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event NativeGasPaidForContractCallWithToken(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        string symbol,\r\n        uint256 amount,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event GasPaidForExpressCall(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event GasPaidForExpressCallWithToken(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        string symbol,\r\n        uint256 amount,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event NativeGasPaidForExpressCall(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event NativeGasPaidForExpressCallWithToken(\r\n        address indexed sourceAddress,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        bytes32 indexed payloadHash,\r\n        string symbol,\r\n        uint256 amount,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event GasAdded(\r\n        bytes32 indexed txHash,\r\n        uint256 indexed logIndex,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event NativeGasAdded(bytes32 indexed txHash, uint256 indexed logIndex, uint256 gasFeeAmount, address refundAddress);\r\n\r\n    event ExpressGasAdded(\r\n        bytes32 indexed txHash,\r\n        uint256 indexed logIndex,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event NativeExpressGasAdded(\r\n        bytes32 indexed txHash,\r\n        uint256 indexed logIndex,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    );\r\n\r\n    event Refunded(\r\n        bytes32 indexed txHash,\r\n        uint256 indexed logIndex,\r\n        address payable receiver,\r\n        address token,\r\n        uint256 amount\r\n    );\r\n\r\n    /**\r\n     * @notice Pay for gas using ERC20 tokens for a contract call on a destination chain.\r\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\r\n     * @param sender The address making the payment\r\n     * @param destinationChain The target chain where the contract call will be made\r\n     * @param destinationAddress The target address on the destination chain\r\n     * @param payload Data payload for the contract call\r\n     * @param gasToken The address of the ERC20 token used to pay for gas\r\n     * @param gasFeeAmount The amount of tokens to pay for gas\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function payGasForContractCall(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Pay for gas using ERC20 tokens for a contract call with tokens on a destination chain.\r\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\r\n     * @param sender The address making the payment\r\n     * @param destinationChain The target chain where the contract call with tokens will be made\r\n     * @param destinationAddress The target address on the destination chain\r\n     * @param payload Data payload for the contract call with tokens\r\n     * @param symbol The symbol of the token to be sent with the call\r\n     * @param amount The amount of tokens to be sent with the call\r\n     * @param gasToken The address of the ERC20 token used to pay for gas\r\n     * @param gasFeeAmount The amount of tokens to pay for gas\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function payGasForContractCallWithToken(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Pay for gas using native currency for a contract call on a destination chain.\r\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\r\n     * @param sender The address making the payment\r\n     * @param destinationChain The target chain where the contract call will be made\r\n     * @param destinationAddress The target address on the destination chain\r\n     * @param payload Data payload for the contract call\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function payNativeGasForContractCall(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        address refundAddress\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Pay for gas using native currency for a contract call with tokens on a destination chain.\r\n     * @dev This function is called on the source chain before calling the gateway to execute a remote contract.\r\n     * @param sender The address making the payment\r\n     * @param destinationChain The target chain where the contract call with tokens will be made\r\n     * @param destinationAddress The target address on the destination chain\r\n     * @param payload Data payload for the contract call with tokens\r\n     * @param symbol The symbol of the token to be sent with the call\r\n     * @param amount The amount of tokens to be sent with the call\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function payNativeGasForContractCallWithToken(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount,\r\n        address refundAddress\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Pay for gas using ERC20 tokens for an express contract call on a destination chain.\r\n     * @dev This function is called on the source chain before calling the gateway to express execute a remote contract.\r\n     * @param sender The address making the payment\r\n     * @param destinationChain The target chain where the contract call will be made\r\n     * @param destinationAddress The target address on the destination chain\r\n     * @param payload Data payload for the contract call\r\n     * @param gasToken The address of the ERC20 token used to pay for gas\r\n     * @param gasFeeAmount The amount of tokens to pay for gas\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function payGasForExpressCall(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Pay for gas using ERC20 tokens for an express contract call with tokens on a destination chain.\r\n     * @dev This function is called on the source chain before calling the gateway to express execute a remote contract.\r\n     * @param sender The address making the payment\r\n     * @param destinationChain The target chain where the contract call with tokens will be made\r\n     * @param destinationAddress The target address on the destination chain\r\n     * @param payload Data payload for the contract call with tokens\r\n     * @param symbol The symbol of the token to be sent with the call\r\n     * @param amount The amount of tokens to be sent with the call\r\n     * @param gasToken The address of the ERC20 token used to pay for gas\r\n     * @param gasFeeAmount The amount of tokens to pay for gas\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function payGasForExpressCallWithToken(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Pay for gas using native currency for an express contract call on a destination chain.\r\n     * @dev This function is called on the source chain before calling the gateway to express execute a remote contract.\r\n     * @param sender The address making the payment\r\n     * @param destinationChain The target chain where the contract call will be made\r\n     * @param destinationAddress The target address on the destination chain\r\n     * @param payload Data payload for the contract call\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function payNativeGasForExpressCall(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        address refundAddress\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Pay for gas using native currency for an express contract call with tokens on a destination chain.\r\n     * @dev This function is called on the source chain before calling the gateway to express execute a remote contract.\r\n     * @param sender The address making the payment\r\n     * @param destinationChain The target chain where the contract call with tokens will be made\r\n     * @param destinationAddress The target address on the destination chain\r\n     * @param payload Data payload for the contract call with tokens\r\n     * @param symbol The symbol of the token to be sent with the call\r\n     * @param amount The amount of tokens to be sent with the call\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function payNativeGasForExpressCallWithToken(\r\n        address sender,\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount,\r\n        address refundAddress\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Add additional gas payment using ERC20 tokens after initiating a cross-chain call.\r\n     * @dev This function can be called on the source chain after calling the gateway to execute a remote contract.\r\n     * @param txHash The transaction hash of the cross-chain call\r\n     * @param logIndex The log index for the cross-chain call\r\n     * @param gasToken The ERC20 token address used to add gas\r\n     * @param gasFeeAmount The amount of tokens to add as gas\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function addGas(\r\n        bytes32 txHash,\r\n        uint256 logIndex,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Add additional gas payment using native currency after initiating a cross-chain call.\r\n     * @dev This function can be called on the source chain after calling the gateway to execute a remote contract.\r\n     * @param txHash The transaction hash of the cross-chain call\r\n     * @param logIndex The log index for the cross-chain call\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function addNativeGas(\r\n        bytes32 txHash,\r\n        uint256 logIndex,\r\n        address refundAddress\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Add additional gas payment using ERC20 tokens after initiating an express cross-chain call.\r\n     * @dev This function can be called on the source chain after calling the gateway to express execute a remote contract.\r\n     * @param txHash The transaction hash of the cross-chain call\r\n     * @param logIndex The log index for the cross-chain call\r\n     * @param gasToken The ERC20 token address used to add gas\r\n     * @param gasFeeAmount The amount of tokens to add as gas\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function addExpressGas(\r\n        bytes32 txHash,\r\n        uint256 logIndex,\r\n        address gasToken,\r\n        uint256 gasFeeAmount,\r\n        address refundAddress\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Add additional gas payment using native currency after initiating an express cross-chain call.\r\n     * @dev This function can be called on the source chain after calling the gateway to express execute a remote contract.\r\n     * @param txHash The transaction hash of the cross-chain call\r\n     * @param logIndex The log index for the cross-chain call\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function addNativeExpressGas(\r\n        bytes32 txHash,\r\n        uint256 logIndex,\r\n        address refundAddress\r\n    ) external payable;\r\n\r\n    /**\r\n     * @notice Allows the gasCollector to collect accumulated fees from the contract.\r\n     * @dev Use address(0) as the token address for native currency.\r\n     * @param receiver The address to receive the collected fees\r\n     * @param tokens Array of token addresses to be collected\r\n     * @param amounts Array of amounts to be collected for each respective token address\r\n     */\r\n    function collectFees(\r\n        address payable receiver,\r\n        address[] calldata tokens,\r\n        uint256[] calldata amounts\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Refunds gas payment to the receiver in relation to a specific cross-chain transaction.\r\n     * @dev Only callable by the gasCollector.\r\n     * @dev Use address(0) as the token address to refund native currency.\r\n     * @param txHash The transaction hash of the cross-chain call\r\n     * @param logIndex The log index for the cross-chain call\r\n     * @param receiver The address to receive the refund\r\n     * @param token The token address to be refunded\r\n     * @param amount The amount to refund\r\n     */\r\n    function refund(\r\n        bytes32 txHash,\r\n        uint256 logIndex,\r\n        address payable receiver,\r\n        address token,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    /**\r\n     * @notice Returns the address of the designated gas collector.\r\n     * @return address of the gas collector\r\n     */\r\n    function gasCollector() external returns (address);\r\n}\r\n\r\ninterface IAxelarExecutable {\r\n    error InvalidAddress();\r\n    error NotApprovedByGateway();\r\n\r\n    function gateway() external view returns (IAxelarGateway);\r\n\r\n    function execute(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload\r\n    ) external;\r\n\r\n    function executeWithToken(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload,\r\n        string calldata tokenSymbol,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ninterface IAxelarGateway is IImplementation, IGovernable {\r\n    /**********\\\r\n    |* Errors *|\r\n    \\**********/\r\n\r\n    error NotSelf();\r\n    error InvalidCodeHash();\r\n    error SetupFailed();\r\n    error InvalidAuthModule();\r\n    error InvalidTokenDeployer();\r\n    error InvalidAmount();\r\n    error InvalidChainId();\r\n    error InvalidCommands();\r\n    error TokenDoesNotExist(string symbol);\r\n    error TokenAlreadyExists(string symbol);\r\n    error TokenDeployFailed(string symbol);\r\n    error TokenContractDoesNotExist(address token);\r\n    error BurnFailed(string symbol);\r\n    error MintFailed(string symbol);\r\n    error InvalidSetMintLimitsParams();\r\n    error ExceedMintLimit(string symbol);\r\n\r\n    /**********\\\r\n    |* Events *|\r\n    \\**********/\r\n\r\n    event TokenSent(\r\n        address indexed sender,\r\n        string destinationChain,\r\n        string destinationAddress,\r\n        string symbol,\r\n        uint256 amount\r\n    );\r\n\r\n    event ContractCall(\r\n        address indexed sender,\r\n        string destinationChain,\r\n        string destinationContractAddress,\r\n        bytes32 indexed payloadHash,\r\n        bytes payload\r\n    );\r\n\r\n    event ContractCallWithToken(\r\n        address indexed sender,\r\n        string destinationChain,\r\n        string destinationContractAddress,\r\n        bytes32 indexed payloadHash,\r\n        bytes payload,\r\n        string symbol,\r\n        uint256 amount\r\n    );\r\n\r\n    event Executed(bytes32 indexed commandId);\r\n\r\n    event TokenDeployed(string symbol, address tokenAddresses);\r\n\r\n    event ContractCallApproved(\r\n        bytes32 indexed commandId,\r\n        string sourceChain,\r\n        string sourceAddress,\r\n        address indexed contractAddress,\r\n        bytes32 indexed payloadHash,\r\n        bytes32 sourceTxHash,\r\n        uint256 sourceEventIndex\r\n    );\r\n\r\n    event ContractCallApprovedWithMint(\r\n        bytes32 indexed commandId,\r\n        string sourceChain,\r\n        string sourceAddress,\r\n        address indexed contractAddress,\r\n        bytes32 indexed payloadHash,\r\n        string symbol,\r\n        uint256 amount,\r\n        bytes32 sourceTxHash,\r\n        uint256 sourceEventIndex\r\n    );\r\n\r\n    event ContractCallExecuted(bytes32 indexed commandId);\r\n\r\n    event TokenMintLimitUpdated(string symbol, uint256 limit);\r\n\r\n    event OperatorshipTransferred(bytes newOperatorsData);\r\n\r\n    event Upgraded(address indexed implementation);\r\n\r\n    /********************\\\r\n    |* Public Functions *|\r\n    \\********************/\r\n\r\n    function sendToken(\r\n        string calldata destinationChain,\r\n        string calldata destinationAddress,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function callContract(\r\n        string calldata destinationChain,\r\n        string calldata contractAddress,\r\n        bytes calldata payload\r\n    ) external;\r\n\r\n    function callContractWithToken(\r\n        string calldata destinationChain,\r\n        string calldata contractAddress,\r\n        bytes calldata payload,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external;\r\n\r\n    function isContractCallApproved(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        address contractAddress,\r\n        bytes32 payloadHash\r\n    ) external view returns (bool);\r\n\r\n    function isContractCallAndMintApproved(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        address contractAddress,\r\n        bytes32 payloadHash,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external view returns (bool);\r\n\r\n    function validateContractCall(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes32 payloadHash\r\n    ) external returns (bool);\r\n\r\n    function validateContractCallAndMint(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes32 payloadHash,\r\n        string calldata symbol,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /***********\\\r\n    |* Getters *|\r\n    \\***********/\r\n\r\n    function authModule() external view returns (address);\r\n\r\n    function tokenDeployer() external view returns (address);\r\n\r\n    function tokenMintLimit(string memory symbol) external view returns (uint256);\r\n\r\n    function tokenMintAmount(string memory symbol) external view returns (uint256);\r\n\r\n    function allTokensFrozen() external view returns (bool);\r\n\r\n    function implementation() external view returns (address);\r\n\r\n    function tokenAddresses(string memory symbol) external view returns (address);\r\n\r\n    function tokenFrozen(string memory symbol) external view returns (bool);\r\n\r\n    function isCommandExecuted(bytes32 commandId) external view returns (bool);\r\n\r\n    /************************\\\r\n    |* Governance Functions *|\r\n    \\************************/\r\n\r\n    function setTokenMintLimits(string[] calldata symbols, uint256[] calldata limits) external;\r\n\r\n    function upgrade(\r\n        address newImplementation,\r\n        bytes32 newImplementationCodeHash,\r\n        bytes calldata setupParams\r\n    ) external;\r\n\r\n    /**********************\\\r\n    |* External Functions *|\r\n    \\**********************/\r\n\r\n    function execute(bytes calldata input) external;\r\n}\r\n\r\ncontract AxelarExecutable is IAxelarExecutable {\r\n    IAxelarGateway public immutable gateway;\r\n\r\n    constructor(address gateway_) {\r\n        if (gateway_ == address(0)) revert InvalidAddress();\r\n\r\n        gateway = IAxelarGateway(gateway_);\r\n    }\r\n\r\n    function execute(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload\r\n    ) external {\r\n        bytes32 payloadHash = keccak256(payload);\r\n\r\n        if (!gateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash))\r\n            revert NotApprovedByGateway();\r\n\r\n        _execute(sourceChain, sourceAddress, payload);\r\n    }\r\n\r\n    function executeWithToken(\r\n        bytes32 commandId,\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload,\r\n        string calldata tokenSymbol,\r\n        uint256 amount\r\n    ) external {\r\n        bytes32 payloadHash = keccak256(payload);\r\n\r\n        if (\r\n            !gateway.validateContractCallAndMint(\r\n                commandId,\r\n                sourceChain,\r\n                sourceAddress,\r\n                payloadHash,\r\n                tokenSymbol,\r\n                amount\r\n            )\r\n        ) revert NotApprovedByGateway();\r\n\r\n        _executeWithToken(sourceChain, sourceAddress, payload, tokenSymbol, amount);\r\n    }\r\n\r\n    function _execute(\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload\r\n    ) internal virtual {}\r\n\r\n    function _executeWithToken(\r\n        string calldata sourceChain,\r\n        string calldata sourceAddress,\r\n        bytes calldata payload,\r\n        string calldata tokenSymbol,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract RubberDuckyETHBuyer is Ownable, AxelarExecutable {\r\n\r\n    /**\r\n        Axelar Gas Service Contract\r\n     */\r\n    IAxelarGasService public immutable gasService;\r\n\r\n    /**\r\n        USDC token address, used in the bridge\r\n     */\r\n    address public USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\r\n\r\n    /**\r\n        V2 Router Contract\r\n     */\r\n    IUniswapV2Router02 public V2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n    /** Path from WETH to middleware */\r\n    address[] public path;\r\n\r\n    /** Default Fee */\r\n    uint256 public defaultFee = 200;\r\n\r\n    /** Fee Denominator */\r\n    uint256 private constant FEE_DENOM = 10_000;\r\n\r\n    /** Fee Recipient */\r\n    address public feeReceiver;\r\n\r\n    /** Destination Chain */\r\n    string public destinationChain = \"Polygon\";\r\n    string public destinationAddress;\r\n\r\n    /** Min Gas For Swap */\r\n    uint256 public minGas;\r\n\r\n    constructor(\r\n        address gateway_, \r\n        address gasService_,\r\n        address feeRecipient_\r\n    ) AxelarExecutable(gateway_) {\r\n        \r\n        // set up Axelar Configs\r\n        gasService = IAxelarGasService(gasService_);\r\n\r\n        // set up contract configs\r\n        path = new address[](2);\r\n        path[0] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // WETH\r\n        path[1] = USDC;                                       // USDC\r\n        feeReceiver = feeRecipient_;\r\n\r\n        // set min gas\r\n        minGas = 0.0005 ether;\r\n\r\n        // Destination Address\r\n        destinationAddress = string(abi.encodePacked(address(this)));\r\n    }\r\n\r\n    function setDestinationChain(string calldata destinationChain_) external onlyOwner {\r\n        destinationChain = destinationChain_;\r\n    }\r\n\r\n    function setDestinationAddress(string calldata destinationAddress_) external onlyOwner {\r\n        destinationAddress = destinationAddress_;\r\n    }\r\n\r\n    function setMinGas(uint256 minGas_) external onlyOwner {\r\n        minGas = minGas_;\r\n    }\r\n\r\n    // set fee\r\n    function setDefaultFee(uint256 fee_) external onlyOwner {\r\n        require(fee_ <= FEE_DENOM/10, 'Invalid Fee');\r\n        defaultFee = fee_;\r\n    }\r\n\r\n    // set USDC\r\n    function setUSDC(address USDC_) external onlyOwner {\r\n        require(USDC_ != address(0), 'Zero Address');\r\n        USDC = USDC_;\r\n    }\r\n\r\n    // set v2 router\r\n    function setV2Router(address v2Router_) external onlyOwner {\r\n        require(v2Router_ != address(0), 'Zero Address');\r\n        V2Router = IUniswapV2Router02(v2Router_);\r\n    }\r\n\r\n    // set path\r\n    function setPath(address[] calldata path_) external onlyOwner {\r\n        path = path_;\r\n    }\r\n\r\n    // set fee recipient\r\n    function setFeeRecipient(address feeRecipient_) external onlyOwner {\r\n        require(feeRecipient_ != address(0), 'Zero Address');\r\n        feeReceiver = feeRecipient_;\r\n    }\r\n\r\n    function withdraw(address token) external onlyOwner {\r\n        TransferHelper.safeTransfer(token, msg.sender, IERC20(token).balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawETH() external onlyOwner {\r\n        TransferHelper.safeTransferETH(msg.sender, address(this).balance);\r\n    }\r\n\r\n    receive() external payable {\r\n        require(msg.value > minGas, 'Min Gas Error');\r\n        _useBridge(msg.sender, minGas, 0, 0, 0);\r\n    }\r\n\r\n    function useBridge(address to, uint256 gas, uint256 minOutUSDC, uint256 minOut, uint112 percentForGas) external payable {\r\n        require(\r\n            gas >= minGas,\r\n            'Min Gas Error'\r\n        );\r\n        require(\r\n            msg.value > gas,\r\n            'Too Much Gas'\r\n        );\r\n        require(\r\n            to != address(0),\r\n            'Zero To'\r\n        );\r\n        _useBridge(to, gas, minOutUSDC, minOut, percentForGas);\r\n    }\r\n\r\n    /**\r\n        Used To Bridge Tokens To Destination Chains\r\n     */\r\n    function _useBridge(\r\n        address to,\r\n        uint256 gas,\r\n        uint256 minOutUSDC,\r\n        uint256 minOut,\r\n        uint112 percentForGas\r\n    ) internal {\r\n\r\n        // amount to swap is value - gas\r\n        uint256 preTaxAmount = msg.value - gas;\r\n\r\n        // calculate fee\r\n        uint256 feeAmount = ( preTaxAmount * defaultFee ) / FEE_DENOM;\r\n\r\n        // amount to swap is preTaxAmount - fee\r\n        uint256 amount = preTaxAmount - feeAmount;\r\n        require(amount > 0, 'Zero Amount');\r\n\r\n        // send fee to destination\r\n        if (feeAmount > 0) {\r\n            TransferHelper.safeTransferETH(feeReceiver, feeAmount);\r\n        }\r\n\r\n        // make swaps to get native into USDC\r\n        uint256 usdcAmount = _swap(amount, minOutUSDC);\r\n\r\n        // create payload using the amount received to cover tax-on-transfer tokens\r\n        bytes memory payload = abi.encode(to, percentForGas, minOut);\r\n\r\n        // pass payload into gasService, paying the gas for the next call\r\n        gasService.payNativeGasForContractCallWithToken{value: gas} (\r\n            address(this),\r\n            destinationChain,\r\n            destinationAddress,\r\n            payload,\r\n            \"USDC\",\r\n            usdcAmount,\r\n            msg.sender\r\n        );\r\n\r\n        // approve of USDC to the gateway\r\n        TransferHelper.safeApprove(USDC, address(gateway), usdcAmount);\r\n\r\n        // Call Contract On The Gateway\r\n        gateway.callContractWithToken(\r\n            destinationChain, \r\n            destinationAddress, \r\n            payload,\r\n            \"USDC\",\r\n            usdcAmount\r\n        );\r\n    }\r\n\r\n\r\n    function _swap(uint256 amount, uint256 minOutUSDC) internal returns (uint256) {\r\n\r\n        // swapping ETH to USDC\r\n        V2Router.swapExactETHForTokens{value: amount}(\r\n            minOutUSDC,\r\n            path,\r\n            address(this),\r\n            block.timestamp + 1000\r\n        );\r\n\r\n        // return balance of USDC received\r\n        return IERC20(USDC).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Add additional gas payment using native currency after initiating a cross-chain call.\r\n     * @dev This function can be called on the source chain after calling the gateway to execute a remote contract.\r\n     * @param txHash The transaction hash of the cross-chain call\r\n     * @param logIndex The log index for the cross-chain call\r\n     * @param refundAddress The address where refunds, if any, should be sent\r\n     */\r\n    function addNativeGas(\r\n        bytes32 txHash,\r\n        uint256 logIndex,\r\n        address refundAddress\r\n    ) external payable {\r\n        gasService.addNativeGas{value: msg.value}(txHash, logIndex, refundAddress);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gateway_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasService_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedByGateway\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"V2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"txHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"logIndex\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"addNativeGas\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destinationAddress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destinationChain\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"executeWithToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasService\",\"outputs\":[{\"internalType\":\"contract IAxelarGasService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract IAxelarGateway\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"path\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"name\":\"setDefaultFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationAddress_\",\"type\":\"string\"}],\"name\":\"setDestinationAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"destinationChain_\",\"type\":\"string\"}],\"name\":\"setDestinationChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"feeRecipient_\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minGas_\",\"type\":\"uint256\"}],\"name\":\"setMinGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path_\",\"type\":\"address[]\"}],\"name\":\"setPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"USDC_\",\"type\":\"address\"}],\"name\":\"setUSDC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"v2Router_\",\"type\":\"address\"}],\"name\":\"setV2Router\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOutUSDC\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint112\",\"name\":\"percentForGas\",\"type\":\"uint112\"}],\"name\":\"useBridge\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "RubberDuckyETHBuyer", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000004f4495243837681061c4743b74b3eedf548d56a50000000000000000000000002d5d7d31f671f86c782533cc367f14109a082712000000000000000000000000aaf9745ce5e983f199781706fbfef03b0f175d9c", "EVMVersion": "paris", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://6fffeabe300aadbc85a9ed25be4806e7549ba7af9cb4c7aa8482869dd27a38ec"}