{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/contracts2/BananaCaller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\ninterface ITokenBuyer {\\n    function buyExactTokens(address tokenAddress, uint256 tokenAmount, address refundAddress) external payable;\\n    function withdraw() external;\\n}\\n\\ncontract BananaCaller {\\n    ITokenBuyer public tokenBuyer;\\n    address public owner;\\n\\n    constructor(address _tokenBuyer) {\\n        tokenBuyer = ITokenBuyer(_tokenBuyer);\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Caller must be the owner\\\");\\n        _;\\n    }\\n\\n    // Allows sending ETH to buy tokens. Any ETH sent with this call will be forwarded.\\n    function bananaFast(address tokenAddress, uint256 tokenAmount, address refundAddress) external payable {\\n        tokenBuyer.buyExactTokens{value: msg.value}(tokenAddress, tokenAmount, refundAddress);\\n    }\\n\\n    // Allows the owner to trigger a withdrawal from the TokenBuyer contract.\\n    function triggerWithdrawal() external onlyOwner {\\n        tokenBuyer.withdraw();\\n    }\\n\\n    // Withdraw ETH stored in this contract to the owner's address.\\n    function withdraw() external onlyOwner {\\n        (bool success, ) = payable(owner).call{value: address(this).balance}(\\\"\\\");\\n        require(success, \\\"Failed to send Ether\\\");\\n    }\\n\\n    // To receive ETH and ensure the contract can receive ETH without reverting.\\n    receive() external payable {}\\n    fallback() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenBuyer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"refundAddress\",\"type\":\"address\"}],\"name\":\"bananaFast\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenBuyer\",\"outputs\":[{\"internalType\":\"contract ITokenBuyer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BananaCaller", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000523088bf90d8e7e23e76bf5a9edfb68fa32a2bd4", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}