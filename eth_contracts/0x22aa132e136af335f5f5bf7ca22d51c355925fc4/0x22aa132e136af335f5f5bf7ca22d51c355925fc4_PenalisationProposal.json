{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/PenalisationProposal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.19;\\n\\nimport { IRelayerRegistry } from \\\"@interfaces/IRelayerRegistry.sol\\\";\\nimport { IStakingRewards } from \\\"@interfaces/IStakingRewards.sol\\\";\\n\\ncontract PenalisationProposal {\\n    address constant cheater = 0x0Bed01A860a56266383D648320852715FEcAc7ae; // 0xrelayer.eth\\n    IRelayerRegistry constant relayerRegistry = IRelayerRegistry(0x58E8dCC13BE9780fC42E8723D8EaD4CF46943dF2);\\n    IStakingRewards constant staking = IStakingRewards(0x5B3f656C80E8ddb9ec01Dd9018815576E9238c29);\\n\\n    function executeProposal() public {\\n        uint256 cheaterBalance = relayerRegistry.getRelayerBalance(cheater);\\n        relayerRegistry.unregisterRelayer(cheater);\\n        staking.withdrawTorn(cheaterBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRelayerRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IRelayerRegistry {\\r\\n    function unregisterRelayer(address relayer) external;\\r\\n    function getRelayerBalance(address relayer) external view returns (uint256);\\r\\n    function isRelayer(address toResolve) external view returns (bool);\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/interfaces/IStakingRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\ninterface IStakingRewards {\\r\\n    function withdrawTorn(uint256 amount) external;\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@ens/contracts/=node_modules/@ensdomains/ens-contracts/contracts/\",\r\n      \"@ensdomains/=node_modules/@ensdomains/\",\r\n      \"@forge-std/=lib/forge-std/src/\",\r\n      \"@gnosis.pm/=node_modules/@gnosis.pm/\",\r\n      \"@gnosis/contracts/=node_modules/@gnosis.pm/safe-contracts/contracts/\",\r\n      \"@gnosis/ido-contracts/=node_modules/@gnosis.pm/ido-contracts/contracts/\",\r\n      \"@interfaces/=src/interfaces/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\r\n      \"@openzeppelin/upgrades/=node_modules/@openzeppelin/upgrades-core/\",\r\n      \"@proprietary/=src/proprietary/\",\r\n      \"@root/=src/\",\r\n      \"@torn-token/=node_modules/torn-token/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PenalisationProposal", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}