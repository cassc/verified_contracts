{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/QQ.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicensed\\n\\n/*\\n    Made of sadness and tears. QQ more.\\n    https://etherscan.io/tx/0x36f899bb27aa365c30a6f559c3512c063c366dae515d43fe05ec530ed440bb5a\\n*/\\n\\npragma solidity 0.8.18;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n}\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"!o\\\");\\n        _;\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n}\\n\\ncontract QQ is IERC20, Context, Ownable {\\n    string private constant _name = unicode\\\"QQ more\\\";\\n    string private constant _symbol = unicode\\\"QQ\\\";\\n    uint8 private constant _decimals = 9;\\n\\n    mapping(address => uint256) private _bal;\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private constant _totalSupply = 69_000_000 * 10 ** 9;\\n    uint256 private constant _maxTxAmount = 1_380_000 * 10 ** 9;\\n    uint256 private constant _maxWalletSize = 1_380_000 * 10 ** 9;\\n    uint256 private constant _swapTokensAtAmount = 138_000 * 10 ** 9;\\n    uint256 private constant _maxSwapAmount = 690_000 * 10 ** 9;\\n\\n    uint256 private constant MAX = type(uint256).max;\\n    uint256 private constant _totalReflect = (MAX - (MAX % _totalSupply));\\n    uint256 private constant _rt = _totalReflect / _totalSupply;\\n\\n    uint256 private _launchBuyFee = 6;\\n    uint256 private _launchSellFee = 27;\\n    address payable private immutable _taxWallet;\\n    IUniswapV2Router02 private constant _uniswapV2Router =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    address public immutable uniswapV2Pair;\\n\\n    bool private swapping;\\n    bool private limitInEffect = true;\\n\\n    uint8 private constant buyTax = 1;\\n    uint8 private constant sellTax = 1;\\n\\n    uint256 private _initBlock = MAX;\\n    uint256 private constant _launchDuration = 9;\\n    bool private _feeUnlocked = true;\\n\\n    error Address(address);\\n    error Amount();\\n\\n    constructor() {\\n        _initBlock = block.number;\\n\\n        _bal[_msgSender()] = _totalReflect;\\n        _taxWallet = payable(_msgSender());\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\\n        _approve(address(this), address(_uniswapV2Router), MAX);\\n\\n        emit Transfer(address(0), _msgSender(), _totalSupply);\\n    }\\n\\n    modifier lockTheSwap() {\\n        swapping = true;\\n        _;\\n        delete swapping;\\n    }\\n\\n    receive() external payable {}\\n\\n    function name() public pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public pure override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        if (_bal[account] > _totalReflect) revert Amount();\\n        return _bal[account] / _rt;\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        if (amount > _allowances[sender][_msgSender()]) revert Amount();\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\\n        _transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        if (owner == address(0)) revert Address(owner);\\n        else if (spender == address(0)) revert Address(spender);\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) private {\\n        if (from == address(0)) revert Address(from);\\n        else if (to == address(0)) revert Address(to);\\n\\n        if (from != owner() && to != owner()) {\\n            if (limitInEffect) {\\n                if (amount > _maxTxAmount) revert Amount();\\n                if (to != uniswapV2Pair && balanceOf(to) + amount > _maxWalletSize) revert Amount();\\n            }\\n\\n            uint256 contractTokenBalance = balanceOf(address(this));\\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\\n\\n            if (from == _taxWallet && to == _taxWallet && contractTokenBalance > 0) {\\n                canSwap = true;\\n            } else if (contractTokenBalance >= _maxSwapAmount) {\\n                contractTokenBalance = _maxSwapAmount;\\n            }\\n\\n            if (canSwap && !swapping && from != uniswapV2Pair && from != address(this) && to != address(this)) {\\n                swapTokensForEth(contractTokenBalance);\\n                uint256 contractETHBalance = address(this).balance;\\n                if (contractETHBalance > 0) _taxWallet.transfer(contractETHBalance);\\n            }\\n        } else if (uniswapV2Pair == to && from == owner()) {\\n            _initBlock = block.number;\\n            _feeUnlocked = true;\\n        }\\n\\n        uint256 taxRate;\\n\\n        if (from != address(this) && to != address(this) && from != owner() && to != owner()) {\\n            //QQ fees\\n            if (to != address(_uniswapV2Router) && from == uniswapV2Pair) {\\n                taxRate = _launchBuyFee;\\n                if (_feeUnlocked) {\\n                    if (block.number > _initBlock + _launchDuration) {\\n                        delete _feeUnlocked;\\n                        if (_launchSellFee > sellTax) {\\n                            _launchSellFee = sellTax;\\n                        }\\n                        if (_launchBuyFee > buyTax) {\\n                            _launchBuyFee = buyTax;\\n                        }\\n                    } else if (block.number >= _initBlock) {\\n                        unchecked {\\n                            taxRate = _launchBuyFee\\n                                + (\\n                                    (\\n                                        (_launchDuration - (block.number - _initBlock))\\n                                            * ((_launchBuyFee * 3) - _launchBuyFee)\\n                                    ) / _launchDuration\\n                                );\\n                        }\\n                    }\\n                }\\n            }\\n            //QQ more fees\\n            else if (to == uniswapV2Pair && from != address(_uniswapV2Router)) {\\n                taxRate = _launchSellFee;\\n                if (_feeUnlocked) {\\n                    if (block.number > _initBlock + _launchDuration) {\\n                        delete _feeUnlocked;\\n                        if (_launchSellFee > sellTax) {\\n                            _launchSellFee = sellTax;\\n                        }\\n                        if (_launchBuyFee > buyTax) {\\n                            _launchBuyFee = buyTax;\\n                        }\\n                    } else if (block.number >= _initBlock) {\\n                        unchecked {\\n                            taxRate = _launchSellFee\\n                                + (\\n                                    (\\n                                        (_launchDuration - (block.number - _initBlock))\\n                                            * ((_launchSellFee * 3) - _launchSellFee)\\n                                    ) / _launchDuration\\n                                );\\n                        }\\n                    }\\n                }\\n            }\\n            if (taxRate > 75) taxRate = 75;\\n        }\\n        _tokenTransfer(from, to, amount, taxRate);\\n    }\\n\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\n        address[] memory path = new address[](2);\\n        path[1] = _uniswapV2Router.WETH();\\n        path[0] = address(this);\\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount, 0, path, address(this), block.timestamp\\n        );\\n    }\\n\\n    function _tokenTransfer(address sender, address recipient, uint256 tAmount, uint256 taxRate) private {\\n        unchecked {\\n            uint256 tTeam = (tAmount * taxRate) / 100;\\n            uint256 rAmount = tAmount * _rt;\\n            uint256 rTransferAmount = rAmount - tTeam * _rt;\\n\\n            if (_bal[sender] < rAmount) revert Amount();\\n\\n            _bal[sender] = _bal[sender] - rAmount;\\n            _bal[recipient] = _bal[recipient] + rTransferAmount;\\n            _bal[address(this)] = _bal[address(this)] + (tTeam * _rt);\\n\\n            emit Transfer(sender, recipient, tAmount - tTeam);\\n        }\\n    }\\n\\n    function removeLimit() public onlyOwner {\\n        limitInEffect = false;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/solady:ds-test/=lib/solady/lib/ds-test/src/\",\r\n      \"lib/solady:forge-std/=lib/solady/test/utils/forge-std/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Amount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "QQ", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}