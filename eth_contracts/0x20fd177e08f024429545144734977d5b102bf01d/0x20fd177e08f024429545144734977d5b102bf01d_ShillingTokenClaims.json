{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStakingForClaims.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0\\n// Copyright (c) 2022 unReal Accelerator, LLC (https://unrealaccelerator.io)\\npragma solidity ^0.8.9;\\n\\n/// @title IStakingForClaims\\n/// @author jason@unrealaccelerator.io\\n/// @notice Interface for getting count of claims\\n\\ninterface IStakingForClaims {\\n    function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/ShillingTokenClaims.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0\\n// Copyright (c) 2022 unReal Accelerator, LLC (https://unrealaccelerator.io)\\npragma solidity ^0.8.19;\\n\\n/**\\n * @title ShillingTokenClaims\\n * @dev A contract for managing claims of Shilling tokens from staking contracts.\\n * @author jason@unrealaccelerator.io\\n */\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IStakingForClaims.sol\\\";\\n\\ncontract ShillingTokenClaims is ReentrancyGuard, Ownable {\\n    IERC20 public tokenContract; // ERC20 token contract for Shilling tokens\\n    IStakingForClaims public stakingCOKContract; // Staking contract for COK tokens\\n    IStakingForClaims public stakingHCOKContract; // Staking contract for HCOK tokens\\n\\n    uint256 public ethPerThreeShillings = 0.22 ether; // Default eth amount for 3 shilling\\n\\n    // mapping to track claimed amounts per address\\n    mapping(address => uint256) public claimedAmountForCOK;\\n    mapping(address => uint256) public claimedAmountForHCOK;\\n\\n    ///////// Security\\n\\n    address public administrator; // Address with administrative privileges\\n    bool public claimAllowed; // Used to control claim events\\n    bool public purchaseAllowed; // Used to control shilling purchase events\\n\\n    ///////// Errors\\n\\n    error NotAuthorized(); // Error thrown when caller is not authorized\\n    error NoBalanceToWithdraw(); // Error thrown when attempting to withdraw with no balance\\n    error ClaimNotAllowed(); // Error thrown with attempting to claim but claiming is not allowed\\n    error InvalidNumberOfTokens();\\n    error PurchaseNotAllowed();\\n    error AddressHasNotEnoughClaims();\\n    error InsufficientTokens();\\n    error IncorrectAmountOfETH();\\n\\n    /////////  Events\\n\\n    event ClaimAllowed(bool indexed state);\\n    event PurchaseAllowed(bool indexed state);\\n    event Claimed(address indexed user, uint256 amount);\\n    event ClaimsPurchased(\\n        address indexed user,\\n        uint256 amount,\\n        uint256 totalEth\\n    );\\n\\n    ///////// Modifiers\\n\\n    /**\\n     * @dev Modifier to check for authorized roles (Owner or Administrator)\\n     */\\n    modifier onlyAuthorized() {\\n        validateAuthorized();\\n        _;\\n    }\\n\\n    function validateAuthorized() private view {\\n        if (_msgSender() != owner() && _msgSender() != administrator)\\n            revert NotAuthorized();\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the contract with required addresses.\\n     * @param tokenContract_ Address of the Shilling token contract.\\n     * @param stakingCOKContract_ Address of the staking contract for COK tokens.\\n     * @param stakingHCOKContract_ Address of the staking contract for HCOK tokens.\\n     * @param administrator_ Address with administrative privileges.\\n     */\\n    constructor(\\n        address tokenContract_,\\n        address stakingCOKContract_,\\n        address stakingHCOKContract_,\\n        address administrator_\\n    ) {\\n        tokenContract = IERC20(tokenContract_);\\n        stakingCOKContract = IStakingForClaims(stakingCOKContract_);\\n        stakingHCOKContract = IStakingForClaims(stakingHCOKContract_);\\n        administrator = administrator_;\\n    }\\n\\n    /**\\n     * @dev Fallback function to receive Ether.\\n     * This function is payable and allows the contract to receive ETH.\\n     */\\n    receive() external payable {}\\n\\n    /**\\n     * @dev Get the current supply of Shilling tokens held by the contract.\\n     * @return The balance of Shilling tokens held by the contract.\\n     */\\n    function shillingSupply() external view returns (uint256) {\\n        return uint256(tokenContract.balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * @dev Calculates the number of allowed claims based on the staked COK balance.\\n     * @param account The address of the account to check allowed claims for.\\n     * @return The number of allowed claims. Each staked COK token grants 1 claim, rounded down to the nearest multiple of 3.\\n     */\\n    function allowedClaimsWithCOK(\\n        address account\\n    ) public view returns (uint256) {\\n        uint256 balance = stakingCOKContract.balanceOf(account);\\n        // 1 claim per staked COK; but only in multiples of 3\\n        uint256 claims = (balance / 3) * 3;\\n        return claims;\\n    }\\n\\n    /**\\n     * @dev Calculates the number of remaining claims based on the staked COK balance.\\n     * @param account The address of the account to check remaining claims for.\\n     * @return The number of remaining claims. Each staked COK token grants 1 claim, rounded down to the nearest multiple of 3.\\n     */\\n    function remainingClaimsWithCOK(\\n        address account\\n    ) public view returns (uint256) {\\n        uint256 balance = allowedClaimsWithCOK(account) -\\n            claimedAmountForCOK[account];\\n        return balance;\\n    }\\n\\n    /**\\n     * @dev Get the number of allowed claims for an account using the stakingHCOKContract.\\n     * @param account The address of the account to check allowed claims for.\\n     * @return The number of allowed claims based on the staked HCOK balance.\\n     */\\n    function allowedClaimsWithHCOK(\\n        address account\\n    ) public view returns (uint256) {\\n        return (stakingHCOKContract.balanceOf(account) * 9);\\n    }\\n\\n    /**\\n     * @dev Calculates the number of remaining claims based on the staked HCOK balance.\\n     * @param account The address of the account to check remaining claims for.\\n     * @return The number of allowed remaining based on the staked HCOK balance.\\n     */\\n    function remainingClaimsWithHCOK(\\n        address account\\n    ) public view returns (uint256) {\\n        uint256 balance = allowedClaimsWithHCOK(account) -\\n            claimedAmountForHCOK[account];\\n        return balance;\\n    }\\n\\n    /**\\n     * @dev Allows an account to claim rewards using COK tokens.\\n     * The function checks if claiming is allowed, calculates the unclaimed amount based on the account's staked COK balance,\\n     * transfers the rewards to the account, and emits a `Claimed` event.\\n     * This function is non-reentrant.\\n     * @notice Only addresses with unclaimed rewards can execute this function.\\n     * @notice The contract must have sufficient token balance to cover the claimed rewards.\\n     * @notice Emits a `Claimed` event upon successful claim.\\n     */\\n    function claimWithCOK(uint256 numberOfShillings) external nonReentrant {\\n        // Get the unclaimed amount of rewards for the caller's account\\n        uint256 unclaimedAmount = remainingClaimsWithCOK(_msgSender());\\n\\n        _claim(unclaimedAmount, numberOfShillings);\\n\\n        claimedAmountForCOK[_msgSender()] =\\n            claimedAmountForCOK[_msgSender()] +\\n            numberOfShillings;\\n    }\\n\\n    /**\\n     * @dev Allows an account to claim rewards using HCOK tokens.\\n     * The function checks if claiming is allowed, calculates the unclaimed amount based on the account's staked HCOK balance,\\n     * transfers the rewards to the account, and emits a `Claimed` event.\\n     * This function is non-reentrant.\\n     * @notice Only addresses with unclaimed rewards can execute this function.\\n     * @notice The contract must have sufficient token balance to cover the claimed rewards.\\n     * @notice Emits a `Claimed` event upon successful claim.\\n     */\\n    function claimWithHCOK(uint256 numberOfShillings) external nonReentrant {\\n        // Get the unclaimed amount of rewards for the caller's account\\n        uint256 unclaimedAmount = remainingClaimsWithHCOK(_msgSender());\\n\\n        _claim(unclaimedAmount, numberOfShillings);\\n\\n        // Update the claimed amount for caller's address\\n        claimedAmountForHCOK[_msgSender()] =\\n            claimedAmountForHCOK[_msgSender()] +\\n            numberOfShillings;\\n    }\\n\\n    function _claim(uint256 unclaimedAmount, uint256 claimAmount) private {\\n        // Ensure claiming is allowed\\n        if (!claimAllowed) revert ClaimNotAllowed();\\n\\n        // Ensure the account has unclaimed rewards\\n        if (claimAmount <= 0 || claimAmount > unclaimedAmount)\\n            revert AddressHasNotEnoughClaims();\\n\\n        // Calculate the balance of the contract's token holdings\\n        uint256 balance = uint256(tokenContract.balanceOf(address(this)));\\n\\n        // Calculate the reward to be transferred to the account in wei\\n        uint256 rewardWei = claimAmount * 10 ** 18;\\n\\n        // Ensure the contract has sufficient tokens to cover the reward\\n        if (rewardWei > balance) revert InsufficientTokens();\\n\\n        // Transfer the reward tokens to the account\\n        tokenContract.transfer(_msgSender(), rewardWei);\\n        // Emit a Claimed event to indicate a successful claim\\n        emit Claimed(_msgSender(), claimAmount);\\n    }\\n\\n    /**\\n     * @dev Allows an account to purchase rewards using ETH.\\n     * The function checks if claiming is allowed, calculates the number of claims that can be purchased,\\n     * verifies that the number of claims is a multiple of 3, calculates the total ETH required,\\n     * transfers the ETH to the contract, and emits a `ClaimsPurchased` event.\\n     * This function is non-reentrant.\\n     * @notice Only addresses can purchase claims in multiples of 3.\\n     * @notice Emits a `ClaimsPurchased` event upon successful purchase.\\n     * @param numberOfShillings The number of claims to purchase (must be a multiple of 3).\\n     */\\n    function claimWithEth(\\n        uint256 numberOfShillings\\n    ) external payable nonReentrant {\\n        // Ensure claiming is allowed\\n        if (!purchaseAllowed) revert PurchaseNotAllowed();\\n\\n        // Verify that the number of claims is a multiple of 3\\n        if (numberOfShillings % 3 != 0 || numberOfShillings == 0)\\n            revert InvalidNumberOfTokens();\\n\\n        // Calculate the total ETH required for the claims\\n        uint256 totalEthRequired = (numberOfShillings / 3) *\\n            ethPerThreeShillings;\\n\\n        // Ensure the sent ETH matches the required amount\\n        if (msg.value != totalEthRequired) revert IncorrectAmountOfETH();\\n\\n        // Calculate the balance of the contract's token holdings\\n        uint256 balance = uint256(tokenContract.balanceOf(address(this)));\\n\\n        uint256 numberOfShillingsWei = numberOfShillings * 10 ** 18;\\n\\n        // Ensure the contract has sufficient tokens to cover the reward\\n        if (int256(numberOfShillingsWei) - int256(balance) > 0)\\n            revert InsufficientTokens();\\n\\n        // Transfer the Shillings to the account\\n        tokenContract.transfer(_msgSender(), uint256(numberOfShillingsWei));\\n\\n        // Emit a ClaimsPurchased event to indicate a successful purchase\\n        emit ClaimsPurchased(\\n            _msgSender(),\\n            numberOfShillingsWei,\\n            totalEthRequired\\n        );\\n    }\\n\\n    /**\\n     * @dev Activate/disable claiming\\n     * Only authorized addresses can call this function.\\n     */\\n    function setClaimAllowed(bool claimAllowed_) external onlyAuthorized {\\n        claimAllowed = claimAllowed_;\\n        emit ClaimAllowed(claimAllowed);\\n    }\\n\\n    /**\\n     * @dev Activate/disable purchasing\\n     * Only authorized addresses can call this function.\\n     */\\n    function setPurchaseAllowed(bool purchaseAllowed_) external onlyAuthorized {\\n        purchaseAllowed = purchaseAllowed_;\\n        emit PurchaseAllowed(purchaseAllowed);\\n    }\\n\\n    /**\\n     * @dev Set/update the token contract address\\n     * Only authorized addresses can call this function.\\n     */\\n    function setTokenContract(address tokenContract_) external onlyAuthorized {\\n        tokenContract = IERC20(tokenContract_);\\n    }\\n\\n    /**\\n     * @dev Set/update the COK contract address\\n     * Only authorized addresses can call this function.\\n     */\\n    function setStakingCOKContract(\\n        address stakingCOKContract_\\n    ) external onlyAuthorized {\\n        stakingCOKContract = IStakingForClaims(stakingCOKContract_);\\n    }\\n\\n    /**\\n     * @dev Set/update the HCOK contract address\\n     * Only authorized addresses can call this function.\\n     */\\n    function setStakingHCOKContract(\\n        address stakingHCOKContract_\\n    ) external onlyAuthorized {\\n        stakingHCOKContract = IStakingForClaims(stakingHCOKContract_);\\n    }\\n\\n    /**\\n     * @dev Set/update the eth required to claim 3 shillings\\n     * Amount must be in wei\\n     * Only authorized addresses can call this function.\\n     */\\n    function setEthPerThreeShillings(\\n        uint256 ethPerThreeShillings_\\n    ) external onlyAuthorized {\\n        ethPerThreeShillings = ethPerThreeShillings_;\\n    }\\n\\n    /**\\n     * @dev Admin function to withdraw unclaimed Shilling tokens after the claiming period.\\n     * Only authorized addresses can call this function.\\n     */\\n    function withdrawRemainingToken() external onlyAuthorized {\\n        uint256 amount = tokenContract.balanceOf(address(this));\\n        tokenContract.transfer(owner(), amount);\\n        delete amount;\\n    }\\n\\n    /**\\n     * @dev Admin function to withdraw ETH from the contract.\\n     * Only authorized addresses can call this function.\\n     */\\n    function withdraw() external onlyAuthorized {\\n        uint256 balance = address(this).balance;\\n        if (balance <= 0) revert NoBalanceToWithdraw();\\n\\n        address payable ownerAddress = payable(owner());\\n        ownerAddress.transfer(balance);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingCOKContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingHCOKContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"administrator_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressHasNotEnoughClaims\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClaimNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAmountOfETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNumberOfTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBalanceToWithdraw\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PurchaseNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"ClaimAllowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalEth\",\"type\":\"uint256\"}],\"name\":\"ClaimsPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"PurchaseAllowed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"administrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allowedClaimsWithCOK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"allowedClaimsWithHCOK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfShillings\",\"type\":\"uint256\"}],\"name\":\"claimWithCOK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfShillings\",\"type\":\"uint256\"}],\"name\":\"claimWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfShillings\",\"type\":\"uint256\"}],\"name\":\"claimWithHCOK\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmountForCOK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmountForHCOK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPerThreeShillings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchaseAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"remainingClaimsWithCOK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"remainingClaimsWithHCOK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"claimAllowed_\",\"type\":\"bool\"}],\"name\":\"setClaimAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethPerThreeShillings_\",\"type\":\"uint256\"}],\"name\":\"setEthPerThreeShillings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"purchaseAllowed_\",\"type\":\"bool\"}],\"name\":\"setPurchaseAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingCOKContract_\",\"type\":\"address\"}],\"name\":\"setStakingCOKContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingHCOKContract_\",\"type\":\"address\"}],\"name\":\"setStakingHCOKContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract_\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shillingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingCOKContract\",\"outputs\":[{\"internalType\":\"contract IStakingForClaims\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingHCOKContract\",\"outputs\":[{\"internalType\":\"contract IStakingForClaims\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRemainingToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ShillingTokenClaims", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000257ec7c98b375d71499ee24d65e08c605a69533a000000000000000000000000e19632693ec9ef5bb9ade9327b50ffca850e9f07000000000000000000000000955a1ad927dad15a9092557ccb7856ca6aee164d00000000000000000000000000795f917a5e77f7c33f5acc6d0970f7c300095e", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}