{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ModaCorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport './ModaConstants.sol';\\nimport './ModaPoolBase.sol';\\n\\n/**\\n * @title Moda Core Pool\\n *\\n * @notice Core pools represent permanent pools like MODA or MODA/ETH Pair pool,\\n *      core pools allow staking for arbitrary periods of time up to 1 year\\n *\\n * @dev See ModaPoolBase for more details\\n */\\ncontract ModaCorePool is ModaPoolBase {\\n\\t/// @dev Pool tokens value available in the pool;\\n\\t///      pool token examples are MODA (MODA core pool) or MODA/ETH pair (LP core pool)\\n\\t/// @dev For LP core pool this value doesn't count for MODA tokens received as Vault rewards\\n\\t///      while for MODA core pool it does count for such tokens as well\\n\\tuint256 public poolTokenReserve;\\n\\n\\t/**\\n\\t * @dev Creates/deploys an instance of the core pool\\n\\t *\\n\\t * @param _moda MODA ERC20 Token ModaERC20 address\\n\\t * @param _modaPoolFactory MODA Pool Factory Address\\n\\t * @param _modaPool MODA Pool Address or address(0) if this is the Moda pool.\\n\\t * @param _poolToken The token this pool uses.\\n\\t * @param _weight number representing a weight of the pool, actual weight fraction\\n\\t *      is calculated as that number divided by the total pools weight and doesn't exceed one\\n\\t * @param _startTimestamp The start time for this pool as an EVM timestamp (seconds since epoch)\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _moda,\\n\\t\\taddress _modaPoolFactory,\\n\\t\\taddress _modaPool,\\n\\t\\taddress _poolToken,\\n\\t\\tuint32 _weight,\\n\\t\\tuint256 _startTimestamp\\n\\t)\\n\\t\\tModaPoolBase(\\n\\t\\t\\t_moda,\\n\\t\\t\\t_modaPoolFactory,\\n\\t\\t\\t_modaPool,\\n\\t\\t\\t_poolToken,\\n\\t\\t\\t_weight,\\n\\t\\t\\t_startTimestamp\\n\\t\\t)\\n\\t{\\n\\t\\tpoolTokenReserve = 0;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Service function to calculate and pay pending vault and yield rewards to the sender\\n\\t *\\n\\t * @dev Internally executes similar function `_processRewards` from the parent smart contract\\n\\t *      to calculate and pay yield rewards; adds vault rewards processing\\n\\t *\\n\\t * @dev Can be executed by anyone at any time, but has an effect only when\\n\\t *      executed by deposit holder and when at least one block passes from the\\n\\t *      previous reward processing\\n\\t * @dev Executed internally when \\\"staking as a pool\\\" (`stakeAsPool`)\\n\\t * @dev When timing conditions are not met (executed too frequently, or after\\n\\t *      end block), function doesn't throw and exits silently\\n\\t */\\n\\tfunction processRewards() external override {\\n\\t\\t_processRewards(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executed by another pool (from the parent `ModaPoolBase` smart contract)\\n\\t *      as part of yield rewards processing logic (`ModaPoolBase._processRewards` function)\\n\\t * @dev Executed when pool is not an Moda pool - see `ModaPoolBase._processRewards`\\n\\t *\\n\\t * @param _staker an address which stakes (the yield reward)\\n\\t * @param _amount amount to be staked (yield reward amount)\\n\\t */\\n\\tfunction stakeAsPool(address _staker, uint256 _amount)\\n\\t\\texternal\\n\\t{\\n\\t\\trequire(modaPoolFactory.poolExists(msg.sender), 'pool is not registered');\\n\\n\\t\\tUser storage user = users[_staker];\\n\\t\\tif (user.tokenAmount > 0) {\\n\\t\\t\\t_processRewards(_staker);\\n\\t\\t}\\n\\n\\t\\tuint256 depositWeight = _amount * YEAR_STAKE_WEIGHT_MULTIPLIER;\\n\\t\\tDeposit memory newDeposit = Deposit({\\n\\t\\t\\ttokenAmount: _amount,\\n\\t\\t\\tlockedFrom: block.timestamp,\\n\\t\\t\\tlockedUntil: block.timestamp + rewardLockingPeriod,\\n\\t\\t\\tweight: depositWeight,\\n\\t\\t\\tisYield: true\\n\\t\\t});\\n\\t\\tuser.tokenAmount += _amount;\\n\\t\\tuser.totalWeight += depositWeight;\\n\\t\\tuser.deposits.push(newDeposit);\\n\\n\\t\\tusersLockingWeight += depositWeight;\\n\\n\\t\\t// update `poolTokenReserve` only if this is a LP Core Pool (stakeAsPool can be executed only for LP pool)\\n\\t\\tpoolTokenReserve += _amount;\\n\\n\\t\\t// Tell the world we've done this\\n\\t\\temit Staked(_staker, _staker, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ModaPoolBase\\n\\t *\\n\\t * @dev Additionally to the parent smart contract,\\n\\t *      and updates (increases) pool token reserve (pool tokens value available in the pool)\\n\\t */\\n\\tfunction _stake(\\n\\t\\taddress _staker,\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _lockUntil,\\n\\t\\tbool _isYield\\n\\t) internal override {\\n\\t\\tsuper._stake(_staker, _amount, _lockUntil, _isYield);\\n\\t\\tpoolTokenReserve += _amount;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ModaPoolBase\\n\\t *\\n\\t * @dev Additionally to the parent smart contract,\\n\\t *      and updates (decreases) pool token reserve\\n\\t *      (pool tokens value available in the pool)\\n\\t */\\n\\tfunction _unstake(\\n\\t\\taddress _staker,\\n\\t\\tuint256 _depositId,\\n\\t\\tuint256 _amount\\n\\t) internal override {\\n\\t\\tUser storage user = users[_staker];\\n\\t\\tDeposit memory stakeDeposit = user.deposits[_depositId];\\n\\t\\trequire(\\n\\t\\t\\tblock.timestamp > stakeDeposit.lockedUntil,\\n\\t\\t\\t'deposit not yet unlocked'\\n\\t\\t);\\n\\t\\tpoolTokenReserve -= _amount;\\n\\t\\tsuper._unstake(_staker, _depositId, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ModaPoolBase\\n\\t *\\n\\t * @dev Additionally to the parent smart contract,\\n\\t *      and for MODA pool updates (increases) pool token reserve\\n\\t *      (pool tokens value available in the pool)\\n\\t */\\n\\tfunction _processRewards(address _staker) internal override returns (uint256 rewards) {\\n\\t\\trewards = super._processRewards(_staker);\\n\\n\\t\\t// update `poolTokenReserve` only if this is a MODA Core Pool\\n\\t\\tif (poolToken == moda) {\\n\\t\\t\\tpoolTokenReserve += rewards;\\n\\t\\t}\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/ModaConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nlibrary ModaConstants {\\n\\t/**\\n\\t * @dev Smart contract unique identifier, a random number\\n\\t * @dev Should be regenerated each time smart contact source code is changed\\n\\t *      and changes smart contract itself is to be redeployed\\n\\t * @dev Generated using https://www.random.org/bytes/\\n\\t */\\n\\tuint256 public constant TOKEN_UID =\\n\\t\\t0xc8de2a18ae1c61538a5f880f5c8eb7ff85aa3996c4363a27b1c6112a190e65b4;\\n\\n\\t/**\\n\\t * @dev Smart contract unique identifier, a random number\\n\\t * @dev Should be regenerated each time smart contact source code is changed\\n\\t *      and changes smart contract itself is to be redeployed\\n\\t * @dev Generated using https://www.random.org/bytes/\\n\\t */\\n\\tuint256 public constant ESCROWTOKEN_UID =\\n\\t\\t0x0a9a93ba9d22fa5ed507ff32440b8750c8951e4864438c8afc02be22ad238ebf;\\n\\n\\t/**\\n\\t * @dev Smart contract unique identifier, a random number\\n\\t * @dev Should be regenerated each time smart contact source code is changed\\n\\t *      and changes smart contract itself is to be redeployed\\n\\t * @dev Generated using https://www.random.org/bytes/\\n\\t */\\n\\tuint256 public constant POOL_UID =\\n\\t\\t0x8ca5f5bb5e4f02345a019a993ce37018dd549b22e88027f4f5c1f614ef6fb3c0;\\n\\n\\t/**\\n\\t * @dev Smart contract unique identifier, a random number\\n\\t * @dev Should be regenerated each time smart contact source code is changed\\n\\t *      and changes smart contract itself is to be redeployed\\n\\t * @dev Generated using https://www.random.org/bytes/\\n\\t */\\n\\tuint256 public constant FACTORY_UID =\\n\\t\\t0x871acfd60315c19d4e011a9b2fe668860c17caf2dea3882043e8270ec8b5696c;\\n\\n\\t/**\\n\\t * @notice Upgrader is responsible for managing future versions\\n\\t *         of the contract.\\n\\t */\\n\\tbytes32 public constant ROLE_UPGRADER = '\\\\x00\\\\x0A\\\\x00\\\\x00';\\n\\n\\t/**\\n\\t * @notice Token creator is responsible for creating (minting)\\n\\t *      tokens to an arbitrary address\\n\\t * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\n\\t *      (calling `mint` function)\\n\\t */\\n\\tbytes32 public constant ROLE_TOKEN_CREATOR = '\\\\x00\\\\x0B\\\\x00\\\\x00';\\n}\\n\"\r\n    },\r\n    \"contracts/ModaPoolBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './IPool.sol';\\nimport './ICorePool.sol';\\nimport './ModaConstants.sol';\\nimport './ModaPoolFactory.sol';\\n\\n/**\\n * @title Moda Pool Base\\n * @notice An abstract contract containing common logic for any MODA pool,\\n *      be it core pool (permanent pool like MODA/ETH or MODA core pool) or something else.\\n * @dev Deployment and initialization.\\n *      Any pool deployed must have 3 token instance addresses defined on deployment:\\n *          - MODA token address\\n *          - pool token address, it can be MODA token address, MODA/ETH pair address, and others\\n */\\nabstract contract ModaPoolBase is Ownable, IPool, ModaAware, ReentrancyGuard {\\n\\t// @dev POOL_UID defined to add another check to ensure compliance with the contract.\\n\\tfunction POOL_UID() public pure returns (uint256) {\\n\\t\\treturn ModaConstants.POOL_UID;\\n\\t}\\n\\n\\t// @dev modaPool MODA ERC20 Liquidity Pool contract address.\\n\\t// @dev This value is address(0) for the default MODA Core Pool.\\n\\t// @dev This value MUST be provided for any pool created which is not a MODA pool.\\n\\t// @dev This is used in the case where poolToken != moda.\\n\\t//      The use case relates to shadowing Liquidity Pool stakes\\n\\t//      by allowing people to store the LP tokens here to gain\\n\\t//      further MODA rewards. I'm not sure it's both. (dex 2021.09.16)\\n\\taddress immutable modaPool;\\n\\n\\t/// @dev Data structure representing token holder using a pool\\n\\tstruct User {\\n\\t\\t// @dev Total staked amount\\n\\t\\tuint256 tokenAmount;\\n\\t\\t// @dev Total weight\\n\\t\\tuint256 totalWeight;\\n\\t\\t// @dev An array of holder's deposits\\n\\t\\tDeposit[] deposits;\\n\\t\\t// @dev timestamp of when the user last processed rewards\\n\\t\\tuint256 lastProcessedRewards;\\n\\t}\\n\\n\\t/// @dev Token holder storage, maps token holder address to their data record\\n\\tmapping(address => User) public users;\\n\\n\\t/// @dev Link to the pool token instance, for example MODA or MODA/ETH pair\\n\\taddress public immutable override poolToken;\\n\\n\\t/// @dev Link to the pool factory instance that manages weights\\n\\tModaPoolFactory public immutable modaPoolFactory;\\n\\n\\t/// @dev Pool weight, 200 for MODA pool or 800 for MODA/ETH\\n\\tuint32 public override weight;\\n\\n\\t/// @dev Used to calculate yield rewards, keeps track of the tokens weight locked in staking\\n\\tuint256 public override usersLockingWeight;\\n\\n\\t/// @dev Used to calculate yield rewards, keeps track of when the pool started\\n\\tuint256 public immutable override startTimestamp;\\n\\n\\t/// @dev Reward locking period, added to block.timestamp when rewards are locked up in the pool\\n\\t///      Can be changed by the contract owner.\\n\\tuint public rewardLockingPeriod = 150 days;\\n\\n\\t/**\\n\\t * @dev Stake weight is proportional to deposit amount and time locked, precisely\\n\\t *      \\\"deposit amount wei multiplied by (fraction of the year locked plus one)\\\"\\n\\t * @dev To avoid significant precision loss due to multiplication by \\\"fraction of the year\\\" [0, 1],\\n\\t *      weight is stored multiplied by 1e6 constant, as an integer\\n\\t * @dev Corner case 1: if time locked is zero, weight is deposit amount multiplied by 1e6\\n\\t * @dev Corner case 2: if time locked is one year, fraction of the year locked is one, and\\n\\t *      weight is a deposit amount multiplied by 2 * 1e6\\n\\t */\\n\\tuint256 internal constant WEIGHT_MULTIPLIER = 1e6;\\n\\n\\t/**\\n\\t * @dev When we know beforehand that staking is done for a year, and fraction of the year locked is one,\\n\\t *      we use simplified calculation and use the following constant instead previous one\\n\\t */\\n\\tuint256 internal constant YEAR_STAKE_WEIGHT_MULTIPLIER = 2 * WEIGHT_MULTIPLIER;\\n\\n\\t/**\\n\\t * @dev Fired in _stake() and stake()\\n\\t *\\n\\t * @param _by an address which performed an operation, usually token holder\\n\\t * @param _from token holder address, the tokens will be returned to that address\\n\\t * @param amount amount of tokens staked\\n\\t */\\n\\tevent Staked(address indexed _by, address indexed _from, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Fired in _updateStakeLock() and updateStakeLock()\\n\\t *\\n\\t * @param _by an address which performed an operation\\n\\t * @param depositId updated deposit ID\\n\\t * @param lockedFrom deposit locked from value\\n\\t * @param lockedUntil updated deposit locked until value\\n\\t */\\n\\tevent StakeLockUpdated(address indexed _by, uint256 depositId, uint256 lockedFrom, uint256 lockedUntil);\\n\\n\\t/**\\n\\t * @dev Fired in _unstake() and unstake()\\n\\t *\\n\\t * @param _by an address which performed an operation, usually token holder\\n\\t * @param _to an address which received the unstaked tokens, usually token holder\\n\\t * @param amount amount of tokens unstaked\\n\\t */\\n\\tevent Unstaked(address indexed _by, address indexed _to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Fired in _processRewards(), processRewards() and dependent functions (stake, unstake, etc.)\\n\\t *\\n\\t * @param _by an address which performed an operation\\n\\t * @param _to an address which claimed the yield reward\\n\\t * @param amount amount of yield paid\\n\\t */\\n\\tevent YieldClaimed(address indexed _by, address indexed _to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Fired in setWeight()\\n\\t *\\n\\t * @param _by an address which performed an operation, always a factory\\n\\t * @param _fromVal old pool weight value\\n\\t * @param _toVal new pool weight value\\n\\t */\\n\\tevent PoolWeightUpdated(address indexed _by, uint32 _fromVal, uint32 _toVal);\\n\\n\\t/**\\n\\t * @dev Fired whenever the owner sets the reward locking period. Existing stakes\\n\\t *      are not affected by this change, as it's queried and added on lock up.\\n\\t *\\n\\t * @param _from the previous reward locking period in seconds\\n\\t * @param _to the new reward locking period in seconds\\n\\t */\\n\\tevent RewardLockingPeriodUpdated(uint _from, uint _to);\\n\\n\\t/**\\n\\t * @dev Overridden in sub-contracts to construct the pool\\n\\t *\\n\\t * @param _moda MODA ERC20 Token ModaERC20 address\\n\\t * @param _modaPoolFactory MODA Pool Factory Address\\n\\t * @param _modaPool MODA ERC20 Liquidity Pool contract address\\n\\t * @param _poolToken token the pool operates on, for example MODA or MODA/ETH pair\\n\\t * @param _weight number representing a weight of the pool, actual weight fraction\\n\\t *      is calculated as that number divided by the total pools weight and doesn't exceed one\\n\\t * @param _startTimestamp timestamp that pool should start from\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _moda,\\n\\t\\taddress _modaPoolFactory,\\n\\t\\taddress _modaPool,\\n\\t\\taddress _poolToken,\\n\\t\\tuint32 _weight,\\n\\t\\tuint256 _startTimestamp\\n\\t) ModaAware(_moda) {\\n\\t\\trequire(_poolToken != address(0), 'pool token address not set');\\n\\t\\trequire(_modaPoolFactory != address(0), 'pool factory address not set');\\n\\t\\trequire(_weight > 0, 'pool weight not set');\\n\\t\\trequire(_startTimestamp >= block.timestamp, 'start already passed');\\n\\t\\trequire(\\n\\t\\t\\t_startTimestamp < ModaPoolFactory(_modaPoolFactory).endTimestamp(),\\n\\t\\t\\t'start too late compared to factory'\\n\\t\\t);\\n\\t\\trequire(\\n\\t\\t\\t((_poolToken == _moda ? 1 : 0) ^ (_modaPool != address(0) ? 1 : 0)) == 1,\\n\\t\\t\\t'Either a MODA pool or manage external tokens, never both'\\n\\t\\t);\\n\\n\\t\\trequire(Token(_moda).TOKEN_UID() == ModaConstants.TOKEN_UID, 'Moda TOKEN_UID invalid');\\n\\t\\trequire(\\n\\t\\t\\tModaPoolFactory(_modaPoolFactory).FACTORY_UID() == ModaConstants.FACTORY_UID,\\n\\t\\t\\t'Moda FACTORY_UID invalid'\\n\\t\\t);\\n\\t\\tif (_modaPool != address(0)) {\\n\\t\\t\\trequire(ModaPoolBase(_modaPool).POOL_UID() == ModaConstants.POOL_UID, 'Moda POOL_UID invalid');\\n\\t\\t}\\n\\n\\t\\tmodaPool = _modaPool;\\n\\t\\tmodaPoolFactory = ModaPoolFactory(_modaPoolFactory);\\n\\t\\tpoolToken = _poolToken;\\n\\t\\tweight = _weight;\\n\\t\\tstartTimestamp = _startTimestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates current yield rewards value available for address specified\\n\\t * @param _staker an address to calculate yield rewards value for\\n\\t * @return calculated yield reward value for the given address\\n\\t */\\n\\tfunction pendingYieldRewards(address _staker) public view override returns (uint256) {\\n\\t\\tif (block.timestamp < startTimestamp) return 0;\\n\\t\\tif (usersLockingWeight == 0) return 0;\\n\\n\\t\\tuint256 factoryEnd = modaPoolFactory.endTimestamp();\\n\\t\\tuint256 endOfTimeframe = block.timestamp > factoryEnd ? factoryEnd : block.timestamp;\\n\\n\\t\\tUser memory user = users[_staker];\\n\\t\\tif (user.lastProcessedRewards > endOfTimeframe) return 0;\\n\\n\\t\\tuint256 depositCount = user.deposits.length;\\n\\t\\tif (depositCount < 1) return 0;\\n\\n\\t\\tDeposit memory stakeDeposit = user.deposits[depositCount - 1];\\n\\t\\tuint256 lastRewards = user.lastProcessedRewards > 0 ? user.lastProcessedRewards : stakeDeposit.lockedFrom;\\n\\n\\t\\tuint256 timeElapsedSinceLastReward = endOfTimeframe < startTimestamp\\n\\t\\t\\t? endOfTimeframe - startTimestamp\\n\\t\\t\\t: endOfTimeframe - lastRewards;\\n\\n\\t\\tuint256 modaPerSecond = modaPoolFactory.modaPerSecondAt(endOfTimeframe);\\n\\t\\tuint256 allPoolsTotalSinceLastReward = modaPerSecond * timeElapsedSinceLastReward;\\n\\t\\tuint256 poolRewards = (allPoolsTotalSinceLastReward * weight) / modaPoolFactory.totalWeight();\\n\\n\\t\\treturn (poolRewards * user.totalWeight) / usersLockingWeight;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns total staked token balance for the given address\\n\\t *\\n\\t * @param _user an address to query balance for\\n\\t * @return total staked token balance\\n\\t */\\n\\tfunction balanceOf(address _user) external view override returns (uint256) {\\n\\t\\treturn users[_user].tokenAmount;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns information on the given deposit for the given address\\n\\t * @dev See getDepositsLength\\n\\t * @param _user an address to query deposit for\\n\\t * @param _depositId zero-indexed deposit ID for the address specified\\n\\t * @return deposit info as Deposit structure\\n\\t */\\n\\tfunction getDeposit(address _user, uint256 _depositId) external view override returns (Deposit memory) {\\n\\t\\treturn users[_user].deposits[_depositId];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Returns number of deposits for the given address. Allows iteration over deposits.\\n\\t * @dev See getDeposit\\n\\t * @param _user an address to query deposit length for\\n\\t * @return number of deposits for the given address\\n\\t */\\n\\tfunction getDepositsLength(address _user) external view override returns (uint256) {\\n\\t\\treturn users[_user].deposits.length;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Stakes specified amount of tokens for the specified amount of time,\\n\\t *      and pays pending yield rewards if any\\n\\t * @dev Requires amount to stake to be greater than zero\\n\\t * @param _amount amount of tokens to stake\\n\\t * @param _lockUntil stake period as unix timestamp; zero means no locking\\n\\t */\\n\\tfunction stake(uint256 _amount, uint256 _lockUntil) external override {\\n\\t\\t_stake(msg.sender, _amount, _lockUntil, false);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Un-stakes specified amount of tokens, and pays pending yield rewards if any\\n\\t * @dev Requires amount to unstake to be greater than zero\\n\\t * @param _depositId deposit ID to unstake from, zero-indexed\\n\\t * @param _amount amount of tokens to unstake\\n\\t */\\n\\tfunction unstake(uint256 _depositId, uint256 _amount) external override {\\n\\t\\t_unstake(msg.sender, _depositId, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Extends locking period for a given deposit\\n\\t * @dev Requires new lockedUntil value to be:\\n\\t *      higher than the current one, and\\n\\t *      in the future, but\\n\\t *      no more than 1 year in the future\\n\\t * @param depositId updated deposit ID\\n\\t * @param lockedUntil updated deposit locked until value\\n\\t */\\n\\tfunction updateStakeLock(uint256 depositId, uint256 lockedUntil) external {\\n\\t\\t_processRewards(msg.sender);\\n\\t\\t_updateStakeLock(msg.sender, depositId, lockedUntil);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Service function to calculate and pay pending yield rewards to the sender\\n\\t * @dev Can be executed by anyone at any time, but has an effect only when\\n\\t *      executed by deposit holder and when at least one block passes from the\\n\\t *      previous reward processing\\n\\t * @dev When timing conditions are not met (executed too frequently, or after\\n\\t *      end block), function doesn't throw and exits silently\\n\\t */\\n\\tfunction processRewards() external virtual override {\\n\\t\\t_processRewards(msg.sender);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executed by the factory to modify pool weight; the factory is expected\\n\\t *      to keep track of the total pools weight when updating\\n\\t * @dev Set weight to zero to disable the pool\\n\\t * @param _weight new weight to set for the pool\\n\\t */\\n\\tfunction setWeight(uint32 _weight) external override {\\n\\t\\trequire(msg.sender == address(modaPoolFactory), 'Access denied: factory only');\\n\\n\\t\\tuint32 oldWeight = weight;\\n\\t\\tweight = _weight;\\n\\n\\t\\temit PoolWeightUpdated(msg.sender, oldWeight, weight);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used internally, mostly by children implementations, see stake()\\n\\t * @param _staker an address which stakes tokens and which will receive them back\\n\\t * @param _amount amount of tokens to stake\\n\\t * @param _lockUntil stake period as unix timestamp; zero means no locking\\n\\t * @param _isYield a flag indicating if that stake is created to store yield reward\\n\\t *      from the previously unstaked stake\\n\\t */\\n\\tfunction _stake(address _staker, uint256 _amount, uint256 _lockUntil, bool _isYield) internal virtual {\\n\\t\\trequire(_amount > 0, 'zero amount');\\n\\t\\trequire(block.timestamp >= startTimestamp, 'pool not active');\\n\\t\\trequire(\\n\\t\\t\\t_lockUntil == 0 || (_lockUntil > block.timestamp && _lockUntil - block.timestamp <= 365 days),\\n\\t\\t\\t'invalid lock interval'\\n\\t\\t);\\n\\n\\t\\tUser storage user = users[_staker];\\n\\t\\tif (user.tokenAmount > 0) {\\n\\t\\t\\t_processRewards(_staker);\\n\\t\\t}\\n\\n\\t\\tuint256 previousBalance = IERC20(poolToken).balanceOf(address(this));\\n\\t\\ttransferPoolTokenFrom(address(msg.sender), address(this), _amount);\\n\\t\\t// Note: some tokens may get burnt here if the token contract\\n\\t\\t// withholds fees on transfers. We must re-fetch the balance. Usually\\n\\t\\t// this is just the difference: `previousBalance - _amount`\\n\\t\\tuint256 newBalance = IERC20(poolToken).balanceOf(address(this));\\n\\t\\t// calculate real amount taking into account deflation\\n\\t\\tuint256 addedAmount = newBalance - previousBalance;\\n\\n\\t\\t// set the `lockFrom` and `lockUntil` taking into account that\\n\\t\\t// zero value for `_lockUntil` means \\\"no locking\\\" and leads to zero values\\n\\t\\t// for both `lockFrom` and `lockUntil`\\n\\t\\tuint256 lockFrom = block.timestamp;\\n\\t\\tuint256 lockUntil = _lockUntil;\\n\\n\\t\\t// Stake weight rewards formula for locking\\n\\t\\tuint256 stakeWeight = lockUntil == 0\\n\\t\\t\\t? WEIGHT_MULTIPLIER * addedAmount\\n\\t\\t\\t: ((WEIGHT_MULTIPLIER * (lockUntil - lockFrom)) / 365 days + WEIGHT_MULTIPLIER) * addedAmount;\\n\\n\\t\\trequire(stakeWeight > 0, 'Stake weight is zero');\\n\\n\\t\\tDeposit memory deposit = Deposit({\\n\\t\\t\\ttokenAmount: addedAmount,\\n\\t\\t\\tweight: stakeWeight,\\n\\t\\t\\tlockedFrom: lockFrom,\\n\\t\\t\\tlockedUntil: lockUntil,\\n\\t\\t\\tisYield: _isYield\\n\\t\\t});\\n\\t\\tuser.deposits.push(deposit);\\n\\n\\t\\tuser.tokenAmount += addedAmount;\\n\\t\\tuser.totalWeight += stakeWeight;\\n\\n\\t\\tusersLockingWeight += stakeWeight;\\n\\n\\t\\temit Staked(msg.sender, _staker, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used internally, mostly by children implementations, see unstake()\\n\\t * @param _staker an address which un-stakes tokens (which previously staked them)\\n\\t * @param _depositId deposit ID to unstake from, zero-indexed\\n\\t * @param _amount amount of tokens to unstake\\n\\t */\\n\\tfunction _unstake(address _staker, uint256 _depositId, uint256 _amount) internal virtual {\\n\\t\\trequire(_amount > 0, 'zero amount');\\n\\n\\t\\tUser storage user = users[_staker];\\n\\t\\tDeposit storage stakeDeposit = user.deposits[_depositId];\\n\\t\\tbool isYield = stakeDeposit.isYield;\\n\\n\\t\\trequire(stakeDeposit.tokenAmount >= _amount, 'amount exceeds stake');\\n\\n\\t\\t_processRewards(_staker);\\n\\n\\t\\tuint256 previousWeight = stakeDeposit.weight;\\n\\t\\tuint256 newWeight = stakeDeposit.lockedUntil == 0\\n\\t\\t\\t? WEIGHT_MULTIPLIER * (stakeDeposit.tokenAmount - _amount)\\n\\t\\t\\t: ((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) / 365 days + 1) *\\n\\t\\t\\t\\t(WEIGHT_MULTIPLIER * (stakeDeposit.tokenAmount - _amount));\\n\\n\\t\\tif (stakeDeposit.tokenAmount - _amount == 0) {\\n\\t\\t\\tdelete user.deposits[_depositId];\\n\\t\\t} else {\\n\\t\\t\\tstakeDeposit.tokenAmount -= _amount;\\n\\t\\t\\tstakeDeposit.weight = newWeight;\\n\\t\\t}\\n\\n\\t\\tuser.tokenAmount -= _amount;\\n\\t\\tuser.totalWeight = user.totalWeight - previousWeight + newWeight;\\n\\n\\t\\tusersLockingWeight = usersLockingWeight - previousWeight + newWeight;\\n\\n\\t\\tif (isYield) {\\n\\t\\t\\tmodaPoolFactory.mintYieldTo(msg.sender, _amount);\\n\\t\\t} else {\\n\\t\\t\\ttransferPoolToken(msg.sender, _amount);\\n\\t\\t}\\n\\n\\t\\temit Unstaked(msg.sender, _staker, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Used internally, mostly by children implementations, see processRewards()\\n\\t * @param _staker an address which receives the reward (which has staked some tokens earlier)\\n\\t * @return pendingYield the rewards calculated and optionally re-staked\\n\\t */\\n\\tfunction _processRewards(address _staker) internal virtual returns (uint256 pendingYield) {\\n\\t\\tpendingYield = pendingYieldRewards(_staker);\\n\\t\\tif (pendingYield == 0) return 0;\\n\\n\\t\\tUser storage user = users[_staker];\\n\\t\\tuser.lastProcessedRewards = block.timestamp;\\n\\n\\t\\tif (poolToken == moda) {\\n\\t\\t\\tuint256 depositWeight = pendingYield * YEAR_STAKE_WEIGHT_MULTIPLIER;\\n\\n\\t\\t\\tDeposit memory newDeposit = Deposit({\\n\\t\\t\\t\\ttokenAmount: pendingYield,\\n\\t\\t\\t\\tlockedFrom: block.timestamp,\\n\\t\\t\\t\\tlockedUntil: block.timestamp + rewardLockingPeriod,\\n\\t\\t\\t\\tweight: depositWeight,\\n\\t\\t\\t\\tisYield: true\\n\\t\\t\\t});\\n\\t\\t\\tuser.deposits.push(newDeposit);\\n\\n\\t\\t\\tuser.tokenAmount += pendingYield;\\n\\t\\t\\tuser.totalWeight += depositWeight;\\n\\n\\t\\t\\tusersLockingWeight += depositWeight;\\n\\t\\t} else {\\n\\t\\t\\trequire(modaPool != address(0), 'modaPool address is zero');\\n\\n\\t\\t\\tICorePool(modaPool).stakeAsPool(_staker, pendingYield);\\n\\t\\t}\\n\\n\\t\\temit YieldClaimed(msg.sender, _staker, pendingYield);\\n\\t}\\n\\n\\t/**\\n\\t * @dev See updateStakeLock()\\n\\t * @param _staker an address to update stake lock\\n\\t * @param _depositId updated deposit ID\\n\\t * @param _lockedUntil updated deposit locked until value\\n\\t */\\n\\tfunction _updateStakeLock(address _staker, uint256 _depositId, uint256 _lockedUntil) internal {\\n\\t\\trequire(_lockedUntil > block.timestamp, 'lock should be in the future');\\n\\n\\t\\tUser storage user = users[_staker];\\n\\t\\tDeposit storage stakeDeposit = user.deposits[_depositId];\\n\\t\\trequire(_lockedUntil > stakeDeposit.lockedUntil, 'invalid new lock');\\n\\n\\t\\tif (stakeDeposit.lockedFrom == 0) {\\n\\t\\t\\trequire(_lockedUntil - block.timestamp <= 365 days, 'max lock period is 365 days');\\n\\t\\t\\tstakeDeposit.lockedFrom = block.timestamp;\\n\\t\\t} else {\\n\\t\\t\\trequire(_lockedUntil - stakeDeposit.lockedFrom <= 365 days, 'max lock period is 365 days');\\n\\t\\t}\\n\\n\\t\\tstakeDeposit.lockedUntil = _lockedUntil;\\n\\t\\tuint256 newWeight = (((stakeDeposit.lockedUntil - stakeDeposit.lockedFrom) * WEIGHT_MULTIPLIER) /\\n\\t\\t\\t365 days +\\n\\t\\t\\tWEIGHT_MULTIPLIER) * stakeDeposit.tokenAmount;\\n\\n\\t\\tuint256 previousWeight = stakeDeposit.weight;\\n\\t\\tstakeDeposit.weight = newWeight;\\n\\n\\t\\tuser.totalWeight = user.totalWeight - previousWeight + newWeight;\\n\\t\\tusersLockingWeight = usersLockingWeight - previousWeight + newWeight;\\n\\n\\t\\temit StakeLockUpdated(_staker, _depositId, stakeDeposit.lockedFrom, _lockedUntil);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes SafeERC20.safeTransfer on a pool token\\n\\t * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n\\t */\\n\\tfunction transferPoolToken(address _to, uint256 _value) internal nonReentrant {\\n\\t\\tSafeERC20.safeTransfer(IERC20(poolToken), _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes SafeERC20.safeTransferFrom on a pool token\\n\\t * @dev Reentrancy safety enforced via `ReentrancyGuard.nonReentrant`\\n\\t */\\n\\tfunction transferPoolTokenFrom(address _from, address _to, uint256 _value) internal nonReentrant {\\n\\t\\tSafeERC20.safeTransferFrom(IERC20(poolToken), _from, _to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Allows the owner to update the reward locking period\\n\\t */\\n\\tfunction setRewardLockingPeriod(uint newRewardLockingPeriod) external override onlyOwner {\\n\\t\\tuint oldRewardLockingPeriod = rewardLockingPeriod;\\n\\t\\trewardLockingPeriod = newRewardLockingPeriod;\\n\\n\\t\\temit RewardLockingPeriodUpdated(oldRewardLockingPeriod, rewardLockingPeriod);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Here because of multiple inheritance, we have to override.\\n\\t */\\n\\tfunction transferOwnership(address newOwner) public virtual override(IPool, Ownable) onlyOwner {\\n\\t\\trequire(newOwner != address(0), 'Ownable: new owner is the zero address');\\n\\t\\t_transferOwnership(newOwner);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity =0.8.6;\\n\\nimport './ILinkedToMODA.sol';\\n\\n/**\\n * @title Moda Pool\\n *\\n * @notice An abstraction representing a pool, see ModaPoolBase for details\\n *\\n * @author Pedro Bergamini, reviewed by Basil Gorin\\n */\\ninterface IPool is ILinkedToMODA {\\n\\t/**\\n\\t * @dev Deposit is a key data structure used in staking,\\n\\t *      it represents a unit of stake with its amount, weight and term (time interval)\\n\\t */\\n\\tstruct Deposit {\\n\\t\\t// @dev token amount staked\\n\\t\\tuint256 tokenAmount;\\n\\t\\t// @dev stake weight\\n\\t\\tuint256 weight;\\n\\t\\t// @dev locking period - from\\n\\t\\tuint256 lockedFrom;\\n\\t\\t// @dev locking period - until\\n\\t\\tuint256 lockedUntil;\\n\\t\\t// @dev indicates if the stake was created as a yield reward\\n\\t\\tbool isYield;\\n\\t}\\n\\n\\t// for the rest of the functions see Soldoc in ModaPoolBase\\n\\n\\tfunction poolToken() external view returns (address);\\n\\n\\tfunction weight() external view returns (uint32);\\n\\n\\tfunction usersLockingWeight() external view returns (uint256);\\n\\n\\tfunction startTimestamp() external view returns (uint256);\\n\\n\\tfunction pendingYieldRewards(address _user) external view returns (uint256);\\n\\n\\tfunction balanceOf(address _user) external view returns (uint256);\\n\\n\\tfunction getDeposit(address _user, uint256 _depositId) external view returns (Deposit memory);\\n\\n\\tfunction getDepositsLength(address _user) external view returns (uint256);\\n\\n\\tfunction stake(\\n\\t\\tuint256 _amount,\\n\\t\\tuint256 _lockedUntil\\n\\t) external;\\n\\n\\tfunction unstake(\\n\\t\\tuint256 _depositId,\\n\\t\\tuint256 _amount\\n\\t) external;\\n\\n\\tfunction processRewards() external;\\n\\n\\tfunction setWeight(uint32 _weight) external;\\n\\n\\tfunction setRewardLockingPeriod(uint newRewardLockingPeriod) external;\\n\\n\\tfunction transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ICorePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6;\\n\\nimport './IPool.sol';\\n\\ninterface ICorePool is IPool {\\n\\tfunction vaultRewardsPerToken() external view returns (uint256);\\n\\n\\tfunction poolTokenReserve() external view returns (uint256);\\n\\n\\tfunction stakeAsPool(address _staker, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/ModaPoolFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './IPool.sol';\\nimport './ModaAware.sol';\\nimport './ModaCorePool.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport 'abdk-libraries-solidity/ABDKMath64x64.sol';\\n\\n/**\\n * @title Moda Pool Factory\\n *\\n * @notice Moda Pool Factory manages Moda Yield farming pools, provides a single\\n *      public interface to access the pools, provides an interface for the pools\\n *      to mint yield rewards, access pool-related info, update weights, etc.\\n *\\n * @notice The factory is authorized (via its owner) to register new pools, change weights\\n *      of the existing pools, removing the pools (by changing their weights to zero)\\n *\\n * @dev The factory requires ROLE_TOKEN_CREATOR permission on the Moda token to mint yield\\n *      (see `mintYieldTo` function)\\n *\\n * @author Kevin Brown, based on Illuvium Pool Factory Contract by Pedro Bergamini, reviewed by Basil Gorin\\n */\\ncontract ModaPoolFactory is Ownable, ModaAware {\\n\\t// @dev FACTORY_UID defined to add another check to ensure compliance with the contract.\\n\\tfunction FACTORY_UID() external pure returns (uint256) {\\n\\t\\treturn ModaConstants.FACTORY_UID;\\n\\t}\\n\\n\\t/// @dev Auxiliary data structure used only in getPoolData() view function\\n\\tstruct PoolData {\\n\\t\\t// @dev pool token address (like Moda, or an LP token)\\n\\t\\taddress poolToken;\\n\\t\\t// @dev pool address (like deployed core pool instance)\\n\\t\\taddress poolAddress;\\n\\t\\t// @dev pool weight (200 for Moda pools, 400 for Moda/ETH pools - set during deployment)\\n\\t\\tuint32 weight;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Moda/second determines yield farming reward base\\n\\t *      used by the yield pools controlled by the factory\\n\\t */\\n\\tuint256 public immutable initialModaPerSecond;\\n\\n\\t/**\\n\\t * @dev The yield is distributed proportionally to pool weights;\\n\\t *      total weight is here to help in determining the proportion\\n\\t */\\n\\tuint32 public totalWeight;\\n\\n\\t/**\\n\\t * @dev Moda/second decreases by 3% every period;\\n\\t *      updates are lazy calculated via a compound interest function.\\n\\t */\\n\\tuint32 public immutable secondsPerUpdate;\\n\\n\\t/**\\n\\t * @dev Start timestamp is when the pool starts.\\n\\t */\\n\\tuint public immutable startTimestamp;\\n\\n\\t/**\\n\\t * @dev End timestamp is the last time when Moda/second can be decreased;\\n\\t *      it is implied that yield farming stops after that block\\n\\t */\\n\\tuint public immutable endTimestamp;\\n\\n\\t/// @dev Maps pool token address (like Moda) -> pool address (like core pool instance)\\n\\tmapping(address => address) public pools;\\n\\n\\t/// @dev Keeps track of registered pool addresses, maps pool address -> exists flag\\n\\tmapping(address => bool) public poolExists;\\n\\n\\t/**\\n\\t * @dev Fired in createPool() and registerPool()\\n\\t *\\n\\t * @param _by an address which executed an action\\n\\t * @param poolToken pool token address (like Moda or a Moda / ETH LP token)\\n\\t * @param poolAddress deployed pool instance address\\n\\t * @param weight pool weight\\n\\t */\\n\\tevent PoolRegistered(address indexed _by, address indexed poolToken, address indexed poolAddress, uint64 weight);\\n\\n\\t/**\\n\\t * @dev Fired in changePoolWeight()\\n\\t *\\n\\t * @param _by an address which executed an action\\n\\t * @param _poolAddress deployed pool instance address\\n\\t * @param _weight new pool weight\\n\\t */\\n\\tevent WeightUpdated(address indexed _by, address indexed _poolAddress, uint32 _weight);\\n\\n\\t/**\\n\\t * @dev Fired in mintYieldTo()\\n\\t *\\n\\t * @param _to recipient of the minting\\n\\t * @param _amount amount minted in wei\\n\\t */\\n\\tevent YieldMinted(address indexed _to, uint256 _amount);\\n\\n\\t/**\\n\\t * @dev Fired in createCorePool()\\n\\t *\\n\\t * @param _by an address which executed an action\\n\\t * @param poolAddress deployed pool instance address\\n\\t */\\n\\tevent CorePoolCreated(address indexed _by, address indexed poolAddress);\\n\\n\\t/**\\n\\t * @dev Creates/deploys a factory instance\\n\\t *\\n\\t * @param _moda Moda ERC20 token address\\n\\t * @param _modaPerSecond initial Moda/second value for rewards\\n\\t * @param _secondsPerUpdate how frequently the rewards gets updated (decreased by 3%)\\n\\t * @param _startTimestamp timestamp to measure _secondsPerUpdate from\\n\\t * @param _endTimestamp timestamp when farming stops and rewards cannot be updated anymore\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _moda,\\n\\t\\tuint256 _modaPerSecond,\\n\\t\\tuint32 _secondsPerUpdate,\\n\\t\\tuint _startTimestamp,\\n\\t\\tuint _endTimestamp\\n\\t) ModaAware(_moda) {\\n\\t\\t// verify the inputs are set\\n\\t\\trequire(_modaPerSecond > 0, 'Moda/second not set');\\n\\t\\trequire(_secondsPerUpdate > 0, 'seconds/update not set');\\n\\t\\trequire(_startTimestamp > 0, 'start timestamp not set');\\n\\t\\trequire(_endTimestamp > _startTimestamp, 'invalid end timestamp: must be greater than init timestamp');\\n\\n\\t\\t// save the inputs into internal state variables\\n\\t\\tinitialModaPerSecond = _modaPerSecond;\\n\\t\\tsecondsPerUpdate = _secondsPerUpdate;\\n\\t\\tstartTimestamp = _startTimestamp;\\n\\t\\tendTimestamp = _endTimestamp;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Given a pool token retrieves corresponding pool address\\n\\t *\\n\\t * @dev A shortcut for `pools` mapping\\n\\t *\\n\\t * @param poolToken pool token address (like Moda) to query pool address for\\n\\t * @return pool address for the token specified\\n\\t */\\n\\tfunction getPoolAddress(address poolToken) external view returns (address) {\\n\\t\\t// read the mapping and return\\n\\t\\treturn pools[poolToken];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reads pool information for the pool defined by its pool token address,\\n\\t *      designed to simplify integration with the front ends\\n\\t *\\n\\t * @param _poolToken pool token address to query pool information for\\n\\t * @return pool information packed in a PoolData struct\\n\\t */\\n\\tfunction getPoolData(address _poolToken) external view returns (PoolData memory) {\\n\\t\\t// get the pool address from the mapping\\n\\t\\taddress poolAddr = pools[_poolToken];\\n\\n\\t\\t// throw if there is no pool registered for the token specified\\n\\t\\trequire(poolAddr != address(0), 'pool not found');\\n\\n\\t\\t// read pool information from the pool smart contract\\n\\t\\t// via the pool interface (IPool)\\n\\t\\taddress poolToken = IPool(poolAddr).poolToken();\\n\\t\\tuint32 weight = IPool(poolAddr).weight();\\n\\n\\t\\t// create the in-memory structure and return it\\n\\t\\treturn PoolData({poolToken: poolToken, poolAddress: poolAddr, weight: weight});\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates a core pool (ModaCorePool) and registers it within the factory\\n\\t *\\n\\t * @dev Can be executed by the pool factory owner only\\n\\t *\\n\\t * @param poolStartTimestamp init timestamp to be used for the pool creation time\\n\\t * @param weight weight of the pool to be created\\n\\t */\\n\\tfunction createCorePool(uint256 poolStartTimestamp, uint32 weight) external virtual onlyOwner {\\n\\t\\t// create/deploy new core pool instance\\n\\t\\tIPool pool = new ModaCorePool(moda, address(this), address(0), moda, weight, poolStartTimestamp);\\n\\n\\t\\t// Now the owner needs to be set to whoever is calling this function.\\n\\t\\tpool.transferOwnership(msg.sender);\\n\\n\\t\\t// register it within this factory\\n\\t\\tregisterPool(address(pool));\\n\\n\\t\\t// Tell the world we've done that\\n\\t\\temit CorePoolCreated(msg.sender, address(pool));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Registers an already deployed pool instance within the factory\\n\\t *\\n\\t * @dev Can be executed by the pool factory owner only\\n\\t *\\n\\t * @param poolAddr address of the already deployed pool instance\\n\\t */\\n\\tfunction registerPool(address poolAddr) public onlyOwner {\\n\\t\\t// read pool information from the pool smart contract\\n\\t\\t// via the pool interface (IPool)\\n\\t\\taddress poolToken = IPool(poolAddr).poolToken();\\n\\t\\tuint32 weight = IPool(poolAddr).weight();\\n\\n\\t\\t// ensure that the pool is not already registered within the factory\\n\\t\\trequire(pools[poolToken] == address(0), 'this pool is already registered');\\n\\n\\t\\t// create pool structure, register it within the factory\\n\\t\\tpools[poolToken] = poolAddr;\\n\\t\\tpoolExists[poolAddr] = true;\\n\\t\\t// update total pool weight of the factory\\n\\t\\ttotalWeight += weight;\\n\\n\\t\\t// emit an event\\n\\t\\temit PoolRegistered(msg.sender, poolToken, poolAddr, weight);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculates compound interest\\n\\t */\\n\\tfunction compound(uint principal, uint periods) public pure returns (uint) {\\n\\t\\treturn\\n\\t\\t\\tABDKMath64x64.mulu(\\n\\t\\t\\t\\t// Rate is -3% per period, e.g. 97/100.\\n\\t\\t\\t\\tABDKMath64x64.pow(ABDKMath64x64.div(97, 100), periods),\\n\\t\\t\\t\\tprincipal\\n\\t\\t\\t);\\n\\t}\\n\\n\\t/// @notice Calculates the effective moda per second at a future timestamp.\\n\\tfunction modaPerSecondAt(uint time) external view returns (uint256) {\\n\\t\\t// If we're before the start, just return initial.\\n\\t\\tif (time < startTimestamp) return 0;\\n\\n\\t\\t// Override for now. Return initialModaPerSecond for all times\\n\\t\\treturn initialModaPerSecond;\\n\\n\\t\\t// // If we're at the end, we don't continue to decrease.\\n\\t\\t// if (time > endTimestamp) time = endTimestamp;\\n\\n\\t\\t// // How many times do we need to decrease the rewards\\n\\t\\t// // between the last time we've calculated and now?\\n\\t\\t// uint periods = (time - startTimestamp) / secondsPerUpdate;\\n\\n\\t\\t// // Calculate the resulting amount after applying that many decreases.\\n\\t\\t// return compound(initialModaPerSecond, periods);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints Moda tokens; executed by Moda Pool only\\n\\t *\\n\\t * @dev Requires factory to have ROLE_TOKEN_CREATOR permission\\n\\t *      on the Moda ERC20 token instance\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _amount amount of Moda tokens to mint\\n\\t */\\n\\tfunction mintYieldTo(address _to, uint256 _amount) external {\\n\\t\\t// verify that sender is a pool registered withing the factory\\n\\t\\trequire(poolExists[msg.sender], 'pool is not registered with this factory');\\n\\n\\t\\t// mint Moda tokens as required\\n\\t\\tmintModa(_to, _amount);\\n\\n\\t\\t// Tell the world we've done this\\n\\t\\temit YieldMinted(_to, _amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Changes the weight of the pool;\\n\\t *      executed by the pool itself or by the factory owner\\n\\t *\\n\\t * @param poolAddr address of the pool to change weight for\\n\\t * @param weight new weight value to set to\\n\\t */\\n\\tfunction changePoolWeight(address poolAddr, uint32 weight) external {\\n\\t\\t// verify function is executed either by factory owner or by the pool itself\\n\\t\\trequire(msg.sender == owner(), 'Must be owner');\\n\\t\\trequire(poolExists[poolAddr], 'Pool not registered');\\n\\n\\t\\t// recalculate total weight\\n\\t\\ttotalWeight = totalWeight + weight - IPool(poolAddr).weight();\\n\\n\\t\\t// set the new pool weight\\n\\t\\tIPool(poolAddr).setWeight(weight);\\n\\n\\t\\t// emit an event\\n\\t\\temit WeightUpdated(msg.sender, poolAddr, weight);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ILinkedToMODA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n * @title Linked to moda Marker Interface\\n *\\n * @notice Marks smart contracts which are linked to ModaERC20 token instance upon construction,\\n *      all these smart contracts share a common moda() address getter\\n *\\n * @notice Implementing smart contracts MUST verify that they get linked to real ModaERC20 instance\\n *      and that moda() getter returns this very same instance address\\n *\\n * @author Basil Gorin\\n */\\ninterface ILinkedToMODA {\\n  /**\\n   * @notice Getter for a verified MODAERC20 instance address\\n   *\\n   * @return MODAERC20 token instance address smart contract is linked to\\n   */\\n  function moda() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/ModaAware.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport './ILinkedToMODA.sol';\\nimport './ModaConstants.sol';\\nimport './Token.sol';\\n\\n/**\\n * @title Moda Aware\\n *\\n * @notice Helper smart contract to be inherited by other smart contracts requiring to\\n *      be linked to verified ModaERC20 instance and performing some basic tasks on it\\n *\\n * @author Basil Gorin\\n * @author Kevin Brown (Moda DAO)\\n */\\nabstract contract ModaAware is ILinkedToMODA {\\n\\t/// @dev Link to MODA ERC20 Token ModaERC20 instance\\n\\taddress public immutable override moda;\\n\\n\\t/**\\n\\t * @dev Creates ModaAware instance, requiring to supply deployed ModaERC20 instance address\\n\\t *\\n\\t * @param _moda deployed ModaERC20 instance address\\n\\t */\\n\\tconstructor(address _moda) {\\n\\t\\t// verify MODA address is set and is correct\\n\\t\\trequire(_moda != address(0), 'MODA address not set');\\n\\t\\trequire(Token(_moda).TOKEN_UID() == ModaConstants.TOKEN_UID, 'unexpected TOKEN_UID');\\n\\n\\t\\t// write MODA address\\n\\t\\tmoda = _moda;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Executes ModaERC20.mint(_to, _values)\\n\\t *      on the bound ModaERC20 instance\\n\\t *\\n\\t * @dev Reentrancy safe due to the ModaERC20 design\\n\\t */\\n\\tfunction mintModa(address _to, uint256 _value) internal {\\n\\t\\t// just delegate call to the target\\n\\t\\tToken(moda).mint(_to, _value);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"abdk-libraries-solidity/ABDKMath64x64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BSD-4-Clause\\n/*\\n * ABDK Math 64.64 Smart Contract Library.  Copyright \u00a9 2019 by ABDK Consulting.\\n * Author: Mikhail Vladimirov <mikhail.vladimirov@gmail.com>\\n */\\npragma solidity ^0.8.0;\\n\\n/**\\n * Smart contract library of mathematical functions operating with signed\\n * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\\n * basically a simple fraction whose numerator is signed 128-bit integer and\\n * denominator is 2^64.  As long as denominator is always the same, there is no\\n * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\\n * represented by int128 type holding only the numerator.\\n */\\nlibrary ABDKMath64x64 {\\n  /*\\n   * Minimum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\\n\\n  /*\\n   * Maximum value signed 64.64-bit fixed point number may have. \\n   */\\n  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\\n\\n  /**\\n   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromInt (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (x << 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 64-bit integer number\\n   * rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64-bit integer number\\n   */\\n  function toInt (int128 x) internal pure returns (int64) {\\n    unchecked {\\n      return int64 (x >> 64);\\n    }\\n  }\\n\\n  /**\\n   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\\n   * number.  Revert on overflow.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function fromUInt (uint256 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x <= 0x7FFFFFFFFFFFFFFF);\\n      return int128 (int256 (x << 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\\n   * number rounding down.  Revert on underflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return unsigned 64-bit integer number\\n   */\\n  function toUInt (int128 x) internal pure returns (uint64) {\\n    unchecked {\\n      require (x >= 0);\\n      return uint64 (uint128 (x >> 64));\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\\n   * number rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 128.128-bin fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function from128x128 (int256 x) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = x >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\\n   * number.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 128.128 fixed point number\\n   */\\n  function to128x128 (int128 x) internal pure returns (int256) {\\n    unchecked {\\n      return int256 (x) << 64;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x + y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function add (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) + y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x - y.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sub (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) - y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function mul (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 result = int256(x) * y >> 64;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\\n   * number and y is signed 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y signed 256-bit integer number\\n   * @return signed 256-bit integer number\\n   */\\n  function muli (int128 x, int256 y) internal pure returns (int256) {\\n    unchecked {\\n      if (x == MIN_64x64) {\\n        require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\\n          y <= 0x1000000000000000000000000000000000000000000000000);\\n        return -y << 63;\\n      } else {\\n        bool negativeResult = false;\\n        if (x < 0) {\\n          x = -x;\\n          negativeResult = true;\\n        }\\n        if (y < 0) {\\n          y = -y; // We rely on overflow behavior here\\n          negativeResult = !negativeResult;\\n        }\\n        uint256 absoluteResult = mulu (x, uint256 (y));\\n        if (negativeResult) {\\n          require (absoluteResult <=\\n            0x8000000000000000000000000000000000000000000000000000000000000000);\\n          return -int256 (absoluteResult); // We rely on overflow behavior here\\n        } else {\\n          require (absoluteResult <=\\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n          return int256 (absoluteResult);\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64 fixed point number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 256-bit integer number\\n   */\\n  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\\n    unchecked {\\n      if (y == 0) return 0;\\n\\n      require (x >= 0);\\n\\n      uint256 lo = (uint256 (int256 (x)) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\\n      uint256 hi = uint256 (int256 (x)) * (y >> 128);\\n\\n      require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      hi <<= 64;\\n\\n      require (hi <=\\n        0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\\n      return hi + lo;\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function div (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      int256 result = (int256 (x) << 64) / y;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x signed 256-bit integer number\\n   * @param y signed 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divi (int256 x, int256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      bool negativeResult = false;\\n      if (x < 0) {\\n        x = -x; // We rely on overflow behavior here\\n        negativeResult = true;\\n      }\\n      if (y < 0) {\\n        y = -y; // We rely on overflow behavior here\\n        negativeResult = !negativeResult;\\n      }\\n      uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\\n      if (negativeResult) {\\n        require (absoluteResult <= 0x80000000000000000000000000000000);\\n        return -int128 (absoluteResult); // We rely on overflow behavior here\\n      } else {\\n        require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n        return int128 (absoluteResult); // We rely on overflow behavior here\\n      }\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function divu (uint256 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      require (y != 0);\\n      uint128 result = divuu (x, y);\\n      require (result <= uint128 (MAX_64x64));\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate -x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function neg (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return -x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate |x|.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function abs (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != MIN_64x64);\\n      return x < 0 ? -x : x;\\n    }\\n  }\\n\\n  /**\\n   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\\n   * zero.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function inv (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x != 0);\\n      int256 result = int256 (0x100000000000000000000000000000000) / x;\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function avg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      return int128 ((int256 (x) + int256 (y)) >> 1);\\n    }\\n  }\\n\\n  /**\\n   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\\n   * Revert on overflow or in case x * y is negative.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function gavg (int128 x, int128 y) internal pure returns (int128) {\\n    unchecked {\\n      int256 m = int256 (x) * int256 (y);\\n      require (m >= 0);\\n      require (m <\\n          0x4000000000000000000000000000000000000000000000000000000000000000);\\n      return int128 (sqrtu (uint256 (m)));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\\n   * and y is unsigned 256-bit integer number.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @param y uint256 value\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function pow (int128 x, uint256 y) internal pure returns (int128) {\\n    unchecked {\\n      bool negative = x < 0 && y & 1 == 1;\\n\\n      uint256 absX = uint128 (x < 0 ? -x : x);\\n      uint256 absResult;\\n      absResult = 0x100000000000000000000000000000000;\\n\\n      if (absX <= 0x10000000000000000) {\\n        absX <<= 63;\\n        while (y != 0) {\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x2 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x4 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          if (y & 0x8 != 0) {\\n            absResult = absResult * absX >> 127;\\n          }\\n          absX = absX * absX >> 127;\\n\\n          y >>= 4;\\n        }\\n\\n        absResult >>= 64;\\n      } else {\\n        uint256 absXShift = 63;\\n        if (absX < 0x1000000000000000000000000) { absX <<= 32; absXShift -= 32; }\\n        if (absX < 0x10000000000000000000000000000) { absX <<= 16; absXShift -= 16; }\\n        if (absX < 0x1000000000000000000000000000000) { absX <<= 8; absXShift -= 8; }\\n        if (absX < 0x10000000000000000000000000000000) { absX <<= 4; absXShift -= 4; }\\n        if (absX < 0x40000000000000000000000000000000) { absX <<= 2; absXShift -= 2; }\\n        if (absX < 0x80000000000000000000000000000000) { absX <<= 1; absXShift -= 1; }\\n\\n        uint256 resultShift = 0;\\n        while (y != 0) {\\n          require (absXShift < 64);\\n\\n          if (y & 0x1 != 0) {\\n            absResult = absResult * absX >> 127;\\n            resultShift += absXShift;\\n            if (absResult > 0x100000000000000000000000000000000) {\\n              absResult >>= 1;\\n              resultShift += 1;\\n            }\\n          }\\n          absX = absX * absX >> 127;\\n          absXShift <<= 1;\\n          if (absX >= 0x100000000000000000000000000000000) {\\n              absX >>= 1;\\n              absXShift += 1;\\n          }\\n\\n          y >>= 1;\\n        }\\n\\n        require (resultShift < 64);\\n        absResult >>= 64 - resultShift;\\n      }\\n      int256 result = negative ? -int256 (absResult) : int256 (absResult);\\n      require (result >= MIN_64x64 && result <= MAX_64x64);\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down.  Revert if x < 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function sqrt (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x >= 0);\\n      return int128 (sqrtu (uint256 (int256 (x)) << 64));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function log_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      int256 msb = 0;\\n      int256 xc = x;\\n      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\\n      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n      if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n      if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n      if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n      int256 result = msb - 64 << 64;\\n      uint256 ux = uint256 (int256 (x)) << uint256 (127 - msb);\\n      for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\\n        ux *= ux;\\n        uint256 b = ux >> 255;\\n        ux >>= 127 + b;\\n        result += bit * int256 (b);\\n      }\\n\\n      return int128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural logarithm of x.  Revert if x <= 0.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function ln (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x > 0);\\n\\n      return int128 (int256 (\\n          uint256 (int256 (log_2 (x))) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate binary exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp_2 (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      uint256 result = 0x80000000000000000000000000000000;\\n\\n      if (x & 0x8000000000000000 > 0)\\n        result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\\n      if (x & 0x4000000000000000 > 0)\\n        result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\\n      if (x & 0x2000000000000000 > 0)\\n        result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\\n      if (x & 0x1000000000000000 > 0)\\n        result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\\n      if (x & 0x800000000000000 > 0)\\n        result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\\n      if (x & 0x400000000000000 > 0)\\n        result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\\n      if (x & 0x200000000000000 > 0)\\n        result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\\n      if (x & 0x100000000000000 > 0)\\n        result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\\n      if (x & 0x80000000000000 > 0)\\n        result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\\n      if (x & 0x40000000000000 > 0)\\n        result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\\n      if (x & 0x20000000000000 > 0)\\n        result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\\n      if (x & 0x10000000000000 > 0)\\n        result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\\n      if (x & 0x8000000000000 > 0)\\n        result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\\n      if (x & 0x4000000000000 > 0)\\n        result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\\n      if (x & 0x2000000000000 > 0)\\n        result = result * 0x1000162E525EE054754457D5995292026 >> 128;\\n      if (x & 0x1000000000000 > 0)\\n        result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\\n      if (x & 0x800000000000 > 0)\\n        result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\\n      if (x & 0x400000000000 > 0)\\n        result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\\n      if (x & 0x200000000000 > 0)\\n        result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\\n      if (x & 0x100000000000 > 0)\\n        result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\\n      if (x & 0x80000000000 > 0)\\n        result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\\n      if (x & 0x40000000000 > 0)\\n        result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\\n      if (x & 0x20000000000 > 0)\\n        result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\\n      if (x & 0x10000000000 > 0)\\n        result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\\n      if (x & 0x8000000000 > 0)\\n        result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\\n      if (x & 0x4000000000 > 0)\\n        result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\\n      if (x & 0x2000000000 > 0)\\n        result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\\n      if (x & 0x1000000000 > 0)\\n        result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\\n      if (x & 0x800000000 > 0)\\n        result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\\n      if (x & 0x400000000 > 0)\\n        result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\\n      if (x & 0x200000000 > 0)\\n        result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\\n      if (x & 0x100000000 > 0)\\n        result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\\n      if (x & 0x80000000 > 0)\\n        result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\\n      if (x & 0x40000000 > 0)\\n        result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\\n      if (x & 0x20000000 > 0)\\n        result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\\n      if (x & 0x10000000 > 0)\\n        result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\\n      if (x & 0x8000000 > 0)\\n        result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\\n      if (x & 0x4000000 > 0)\\n        result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\\n      if (x & 0x2000000 > 0)\\n        result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\\n      if (x & 0x1000000 > 0)\\n        result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\\n      if (x & 0x800000 > 0)\\n        result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\\n      if (x & 0x400000 > 0)\\n        result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\\n      if (x & 0x200000 > 0)\\n        result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\\n      if (x & 0x100000 > 0)\\n        result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\\n      if (x & 0x80000 > 0)\\n        result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\\n      if (x & 0x40000 > 0)\\n        result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\\n      if (x & 0x20000 > 0)\\n        result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\\n      if (x & 0x10000 > 0)\\n        result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\\n      if (x & 0x8000 > 0)\\n        result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\\n      if (x & 0x4000 > 0)\\n        result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\\n      if (x & 0x2000 > 0)\\n        result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\\n      if (x & 0x1000 > 0)\\n        result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\\n      if (x & 0x800 > 0)\\n        result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\\n      if (x & 0x400 > 0)\\n        result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\\n      if (x & 0x200 > 0)\\n        result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\\n      if (x & 0x100 > 0)\\n        result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\\n      if (x & 0x80 > 0)\\n        result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\\n      if (x & 0x40 > 0)\\n        result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\\n      if (x & 0x20 > 0)\\n        result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\\n      if (x & 0x10 > 0)\\n        result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\\n      if (x & 0x8 > 0)\\n        result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\\n      if (x & 0x4 > 0)\\n        result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\\n      if (x & 0x2 > 0)\\n        result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\\n      if (x & 0x1 > 0)\\n        result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\\n\\n      result >>= uint256 (int256 (63 - (x >> 64)));\\n      require (result <= uint256 (int256 (MAX_64x64)));\\n\\n      return int128 (int256 (result));\\n    }\\n  }\\n\\n  /**\\n   * Calculate natural exponent of x.  Revert on overflow.\\n   *\\n   * @param x signed 64.64-bit fixed point number\\n   * @return signed 64.64-bit fixed point number\\n   */\\n  function exp (int128 x) internal pure returns (int128) {\\n    unchecked {\\n      require (x < 0x400000000000000000); // Overflow\\n\\n      if (x < -0x400000000000000000) return 0; // Underflow\\n\\n      return exp_2 (\\n          int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\\n    }\\n  }\\n\\n  /**\\n   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\\n   * integer numbers.  Revert on overflow or when y is zero.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @param y unsigned 256-bit integer number\\n   * @return unsigned 64.64-bit fixed point number\\n   */\\n  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\\n    unchecked {\\n      require (y != 0);\\n\\n      uint256 result;\\n\\n      if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\n        result = (x << 64) / y;\\n      else {\\n        uint256 msb = 192;\\n        uint256 xc = x >> 192;\\n        if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\\n        if (xc >= 0x10000) { xc >>= 16; msb += 16; }\\n        if (xc >= 0x100) { xc >>= 8; msb += 8; }\\n        if (xc >= 0x10) { xc >>= 4; msb += 4; }\\n        if (xc >= 0x4) { xc >>= 2; msb += 2; }\\n        if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\\n\\n        result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\\n        require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 hi = result * (y >> 128);\\n        uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n\\n        uint256 xh = x >> 192;\\n        uint256 xl = x << 64;\\n\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n        lo = hi << 128;\\n        if (xl < lo) xh -= 1;\\n        xl -= lo; // We rely on overflow behavior here\\n\\n        assert (xh == hi >> 128);\\n\\n        result += xl / y;\\n      }\\n\\n      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\\n      return uint128 (result);\\n    }\\n  }\\n\\n  /**\\n   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\\n   * number.\\n   *\\n   * @param x unsigned 256-bit integer number\\n   * @return unsigned 128-bit integer number\\n   */\\n  function sqrtu (uint256 x) private pure returns (uint128) {\\n    unchecked {\\n      if (x == 0) return 0;\\n      else {\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) { xx >>= 128; r <<= 64; }\\n        if (xx >= 0x10000000000000000) { xx >>= 64; r <<= 32; }\\n        if (xx >= 0x100000000) { xx >>= 32; r <<= 16; }\\n        if (xx >= 0x10000) { xx >>= 16; r <<= 8; }\\n        if (xx >= 0x100) { xx >>= 8; r <<= 4; }\\n        if (xx >= 0x10) { xx >>= 4; r <<= 2; }\\n        if (xx >= 0x8) { r <<= 1; }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return uint128 (r < r1 ? r : r1);\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\nimport '@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol';\\nimport '@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol';\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport './IMintableToken.sol';\\nimport './ModaConstants.sol';\\n\\ncontract Token is\\n\\tInitializable,\\n\\tERC20Upgradeable,\\n\\tUUPSUpgradeable,\\n\\tAccessControlUpgradeable,\\n\\tIMintableToken\\n{\\n\\tuint256 public holderCount;\\n\\taddress public vestingContract;\\n\\n\\tfunction TOKEN_UID() external pure returns (uint256) {\\n\\t\\treturn ModaConstants.TOKEN_UID;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Our constructor (with UUPS upgrades we need to use initialize(), but this is only\\n\\t *      able to be called once because of the initializer modifier.\\n\\t */\\n\\tfunction initialize(address[] memory recipients, uint256[] memory amounts) public initializer {\\n\\t\\trequire(recipients.length == amounts.length, 'Token: recipients and amounts must match');\\n\\n\\t\\t__ERC20_init('moda', 'MODA');\\n\\n\\t\\tuint256 length = recipients.length;\\n\\t\\tfor (uint256 i = 0; i < length; i++) {\\n\\t\\t\\t_mintWithCount(recipients[i], amounts[i]);\\n\\t\\t}\\n\\n\\t\\t__AccessControl_init();\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\t\\t_setupRole(ModaConstants.ROLE_UPGRADER, _msgSender());\\n\\t\\t_setupRole(ModaConstants.ROLE_TOKEN_CREATOR, _msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev This function is required by Open Zeppelin's UUPS proxy implementation\\n\\t *      and indicates whether a contract upgrade should go ahead or not.\\n\\t *\\n\\t *      This implementation only allows the contract owner to perform upgrades.\\n\\t */\\n\\tfunction _authorizeUpgrade(address) internal view override onlyRole(ModaConstants.ROLE_UPGRADER) {}\\n\\n\\t/**\\n\\t * @dev Internal function to manage the holderCount variable that should be called\\n\\t *      BEFORE transfers alter balances.\\n\\t */\\n\\tfunction _updateCountOnTransfer(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) private {\\n\\t\\tif (from != to) {\\n\\t\\t\\tif (balanceOf(to) == 0 && amount > 0) {\\n\\t\\t\\t\\t++holderCount;\\n\\t\\t\\t}\\n\\n\\t\\t\\tif (balanceOf(from) == amount && amount > 0) {\\n\\t\\t\\t\\t--holderCount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev A private function that mints while maintaining the holder count variable.\\n\\t */\\n\\tfunction _mintWithCount(address to, uint256 amount) private {\\n\\t\\t_updateCountOnTransfer(address(0), to, amount);\\n\\t\\t_mint(to, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Mints (creates) some tokens to address specified\\n\\t * @dev The value specified is treated as is without taking\\n\\t *      into account what `decimals` value is\\n\\t * @dev Behaves effectively as `mintTo` function, allowing\\n\\t *      to specify an address to mint tokens to\\n\\t * @dev Requires sender to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @dev Throws on overflow, if totalSupply + _value doesn't fit into uint256\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _value an amount of tokens to mint (create)\\n\\t */\\n\\tfunction mint(address _to, uint256 _value) external override onlyRole(ModaConstants.ROLE_TOKEN_CREATOR) {\\n\\t\\t// non-zero recipient address check\\n\\t\\trequire(_to != address(0), 'ERC20: mint to the zero address'); // Zeppelin msg\\n\\t\\tif (_value == 0) return;\\n\\n\\t\\t// non-zero _value and arithmetic overflow check on the total supply\\n\\t\\t// this check automatically secures arithmetic overflow on the individual balance\\n\\t\\trequire(totalSupply() + _value > totalSupply(), 'zero value mint or arithmetic overflow');\\n\\n\\t\\t// uint256 overflow check (required by voting delegation)\\n\\t\\trequire(totalSupply() + _value <= type(uint192).max, 'total supply overflow (uint192)');\\n\\n\\t\\t// perform mint with ERC20 transfer event\\n\\t\\t_mintWithCount(_to, _value);\\n\\t}\\n\\n\\t/**\\n\\t * @dev ERC20 transfer function. Overridden to maintain holder count variable.\\n\\t */\\n\\tfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n\\t\\t_updateCountOnTransfer(_msgSender(), recipient, amount);\\n\\t\\treturn super.transfer(recipient, amount);\\n\\t}\\n\\n\\t/**\\n\\t * @dev ERC20 transferFrom function. Overridden to maintain holder count variable.\\n\\t */\\n\\tfunction transferFrom(\\n\\t\\taddress sender,\\n\\t\\taddress recipient,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\t_updateCountOnTransfer(sender, recipient, amount);\\n\\t\\treturn super.transferFrom(sender, recipient, amount);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        StringsUpgradeable.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        StringsUpgradeable.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n        __UUPSUpgradeable_init_unchained();\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallSecure(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/IMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.6;\\n\\n/**\\n * @dev Interface for a token that will allow mints from a vesting contract\\n */\\ninterface IMintableToken {\\n\\tfunction mint(address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal onlyInitializing {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n        __ERC1967Upgrade_init_unchained();\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallSecure(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        address oldImplementation = _getImplementation();\\n\\n        // Initial upgrade and setup call\\n        _setImplementation(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n\\n        // Perform rollback test if not already in progress\\n        StorageSlotUpgradeable.BooleanSlot storage rollbackTesting = StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT);\\n        if (!rollbackTesting.value) {\\n            // Trigger rollback using upgradeTo from the new implementation\\n            rollbackTesting.value = true;\\n            _functionDelegateCall(\\n                newImplementation,\\n                abi.encodeWithSignature(\\\"upgradeTo(address)\\\", oldImplementation)\\n            );\\n            rollbackTesting.value = false;\\n            // Check rollback was effective\\n            require(oldImplementation == _getImplementation(), \\\"ERC1967Upgrade: upgrade breaks further upgrades\\\");\\n            // Finally reset to the new implementation and log the upgrade\\n            _upgradeTo(newImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_moda\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_modaPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_modaPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolToken\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_fromVal\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_toVal\",\"type\":\"uint32\"}],\"name\":\"PoolWeightUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"RewardLockingPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedFrom\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"StakeLockUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Unstaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"YieldClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_UID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"}],\"name\":\"getDeposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isYield\",\"type\":\"bool\"}],\"internalType\":\"struct IPool.Deposit\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getDepositsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"moda\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modaPoolFactory\",\"outputs\":[{\"internalType\":\"contract ModaPoolFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"pendingYieldRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolTokenReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLockingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newRewardLockingPeriod\",\"type\":\"uint256\"}],\"name\":\"setRewardLockingPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_weight\",\"type\":\"uint32\"}],\"name\":\"setWeight\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockUntil\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stakeAsPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depositId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedUntil\",\"type\":\"uint256\"}],\"name\":\"updateStakeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastProcessedRewards\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usersLockingWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weight\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ModaCorePool", "CompilerVersion": "v0.8.6+commit.11564f7e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000001117ac6ad6cdf1a3bc543bad3b133724620522d5000000000000000000000000503154cdd5710c8c26df1051eba183d04401436500000000000000000000000000000000000000000000000000000000000000000000000000000000000000001117ac6ad6cdf1a3bc543bad3b133724620522d500000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000000000000000000000000064d2f578", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}