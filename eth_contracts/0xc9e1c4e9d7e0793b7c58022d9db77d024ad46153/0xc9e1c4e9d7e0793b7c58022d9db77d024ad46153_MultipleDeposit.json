{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MultipleDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\nimport \\\"./Interfaces/IDepositContract.sol\\\";\\r\\n\\r\\ncontract MultipleDeposit {\\r\\n    // address of the ETH2 deposit contracts on their respective networks and can be verified here: https://ethereum.org/en/staking/deposit-contract/\\r\\n    // verified deposit contract: https://etherscan.io/address/0x00000000219ab540356cbb839cbe05303d7705fa\\r\\n    address constant public MAINNET_DEPOSIT_ACCOUNT = 0x00000000219ab540356cBB839Cbe05303d7705Fa;\\r\\n    mapping (bytes32 => uint) public depositAmount; // amount sent per pubkey\\r\\n    IDepositContract public depositContract;\\r\\n\\r\\n    uint constant public STAKE_AMOUNT = 32 ether;   // best amount for 1 validator\\r\\n    event ValidatorDeposited(address indexed _depositor, bytes _pubkey, uint _amount);\\r\\n\\r\\n    constructor()\\r\\n    {\\r\\n        require(block.chainid == 1, \\\"MultipleDeposit: mainnet only\\\");\\r\\n        depositContract = IDepositContract(MAINNET_DEPOSIT_ACCOUNT);\\r\\n    }\\r\\n\\r\\n    /// @dev make multiple deposits for different pubkey and withdrawal address combination\\r\\n    /// for detail meaning of the parameters, check the mainnet deposit contract source\\r\\n    /// these data are generated by the staking deposit cli https://github.com/ethereum/staking-deposit-cli\\r\\n    /// @param _forkVersion intended network for the given deposit json reserved for testnet use only\\r\\n    /// @param _pubkey list of pubkeys of the stakers\\r\\n    /// @param _withdrawal_credentials withdrawal address associated with each pubkey \\r\\n    /// @param _signature associated signature(signed by the corresponding pubkey holder(s))\\r\\n    /// @param _deposit_data_root associated data root to prevent malformed input\\r\\n    function depositMultipleValidators(\\r\\n        uint _forkVersion,\\r\\n        bytes[] calldata _pubkey,\\r\\n        bytes[] calldata _withdrawal_credentials,\\r\\n        bytes[] calldata _signature,\\r\\n        bytes32[] calldata _deposit_data_root) \\r\\n    external payable\\r\\n    {\\r\\n        uint noValidators = _pubkey.length;\\r\\n\\r\\n        require(0 == _forkVersion, \\\"MultipleDeposit: deposit to wrong chain\\\");\\r\\n\\r\\n        // supplied data must match\\r\\n        require( (noValidators > 0)\\r\\n                && (_withdrawal_credentials.length == noValidators) \\r\\n                && (_signature.length == noValidators)\\r\\n                && (_deposit_data_root.length == noValidators), \\\"MultipleDeposit: validator params don't match\\\");\\r\\n\\r\\n        // tx caller must supply correct ETH for the deposit\\r\\n        require(msg.value == noValidators*STAKE_AMOUNT, \\\"MultipleDeposit: incorrect ETH amount\\\");\\r\\n\\r\\n        for (uint ii; ii < noValidators;) {\\r\\n            // prevent sending too much\\r\\n            bytes32 phash = keccak256(_pubkey[ii]);\\r\\n            depositAmount[phash] += STAKE_AMOUNT;\\r\\n            require(depositAmount[phash] <= 32 ether, \\\"MultipleDeposit: already sent 32 ETH\\\");\\r\\n            \\r\\n            // withdrawal wallet locked-in the same as deposit wallet for the protection of validator owner\\r\\n            _checkWithdrawalCredential(_withdrawal_credentials[ii]);\\r\\n\\r\\n            // make the deposit to the deposit contract that would be picked up and accounted under the given pubkey in the Consensus Layer\\r\\n            // the data would be checked by the deposit contract for correctness and would revert if it is wrong\\r\\n            depositContract.deposit{value: STAKE_AMOUNT}(_pubkey[ii], _withdrawal_credentials[ii], _signature[ii], _deposit_data_root[ii]);\\r\\n\\r\\n            // event for tracking purpose of who and when the deposit is made\\r\\n            emit ValidatorDeposited(msg.sender, _pubkey[ii], STAKE_AMOUNT);\\r\\n            \\r\\n            // gas optimization\\r\\n            unchecked {\\r\\n                ii++;\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // ensure ETH provider is the same as withdrawal address, this means there is no 'deposit onbehalf of'\\r\\n    function _checkWithdrawalCredential(bytes calldata _withdrawal_credential) private view {\\r\\n            bytes memory xx = _withdrawal_credential;\\r\\n            bytes1 prefix = xx[0];\\r\\n            xx[0] = 0;\\r\\n            (address eth1Address) = abi.decode(xx, (address));\\r\\n            require(prefix == bytes1(uint8(1)) && msg.sender == eth1Address, \\\"MultipleDeposit: ETH1 address not match\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Interfaces/IDepositContract.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IDepositContract {\\r\\n    /// @notice A processed deposit event.\\r\\n    event DepositEvent(\\r\\n        bytes pubkey,\\r\\n        bytes withdrawal_credentials,\\r\\n        bytes amount,\\r\\n        bytes signature,\\r\\n        bytes index\\r\\n    );\\r\\n\\r\\n    /// @notice Submit a Phase 0 DepositData object.\\r\\n    /// @param pubkey A BLS12-381 public key.\\r\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\r\\n    /// @param signature A BLS12-381 signature.\\r\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\r\\n    /// Used as a protection against malformed input.\\r\\n    function deposit(\\r\\n        bytes calldata pubkey,\\r\\n        bytes calldata withdrawal_credentials,\\r\\n        bytes calldata signature,\\r\\n        bytes32 deposit_data_root\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice Query the current deposit root hash.\\r\\n    /// @return The deposit root hash.\\r\\n    function get_deposit_root() external view returns (bytes32);\\r\\n\\r\\n    /// @notice Query the current deposit count.\\r\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\r\\n    function get_deposit_count() external view returns (bytes memory);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1500000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_pubkey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ValidatorDeposited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAINNET_DEPOSIT_ACCOUNT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKE_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"depositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositContract\",\"outputs\":[{\"internalType\":\"contract IDepositContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_forkVersion\",\"type\":\"uint256\"},{\"internalType\":\"bytes[]\",\"name\":\"_pubkey\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_withdrawal_credentials\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_signature\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_deposit_data_root\",\"type\":\"bytes32[]\"}],\"name\":\"depositMultipleValidators\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "MultipleDeposit", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "1500000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}