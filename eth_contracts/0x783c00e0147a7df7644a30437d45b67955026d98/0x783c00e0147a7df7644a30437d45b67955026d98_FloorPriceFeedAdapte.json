{"SourceCode": "// SPDX-License-Identifier: BSD-3-Clause\r\npragma solidity 0.8.23;\r\n\r\ninterface AggregatorV3Interface {\r\n  function decimals() external view returns (uint8);\r\n\r\n  function description() external view returns (string memory);\r\n\r\n  function version() external view returns (uint256);\r\n\r\n  function getRoundData(uint80 _roundId)\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ncontract FloorPriceFeedAdapter is Ownable {\r\n\r\n    error StalePrice();\r\n    error InvalidPriceFeedDecimals();\r\n\r\n    AggregatorV3Interface public immutable floorPriceFeed;\r\n    AggregatorV3Interface public immutable ethPriceFeed;\r\n\r\n    uint public floorStalePriceDelay;\r\n    uint public ethStalePriceDelay;\r\n\r\n    /**\r\n     * @return uint The scaled floor price in USD\r\n     */\r\n    function latestAnswer()\r\n        public\r\n        view\r\n        returns (int256) {\r\n\r\n        (\r\n            ,\r\n            int floorRate, // floor/ETH rate\r\n            ,\r\n            uint floorUpdatedAt,\r\n\r\n        ) = floorPriceFeed.latestRoundData();\r\n        // check if price is stale\r\n        if (floorStalePriceDelay != 0 && block.timestamp > floorUpdatedAt + floorStalePriceDelay) {\r\n            revert StalePrice();\r\n        }\r\n\r\n        (\r\n            ,\r\n            int ethRate, // ETH/USD rate\r\n            ,\r\n            uint ethUpdatedAt,\r\n\r\n        ) = ethPriceFeed.latestRoundData();\r\n        // check if price is stale\r\n        if (ethStalePriceDelay != 0 && block.timestamp > ethUpdatedAt + ethStalePriceDelay) {\r\n            revert StalePrice();\r\n        }\r\n\r\n        return floorRate * ethRate / 1e18; // scale to 8 decimals places like Chainlink\r\n    }\r\n\r\n    /**\r\n     * @return roundId always 0\r\n     *         answer The scaled floor price in USD\r\n     *         startedAt always 0\r\n     *         updatedAt always block.timestamp\r\n     *         answeredInRound always 0\r\n     */\r\n    function latestRoundData()\r\n        public\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        ) {\r\n        return (0, latestAnswer(), 0, block.timestamp, 0);\r\n    }\r\n\r\n    constructor(AggregatorV3Interface floorPriceFeed_, AggregatorV3Interface ethPriceFeed_, uint _floorStalePriceDelay, uint _ethStalePriceDelay) public Ownable(msg.sender) {\r\n        if (floorPriceFeed_.decimals() != 18 || ethPriceFeed_.decimals() != 8) {\r\n            revert InvalidPriceFeedDecimals();\r\n        }\r\n        \r\n        floorPriceFeed = floorPriceFeed_;\r\n        ethPriceFeed = ethPriceFeed_;\r\n\r\n        floorStalePriceDelay = _floorStalePriceDelay;\r\n        ethStalePriceDelay = _ethStalePriceDelay;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the time delay after which the price feed is considered stale.\r\n     * @param _floorStalePriceDelay the time delay in seconds.\r\n     */\r\n    function setFloorStalePriceDelay(uint _floorStalePriceDelay) external onlyOwner {\r\n        floorStalePriceDelay = _floorStalePriceDelay;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the time delay after which the price feed is considered stale.\r\n     * @param _ethStalePriceDelay the time delay in seconds.\r\n     */\r\n    function setEthStalePriceDelay(uint _ethStalePriceDelay) external onlyOwner {\r\n        ethStalePriceDelay = _ethStalePriceDelay;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"floorPriceFeed_\",\"type\":\"address\"},{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"ethPriceFeed_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_floorStalePriceDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ethStalePriceDelay\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidPriceFeedDecimals\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StalePrice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ethPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethStalePriceDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"floorStalePriceDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethStalePriceDelay\",\"type\":\"uint256\"}],\"name\":\"setEthStalePriceDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_floorStalePriceDelay\",\"type\":\"uint256\"}],\"name\":\"setFloorStalePriceDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FloorPriceFeedAdapter", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000006939363616e78fee3618f3a2dfe3b46ab0c440000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000000000000000000000000000000000000000015f900000000000000000000000000000000000000000000000000000000000001c20", "EVMVersion": "Default", "Library": "", "LicenseType": "BSD-3-Clause", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4203434af80bff76644b01404e04a776a8112f4e26b2a0a8c4307a3f0b63f07b"}