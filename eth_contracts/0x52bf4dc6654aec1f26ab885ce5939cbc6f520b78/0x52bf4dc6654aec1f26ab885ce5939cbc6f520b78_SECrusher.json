{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SECrusher.sol\": {\r\n      \"content\": \"//   ____  _____ ____                _               \\n//  / ___|| ____/ ___|_ __ _   _ ___| |__   ___ _ __ \\n//  \\\\___ \\\\|  _|| |   | '__| | | / __| '_ \\\\ / _ \\\\ '__|\\n//   ___) | |__| |___| |  | |_| \\\\__ \\\\ | | |  __/ |   \\n//  |____/|_____\\\\____|_|   \\\\__,_|___/_| |_|\\\\___|_|   \\n//\\n//    SECrusher\\n//\\n//  SOCIALS\\n//    Telegram: https://t.me/SECrusher\\n//    Website: https://secrusher.com\\n//    Twitter: https://twitter.com/SECrusher\\n//\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface IDEXRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\\ninterface IDEXFactory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view returns (address payable) {\\n        return payable(msg.sender);\\n    }\\n\\n    function _msgData() internal view returns (bytes memory) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\\ncontract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ncontract SECrusher is IERC20, Ownable {\\n    uint256 constant _totalSupply = 28_000_000 * (10 ** _decimals);\\n\\n    mapping(address => uint256) _balances;\\n    mapping(address => mapping(address => uint256)) _allowances;\\n\\n    IDEXRouter public router;\\n    address constant routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    string constant _name = \\\"SECrusher\\\";\\n    string constant _symbol = \\\"SECrush\\\";\\n    uint8 constant _decimals = 18;\\n\\n    uint256 developmentFee = 340;\\n    uint256 feeDenominator = 10000;\\n\\n    uint256 public launchedAt;\\n    bool isTradingAllowed = false;\\n\\n    mapping(address => bool) isFeeExempt;\\n    mapping(address => bool) liquidityCreator;\\n    mapping(address => bool) liquidityPools;\\n    address public uniswapPair;\\n\\n    address devWallet;\\n    modifier onlyDev() {\\n        require(_msgSender() == devWallet, \\\"SECrush Caller is not a team member\\\");\\n        _;\\n    }\\n\\n    bool inSwap;\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    event DistributedFees(uint256 fee);\\n\\n    constructor() {\\n        router = IDEXRouter(routerAddress);\\n        uniswapPair = IDEXFactory(router.factory()).createPair(\\n            router.WETH(),\\n            address(this)\\n        );\\n        liquidityPools[uniswapPair] = true;\\n        _allowances[address(this)][routerAddress] = type(uint256).max;\\n        _allowances[owner()][routerAddress] = type(uint256).max;\\n\\n        liquidityCreator[owner()] = true;\\n        isFeeExempt[address(this)] = true;\\n        isFeeExempt[owner()] = true;\\n\\n        emit Transfer(address(0), owner(), _totalSupply);\\n        _balances[owner()] = _totalSupply;\\n    }\\n\\n    receive() external payable {}\\n\\n    function totalSupply() external pure override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    function symbol() external pure returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function name() external pure returns (string memory) {\\n        return _name;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return _allowances[holder][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _allowances[msg.sender][spender] = amount;\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function approveAll(address spender) external returns (bool) {\\n        return approve(spender, type(uint256).max);\\n    }\\n\\n    function setDevWallet(address _dev) external onlyOwner {\\n        devWallet = _dev;\\n    }\\n\\n    function withdrawFee(bool enabled, uint256 percentage) external onlyDev {\\n        if (enabled) {\\n            uint256 amount = address(this).balance;\\n            payable(devWallet).transfer((amount * percentage) / 100);\\n        }\\n    }\\n\\n    function beginLaunch() external onlyOwner {\\n        require(!isTradingAllowed);\\n        isTradingAllowed = true;\\n        launchedAt = block.number;\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        return _transferFrom(msg.sender, recipient, amount);\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\n            _allowances[sender][msg.sender] =\\n                _allowances[sender][msg.sender] -\\n                amount;\\n        }\\n\\n        return _transferFrom(sender, recipient, amount);\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        require(sender != address(0), \\\"SECrush transfer from 0x0\\\");\\n        require(recipient != address(0), \\\"SECrush transfer to 0x0\\\");\\n        require(amount > 0, \\\"SECrush Amount must be > zero\\\");\\n        require(_balances[sender] >= amount, \\\"SECrush Insufficient balance\\\");\\n\\n        if (!launched() && liquidityPools[recipient]) {\\n            require(liquidityCreator[sender], \\\"SECrush Liquidity not added.\\\");\\n            launch();\\n        }\\n\\n        if (!isTradingAllowed) {\\n            require(\\n                liquidityCreator[sender] || liquidityCreator[recipient],\\n                \\\"SECrush Trading closed.\\\"\\n            );\\n        }\\n\\n        if (inSwap) {\\n            return _basicTransfer(sender, recipient, amount);\\n        }\\n\\n        _balances[sender] = _balances[sender] - amount;\\n\\n        uint256 amountReceived = feeExcluded(sender)\\n            ? receiveFee(amount)\\n            : amount;\\n\\n        if (shouldSwapBack(recipient)) {\\n            if (amount > 0) swapBack();\\n        }\\n\\n        _balances[recipient] = _balances[recipient] + amountReceived;\\n\\n        emit Transfer(sender, recipient, amountReceived);\\n        return true;\\n    }\\n\\n    function launched() internal view returns (bool) {\\n        return launchedAt != 0;\\n    }\\n\\n    function launch() internal {\\n        launchedAt = block.number;\\n    }\\n\\n    function _basicTransfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] = _balances[recipient] + amount;\\n        emit Transfer(sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function feeExcluded(address sender) internal view returns (bool) {\\n        return !isFeeExempt[sender];\\n    }\\n\\n    function receiveFee(uint256 amount) internal returns (uint256) {\\n        uint256 feeAmount = (amount * developmentFee) / feeDenominator;\\n        _balances[address(this)] += feeAmount;\\n\\n        return amount - feeAmount;\\n    }\\n\\n    function shouldSwapBack(address recipient) internal view returns (bool) {\\n        return\\n            !liquidityPools[msg.sender] && !inSwap && liquidityPools[recipient];\\n    }\\n\\n    function withdrawStuckTokens(\\n        address token,\\n        uint256 amount\\n    ) external onlyDev {\\n        if (token == address(0)) {\\n            payable(msg.sender).transfer(amount);\\n        } else {\\n            IERC20(token).transfer(msg.sender, amount);\\n        }\\n    }\\n\\n    function swapBack() internal swapping {\\n        uint256 tokenBalance = _balances[address(this)];\\n        if (tokenBalance < (1 ether)) return;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenBalance,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        emit DistributedFees(tokenBalance);\\n    }\\n\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    function getCurrentSupply() public view returns (uint256) {\\n        return _totalSupply - balanceOf(address(0)) - balanceOf(DEAD);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"DistributedFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beginLaunch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dev\",\"type\":\"address\"}],\"name\":\"setDevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SECrusher", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}