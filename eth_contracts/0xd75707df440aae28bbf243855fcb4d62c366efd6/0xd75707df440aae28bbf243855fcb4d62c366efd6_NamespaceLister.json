{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/controllers/Controllable.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract Controllable is Ownable {\\r\\n    mapping(address => bool) public controllers;\\r\\n\\r\\n    event ControllerChanged(address indexed controller, bool enabled);\\r\\n\\r\\n    constructor() Ownable(msg.sender) {}\\r\\n\\r\\n    modifier onlyController() {\\r\\n        require(\\r\\n            controllers[msg.sender],\\r\\n            \\\"Controllable: Caller is not a controller\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function setController(address controller, bool enabled) public onlyOwner {\\r\\n        controllers[controller] = enabled;\\r\\n        emit ControllerChanged(controller, enabled);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ens/INameWrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.20;\\r\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\r\\nuint32 constant CANNOT_UNWRAP = 1;\\r\\n\\r\\ninterface INameWrapper is IERC1155 {\\r\\n    error Unauthorised(bytes32 node, address addr);\\r\\n    error IncompatibleParent();\\r\\n    error IncorrectTokenType();\\r\\n    error LabelMismatch(bytes32 labelHash, bytes32 expectedLabelhash);\\r\\n    error LabelTooShort();\\r\\n    error LabelTooLong(string label);\\r\\n    error IncorrectTargetOwner(address owner);\\r\\n    error CannotUpgrade();\\r\\n    error OperationProhibited(bytes32 node);\\r\\n    error NameIsNotWrapped();\\r\\n    error NameIsStillExpired();\\r\\n\\r\\n    function ownerOf(uint256 id) external view returns (address owner);\\r\\n\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        string calldata label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setFuses(\\r\\n        bytes32 node,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) external returns (uint32 newFuses);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/INamespaceRegistry.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.20;\\r\\n\\r\\nimport \\\"./Types.sol\\\";\\r\\n\\r\\ninterface INamespaceRegistry {\\r\\n    function set(bytes32 node, ListedENSName calldata name) external;\\r\\n\\r\\n    function get(bytes32 node) external view returns (ListedENSName memory);\\r\\n\\r\\n    function remove(bytes32 node) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/INameWrapperProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ~0.8.20;\\r\\n\\r\\ninterface INameWrapperProxy {\\r\\n    function setSubnodeRecord(\\r\\n        bytes32 node,\\r\\n        string calldata label,\\r\\n        address owner,\\r\\n        address resolver,\\r\\n        uint64 ttl,\\r\\n        uint32 fuses,\\r\\n        uint64 expiry\\r\\n    ) external returns (bytes32);\\r\\n\\r\\n    function setFuses(\\r\\n        bytes32 node,\\r\\n        uint16 ownerControlledFuses\\r\\n    ) external returns (uint32 newFuses);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/NamespaceListing.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity ~0.8.20;\\r\\n\\r\\nimport {Controllable} from \\\"./controllers/Controllable.sol\\\";\\r\\nimport {INamespaceRegistry} from \\\"./INamespaceRegistry.sol\\\";\\r\\nimport {INameWrapperProxy} from \\\"./INameWrapperProxy.sol\\\";\\r\\nimport {INameWrapper, CANNOT_UNWRAP} from \\\"./ens/INameWrapper.sol\\\";\\r\\nimport {ListedENSName} from \\\"./Types.sol\\\";\\r\\n\\r\\nerror NotPermitted();\\r\\nerror NameNotListed(string nameLabel);\\r\\n\\r\\ncontract NamespaceLister is Controllable {\\r\\n    event NameListed(string nameLabel, bytes32 node, address operator);\\r\\n    event NameUnlisted(string nameLabel, bytes32 node, address operator);\\r\\n\\r\\n    bytes32 private constant ETH_NODE =\\r\\n        0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\r\\n\\r\\n    INamespaceRegistry registry;\\r\\n    INameWrapperProxy wrapperProxy;\\r\\n    INameWrapper nameWrapper;\\r\\n\\r\\n    constructor(\\r\\n        address _nameWrapperProxy,\\r\\n        address _nameWrapper,\\r\\n        address _registry\\r\\n    ) {\\r\\n        nameWrapper = INameWrapper(_nameWrapper);\\r\\n        registry = INamespaceRegistry(_registry);\\r\\n        wrapperProxy = INameWrapperProxy(_nameWrapperProxy);\\r\\n    }\\r\\n\\r\\n    function list(\\r\\n        string memory ensNameLabel,\\r\\n        address paymentReceiver\\r\\n    ) external {\\r\\n        bytes32 nameNode = _namehash(ETH_NODE, ensNameLabel);\\r\\n\\r\\n        require(_hasPermissions(msg.sender, nameNode), \\\"Not permitted\\\");\\r\\n\\r\\n        wrapperProxy.setFuses(nameNode, uint16(CANNOT_UNWRAP));\\r\\n\\r\\n        registry.set(\\r\\n            nameNode,\\r\\n            ListedENSName(ensNameLabel, nameNode, paymentReceiver, true)\\r\\n        );\\r\\n\\r\\n        emit NameListed(ensNameLabel, nameNode, msg.sender);\\r\\n    }\\r\\n\\r\\n    function unlist(string memory ensNameLabel) external {\\r\\n        bytes32 nameNode = _namehash(ETH_NODE, ensNameLabel);\\r\\n\\r\\n        require(_hasPermissions(msg.sender, nameNode), \\\"Not permitted\\\");\\r\\n        if (!registry.get(nameNode).isListed) {\\r\\n            revert NameNotListed(ensNameLabel);\\r\\n        }\\r\\n\\r\\n        registry.remove(nameNode);\\r\\n        emit NameUnlisted(ensNameLabel, nameNode, msg.sender);\\r\\n    }\\r\\n\\r\\n    function _hasPermissions(\\r\\n        address lister,\\r\\n        bytes32 node\\r\\n    ) internal view returns (bool) {\\r\\n        address nameOwner = nameWrapper.ownerOf(uint256(node));\\r\\n\\r\\n        if (nameOwner == address(0)) {\\r\\n            return false;\\r\\n        }\\r\\n        return\\r\\n            nameOwner == lister ||\\r\\n            nameWrapper.isApprovedForAll(nameOwner, lister);\\r\\n    }\\r\\n\\r\\n      function setNameWrapper(address _nameWrapper) external onlyOwner {\\r\\n        nameWrapper = INameWrapper(_nameWrapper);\\r\\n    }\\r\\n\\r\\n    function _namehash(\\r\\n        bytes32 parentNode,\\r\\n        string memory nameLabel\\r\\n    ) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encodePacked(parentNode, _labelhash(nameLabel)));\\r\\n    }\\r\\n\\r\\n    function _labelhash(string memory label) internal pure returns (bytes32) {\\r\\n        return keccak256(bytes(label));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Types.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ~0.8.20;\\r\\n\\r\\nstruct MintSubnameContext {\\r\\n    bytes32 parentNode;\\r\\n    string subnameLabel;\\r\\n    address resolver;\\r\\n    address subnameOwner;\\r\\n    uint32 fuses;\\r\\n    uint256 mintPrice;\\r\\n    uint256 mintFee;\\r\\n    uint64 ttl;\\r\\n    uint64 expiry;\\r\\n}\\r\\n\\r\\nstruct ListedENSName {\\r\\n    string label;\\r\\n    bytes32 nameNode;\\r\\n    address paymentReceiver;\\r\\n    bool isListed;\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nameWrapperProxy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nameWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nameLabel\",\"type\":\"string\"}],\"name\":\"NameNotListed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ControllerChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nameLabel\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NameListed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"nameLabel\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"NameUnlisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"controllers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensNameLabel\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"paymentReceiver\",\"type\":\"address\"}],\"name\":\"list\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nameWrapper\",\"type\":\"address\"}],\"name\":\"setNameWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"ensNameLabel\",\"type\":\"string\"}],\"name\":\"unlist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NamespaceLister", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1", "ConstructorArguments": "00000000000000000000000025adb7e69390fbfeee26f3c8053955d4d4428afd000000000000000000000000d4416b13d2b3a9abae7acd5d6c2bbdbe2568640100000000000000000000000090bac1cc2f8e423a8a7da770621568055daaa8d2", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}