{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\nhttps://www.xiaopangcoin.com/\r\nhttps://x.com/XiaopangEth\r\nhttps://t.me/Xiaopangcoinportal\r\n\r\n\r\n__/\\\\\\_______/\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\\\\\\\\\__________/\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\\\\\\\\\_______/\\\\\\\\\\\\\\\\\\_____/\\\\\\\\\\_____/\\\\\\_____/\\\\\\\\\\\\\\\\\\\\\\\\_        \r\n _\\///\\\\\\___/\\\\\\/__\\/////\\\\\\///____/\\\\\\\\\\\\\\\\\\\\\\\\\\______/\\\\\\///\\\\\\____\\/\\\\\\/////////\\\\\\___/\\\\\\\\\\\\\\\\\\\\\\\\\\__\\/\\\\\\\\\\\\___\\/\\\\\\___/\\\\\\//////////__       \r\n  ___\\///\\\\\\\\\\\\/________\\/\\\\\\______/\\\\\\/////////\\\\\\___/\\\\\\/__\\///\\\\\\__\\/\\\\\\_______\\/\\\\\\__/\\\\\\/////////\\\\\\_\\/\\\\\\/\\\\\\__\\/\\\\\\__/\\\\\\_____________      \r\n   _____\\//\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\__/\\\\\\______\\//\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\//\\\\\\_\\/\\\\\\_\\/\\\\\\____/\\\\\\\\\\\\\\_     \r\n    ______\\/\\\\\\\\__________\\/\\\\\\_____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\/////////____\\/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\\\//\\\\\\\\/\\\\\\_\\/\\\\\\___\\/////\\\\\\_    \r\n     ______/\\\\\\\\\\\\_________\\/\\\\\\_____\\/\\\\\\/////////\\\\\\_\\//\\\\\\______/\\\\\\__\\/\\\\\\_____________\\/\\\\\\/////////\\\\\\_\\/\\\\\\_\\//\\\\\\/\\\\\\_\\/\\\\\\_______\\/\\\\\\_   \r\n      ____/\\\\\\////\\\\\\_______\\/\\\\\\_____\\/\\\\\\_______\\/\\\\\\__\\///\\\\\\__/\\\\\\____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\__\\//\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\_  \r\n       __/\\\\\\/___\\///\\\\\\__/\\\\\\\\\\\\\\\\\\\\\\_\\/\\\\\\_______\\/\\\\\\____\\///\\\\\\\\\\/_____\\/\\\\\\_____________\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\___\\//\\\\\\\\\\_\\//\\\\\\\\\\\\\\\\\\\\\\\\/__ \r\n        _\\///_______\\///__\\///////////__\\///________\\///_______\\/////_______\\///______________\\///________\\///__\\///_____\\/////___\\////////////____\r\n\r\n\r\n\r\n*/\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract Xiaopang is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _isDog;\r\n    mapping(address => bool) private _FeeFree;\r\n    address payable private _marketingWallet;\r\n    uint256 genBlock;\r\n    uint256 private _initialBuyTax = 25;\r\n    uint256 private _initialSellTax = 25;\r\n    uint256 private _finalBuyTax = 0;\r\n    uint256 private _finalSellTax = 0;\r\n    uint256 private _reduceBuyTaxAt = 50;\r\n    uint256 private _reduceSellTaxAt = 50;\r\n\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 420690000 * 10 ** _decimals;\r\n    uint256 public _maxTxAmount = _totalSupply / 100; // 1% of total supply\r\n    uint256 public _maxWalletSize = _totalSupply / 100; // 1% of total supply\r\n    uint256 public _taxSwapThreshold = _totalSupply / 100; // 1% of total supply\r\n    uint256 public _maxTaxSwap = _totalSupply / 100; // 1% of total supply\r\n\r\n    string private constant _name = unicode\"XiaoPang\";\r\n    string private constant _symbol = unicode\"XIAO\";\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event SwapOpen(bool tradingOpen);\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor(address[] memory _dogs) {\r\n        _marketingWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _totalSupply;\r\n        _FeeFree[owner()] = true;\r\n        _FeeFree[address(this)] = true;\r\n        _FeeFree[_marketingWallet] = true;\r\n        setDog(_dogs, true);\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(\r\n        address spender,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(\r\n            sender,\r\n            _msgSender(),\r\n            _allowances[sender][_msgSender()].sub(\r\n                amount,\r\n                \"ERC20: transfer amount exceeds allowance\"\r\n            )\r\n        );\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function unClog() external {\r\n        require(_msgSender() == _marketingWallet);\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0) {\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 taxAmount = calculateTax(from, to, amount);\r\n        enforceTransactionLimits(from, to, amount);\r\n\r\n        if (shouldSwapTokens(to)) {\r\n            performTokenSwap(amount);\r\n        }\r\n\r\n        updateBalances(from, to, amount, taxAmount);\r\n    }\r\n\r\n    function calculateTax(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private view returns (uint256) {\r\n        // If either 'from' or 'to' is excluded from fee, or if the transfer involves the owner, no tax should be applied\r\n        if (\r\n            _FeeFree[from] || _FeeFree[to] || from == owner() || to == owner()\r\n        ) {\r\n            return 0;\r\n        }\r\n\r\n        // Always apply tax if the transaction is a sell to Uniswap\r\n        if (to == uniswapV2Pair && from != address(this)) {\r\n            uint256 sellTaxRate = (block.number > genBlock + _reduceSellTaxAt)\r\n                ? _finalSellTax\r\n                : _initialSellTax;\r\n            return amount.mul(sellTaxRate).div(100);\r\n        }\r\n\r\n        // Apply tax for buy transactions\r\n        uint256 buyTaxRate = (block.number > genBlock + _reduceBuyTaxAt)\r\n            ? _finalBuyTax\r\n            : _initialBuyTax;\r\n        return amount.mul(buyTaxRate).div(100);\r\n    }\r\n\r\n    function enforceTransactionLimits(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private view {\r\n        if (\r\n            from == uniswapV2Pair &&\r\n            to != address(uniswapV2Router) &&\r\n            !_FeeFree[to]\r\n        ) {\r\n            require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n            require(\r\n                balanceOf(to) + amount <= _maxWalletSize,\r\n                \"Exceeds the maxWalletSize.\"\r\n            );\r\n            if (genBlock == block.number) {\r\n                require(_isDog[from] || _isDog[to], \"Not dog\");\r\n            }\r\n        } else if (to != uniswapV2Pair && !_FeeFree[to]) {\r\n            require(\r\n                balanceOf(to) + amount <= _maxWalletSize,\r\n                \"Exceeds the maxWalletSize.\"\r\n            );\r\n        }\r\n    }\r\n\r\n    function shouldSwapTokens(address to) private view returns (bool) {\r\n        return\r\n            !inSwap &&\r\n            to == uniswapV2Pair &&\r\n            swapEnabled &&\r\n            balanceOf(address(this)) > _taxSwapThreshold;\r\n    }\r\n\r\n    function performTokenSwap(uint256 amount) private {\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));\r\n        uint256 contractETHBalance = address(this).balance;\r\n        if (contractETHBalance > 0) {\r\n            sendETHToFee(contractETHBalance);\r\n        }\r\n    }\r\n\r\n    function updateBalances(\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        uint256 taxAmount\r\n    ) private {\r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256) {\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        _maxTxAmount = _totalSupply;\r\n        _maxWalletSize = _totalSupply;\r\n        emit MaxTxAmountUpdated(_totalSupply);\r\n    }\r\n\r\n    function setDog(address[] memory _bots, bool set) internal {\r\n        for (uint256 i = 0; i < _bots.length; i++) {\r\n            _isDog[_bots[i]] = set;\r\n        }\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _marketingWallet.transfer(amount);\r\n    }\r\n\r\n    function rescueETH(uint256 weiAmount) external onlyOwner {\r\n        payable(owner()).transfer(weiAmount);\r\n    }\r\n\r\n    function xiaoJustice() external onlyOwner {\r\n        require(!tradingOpen, \"trading is already open\");\r\n        uniswapV2Router = IUniswapV2Router02(\r\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\r\n        );\r\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\r\n            address(this),\r\n            uniswapV2Router.WETH()\r\n        );\r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balanceOf(address(this)),\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        genBlock = block.number;\r\n\r\n        emit SwapOpen(true);\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_dogs\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tradingOpen\",\"type\":\"bool\"}],\"name\":\"SwapOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unClog\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xiaoJustice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Xiaopang", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000053000000000000000000000000be7e2df64c3c8faddc51644ab7c77f423d469fb9000000000000000000000000166f05ab1bd636499330cd0ed3ad3f0ca36ef00d000000000000000000000000168029b8f716d8f0b35ffff6e3fda24dedafee7e000000000000000000000000380d9886bfb1d5169a16e99abc9ab7e28bde943600000000000000000000000077a0feb8e7024b220939389a5697f7ccdbdb93f90000000000000000000000008cb96429551e6ccd1dd0f6c2f998643c1510c22000000000000000000000000001421f81d9e903a88e96e5644014a0a5efdbcc7d000000000000000000000000f04b26bc52e4d2038508e260b454d090b8c3d118000000000000000000000000f231b14170c7868c003d6343e7217c01fb5c4a0800000000000000000000000014c23b738210d80c7513706f0042d5f6b4e1583400000000000000000000000095723e4f6c6622a8b1f4f248aff2ee334d67ad11000000000000000000000000058033627674738f709d8dbf0a8924dac6a26fc60000000000000000000000007e4b037f9b81e304a1afa029cc024f2c2188548c000000000000000000000000837bf5097b610ba920efbf8f463269f70205c81d000000000000000000000000b83e90c091f8993adb1c0a3a6d9a2da6cbde1b54000000000000000000000000f4783697c4a6c68d1d28a9c9d6fd0b8ac8d986d5000000000000000000000000c19a1b1b148734650089ff6aa1068eba8952ce95000000000000000000000000a7c6cf6133a98aa64093b75bd35e20f9e0d13d8c000000000000000000000000ab723433a95b8f239729a5e379089693749a2615000000000000000000000000abd6187ca597b09961ea37e25986f3a59a82ee6800000000000000000000000014e5528e29c41354f87f33c100a05e3803e5c5390000000000000000000000005eef7e03e2c422230b86311007b800cf036a7d36000000000000000000000000a6746c085c14304ec41726ec639bf1ff3a92b3690000000000000000000000004eab9f9ed2e76d006e38e44a1380659061108fef0000000000000000000000003996077eaf1d72d5f5128833f1ac3b6985b100aa000000000000000000000000121e39cc19c8e8bd831af50e4f75df3832997ffc000000000000000000000000abe8ce03f066a620b30c515c486381f3e30b95be000000000000000000000000227728e91172ad87a2c26828ac8ec077045dedb20000000000000000000000002fc1637609117f6fdfc266060df97a36930d30ea0000000000000000000000002bc81db6cfe001c3517a66bf3966b189592a94ba0000000000000000000000006707fe36f04e37fe71cb3fa533cd2ebb468bccec000000000000000000000000be99683ca86ec4ab0a4749e54097e67a20360a32000000000000000000000000b54db4be30086c58b6c38d45a19b515cc644ff1b00000000000000000000000052f51044db0001ec8315ffdb95977b0f57f8bc56000000000000000000000000630780b5486d6ed01751828fb50ede89d48fee3600000000000000000000000065e9031aa186f6aec29115ca1382a11341840c6400000000000000000000000025bc52478dda8ce43cd010b6a193db826c67dcec000000000000000000000000271426cc882c50b90dafd057c9f943921d4c19b8000000000000000000000000c8e042dc2b97daaefaac7ed4a3599bb18a3284b90000000000000000000000009d367aae6b2aa28e8ae8cc40e662c4e3430bfdc2000000000000000000000000dd350cf55e1ff273d86778a9cc3c197e39fbf8ba0000000000000000000000008148b3278e8fd7610a35390d943430b662b45a70000000000000000000000000c1b15d024ae0ee67558f017d163966ad2720241c0000000000000000000000002cd118790963d289916b7d5d4b094d9cbcea4af30000000000000000000000000c9d4cc43a5470fdb7817d0e2fe0e6ecfe887e5d0000000000000000000000000df88781908872f9aa2dbc81eec4bc28dc8e13520000000000000000000000006fde257efb9485b6338b21269726f9c87acca28500000000000000000000000057a76d533ea7ada073e49a6739ccf70cbaae953c000000000000000000000000612d0f6c1d03d8afa7bdcf46ecd74dad1241bd2e0000000000000000000000009a8d9f6f2958bd03bd5ea8203ed3980c1e0ac470000000000000000000000000f812190cd1d89bd53493aa261f1c3f1acb1a55d40000000000000000000000000a36c0021519be323e157f3d03fcf6d849ae5c60000000000000000000000000b4d49d16c1df29569d01f0e572c77fe5c35a08c10000000000000000000000004db0837cda64701de628e5c93627a595f9e347810000000000000000000000007411fdab22b51115efc58434d21f082ed7591345000000000000000000000000ee6c73f1bab05c9597a3c162d063b2ede73deb6500000000000000000000000028db92d0338e1c13cf33a652dd2febf972b75114000000000000000000000000493a06bc84f94e540f26e9e82104b68325d133b6000000000000000000000000357f9783e74fcfae4755f3cccc82a22cfdb64923000000000000000000000000102039866441924536980a2da4486c4833a3231000000000000000000000000041b4747a69e6a5205b3dd9766d4322918e4efa61000000000000000000000000bf58538dff6fda4d9b1f3199c55f4ceca311ba2d000000000000000000000000d875f94daf4826d901560698731d435259f144c000000000000000000000000071f1ee47bb20532dee0806ce336f23c4dcb8a2270000000000000000000000008ad6433f4d5d1d9cd2310cc9b90ee39d4547347600000000000000000000000053c6a25d1e3e5cc3cca8a9e60985064109a51b220000000000000000000000009ef4ba8d034c6e05f5940de7fea3b83593eb4d2f00000000000000000000000034446839e55fccc4565e6a45bdeb8435d812d2ff00000000000000000000000002898a48c16c2df8c89a7c498d242b58f02b4fd3000000000000000000000000b9a5f1c94531267eb66a3725f8f2b9e6eae4a21e000000000000000000000000e2d3ab5b0531ff794b0c1c48e94fe65788d7eaa200000000000000000000000004a65a7785376a48561a6c67e1f0a89208bc6ddf000000000000000000000000b7765a67b1c15de93c17f8ff9e0e8dc160af54ae000000000000000000000000c5162338c7233d6ed8579bd59334233896ee37ea000000000000000000000000d0890245f24d6db0db1fbf6a0b105590b8413f3d0000000000000000000000004e6d6ea4720ad07c252ed348467dbb1b1ca3e5ed0000000000000000000000001e254ba4d42ce2a74f0926f05796853910a55a380000000000000000000000008c6255f1e0c1fb6e70cfb16159b972da514fc18800000000000000000000000074bc3fa738d04d8341edd81114ed3c41b228b459000000000000000000000000b5d092466c08edb2b56675aaa4f8b58f9f31c6530000000000000000000000008fb1b66b48ea9ecd9e4e4c514e1d2ab1b21e8b1e000000000000000000000000c0d5ee437bb6fa066a84ee41069127736db34ec3000000000000000000000000f9ecc2674944a46b60cea8a5b4b0cd0a7d15cd40", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a45c837c840cc9f2cd49c5a12112b290e852a7fa73d5a4d9c72b3c6a7fb3eb21"}