{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n/**\r\n\u2584\u2584\u2584\u2584\u00b7 \u2584\u2022 \u2584\u258c\u25aa  \u2584\u2584\u258c  \u00b7\u2584\u2584\u2584\u2584      \u2584\u2584\u2584\u2584\u2584 \u2584 .\u2584\u2584\u2584\u2584 .    \u2584\u2584\u2584\u2584\u00b7 \u2584\u2584\u2584 . \u2584\u2584\u2584\u00b7 \u2584\u2584\u2584\r\n\u2590\u2588 \u2580\u2588\u25aa\u2588\u25aa\u2588\u2588\u258c\u2588\u2588 \u2588\u2588\u2022  \u2588\u2588\u25aa \u2588\u2588     \u2022\u2588\u2588  \u2588\u2588\u25aa\u2590\u2588\u2580\u2584.\u2580\u00b7    \u2590\u2588 \u2580\u2588\u25aa\u2580\u2584.\u2580\u00b7\u2590\u2588 \u2580\u2588 \u2580\u2584 \u2588\u00b7\r\n\u2590\u2588\u2580\u2580\u2588\u2584\u2588\u258c\u2590\u2588\u258c\u2590\u2588\u00b7\u2588\u2588\u25aa  \u2590\u2588\u00b7 \u2590\u2588\u258c     \u2590\u2588.\u25aa\u2588\u2588\u2580\u2590\u2588\u2590\u2580\u2580\u25aa\u2584    \u2590\u2588\u2580\u2580\u2588\u2584\u2590\u2580\u2580\u25aa\u2584\u2584\u2588\u2580\u2580\u2588 \u2590\u2580\u2580\u2584\r\n\u2588\u2588\u2584\u25aa\u2590\u2588\u2590\u2588\u2584\u2588\u258c\u2590\u2588\u258c\u2590\u2588\u258c\u2590\u258c\u2588\u2588. \u2588\u2588      \u2590\u2588\u258c\u00b7\u2588\u2588\u258c\u2590\u2580\u2590\u2588\u2584\u2584\u258c    \u2588\u2588\u2584\u25aa\u2590\u2588\u2590\u2588\u2584\u2584\u258c\u2590\u2588 \u25aa\u2590\u258c\u2590\u2588\u2022\u2588\u258c\r\n\u00b7\u2580\u2580\u2580\u2580  \u2580\u2580\u2580 \u2580\u2580\u2580.\u2580\u2580\u2580 \u2580\u2580\u2580\u2580\u2580\u2022      \u2580\u2580\u2580 \u2580\u2580\u2580 \u00b7 \u2580\u2580\u2580     \u00b7\u2580\u2580\u2580\u2580  \u2580\u2580\u2580  \u2580  \u2580 .\u2580  \u2580\r\n           -... ..- .. .-.. -..    - .... .    -... . .- .-.\r\n\r\nbuildthebear.market, buildthebear.online\r\n@buildingthebear on telegram, twitter, github\r\n*/\r\n\r\npragma solidity ^0.8.19;\r\n\r\n\r\n/* - INTERFACES - */\r\n\r\n// ERC-20\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// ERC-20 Metadata\r\ninterface IERC20Metadata is IERC20 {\r\n    function name() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n}\r\n\r\ninterface NFTContract {\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n}\r\n\r\n\r\n/* - CONTRACTS - */\r\n\r\n// ERC-20\r\ncontract ERC20 is IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    string private contractName;\r\n    string private contractSymbol;\r\n\r\n    uint8 private constant DECIMALS = 9;\r\n    uint256 private constant SUPPLY = 1000000 gwei;\r\n\r\n    constructor(string memory n, string memory s) {\r\n        contractName = n;\r\n        contractSymbol = s;\r\n\r\n        _balances[msg.sender] = SUPPLY;\r\n\r\n        emit Transfer(address(0), msg.sender, SUPPLY);\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) { return contractSymbol; }\r\n    function name() external view virtual override returns (string memory) { return contractName; }\r\n    function balanceOf(address account) public view virtual override returns (uint256) { return _balances[account]; }\r\n    function decimals() public pure virtual override returns (uint8) { return DECIMALS; }\r\n    function totalSupply() external view virtual override returns (uint256) { return SUPPLY; }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        address owner = msg.sender;\r\n\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n\r\n        require(currentAllowance >= subtractedValue, \"Allowance cannot be less than zero\");\r\n\r\n        unchecked { _approve(owner, spender, currentAllowance - subtractedValue); }\r\n\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        address owner = msg.sender;\r\n\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"Insufficient allowance\");\r\n\r\n            unchecked { _approve(owner, spender, currentAllowance - amount); }\r\n        }\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n\r\n        _approve(owner, spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"Cannot approve from the zero address\");\r\n        require(spender != address(0), \"Cannot approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\r\n        _transfer(msg.sender, to, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        unchecked {\r\n            _balances[from] -= amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n\r\n        return true;\r\n    }\r\n}\r\n\r\n// \u0295 \u2022\u1d25\u2022\u0294 Build the Bear, Bring the Bull\r\ncontract BuildtheBearSingleStake {\r\n    IERC20 public immutable stakingToken;\r\n    IERC20 public immutable rewardsToken;\r\n\r\n    address public owner;\r\n\r\n    // NFTs with staking rewards\r\n    address[] public nftContracts;\r\n\r\n    // Total staked\r\n    uint public totalSupply;\r\n    // Duration of rewards to be paid out (in seconds)\r\n    uint public duration;\r\n    // Timestamp of when the rewards finish\r\n    uint public finishAt;\r\n    // Minimum of last updated time and reward finish time\r\n    uint public updatedAt;\r\n    // Reward to be paid out per second\r\n    uint public rewardRate;\r\n    // Sum of (reward rate * dt * 1e9 / total supply)\r\n    uint public rewardPerTokenStored;\r\n\r\n    // User address => rewardPerTokenStored\r\n    mapping(address => uint) public userRewardPerTokenPaid;\r\n    // User address => rewards to be claimed\r\n    mapping(address => uint) public rewards;\r\n    // User address => staked amount\r\n    mapping(address => uint) public balanceOf;\r\n\r\n    constructor(address _stakingToken, address _rewardsToken) {\r\n        owner = msg.sender;\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardsToken = IERC20(_rewardsToken);\r\n    }\r\n\r\n    modifier onlyOwner() { require(msg.sender == owner, \"Function can only be called by the contract owner\"); _; }\r\n\r\n    modifier updateReward(address _account) {\r\n        rewardPerTokenStored = rewardPerToken();\r\n        updatedAt = lastTimeRewardApplicable();\r\n\r\n        if (_account != address(0)) {\r\n            rewards[_account] = earned(_account);\r\n            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\r\n        }\r\n\r\n        _;\r\n    }\r\n\r\n    function lastTimeRewardApplicable() public view returns (uint) {\r\n        return block.timestamp <= finishAt ? block.timestamp : finishAt;\r\n    }\r\n\r\n    function rewardPerToken() public view returns (uint) {\r\n        if (totalSupply == 0) {\r\n            return rewardPerTokenStored;\r\n        }\r\n\r\n        return rewardPerTokenStored + (rewardRate * (lastTimeRewardApplicable() - updatedAt) * 1e9) / totalSupply;\r\n    }\r\n\r\n    function stake(uint _amount) external updateReward(msg.sender) {\r\n        require(_amount > 0, \"Must stake some amount\");\r\n\r\n        stakingToken.transferFrom(msg.sender, address(this), _amount);\r\n        balanceOf[msg.sender] += _amount;\r\n        totalSupply += _amount;\r\n    }\r\n\r\n    function withdraw(uint _amount) external updateReward(msg.sender) {\r\n        require(_amount > 0, \"Must withdraw some amount\");\r\n\r\n        balanceOf[msg.sender] -= _amount;\r\n        totalSupply -= _amount;\r\n        stakingToken.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function earned(address _account) public view returns (uint) {\r\n        return ((balanceOf[_account] * (rewardPerToken() - userRewardPerTokenPaid[_account])) / 1e9) + rewards[_account];\r\n    }\r\n\r\n    function getReward() external updateReward(msg.sender) {\r\n        uint reward = rewards[msg.sender];\r\n        uint totalReward = reward;\r\n\r\n        totalReward = applyNFTRewards(reward, msg.sender);\r\n\r\n        if (totalReward > 0) {\r\n            rewards[msg.sender] = 0;\r\n            rewardsToken.transfer(msg.sender, totalReward);\r\n        }\r\n    }\r\n\r\n    function setRewardsDuration(uint _duration) external onlyOwner {\r\n        require(finishAt < block.timestamp, \"Reward duration not finished\");\r\n\r\n        duration = _duration;\r\n    }\r\n\r\n    function setRewardAmount(uint _amount) external onlyOwner updateReward(address(0)) {\r\n        if (block.timestamp >= finishAt) {\r\n            rewardRate = _amount / duration;\r\n        } else {\r\n            uint remainingRewards = (finishAt - block.timestamp) * rewardRate;\r\n\r\n            rewardRate = (_amount + remainingRewards) / duration;\r\n        }\r\n\r\n        require(rewardRate > 0, \"Reward rate must be greater than zero\");\r\n        require(rewardRate * duration <= rewardsToken.balanceOf(address(this)), \"Reward pool not sufficient\");\r\n\r\n        finishAt = block.timestamp + duration;\r\n        updatedAt = block.timestamp;\r\n    }\r\n\r\n    function addNFTContract(address contractAddress) external onlyOwner {\r\n        nftContracts.push(contractAddress);\r\n    }\r\n\r\n    // Rewards scale downwards for any future BtB NFT Collection releases\r\n    // e.g. Base reward + 25% for Early Adopters, Base + 20% for BtB PFP, and so-on with future collections\r\n    function applyNFTRewards(uint baseAmount, address stakeholder) private view returns (uint) {\r\n        uint rewardScale = 25;\r\n        uint rewardAmount;\r\n        uint finalAmount;\r\n\r\n        for(uint8 i = 0; i < nftContracts.length; i++) {\r\n            if (NFTContract(nftContracts[i]).balanceOf(stakeholder) > 0) {\r\n                unchecked {\r\n                    baseAmount > 0 ? rewardAmount += (baseAmount * rewardScale) / 100 : rewardAmount = 0;\r\n                }\r\n            }\r\n\r\n            rewardScale -= 5;\r\n        }\r\n\r\n        finalAmount = baseAmount + rewardAmount;\r\n\r\n        return finalAmount;\r\n    }\r\n}\r\n\r\n/** 01000010 01110101 01101001 01101100 01100100  01110100 01101000 01100101  01000010 01100101 01100001 01110010 */", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"addNFTContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finishAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nftContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BuildtheBearSingleStake", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ab8fefd4cbb4884491053a1d84e7af17317da40c000000000000000000000000ab8fefd4cbb4884491053a1d84e7af17317da40c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://81657c21c2f4972e3d3ca31faea8b4713617dd28902172a600b3e335cd3c5bf4"}