{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/BeefyClient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\nimport {ECDSA} from \\\"openzeppelin/utils/cryptography/ECDSA.sol\\\";\\nimport {SubstrateMerkleProof} from \\\"./utils/SubstrateMerkleProof.sol\\\";\\nimport {Bitfield} from \\\"./utils/Bitfield.sol\\\";\\nimport {Uint16Array, createUint16Array} from \\\"./utils/Uint16Array.sol\\\";\\nimport {Math} from \\\"./utils/Math.sol\\\";\\nimport {MMRProof} from \\\"./utils/MMRProof.sol\\\";\\nimport {ScaleCodec} from \\\"./utils/ScaleCodec.sol\\\";\\n\\n/**\\n * @title BeefyClient\\n *\\n * High-level documentation at https://docs.snowbridge.network/architecture/verification/polkadot\\n *\\n * To submit new commitments, relayers must call the following methods sequentially:\\n * 1. submitInitial: Setup the session for the interactive submission\\n * 2. commitPrevRandao: Commit to a random seed for generating a validator subsampling\\n * 3. createFinalBitfield: Generate the validator subsampling\\n * 4. submitFinal: Complete submission after providing the request validator signatures\\n *\\n */\\ncontract BeefyClient {\\n    using Math for uint16;\\n    using Math for uint256;\\n\\n    /* Events */\\n\\n    /**\\n     * @dev Emitted when the MMR root is updated\\n     * @param mmrRoot the updated MMR root\\n     * @param blockNumber the beefy block number of the updated MMR root\\n     */\\n    event NewMMRRoot(bytes32 mmrRoot, uint64 blockNumber);\\n\\n    /**\\n     * @dev Emitted when a new ticket has been created\\n     * @param relayer The relayer who created the ticket\\n     * @param blockNumber the parent block number of the candidate MMR root\\n     */\\n    event NewTicket(address relayer, uint64 blockNumber);\\n\\n    /* Types */\\n\\n    /**\\n     * @dev The Commitment, with its payload, is the core thing we are trying to verify with\\n     * this contract. It contains an MMR root that commits to the polkadot history, including\\n     * past blocks and parachain blocks and can be used to verify both polkadot and parachain blocks.\\n     */\\n    struct Commitment {\\n        // Relay chain block number\\n        uint32 blockNumber;\\n        // ID of the validator set that signed the commitment\\n        uint64 validatorSetID;\\n        // The payload of the new commitment in beefy justifications (in\\n        // our case, this is a new MMR root for all past polkadot blocks)\\n        PayloadItem[] payload;\\n    }\\n\\n    /**\\n     * @dev Each PayloadItem is a piece of data signed by validators at a particular block.\\n     */\\n    struct PayloadItem {\\n        // An ID that references a description of the data in the payload item.\\n        // Known payload ids can be found [upstream](https://github.com/paritytech/substrate/blob/fe1f8ba1c4f23931ae89c1ada35efb3d908b50f5/primitives/consensus/beefy/src/payload.rs#L27).\\n        bytes2 payloadID;\\n        // The contents of the payload item\\n        bytes data;\\n    }\\n\\n    /**\\n     * @dev The ValidatorProof is a proof used to verify a commitment signature\\n     */\\n    struct ValidatorProof {\\n        // The parity bit to specify the intended solution\\n        uint8 v;\\n        // The x component on the secp256k1 curve\\n        bytes32 r;\\n        // The challenge solution\\n        bytes32 s;\\n        // Leaf index of the validator address in the merkle tree\\n        uint256 index;\\n        // Validator address\\n        address account;\\n        // Merkle proof for the validator\\n        bytes32[] proof;\\n    }\\n\\n    /**\\n     * @dev A ticket tracks working state for the interactive submission of new commitments\\n     */\\n    struct Ticket {\\n        // The block number this ticket was issued\\n        uint64 blockNumber;\\n        // Length of the validator set that signed the commitment\\n        uint32 validatorSetLen;\\n        // The number of signatures required\\n        uint32 numRequiredSignatures;\\n        // The PREVRANDAO seed selected for this ticket session\\n        uint256 prevRandao;\\n        // Hash of a bitfield claiming which validators have signed\\n        bytes32 bitfieldHash;\\n    }\\n\\n    /// @dev The MMRLeaf describes the leaf structure of the MMR\\n    struct MMRLeaf {\\n        // Version of the leaf type\\n        uint8 version;\\n        // Parent number of the block this leaf describes\\n        uint32 parentNumber;\\n        // Parent hash of the block this leaf describes\\n        bytes32 parentHash;\\n        // Validator set id that will be part of consensus for the next block\\n        uint64 nextAuthoritySetID;\\n        // Length of that validator set\\n        uint32 nextAuthoritySetLen;\\n        // Merkle root of all public keys in that validator set\\n        bytes32 nextAuthoritySetRoot;\\n        // Merkle root of all parachain headers in this block\\n        bytes32 parachainHeadsRoot;\\n    }\\n\\n    /**\\n     * @dev The ValidatorSet describes a BEEFY validator set\\n     */\\n    struct ValidatorSet {\\n        // Identifier for the set\\n        uint128 id;\\n        // Number of validators in the set\\n        uint128 length;\\n        // Merkle root of BEEFY validator addresses\\n        bytes32 root;\\n    }\\n\\n    /**\\n     * @dev The ValidatorSetState describes a BEEFY validator set along with signature usage counters\\n     */\\n    struct ValidatorSetState {\\n        // Identifier for the set\\n        uint128 id;\\n        // Number of validators in the set\\n        uint128 length;\\n        // Merkle root of BEEFY validator addresses\\n        bytes32 root;\\n        // Number of times a validator signature has been used\\n        Uint16Array usageCounters;\\n    }\\n\\n    /* State */\\n\\n    /// @dev The latest verified MMR root\\n    bytes32 public latestMMRRoot;\\n\\n    /// @dev The block number in the relay chain in which the latest MMR root was emitted\\n    uint64 public latestBeefyBlock;\\n\\n    /// @dev State of the current validator set\\n    ValidatorSetState public currentValidatorSet;\\n\\n    /// @dev State of the next validator set\\n    ValidatorSetState public nextValidatorSet;\\n\\n    /// @dev Pending tickets for commitment submission\\n    mapping(bytes32 ticketID => Ticket) public tickets;\\n\\n    /* Constants */\\n\\n    /**\\n     * @dev Beefy payload id for MMR Root payload items:\\n     * https://github.com/paritytech/substrate/blob/fe1f8ba1c4f23931ae89c1ada35efb3d908b50f5/primitives/consensus/beefy/src/payload.rs#L33\\n     */\\n    bytes2 public constant MMR_ROOT_ID = bytes2(\\\"mh\\\");\\n\\n    /**\\n     * @dev Minimum delay in number of blocks that a relayer must wait between calling\\n     * submitInitial and commitPrevRandao. In production this should be set to MAX_SEED_LOOKAHEAD:\\n     * https://eth2book.info/altair/part3/config/preset#max_seed_lookahead\\n     */\\n    uint256 public immutable randaoCommitDelay;\\n\\n    /**\\n     * @dev after randaoCommitDelay is reached, relayer must\\n     * call commitPrevRandao within this number of blocks.\\n     * Without this expiration, relayers can roll the dice infinitely to get the subsampling\\n     * they desire.\\n     */\\n    uint256 public immutable randaoCommitExpiration;\\n\\n    /**\\n     * @dev Minimum number of signatures required to validate a new commitment. This parameter\\n     * is calculated based on `randaoCommitExpiration`. See ~/scripts/beefy_signature_sampling.py\\n     * for the calculation.\\n     */\\n    uint256 public immutable minNumRequiredSignatures;\\n\\n    /* Errors */\\n    error InvalidBitfield();\\n    error InvalidBitfieldLength();\\n    error InvalidCommitment();\\n    error InvalidMMRLeaf();\\n    error InvalidMMRLeafProof();\\n    error InvalidMMRRootLength();\\n    error InvalidSignature();\\n    error InvalidTicket();\\n    error InvalidValidatorProof();\\n    error InvalidValidatorProofLength();\\n    error CommitmentNotRelevant();\\n    error NotEnoughClaims();\\n    error PrevRandaoAlreadyCaptured();\\n    error PrevRandaoNotCaptured();\\n    error StaleCommitment();\\n    error TicketExpired();\\n    error WaitPeriodNotOver();\\n\\n    constructor(\\n        uint256 _randaoCommitDelay,\\n        uint256 _randaoCommitExpiration,\\n        uint256 _minNumRequiredSignatures,\\n        uint64 _initialBeefyBlock,\\n        ValidatorSet memory _initialValidatorSet,\\n        ValidatorSet memory _nextValidatorSet\\n    ) {\\n        if (_nextValidatorSet.id != _initialValidatorSet.id + 1) {\\n            revert(\\\"invalid-constructor-params\\\");\\n        }\\n        randaoCommitDelay = _randaoCommitDelay;\\n        randaoCommitExpiration = _randaoCommitExpiration;\\n        minNumRequiredSignatures = _minNumRequiredSignatures;\\n        latestBeefyBlock = _initialBeefyBlock;\\n        currentValidatorSet.id = _initialValidatorSet.id;\\n        currentValidatorSet.length = _initialValidatorSet.length;\\n        currentValidatorSet.root = _initialValidatorSet.root;\\n        currentValidatorSet.usageCounters = createUint16Array(currentValidatorSet.length);\\n        nextValidatorSet.id = _nextValidatorSet.id;\\n        nextValidatorSet.length = _nextValidatorSet.length;\\n        nextValidatorSet.root = _nextValidatorSet.root;\\n        nextValidatorSet.usageCounters = createUint16Array(nextValidatorSet.length);\\n    }\\n\\n    /* External Functions */\\n\\n    /**\\n     * @dev Begin submission of commitment\\n     * @param commitment contains the commitment signed by the validators\\n     * @param bitfield a bitfield claiming which validators have signed the commitment\\n     * @param proof a proof that a single validator from currentValidatorSet has signed the commitment\\n     */\\n    function submitInitial(Commitment calldata commitment, uint256[] calldata bitfield, ValidatorProof calldata proof)\\n        external\\n    {\\n        if (commitment.blockNumber <= latestBeefyBlock) {\\n            revert StaleCommitment();\\n        }\\n\\n        ValidatorSetState storage vset;\\n        uint16 signatureUsageCount;\\n        if (commitment.validatorSetID == currentValidatorSet.id) {\\n            signatureUsageCount = currentValidatorSet.usageCounters.get(proof.index);\\n            currentValidatorSet.usageCounters.set(proof.index, signatureUsageCount.saturatingAdd(1));\\n            vset = currentValidatorSet;\\n        } else if (commitment.validatorSetID == nextValidatorSet.id) {\\n            signatureUsageCount = nextValidatorSet.usageCounters.get(proof.index);\\n            nextValidatorSet.usageCounters.set(proof.index, signatureUsageCount.saturatingAdd(1));\\n            vset = nextValidatorSet;\\n        } else {\\n            revert InvalidCommitment();\\n        }\\n\\n        // Check if merkle proof is valid based on the validatorSetRoot and if proof is included in bitfield\\n        if (!isValidatorInSet(vset, proof.account, proof.index, proof.proof) || !Bitfield.isSet(bitfield, proof.index))\\n        {\\n            revert InvalidValidatorProof();\\n        }\\n\\n        // Check if validatorSignature is correct, ie. check if it matches\\n        // the signature of senderPublicKey on the commitmentHash\\n        bytes32 commitmentHash = keccak256(encodeCommitment(commitment));\\n        if (ECDSA.recover(commitmentHash, proof.v, proof.r, proof.s) != proof.account) {\\n            revert InvalidSignature();\\n        }\\n\\n        // For the initial submission, the supplied bitfield should claim that more than\\n        // two thirds of the validator set have sign the commitment\\n        if (Bitfield.countSetBits(bitfield) < computeQuorum(vset.length)) {\\n            revert NotEnoughClaims();\\n        }\\n\\n        tickets[createTicketID(msg.sender, commitmentHash)] = Ticket({\\n            blockNumber: uint64(block.number),\\n            validatorSetLen: uint32(vset.length),\\n            numRequiredSignatures: uint32(\\n                computeNumRequiredSignatures(vset.length, signatureUsageCount, minNumRequiredSignatures)\\n                ),\\n            prevRandao: 0,\\n            bitfieldHash: keccak256(abi.encodePacked(bitfield))\\n        });\\n\\n        emit NewTicket(msg.sender, commitment.blockNumber);\\n    }\\n\\n    /**\\n     * @dev Capture PREVRANDAO\\n     * @param commitmentHash contains the commitmentHash signed by the validators\\n     */\\n    function commitPrevRandao(bytes32 commitmentHash) external {\\n        bytes32 ticketID = createTicketID(msg.sender, commitmentHash);\\n        Ticket storage ticket = tickets[ticketID];\\n\\n        if (ticket.blockNumber == 0) {\\n            revert InvalidTicket();\\n        }\\n\\n        if (ticket.prevRandao != 0) {\\n            revert PrevRandaoAlreadyCaptured();\\n        }\\n\\n        // relayer must wait `randaoCommitDelay` blocks\\n        if (block.number < ticket.blockNumber + randaoCommitDelay) {\\n            revert WaitPeriodNotOver();\\n        }\\n\\n        // relayer can capture within `randaoCommitExpiration` blocks\\n        if (block.number > ticket.blockNumber + randaoCommitDelay + randaoCommitExpiration) {\\n            delete tickets[ticketID];\\n            revert TicketExpired();\\n        }\\n\\n        // Post-merge, the difficulty opcode now returns PREVRANDAO\\n        ticket.prevRandao = block.prevrandao;\\n    }\\n\\n    /**\\n     * @dev Submit a commitment and leaf for final verification\\n     * @param commitment contains the full commitment that was used for the commitmentHash\\n     * @param bitfield claiming which validators have signed the commitment\\n     * @param proofs a struct containing the data needed to verify all validator signatures\\n     * @param leaf an MMR leaf provable using the MMR root in the commitment payload\\n     * @param leafProof an MMR leaf proof\\n     * @param leafProofOrder a bitfield describing the order of each item (left vs right)\\n     */\\n    function submitFinal(\\n        Commitment calldata commitment,\\n        uint256[] calldata bitfield,\\n        ValidatorProof[] calldata proofs,\\n        MMRLeaf calldata leaf,\\n        bytes32[] calldata leafProof,\\n        uint256 leafProofOrder\\n    ) external {\\n        bytes32 commitmentHash = keccak256(encodeCommitment(commitment));\\n        bytes32 ticketID = createTicketID(msg.sender, commitmentHash);\\n        validateTicket(ticketID, commitment, bitfield);\\n\\n        bool is_next_session = false;\\n        ValidatorSetState storage vset;\\n        if (commitment.validatorSetID == nextValidatorSet.id) {\\n            is_next_session = true;\\n            vset = nextValidatorSet;\\n        } else if (commitment.validatorSetID == currentValidatorSet.id) {\\n            vset = currentValidatorSet;\\n        } else {\\n            revert InvalidCommitment();\\n        }\\n\\n        verifyCommitment(commitmentHash, ticketID, bitfield, vset, proofs);\\n\\n        bytes32 newMMRRoot = ensureProvidesMMRRoot(commitment);\\n\\n        if (is_next_session) {\\n            if (leaf.nextAuthoritySetID != nextValidatorSet.id + 1) {\\n                revert InvalidMMRLeaf();\\n            }\\n            bool leafIsValid =\\n                MMRProof.verifyLeafProof(newMMRRoot, keccak256(encodeMMRLeaf(leaf)), leafProof, leafProofOrder);\\n            if (!leafIsValid) {\\n                revert InvalidMMRLeafProof();\\n            }\\n            currentValidatorSet = nextValidatorSet;\\n            nextValidatorSet.id = leaf.nextAuthoritySetID;\\n            nextValidatorSet.length = leaf.nextAuthoritySetLen;\\n            nextValidatorSet.root = leaf.nextAuthoritySetRoot;\\n            nextValidatorSet.usageCounters = createUint16Array(leaf.nextAuthoritySetLen);\\n        }\\n\\n        latestMMRRoot = newMMRRoot;\\n        latestBeefyBlock = commitment.blockNumber;\\n        delete tickets[ticketID];\\n\\n        emit NewMMRRoot(newMMRRoot, commitment.blockNumber);\\n    }\\n\\n    /**\\n     * @dev Verify that the supplied MMR leaf is included in the latest verified MMR root.\\n     * @param leafHash contains the merkle leaf to be verified\\n     * @param proof contains simplified mmr proof\\n     * @param proofOrder a bitfield describing the order of each item (left vs right)\\n     */\\n    function verifyMMRLeafProof(bytes32 leafHash, bytes32[] calldata proof, uint256 proofOrder)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return MMRProof.verifyLeafProof(latestMMRRoot, leafHash, proof, proofOrder);\\n    }\\n\\n    /**\\n     * @dev Helper to create an initial validator bitfield.\\n     * @param bitsToSet contains indexes of all signed validators, should be deduplicated\\n     * @param length of validator set\\n     */\\n    function createInitialBitfield(uint256[] calldata bitsToSet, uint256 length)\\n        external\\n        pure\\n        returns (uint256[] memory)\\n    {\\n        if (length < bitsToSet.length) {\\n            revert InvalidBitfieldLength();\\n        }\\n        return Bitfield.createBitfield(bitsToSet, length);\\n    }\\n\\n    /**\\n     * @dev Helper to create a final bitfield, with subsampled validator selections\\n     * @param commitmentHash contains the commitmentHash signed by the validators\\n     * @param bitfield claiming which validators have signed the commitment\\n     */\\n    function createFinalBitfield(bytes32 commitmentHash, uint256[] calldata bitfield)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n        Ticket storage ticket = tickets[createTicketID(msg.sender, commitmentHash)];\\n        if (ticket.bitfieldHash != keccak256(abi.encodePacked(bitfield))) {\\n            revert InvalidBitfield();\\n        }\\n        return Bitfield.subsample(ticket.prevRandao, bitfield, ticket.numRequiredSignatures, ticket.validatorSetLen);\\n    }\\n\\n    /* Internal Functions */\\n\\n    // Creates a unique ticket ID for a new interactive prover-verifier session\\n    function createTicketID(address account, bytes32 commitmentHash) internal pure returns (bytes32 value) {\\n        assembly {\\n            mstore(0x00, account)\\n            mstore(0x20, commitmentHash)\\n            value := keccak256(0x0, 0x40)\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates the number of required signatures for `submitFinal`.\\n     * @param validatorSetLen The length of the validator set\\n     * @param signatureUsageCount A counter of the number of times the validator signature was previously used in a call to `submitInitial` within the session.\\n     * @param minRequiredSignatures The minimum amount of signatures to verify\\n     */\\n    // For more details on the calculation, read the following:\\n    // 1. https://docs.snowbridge.network/architecture/verification/polkadot#signature-sampling\\n    // 2. https://hackmd.io/9OedC7icR5m-in_moUZ_WQ\\n    function computeNumRequiredSignatures(\\n        uint256 validatorSetLen,\\n        uint256 signatureUsageCount,\\n        uint256 minRequiredSignatures\\n    ) internal pure returns (uint256) {\\n        // Start with the minimum number of signatures.\\n        uint256 numRequiredSignatures = minRequiredSignatures;\\n        // Add signatures based on the number of validators in the validator set.\\n        numRequiredSignatures += Math.log2(validatorSetLen, Math.Rounding.Ceil);\\n        // Add signatures based on the signature usage count.\\n        numRequiredSignatures += 1 + (2 * Math.log2(signatureUsageCount, Math.Rounding.Ceil));\\n        // Never require more signatures than a 2/3 majority\\n        return Math.min(numRequiredSignatures, computeQuorum(validatorSetLen));\\n    }\\n\\n    /**\\n     * @dev Calculates 2/3 majority required for quorum for a given number of validators.\\n     * @param numValidators The number of validators in the validator set.\\n     */\\n    function computeQuorum(uint256 numValidators) internal pure returns (uint256) {\\n        return numValidators - (numValidators - 1) / 3;\\n    }\\n\\n    /**\\n     * @dev Verify commitment using the supplied signature proofs\\n     */\\n    function verifyCommitment(\\n        bytes32 commitmentHash,\\n        bytes32 ticketID,\\n        uint256[] calldata bitfield,\\n        ValidatorSetState storage vset,\\n        ValidatorProof[] calldata proofs\\n    ) internal view {\\n        Ticket storage ticket = tickets[ticketID];\\n        // Verify that enough signature proofs have been supplied\\n        uint256 numRequiredSignatures = ticket.numRequiredSignatures;\\n        if (proofs.length != numRequiredSignatures) {\\n            revert InvalidValidatorProofLength();\\n        }\\n\\n        // Generate final bitfield indicating which validators need to be included in the proofs.\\n        uint256[] memory finalbitfield =\\n            Bitfield.subsample(ticket.prevRandao, bitfield, numRequiredSignatures, vset.length);\\n\\n        for (uint256 i = 0; i < proofs.length; i++) {\\n            ValidatorProof calldata proof = proofs[i];\\n\\n            // Check that validator is in bitfield\\n            if (!Bitfield.isSet(finalbitfield, proof.index)) {\\n                revert InvalidValidatorProof();\\n            }\\n\\n            // Check that validator is actually in a validator set\\n            if (!isValidatorInSet(vset, proof.account, proof.index, proof.proof)) {\\n                revert InvalidValidatorProof();\\n            }\\n\\n            // Check that validator signed the commitment\\n            if (ECDSA.recover(commitmentHash, proof.v, proof.r, proof.s) != proof.account) {\\n                revert InvalidSignature();\\n            }\\n\\n            // Ensure no validator can appear more than once in bitfield\\n            Bitfield.unset(finalbitfield, proof.index);\\n        }\\n    }\\n\\n    // Ensure that the commitment provides a new MMR root\\n    function ensureProvidesMMRRoot(Commitment calldata commitment) internal pure returns (bytes32) {\\n        for (uint256 i = 0; i < commitment.payload.length; i++) {\\n            if (commitment.payload[i].payloadID == MMR_ROOT_ID) {\\n                if (commitment.payload[i].data.length != 32) {\\n                    revert InvalidMMRRootLength();\\n                } else {\\n                    return bytes32(commitment.payload[i].data);\\n                }\\n            }\\n        }\\n        revert CommitmentNotRelevant();\\n    }\\n\\n    function encodeCommitment(Commitment calldata commitment) internal pure returns (bytes memory) {\\n        return bytes.concat(\\n            encodeCommitmentPayload(commitment.payload),\\n            ScaleCodec.encodeU32(commitment.blockNumber),\\n            ScaleCodec.encodeU64(commitment.validatorSetID)\\n        );\\n    }\\n\\n    function encodeCommitmentPayload(PayloadItem[] calldata items) internal pure returns (bytes memory) {\\n        bytes memory payload = ScaleCodec.checkedEncodeCompactU32(items.length);\\n        for (uint256 i = 0; i < items.length; i++) {\\n            payload = bytes.concat(\\n                payload, items[i].payloadID, ScaleCodec.checkedEncodeCompactU32(items[i].data.length), items[i].data\\n            );\\n        }\\n\\n        return payload;\\n    }\\n\\n    function encodeMMRLeaf(MMRLeaf calldata leaf) internal pure returns (bytes memory) {\\n        return bytes.concat(\\n            ScaleCodec.encodeU8(leaf.version),\\n            ScaleCodec.encodeU32(leaf.parentNumber),\\n            leaf.parentHash,\\n            ScaleCodec.encodeU64(leaf.nextAuthoritySetID),\\n            ScaleCodec.encodeU32(leaf.nextAuthoritySetLen),\\n            leaf.nextAuthoritySetRoot,\\n            leaf.parachainHeadsRoot\\n        );\\n    }\\n\\n    /**\\n     * @dev Checks if a validators address is a member of the merkle tree\\n     * @param vset The validator set\\n     * @param account The address of the validator to check for inclusion in `vset`.\\n     * @param index The leaf index of the account in the merkle tree of validator set addresses.\\n     * @param proof Merkle proof required for validation of the address\\n     * @return true if the validator is in the set\\n     */\\n    function isValidatorInSet(ValidatorSetState storage vset, address account, uint256 index, bytes32[] calldata proof)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bytes32 hashedLeaf = keccak256(abi.encodePacked(account));\\n        return SubstrateMerkleProof.verify(vset.root, hashedLeaf, index, vset.length, proof);\\n    }\\n\\n    /**\\n     * @dev Basic validation of a ticket for submitFinal\\n     */\\n    function validateTicket(bytes32 ticketID, Commitment calldata commitment, uint256[] calldata bitfield)\\n        internal\\n        view\\n    {\\n        Ticket storage ticket = tickets[ticketID];\\n\\n        if (ticket.blockNumber == 0) {\\n            // submitInitial hasn't been called yet\\n            revert InvalidTicket();\\n        }\\n\\n        if (ticket.prevRandao == 0) {\\n            // commitPrevRandao hasn't been called yet\\n            revert PrevRandaoNotCaptured();\\n        }\\n\\n        if (commitment.blockNumber <= latestBeefyBlock) {\\n            // ticket is obsolete\\n            revert StaleCommitment();\\n        }\\n\\n        if (ticket.bitfieldHash != keccak256(abi.encodePacked(bitfield))) {\\n            // The provided claims bitfield isn't the same one that was\\n            // passed to submitInitial\\n            revert InvalidBitfield();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/SubstrateMerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\n// Used to verify merkle proofs generated by https://github.com/paritytech/substrate/tree/master/utils/binary-merkle-tree\\nlibrary SubstrateMerkleProof {\\n    /**\\n     * @notice Verify that a specific leaf element is part of the Merkle Tree at a specific position in the tree\\n     *\\n     * The tree would have been constructed using\\n     * https://paritytech.github.io/substrate/master/binary_merkle_tree/fn.merkle_root.html\\n     *\\n     * This implementation adapted from\\n     * https://paritytech.github.io/substrate/master/binary_merkle_tree/fn.verify_proof.html\\n     *\\n     * @param root the root of the merkle tree\\n     * @param leaf the leaf which needs to be proven\\n     * @param position the position of the leaf, index starting with 0\\n     * @param width the width or number of leaves in the tree\\n     * @param proof the array of proofs to help verify the leaf's membership, ordered from leaf to root\\n     * @return a boolean value representing the success or failure of the operation\\n     */\\n    function verify(bytes32 root, bytes32 leaf, uint256 position, uint256 width, bytes32[] calldata proof)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        if (position >= width) {\\n            return false;\\n        }\\n        return root == computeRoot(leaf, position, width, proof);\\n    }\\n\\n    function computeRoot(bytes32 leaf, uint256 position, uint256 width, bytes32[] calldata proof)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 node = leaf;\\n        unchecked {\\n            for (uint256 i = 0; i < proof.length; i++) {\\n                if (position & 1 == 1 || position + 1 == width) {\\n                    node = efficientHash(proof[i], node);\\n                } else {\\n                    node = efficientHash(node, proof[i]);\\n                }\\n                position = position >> 1;\\n                width = ((width - 1) >> 1) + 1;\\n            }\\n            return node;\\n        }\\n    }\\n\\n    function efficientHash(bytes32 a, bytes32 b) internal pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Bitfield.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\nimport {Bits} from \\\"./Bits.sol\\\";\\n\\nlibrary Bitfield {\\n    using Bits for uint256;\\n\\n    /**\\n     * @dev Constants used to efficiently calculate the hamming weight of a bitfield. See\\n     * https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation for an explanation of those constants.\\n     */\\n    uint256 internal constant M1 = 0x5555555555555555555555555555555555555555555555555555555555555555;\\n    uint256 internal constant M2 = 0x3333333333333333333333333333333333333333333333333333333333333333;\\n    uint256 internal constant M4 = 0x0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f;\\n    uint256 internal constant M8 = 0x00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff;\\n    uint256 internal constant M16 = 0x0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff;\\n    uint256 internal constant M32 = 0x00000000ffffffff00000000ffffffff00000000ffffffff00000000ffffffff;\\n    uint256 internal constant M64 = 0x0000000000000000ffffffffffffffff0000000000000000ffffffffffffffff;\\n    uint256 internal constant M128 = 0x00000000000000000000000000000000ffffffffffffffffffffffffffffffff;\\n\\n    uint256 internal constant ONE = uint256(1);\\n\\n    /**\\n     * @notice Core subsampling algorithm. Draws a random number, derives an index in the bitfield, and sets the bit if it is in the `prior` and not\\n     * yet set. Repeats that `n` times.\\n     * @param seed Source of randomness for selecting validator signatures.\\n     * @param prior Bitfield indicating which validators claim to have signed the commitment.\\n     * @param n Number of unique bits in prior that must be set in the result. Must be <= number of set bits in `prior`.\\n     * @param length Length of the bitfield prior to draw bits from. Must be <= prior.length * 256.\\n     */\\n    function subsample(uint256 seed, uint256[] memory prior, uint256 n, uint256 length)\\n        internal\\n        pure\\n        returns (uint256[] memory bitfield)\\n    {\\n        bitfield = new uint256[](prior.length);\\n        uint256 found = 0;\\n\\n        for (uint256 i = 0; found < n;) {\\n            uint256 index = makeIndex(seed, i, length);\\n\\n            // require randomly selected bit to be set in prior and not yet set in bitfield\\n            if (!isSet(prior, index) || isSet(bitfield, index)) {\\n                unchecked {\\n                    i++;\\n                }\\n                continue;\\n            }\\n\\n            set(bitfield, index);\\n\\n            unchecked {\\n                found++;\\n                i++;\\n            }\\n        }\\n\\n        return bitfield;\\n    }\\n\\n    /**\\n     * @dev Helper to create a bitfield.\\n     */\\n    function createBitfield(uint256[] calldata bitsToSet, uint256 length)\\n        internal\\n        pure\\n        returns (uint256[] memory bitfield)\\n    {\\n        // Calculate length of uint256 array based on rounding up to number of uint256 needed\\n        uint256 arrayLength = (length + 255) / 256;\\n\\n        bitfield = new uint256[](arrayLength);\\n\\n        for (uint256 i = 0; i < bitsToSet.length; i++) {\\n            set(bitfield, bitsToSet[i]);\\n        }\\n\\n        return bitfield;\\n    }\\n\\n    /**\\n     * @notice Calculates the number of set bits by using the hamming weight of the bitfield.\\n     * The algorithm below is implemented after https://en.wikipedia.org/wiki/Hamming_weight#Efficient_implementation.\\n     * Further improvements are possible, see the article above.\\n     */\\n    function countSetBits(uint256[] memory self) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 count = 0;\\n            for (uint256 i = 0; i < self.length; i++) {\\n                uint256 x = self[i];\\n                x = (x & M1) + ((x >> 1) & M1); //put count of each  2 bits into those  2 bits\\n                x = (x & M2) + ((x >> 2) & M2); //put count of each  4 bits into those  4 bits\\n                x = (x & M4) + ((x >> 4) & M4); //put count of each  8 bits into those  8 bits\\n                x = (x & M8) + ((x >> 8) & M8); //put count of each 16 bits into those 16 bits\\n                x = (x & M16) + ((x >> 16) & M16); //put count of each 32 bits into those 32 bits\\n                x = (x & M32) + ((x >> 32) & M32); //put count of each 64 bits into those 64 bits\\n                x = (x & M64) + ((x >> 64) & M64); //put count of each 128 bits into those 128 bits\\n                x = (x & M128) + ((x >> 128) & M128); //put count of each 256 bits into those 256 bits\\n                count += x;\\n            }\\n            return count;\\n        }\\n    }\\n\\n    function isSet(uint256[] memory self, uint256 index) internal pure returns (bool) {\\n        uint256 element = index >> 8;\\n        return self[element].bit(uint8(index)) == 1;\\n    }\\n\\n    function set(uint256[] memory self, uint256 index) internal pure {\\n        uint256 element = index >> 8;\\n        self[element] = self[element].setBit(uint8(index));\\n    }\\n\\n    function unset(uint256[] memory self, uint256 index) internal pure {\\n        uint256 element = index >> 8;\\n        self[element] = self[element].clearBit(uint8(index));\\n    }\\n\\n    function makeIndex(uint256 seed, uint256 iteration, uint256 length) internal pure returns (uint256 index) {\\n        assembly {\\n            mstore(0x00, seed)\\n            mstore(0x20, iteration)\\n            index := mod(keccak256(0x00, 0x40), length)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Uint16Array.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\n/**\\n * @title A utility library for 16 bit counters packed in 256 bit array.\\n * @dev The BeefyClient needs to store a count of how many times a validators signature is used. In solidity\\n * a uint16 would take up as much space as a uin256 in storage, making storing counters for 1000 validators\\n * expensive in terms of gas. The BeefyClient only needs 16 bits per counter. This library allows us to pack\\n * 16 uint16 into a single uint256 and save 16x storage.\\n *\\n * Layout of 32 counters (2 uint256)\\n * We store all counts in a single large uint256 array and convert from index from the logical uint16 array\\n * to the physical uint256 array.\\n *\\n *           0                                               1                                               2\\n * uint256[] |-- -- -- -- -- -- -- -- -- -- -- -- YY -- -- --|-- -- -- -- -- -- XX -- -- -- -- -- -- -- -- --|\\n * uint16[]  |--|--|--|--|--|--|--|--|--|--|--|--|YY|--|--|--|--|--|--|--|--|--|XX|--|--|--|--|--|--|--|--|--|\\n *           0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32\\n *\\n * Logical Index Layout\\n * We use the first 4\\n * |-------...---------|----|\\n * 256                 4    0\\n *        ^index          ^bit-index\\n *\\n * In the above table counter YY is at logical index 12 in the uint16 array. It will convert to a physical\\n * index of 0 in the physical uint256 array and then to bit-index of 192 to 207 of that uint256. In the\\n * above table counter XX is at logical index 22. It will convert to a physical index of 1 in the array and\\n * then to bit-index 96 to 111 of uint256[1].\\n */\\nusing {get, set} for Uint16Array global;\\n\\nerror IndexOutOfBounds();\\n\\n/**\\n * @dev stores the backing array and the length.\\n */\\nstruct Uint16Array {\\n    uint256[] data;\\n    uint256 length;\\n}\\n\\n/**\\n * @dev Creates a new counter which can store at least `length` counters.\\n * @param length The amount of counters.\\n */\\nfunction createUint16Array(uint256 length) pure returns (Uint16Array memory) {\\n    // create space for `length` elements and round up if needed.\\n    uint256 bufferLength = length / 16 + (length % 16 == 0 ? 0 : 1);\\n    return Uint16Array({data: new uint256[](bufferLength), length: length});\\n}\\n\\n/**\\n * @dev Gets the counter at the logical index\\n * @param self The array.\\n * @param index The logical index.\\n */\\nfunction get(Uint16Array storage self, uint256 index) view returns (uint16) {\\n    if (index >= self.length) {\\n        revert IndexOutOfBounds();\\n    }\\n    // Right-shift the index by 4. This truncates the first 4 bits (bit-index) leaving us with the index\\n    // into the array.\\n    uint256 element = index >> 4;\\n    // Mask out the first 4 bits of the logical index to give us the bit-index.\\n    uint8 inside = uint8(index) & 0x0F;\\n    // find the element in the array, shift until its bit index and mask to only take the first 16 bits.\\n    return uint16((self.data[element] >> (16 * inside)) & 0xFFFF);\\n}\\n\\n/**\\n * @dev Sets the counter at the logical index.\\n * @param self The array.\\n * @param index The logical index of the counter in the array.\\n * @param value The value to set the counter to.\\n */\\nfunction set(Uint16Array storage self, uint256 index, uint16 value) {\\n    if (index >= self.length) {\\n        revert IndexOutOfBounds();\\n    }\\n    // Right-shift the index by 4. This truncates the first 4 bits (bit-index) leaving us with the index\\n    // into the array.\\n    uint256 element = index >> 4;\\n    // Mask out the first 4 bytes of the logical index to give us the bit-index.\\n    uint8 inside = uint8(index) & 0x0F;\\n    // Create a zero mask which will clear the existing value at the bit-index.\\n    uint256 zero = ~(uint256(0xFFFF) << (16 * inside));\\n    // Shift the value to the bit index.\\n    uint256 shiftedValue = uint256(value) << (16 * inside);\\n    // Take the element, apply the zero mask to clear the existing value, and then apply the shifted value with bitwise or.\\n    self.data[element] = self.data[element] & zero | shiftedValue;\\n}\\n\"\r\n    },\r\n    \"src/utils/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// SPDX-FileCopyrightText: 2023 OpenZeppelin\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\n// Code from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/Math.sol\\npragma solidity 0.8.25;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n\\n    /**\\n     * @dev Safely adds two unsigned 16-bit integers, preventing overflow by saturating to max uint16.\\n     */\\n    function saturatingAdd(uint16 a, uint16 b) internal pure returns (uint16) {\\n        unchecked {\\n            uint16 c = a + b;\\n            if (c < a) {\\n                return 0xFFFF;\\n            }\\n            return c;\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely subtracts two unsigned 256-bit integers, preventing overflow by saturating to min uint256.\\n     */\\n    function saturatingSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            if (b >= a) {\\n                return 0;\\n            }\\n            return a - b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/MMRProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\nlibrary MMRProof {\\n    error ProofSizeExceeded();\\n\\n    uint256 internal constant MAXIMUM_PROOF_SIZE = 256;\\n\\n    /**\\n     * @dev Verify inclusion of a leaf in an MMR\\n     * @param root MMR root hash\\n     * @param leafHash leaf hash\\n     * @param proof an array of hashes\\n     * @param proofOrder a bitfield describing the order of each item (left vs right)\\n     */\\n    function verifyLeafProof(bytes32 root, bytes32 leafHash, bytes32[] calldata proof, uint256 proofOrder)\\n        internal\\n        pure\\n        returns (bool)\\n    {\\n        // Size of the proof is bounded, since `proofOrder` can only contain `MAXIMUM_PROOF_SIZE` orderings.\\n        if (proof.length > MAXIMUM_PROOF_SIZE) {\\n            revert ProofSizeExceeded();\\n        }\\n\\n        bytes32 acc = leafHash;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            acc = hashPairs(acc, proof[i], (proofOrder >> i) & 1);\\n        }\\n        return root == acc;\\n    }\\n\\n    function hashPairs(bytes32 x, bytes32 y, uint256 order) internal pure returns (bytes32 value) {\\n        assembly {\\n            switch order\\n            case 0 {\\n                mstore(0x00, x)\\n                mstore(0x20, y)\\n            }\\n            default {\\n                mstore(0x00, y)\\n                mstore(0x20, x)\\n            }\\n            value := keccak256(0x0, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/ScaleCodec.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\npragma solidity 0.8.25;\\n\\nlibrary ScaleCodec {\\n    error UnsupportedCompactEncoding();\\n\\n    uint256 internal constant MAX_COMPACT_ENCODABLE_UINT = 2 ** 30 - 1;\\n\\n    // Sources:\\n    //   * https://ethereum.stackexchange.com/questions/15350/how-to-convert-an-bytes-to-address-in-solidity/50528\\n    //   * https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n\\n    function reverse256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8)\\n            | ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16)\\n            | ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32)\\n            | ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v = ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64)\\n            | ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    function reverse128(uint128 input) internal pure returns (uint128 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00) >> 8) | ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000) >> 16) | ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = ((v & 0xFFFFFFFF00000000FFFFFFFF00000000) >> 32) | ((v & 0x00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v = (v >> 64) | (v << 64);\\n    }\\n\\n    function reverse64(uint64 input) internal pure returns (uint64 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00FF00FF00) >> 8) | ((v & 0x00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = ((v & 0xFFFF0000FFFF0000) >> 16) | ((v & 0x0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v = (v >> 32) | (v << 32);\\n    }\\n\\n    function reverse32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) | ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    function reverse16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n\\n    function encodeU256(uint256 input) internal pure returns (bytes32) {\\n        return bytes32(reverse256(input));\\n    }\\n\\n    function encodeU128(uint128 input) internal pure returns (bytes16) {\\n        return bytes16(reverse128(input));\\n    }\\n\\n    function encodeU64(uint64 input) internal pure returns (bytes8) {\\n        return bytes8(reverse64(input));\\n    }\\n\\n    function encodeU32(uint32 input) internal pure returns (bytes4) {\\n        return bytes4(reverse32(input));\\n    }\\n\\n    function encodeU16(uint16 input) internal pure returns (bytes2) {\\n        return bytes2(reverse16(input));\\n    }\\n\\n    function encodeU8(uint8 input) internal pure returns (bytes1) {\\n        return bytes1(input);\\n    }\\n\\n    // Supports compact encoding of integers in [0, uint32.MAX]\\n    function encodeCompactU32(uint32 value) internal pure returns (bytes memory) {\\n        if (value <= 2 ** 6 - 1) {\\n            // add single byte flag\\n            return abi.encodePacked(uint8(value << 2));\\n        } else if (value <= 2 ** 14 - 1) {\\n            // add two byte flag and create little endian encoding\\n            return abi.encodePacked(ScaleCodec.reverse16(uint16(((value << 2) + 1))));\\n        } else if (value <= 2 ** 30 - 1) {\\n            // add four byte flag and create little endian encoding\\n            return abi.encodePacked(ScaleCodec.reverse32(uint32((value << 2)) + 2));\\n        } else {\\n            return abi.encodePacked(uint8(3), ScaleCodec.reverse32(value));\\n        }\\n    }\\n\\n    function checkedEncodeCompactU32(uint256 value) internal pure returns (bytes memory) {\\n        if (value > type(uint32).max) {\\n            revert UnsupportedCompactEncoding();\\n        }\\n        return encodeCompactU32(uint32(value));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Bits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n// SPDX-FileCopyrightText: 2023 Snowfork <hello@snowfork.com>\\n// Code from https://github.com/ethereum/solidity-examples\\npragma solidity 0.8.25;\\n\\nlibrary Bits {\\n    uint256 internal constant ONE = uint256(1);\\n    uint256 internal constant ONES = type(uint256).max;\\n\\n    // Sets the bit at the given 'index' in 'self' to '1'.\\n    // Returns the modified value.\\n    function setBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self | (ONE << index);\\n    }\\n\\n    // Sets the bit at the given 'index' in 'self' to '0'.\\n    // Returns the modified value.\\n    function clearBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self & ~(ONE << index);\\n    }\\n\\n    // Sets the bit at the given 'index' in 'self' to:\\n    //  '1' - if the bit is '0'\\n    //  '0' - if the bit is '1'\\n    // Returns the modified value.\\n    function toggleBit(uint256 self, uint8 index) internal pure returns (uint256) {\\n        return self ^ (ONE << index);\\n    }\\n\\n    // Get the value of the bit at the given 'index' in 'self'.\\n    function bit(uint256 self, uint8 index) internal pure returns (uint8) {\\n        return uint8((self >> index) & 1);\\n    }\\n\\n    // Check if the bit at the given 'index' in 'self' is set.\\n    // Returns:\\n    //  'true' - if the value of the bit is '1'\\n    //  'false' - if the value of the bit is '0'\\n    function bitSet(uint256 self, uint8 index) internal pure returns (bool) {\\n        return (self >> index) & 1 == 1;\\n    }\\n\\n    // Checks if the bit at the given 'index' in 'self' is equal to the corresponding\\n    // bit in 'other'.\\n    // Returns:\\n    //  'true' - if both bits are '0' or both bits are '1'\\n    //  'false' - otherwise\\n    function bitEqual(uint256 self, uint256 other, uint8 index) internal pure returns (bool) {\\n        return ((self ^ other) >> index) & 1 == 0;\\n    }\\n\\n    // Get the bitwise NOT of the bit at the given 'index' in 'self'.\\n    function bitNot(uint256 self, uint8 index) internal pure returns (uint8) {\\n        return uint8(1 - ((self >> index) & 1));\\n    }\\n\\n    // Computes the bitwise AND of the bit at the given 'index' in 'self', and the\\n    // corresponding bit in 'other', and returns the value.\\n    function bitAnd(uint256 self, uint256 other, uint8 index) internal pure returns (uint8) {\\n        return uint8(((self & other) >> index) & 1);\\n    }\\n\\n    // Computes the bitwise OR of the bit at the given 'index' in 'self', and the\\n    // corresponding bit in 'other', and returns the value.\\n    function bitOr(uint256 self, uint256 other, uint8 index) internal pure returns (uint8) {\\n        return uint8(((self | other) >> index) & 1);\\n    }\\n\\n    // Computes the bitwise XOR of the bit at the given 'index' in 'self', and the\\n    // corresponding bit in 'other', and returns the value.\\n    function bitXor(uint256 self, uint256 other, uint8 index) internal pure returns (uint8) {\\n        return uint8(((self ^ other) >> index) & 1);\\n    }\\n\\n    // Gets 'numBits' consecutive bits from 'self', starting from the bit at 'startIndex'.\\n    // Returns the bits as a 'uint'.\\n    // Requires that:\\n    //  - '0 < numBits <= 256'\\n    //  - 'startIndex < 256'\\n    //  - 'numBits + startIndex <= 256'\\n    function bits(uint256 self, uint8 startIndex, uint16 numBits) internal pure returns (uint256) {\\n        require(0 < numBits && startIndex < 256 && startIndex + numBits <= 256, \\\"out of bounds\\\");\\n        return (self >> startIndex) & (ONES >> (256 - numBits));\\n    }\\n\\n    // Computes the index of the highest bit set in 'self'.\\n    // Returns the highest bit set as an 'uint8'.\\n    // Requires that 'self != 0'.\\n    function highestBitSet(uint256 self) internal pure returns (uint8 highest) {\\n        require(self != 0, \\\"should not be zero\\\");\\n        uint256 val = self;\\n        for (uint8 i = 128; i >= 1; i >>= 1) {\\n            if (val & (((ONE << i) - 1) << i) != 0) {\\n                highest += i;\\n                val >>= i;\\n            }\\n        }\\n    }\\n\\n    // Computes the index of the lowest bit set in 'self'.\\n    // Returns the lowest bit set as an 'uint8'.\\n    // Requires that 'self != 0'.\\n    function lowestBitSet(uint256 self) internal pure returns (uint8 lowest) {\\n        require(self != 0, \\\"should not be zero\\\");\\n        uint256 val = self;\\n        for (uint8 i = 128; i >= 1; i >>= 1) {\\n            if (val & ((ONE << i) - 1) == 0) {\\n                lowest += i;\\n                val >>= i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"canonical-weth/=lib/canonical-weth/contracts/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"prb/math/=lib/prb-math/\",\r\n      \"@prb/test/=lib/prb-math/lib/prb-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"prb-math/=lib/prb-math/src/\",\r\n      \"prb-test/=lib/prb-math/lib/prb-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_randaoCommitDelay\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_randaoCommitExpiration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minNumRequiredSignatures\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_initialBeefyBlock\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"length\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeefyClient.ValidatorSet\",\"name\":\"_initialValidatorSet\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"length\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeefyClient.ValidatorSet\",\"name\":\"_nextValidatorSet\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CommitmentNotRelevant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfBounds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBitfield\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBitfieldLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCommitment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMMRLeaf\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMMRLeafProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMMRRootLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTicket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValidatorProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidValidatorProofLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughClaims\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrevRandaoAlreadyCaptured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PrevRandaoNotCaptured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ProofSizeExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StaleCommitment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TicketExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsupportedCompactEncoding\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WaitPeriodNotOver\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"mmrRoot\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"NewMMRRoot\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"}],\"name\":\"NewTicket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MMR_ROOT_ID\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitmentHash\",\"type\":\"bytes32\"}],\"name\":\"commitPrevRandao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commitmentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"bitfield\",\"type\":\"uint256[]\"}],\"name\":\"createFinalBitfield\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"bitsToSet\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"createInitialBitfield\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentValidatorSet\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"length\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"internalType\":\"struct Uint16Array\",\"name\":\"usageCounters\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestBeefyBlock\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestMMRRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minNumRequiredSignatures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextValidatorSet\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"id\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"length\",\"type\":\"uint128\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"data\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"internalType\":\"struct Uint16Array\",\"name\":\"usageCounters\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randaoCommitDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"randaoCommitExpiration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"validatorSetID\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"payloadID\",\"type\":\"bytes2\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BeefyClient.PayloadItem[]\",\"name\":\"payload\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BeefyClient.Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"bitfield\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BeefyClient.ValidatorProof[]\",\"name\":\"proofs\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"parentNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"nextAuthoritySetID\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"nextAuthoritySetLen\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"nextAuthoritySetRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"parachainHeadsRoot\",\"type\":\"bytes32\"}],\"internalType\":\"struct BeefyClient.MMRLeaf\",\"name\":\"leaf\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"leafProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"leafProofOrder\",\"type\":\"uint256\"}],\"name\":\"submitFinal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"validatorSetID\",\"type\":\"uint64\"},{\"components\":[{\"internalType\":\"bytes2\",\"name\":\"payloadID\",\"type\":\"bytes2\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct BeefyClient.PayloadItem[]\",\"name\":\"payload\",\"type\":\"tuple[]\"}],\"internalType\":\"struct BeefyClient.Commitment\",\"name\":\"commitment\",\"type\":\"tuple\"},{\"internalType\":\"uint256[]\",\"name\":\"bitfield\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct BeefyClient.ValidatorProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"submitInitial\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"ticketID\",\"type\":\"bytes32\"}],\"name\":\"tickets\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"blockNumber\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"validatorSetLen\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numRequiredSignatures\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"prevRandao\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"bitfieldHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leafHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"proofOrder\",\"type\":\"uint256\"}],\"name\":\"verifyMMRLeafProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BeefyClient", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000011000000000000000000000000000000000000000000000000000000000141c4b5000000000000000000000000000000000000000000000000000000000000028400000000000000000000000000000000000000000000000000000000000001293db19e57e6a7deaec1204d4fb8295cab4e24f8902f54e70d25f273abfe346ada000000000000000000000000000000000000000000000000000000000000028500000000000000000000000000000000000000000000000000000000000001293db19e57e6a7deaec1204d4fb8295cab4e24f8902f54e70d25f273abfe346ada", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}