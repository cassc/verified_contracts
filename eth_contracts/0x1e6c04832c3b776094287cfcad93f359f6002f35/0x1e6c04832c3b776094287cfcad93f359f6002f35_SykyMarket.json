{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@thirdweb-dev/contracts/extension/interface/IPermissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IPermissions {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/extension/Permissions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\nimport \\\"./interface/IPermissions.sol\\\";\\nimport \\\"../lib/TWStrings.sol\\\";\\n\\n/**\\n *  @title   Permissions\\n *  @dev     This contracts provides extending-contracts with role-based access control mechanisms\\n */\\ncontract Permissions is IPermissions {\\n    /// @dev Map from keccak256 hash of a role => a map from address => whether address has role.\\n    mapping(bytes32 => mapping(address => bool)) private _hasRole;\\n\\n    /// @dev Map from keccak256 hash of a role to role admin. See {getRoleAdmin}.\\n    mapping(bytes32 => bytes32) private _getRoleAdmin;\\n\\n    /// @dev Default admin role for all roles. Only accounts with this role can grant/revoke other roles.\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /// @dev Modifier that checks if an account has the specified role; reverts otherwise.\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, msg.sender);\\n        _;\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role.\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _hasRole[role][account];\\n    }\\n\\n    /**\\n     *  @notice         Checks whether an account has a particular role;\\n     *                  role restrictions can be swtiched on and off.\\n     *\\n     *  @dev            Returns `true` if `account` has been granted `role`.\\n     *                  Role restrictions can be swtiched on and off:\\n     *                      - If address(0) has ROLE, then the ROLE restrictions\\n     *                        don't apply.\\n     *                      - If address(0) does not have ROLE, then the ROLE\\n     *                        restrictions will apply.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account for which the role is being checked.\\n     */\\n    function hasRoleWithSwitch(bytes32 role, address account) public view returns (bool) {\\n        if (!_hasRole[role][address(0)]) {\\n            return _hasRole[role][account];\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     *  @notice         Returns the admin role that controls the specified role.\\n     *  @dev            See {grantRole} and {revokeRole}.\\n     *                  To change a role's admin, use {_setRoleAdmin}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     */\\n    function getRoleAdmin(bytes32 role) external view override returns (bytes32) {\\n        return _getRoleAdmin[role];\\n    }\\n\\n    /**\\n     *  @notice         Grants a role to an account, if not previously granted.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleGranted Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account to which the role is being granted.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        _checkRole(_getRoleAdmin[role], msg.sender);\\n        if (_hasRole[role][account]) {\\n            revert(\\\"Can only grant to non holders\\\");\\n        }\\n        _setupRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from an account.\\n     *  @dev            Caller must have admin role for the `role`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        _checkRole(_getRoleAdmin[role], msg.sender);\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     *  @notice         Revokes role from the account.\\n     *  @dev            Caller must have the `role`, with caller being the same as `account`.\\n     *                  Emits {RoleRevoked Event}.\\n     *\\n     *  @param role     keccak256 hash of the role. e.g. keccak256(\\\"TRANSFER_ROLE\\\")\\n     *  @param account  Address of the account from which the role is being revoked.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        if (msg.sender != account) {\\n            revert(\\\"Can only renounce for self\\\");\\n        }\\n        _revokeRole(role, account);\\n    }\\n\\n    /// @dev Sets `adminRole` as `role`'s admin role.\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = _getRoleAdmin[role];\\n        _getRoleAdmin[role] = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /// @dev Sets up `role` for `account`\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _hasRole[role][account] = true;\\n        emit RoleGranted(role, account, msg.sender);\\n    }\\n\\n    /// @dev Revokes `role` from `account`\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        _checkRole(role, account);\\n        delete _hasRole[role][account];\\n        emit RoleRevoked(role, account, msg.sender);\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!_hasRole[role][account]) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /// @dev Checks `role` for `account`. Reverts with a message including the required role.\\n    function _checkRoleWithSwitch(bytes32 role, address account) internal view virtual {\\n        if (!hasRoleWithSwitch(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"Permissions: account \\\",\\n                        TWStrings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        TWStrings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/lib/TWAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary TWAddress {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * [EIP1884](https://eips.ethereum.org/EIPS/eip-1884) increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@thirdweb-dev/contracts/lib/TWStrings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache 2.0\\npragma solidity ^0.8.0;\\n\\n/// @author thirdweb\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary TWStrings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IProductMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @author Syky - Nathan Rempel\\n\\ninterface IProductMarket {\\n    /*//////////////////////////////////////////////////////////////\\n                        Structs\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     *  @notice A data structure to configure Product Listings\\n     *  @dev Should compress to 512 bytes.\\n     *\\n     *  @param productId The productId of the asset being sold.     (max 16,777,215)\\n     *  @param quantity The total quantity listed for sale.         (max 65,535)\\n     *  @param reserved The quantity availablein the VIP window.    (max 65,535)\\n     *  @param vipLimit The purchase limit for VIPs.                (max 65,535)\\n     *  @param pubLimit The purchase limit for public.              (max 65,535)\\n     *  @param vipPrice The price in ETH per item for VIPs.         (max 18.4467 ETH)\\n     *  @param pubPrice The price in ETH per item for public.       (max 18.4467 ETH)\\n     *  @param endTimestamp The sale end timestamp for everyone.\\n     *  @param vipStartTimestamp The sale start timestamp for VIPs.\\n     *  @param pubStartTimestamp The sale start timestamp for public.\\n     *  @param enabled The listing is enabled\\n     */\\n    struct ListingParams {\\n        uint24 productId;\\n        uint16 quantity;\\n        uint16 reserved;\\n        uint16 vipLimit;\\n        uint16 pubLimit;\\n        uint64 vipPrice;\\n        uint64 pubPrice;\\n        uint32 endTimestamp;\\n        uint32 vipStartTimestamp;\\n        uint32 pubStartTimestamp;\\n        bool enabled;\\n        //spare 192 bytes space capacity\\n        //compresses to one 256\\n    }\\n\\n    /**\\n     *  @notice A data structure to store Product Listings\\n     *  @dev Should compress to 512 bytes.\\n     *\\n     *  @param productId The productId of the asset being sold.     (max 16,777,215)\\n     *  @param enabled The listing is enabled                       (value > 0 = true)\\n     *  @param quantity The total quantity listed for sale.         (max 65,535)\\n     *  @param reserved The quantity availablein the VIP window.    (max 65,535)\\n     *  @param vipLimit The purchase limit for VIPs.                (max 65,535)\\n     *  @param pubLimit The purchase limit for public.              (max 65,535)\\n     *  @param vipPrice The price in ETH per item for VIPs.         (max 18.4467 ETH)\\n     *  @param pubPrice The price in ETH per item for public.       (max 18.4467 ETH)\\n     *  @param endTimestamp The sale end timestamp for everyone.\\n     *  @param vipStartTimestamp The sale start timestamp for VIPs.\\n     *  @param pubStartTimestamp The sale start timestamp for public.\\n     *  @param resPurchased The VIP purchase quantity in the VIP window.\\n     *  @param vipPurchased The VIP purchase quantity of the sale in any window.\\n     *  @param pubPurchased The public purchase quantity of the sale.\\n     *  @param vipIncome The VIP purchase income of the sale.       (max 4,722.3664 ETH)\\n     *  @param pubIncome The public purchase income of the sale.    (max 4,722.3664 ETH)\\n     */\\n    struct Listing {\\n        uint24 productId;\\n        uint8 enabled;\\n        uint16 quantity;\\n        uint16 reserved;\\n        uint16 vipLimit;\\n        uint16 pubLimit;\\n        uint64 vipPrice;\\n        uint64 pubPrice;\\n        uint32 endTimestamp;\\n        //compresses to one 256\\n        uint32 vipStartTimestamp;\\n        uint32 pubStartTimestamp;\\n        uint16 resPurchased;\\n        uint16 vipPurchased;\\n        uint16 pubPurchased;\\n        uint72 vipIncome;\\n        uint72 pubIncome;\\n        //compresses to one 256\\n    }\\n\\n    /// @notice A data structure to return a set of listings\\n    struct ListingQuery {\\n        uint256 listingId;\\n        Listing listingData;\\n    }\\n\\n    enum AuctionStatus {\\n        UNSET,\\n        CREATED,\\n        COMPLETED,\\n        CANCELLED\\n    }\\n\\n    struct AuctionParams {\\n        uint56 productId;\\n        uint32 startTimestamp;\\n        uint32 endTimestamp;\\n        uint64 bidBufferBps;\\n        uint64 timeBufferSeconds;\\n        uint256 minimumBidAmount;\\n        uint256 reserveBidAmount;\\n    }\\n\\n    struct Auction {\\n        uint56 productId;\\n        AuctionStatus status;\\n        uint32 startTimestamp;\\n        uint32 endTimestamp;\\n        uint64 bidBufferBps;\\n        uint64 timeBufferSeconds;\\n        uint256 minimumBidAmount;\\n        uint256 reserveBidAmount;\\n    }\\n\\n    struct AuctionQuery {\\n        uint256 auctionId;\\n        Auction auctionData;\\n        Bid winningBid;\\n    }\\n\\n    struct Bid {\\n        uint64 auctionId;\\n        uint32 bidTimestamp;\\n        address bidder;\\n        uint256 bidAmount;\\n    }\\n\\n    struct BidHistory {\\n        uint256 count;\\n        mapping(uint256 => Bid) bids;\\n    }\\n\\n    struct ProductLookup {\\n        uint256 count;\\n        mapping(uint256 => uint256) id;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Emitted when a new listing is created.\\n    event ListingAdded(uint256 indexed listingId, Listing listing);\\n\\n    /// @dev Emitted when the parameters of a listing are updated.\\n    event ListingUpdated(uint256 indexed listingId, Listing listing);\\n\\n    /// @dev Emitted when a listing is enabled or disabled.\\n    event ListingEnabled(uint256 indexed listingId, bool indexed enabled);\\n\\n    /// @dev Emitted when a listing token contract is updated.\\n    event ListingContract(uint256 indexed listingId, address indexed tokenContract);\\n\\n    /// @dev Emitted when a new sale occurs for a listing.\\n    event NewSale(\\n        uint256 indexed listingId,\\n        address indexed buyer,\\n        address indexed recipient,\\n        uint256 productId,\\n        uint256 quantity,\\n        uint256 price\\n    );\\n\\n    /// @dev Emitted when withdrawal recipient is approved or unapproved.\\n    event WithdrawalRecipientApproved(address indexed recipient, bool indexed approved);\\n\\n    /// @dev Emitted when market income is withdrawn.\\n    event IncomeWithdrawal(\\n        address indexed operator,\\n        address indexed recipient,\\n        uint256 indexed amount\\n    );\\n\\n    event AuctionAdded(uint256 indexed auctionId, Auction auction);\\n\\n    event AuctionUpdated(uint256 indexed auctionId, Auction auction);\\n\\n    event AuctionCancelled(uint256 indexed auctionId);\\n\\n    /// @dev Emitted when a listing token contract is updated.\\n    event AuctionContract(uint256 indexed auctionId, address indexed tokenContract);\\n\\n\\n    event AuctionClosed(\\n        uint256 indexed auctionId,\\n        address indexed bidder,\\n        uint256 indexed bidAmount,\\n        uint256 productId,\\n        bool tokenAwarded,\\n        bool bidRefunded\\n    );\\n\\n    event NewBid(\\n        uint256 indexed auctionId,\\n        address indexed bidder,\\n        uint256 indexed bidAmount,\\n        Auction auction\\n    );\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Errors\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Action requires the finance or admin role\\n    error FinanceRoleRequired();\\n\\n    /// @dev Action requires the manager or admin role\\n    error ManagerRoleRequired();\\n\\n    /// @dev VIP Sale start must be before or equal to Public Sale start\\n    error ListingVipStartAfterPubStart(\\n        uint32 vipStartTimestamp,\\n        uint32 pubStartTimestamp\\n    );\\n\\n    /// @dev Public Sale start must be before sale close\\n    error ListingPubStartAfterEnd(uint32 pubStartTimestamp, uint32 endTimestamp);\\n\\n    error ListingReserveExceedsQuantity(uint16 reserved, uint16 quantity);\\n\\n    error ListingDoesNotExist();\\n\\n    error ListingPurchasesExceedsQuantity(uint16 quantity, uint256 purchased);\\n\\n    error ListingPurchasesExceedsReserve(uint16 reserve, uint256 purchased);\\n\\n    error ListingNotEnabled();\\n\\n    error ListingHasEnded();\\n\\n    error ListingQueryInvalidRange();\\n\\n    error ListingExpectedPriceNotEqualValue(\\n        uint256 expectedTotalPrice,\\n        uint256 transactionValue\\n    );\\n\\n    error ListingInsufficientQuantity(\\n        uint256 requestedQuantity,\\n        uint256 availableQuantity\\n    );\\n\\n    error ListingVipSaleNotStarted(uint64 vipStartTime, uint256 currentTimestamp);\\n\\n    error ListingPublicSaleNotStarted(uint64 publicStartTime, uint256 currentTimestamp);\\n\\n    error ListingVipLimitExceeded(uint256 purchases, uint256 limit);\\n\\n    error ListingVipReserveExceeded(uint256 requestedQuantity, uint256 availableQuantity);\\n\\n    error ListingPublicLimitExceeded(uint256 purchases, uint256 limit);\\n\\n    error ListingVipExpectedPriceInvalid(\\n        uint256 expectedTotalPrice,\\n        uint256 actualTotalPrice\\n    );\\n\\n    error ListingPublicExpectedPriceInvalid(\\n        uint256 expectedTotalPrice,\\n        uint256 actualTotalPrice\\n    );\\n\\n    error AuctionQueryInvalidRange();\\n\\n    error AuctionStartAfterEnd(uint32 startTimestamp, uint32 endTimestamp);\\n\\n    error AuctionBufferBpsExceedsMax();\\n\\n    error AuctionDoesNotExist();\\n\\n    error AuctionNotActive();\\n\\n    error AuctionNotEnded(uint32 endTimestamp, uint256 currentTimestamp);\\n\\n    error AuctionHasBids(uint256 numberOfBids);\\n\\n    error AuctionHasNoBids();\\n\\n    error AuctionReserveNotMet(uint256 highestBidAmount, uint256 reserveBidAmount);\\n\\n    error AuctionReserveWasMet(uint256 highestBidAmount, uint256 reserveBidAmount);\\n\\n    error AuctionPreviousBidRefundRejected();\\n\\n    error AuctionNotStarted(uint32 startTimestamp, uint256 currentTimestamp);\\n\\n    error AuctionHasEnded();\\n\\n    error AuctionBidAmountZero();\\n\\n    error AuctionBidBelowMinimum(uint256 bidAmount, uint256 minimumBidAmount);\\n\\n    error AuctionBidAmountNotEqualValue(uint256 bidAmount, uint256 transactionValue);\\n\\n    error AuctionBidAmountInsufficient(uint256 bidAmount, uint256 requiredBidAmount);\\n\\n    error WithdrawalRecipientNotApproved();\\n\\n    error WithdrawalRecipientRejectedTransfer();\\n\\n    error WithdrawalInsufficientBalance(uint256 requested, uint256 available);\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IProductToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @author Syky - Nathan Rempel\\n\\ninterface IProductToken {\\n    /*//////////////////////////////////////////////////////////////\\n                        Methods\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Lets an authorized address mint single NFTs to a recipient.\\n    function mintTo(address _to, uint256 _productId) external;\\n\\n    function mintTo(address _to, uint256 _productId, bytes memory _data) external;\\n\\n    function mintTo(\\n        address _to,\\n        uint256 _productId,\\n        string calldata _uri,\\n        bytes memory _data\\n    ) external;\\n\\n    /// @notice Lets an authorized address mint multiple NFTs at once to a recipient.\\n    function batchMintTo(address _to, uint256 _productId, uint256 _quantity) external;\\n\\n    function batchMintTo(\\n        address _to,\\n        uint256 _productId,\\n        uint256 _quantity,\\n        bytes memory _data\\n    ) external;\\n\\n    function batchMintTo(\\n        address _to,\\n        uint256 _productId,\\n        uint256 _quantity,\\n        string[] calldata _uris,\\n        bytes memory _data\\n    ) external;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Emitted when all minting is enabled or disabled\\n    event GlobalMintingRestricted(bool restricted);\\n\\n    /// @dev Emitted when all transfers are enabled or disabled\\n    event GlobalTransfersRestricted(bool restricted);\\n\\n    /// @dev Emitted when all burning is enabled or disabled\\n    event GlobalBurningRestricted(bool restricted);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Errors\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev URIs array length for batch mint must match _quantity\\n    error BatchMintURICountMismatch();\\n\\n    /// @dev Action requires the manager or admin role\\n    error ManagerRoleRequired();\\n\\n    /// @dev Action requires the minting or admin role\\n    error MintingRoleRequired();\\n\\n    /// @dev Minting has been disabled via address(0) role\\n    error GlobalMintingDisabled();\\n\\n    /// @dev Transfers have been disabled via address(0) role\\n    error GlobalTransfersDisabled();\\n\\n    /// @dev Burning has been disabled via address(0) role\\n    error GlobalBurningDisabled();\\n}\\n\"\r\n    },\r\n    \"contracts/base/interface/IVipManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @author Syky - Nathan Rempel\\n\\ninterface IVipManager {\\n    struct VipConditions {\\n        GroupConditions groupConditions;\\n        ProductConditions[] productConditions;\\n        ERC721Conditions[] erc721Conditions;\\n        ERC1155Conditions[] erc1155Conditions;\\n    }\\n\\n    struct VipConditionsData {\\n        uint256 productLength;\\n        uint256 erc721Length;\\n        uint256 erc1155Length;\\n        GroupConditions groupConditions;\\n        mapping(uint256 => ERC721Conditions) erc721Conditions;\\n        mapping(uint256 => ERC1155ConditionsData) erc1155Conditions;\\n        mapping(uint256 => ProductConditionsData) productConditions;\\n    }\\n\\n    struct GroupConditions {\\n        address groupContract;\\n        uint256 groupId;\\n    }\\n\\n    struct ERC721Conditions {\\n        address tokenContract;\\n    }\\n\\n    struct ProductConditions {\\n        address tokenContract;\\n        uint256[] productIds;\\n    }\\n\\n    struct ERC1155Conditions {\\n        address tokenContract;\\n        uint256[] tokenIds;\\n    }\\n\\n    struct ERC1155ConditionsData {\\n        address tokenContract;\\n        uint96 length;\\n        mapping(uint256 => uint256) tokenIds;\\n    }\\n\\n    struct ProductConditionsData {\\n        address tokenContract;\\n        uint96 length;\\n        mapping(uint256 => uint256) productIds;\\n    }\\n\\n    function isVip(uint256 _selectorId, address _member) external view returns (bool);\\n\\n    error ManagerRoleRequired();\\n\\n    event VipSelectorConditionsUpdated(\\n        uint256 indexed selectorId,\\n        uint256 indexed conditionsId\\n    );\\n\\n    event VipConditionsUpdated(uint256 indexed conditionsId, VipConditions conditions);\\n}\\n\"\r\n    },\r\n    \"contracts/base/ProductMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @author Syky - Nathan Rempel\\n\\nimport \\\"./interface/IProductMarket.sol\\\";\\nimport \\\"./interface/IProductToken.sol\\\";\\nimport \\\"./interface/IVipManager.sol\\\";\\n\\nimport \\\"@thirdweb-dev/contracts/extension/Permissions.sol\\\";\\nimport \\\"@thirdweb-dev/contracts/lib/TWAddress.sol\\\";\\n\\ncontract ProductMarket is IProductMarket, Permissions {\\n    using TWAddress for address;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Constants\\n    //////////////////////////////////////////////////////////////*/\\n\\n    bytes32 public constant FINANCE_ROLE = keccak256(\\\"FINANCE_ROLE\\\");\\n    bytes32 public constant MANAGER_ROLE = keccak256(\\\"MANAGER_ROLE\\\");\\n\\n    /// @dev The max bps of the contract. So, 10_000 == 100 %\\n    uint64 private constant MAX_BPS = 10_000;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Mappings\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address private _vipContract;\\n\\n    //counter for total listings created\\n    uint256 private _totalListings;\\n\\n    //counter for total auctions created\\n    uint256 private _totalAuctions;\\n\\n    //mapping of sale parameters to listingId\\n    mapping(uint256 => Listing) private _listings;\\n\\n    //reverse lookup of listings by productId\\n    mapping(uint256 => ProductLookup) private _productListings;\\n\\n    //mapping of product token address to listingId\\n    mapping(uint256 => address) private _listingContracts;\\n\\n    //mapping of purchases made by an address to listingId\\n    mapping(uint256 => mapping(address => uint256)) private _listingPurchases;\\n\\n    //mapping of auction parameters to auctionId\\n    mapping(uint256 => Auction) private _auctions;\\n\\n    //reverse lookup of auctions by productId\\n    mapping(uint256 => ProductLookup) private _productAuctions;\\n\\n    //mapping of product token address to auctionId\\n    mapping(uint256 => address) private _auctionContracts;\\n\\n    //mapping of auction bids to auctionId\\n    mapping(uint256 => BidHistory) private _auctionBids;\\n\\n    //mapping of auction bids to address\\n    mapping(address => BidHistory) private _addressBids;\\n\\n    //mapping of approved withdrawal addresses\\n    mapping(address => bool) private _withdrawalApproved;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address defaultAdmin_, address defaultToken_, address vipContract_) {\\n        _listingContracts[0] = defaultToken_;\\n        _auctionContracts[0] = defaultToken_;\\n        _vipContract = vipContract_;\\n        _setupRole(DEFAULT_ADMIN_ROLE, defaultAdmin_);\\n        _setRoleAdmin(FINANCE_ROLE, DEFAULT_ADMIN_ROLE);\\n        _setRoleAdmin(MANAGER_ROLE, DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Admin functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function setVipContract(address _vipContract_) external onlyManager {\\n        _vipContract = _vipContract_;\\n    }\\n\\n    function createListing(\\n        ListingParams calldata _params\\n    ) external onlyManager returns (uint256 listingId) {\\n        // overflow is impossible short of 2**256-1 listings being created\\n        unchecked {\\n            listingId = ++_totalListings;\\n        }\\n\\n        Listing storage listing = _listings[listingId];\\n\\n        if (_params.pubStartTimestamp < _params.vipStartTimestamp)\\n            revert ListingVipStartAfterPubStart(\\n                _params.vipStartTimestamp,\\n                _params.pubStartTimestamp\\n            );\\n        if (_params.endTimestamp <= _params.pubStartTimestamp)\\n            revert ListingPubStartAfterEnd(\\n                _params.pubStartTimestamp,\\n                _params.endTimestamp\\n            );\\n        if (_params.quantity < _params.reserved)\\n            revert ListingReserveExceedsQuantity(_params.reserved, _params.quantity);\\n\\n        listing.productId = _params.productId;\\n        listing.enabled = _params.enabled ? 1 : 0;\\n        listing.quantity = _params.quantity;\\n        listing.reserved = _params.reserved;\\n        listing.vipLimit = _params.vipLimit;\\n        listing.pubLimit = _params.pubLimit;\\n        listing.vipPrice = _params.vipPrice;\\n        listing.pubPrice = _params.pubPrice;\\n        listing.endTimestamp = _params.endTimestamp;\\n        listing.vipStartTimestamp = _params.vipStartTimestamp;\\n        listing.pubStartTimestamp = _params.pubStartTimestamp;\\n\\n        //reverse lookup\\n        unchecked {\\n            uint256 reverseIdx = _productListings[_params.productId].count++;\\n            _productListings[_params.productId].id[reverseIdx] = listingId;\\n        }\\n\\n        emit ListingAdded(listingId, listing);\\n    }\\n\\n    function updateListing(\\n        uint256 _listingId,\\n        ListingParams calldata _params\\n    ) external onlyManager {\\n        Listing storage listing = _listings[_listingId];\\n\\n        if (listing.productId == 0) revert ListingDoesNotExist();\\n        if (_params.pubStartTimestamp < _params.vipStartTimestamp)\\n            revert ListingVipStartAfterPubStart(\\n                _params.vipStartTimestamp,\\n                _params.pubStartTimestamp\\n            );\\n        if (_params.endTimestamp <= _params.pubStartTimestamp)\\n            revert ListingPubStartAfterEnd(\\n                _params.pubStartTimestamp,\\n                _params.endTimestamp\\n            );\\n        if (_params.quantity < _params.reserved)\\n            revert ListingReserveExceedsQuantity(_params.reserved, _params.quantity);\\n\\n        unchecked {\\n            uint256 totalPurchased = listing.vipPurchased + listing.pubPurchased;\\n\\n            if (_params.quantity < totalPurchased)\\n                revert ListingPurchasesExceedsQuantity(_params.quantity, totalPurchased);\\n            if (_params.reserved < listing.resPurchased)\\n                revert ListingPurchasesExceedsReserve(\\n                    _params.reserved,\\n                    listing.resPurchased\\n                );\\n        }\\n\\n        listing.enabled = _params.enabled ? 1 : 0;\\n        listing.quantity = _params.quantity;\\n        listing.reserved = _params.reserved;\\n        listing.vipLimit = _params.vipLimit;\\n        listing.pubLimit = _params.pubLimit;\\n        listing.vipPrice = _params.vipPrice;\\n        listing.pubPrice = _params.pubPrice;\\n        listing.endTimestamp = _params.endTimestamp;\\n        listing.vipStartTimestamp = _params.vipStartTimestamp;\\n        listing.pubStartTimestamp = _params.pubStartTimestamp;\\n\\n        emit ListingUpdated(_listingId, listing);\\n    }\\n\\n    function enableListing(uint256 _listingId, bool _enabled) external onlyManager {\\n        _listings[_listingId].enabled = _enabled ? 1 : 0;\\n        emit ListingEnabled(_listingId, _enabled);\\n    }\\n\\n    function setListingContract(\\n        uint256 _listingId,\\n        address _tokenContract\\n    ) external onlyManager {\\n        _listingContracts[_listingId] = _tokenContract;\\n        emit ListingContract(_listingId, _tokenContract);\\n    }\\n\\n    function setAuctionContract(\\n        uint256 _auctionId,\\n        address _tokenContract\\n    ) external onlyManager {\\n        _auctionContracts[_auctionId] = _tokenContract;\\n        emit AuctionContract(_auctionId, _tokenContract);\\n    }\\n\\n    function createAuction(\\n        AuctionParams calldata _params\\n    ) external onlyManager returns (uint256 auctionId) {\\n        unchecked {\\n            auctionId = ++_totalAuctions;\\n        }\\n\\n        Auction storage auction = _auctions[auctionId];\\n\\n        if (_params.endTimestamp <= _params.startTimestamp)\\n            revert AuctionStartAfterEnd(_params.startTimestamp, _params.endTimestamp);\\n        if (MAX_BPS < _params.bidBufferBps) revert AuctionBufferBpsExceedsMax();\\n\\n        auction.productId = _params.productId;\\n        auction.status = AuctionStatus.CREATED;\\n        auction.startTimestamp = _params.startTimestamp;\\n        auction.endTimestamp = _params.endTimestamp;\\n        auction.bidBufferBps = _params.bidBufferBps;\\n        auction.timeBufferSeconds = _params.timeBufferSeconds;\\n        auction.minimumBidAmount = _params.minimumBidAmount;\\n        auction.reserveBidAmount = _params.reserveBidAmount;\\n\\n        unchecked {\\n            uint256 reverseIdx = _productAuctions[_params.productId].count++;\\n            _productAuctions[_params.productId].id[reverseIdx] = auctionId;\\n        }\\n\\n        emit AuctionAdded(auctionId, auction);\\n    }\\n\\n    function updateAuction(\\n        uint256 _auctionId,\\n        AuctionParams calldata _params\\n    ) external onlyManager {\\n        Auction storage auction = _auctions[_auctionId];\\n\\n        if (auction.status == AuctionStatus.UNSET) revert AuctionDoesNotExist();\\n        if (auction.status != AuctionStatus.CREATED) revert AuctionNotActive();\\n        if (_params.endTimestamp <= _params.startTimestamp)\\n            revert AuctionStartAfterEnd(_params.startTimestamp, _params.endTimestamp);\\n        if (MAX_BPS < _params.bidBufferBps) revert AuctionBufferBpsExceedsMax();\\n\\n        auction.startTimestamp = _params.startTimestamp;\\n        auction.endTimestamp = _params.endTimestamp;\\n        auction.bidBufferBps = _params.bidBufferBps;\\n        auction.timeBufferSeconds = _params.timeBufferSeconds;\\n        auction.minimumBidAmount = _params.minimumBidAmount;\\n        auction.reserveBidAmount = _params.reserveBidAmount;\\n\\n        emit AuctionUpdated(_auctionId, auction);\\n    }\\n\\n    function cancelAuction(uint256 _auctionId) external onlyManager {\\n        Auction storage auction = _auctions[_auctionId];\\n\\n        if (auction.status == AuctionStatus.UNSET) revert AuctionDoesNotExist();\\n        if (auction.status != AuctionStatus.CREATED) revert AuctionNotActive();\\n        if (_auctionBids[_auctionId].count != 0)\\n            revert AuctionHasBids(_auctionBids[_auctionId].count);\\n\\n        auction.status = AuctionStatus.CANCELLED;\\n\\n        emit AuctionCancelled(_auctionId);\\n    }\\n\\n    function rewardAuction(\\n        uint256 _auctionId,\\n        bool _allowUnmetReserve\\n    ) external onlyManager {\\n        Auction storage auction = _auctions[_auctionId];\\n\\n        if (auction.status == AuctionStatus.UNSET) revert AuctionDoesNotExist();\\n        if (auction.status != AuctionStatus.CREATED) revert AuctionNotActive();\\n        if (block.timestamp < auction.endTimestamp)\\n            revert AuctionNotEnded(auction.endTimestamp, block.timestamp);\\n\\n        uint256 numberOfBids = _auctionBids[_auctionId].count;\\n        if (numberOfBids == 0) revert AuctionHasNoBids();\\n\\n        Bid memory winningBid = _auctionBids[_auctionId].bids[numberOfBids - 1];\\n        if (winningBid.bidAmount < auction.reserveBidAmount && !_allowUnmetReserve)\\n            revert AuctionReserveNotMet(winningBid.bidAmount, auction.reserveBidAmount);\\n\\n        //reentrancy protection\\n        auction.status = AuctionStatus.COMPLETED;\\n\\n        IProductToken(getAuctionContract(_auctionId)).mintTo(\\n            winningBid.bidder,\\n            auction.productId\\n        );\\n\\n        emit AuctionClosed(\\n            _auctionId,\\n            winningBid.bidder,\\n            winningBid.bidAmount,\\n            auction.productId,\\n            true,\\n            false\\n        );\\n    }\\n\\n    function closeAuction(uint256 _auctionId) external onlyManager {\\n        Auction storage auction = _auctions[_auctionId];\\n\\n        if (auction.status == AuctionStatus.UNSET) revert AuctionDoesNotExist();\\n        if (auction.status != AuctionStatus.CREATED) revert AuctionNotActive();\\n        if (block.timestamp < auction.endTimestamp)\\n            revert AuctionNotEnded(auction.endTimestamp, block.timestamp);\\n\\n        uint256 numberOfBids = _auctionBids[_auctionId].count;\\n        if (numberOfBids == 0) revert AuctionHasNoBids();\\n\\n        Bid memory winningBid = _auctionBids[_auctionId].bids[numberOfBids - 1];\\n        if (auction.reserveBidAmount <= winningBid.bidAmount)\\n            revert AuctionReserveWasMet(winningBid.bidAmount, auction.reserveBidAmount);\\n\\n        //reentrancy protection\\n        auction.status = AuctionStatus.COMPLETED;\\n\\n        (bool success, ) = winningBid.bidder.call{value: winningBid.bidAmount}(\\\"\\\");\\n        if (!success) revert AuctionPreviousBidRefundRejected();\\n\\n        emit AuctionClosed(\\n            _auctionId,\\n            winningBid.bidder,\\n            winningBid.bidAmount,\\n            auction.productId,\\n            false,\\n            true\\n        );\\n    }\\n\\n    /// @dev Sets `_recipient` as `_approved` for withdrawing income.\\n    function approveWithdrawalRecipient(\\n        address _recipient,\\n        bool _approved\\n    ) external onlyFinance {\\n        _withdrawalApproved[_recipient] = _approved;\\n\\n        emit WithdrawalRecipientApproved(_recipient, _approved);\\n    }\\n\\n    /// @dev Transfers `_amount` of native token to `_account`. `_account` must be approved.\\n    function withdrawIncome(\\n        address payable _recipient,\\n        uint256 _amount\\n    ) external onlyFinance {\\n        if (address(this).balance < _amount)\\n            revert WithdrawalInsufficientBalance(_amount, address(this).balance);\\n        if (!_withdrawalApproved[_recipient]) revert WithdrawalRecipientNotApproved();\\n\\n        (bool success, ) = _recipient.call{value: _amount}(\\\"\\\");\\n        if (!success) revert WithdrawalRecipientRejectedTransfer();\\n\\n        emit IncomeWithdrawal(msg.sender, _recipient, _amount);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Public functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function buyFromListing(\\n        uint256 _listingId,\\n        address _buyFor,\\n        uint256 _quantity,\\n        uint256 _expectedTotalPrice\\n    ) external payable {\\n        Listing storage listing = _listings[_listingId];\\n\\n        if (listing.productId == 0) revert ListingDoesNotExist();\\n        if (listing.enabled == 0) revert ListingNotEnabled();\\n        if (_expectedTotalPrice != msg.value)\\n            revert ListingExpectedPriceNotEqualValue(_expectedTotalPrice, msg.value);\\n        if (listing.endTimestamp < block.timestamp) revert ListingHasEnded();\\n        unchecked {\\n            uint256 availableQuantity = listing.quantity -\\n                (listing.vipPurchased + listing.pubPurchased);\\n\\n            if (availableQuantity < _quantity)\\n                revert ListingInsufficientQuantity(_quantity, availableQuantity);\\n        }\\n\\n        uint256 listingPurchases = _listingPurchases[_listingId][msg.sender] + _quantity;\\n\\n        //usually prefer non-duplicate code but this allows for custom messages and less memory use\\n        if (_checkListingVip(_listingId, msg.sender)) {\\n            if (block.timestamp < listing.vipStartTimestamp)\\n                revert ListingVipSaleNotStarted(\\n                    listing.vipStartTimestamp,\\n                    block.timestamp\\n                );\\n            if (listing.vipLimit < listingPurchases)\\n                revert ListingVipLimitExceeded(listingPurchases, listing.vipLimit);\\n\\n            uint256 actualTotalPrice = listing.vipPrice * _quantity;\\n            if (actualTotalPrice != _expectedTotalPrice)\\n                revert ListingVipExpectedPriceInvalid(\\n                    _expectedTotalPrice,\\n                    actualTotalPrice\\n                );\\n\\n            unchecked {\\n                //if VIP purchases are occuring BEFORE the external window, use the reserve\\n                if (block.timestamp < listing.pubStartTimestamp) {\\n                    //not allowed in creation or update to exceed\\n                    uint256 reserveAvailable = listing.reserved - listing.resPurchased;\\n                    if (reserveAvailable < _quantity)\\n                        revert ListingVipReserveExceeded(_quantity, reserveAvailable);\\n                    listing.resPurchased += uint16(_quantity);\\n                }\\n\\n                listing.vipPurchased += uint16(_quantity);\\n                listing.vipIncome += uint72(_expectedTotalPrice);\\n            }\\n        } else {\\n            if (block.timestamp < listing.pubStartTimestamp)\\n                revert ListingPublicSaleNotStarted(\\n                    listing.pubStartTimestamp,\\n                    block.timestamp\\n                );\\n            if (listing.pubLimit < listingPurchases)\\n                revert ListingPublicLimitExceeded(listingPurchases, listing.pubLimit);\\n\\n            uint256 actualTotalPrice = listing.pubPrice * _quantity;\\n            if (actualTotalPrice != _expectedTotalPrice)\\n                revert ListingPublicExpectedPriceInvalid(\\n                    _expectedTotalPrice,\\n                    actualTotalPrice\\n                );\\n\\n            unchecked {\\n                listing.pubPurchased += uint16(_quantity);\\n                listing.pubIncome += uint72(_expectedTotalPrice);\\n            }\\n        }\\n\\n        //perform updates before transfer to avoid re-entrancy\\n        _listingPurchases[_listingId][msg.sender] = listingPurchases;\\n\\n        IProductToken(getListingContract(_listingId)).batchMintTo(\\n            _buyFor,\\n            listing.productId,\\n            _quantity\\n        );\\n\\n        emit NewSale(\\n            _listingId,\\n            msg.sender,\\n            _buyFor,\\n            listing.productId,\\n            _quantity,\\n            _expectedTotalPrice\\n        );\\n    }\\n\\n    function bidInAuction(uint256 _auctionId, uint256 _bidAmount) external payable {\\n        Auction memory auction = _auctions[_auctionId];\\n\\n        if (auction.status == AuctionStatus.UNSET) revert AuctionDoesNotExist();\\n        if (auction.status != AuctionStatus.CREATED) revert AuctionNotActive();\\n        if (block.timestamp < auction.startTimestamp)\\n            revert AuctionNotStarted(auction.startTimestamp, block.timestamp);\\n        if (auction.endTimestamp < block.timestamp) revert AuctionHasEnded();\\n        if (_bidAmount == 0) revert AuctionBidAmountZero();\\n        if (_bidAmount < auction.minimumBidAmount)\\n            revert AuctionBidBelowMinimum(_bidAmount, auction.minimumBidAmount);\\n        if (_bidAmount != msg.value)\\n            revert AuctionBidAmountNotEqualValue(_bidAmount, msg.value);\\n\\n        uint256 numberOfBids = _auctionBids[_auctionId].count;\\n        if (numberOfBids > 0) {\\n            Bid memory previousBid = _auctionBids[_auctionId].bids[numberOfBids - 1];\\n\\n            unchecked {\\n                uint256 requiredBidAmount = previousBid.bidAmount +\\n                    ((previousBid.bidAmount * auction.bidBufferBps) / MAX_BPS);\\n\\n                if (_bidAmount < requiredBidAmount)\\n                    revert AuctionBidAmountInsufficient(_bidAmount, requiredBidAmount);\\n            }\\n            (bool success, ) = previousBid.bidder.call{value: previousBid.bidAmount}(\\\"\\\");\\n            if (!success) revert AuctionPreviousBidRefundRejected();\\n\\n            // Reentrancy protection\\n            if (_auctionBids[_auctionId].count != numberOfBids) revert();\\n        }\\n\\n        unchecked {\\n            ++_auctionBids[_auctionId].count;\\n        }\\n\\n        Bid memory newBid = Bid({\\n            auctionId: uint64(_auctionId),\\n            bidTimestamp: uint32(block.timestamp),\\n            bidder: msg.sender,\\n            bidAmount: _bidAmount\\n        });\\n\\n        _auctionBids[_auctionId].bids[numberOfBids] = newBid;\\n\\n        unchecked {\\n            uint256 addressBids = _addressBids[msg.sender].count++;\\n\\n            _addressBids[msg.sender].bids[addressBids] = newBid;\\n        }\\n\\n        if (auction.endTimestamp - block.timestamp <= auction.timeBufferSeconds) {\\n            unchecked {\\n                auction.endTimestamp += uint32(auction.timeBufferSeconds);\\n            }\\n            _auctions[_auctionId] = auction;\\n        }\\n\\n        emit NewBid(_auctionId, msg.sender, _bidAmount, auction);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Public getters\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function getVipContract() external view returns (address) {\\n        return _vipContract;\\n    }\\n\\n    function totalListings() external view returns (uint256) {\\n        return _totalListings;\\n    }\\n\\n    function getListingContract(uint256 _listingId) public view returns (address) {\\n        if (_listingContracts[_listingId] == address(0)) {\\n            return _listingContracts[0];\\n        } else {\\n            return _listingContracts[_listingId];\\n        }\\n    }\\n\\n    function getListing(\\n        uint256 _listingId\\n    ) external view returns (ListingQuery memory _listing) {\\n        return ListingQuery({listingId: _listingId, listingData: _listings[_listingId]});\\n    }\\n\\n    function getAllProductListings(\\n        uint256 _productId\\n    ) external view returns (ListingQuery[] memory _allListings) {\\n        ProductLookup storage productLookup = _productListings[_productId];\\n        uint256 count = productLookup.count;\\n        _allListings = new ListingQuery[](count);\\n        for (uint256 i; i < count; ) {\\n            uint256 listingId = productLookup.id[i];\\n            _allListings[i] = ListingQuery({\\n                listingId: listingId,\\n                listingData: _listings[listingId]\\n            });\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getAllListings(\\n        uint256 _startId,\\n        uint256 _endId\\n    ) external view returns (ListingQuery[] memory _allListings) {\\n        if (_startId == 0 || _endId < _startId) revert ListingQueryInvalidRange();\\n        unchecked {\\n            uint256 maxId = (_endId > _totalListings ? _totalListings : _endId) + 1;\\n\\n            _allListings = new ListingQuery[](maxId - _startId);\\n\\n            for (uint256 i = _startId; i < maxId; ) {\\n                _allListings[i - _startId] = ListingQuery({\\n                    listingId: i,\\n                    listingData: _listings[i]\\n                });\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getWithdrawalApproved(address _recipient) external view returns (bool) {\\n        return _withdrawalApproved[_recipient];\\n    }\\n\\n    function totalAuctions() external view returns (uint256) {\\n        return _totalAuctions;\\n    }\\n\\n    function getAuctionContract(uint256 _auctionId) public view returns (address) {\\n        if (_auctionContracts[_auctionId] == address(0)) {\\n            return _auctionContracts[0];\\n        } else {\\n            return _auctionContracts[_auctionId];\\n        }\\n    }\\n\\n    function getAuction(\\n        uint256 _auctionId\\n    ) external view returns (AuctionQuery memory _auction) {\\n        unchecked {\\n            uint256 numberOfBids = _auctionBids[_auctionId].count;\\n\\n            return\\n                AuctionQuery({\\n                    auctionId: _auctionId,\\n                    auctionData: _auctions[_auctionId],\\n                    winningBid: _auctionBids[_auctionId].bids[\\n                        numberOfBids > 0 ? numberOfBids - 1 : 0\\n                    ]\\n                });\\n        }\\n    }\\n\\n    function getAllProductAuctions(\\n        uint256 _productId\\n    ) external view returns (AuctionQuery[] memory _allAuctions) {\\n        ProductLookup storage productLookup = _productAuctions[_productId];\\n        uint256 count = productLookup.count;\\n        _allAuctions = new AuctionQuery[](count);\\n        for (uint256 i; i < count; ) {\\n            uint256 auctionId = productLookup.id[i];\\n            uint256 numberOfBids = _auctionBids[i].count;\\n            unchecked {\\n                _allAuctions[i] = AuctionQuery({\\n                    auctionId: auctionId,\\n                    auctionData: _auctions[auctionId],\\n                    winningBid: _auctionBids[auctionId].bids[\\n                        numberOfBids > 0 ? numberOfBids - 1 : 0\\n                    ]\\n                });\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getAllAuctions(\\n        uint256 _startId,\\n        uint256 _endId\\n    ) external view returns (AuctionQuery[] memory _allAuctions) {\\n        if (_startId == 0 || _endId < _startId) revert AuctionQueryInvalidRange();\\n        unchecked {\\n            uint256 maxId = (_endId > _totalAuctions ? _totalAuctions : _endId) + 1;\\n\\n            _allAuctions = new AuctionQuery[](maxId - _startId);\\n\\n            for (uint256 i = _startId; i < maxId; ) {\\n                uint256 numberOfBids = _auctionBids[i].count;\\n\\n                _allAuctions[i - _startId] = AuctionQuery({\\n                    auctionId: i,\\n                    auctionData: _auctions[i],\\n                    winningBid: _auctionBids[i].bids[\\n                        numberOfBids > 0 ? numberOfBids - 1 : 0\\n                    ]\\n                });\\n\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getAuctionBids(\\n        uint256 _auctionId\\n    ) external view returns (Bid[] memory _bids) {\\n        uint256 numberOfBids = _auctionBids[_auctionId].count;\\n        _bids = new Bid[](numberOfBids);\\n        for (uint256 i; i < numberOfBids; ) {\\n            _bids[i] = _auctionBids[_auctionId].bids[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getAddressBids(address _bidder) external view returns (Bid[] memory _bids) {\\n        uint256 numberOfBids = _addressBids[_bidder].count;\\n        _bids = new Bid[](numberOfBids);\\n        for (uint256 i; i < numberOfBids; ) {\\n            _bids[i] = _addressBids[_bidder].bids[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getWinningBidAmount(uint256 _auctionId) external view returns (uint256) {\\n        Auction memory auction = _auctions[_auctionId];\\n        if (auction.status == AuctionStatus.UNSET) revert AuctionDoesNotExist();\\n\\n        uint256 numberOfBids = _auctionBids[_auctionId].count;\\n        if (numberOfBids > 0) {\\n            unchecked {\\n                Bid memory previousBid = _auctionBids[_auctionId].bids[numberOfBids - 1];\\n                return\\n                    previousBid.bidAmount +\\n                    ((previousBid.bidAmount * auction.bidBufferBps) / MAX_BPS);\\n            }\\n        }\\n\\n        return auction.minimumBidAmount;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Modifiers\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Modifier that checks if an account has admin or finance role; reverts otherwise.\\n    modifier onlyFinance() {\\n        _checkFinanceAdmin();\\n        _;\\n    }\\n\\n    /// @dev Modifier that checks if an account has admin or manager role; reverts otherwise.\\n    modifier onlyManager() {\\n        _checkManagerAdmin();\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        Internal functions\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Function that checks if an account has admin or finance role; reverts otherwise.\\n    function _checkFinanceAdmin() internal view {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender) && !hasRole(FINANCE_ROLE, msg.sender)\\n        ) {\\n            revert FinanceRoleRequired();\\n        }\\n    }\\n\\n    /// @dev Function that checks if an account has admin or manager role; reverts otherwise.\\n    function _checkManagerAdmin() internal view {\\n        if (\\n            !hasRole(DEFAULT_ADMIN_ROLE, msg.sender) && !hasRole(MANAGER_ROLE, msg.sender)\\n        ) {\\n            revert ManagerRoleRequired();\\n        }\\n    }\\n\\n    function _checkListingVip(\\n        uint256 _listingId,\\n        address _member\\n    ) internal view returns (bool) {\\n        if (_vipContract != address(0))\\n            return IVipManager(_vipContract).isVip(_listingId, _member);\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/syky/SykyMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @author Syky - Nathan Rempel\\n\\n/*\\n           @@@   @@@@@   @@@@@@@         @@@@    @@@@@@@      @@@@@     @@@@@@@        @@@@\\n         @@@@      @@@     @@@@@@        @@       @@@@@@       @@        @@@@@@        @@\\n         @@@@@      @@      @@@@@       @@        @@@@@       @            @@@@@      @@\\n         @@@@@@      @@      @@@@@     @@         @@@@@     @               @@@@     @@\\n          @@@@@@      @       @@@@@   @@          @@@@@    @                @@@@@    @\\n           @@@@@@@             @@@@@ @@           @@@@@  @@@                 @@@@@  @\\n             @@@@@@             @@@@@@            @@@@@@@@@@@                 @@@@@@\\n               @@@@@@           @@@@@             @@@@@  @@@@@                 @@@@@\\n                @@@@@@@         @@@@@             @@@@@   @@@@@                @@@@@\\n         @        @@@@@@        @@@@@             @@@@@    @@@@@               @@@@@\\n         @@        @@@@@        @@@@@             @@@@@     @@@@@              @@@@@\\n         @@@@      @@@@@        @@@@@             @@@@@@     @@@@@@           @@@@@@\\n         @@@@@@   @@@@         @@@@@@@           @@@@@@@     @@@@@@@          @@@@@@@\\n*/\\n\\nimport \\\"../base/ProductMarket.sol\\\";\\n\\ncontract SykyMarket is ProductMarket {\\n    /*//////////////////////////////////////////////////////////////\\n                            Version Info\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public constant ENV = \\\"MAINNET\\\";\\n    string public constant VER = \\\"1.0.1\\\";\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        address defaultAdmin_,\\n        address defaultToken_,\\n        address vipContract_\\n    ) ProductMarket(defaultAdmin_, defaultToken_, vipContract_) {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"defaultAdmin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"defaultToken_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vipContract_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredBidAmount\",\"type\":\"uint256\"}],\"name\":\"AuctionBidAmountInsufficient\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionValue\",\"type\":\"uint256\"}],\"name\":\"AuctionBidAmountNotEqualValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionBidAmountZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidAmount\",\"type\":\"uint256\"}],\"name\":\"AuctionBidBelowMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionBufferBpsExceedsMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfBids\",\"type\":\"uint256\"}],\"name\":\"AuctionHasBids\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionHasEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionHasNoBids\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionNotActive\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"AuctionNotEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"AuctionNotStarted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionPreviousBidRefundRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AuctionQueryInvalidRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"highestBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"name\":\"AuctionReserveNotMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"highestBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"name\":\"AuctionReserveWasMet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"}],\"name\":\"AuctionStartAfterEnd\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FinanceRoleRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingDoesNotExist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTotalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"transactionValue\",\"type\":\"uint256\"}],\"name\":\"ListingExpectedPriceNotEqualValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingHasEnded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableQuantity\",\"type\":\"uint256\"}],\"name\":\"ListingInsufficientQuantity\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingNotEnabled\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"pubStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"}],\"name\":\"ListingPubStartAfterEnd\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTotalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualTotalPrice\",\"type\":\"uint256\"}],\"name\":\"ListingPublicExpectedPriceInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"ListingPublicLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"publicStartTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"ListingPublicSaleNotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"name\":\"ListingPurchasesExceedsQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reserve\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"name\":\"ListingPurchasesExceedsReserve\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ListingQueryInvalidRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"reserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"}],\"name\":\"ListingReserveExceedsQuantity\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedTotalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualTotalPrice\",\"type\":\"uint256\"}],\"name\":\"ListingVipExpectedPriceInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"purchases\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"ListingVipLimitExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestedQuantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"availableQuantity\",\"type\":\"uint256\"}],\"name\":\"ListingVipReserveExceeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"vipStartTime\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"ListingVipSaleNotStarted\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"vipStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pubStartTimestamp\",\"type\":\"uint32\"}],\"name\":\"ListingVipStartAfterPubStart\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ManagerRoleRequired\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"WithdrawalInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalRecipientNotApproved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalRecipientRejectedTransfer\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint56\",\"name\":\"productId\",\"type\":\"uint56\"},{\"internalType\":\"enum IProductMarket.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"bidBufferBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeBufferSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IProductMarket.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"name\":\"AuctionCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"tokenAwarded\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"bidRefunded\",\"type\":\"bool\"}],\"name\":\"AuctionClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"AuctionContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint56\",\"name\":\"productId\",\"type\":\"uint56\"},{\"internalType\":\"enum IProductMarket.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"bidBufferBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeBufferSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IProductMarket.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"AuctionUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"IncomeWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"productId\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"enabled\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"vipPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pubPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vipStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pubStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"resPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"vipIncome\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"pubIncome\",\"type\":\"uint72\"}],\"indexed\":false,\"internalType\":\"struct IProductMarket.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"ListingAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"ListingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"ListingEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"productId\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"enabled\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"vipPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pubPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vipStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pubStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"resPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"vipIncome\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"pubIncome\",\"type\":\"uint72\"}],\"indexed\":false,\"internalType\":\"struct IProductMarket.Listing\",\"name\":\"listing\",\"type\":\"tuple\"}],\"name\":\"ListingUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint56\",\"name\":\"productId\",\"type\":\"uint56\"},{\"internalType\":\"enum IProductMarket.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"bidBufferBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeBufferSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IProductMarket.Auction\",\"name\":\"auction\",\"type\":\"tuple\"}],\"name\":\"NewBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"productId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"NewSale\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"WithdrawalRecipientApproved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ENV\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FINANCE_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MANAGER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"approveWithdrawalRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidAmount\",\"type\":\"uint256\"}],\"name\":\"bidInAuction\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_buyFor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedTotalPrice\",\"type\":\"uint256\"}],\"name\":\"buyFromListing\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"closeAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint56\",\"name\":\"productId\",\"type\":\"uint56\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"bidBufferBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeBufferSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.AuctionParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createAuction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint24\",\"name\":\"productId\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"vipPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pubPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vipStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pubStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct IProductMarket.ListingParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"createListing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"enableListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bidder\",\"type\":\"address\"}],\"name\":\"getAddressBids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"auctionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"bidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.Bid[]\",\"name\":\"_bids\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endId\",\"type\":\"uint256\"}],\"name\":\"getAllAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint56\",\"name\":\"productId\",\"type\":\"uint56\"},{\"internalType\":\"enum IProductMarket.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"bidBufferBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeBufferSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.Auction\",\"name\":\"auctionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"auctionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"bidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.Bid\",\"name\":\"winningBid\",\"type\":\"tuple\"}],\"internalType\":\"struct IProductMarket.AuctionQuery[]\",\"name\":\"_allAuctions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endId\",\"type\":\"uint256\"}],\"name\":\"getAllListings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"productId\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"enabled\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"vipPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pubPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vipStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pubStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"resPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"vipIncome\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"pubIncome\",\"type\":\"uint72\"}],\"internalType\":\"struct IProductMarket.Listing\",\"name\":\"listingData\",\"type\":\"tuple\"}],\"internalType\":\"struct IProductMarket.ListingQuery[]\",\"name\":\"_allListings\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getAllProductAuctions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint56\",\"name\":\"productId\",\"type\":\"uint56\"},{\"internalType\":\"enum IProductMarket.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"bidBufferBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeBufferSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.Auction\",\"name\":\"auctionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"auctionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"bidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.Bid\",\"name\":\"winningBid\",\"type\":\"tuple\"}],\"internalType\":\"struct IProductMarket.AuctionQuery[]\",\"name\":\"_allAuctions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_productId\",\"type\":\"uint256\"}],\"name\":\"getAllProductListings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"productId\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"enabled\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"vipPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pubPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vipStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pubStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"resPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"vipIncome\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"pubIncome\",\"type\":\"uint72\"}],\"internalType\":\"struct IProductMarket.Listing\",\"name\":\"listingData\",\"type\":\"tuple\"}],\"internalType\":\"struct IProductMarket.ListingQuery[]\",\"name\":\"_allListings\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuction\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint56\",\"name\":\"productId\",\"type\":\"uint56\"},{\"internalType\":\"enum IProductMarket.AuctionStatus\",\"name\":\"status\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"bidBufferBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeBufferSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.Auction\",\"name\":\"auctionData\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"auctionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"bidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.Bid\",\"name\":\"winningBid\",\"type\":\"tuple\"}],\"internalType\":\"struct IProductMarket.AuctionQuery\",\"name\":\"_auction\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionBids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"auctionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"bidTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"bidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.Bid[]\",\"name\":\"_bids\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getAuctionContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"}],\"name\":\"getListing\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"productId\",\"type\":\"uint24\"},{\"internalType\":\"uint8\",\"name\":\"enabled\",\"type\":\"uint8\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"vipPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pubPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vipStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pubStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"resPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubPurchased\",\"type\":\"uint16\"},{\"internalType\":\"uint72\",\"name\":\"vipIncome\",\"type\":\"uint72\"},{\"internalType\":\"uint72\",\"name\":\"pubIncome\",\"type\":\"uint72\"}],\"internalType\":\"struct IProductMarket.Listing\",\"name\":\"listingData\",\"type\":\"tuple\"}],\"internalType\":\"struct IProductMarket.ListingQuery\",\"name\":\"_listing\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"}],\"name\":\"getListingContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVipContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"}],\"name\":\"getWinningBidAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"getWithdrawalApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRoleWithSwitch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_allowUnmetReserve\",\"type\":\"bool\"}],\"name\":\"rewardAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setAuctionContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"}],\"name\":\"setListingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vipContract_\",\"type\":\"address\"}],\"name\":\"setVipContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAuctions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalListings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_auctionId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint56\",\"name\":\"productId\",\"type\":\"uint56\"},{\"internalType\":\"uint32\",\"name\":\"startTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"bidBufferBps\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"timeBufferSeconds\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumBidAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveBidAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct IProductMarket.AuctionParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"updateAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_listingId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint24\",\"name\":\"productId\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"quantity\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"reserved\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"vipLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"pubLimit\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"vipPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"pubPrice\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"endTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vipStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"pubStartTimestamp\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"internalType\":\"struct IProductMarket.ListingParams\",\"name\":\"_params\",\"type\":\"tuple\"}],\"name\":\"updateListing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawIncome\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SykyMarket", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "000000000000000000000000f9e30ba8df802eef5a0fb239d59dee05f18b2e49000000000000000000000000a1cf615003464ab30c1c6a7c926f52788e64077d00000000000000000000000099a2b56d146bfca762e8fa86e04a7b63483e1f57", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}