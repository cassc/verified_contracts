{"SourceCode": "/** Join the Dork side. https://dork-lord.com\r\nThe OG Dork by Matt Furie https://opensea.io/assets/ethereum/0x808e5cd160d8819ca24c2053037049eb611d0542/91 \r\nThe only Dork Lord on ZOGZ https://www.zogz.fun/ \r\n\r\n\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28c0\u2800\u2824\u2824\u2824\u28a4\u28e4\u28e4\u28e4\u28e4\u28e4\u28c0\u28c0\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2860\u2884\u28d2\u28ee\u28ff\u2816\u2812\u281b\u281b\u28bb\u283f\u281b\u283b\u28bf\u28f7\u2852\u281a\u281b\u28b3\u28f6\u282f\u28f5\u28d2\u2824\u2884\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2860\u2814\u288a\u28e5\u28fe\u281f\u280b\u2809\u2800\u2800\u2800\u2812\u28b0\u280b\u28e0\u2824\u28e0\u2800\u28bb\u287f\u2844\u2800\u2800\u28bb\u286d\u28d3\u282e\u28dd\u28a6\u28cc\u2811\u2822\u2884\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2860\u2816\u2801\u2880\u28fc\u287f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u280b\u2808\u2800\u2800\u2808\u28a6\u2844\u28f7\u28f7\u2800\u2800\u2818\u2847\u28c0\u2819\u289c\u28ff\u28ee\u285b\u28a6\u2840\u2809\u2832\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2834\u280a\u2800\u2800\u2880\u28fe\u280f\u2834\u2803\u2800\u28a0\u2802\u2880\u2824\u281a\u2802\u2801\u2800\u2800\u2800\u2800\u2800\u2818\u28e7\u28bf\u28b9\u2800\u2800\u2800\u28d7\u28a6\u289d\u28a6\u2869\u2879\u28ff\u2844\u2839\u28c6\u2800\u2800\u2811\u28a4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2834\u2809\u2800\u2800\u2800\u2880\u28ff\u280f\u2800\u2800\u28a0\u281e\u2841\u281a\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u28b8\u28b8\u2800\u2800\u2800\u28b8\u2800\u2808\u28a7\u2859\u2886\u2839\u28ff\u2844\u283e\u28c6\u2800\u2800\u2800\u2819\u28a6\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2860\u280a\u2800\u2800\u2800\u2800\u2800\u287e\u28ef\u2800\u2880\u2874\u28e1\u281e\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f8\u28b8\u2800\u2800\u2800\u28b8\u2800\u2880\u2840\u28b1\u2818\u2804\u283b\u28f7\u2800\u28b9\u2840\u2800\u2800\u2800\u2800\u2811\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2880\u2854\u2801\u2800\u2800\u2800\u2800\u2800\u28a0\u28a7\u2845\u28a0\u280e\u28fc\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2840\u28b8\u28f8\u2800\u2800\u2800\u28b8\u2800\u2800\u2801\u2808\u2801\u2800\u2800\u28ff\u2843\u2800\u28e7\u2800\u2800\u2800\u2800\u2800\u2808\u28a6\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2880\u280e\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28fe\u2800\u284f\u28fc\u28cf\u28a1\u28c0\u28c0\u28e4\u28e4\u2824\u2824\u2824\u2834\u2825\u2825\u28e4\u28e4\u28c0\u28c0\u2818\u28b8\u28bf\u2800\u2800\u2800\u28fc\u2800\u2800\u2800\u2800\u2880\u2800\u2800\u28fe\u2802\u2808\u28ff\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2831\u2840\u2800\u2800\u2800\r\n\u2800\u2800\u2880\u280e\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28bf\u28f8\u28e5\u28ff\u281f\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2859\u281b\u283e\u2800\u2800\u2800\u28e7\u28e4\u2834\u281a\u281b\u280b\u2809\u28b9\u281b\u2832\u28a4\u28fd\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2831\u2840\u2800\u2800\r\n\u2800\u2880\u284e\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u289f\u281f\u280b\u2880\u28d4\u28c0\u28c0\u2864\u28a4\u28f4\u28f6\u28f6\u28f6\u2876\u2836\u2836\u2836\u2836\u2826\u28c4\u28c0\u2880\u2840\u2800\u2800\u2800\u2808\u28c1\u28c4\u28c4\u28e0\u28e4\u28e4\u28c8\u28e7\u28c0\u2800\u2808\u28c7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a1\u2800\u2800\r\n\u2800\u2858\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u287f\u2898\u28f2\u283f\u28ff\u280f\u28c9\u28f4\u28f6\u28ff\u28fb\u28ff\u28df\u2869\u2880\u28c0\u28c0\u28c0\u28c0\u28c0\u28d9\u28ff\u28ff\u28ff\u28e6\u28c4\u28f4\u28fe\u28df\u28e9\u28e5\u28c4\u28f6\u2856\u28ec\u28fd\u28ff\u28ff\u28f6\u28ff\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2887\u2800\r\n\u28a0\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2877\u28ab\u28a3\u287e\u28fb\u28fe\u28bf\u281f\u28f1\u28fe\u28ff\u28ff\u28f6\u281e\u283b\u28ff\u28fb\u2809\u285f\u284b\u2808\u2800\u28b9\u287f\u28bb\u285f\u28fb\u28cf\u28b2\u283b\u280b\u2819\u28bf\u287f\u2897\u28ff\u28cd\u28bb\u28ff\u28ee\u28b7\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2838\u2844\r\n\u2808\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u285f\u28e0\u28e3\u28ee\u28bf\u285f\u28f1\u288f\u28fc\u28df\u2893\u2833\u28c4\u2880\u2800\u2800\u2818\u28ff\u28e6\u2868\u2813\u2824\u28f4\u287e\u2801\u28f4\u28e7\u28fb\u28c7\u2818\u28b2\u28e4\u28e4\u28fe\u280f\u2800\u2808\u2839\u28ff\u28ff\u28ff\u28f7\u28b7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2807\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u287e\u28a0\u28f7\u285f\u28c1\u281e\u287c\u2883\u287e\u28bf\u28ff\u283f\u283f\u28ee\u28dd\u287b\u28b7\u28e4\u28c0\u28c8\u28f9\u28e9\u28ed\u2865\u2816\u28db\u2875\u28bf\u28ee\u28dd\u28db\u2877\u28b6\u28df\u28c1\u28c0\u28c0\u28f6\u287f\u28ff\u28ff\u28ff\u28ff\u28ef\u28e7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u2801\u289f\u280f\u2880\u280f\u287e\u2881\u285e\u2864\u2800\u289d\u28f3\u2826\u28e4\u28c9\u28d9\u28f3\u28fe\u2826\u282d\u28a4\u28f4\u28f6\u287e\u281f\u2801\u28b9\u287d\u28ff\u28ff\u28cd\u2819\u281b\u2836\u282f\u28ad\u28e5\u28f6\u283e\u28ff\u28ff\u28ff\u28ff\u28ff\u285e\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28f0\u2803\u28bc\u280f\u2880\u288e\u287e\u28a1\u285e\u2800\u2881\u28d2\u28d0\u28cc\u2849\u2819\u2889\u2809\u280b\u281b\u281b\u281b\u280b\u2809\u2801\u2800\u2800\u2810\u2840\u28b7\u2809\u28cf\u2819\u283b\u2813\u2812\u289a\u28db\u2829\u2817\u2810\u28ea\u28bf\u28ff\u28ff\u28ff\u28ff\u2879\u2844\u2800\u2800\u2800\u2800\u2800\u28b8\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u280f\u28a0\u280b\u28a0\u280b\u287c\u2800\u287e\u28e1\u28fe\u283f\u281b\u28cb\u28c9\u2809\u281b\u2813\u2832\u28f6\u28a6\u28e6\u28e4\u28c0\u28c0\u28c0\u28c0\u28c0\u2800\u2820\u2878\u28c0\u284f\u2800\u2800\u2800\u2880\u28c0\u2880\u28c0\u28c8\u28fa\u28f5\u28fe\u284f\u28bb\u28ff\u28ff\u28f7\u2879\u2840\u2800\u2800\u2800\u2800\u28b8\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u285f\u2882\u280f\u2880\u280f\u28fc\u2801\u28fc\u2803\u28bb\u2847\u2800\u28fe\u28ff\u285f\u281b\u28f7\u28f6\u28e4\u28e4\u28e4\u28c0\u28c0\u2800\u2809\u2809\u2809\u281b\u281b\u281b\u281b\u281b\u281b\u281b\u281b\u281b\u281b\u281b\u280b\u2809\u2809\u2809\u2808\u28c1\u28e4\u28ff\u28ff\u28ff\u28ff\u28f7\u28bf\u2840\u2800\u2800\u2800\u2838\r\n\u2880\u2800\u2800\u2800\u2800\u2800\u28fc\u285d\u285e\u28c0\u285e\u28a0\u2807\u28f0\u2857\u2800\u2800\u28b3\u28c4\u2808\u28bb\u28e7\u28c0\u28ff\u28ff\u285f\u2800\u28ff\u28ff\u28ff\u2819\u28ff\u28ff\u28ff\u281f\u28bf\u28f6\u28f6\u2832\u28b6\u28f6\u28f6\u285e\u28ba\u28ff\u28ff\u28df\u28ff\u28ff\u28ff\u2845\u2819\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u28f7\u2800\u2800\u2800\u2846\r\n\u2838\u2844\u2800\u2800\u2800\u28a0\u28af\u28f0\u2800\u2800\u2881\u285f\u28a0\u28ff\u283b\u28e6\u2840\u2800\u2819\u28bf\u28e6\u28ec\u28db\u28ff\u281b\u2837\u2836\u283f\u283f\u283f\u28e4\u28ff\u28ff\u28ff\u28c0\u28f8\u28ff\u28ff\u28c0\u28f8\u28ff\u28ff\u2801\u28b8\u28ff\u28ff\u2847\u28b8\u28ff\u287f\u2803\u28e0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28cf\u28c7\u2800\u28b0\u2803\r\n\u2800\u28a1\u2800\u2800\u2800\u28fe\u2806\u28cf\u28e0\u2834\u28be\u28f6\u28ff\u28ff\u28f7\u28ff\u28ff\u28c6\u2842\u2800\u2819\u28bf\u28ff\u28ff\u28bf\u2857\u2836\u28f6\u28e6\u28e4\u28e4\u28c0\u28c0\u28c8\u28c9\u28c9\u28c9\u28c9\u2849\u2809\u2809\u2809\u2809\u28c9\u2849\u28c9\u28c9\u28c9\u28c9\u28e4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28df\u28c6\u284c\u2800\r\n\u2800\u2808\u2887\u2800\u28b0\u28f3\u289e\u28fd\u28f7\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285d\u28a6\u2840\u2808\u2839\u289f\u28b7\u28ef\u2872\u28c4\u2809\u2808\u2809\u2819\u281a\u281b\u2829\u280b\u282d\u283f\u282f\u283f\u283f\u283f\u283f\u283f\u283f\u281f\u28fb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u288b\u287d\u287f\u2800\u2800\r\n\u2800\u2800\u2818\u2886\u2838\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u28c7\u2808\u28e7\u2800\u2800\u2808\u2833\u285d\u28bf\u28ee\u2851\u28c4\u28a7\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u28f5\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u289f\u28eb\u2836\u280b\u2870\u2801\u2800\u2800\r\n\u2800\u2800\u2800\u2808\u2886\u2819\u283a\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u280b\u2809\u287f\u2840\u28bb\u2844\u28b8\u2802\u2800\u2800\u2800\u2811\u2800\u28b9\u28ff\u28ee\u28a6\u28b3\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u289b\u28fb\u2865\u2812\u280b\u2800\u2800\u2870\u2801\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2808\u28a2\u2800\u28c0\u28c0\u28f6\u280b\u28c1\u28fe\u28ff\u28f1\u28ff\u28f7\u28b8\u28ff\u28f7\u2858\u28e7\u2840\u2800\u2800\u2800\u2800\u2800\u28bb\u28ff\u28ce\u28c6\u2833\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ab\u287b\u28ef\u28ff\u28f6\u287e\u28ff\u28ed\u28e5\u28c4\u2840\u2800\u2800\u2880\u281c\u2801\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u28bd\u28cf\u2870\u28b8\u285f\u28ff\u2847\u28ff\u28c7\u28ff\u2844\u28ab\u28bb\u28f7\u28f7\u28ff\u28e2\u28c0\u2801\u2800\u2800\u28f8\u28ff\u28ff\u28b8\u2800\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b8\u28fd\u28c7\u2849\u2811\u280b\u2809\u283b\u28b7\u28dd\u28f7\u28fe\u28dd\u28b6\u28e4\u280a\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2833\u28c1\u284f\u28ff\u28ff\u2801\u28b9\u285f\u28ff\u28c7\u2800\u28ab\u28bb\u28ff\u28cf\u2809\u2819\u281f\u28d2\u2812\u281b\u283f\u283f\u283e\u282f\u2824\u2836\u28a4\u28e4\u28c0\u28c0\u28e4\u28c0\u28f8\u28ff\u28ff\u28f7\u28e6\u28e4\u28c0\u2840\u2808\u28bf\u28ff\u28ff\u28ff\u281f\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2833\u28bf\u28ff\u2800\u28b8\u28c7\u289b\u28ff\u2844\u2808\u28a3\u287b\u28fb\u28e6\u2840\u2800\u2800\u2801\u2804\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2819\u287f\u280a\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2826\u28f8\u28ff\u2818\u28ff\u28c7\u2800\u2800\u28a3\u2818\u28fd\u28f7\u28e4\u28e4\u28e4\u28c4\u28c0\u28c0\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2814\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2823\u28bc\u28ff\u284e\u2807\u2887\u2883\u2818\u289e\u28ff\u28f6\u28f6\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ef\u28ed\u28ed\u28fd\u28ff\u28ff\u28ff\u28db\u28fb\u28fb\u28df\u287f\u281f\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2819\u281a\u2818\u2804\u28c7\u2808\u28ce\u28bf\u28ff\u28ff\u288d\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2801\u2800\u2888\u28d9\u283f\u281f\u280b\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u2809\u281b\u281b\u281b\u2812\u2812\u2812\u2812\u2800\u2800\u2800\u2808\u2809\u2801\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.18;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes memory) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20\r\n{\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    address private _previousOwner;\r\n    uint256 private _lockTime;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);}\r\n\r\n\r\n// pragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Pair {\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n        function factory() external view returns (address);\r\n\r\n}\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n}\r\n\r\n\r\n\r\n// pragma solidity >=0.6.2;\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n\r\ncontract LockToken is Ownable {\r\n    bool public isOpen = false;\r\n    mapping(address => bool) private _whiteList;\r\n    modifier open(address from, address to) {\r\n        require(isOpen || _whiteList[from] || _whiteList[to], \"Not Open\");\r\n        _;\r\n    }\r\n\r\n    constructor() {\r\n        _whiteList[msg.sender] = true;\r\n        _whiteList[address(this)] = true;\r\n    }\r\n\r\n    function openTrade() external onlyOwner\r\n    {\r\n        isOpen = true;\r\n    }\r\n\r\n    function includeToWhiteList(address _address) public onlyOwner {\r\n        _whiteList[_address] = true;\r\n    }\r\n\r\n}\r\n\r\ncontract DorkLord is Context, IERC20, LockToken \r\n{\r\n\r\n    using SafeMath for uint256;\r\n    address payable public marketingAddress = payable(0x20a1f7f7f1CD5A1f1E67744a74D7674Dc598cBae);\r\n    address payable public devAddress = payable(0xc64850000fe959032314A0d765E414a0c10cadF4);\r\n    address public newOwner = 0xc64850000fe959032314A0d765E414a0c10cadF4;\r\n    address public router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    mapping (address => uint256) private _rOwned;\r\n    mapping (address => uint256) private _tOwned;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private _isExcludedFromWhale;\r\n    mapping (address => bool) private _isExcluded;\r\n    address[] private _excluded;\r\n    string private _name = \"Dork Lord\";\r\n    string private _symbol = \"DORK\";\r\n    uint8 private _decimals = 18;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 private _tTotal = 1000000000 * 10**18;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n    uint256 private _tFeeTotal;\r\n    uint256 public _buyLiquidityFee = 0;\r\n    uint256 public _buyMarketingFee = 800;\r\n    uint256 public _buyDevFee = 100;\r\n    uint256 public buyTotalFee = _buyLiquidityFee+_buyMarketingFee+_buyDevFee;\r\n    uint256[] buyFeesBackup = [_buyLiquidityFee, _buyMarketingFee, _buyDevFee];\r\n    uint256 public _sellLiquidityFee = 0;\r\n    uint256 public _sellMarketingFee = 800;\r\n    uint256 public  _sellDevFee = 100;\r\n    uint256 public sellTotalFee = _sellLiquidityFee+_sellMarketingFee+_sellDevFee;\r\n    uint256 public _tfrLiquidityFee = 0;\r\n    uint256 public _tfrMarketingFee = 5;\r\n    uint256 public  _tfrDevFee = 5;\r\n    uint256 public transferTotalFee = _tfrLiquidityFee+_tfrMarketingFee+_tfrDevFee;\r\n    uint256 public _maxTxAmount = _tTotal.div(100).mul(1); //x% of total supply\r\n    uint256 public _walletHoldingMaxLimit =  _tTotal.div(100).mul(2); //x% of total supply\r\n    uint256 private minimumTokensBeforeSwap = 5000000 * 10**18;\r\n\r\n        \r\n    IUniswapV2Router02 public immutable uniswapV2Router;\r\n    address public immutable uniswapV2Pair;\r\n    \r\n    bool inSwapAndLiquify;\r\n    bool public swapAndLiquifyEnabled = true;\r\n\r\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\r\n    event SwapAndLiquify(\r\n        uint256 tokensSwapped,\r\n        uint256 ethReceived,\r\n        uint256 tokensIntoLiqudity\r\n    );\r\n        \r\n    event SwapTokensForETH(\r\n        uint256 amountIn,\r\n        address[] path\r\n    );\r\n    \r\n    modifier lockTheSwap {\r\n        inSwapAndLiquify = true;\r\n        _;\r\n        inSwapAndLiquify = false;\r\n    }\r\n    \r\n    constructor() {\r\n        _rOwned[newOwner] = _rTotal;\r\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\r\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\r\n            .createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapV2Router = _uniswapV2Router;\r\n        _isExcludedFromFee[newOwner] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        includeToWhiteList(newOwner);\r\n        _isExcludedFromWhale[newOwner] = true;\r\n        emit Transfer(address(0), newOwner, _tTotal);\r\n        excludeWalletsFromWhales();\r\n\r\n        transferOwnership(newOwner);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        if (_isExcluded[account]) return _tOwned[account];\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\r\n        return true;\r\n    }\r\n\r\n\r\n    function totalFees() public view returns (uint256) {\r\n        return _tFeeTotal;\r\n    }\r\n\r\n    function minimumTokensBeforeSwapAmount() public view returns (uint256) {\r\n        return minimumTokensBeforeSwap;\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\r\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\r\n        uint256 currentRate =  _getRate();\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private\r\n    {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private open(from, to)\r\n    {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        if(from != owner() && to != owner()) {\r\n            require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\r\n        }\r\n\r\n        uint256 contractTokenBalance = balanceOf(address(this));\r\n        bool overMinimumTokenBalance = contractTokenBalance >= minimumTokensBeforeSwap;\r\n\r\n        checkForWhale(from, to, amount);\r\n\r\n        if (!inSwapAndLiquify && swapAndLiquifyEnabled && from != uniswapV2Pair)\r\n        {\r\n            if (overMinimumTokenBalance)\r\n            {\r\n                contractTokenBalance = minimumTokensBeforeSwap;\r\n                swapTokens(contractTokenBalance);\r\n            }\r\n        }\r\n\r\n        bool takeFee = true;\r\n\r\n        //if any account belongs to _isExcludedFromFee account then remove the fee\r\n        if(_isExcludedFromFee[from] || _isExcludedFromFee[to])\r\n        {\r\n            takeFee = false;\r\n        }\r\n        _tokenTransfer(from, to, amount, takeFee);\r\n    }\r\n\r\n\r\n    function swapTokens(uint256 contractTokenBalance) private lockTheSwap\r\n    {\r\n        uint256 __buyTotalFee  = _buyLiquidityFee.add(_buyMarketingFee).add(_buyDevFee);    \r\n        uint256 __sellTotalFee = _sellLiquidityFee.add(_sellMarketingFee).add(_sellDevFee);\r\n        uint256 totalSwapableFees = __buyTotalFee.add(__sellTotalFee);\r\n\r\n        uint256 halfLiquidityTokens = contractTokenBalance.mul(_buyLiquidityFee+_sellLiquidityFee).div(totalSwapableFees).div(2);\r\n        uint256 swapableTokens = contractTokenBalance.sub(halfLiquidityTokens);\r\n        swapTokensForEth(swapableTokens);\r\n\r\n        uint256 newBalance = address(this).balance;\r\n        uint256 ethForLiquidity = newBalance.mul(_buyLiquidityFee+_sellLiquidityFee).div(totalSwapableFees).div(2);\r\n\r\n        if(halfLiquidityTokens>0 && ethForLiquidity>0)\r\n        {\r\n            addLiquidity(halfLiquidityTokens, ethForLiquidity);\r\n        }\r\n\r\n        uint256 ethForMarketing = newBalance.mul(_buyMarketingFee+_sellMarketingFee).div(totalSwapableFees);\r\n        if(ethForMarketing>0)\r\n        {\r\n           marketingAddress.transfer(ethForMarketing);\r\n        }\r\n\r\n        uint256 ethForDev = newBalance.sub(ethForLiquidity).sub(ethForMarketing);\r\n        if(ethForDev>0)\r\n        {\r\n            devAddress.transfer(ethForDev);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private\r\n    {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n        emit SwapTokensForETH(tokenAmount, path);\r\n    }\r\n\r\n\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // approve token transfer to cover all possible scenarios\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n\r\n        // add the liquidity\r\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount,bool takeFee) private\r\n    {\r\n        if(!takeFee) \r\n        {\r\n            removeAllFee();\r\n        }\r\n        else\r\n        {\r\n            if(recipient==uniswapV2Pair)\r\n            {\r\n                setSellFee();\r\n            }\r\n\r\n            if(sender != uniswapV2Pair && recipient != uniswapV2Pair)\r\n            {\r\n                setWalletToWalletTransferFee();\r\n            }\r\n        }\r\n\r\n\r\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\r\n            _transferFromExcluded(sender, recipient, amount);\r\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferToExcluded(sender, recipient, amount);\r\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\r\n            _transferBothExcluded(sender, recipient, amount);\r\n        } else {\r\n            _transferStandard(sender, recipient, amount);\r\n        }\r\n\r\n        restoreAllFee();\r\n\r\n    }\r\n\r\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount,  uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(tLiquidity>0)  { emit Transfer(sender, address(this), tLiquidity); }\r\n    }\r\n\r\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n\t    _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(tLiquidity>0)  { emit Transfer(sender, address(this), tLiquidity); }\r\n    }\r\n\r\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n    \t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(tLiquidity>0)  { emit Transfer(sender, address(this), tLiquidity); }\r\n    }\r\n\r\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 tTransferAmount, uint256 tLiquidity) = _getValues(tAmount);\r\n    \t_tOwned[sender] = _tOwned[sender].sub(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _takeLiquidity(tLiquidity);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n        if(tLiquidity>0)  { emit Transfer(sender, address(this), tLiquidity); }\r\n    }\r\n\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tLiquidity) = _getTValues(tAmount);\r\n        (uint256 rAmount, uint256 rTransferAmount) = _getRValues(tAmount, tLiquidity, _getRate());\r\n        return (rAmount, rTransferAmount, tTransferAmount, tLiquidity);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\r\n        uint256 tLiquidity = calculateLiquidityFee(tAmount);\r\n        uint256 tTransferAmount = tAmount.sub(tLiquidity);\r\n        return (tTransferAmount, tLiquidity);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256) {\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rLiquidity);\r\n        return (rAmount, rTransferAmount);\r\n    }\r\n\r\n    function _getRate() private view returns(uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns(uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        for (uint256 i = 0; i < _excluded.length; i++) {\r\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\r\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\r\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\r\n        }\r\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _takeLiquidity(uint256 tLiquidity) private {\r\n        uint256 currentRate =  _getRate();\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        if(_isExcluded[address(this)]) {\r\n            _tOwned[address(this)] = _tOwned[address(this)].add(tLiquidity);\r\n        }\r\n    }\r\n\r\n\r\n    function calculateLiquidityFee(uint256 _amount) private view returns (uint256) {\r\n        uint256 fees = _buyLiquidityFee.add(_buyMarketingFee).add(_buyDevFee);\r\n        return _amount.mul(fees).div(1000);\r\n    }\r\n\r\n\r\n    function isExcludedFromFee(address account) public view onlyOwner returns(bool)  {\r\n        return _isExcludedFromFee[account];\r\n    }\r\n\r\n    function excludeFromFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = true;\r\n    }\r\n\r\n    function includeInFee(address account) public onlyOwner {\r\n        _isExcludedFromFee[account] = false;\r\n    }\r\n\r\n    function removeAllFee() private {\r\n        _buyLiquidityFee = 0;\r\n        _buyMarketingFee = 0;\r\n        _buyDevFee = 0;\r\n    }\r\n\r\n    function restoreAllFee() private\r\n    {\r\n        _buyLiquidityFee = buyFeesBackup[0];\r\n        _buyMarketingFee = buyFeesBackup[1];\r\n        _buyDevFee = buyFeesBackup[2];\r\n    }\r\n\r\n    function setSellFee() private\r\n    {\r\n        _buyLiquidityFee = _sellLiquidityFee;\r\n        _buyMarketingFee = _sellMarketingFee;\r\n        _buyDevFee = _sellDevFee;\r\n    }\r\n\r\n\r\n    function setWalletToWalletTransferFee() private \r\n    {\r\n        _buyLiquidityFee = _tfrLiquidityFee;\r\n        _buyMarketingFee = _tfrMarketingFee;\r\n        _buyDevFee = _tfrDevFee;        \r\n    }\r\n\r\n\r\n    function setBuyFeePercentages(uint256 _liquidityFee, uint256  _marketingFee, uint256 _devFee)\r\n    external onlyOwner()\r\n    {\r\n        _buyLiquidityFee = _liquidityFee;\r\n        _buyMarketingFee = _marketingFee;\r\n        _buyDevFee = _devFee;\r\n        buyFeesBackup = [_buyLiquidityFee, _buyMarketingFee, _buyDevFee];\r\n        uint256 totalFee = _liquidityFee.add(_marketingFee).add(_devFee);\r\n        buyTotalFee = _buyLiquidityFee+_buyMarketingFee+_buyDevFee;\r\n        require(totalFee<=2000, \"Too High Fee\");\r\n    }\r\n\r\n    function setSellFeePercentages(uint256 _liquidityFee, uint256  _marketingFee, uint256 _devFee)\r\n    external onlyOwner()\r\n    {\r\n        _sellLiquidityFee = _liquidityFee;\r\n        _sellMarketingFee = _marketingFee;\r\n        _sellDevFee = _devFee;\r\n        uint256 totalFee = _liquidityFee.add(_marketingFee).add(_devFee);\r\n        sellTotalFee = _sellLiquidityFee+_sellMarketingFee+_sellDevFee;\r\n        require(totalFee<=2000, \"Too High Fee\");\r\n    }\r\n\r\n\r\n    function setTransferFeePercentages(uint256 _liquidityFee, uint256  _marketingFee, uint256 _devFee)\r\n    external onlyOwner()\r\n    {\r\n        _tfrLiquidityFee = _liquidityFee;\r\n        _tfrMarketingFee = _marketingFee;\r\n        _tfrDevFee = _devFee;\r\n        transferTotalFee = _tfrLiquidityFee+_tfrMarketingFee+_tfrDevFee;\r\n        uint256 totalFee = _liquidityFee.add(_marketingFee).add(_devFee);\r\n        require(totalFee<=200, \"Too High Fee\");\r\n    }\r\n\r\n\r\n    function setMaxTxAmount(uint256 maxTxAmount) external onlyOwner()\r\n    {\r\n        _maxTxAmount = maxTxAmount;\r\n        require(_maxTxAmount>=_tTotal.div(5), \"Too low limit\");\r\n    }\r\n\r\n    function setMinimumTokensBeforeSwap(uint256 _minimumTokensBeforeSwap) external onlyOwner()\r\n    {\r\n        minimumTokensBeforeSwap = _minimumTokensBeforeSwap;\r\n    }\r\n\r\n    function setMarketingAddress(address _marketingAddress) external onlyOwner()\r\n    {\r\n        marketingAddress = payable(_marketingAddress);\r\n    }\r\n\r\n    function setDevAddress(address _devAddress) external onlyOwner()\r\n    {\r\n        devAddress = payable(_devAddress);\r\n    }\r\n\r\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner\r\n    {\r\n        swapAndLiquifyEnabled = _enabled;\r\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\r\n    }\r\n\r\n    function excludeWalletsFromWhales() private\r\n    {\r\n        _isExcludedFromWhale[owner()]=true;\r\n        _isExcludedFromWhale[address(this)]=true;\r\n        _isExcludedFromWhale[uniswapV2Pair]=true;\r\n        _isExcludedFromWhale[devAddress]=true;\r\n        _isExcludedFromWhale[marketingAddress]=true;\r\n    }\r\n\r\n\r\n    function checkForWhale(address from, address to, uint256 amount)  private view\r\n    {\r\n        uint256 newBalance = balanceOf(to).add(amount);\r\n        if(!_isExcludedFromWhale[from] && !_isExcludedFromWhale[to])\r\n        {\r\n            require(newBalance <= _walletHoldingMaxLimit, \"Exceeding max tokens limit in the wallet\");\r\n        }\r\n        if(from==uniswapV2Pair && !_isExcludedFromWhale[to])\r\n        {\r\n            require(newBalance <= _walletHoldingMaxLimit, \"Exceeding max tokens limit in the wallet\");\r\n        }\r\n    }\r\n\r\n    function setExcludedFromWhale(address account, bool _enabled) public onlyOwner\r\n    {\r\n        _isExcludedFromWhale[account] = _enabled;\r\n    }\r\n\r\n    function  setWalletMaxHoldingLimit(uint256 _amount) public onlyOwner\r\n    {\r\n        _walletHoldingMaxLimit = _amount;\r\n        require(_walletHoldingMaxLimit > _tTotal.div(100).mul(1), \"Too less limit\"); //min 1%\r\n\r\n    }\r\n\r\n    function rescueStuckBalance () public onlyOwner {\r\n        (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\r\n        require(success, \"Transfer failed.\");\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensSwapped\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ethReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensIntoLiqudity\",\"type\":\"uint256\"}],\"name\":\"SwapAndLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SwapAndLiquifyEnabledUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"SwapTokensForETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tfrDevFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tfrLiquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_tfrMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_walletHoldingMaxLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"includeToWhiteList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTokensBeforeSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"newOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setBuyFeePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_devAddress\",\"type\":\"address\"}],\"name\":\"setDevAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setExcludedFromWhale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingAddress\",\"type\":\"address\"}],\"name\":\"setMarketingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxTxAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTokensBeforeSwap\",\"type\":\"uint256\"}],\"name\":\"setMinimumTokensBeforeSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setSellFeePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setSwapAndLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_devFee\",\"type\":\"uint256\"}],\"name\":\"setTransferFeePercentages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setWalletMaxHoldingLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DorkLord", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://019d01f0a3b2dcbc4e592606dd5c0cb541cfb8ba1ae4807f913c7338d671d649"}