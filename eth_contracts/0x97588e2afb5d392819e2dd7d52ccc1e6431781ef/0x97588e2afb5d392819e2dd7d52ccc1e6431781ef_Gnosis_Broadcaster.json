{"SourceCode": "# @version 0.3.10\r\n\"\"\"\r\n@title Gnosis Broadcaster\r\n@author CurveFi\r\n@notice Using Arbitrary Message Bridge (AMB)\r\n\"\"\"\r\n\r\n\r\ninterface ArbitraryMessageBridge:\r\n    def requireToPassMessage(_contract: address, _data: Bytes[(MAX_BYTES + 160) * MAX_MESSAGES], _gas: uint256) -> bytes32: nonpayable\r\n    def maxGasPerTx() -> uint256: view\r\n\r\n\r\nevent ApplyAdmins:\r\n    admins: AdminSet\r\n\r\nevent CommitAdmins:\r\n    future_admins: AdminSet\r\n\r\nevent SetBridge:\r\n    bridge: ArbitraryMessageBridge\r\n\r\n\r\nenum Agent:\r\n    OWNERSHIP\r\n    PARAMETER\r\n    EMERGENCY\r\n\r\n\r\nstruct AdminSet:\r\n    ownership: address\r\n    parameter: address\r\n    emergency: address\r\n\r\nstruct Message:\r\n    target: address\r\n    data: Bytes[MAX_BYTES]\r\n\r\n\r\nMAX_BYTES: constant(uint256) = 1024\r\nMAX_MESSAGES: constant(uint256) = 8\r\n\r\nadmins: public(AdminSet)\r\nfuture_admins: public(AdminSet)\r\n\r\nagent: HashMap[address, Agent]\r\n\r\nbridge: public(ArbitraryMessageBridge)\r\n\r\n\r\n@external\r\ndef __init__(_admins: AdminSet, _bridge: ArbitraryMessageBridge):\r\n    assert _admins.ownership != _admins.parameter  # a != b\r\n    assert _admins.ownership != _admins.emergency  # a != c\r\n    assert _admins.parameter != _admins.emergency  # b != c\r\n\r\n    self.admins = _admins\r\n\r\n    self.agent[_admins.ownership] = Agent.OWNERSHIP\r\n    self.agent[_admins.parameter] = Agent.PARAMETER\r\n    self.agent[_admins.emergency] = Agent.EMERGENCY\r\n\r\n    self.bridge = _bridge\r\n\r\n    log ApplyAdmins(_admins)\r\n    log SetBridge(_bridge)\r\n\r\n\r\n@external\r\ndef broadcast(_messages: DynArray[Message, MAX_MESSAGES], _gas_limit: uint256 = 0):\r\n    \"\"\"\r\n    @notice Broadcast a sequence of messages.\r\n    @param _messages The sequence of messages to broadcast.\r\n    @param _gas_limit The L2 gas limit required to execute the sequence of messages.\r\n    \"\"\"\r\n    agent: Agent = self.agent[msg.sender]\r\n    assert agent != empty(Agent)\r\n\r\n    gas_limit: uint256 = _gas_limit\r\n    if gas_limit == 0:\r\n        gas_limit = self.bridge.maxGasPerTx()\r\n\r\n    self.bridge.requireToPassMessage(\r\n        self,\r\n        _abi_encode(  # relay(uint256,(address,bytes)[])\r\n            agent,\r\n            _messages,\r\n            method_id=method_id(\"relay(uint256,(address,bytes)[])\"),\r\n        ),\r\n        _gas_limit,\r\n    )\r\n\r\n\r\n@external\r\ndef set_bridge(_bridge: ArbitraryMessageBridge):\r\n    \"\"\"\r\n    @notice Set ArbitraryMessageBridge contract proxy.\r\n    \"\"\"\r\n    assert msg.sender == self.admins.ownership\r\n\r\n    self.bridge = _bridge\r\n    log SetBridge(_bridge)\r\n\r\n\r\n@external\r\ndef commit_admins(_future_admins: AdminSet):\r\n    \"\"\"\r\n    @notice Commit an admin set to use in the future.\r\n    \"\"\"\r\n    assert msg.sender == self.admins.ownership\r\n\r\n    assert _future_admins.ownership != _future_admins.parameter  # a != b\r\n    assert _future_admins.ownership != _future_admins.emergency  # a != c\r\n    assert _future_admins.parameter != _future_admins.emergency  # b != c\r\n\r\n    self.future_admins = _future_admins\r\n    log CommitAdmins(_future_admins)\r\n\r\n\r\n@external\r\ndef apply_admins():\r\n    \"\"\"\r\n    @notice Apply the future admin set.\r\n    \"\"\"\r\n    admins: AdminSet = self.admins\r\n    assert msg.sender == admins.ownership\r\n\r\n    # reset old admins\r\n    self.agent[admins.ownership] = empty(Agent)\r\n    self.agent[admins.parameter] = empty(Agent)\r\n    self.agent[admins.emergency] = empty(Agent)\r\n\r\n    # set new admins\r\n    future_admins: AdminSet = self.future_admins\r\n    self.agent[future_admins.ownership] = Agent.OWNERSHIP\r\n    self.agent[future_admins.parameter] = Agent.PARAMETER\r\n    self.agent[future_admins.emergency] = Agent.EMERGENCY\r\n\r\n    self.admins = future_admins\r\n    log ApplyAdmins(future_admins)", "ABI": "[{\"name\":\"ApplyAdmins\",\"inputs\":[{\"name\":\"admins\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}],\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"CommitAdmins\",\"inputs\":[{\"name\":\"future_admins\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}],\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"name\":\"SetBridge\",\"inputs\":[{\"name\":\"bridge\",\"type\":\"address\",\"indexed\":false}],\"anonymous\":false,\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"constructor\",\"inputs\":[{\"name\":\"_admins\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}]},{\"name\":\"_bridge\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"broadcast\",\"inputs\":[{\"name\":\"_messages\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}]}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"broadcast\",\"inputs\":[{\"name\":\"_messages\",\"type\":\"tuple[]\",\"components\":[{\"name\":\"target\",\"type\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\"}]},{\"name\":\"_gas_limit\",\"type\":\"uint256\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"set_bridge\",\"inputs\":[{\"name\":\"_bridge\",\"type\":\"address\"}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"commit_admins\",\"inputs\":[{\"name\":\"_future_admins\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}]}],\"outputs\":[]},{\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"apply_admins\",\"inputs\":[],\"outputs\":[]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"admins\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"future_admins\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"components\":[{\"name\":\"ownership\",\"type\":\"address\"},{\"name\":\"parameter\",\"type\":\"address\"},{\"name\":\"emergency\",\"type\":\"address\"}]}]},{\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"bridge\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\"}]}]", "ContractName": "Gnosis Broadcaster", "CompilerVersion": "vyper:0.3.10", "OptimizationUsed": "0", "Runs": "0", "ConstructorArguments": "00000000000000000000000071f718d3e4d1449d1502a6a7595eb84ebccb16830000000000000000000000004eeb3ba4f221ca16ed4a0cc7254e2e32df948c5f000000000000000000000000467947ee34af926cf1dcac093870f613c96b1e0c0000000000000000000000004c36d2919e407f0cc2ee3c993ccf8ac26d9ce64e", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": ""}