{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/addrs_and_selectors.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nlibrary Addrs {\\n  address internal constant UNISWAP_V2_FACTORY = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f; // ON ETHER OR EVERYWHERE ?\\n  address internal constant UNISWAP_V3_FACTORY = 0x1F98431c8aD98523631AE4a59f267346ea31F984; // ON ETHER\\n  address internal constant SUSHI_FACTORY = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac; // ON ETHER\\n  address internal constant WETH9 = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // ON ETHER from v3-periphery\\n  address internal constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n  address internal constant CURVE_USDT_WBTC_WETH_POOL = 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46;\\n  address internal constant CURVE_DAI_USDC_USDT_POOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\\n//  address internal constant SUSHI_FACTORY = 0xc35DADB65012eC5796536bD9864eD8773aBc74C4; // ON MOVR\\n//  address internal constant ANYSWAP_ETH_TO_MOVR_BRIDGE = 0x10c6b61DbF44a083Aec3780aCF769C77BE747E23;\\n//  address internal constant ANYCALLPROXY_ON_ETHER = 0x37414a8662bC1D25be3ee51Fb27C2686e2490A89;\\n}\\n\\nlibrary Selectors {\\n  bytes4 internal constant UNISWAP_V2_GETPAIR_SELECTOR = bytes4(keccak256(\\\"getPair(address,address)\\\"));\\n  bytes4 internal constant UNISWAP_V2_GETRESERVES_SELECTOR = bytes4(keccak256(\\\"getReserves()\\\"));\\n\\n  bytes4 internal constant UNISWAP_V2_PAIR_SWAP_SELECTOR = bytes4(keccak256(\\\"swap(uint256,uint256,address,bytes)\\\"));\\n\\n  uint internal constant SLIPPAGE_LIMIT = 200;\\n//  bytes4 internal constant ANYCALLPROXY_ANYCALL_SELECTOR = bytes4(keccak256(\\\"anyCall(address,bytes,address,uint256)\\\"));\\n\\n  bytes4 internal constant TRANSFER_SELECTOR = bytes4(keccak256(\\\"transfer(address,uint256)\\\"));\\n  bytes4 internal constant TRANSFERFROM_SELECTOR = bytes4(keccak256(\\\"transferFrom(address,address,uint256)\\\"));\\n  bytes4 internal constant BALANCEOF_SELECTOR = bytes4(keccak256(\\\"balanceOf(address)\\\"));\\n  bytes4 internal constant ALLOWANCE_SELECTOR = bytes4(keccak256(\\\"allowance(address,address)\\\"));\\n}\\n\"\r\n    },\r\n    \"contracts/CalldataLoader.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\n//import \\\"../libraries/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\\\";\\n\\nlibrary CalldataLoader {\\n//  using SafeMath for uint;\\n\\n  function loadUint8(uint self) pure internal returns (uint x) {\\n    assembly {\\n      x := shr(248, calldataload(self))\\n    }\\n  }\\n  function loadUint16(uint self) pure internal returns (uint x) {\\n    assembly {\\n      x := shr(240, calldataload(self))\\n    }\\n  }\\n  function loadUint24(uint self) pure internal returns (uint x) {\\n    assembly {\\n      x := shr(232, calldataload(self))\\n    }\\n  }\\n  function loadUint256(uint self) pure internal returns (uint x) {\\n    assembly {\\n      x := calldataload(self)\\n    }\\n  }\\n  function loadAddress(uint self) pure internal returns (address x) {\\n    assembly {\\n      x := shr(96, calldataload(self)) // 12 * 8 = 96\\n    }\\n  }\\n  function loadTokenFromArray(uint self) pure internal returns (address x) {\\n    assembly {\\n      x := shr(96, calldataload(add(73, mul(20, self)))) // 73 = 68 + 5\\n    }\\n  }\\n  function loadTokenFromArrayV4(uint arr_idx, uint start_ind) pure internal returns (address x) {\\n    assembly {\\n      x := shr(96, calldataload(add(start_ind, mul(20, arr_idx))))\\n    }\\n  }\\n//  function loadTotalsFromArrayV4(uint arr_idx, uint start_ind) pure internal returns (uint x) {\\n//    assembly {\\n//      x := calldataload(add(start_ind, mul(32, arr_idx)))\\n//    }\\n//  }\\n//  function loadExpectedFromArrayV4(uint arr_idx, uint start_ind) pure internal returns (uint x) {\\n//    assembly {\\n//      x := calldataload(add(start_ind, mul(32, arr_idx)))\\n//    }\\n//  }\\n//  function loadBalancesFromArrayV4(uint arr_idx, uint start_ind) pure internal returns (uint x) {\\n//    assembly {\\n//      x := calldataload(add(start_ind, mul(32, arr_idx)))\\n//    }\\n//  }\\n  function loadVariableUint(uint self, uint len) pure internal returns (uint x) {\\n    uint extra = (uint(32) - len) << 3;\\n    assembly {\\n      x := shr(extra, calldataload(self))\\n    }\\n  }\\n}\\n\\n//library BytesLoader {\\n////  using SafeMath for uint;\\n//\\n//  function mloadUint8(uint self) pure internal returns (uint x) {\\n//    assembly {\\n//      x := shr(248, mload(self))\\n//    }\\n//  }\\n//  function mloadUint16(uint self) pure internal returns (uint x) {\\n//    assembly {\\n//      x := shr(240, mload(self))\\n//    }\\n//  }\\n//  function mloadUint24(uint self) pure internal returns (uint x) {\\n//    assembly {\\n//      x := shr(232, mload(self))\\n//    }\\n//  }\\n//  function mloadUint256(uint self) pure internal returns (uint x) {\\n//    assembly {\\n//      x := mload(self)\\n//    }\\n//  }\\n//  function mloadAddress(uint self) pure internal returns (address x) {\\n//    assembly {\\n//      x := shr(96, mload(self)) // 12 * 8 = 96\\n//    }\\n//  }\\n////  function mloadTokenFromArray(uint self) pure internal returns (address x) {\\n////    assembly {\\n////      x := shr(96, mload(add(73, mul(20, self)))) // 73 = 68 + 5\\n////    }\\n////  }\\n//  function mloadTokenFromArrayV4(uint arr_idx, uint start_ind) pure internal returns (address x) {\\n//    assembly {\\n//      x := shr(96, mload(add(start_ind, mul(20, arr_idx))))\\n//    }\\n//  }\\n////  function mloadTotalsFromArrayV4(uint arr_idx, uint start_ind) pure internal returns (uint x) {\\n////    assembly {\\n////      x := mload(add(start_ind, mul(32, arr_idx)))\\n////    }\\n////  }\\n////  function mtopUpTotalsAtArrayV4(uint arr_idx, uint start_ind, uint extra) pure internal returns (uint x) {\\n////    uint addr = start_ind + arr_idx * 32;\\n////    uint v;\\n////    assembly {\\n////      v := mload(addr)\\n////    }\\n////    v += extra;\\n////    assembly {\\n////      mstore(addr, v)\\n////    }\\n////  }\\n////  function mloadExpectedFromArrayV4(uint arr_idx, uint start_ind) pure internal returns (uint x) {\\n////    assembly {\\n////      x := mload(add(start_ind, mul(32, arr_idx)))\\n////    }\\n////  }\\n////  function mtopUpExpectedAtArrayV4(uint arr_idx, uint start_ind, uint extra) pure internal returns (uint x) {\\n////    uint addr = start_ind + arr_idx * 32;\\n////    uint v;\\n////    assembly {\\n////      v := mload(addr)\\n////    }\\n////    v += extra;\\n////    assembly {\\n////      mstore(addr, v)\\n////    }\\n////  }\\n////  function mloadBalancesFromArrayV4(uint arr_idx, uint start_ind) pure internal returns (uint x) {\\n////    assembly {\\n////      x := mload(add(start_ind, mul(32, arr_idx)))\\n////    }\\n////  }\\n////  function mtopUpBalancesAtArrayV4(uint arr_idx, uint start_ind, uint extra) pure internal returns (uint x) {\\n////    uint addr = start_ind + arr_idx * 32;\\n////    uint v;\\n////    assembly {\\n////      v := mload(addr)\\n////    }\\n////    v += extra;\\n////    assembly {\\n////      mstore(addr, v)\\n////    }\\n////  }\\n////  function mwithdrawBalancesAtArrayV4(uint arr_idx, uint start_ind, uint extra) pure internal returns (uint x) {\\n////    uint addr = start_ind + arr_idx * 32;\\n////    uint v;\\n////    assembly {\\n////      v := mload(addr)\\n////    }\\n////    v -= extra;\\n////    assembly {\\n////      mstore(addr, v)\\n////    }\\n////  }\\n////  function mtopUpTotalFrom(uint ind, uint extra) pure internal returns (uint x) {\\n////    uint v;\\n////    assembly {\\n////      v := mload(ind)\\n////    }\\n////    v += extra;\\n////    assembly {\\n////      mstore(ind, v)\\n////    }\\n////  }\\n//  function mloadVariableUint(uint self, uint len) pure internal returns (uint x) {\\n//    uint extra = (uint(32) - len) << 3;\\n//    assembly {\\n//      x := shr(extra, mload(self))\\n//    }\\n//  }\\n//}\\n\"\r\n    },\r\n    \"contracts/ETHRouter_V5_FromInput.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n//i mport \\\"./libraries/BytesLib.sol\\\";\\nimport \\\"../libraries/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../libraries/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n//import \\\"../libraries/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../libraries/v2-core/contracts/interfaces/IUniswapV2Callee.sol\\\";\\nimport \\\"../libraries/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\nimport \\\"../libraries/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n//import \\\"../libraries/v2-core/contracts/interfaces/IERC20.sol\\\";\\n//import \\\"../libraries/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n//import \\\"../libraries/openzeppelin-contracts/contracts/interfaces/IERC2612.sol\\\";\\n//import \\\"./libraries/anyswap-v1-core/contracts/AnyswapV4CallProxy.sol\\\";\\n\\n//import \\\"../libraries/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"./TickMath_0.8.sol\\\";\\n\\nimport \\\"../libraries/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\nimport \\\"./interfaces/IWETH9.sol\\\";\\nimport \\\"../libraries/TransferHelper.sol\\\";\\n\\n//import \\\"../libraries/balancer-v2-monorepo/pkg/interfaces/contracts/vault/IVault.sol\\\";\\n//import \\\"../libraries/balancer-v2-monorepo/pkg/interfaces/contracts/vault/IBasePool.sol\\\";\\n//import \\\"../libraries/balancer-v2-monorepo/pkg/interfaces/contracts/vault/IAsset.sol\\\";\\n\\nimport \\\"./CalldataLoader.sol\\\";\\n//import \\\"./ETHRouter_V4_types.sol\\\";\\nimport \\\"./ETHRouter_V5_types.sol\\\";\\n\\nimport \\\"./addrs_and_selectors.sol\\\";\\n\\ncontract ETHRouter_V5_FromInput is IUniswapV3SwapCallback {\\n//  using SafeMath for uint;\\n//  using SafeMath for int;\\n  using CalldataLoader for uint;\\n//  using BytesLoader for uint;\\n\\n  using V5CallType_basic_lib for V5CallType_basic_lib.CallType_basic_vars;\\n//  using V5CallType_1_lib for V5CallType_1_lib.CallType_1_vars;\\n  using V5CallType_5_lib for V5CallType_5_lib.CallType_5_vars;\\n  using V5CallType_6_lib for V5CallType_6_lib.CallType_6_vars;\\n  using V5CallType_7_lib for V5CallType_7_lib.CallType_7_vars;\\n  using V5ExecHeader for V5ExecHeader.Header;\\n//  address current_pool;\\n\\n  address public owner;\\n  address public current_caller;\\n  address private callback_to_check;\\n  uint public value_to_pay;\\n  uint public constant network = 1;\\n\\n  uint public constant SLIPPAGE_LIMIT = 200;\\n\\n  constructor() {\\n    owner = msg.sender;\\n  }\\n\\n  modifier ownerOnly {\\n    require(owner == msg.sender, 'ownerOnly');\\n    _;\\n  }\\n\\n  modifier isLocked {\\n    require(current_caller != address(0), 'isLocked: false');\\n    _;\\n  }\\n\\n  modifier isUnlocked {\\n    require(current_caller == address(0), 'isUnlocked: false');\\n    _;\\n  }\\n\\n  modifier isCallbackChecked {\\n    require(callback_to_check == msg.sender, 'callback_to_check failure');\\n    _;\\n  }\\n\\n  function setOwner(address newOwner) external ownerOnly {\\n    owner = newOwner;\\n  }\\n\\n\\n  function exec(bytes calldata data) isUnlocked() external payable returns (uint ind) {\\n    current_caller = msg.sender;\\n    (V5ExecHeader.Header memory h, uint ind_) = V5ExecHeader.load(data);\\n    uint tmp;\\n    assembly {\\n      tmp := data.offset\\n    }\\n//    uint old_balance = IERC20(uint(h.targetArrInd).loadTokenFromArrayV4(h.tokensOffset + tmp)).balanceOf(msg.sender);\\n    if (h.fromInput) {\\n      ind = execFromInputExternalHandler(h, ind_, data);\\n    } else {\\n//      ind = execFromOutputExternalHandler(h, ind_, data);\\n      revert(\\\"execFromOutput is not implemented\\\");\\n    }\\n//    uint new_balance = IERC20(uint(h.targetArrInd).loadTokenFromArrayV4(h.tokensOffset + tmp)).balanceOf(msg.sender);\\n//    console.log(\\\"balance diff: \\\", new_balance - old_balance);\\n    current_caller = address(0);\\n  }\\n\\n  function execFromInputExternalHandler(V5ExecHeader.Header memory h, uint ind_, bytes calldata data) internal returns (uint ind) {\\n    V5ExecState.V5ExecState memory st = h.newState();\\n    ind = ind_;\\n\\n    {\\n      uint tmp;\\n      assembly {\\n        tmp := data.offset\\n      }\\n      if (st.header.doAcquireInputERC20Token) {\\n        if (uint256(st.header.sourceArrInd).loadTokenFromArrayV4(st.header.tokensOffset + tmp) == Addrs.WETH9) {\\n          if (st.msgValueLeft > 0) {\\n            WETH9(Addrs.WETH9).deposit{value: st.msgValueLeft}();\\n            st.balances[st.header.sourceArrInd] += st.msgValueLeft;\\n            st.msgValueLeft = 0;\\n          }\\n        } else {\\n          revert('doAcquireInputERC20Token: only WETH9 tokens are supported');\\n        }\\n      }\\n    }\\n\\n    while (st.callCounter < st.header.numOfCalls) {\\n      uint calltype = ind.loadUint8();\\n      ind++;\\n////      console.log(\\\"i: \\\", st.callCounter, \\\" | calltype: \\\", calltype);\\n      if (calltype == 1) { // transfer to univ2-like pair and swap\\n        V5CallType_basic_lib.CallType_basic_vars memory basic_vars;\\n        {\\n          uint tmp;\\n          assembly {\\n            tmp := data.offset\\n          }\\n          ind = basic_vars.load(ind, st.header.tokensOffset + tmp, st.header.tokensNum);\\n        }\\n\\n        V5CallType_1_extra_lib.do_1_FromInput(basic_vars, st);\\n      } else if (calltype == 5) { // univ3\\n        V5CallType_5_lib.CallType_5_vars memory vars;\\n        {\\n          uint tmp;\\n          assembly {\\n            tmp := data.offset\\n          }\\n          ind = vars.load(ind, st.header.tokensOffset + tmp, st.header.tokensNum);\\n        }\\n        vars.prepare(st);\\n        callback_to_check = vars.univ3_pool;\\n        vars.doItFromInput(st, data);\\n        callback_to_check = address(0x0);\\n        vars.afterFromInput(st);\\n      } else if (calltype == 6) { // balancer\\n        V5CallType_6_lib.CallType_6_vars memory vars;\\n        {\\n          uint tmp;\\n          assembly {\\n            tmp := data.offset\\n          }\\n          ind = vars.load(ind, st.header.tokensOffset + tmp, st.header.tokensNum);\\n        }\\n        vars.prepare(st);\\n        vars.doItFromInput(st);\\n//        vars.afterFromInput(st);\\n      } else if (calltype == 7) { // curve\\n        V5CallType_7_lib.CallType_7_vars memory vars;\\n        {\\n          uint tmp;\\n          assembly {\\n            tmp := data.offset\\n          }\\n          ind = vars.load(ind, st.header.tokensOffset + tmp, st.header.tokensNum);\\n        }\\n        vars.prepare(st);\\n        vars.doItFromInput(st);\\n//        vars.afterFromInput(st);\\n      } else {\\n        revert(\\\"CT\\\");\\n      }\\n      st.callCounter++;\\n    }\\n\\n//    console.log('st.totals[st.header.targetArrInd]:', st.totals[st.header.targetArrInd]);\\n//    console.log('treshold:', st.expected[st.header.targetArrInd] * (SLIPPAGE_LIMIT - st.header.slippage)/SLIPPAGE_LIMIT);\\n    require(st.totals[st.header.targetArrInd] > st.expected[st.header.targetArrInd] * (SLIPPAGE_LIMIT - st.header.slippage)/SLIPPAGE_LIMIT, \\\"slippage is above the threshold\\\");\\n    uint tmp;\\n    assembly {\\n      tmp := data.offset\\n    }\\n    if (uint256(st.header.targetArrInd).loadTokenFromArrayV4(st.header.tokensOffset + tmp) == Addrs.WETH9) {\\n      if (st.header.getNativeETH) {\\n        if (st.ethAmountToUnwrap > 0) {\\n//          console.log('WETH9.balanceOf:', IERC20(Addrs.WETH9).balanceOf(address(this)));\\n//          console.log('st.ethAmountToUnwrap:', st.ethAmountToUnwrap);\\n          WETH9(Addrs.WETH9).withdraw(st.ethAmountToUnwrap);\\n        }\\n        payable(msg.sender).call{value: (st.ethAmountToUnwrap + st.balances[st.header.targetArrInd])}(\\\"\\\");\\n      } else {\\n        TransferHelper.safeTransfer(Addrs.WETH9, msg.sender, st.balances[st.header.targetArrInd]);\\n      }\\n    } else {\\n      if (st.balances[st.header.targetArrInd] != 0) {\\n        TransferHelper.safeTransfer(uint256(st.header.targetArrInd).loadTokenFromArrayV4(st.header.tokensOffset + tmp), msg.sender, st.balances[st.header.targetArrInd]);\\n      }\\n    }\\n  }\\n\\n  struct UniswapV3SwapCallbackData {\\n    address tokenIn;\\n    address tokenOut;\\n    uint amountIn;\\n    uint amountOut;\\n//    address payer;\\n  }\\n\\n  function uniswapV3SwapCallback(\\n      int256 amount0Delta,\\n      int256 amount1Delta,\\n      bytes calldata _data\\n  ) external isLocked() isCallbackChecked() override {\\n      require(amount0Delta > 0 || amount1Delta > 0, 'zero amounts'); // swaps entirely within 0-liquidity regions are not supported\\n\\n//    console.log(\\\"amount0Delta:\\\");\\n//    console.logInt(amount0Delta);\\n//    console.log(\\\"amount1Delta\\\");\\n//    console.logInt(amount1Delta);\\n//    (V5ExecState.V5ExecState memory st, V5CallType_5_lib.CallType_5_vars memory vars, bytes memory data) = abi.decode(_data, (V5ExecState.V5ExecState, V5CallType_5_lib.CallType_5_vars, bytes));\\n//    console.log(\\\"CT_5: st.callCounter:\\\", st.callCounter);\\n\\n    (address tokenIn, address tokenOut, bool isNative, bool fromSender) = abi.decode(_data, (address, address, bool, bool));\\n    (uint amountIn, uint amountOut) = tokenIn < tokenOut ? (\\n      uint256(amount0Delta),\\n      uint256(-amount1Delta)\\n    ) : (\\n      uint256(amount1Delta),\\n      uint256(-amount0Delta)\\n    );\\n\\n//    V5Utils.pay(tokenIn, fromSender ? current_caller : address(this), msg.sender, amountIn);\\n    if (fromSender) {\\n      TransferHelper.safeTransferFrom(tokenIn, current_caller, msg.sender, amountIn);\\n    } else {\\n      if (isNative) {\\n        WETH9(Addrs.WETH9).deposit{value: amountIn}();\\n      }\\n      TransferHelper.safeTransfer(tokenIn, msg.sender, amountIn);\\n    }\\n  }\\n\\n  fallback() external payable {\\n//    console.log('get paid');\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/ETHRouter_V5_types.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSE\\npragma solidity ^0.8.0;\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\n//import \\\"./libraries/BytesLib.sol\\\";\\nimport \\\"../libraries/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../libraries/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\n//import \\\"../libraries/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"../libraries/v2-core/contracts/interfaces/IUniswapV2Callee.sol\\\";\\nimport \\\"../libraries/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\nimport \\\"../libraries/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\nimport \\\"../libraries/v3-core/contracts/interfaces/IUniswapV3Factory.sol\\\";\\n//import \\\"../libraries/v2-core/contracts/interfaces/IERC20.sol\\\";\\n//import \\\"../libraries/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n//import \\\"../libraries/openzeppelin-contracts/contracts/interfaces/IERC2612.sol\\\";\\n//import \\\"./libraries/anyswap-v1-core/contracts/AnyswapV5CallProxy.sol\\\";\\n\\n//import \\\"../libraries/v3-core/contracts/libraries/TickMath.sol\\\";\\nimport \\\"./TickMath_0.8.sol\\\";\\n\\nimport \\\"../libraries/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\\\";\\nimport \\\"./interfaces/IWETH9.sol\\\";\\n\\nimport \\\"../libraries/TransferHelper.sol\\\";\\n\\nimport \\\"./interfaces/IVault.sol\\\";\\n\\nimport \\\"./CalldataLoader.sol\\\";\\nimport \\\"./ETHRouter_V5_types.sol\\\";\\n\\nimport \\\"./addrs_and_selectors.sol\\\";\\n\\nlibrary V5CallType_basic_lib {\\n  using CalldataLoader for uint;\\n  \\n  struct CallType_basic_vars {\\n    uint flags;\\n    uint token_source_ind;\\n    uint token_target_ind;\\n    address token_source;\\n    address token_target;\\n    uint amount_in_expected;\\n    uint amount_out_expected;\\n    uint amount_to_be_sent;\\n    uint amount_out;\\n  }\\n\\n  using V5CallType_basic_lib for CallType_basic_vars;\\n\\n  uint internal constant CT_BASIC_FROM_SENDER = 1;\\n  uint internal constant CT_BASIC_TO_SENDER = 2;\\n\\n  function load(CallType_basic_vars memory self, uint ind, uint tokens_start_ind, uint tokens_num) internal pure returns(uint new_ind) {\\n    self.flags = ind.loadUint8();\\n    ind++;\\n////        console.log(\\\"self.flags:\\\", self.flags);\\n\\n    self.token_source_ind = ind.loadUint8();// = uint8(data[ind]);\\n    ind++;\\n////        console.log(\\\"self.token_source_ind:\\\", self.token_source_ind);\\n    require(self.token_source_ind < tokens_num, \\\"1LSI\\\");\\n    self.token_source = self.token_source_ind.loadTokenFromArrayV4(tokens_start_ind);\\n////        console.log(\\\"self.token_source:\\\", self.token_source);\\n\\n    self.token_target_ind = ind.loadUint8(); //= uint8(data[ind]);\\n    ind++;\\n////        console.log(\\\"self.token_target_ind:\\\", self.token_target_ind);\\n    require(self.token_target_ind < tokens_num, \\\"1LTI\\\");\\n    self.token_target = self.token_target_ind.loadTokenFromArrayV4(tokens_start_ind);\\n////        console.log(\\\"self.token_target:\\\", self.token_target);\\n\\n    {\\n      uint amount_in_len = ind.loadUint8();// = uint(uint8(data[ind]));\\n      ind++;\\n      self.amount_in_expected = ind.loadVariableUint(amount_in_len);\\n      ind += amount_in_len;\\n////          console.log(\\\"self.amount_in_expected:\\\", self.amount_in_expected);\\n    }\\n\\n    {\\n      uint amount_out_len = ind.loadUint8();\\n      ind++;\\n      self.amount_out_expected = ind.loadVariableUint(amount_out_len);\\n      ind += amount_out_len;\\n////          console.log(\\\"self.amount_out_expected:\\\", self.amount_out_expected);\\n    }\\n\\n    return ind;\\n  }\\n}\\n\\nlibrary V5CallType_1_extra_lib {\\n  using CalldataLoader for uint;\\n\\n  uint internal constant CT_1_UNISWAP_OR_SUSHISWAP = 4; // false == uniswap, true == sushiswap\\n  uint internal constant CT_1_SUSHISWAP = 4;\\n\\n  function do_1_FromInput(V5CallType_basic_lib.CallType_basic_vars memory self, V5ExecState.V5ExecState memory st) internal {\\n    if (self.token_source_ind == st.header.sourceArrInd) {\\n      self.amount_to_be_sent = self.amount_in_expected;\\n    } else {\\n      self.amount_to_be_sent = ((self.amount_in_expected * st.totals[self.token_source_ind]) / st.expected[self.token_source_ind]);\\n    }\\n\\n    address v2pair;\\n    {\\n      address factory = (self.flags & CT_1_SUSHISWAP) > 0 ? Addrs.SUSHI_FACTORY : Addrs.UNISWAP_V2_FACTORY ;\\n      (address t0, address t1) = self.token_source < self.token_target ? (self.token_source, self.token_target) : (self.token_target, self.token_source) ;\\n      v2pair =  IUniswapV2Factory(factory).getPair(t0, t1);\\n    }\\n    (uint112 reserve_0, uint112 reserve_1, ) = IUniswapV2Pair(v2pair).getReserves();\\n    uint amount_out = self.token_source < self.token_target ?\\n      calcUniswapV2Out(reserve_0, reserve_1, self.amount_to_be_sent) :\\n      calcUniswapV2Out(reserve_1, reserve_0, self.amount_to_be_sent) ;\\n    if (amount_out == 0) {\\n      return;\\n    }\\n\\n    if (self.token_source_ind == st.header.sourceArrInd) {\\n      if (st.header.doAcquireInputERC20Token) {\\n        TransferHelper.safeTransfer(self.token_source, v2pair, self.amount_to_be_sent);\\n        st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n      } else {\\n        if (self.token_source == Addrs.WETH9) {\\n          if (st.msgValueLeft >= self.amount_to_be_sent) {\\n            WETH9(Addrs.WETH9).deposit{value: self.amount_to_be_sent}();\\n            TransferHelper.safeTransfer(self.token_source, v2pair, self.amount_to_be_sent);\\n            st.msgValueLeft -= self.amount_to_be_sent;\\n          } else {\\n            revert('CT1: msg.value insufficient');\\n          }\\n        } else {\\n          TransferHelper.safeTransferFrom(self.token_source, msg.sender, v2pair, self.amount_to_be_sent);\\n        }\\n      }\\n    } else {\\n      TransferHelper.safeTransfer(self.token_source, v2pair, self.amount_to_be_sent);\\n      st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n    }\\n\\n//    V5Utils.pay(self.token_source, (self.token_source_ind != st.header.sourceArrInd || (self.token_source == Addrs.WETH9 && msg.value != 0) || st.header.doPrefetchInputToken) ? address(this) : msg.sender, v2pair, self.amount_to_be_sent);\\n\\n    (uint256 a0, uint256 a1) = (self.token_source < self.token_target) ?\\n      (uint256(0), amount_out) :\\n      (amount_out, uint256(0)) ;\\n\\n    IUniswapV2Pair(v2pair).swap(a0, a1, (self.token_target_ind != st.header.targetArrInd || (self.token_target == Addrs.WETH9 && st.header.getNativeETH)) ? address(this): msg.sender, new bytes(0));\\n\\n//    if (self.token_source_ind == st.header.sourceArrInd) {\\n//      if (self.token_source == Addrs.WETH9 && msg.value != 0 || st.header.doAcquireInputERC20Token) {\\n//        st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n//      }\\n//    } else {\\n//      st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n//    }\\n    if (self.token_target_ind == st.header.targetArrInd) {\\n      if (self.token_target == Addrs.WETH9 && st.header.getNativeETH) {\\n        st.ethAmountToUnwrap += amount_out;\\n      }\\n    } else {\\n      st.balances[self.token_target_ind] += amount_out;\\n    }\\n//    if (self.token_target_ind == st.header.targetArrInd && self.token_target == Addrs.WETH9 && st.header.getNativeEth) {\\n//      st.ethAmountToUnwrap += amount_out;\\n//    }\\n    st.totals[self.token_target_ind] += amount_out;\\n    st.expected[self.token_target_ind] += self.amount_out_expected;\\n  }\\n\\n  function calcUniswapV2Out(uint r0, uint r1, uint a0) pure private returns (uint a1) {\\n    uint numer = r1 * a0 * 997;\\n    uint denom = r0 * 1000 + a0 * 997;\\n    a1 = numer / denom; // to round down\\n  }\\n}\\n\\nlibrary V5CallType_6_lib {\\n  using CalldataLoader for uint;\\n//  using BytesLoader for uint;\\n\\n  struct CallType_6_vars {\\n    uint flags;\\n    uint token_source_ind;\\n    uint token_target_ind;\\n    address token_source;\\n    address token_target;\\n    uint amount_in_expected;\\n    uint amount_out_expected;\\n    bytes32 balancer_pool_id;\\n    uint amount_to_be_sent;\\n    uint amount_out;\\n\\n    bool isNative;\\n  }\\n\\n  using V5CallType_6_lib for CallType_6_vars;\\n\\n  uint internal constant CT_6_FROM_SENDER = 1;\\n  uint internal constant CT_6_TO_SENDER = 2;\\n\\n  function load(CallType_6_vars memory self, uint ind, uint tokens_start_ind, uint tokens_num) internal pure returns (uint new_ind) {\\n    self.flags = ind.loadUint8();\\n    ind++;\\n////        console.log(\\\"self.flags:\\\", self.flags);\\n\\n    self.token_source_ind = ind.loadUint8();// = uint8(data[ind]);\\n    ind++;\\n////        console.log(\\\"self.token_source_ind:\\\", self.token_source_ind);\\n    require(self.token_source_ind < tokens_num, \\\"1LSI\\\");\\n    self.token_source = self.token_source_ind.loadTokenFromArrayV4(tokens_start_ind);\\n////        console.log(\\\"self.token_source:\\\", self.token_source);\\n\\n    self.token_target_ind = ind.loadUint8(); //= uint8(data[ind]);\\n    ind++;\\n////        console.log(\\\"self.token_target_ind:\\\", self.token_target_ind);\\n    require(self.token_target_ind < tokens_num, \\\"1LTI\\\");\\n    self.token_target = self.token_target_ind.loadTokenFromArrayV4(tokens_start_ind);\\n////        console.log(\\\"self.token_target:\\\", self.token_target);\\n\\n    {\\n      uint amount_in_len = ind.loadUint8();// = uint(uint8(data[ind]));\\n      ind++;\\n      self.amount_in_expected = ind.loadVariableUint(amount_in_len);\\n      ind += amount_in_len;\\n////          console.log(\\\"self.amount_in_expected:\\\", self.amount_in_expected);\\n    }\\n\\n    {\\n      uint amount_out_len = ind.loadUint8();\\n      ind++;\\n      self.amount_out_expected = ind.loadVariableUint(amount_out_len);\\n      ind += amount_out_len;\\n////          console.log(\\\"self.amount_out_expected:\\\", self.amount_out_expected);\\n    }\\n\\n    self.balancer_pool_id = bytes32(ind.loadUint256());\\n    ind += 32;\\n\\n//    console.log('pool_id:');\\n//    console.logBytes32(self.balancer_pool_id);\\n\\n    return ind;\\n  }\\n\\n  function prepare(CallType_6_vars memory self, V5ExecState.V5ExecState memory st) internal {\\n    if (self.token_source_ind == st.header.sourceArrInd) {\\n      self.amount_to_be_sent = self.amount_in_expected;\\n      if (st.header.doAcquireInputERC20Token) {\\n        TransferHelper.safeApprove(self.token_source, Addrs.BALANCER_VAULT, self.amount_to_be_sent);\\n        st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n        self.isNative = false;\\n      } else {\\n        if (self.token_source == Addrs.WETH9) {\\n          if (st.msgValueLeft >= self.amount_to_be_sent) {\\n            self.isNative = true;\\n            st.msgValueLeft -= self.amount_to_be_sent;\\n          } else {\\n            revert('CT6: msg.value insufficient');\\n          }\\n        } else {\\n          TransferHelper.safeTransferFrom(self.token_source, msg.sender, address(this), self.amount_to_be_sent);\\n          TransferHelper.safeApprove(self.token_source, Addrs.BALANCER_VAULT, self.amount_to_be_sent);\\n          self.isNative = false;\\n        }\\n      }\\n    } else {\\n      self.amount_to_be_sent = (self.amount_in_expected * st.totals[self.token_source_ind]) / st.expected[self.token_source_ind];\\n      TransferHelper.safeApprove(self.token_source, Addrs.BALANCER_VAULT, self.amount_to_be_sent);\\n      self.isNative = false;\\n      st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n    }\\n  }\\n\\n  function doItFromInput(CallType_6_vars memory self, V5ExecState.V5ExecState memory st) internal {\\n//    console.log('pool_id:');\\n//    console.logBytes32(self.balancer_pool_id);\\n//    console.log('self.amount_to_be_sent:', self.amount_to_be_sent);\\n    (IAsset assetOut, address payable recipient) = self.token_target_ind == st.header.targetArrInd ? \\n      (self.token_target == Addrs.WETH9 && st.header.getNativeETH ?\\n        ((self.flags & CT_6_TO_SENDER > 0) ?  (IAsset(address(0x0)), payable(msg.sender)) : (IAsset(self.token_target), payable(address(this)))) :\\n        (IAsset(self.token_target), payable(msg.sender))\\n      ) :\\n      (IAsset(self.token_target), payable(address(this)))\\n      ;\\n    uint256 output = IVault(Addrs.BALANCER_VAULT).swap{value: self.isNative ? self.amount_to_be_sent : 0}(IVault.SingleSwap({\\n      poolId: self.balancer_pool_id, //bytes32 poolId;\\n      kind: IVault.SwapKind.GIVEN_IN, //SwapKind kind;\\n//      assetIn: IAsset(self.token_source == Addrs.WETH9 ? address(0x0) : self.token_source), //IAsset assetIn;\\n      assetIn: IAsset(self.isNative ? address(0x0) : self.token_source), //IAsset assetIn;\\n//      assetOut: IAsset(self.token_target == Addrs.WETH9 ? address(0x0) : self.token_target), //IAsset assetOut;\\n      assetOut: assetOut, //IAsset(self.token_target), //IAsset assetOut;\\n      amount: self.amount_to_be_sent,//uint256 amount;\\n      userData: new bytes(0) //bytes userData;\\n    }),\\n    IVault.FundManagement({\\n      sender: address(this), //address sender;\\n      fromInternalBalance: false, // bool fromInternalBalance;\\n      recipient: recipient, // self.token_target == Addrs.WETH9 && st.header.getNativeETH ? self.flags & CT_6_TO_SENDER > 0 ? payable(msg.sender) : payable(address(this)), //address payable recipient;\\n      toInternalBalance: false //bool toInternalBalance;\\n    }),\\n      0,\\n      block.timestamp + 1000\\n    );\\n//    if (self.token_source_ind != st.header.sourceArrInd || (self.token_source == Addrs.WETH9 && (msg.value != 0 || st.header.doPrefetchInputToken))) {\\n//      st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n//    }\\n    if (self.token_target_ind == st.header.targetArrInd) {\\n//      st.totalOutput += output;\\n      if (self.token_target == Addrs.WETH9 && st.header.getNativeETH && self.flags & CT_6_TO_SENDER == 0) { // !!!!! FLAG VAR for flexability\\n        st.ethAmountToUnwrap += output;\\n      } else {\\n        // skip\\n      }\\n    } else {\\n      st.balances[self.token_target_ind] += output;\\n    }\\n    st.totals[self.token_target_ind] += output;\\n    st.expected[self.token_target_ind] += self.amount_out_expected;\\n    self.amount_out = output;\\n  }\\n\\n//  function afterFromInput(CallType_6_vars memory self, V5ExecState.V5ExecState memory st) internal {\\n////    if (self.flags & CT_6_TO_SENDER > 0) {\\n////      TransferHelper.safeTransfer(self.token_target, msg.sender, self.amount_out);\\n//////      st.totalTo += uint128(self.amount_out);\\n////    }\\n//  }\\n}\\n\\nlibrary V5CallType_7_lib {\\n//  using SafeMath for uint;\\n  using CalldataLoader for uint;\\n//  using BytesLoader for uint;\\n\\n  struct CallType_7_vars {\\n    uint flags;\\n    uint token_source_ind;\\n    uint token_target_ind;\\n    address token_source;\\n    address token_target;\\n    uint amount_in_expected;\\n    uint amount_out_expected;\\n    address curve_pool;\\n    uint curve_pool_source_ind;\\n    uint curve_pool_target_ind;\\n    uint amount_to_be_sent;\\n    uint amount_out;\\n\\n    bool isNative;\\n  }\\n\\n  using V5CallType_7_lib for CallType_7_vars;\\n\\n  uint internal constant CT_7_FROM_SENDER = 1;\\n  uint internal constant CT_7_TO_SENDER = 2;\\n\\n  function load(CallType_7_vars memory self, uint ind, uint tokens_start_ind, uint tokens_num) internal pure returns (uint new_ind) {\\n    self.flags = ind.loadUint8();\\n    ind++;\\n////        console.log(\\\"self.flags:\\\", self.flags);\\n\\n    self.token_source_ind = ind.loadUint8();// = uint8(data[ind]);\\n    ind++;\\n////        console.log(\\\"self.token_source_ind:\\\", self.token_source_ind);\\n    require(self.token_source_ind < tokens_num, \\\"1LSI\\\");\\n    self.token_source = self.token_source_ind.loadTokenFromArrayV4(tokens_start_ind);\\n////        console.log(\\\"self.token_source:\\\", self.token_source);\\n\\n    self.token_target_ind = ind.loadUint8(); //= uint8(data[ind]);\\n    ind++;\\n////        console.log(\\\"self.token_target_ind:\\\", self.token_target_ind);\\n    require(self.token_target_ind < tokens_num, \\\"1LTI\\\");\\n    self.token_target = self.token_target_ind.loadTokenFromArrayV4(tokens_start_ind);\\n////        console.log(\\\"self.token_target:\\\", self.token_target);\\n\\n    {\\n      uint amount_in_len = ind.loadUint8();// = uint(uint8(data[ind]));\\n      ind++;\\n      self.amount_in_expected = ind.loadVariableUint(amount_in_len);\\n      ind += amount_in_len;\\n////          console.log(\\\"self.amount_in_expected:\\\", self.amount_in_expected);\\n    }\\n\\n    {\\n      uint amount_out_len = ind.loadUint8();\\n      ind++;\\n      self.amount_out_expected = ind.loadVariableUint(amount_out_len);\\n      ind += amount_out_len;\\n////          console.log(\\\"self.amount_out_expected:\\\", self.amount_out_expected);\\n    }\\n\\n    self.curve_pool = ind.loadAddress();\\n    ind += 20;\\n\\n    self.curve_pool_source_ind = ind.loadUint8();\\n    ind++;\\n\\n    self.curve_pool_target_ind = ind.loadUint8();\\n    ind++;\\n\\n    return ind;\\n  }\\n\\n  function prepare(CallType_7_vars memory self, V5ExecState.V5ExecState memory st) internal {\\n    if (self.token_source_ind == st.header.sourceArrInd) {\\n      self.amount_to_be_sent = self.amount_in_expected;\\n      if (st.header.doAcquireInputERC20Token) {\\n        TransferHelper.safeApprove(self.token_source, self.curve_pool, self.amount_to_be_sent);\\n        self.isNative = false;\\n        st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n      } else {\\n        if (self.token_source == Addrs.WETH9) {\\n          if (st.msgValueLeft >= self.amount_to_be_sent) {\\n            self.isNative = true;\\n            st.msgValueLeft -= self.amount_to_be_sent;\\n          } else {\\n            revert('CT7: msg.value insufficient');\\n          }\\n        } else {\\n          TransferHelper.safeTransferFrom(self.token_source, msg.sender, address(this), self.amount_to_be_sent);\\n          TransferHelper.safeApprove(self.token_source, self.curve_pool, self.amount_to_be_sent);\\n          self.isNative = false;\\n        }\\n      }\\n    } else {\\n      self.amount_to_be_sent = (self.amount_in_expected * st.totals[self.token_source_ind]) / st.expected[self.token_source_ind];\\n      TransferHelper.safeApprove(self.token_source, self.curve_pool, self.amount_to_be_sent);\\n      self.isNative = false;\\n      st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n    }\\n  }\\n\\n  function doItFromInput(CallType_7_vars memory self, V5ExecState.V5ExecState memory st) internal returns (bool res) {\\n//    console.log('self.token_target:', self.token_target);\\n    uint balanceBefore;\\n    uint balanceAfter;\\n    if (self.curve_pool == Addrs.CURVE_USDT_WBTC_WETH_POOL) {\\n      if (self.token_target == Addrs.WETH9 && self.token_target_ind == st.header.targetArrInd && st.header.getNativeETH) {\\n        balanceBefore = address(this).balance;\\n        CurvePool_USDT_WBTC_WETH(self.curve_pool).exchange(self.curve_pool_source_ind, self.curve_pool_target_ind, self.amount_to_be_sent, 0, true);\\n        balanceAfter = address(this).balance;\\n      } else {\\n        balanceBefore = IERC20(self.token_target).balanceOf(address(this));\\n        CurvePool_USDT_WBTC_WETH(self.curve_pool).exchange{value: self.isNative ? self.amount_to_be_sent : 0}(self.curve_pool_source_ind, self.curve_pool_target_ind, self.amount_to_be_sent, 0, self.isNative);\\n        balanceAfter = IERC20(self.token_target).balanceOf(address(this));\\n      }\\n    } else if (self.curve_pool == Addrs.CURVE_DAI_USDC_USDT_POOL) {\\n      balanceBefore = IERC20(self.token_target).balanceOf(address(this));\\n      CurvePool_DAI_USDC_USDT(self.curve_pool).exchange(int128(uint128(self.curve_pool_source_ind)), int128(uint128(self.curve_pool_target_ind)), self.amount_to_be_sent, 0);\\n      balanceAfter = IERC20(self.token_target).balanceOf(address(this));\\n    } else {\\n      revert('unsupported CurvePool');\\n    }\\n    uint diff = balanceAfter - balanceBefore;\\n    // sent in the aftermath\\n    self.amount_out = diff;\\n//    console.log('diff:', diff);\\n//    if (self.token_source_ind != st.header.sourceArrInd || (self.token_source == Addrs.WETH9 && (msg.value != 0 || st.header.doPrefetchInputToken))) {\\n//      st.balances[self.token_source_ind] -= self.amount_to_be_sent;\\n//    }\\n    st.balances[self.token_target_ind] += diff;\\n    st.totals[self.token_target_ind] += diff;\\n//    console.log('self.token_target_ind:', self.token_target_ind);\\n    st.expected[self.token_target_ind] += self.amount_out_expected;\\n  }\\n\\n//  function afterFromInput(CallType_7_vars memory self, V5ExecState.V5ExecState memory st) internal {\\n//    if (self.isNative) {\\n//\\n//    } else {\\n//    }\\n//    if (self.flags & CT_7_TO_SENDER > 0) {\\n//      TransferHelper.safeTransfer(self.token_target, msg.sender, self.amount_out);\\n////      st.totalTo += uint128(self.amount_out);\\n//    }\\n//  }\\n}\\n\\ninterface CurvePool_DAI_USDC_USDT {\\n  function exchange(int128 i, int128 j, uint256 dx, uint256 min_dy) external;\\n}\\n\\ninterface CurvePool_USDT_WBTC_WETH {\\n  function coins(uint256 i) external returns(address);\\n  function exchange(uint256 i, uint256 j, uint256 dx, uint256 min_dy, bool use_eth) external payable;\\n}\\n\\ninterface WETH9 {\\n  function deposit() external payable;\\n  function withdraw(uint256 amount) external;\\n}\\n\\nlibrary V5CallType_5_lib {\\n//  using SafeMath for uint;\\n  using CalldataLoader for uint;\\n//  using BytesLoader for uint;\\n\\n  struct CallType_5_vars {\\n    uint flags;\\n    uint token_source_ind;\\n    uint token_target_ind;\\n    uint pool_fee;\\n    uint amount_in_expected;\\n    uint amount_out_expected;\\n\\n    int specifiedAmount;\\n\\n    bool isNative;\\n    bool fromSender;\\n\\n    address token_source;\\n    address token_target;\\n    address univ3_pool;\\n\\n    int dsa;\\n    int dta;\\n  }\\n\\n  uint internal constant CT_5_FROM_SENDER = 1;\\n  uint internal constant CT_5_TO_SENDER = 2;\\n\\n  function load(CallType_5_vars memory self, uint ind, uint tokens_start_ind, uint tokens_num) internal view returns(uint new_ind) {\\n    self.flags = ind.loadUint8();\\n    ind++;\\n//    console.log(\\\"flags:\\\", self.flags);\\n    self.token_source_ind = ind.loadUint8();\\n    ind++;\\n//    console.log(\\\"self.token_source_ind:\\\", self.token_source_ind);\\n    require(self.token_source_ind < tokens_num, \\\"5SI\\\");\\n    self.token_source = self.token_source_ind.loadTokenFromArrayV4(tokens_start_ind);\\n\\n    self.token_target_ind = ind.loadUint8();\\n    ind++;\\n    require(self.token_target_ind < tokens_num, \\\"5TI\\\");\\n    self.token_target = self.token_target_ind.loadTokenFromArrayV4(tokens_start_ind);\\n    self.pool_fee = ind.loadUint24();\\n//    console.log(\\\"pool_fee:\\\", self.pool_fee);\\n    ind += 3;\\n    {\\n      uint amount_in_len = ind.loadUint8();\\n      ind++;\\n      self.amount_in_expected = ind.loadVariableUint(amount_in_len);\\n      ind += amount_in_len;\\n    }\\n    {\\n      uint amount_out_len = ind.loadUint8();\\n      ind++;\\n      self.amount_out_expected = ind.loadVariableUint(amount_out_len);\\n      ind += amount_out_len;\\n    }\\n//    console.log(\\\"token_source:\\\", self.token_source);\\n//    console.log(\\\"token_target:\\\", self.token_target);\\n//    console.log(\\\"pool_fee:\\\", self.pool_fee);\\n//    console.log(\\\"amount_in_expected:\\\", self.amount_in_expected);\\n//    console.log(\\\"amount_out_expected:\\\", self.amount_out_expected);\\n    return ind;\\n  }\\n\\n  function prepare(CallType_5_vars memory self, V5ExecState.V5ExecState memory st) internal {\\n    self.univ3_pool = IUniswapV3Factory(Addrs.UNISWAP_V3_FACTORY).getPool(self.token_source, self.token_target, uint24(self.pool_fee)); \\n//    console.log(\\\"univ3_pool:\\\", self.univ3_pool);\\n    require(self.univ3_pool != address(0), '5ZPA');\\n    if (self.token_source_ind == st.header.sourceArrInd) {\\n      self.specifiedAmount = int256(self.amount_in_expected);\\n      if (st.header.doAcquireInputERC20Token) {\\n        self.isNative == false;\\n        self.fromSender = false;\\n        st.balances[self.token_source_ind] -= uint(self.specifiedAmount);\\n      } else {\\n        if (self.token_source == Addrs.WETH9) {\\n          if (st.msgValueLeft >= uint256(self.specifiedAmount)) {\\n            self.isNative = true;\\n            self.fromSender = false;\\n            st.msgValueLeft -= uint256(self.specifiedAmount);\\n          } else {\\n            revert('CT5: msg.value insufficient');\\n          }\\n        } else {\\n          self.isNative = false;\\n          self.fromSender = true;\\n        }\\n      }\\n    } else {\\n      self.specifiedAmount = int256((self.amount_in_expected * st.totals[self.token_source_ind]) / st.expected[self.token_source_ind]);\\n      self.isNative = false;\\n      self.fromSender = false;\\n      st.balances[self.token_source_ind] -= uint256(self.specifiedAmount);\\n    }\\n  }\\n\\n  function doItFromInput(CallType_5_vars memory self, V5ExecState.V5ExecState memory st, bytes calldata data) internal {\\n//    self.univ3_pool = IUniswapV3Factory(Addrs.UNISWAP_V3_FACTORY).getPool(self.token_source, self.token_target, uint24(self.pool_fee)); \\n////    console.log(\\\"univ3_pool:\\\", self.univ3_pool);\\n//    require(self.univ3_pool != address(0), '5ZPA');\\n    bool zeroForOne = self.token_source < self.token_target;\\n    {\\n//      if (self.flags & V5CallType_5_lib.CT_5_FROM_SENDER != 0) {\\n//        st.totalFrom += uint128(self.amount_in_expected);\\n////        console.log(\\\"amount from msg.sender:\\\", self.amount_in_expected);\\n//        self.specifiedAmount = int256(self.amount_in_expected);\\n//      } else {\\n//        self.specifiedAmount = int256((self.amount_in_expected * st.totals[self.token_source_ind]) / st.expected[self.token_source_ind]);\\n//      }\\n//      console.log(\\\"specifiedAmount:\\\");\\n//      console.logInt(self.specifiedAmount);\\n//      console.log(\\\"total:     \\\", st.totals[self.token_target_ind]);\\n//      console.log(\\\"expected:  \\\", st.expected[self.token_target_ind]);\\n//      console.log(\\\"recipient: \\\", (self.flags & V5CallType_5_lib.CT_5_TO_SENDER) == 0 ? address(this) : st.msgsender);\\n      try IUniswapV3Pool(self.univ3_pool).swap(\\n//          (self.flags & V5CallType_5_lib.CT_5_TO_SENDER) == 0 ? address(this) : st.msgsender ,\\n          (self.token_target_ind != st.header.targetArrInd || (self.token_target == Addrs.WETH9 && st.header.getNativeETH)) ? address(this) : msg.sender,\\n          zeroForOne,\\n          self.specifiedAmount,\\n          zeroForOne ? TickMath.MIN_SQRT_RATIO + 1 : TickMath.MAX_SQRT_RATIO - 1,\\n//          abi.encode(st, self, data)\\n          abi.encode(self.token_source, self.token_target, self.isNative, self.fromSender)\\n      ) returns (int256 da0, int256 da1) {\\n        if (zeroForOne) {\\n          (self.dsa, self.dta) = (da0, da1);\\n        } else {\\n          (self.dsa, self.dta) = (da1, da0);\\n        }\\n      } catch Error(string memory s) {\\n//        console.log(\\\"transfer failed\\\");\\n////            console.log(\\\"expected balance: \\\", value_to_pay);\\n//        console.log(\\\"actual balance: \\\", uint256(st.balances[self.token_source_ind]));\\n        revert(s);\\n      }\\n    }\\n  }\\n\\n  function afterFromInput(CallType_5_vars memory self, V5ExecState.V5ExecState memory st) internal {\\n//    console.log('dsa');\\n//    console.logInt(self.dsa);\\n//    console.log('dta');\\n//    console.logInt(self.dta);\\n//    if (self.token_source_ind != st.header.sourceArrInd || msg.value != 0 || st.header.doPrefetchInputToken) {\\n//      st.balances[self.token_source_ind] -= uint256(self.dsa);\\n//    }\\n\\n    if (self.specifiedAmount < self.dsa) {\\n      uint diff = uint256(self.dsa - self.specifiedAmount);\\n      if (self.token_source_ind == st.header.sourceArrInd) {\\n        if (st.header.doAcquireInputERC20Token) {\\n          st.balances[self.token_source_ind] -= diff;\\n        } else {\\n          if (self.token_source == Addrs.WETH9) {\\n            if (st.msgValueLeft >= diff) {\\n              st.msgValueLeft -= diff;\\n            } else {\\n              revert('CT5: msg.value insufficient (after)');\\n            }\\n          } else {\\n            // skip\\n          }\\n        }\\n      } else {\\n        st.balances[self.token_source_ind] -= diff;\\n      }\\n    }\\n\\n    if (self.token_target_ind == st.header.targetArrInd) {\\n      if (self.token_target == Addrs.WETH9 && st.header.getNativeETH) {\\n        st.ethAmountToUnwrap += uint256(-self.dta);\\n//        st.balances[st.token_target_ind] += uint256(-self.dta); // in case of ETH target, balance logs only the native ETH, i.e. the output of Curve only\\n      }\\n    } else {\\n      st.balances[self.token_target_ind] += uint256(-self.dta);\\n    }\\n    st.totals[self.token_target_ind] += uint256(-self.dta);\\n    st.expected[self.token_target_ind] += self.amount_out_expected;\\n  }\\n}\\n\\nlibrary V5ExecHeader {\\n  using CalldataLoader for uint;\\n\\n  struct Header {\\n    uint8 slippage;\\n    uint8 tokensNum;\\n    uint8 numOfCalls;\\n    uint8 sourceArrInd;\\n    uint8 targetArrInd;\\n    bool fromInput;\\n    uint32 callArrOffset;\\n    uint32 tokensOffset;\\n\\n    bool getNativeETH;\\n    bool doAcquireInputERC20Token;\\n  }\\n\\n  function load(bytes calldata cdata) view internal returns (Header memory h, uint ind) {\\n    assembly {\\n      ind := cdata.offset\\n    }\\n    {\\n      uint _network = ind.loadUint16();\\n      ind += 2;\\n//      console.log(\\\"_network:\\\", _network);\\n      require(_network == 1, \\\"WRONGNETWORK\\\");\\n      uint version = ind.loadUint8();\\n//    console.log(\\\"version:\\\", version);\\n      ind++;\\n      require(version == 5, \\\"WRONGVERSION\\\");\\n    }\\n    h.fromInput = ind.loadUint8() > 0;\\n    ind++;\\n//    console.log(\\\"fromInput:\\\", h.fromInput);\\n    h.slippage = uint8(ind.loadUint8());\\n    ind++;\\n//    console.log(\\\"slippage:\\\", h.slippage);\\n    h.getNativeETH = bool(ind.loadUint8() != 0); //true;\\n    ind++;\\n    h.doAcquireInputERC20Token = bool(ind.loadUint8() != 0);//false;\\n    ind++;\\n\\n    h.sourceArrInd = uint8(ind.loadUint8());\\n    ind++;\\n//    console.log(\\\"sourceArrInd:\\\", h.sourceArrInd);\\n    h.targetArrInd = uint8(ind.loadUint8());\\n    ind++;\\n\\n//    console.log(\\\"targetArrInd:\\\", h.targetArrInd);\\n    h.tokensNum = uint8(ind.loadUint8());\\n    ind++;\\n    {\\n      uint tmp;\\n      assembly {\\n        tmp := sub(ind, cdata.offset)\\n      }\\n      h.tokensOffset = uint32(tmp);\\n    }\\n    ind += h.tokensNum * 20;\\n    h.numOfCalls = uint8(ind.loadUint8());// = uint8(data[ind]);\\n    ind++;\\n    {\\n      uint tmp;\\n      assembly {\\n        tmp := sub(ind, cdata.offset)\\n      }\\n      h.callArrOffset = uint32(tmp);\\n    }\\n\\n//    h.msgValueLeft = msg.value;\\n\\n  }\\n\\n  function newState(Header memory h) view internal returns(V5ExecState.V5ExecState memory st) {\\n    st = V5ExecState.V5ExecState({\\n      totals: new uint256[](h.tokensNum),\\n      expected: new uint256[](h.tokensNum),\\n      balances: new uint256[](h.tokensNum),\\n//      totalFrom: 0,\\n//      totalTo: 0,\\n//      currentCallOffset: h.callArrOffset,\\n//      nextCallOffset: h.callArrOffset,\\n      callCounter: 0,\\n      msgsender: msg.sender,\\n      msgValueLeft: msg.value,\\n      ethAmountToUnwrap: 0,\\n      header: h\\n    });\\n  }\\n}\\n\\nlibrary V5ExecState {\\n  struct V5ExecState {\\n    uint256[] totals;\\n    uint256[] expected;\\n    uint256[] balances;\\n//    uint256 totalFrom;\\n//    uint256 totalTo;\\n// no need for FromInput\\n//    uint32 currentCallOffset;\\n//    uint32 nextCallOffset;\\n    uint callCounter;\\n    address msgsender;\\n    uint msgValueLeft;\\n    uint ethAmountToUnwrap;\\n    V5ExecHeader.Header header;\\n  }\\n}\\n\\nlibrary  V5Utils {\\n  function pay(\\n      address token,\\n      address payer,\\n      address recipient,\\n      uint256 value\\n  ) internal {\\n//      console.log(\\\"going to pay ... \\\");\\n      if (token == Addrs.WETH9 && address(this).balance >= value) {\\n          // pay with WETH9\\n          IWETH9(Addrs.WETH9).deposit{value: value}(); // wrap only what is needed to pay\\n          IWETH9(Addrs.WETH9).transfer(recipient, value);\\n      } else if (payer == address(this)) {\\n          // pay with tokens already in the contract (for the exact input multihop case)\\n//          console.log(\\\"from router\\\");\\n//          console.log(\\\"token:\\\", token);\\n//          console.log(\\\"value to pay: \\\", value);\\n//          console.log(\\\"actual balance: \\\", IERC20(token).balanceOf(address(this)));\\n//          try TransferHelper.safeTransfer(token, recipient, value) {\\n//          } catch Error(string memory s) {\\n//            value_to_pay = value;\\n//            revert(s);\\n//          }\\n          TransferHelper.safeTransfer(token, recipient, value);\\n      } else {\\n          // pull payment\\n//          console.log(\\\"from msg.sender\\\");\\n//          console.log(\\\"token:\\\", token);\\n//          console.log(\\\"payer:\\\", payer);\\n//          console.log(\\\"value to pay: \\\", value);\\n//          (bool success_, bytes memory b_allowance) = token.staticcall(abi.encodeWithSelector(Selectors.ALLOWANCE_SELECTOR, payer, address(this)));\\n//          uint256 allowance = abi.decode(b_allowance, (uint256));\\n//          console.log('token:', token);\\n//          console.log('payer:', payer);\\n//          console.log('address(this):', address(this));\\n//          console.log(\\\"allowance:    \\\", allowance);\\n//          console.log('going to trasferFrom');\\n          TransferHelper.safeTransferFrom(token, payer, recipient, value);\\n//          console.log(\\\"trasfered: \\\", value);\\n      }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8;\\n\\ninterface IVault {\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n}\\n\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8;\\n\\nimport \\\"../../libraries/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @title Interface for WETH9\\ninterface IWETH9 is IERC20 {\\n    /// @notice Deposit ether to get wrapped ether\\n    function deposit() external payable;\\n\\n    /// @notice Withdraw wrapped ether to get ether\\n    function withdraw(uint256) external;\\n}\\n\\n\"\r\n    },\r\n    \"contracts/TickMath_0.8.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity ^0.8.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(uint24(MAX_TICK)), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        assembly {\\n          if not(iszero(and(absTick, 0x2))) { ratio := shr(128, mul(ratio, 0xfff97272373d413259a46990580e213a)) }\\n          if not(iszero(and(absTick, 0x4))) { ratio := shr(128, mul(ratio, 0xfff2e50f5f656932ef12357cf3c7fdcc)) }\\n          if not(iszero(and(absTick, 0x8))) { ratio := shr(128, mul(ratio, 0xffe5caca7e10e4e61c3624eaa0941cd0)) }\\n          if not(iszero(and(absTick, 0x10))) { ratio := shr(128, mul(ratio, 0xffcb9843d60f6159c9db58835c926644)) }\\n          if not(iszero(and(absTick, 0x20))) { ratio := shr(128, mul(ratio, 0xff973b41fa98c081472e6896dfb254c0)) }\\n          if not(iszero(and(absTick, 0x40))) { ratio := shr(128, mul(ratio, 0xff2ea16466c96a3843ec78b326b52861)) }\\n          if not(iszero(and(absTick, 0x80))) { ratio := shr(128, mul(ratio, 0xfe5dee046a99a2a811c461f1969c3053)) }\\n          if not(iszero(and(absTick, 0x100))) { ratio := shr(128, mul(ratio, 0xfcbe86c7900a88aedcffc83b479aa3a4)) }\\n          if not(iszero(and(absTick, 0x200))) { ratio := shr(128, mul(ratio, 0xf987a7253ac413176f2b074cf7815e54)) }\\n          if not(iszero(and(absTick, 0x400))) { ratio := shr(128, mul(ratio, 0xf3392b0822b70005940c7a398e4b70f3)) }\\n          if not(iszero(and(absTick, 0x800))) { ratio := shr(128, mul(ratio, 0xe7159475a2c29b7443b29c7fa6e889d9)) }\\n          if not(iszero(and(absTick, 0x1000))) { ratio := shr(128, mul(ratio, 0xd097f3bdfd2022b8845ad8f792aa5825)) }\\n          if not(iszero(and(absTick, 0x2000))) { ratio := shr(128, mul(ratio, 0xa9f746462d870fdf8a65dc1f90e061e5)) }\\n          if not(iszero(and(absTick, 0x4000))) { ratio := shr(128, mul(ratio, 0x70d869a156d2a1b890bb3df62baf32f7)) }\\n          if not(iszero(and(absTick, 0x8000))) { ratio := shr(128, mul(ratio, 0x31be135f97d08fd981231505542fcfa6)) }\\n          if not(iszero(and(absTick, 0x10000))) { ratio := shr(128, mul(ratio, 0x9aa508b5b7a84e1c677de54f3e99bc9)) }\\n          if not(iszero(and(absTick, 0x20000))) { ratio := shr(128, mul(ratio, 0x5d6af8dedb81196699c329225ee604)) }\\n          if not(iszero(and(absTick, 0x40000))) { ratio := shr(128, mul(ratio, 0x2216e584f5fa1ea926041bedfe98)) }\\n          if not(iszero(and(absTick, 0x80000))) { ratio := shr(128, mul(ratio, 0x48a170391f7dc42444e8fa2)) }\\n\\n          if gt(tick, 0) { ratio := div(not(0), ratio) }\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n//        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n          switch mod(ratio, shl(32, 1))\\n          case 0 {\\n            sqrtPriceX96 := and(sub(shr(160, 1), 1), add(shr(32, ratio),  0))\\n          }\\n          default {\\n            sqrtPriceX96 := and(sub(shr(160, 1), 1), add(shr(32, ratio),  1))\\n          }\\n        }\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001;// = log_2 * 255738958999603826347141; // 128.128 number\\n        assembly {\\n          log_sqrt10001 := mul(log_2, 255738958999603826347141) // 128.128 number\\n        }\\n\\n        int24 tickLow;// = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi;// = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n        assembly {\\n          tickLow := sar(128, sub(log_sqrt10001, 3402992956809132418596140100660247210))\\n          tickHi := sar(128, add(log_sqrt10001, 291339464771989622907027621153398088495))\\n        }\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"libraries/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.19;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"libraries/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport './openzeppelin-contracts/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\\n\"\r\n    },\r\n    \"libraries/v2-core/contracts/interfaces/IUniswapV2Callee.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\"\r\n    },\r\n    \"libraries/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"libraries/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"libraries/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"libraries/v3-core/contracts/interfaces/IUniswapV3Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\"\r\n    },\r\n    \"libraries/v3-core/contracts/interfaces/IUniswapV3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\"\r\n    },\r\n    \"libraries/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\"\r\n    },\r\n    \"libraries/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\"\r\n    },\r\n    \"libraries/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"libraries/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\"\r\n    },\r\n    \"libraries/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\"\r\n    },\r\n    \"libraries/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"SLIPPAGE_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"current_caller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"exec\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ind\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"network\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"amount0Delta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"amount1Delta\",\"type\":\"int256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3SwapCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"value_to_pay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ETHRouter_V5_FromInput", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}