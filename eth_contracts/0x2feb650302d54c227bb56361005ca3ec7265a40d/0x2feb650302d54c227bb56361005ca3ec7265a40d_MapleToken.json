{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MapleToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport { ERC20Proxied } from \\\"../modules/erc20/contracts/ERC20Proxied.sol\\\";\\n\\nimport { IGlobalsLike } from \\\"./interfaces/Interfaces.sol\\\";\\nimport { IMapleToken }  from \\\"./interfaces/IMapleToken.sol\\\";\\n\\ncontract MapleToken is IMapleToken, ERC20Proxied {\\n\\n    bytes32 internal constant GLOBALS_SLOT        = bytes32(uint256(keccak256(\\\"eip1967.proxy.globals\\\")) - 1);\\n    bytes32 internal constant IMPLEMENTATION_SLOT = bytes32(uint256(keccak256(\\\"eip1967.proxy.implementation\\\")) - 1);\\n\\n    mapping(address => bool) public isModule;\\n\\n    modifier onlyGovernor {\\n        require(msg.sender == governor(), \\\"MT:NOT_GOVERNOR\\\");\\n        _;\\n    }\\n\\n    modifier onlyScheduled(bytes32 functionId_) {\\n        IGlobalsLike globals_         = IGlobalsLike(globals());\\n        bool         isScheduledCall_ = globals_.isValidScheduledCall(msg.sender, address(this), functionId_, msg.data);\\n\\n        require(isScheduledCall_, \\\"MT:NOT_SCHEDULED\\\");\\n\\n        globals_.unscheduleCall(msg.sender, functionId_, msg.data);\\n\\n        _;\\n    }\\n\\n    /**************************************************************************************************************************************/\\n    /*** External Functions                                                                                                             ***/\\n    /**************************************************************************************************************************************/\\n\\n    function addModule(address module_) external onlyGovernor onlyScheduled(\\\"MT:ADD_MODULE\\\") {\\n        isModule[module_] = true;\\n\\n        emit ModuleAdded(module_);\\n    }\\n\\n    function removeModule(address module_) external onlyGovernor onlyScheduled(\\\"MT:REMOVE_MODULE\\\") {\\n        delete isModule[module_];\\n\\n        emit ModuleRemoved(module_);\\n    }\\n\\n    function burn(address from_, uint256 amount_) external {\\n        require(isModule[msg.sender], \\\"MT:B:NOT_MODULE\\\");\\n        _burn(from_, amount_);\\n\\n        emit Burn(from_, amount_);\\n    }\\n\\n    function mint(address to_, uint256 amount_) external  {\\n        require(isModule[msg.sender], \\\"MT:M:NOT_MODULE\\\");\\n        _mint(to_, amount_);\\n\\n        emit Mint(to_, amount_);\\n    }\\n\\n    /**************************************************************************************************************************************/\\n    /*** View Functions                                                                                                                 ***/\\n    /**************************************************************************************************************************************/\\n\\n    function implementation() external view returns (address implementation_) {\\n        implementation_ = _getAddress(IMPLEMENTATION_SLOT);\\n    }\\n\\n    function governor() public view returns (address governor_) {\\n        governor_ = IGlobalsLike(globals()).governor();\\n    }\\n\\n    function globals() public view returns (address globals_) {\\n        globals_ = _getAddress(GLOBALS_SLOT);\\n    }\\n\\n    /**************************************************************************************************************************************/\\n    /*** Utility Functions                                                                                                              ***/\\n    /**************************************************************************************************************************************/\\n\\n    function _getAddress(bytes32 slot_) internal view returns (address value_) {\\n        assembly {\\n            value_ := sload(slot_)\\n        }\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"modules/erc20/contracts/ERC20Proxied.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\nimport { IERC20 } from \\\"./interfaces/IERC20.sol\\\";\\n\\n/*\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2557\\n    \u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2554\u2550\u2588\u2588\u2588\u2588\u2557\\n    \u2588\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551          \u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\u2588\u2588\u2554\u2588\u2588\u2551\\n    \u2588\u2588\u2554\u2550\u2550\u255d  \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551         \u2588\u2588\u2554\u2550\u2550\u2550\u255d \u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2557    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2557\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\\n    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d    \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d\\n*/\\n\\n/**\\n *  @title Modern ERC-20 implementation.\\n *  @dev   Acknowledgements to Solmate, OpenZeppelin, and DSS for inspiring this code.\\n */\\nabstract contract ERC20Proxied is IERC20 {\\n\\n    /**************************************************************************************************************************************/\\n    /*** ERC-20                                                                                                                         ***/\\n    /**************************************************************************************************************************************/\\n\\n    string public override name;\\n    string public override symbol;\\n\\n    uint8 public override decimals;\\n\\n    uint256 public override totalSupply;\\n\\n    mapping(address => uint256) public override balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public override allowance;\\n\\n    /**************************************************************************************************************************************/\\n    /*** ERC-2612                                                                                                                       ***/\\n    /**************************************************************************************************************************************/\\n\\n    // PERMIT_TYPEHASH = keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\");\\n    bytes32 public constant override PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\\n\\n    mapping(address => uint256) public override nonces;\\n\\n    /**************************************************************************************************************************************/\\n    /*** External Functions                                                                                                             ***/\\n    /**************************************************************************************************************************************/\\n\\n    function approve(address spender_, uint256 amount_) public virtual override returns (bool success_) {\\n        _approve(msg.sender, spender_, amount_);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) public virtual override returns (bool success_) {\\n        _decreaseAllowance(msg.sender, spender_, subtractedAmount_);\\n        return true;\\n    }\\n\\n    function increaseAllowance(address spender_, uint256 addedAmount_) public virtual override returns (bool success_) {\\n        _approve(msg.sender, spender_, allowance[msg.sender][spender_] + addedAmount_);\\n        return true;\\n    }\\n\\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_)\\n        public virtual override\\n    {\\n        require(deadline_ >= block.timestamp, \\\"ERC20:P:EXPIRED\\\");\\n\\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}.\\n        require(\\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\\n            (v_ == 27 || v_ == 28),\\n            \\\"ERC20:P:MALLEABLE\\\"\\n        );\\n\\n        // Nonce realistically cannot overflow.\\n        unchecked {\\n            bytes32 digest_ = keccak256(\\n                abi.encodePacked(\\n                    \\\"\\\\x19\\\\x01\\\",\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\\n                )\\n            );\\n\\n            address recoveredAddress_ = ecrecover(digest_, v_, r_, s_);\\n\\n            require(recoveredAddress_ == owner_ && owner_ != address(0), \\\"ERC20:P:INVALID_SIGNATURE\\\");\\n        }\\n\\n        _approve(owner_, spender_, amount_);\\n    }\\n\\n    function transfer(address recipient_, uint256 amount_) public virtual override returns (bool success_) {\\n        _transfer(msg.sender, recipient_, amount_);\\n        return true;\\n    }\\n\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) public virtual override returns (bool success_) {\\n        _decreaseAllowance(owner_, msg.sender, amount_);\\n        _transfer(owner_, recipient_, amount_);\\n        return true;\\n    }\\n\\n    /**************************************************************************************************************************************/\\n    /*** View Functions                                                                                                                 ***/\\n    /**************************************************************************************************************************************/\\n\\n    function DOMAIN_SEPARATOR() public view override returns (bytes32 domainSeparator_) {\\n        return keccak256(\\n            abi.encode(\\n                keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                keccak256(bytes(name)),\\n                keccak256(bytes(\\\"1\\\")),\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    /**************************************************************************************************************************************/\\n    /*** Internal Functions                                                                                                             ***/\\n    /**************************************************************************************************************************************/\\n\\n    function _approve(address owner_, address spender_, uint256 amount_) internal {\\n        emit Approval(owner_, spender_, allowance[owner_][spender_] = amount_);\\n    }\\n\\n    function _burn(address owner_, uint256 amount_) internal {\\n        balanceOf[owner_] -= amount_;\\n\\n        // Cannot underflow because a user's balance will never be larger than the total supply.\\n        unchecked { totalSupply -= amount_; }\\n\\n        emit Transfer(owner_, address(0), amount_);\\n    }\\n\\n    function _decreaseAllowance(address owner_, address spender_, uint256 subtractedAmount_) internal {\\n        uint256 spenderAllowance = allowance[owner_][spender_];  // Cache to memory.\\n\\n        if (spenderAllowance != type(uint256).max) {\\n            _approve(owner_, spender_, spenderAllowance - subtractedAmount_);\\n        }\\n    }\\n\\n    function _mint(address recipient_, uint256 amount_) internal {\\n        totalSupply += amount_;\\n\\n        // Cannot overflow because totalSupply would first overflow in the statement above.\\n        unchecked { balanceOf[recipient_] += amount_; }\\n\\n        emit Transfer(address(0), recipient_, amount_);\\n    }\\n\\n    function _transfer(address owner_, address recipient_, uint256 amount_) internal {\\n        balanceOf[owner_] -= amount_;\\n\\n        // Cannot overflow because minting prevents overflow of totalSupply, and sum of user balances == totalSupply.\\n        unchecked { balanceOf[recipient_] += amount_; }\\n\\n        emit Transfer(owner_, recipient_, amount_);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\ninterface IERC20Like {\\n\\n    function burn(address from, uint256 value) external;\\n\\n    function mint(address to, uint256 value) external;\\n\\n    function totalSupply() external view returns (uint256 totalSupply);\\n\\n}\\n\\ninterface IGlobalsLike {\\n\\n    function governor() external view returns (address governor);\\n\\n    function isInstanceOf(bytes32 instanceKey, address instance) external view returns (bool isInstance);\\n\\n    function isValidScheduledCall(\\n        address          caller,\\n        address          target,\\n        bytes32          functionId,\\n        bytes   calldata callData\\n    ) external view returns (bool isValidScheduledCall);\\n\\n    function mapleTreasury() external view returns (address mapleTreasury);\\n\\n    function unscheduleCall(address caller, bytes32 functionId, bytes calldata callData) external;\\n\\n}\\n\\ninterface IMapleTokenInitializerLike {\\n\\n    function initialize(address migrator, address treasury) external;\\n\\n}\\n\\ninterface IMapleTokenLike is IERC20Like {\\n\\n    function globals() external view returns (address globals);\\n\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMapleToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.18;\\n\\nimport { IERC20 }  from \\\"../../modules/erc20/contracts/interfaces/IERC20.sol\\\";\\n\\ninterface IMapleToken is IERC20 {\\n\\n    /**************************************************************************************************************************************/\\n    /*** Events                                                                                                                         ***/\\n    /**************************************************************************************************************************************/\\n\\n    /**\\n     *  @dev   A burn was performed.\\n     *  @param from   The address of the account whose tokens were burned.\\n     *  @param amount The amount of tokens that were burned.\\n     */\\n    event Burn(address indexed from, uint256 amount);\\n\\n    /**\\n     *  @dev   A mint was performed.\\n     *  @param to     The address of the account whose tokens were minted.\\n     *  @param amount The amount of tokens that were minted.\\n     */\\n    event Mint(address indexed to, uint256 amount);\\n\\n    /**\\n     *  @dev   A new module was added to the MapleToken.\\n     *  @param module The address the module added.\\n     */ \\n    event ModuleAdded(address indexed module);\\n\\n    /**\\n     *  @dev   A module was removed from the MapleToken.\\n     *  @param module The address the module removed.\\n     */\\n    event ModuleRemoved(address indexed module);\\n\\n    /**************************************************************************************************************************************/\\n    /*** Functions                                                                                                                      ***/\\n    /**************************************************************************************************************************************/\\n\\n    /**\\n     *  @dev   Adds a new module to the MapleToken.\\n     *  @param module  The address the module to add.\\n     */    \\n    function addModule(address module) external;\\n\\n    /**\\n     *  @dev   Burns a specified amount of tokens from the an account.\\n     *  @param from   The address to burn tokens from.\\n     *  @param amount The amount of tokens to burn.\\n     */\\n    function burn(address from, uint256 amount) external;\\n\\n    /**\\n     *  @dev    Returns the address of the Maple Governor.\\n     *  @return governor The address of the Maple Governor.\\n     */\\n    function governor() external view returns (address governor);\\n\\n    /**\\n     *  @dev    Returns the address of the Maple Globals contract.\\n     *  @return globals The address of the Maple Globals contract.\\n     */\\n    function globals() external view returns (address globals);\\n\\n    /**\\n     *  @dev    Returns the proxy's implementation address.\\n     *  @return implementation_ The address of the implementation.\\n     */\\n    function implementation() external view returns (address implementation_);\\n\\n    /**\\n     *  @dev    Returns true if the specified module is a burner.\\n     *  @param  module The address of the module to check.\\n     *  @return isModule True if the address is a valid module.\\n     */\\n    function isModule(address module) external view returns (bool isModule);\\n\\n    /**\\n     *  @dev   Mints a specified amount of tokens to an account.\\n     *  @param to     The address to mint tokens to.\\n     *  @param amount The amount of tokens to mint.\\n     */\\n    function mint(address to, uint256 amount) external;\\n\\n    /**\\n     *  @dev   Removes a module from the MapleToken.\\n     *  @param module The address the module to remove.\\n     */\\n    function removeModule(address module) external;\\n\\n}\\n\"\r\n    },\r\n    \"modules/erc20/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.7;\\n\\n/// @title Interface of the ERC20 standard as defined in the EIP, including EIP-2612 permit functionality.\\ninterface IERC20 {\\n\\n    /**************************************************************************************************************************************/\\n    /*** Events                                                                                                                         ***/\\n    /**************************************************************************************************************************************/\\n\\n    /**\\n     *  @dev   Emitted when one account has set the allowance of another account over their tokens.\\n     *  @param owner_   Account that tokens are approved from.\\n     *  @param spender_ Account that tokens are approved for.\\n     *  @param amount_  Amount of tokens that have been approved.\\n     */\\n    event Approval(address indexed owner_, address indexed spender_, uint256 amount_);\\n\\n    /**\\n     *  @dev   Emitted when tokens have moved from one account to another.\\n     *  @param owner_     Account that tokens have moved from.\\n     *  @param recipient_ Account that tokens have moved to.\\n     *  @param amount_    Amount of tokens that have been transferred.\\n     */\\n    event Transfer(address indexed owner_, address indexed recipient_, uint256 amount_);\\n\\n    /**************************************************************************************************************************************/\\n    /*** External Functions                                                                                                             ***/\\n    /**************************************************************************************************************************************/\\n\\n    /**\\n     *  @dev    Function that allows one account to set the allowance of another account over their tokens.\\n     *          Emits an {Approval} event.\\n     *  @param  spender_ Account that tokens are approved for.\\n     *  @param  amount_  Amount of tokens that have been approved.\\n     *  @return success_ Boolean indicating whether the operation succeeded.\\n     */\\n    function approve(address spender_, uint256 amount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev    Function that allows one account to decrease the allowance of another account over their tokens.\\n     *          Emits an {Approval} event.\\n     *  @param  spender_          Account that tokens are approved for.\\n     *  @param  subtractedAmount_ Amount to decrease approval by.\\n     *  @return success_          Boolean indicating whether the operation succeeded.\\n     */\\n    function decreaseAllowance(address spender_, uint256 subtractedAmount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev    Function that allows one account to increase the allowance of another account over their tokens.\\n     *          Emits an {Approval} event.\\n     *  @param  spender_     Account that tokens are approved for.\\n     *  @param  addedAmount_ Amount to increase approval by.\\n     *  @return success_     Boolean indicating whether the operation succeeded.\\n     */\\n    function increaseAllowance(address spender_, uint256 addedAmount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev   Approve by signature.\\n     *  @param owner_    Owner address that signed the permit.\\n     *  @param spender_  Spender of the permit.\\n     *  @param amount_   Permit approval spend limit.\\n     *  @param deadline_ Deadline after which the permit is invalid.\\n     *  @param v_        ECDSA signature v component.\\n     *  @param r_        ECDSA signature r component.\\n     *  @param s_        ECDSA signature s component.\\n     */\\n    function permit(address owner_, address spender_, uint amount_, uint deadline_, uint8 v_, bytes32 r_, bytes32 s_) external;\\n\\n    /**\\n     *  @dev    Moves an amount of tokens from `msg.sender` to a specified account.\\n     *          Emits a {Transfer} event.\\n     *  @param  recipient_ Account that receives tokens.\\n     *  @param  amount_    Amount of tokens that are transferred.\\n     *  @return success_   Boolean indicating whether the operation succeeded.\\n     */\\n    function transfer(address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    /**\\n     *  @dev    Moves a pre-approved amount of tokens from a sender to a specified account.\\n     *          Emits a {Transfer} event.\\n     *          Emits an {Approval} event.\\n     *  @param  owner_     Account that tokens are moving from.\\n     *  @param  recipient_ Account that receives tokens.\\n     *  @param  amount_    Amount of tokens that are transferred.\\n     *  @return success_   Boolean indicating whether the operation succeeded.\\n     */\\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external returns (bool success_);\\n\\n    /**************************************************************************************************************************************/\\n    /*** View Functions                                                                                                                 ***/\\n    /**************************************************************************************************************************************/\\n\\n    /**\\n     *  @dev    Returns the allowance that one account has given another over their tokens.\\n     *  @param  owner_     Account that tokens are approved from.\\n     *  @param  spender_   Account that tokens are approved for.\\n     *  @return allowance_ Allowance that one account has given another over their tokens.\\n     */\\n    function allowance(address owner_, address spender_) external view returns (uint256 allowance_);\\n\\n    /**\\n     *  @dev    Returns the amount of tokens owned by a given account.\\n     *  @param  account_ Account that owns the tokens.\\n     *  @return balance_ Amount of tokens owned by a given account.\\n     */\\n    function balanceOf(address account_) external view returns (uint256 balance_);\\n\\n    /**\\n     *  @dev    Returns the decimal precision used by the token.\\n     *  @return decimals_ The decimal precision used by the token.\\n     */\\n    function decimals() external view returns (uint8 decimals_);\\n\\n    /**\\n     *  @dev    Returns the signature domain separator.\\n     *  @return domainSeparator_ The signature domain separator.\\n     */\\n    function DOMAIN_SEPARATOR() external view returns (bytes32 domainSeparator_);\\n\\n    /**\\n     *  @dev    Returns the name of the token.\\n     *  @return name_ The name of the token.\\n     */\\n    function name() external view returns (string memory name_);\\n\\n    /**\\n      *  @dev    Returns the nonce for the given owner.\\n      *  @param  owner_  The address of the owner account.\\n      *  @return nonce_ The nonce for the given owner.\\n     */\\n    function nonces(address owner_) external view returns (uint256 nonce_);\\n\\n    /**\\n     *  @dev    Returns the permit type hash.\\n     *  @return permitTypehash_ The permit type hash.\\n     */\\n    function PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_);\\n\\n    /**\\n     *  @dev    Returns the symbol of the token.\\n     *  @return symbol_ The symbol of the token.\\n     */\\n    function symbol() external view returns (string memory symbol_);\\n\\n    /**\\n     *  @dev    Returns the total amount of tokens in existence.\\n     *  @return totalSupply_ The total amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256 totalSupply_);\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"address-registry/=modules/address-registry/contracts/\",\r\n      \"contract-test-utils/=modules/globals/modules/contract-test-utils/contracts/\",\r\n      \"ds-test/=modules/forge-std/lib/ds-test/src/\",\r\n      \"erc20/=modules/erc20/\",\r\n      \"forge-std/=modules/forge-std/src/\",\r\n      \"globals/=modules/globals/\",\r\n      \"migrator/=modules/migrator/modules/erc20-helper/src/\",\r\n      \"non-transparent-proxy/=modules/globals/modules/non-transparent-proxy/\",\r\n      \"ntp/=modules/ntp/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator_\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module_\",\"type\":\"address\"}],\"name\":\"addModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedAmount_\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"globals\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"globals_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedAmount_\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s_\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"module_\",\"type\":\"address\"}],\"name\":\"removeModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success_\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MapleToken", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}