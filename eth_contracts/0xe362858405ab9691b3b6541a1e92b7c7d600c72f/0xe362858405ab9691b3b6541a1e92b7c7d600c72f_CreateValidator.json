{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n    function balanceOf(address who) external view returns (uint256);\r\n}\r\n\r\ncontract CreateValidator{\r\n    address public  owner;\r\n    address public receiverWallet;\r\n    uint256 public validatorCost = 0.7 ether;\r\n    uint256 public validatorCount;\r\n    string promo1 = \"NODEOPS2024\";\r\n    string promo2 = \"SPHERON2024\";\r\n\r\n    mapping(address => uint) balance;\r\n    mapping(address => string) userPromoCodes;\r\n\r\n    event DepositPromo(uint256 id, address indexed depositor, address to, string promoCode, uint256 amount, uint256 time);\r\n    event Deposit(uint256 id, address indexed depositor, address to, string promoCode, uint256 amount, uint256 time);\r\n    event withdrawTokensEvent(address indexed depositor, IERC20 tokenaddress, uint256 amount, uint256 time);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n \r\n    constructor(address _receiverWallet) {\r\n        receiverWallet = _receiverWallet;\r\n        owner = payable(msg.sender);\r\n    }\r\n\r\n    function depositETHPromoCode(string memory promoCode) payable public{\r\n        require(keccak256(abi.encodePacked(promoCode)) == keccak256(abi.encodePacked(promo1)) || keccak256(abi.encodePacked(promoCode)) == keccak256(abi.encodePacked(promo2)), \"Invalid code\");\r\n        require(msg.value == validatorCost, \"Deposit amount must be 0.7 ETH\");\r\n        payable(receiverWallet).transfer(msg.value);\r\n        userPromoCodes[msg.sender] = promoCode;\r\n        validatorCount++;\r\n        emit DepositPromo(validatorCount, msg.sender, address(this), promoCode, msg.value, block.timestamp);\r\n    } \r\n\r\n    function depositETH() payable public{\r\n        require(msg.value == validatorCost, \"Deposit amount must be 0.7 ETH\");\r\n        payable(receiverWallet).transfer(msg.value);\r\n        userPromoCodes[msg.sender] = \"\";\r\n        validatorCount++;\r\n        emit DepositPromo(validatorCount, msg.sender, address(this), \"\", msg.value, block.timestamp);\r\n    } \r\n\r\n    function Withdraw(uint256 amount) payable public onlyOwner {\r\n        require(balance[address(this)] > amount, \"Invalid amount\");\r\n        payable(owner).transfer(amount);\r\n    }\r\n\r\n    function WithdrawToken(IERC20 _tokenAddress, address _to, uint256 _amount) public onlyOwner{\r\n        require(_to != address(0), \"Invalid address\");\r\n        require(_amount > 0, \"Amount must be greater than 0\");\r\n\r\n        uint256 contractTokenBalance = IERC20(_tokenAddress).balanceOf(address(this));\r\n        require(contractTokenBalance >= _amount, \"Not enough tokens in contract\");\r\n\r\n        IERC20 tokenAddress = IERC20(_tokenAddress);\r\n        tokenAddress.transfer(_to, _amount);\r\n        emit withdrawTokensEvent(address(this), _tokenAddress, _amount, block.timestamp);\r\n    }\r\n    \r\n    function contractBalance() public view returns(uint){\r\n        return balance[address(this)];\r\n    }\r\n\r\n\r\n    function getUserPromoCode(address _user) public view returns(string memory) {\r\n        return userPromoCodes[_user];\r\n    }\r\n\r\n    // Change Receiver Wallet\r\n    function changeReceiver( address _newReceiver) public onlyOwner {\r\n        receiverWallet = _newReceiver;\r\n    }\r\n\r\n    // Update Validator Cost\r\n    function updateValidatorCost( uint _newvalidatorCost) public onlyOwner {\r\n        validatorCost = _newvalidatorCost;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiverWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"promoCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"promoCode\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"DepositPromo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"tokenaddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"withdrawTokensEvent\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newReceiver\",\"type\":\"address\"}],\"name\":\"changeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"promoCode\",\"type\":\"string\"}],\"name\":\"depositETHPromoCode\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserPromoCode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiverWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newvalidatorCost\",\"type\":\"uint256\"}],\"name\":\"updateValidatorCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validatorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CreateValidator", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d853406a70a6fc8ff3bd86a8d6cf4b9af10ae25e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://06c881b53387cf33c960da84c1520c3e51ef40b39e2100a161b7c38034af37b6"}