{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ScheduleCreator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./Vesting.sol\\\";\\nimport \\\"openzeppelin/access/Ownable.sol\\\";\\nimport \\\"openzeppelin/security/Pausable.sol\\\";\\n\\ncontract ScheduleCreator is Ownable, Pausable {\\n\\n    Vesting public vestingContract;\\n    bool public isSaleEnd;\\n\\n\\n    uint256 public tokensSold;\\n\\n    mapping(address => uint256) public vestedAmount;\\n\\n    event TokensPurchased(address buyer, uint256 amount);\\n    event TokensClaimed(address beneficiary, uint256 amount);\\n\\n    constructor(address _vestingContract) Ownable(msg.sender) {\\n        vestingContract = Vesting(_vestingContract);\\n        isSaleEnd = true;\\n    }\\n\\n    function pause() public onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyOwner {\\n        _unpause();\\n    }\\n\\n    modifier onlySaleEnd() {\\n        require(isSaleEnd, \\\"Sale has not ended\\\");\\n        _;\\n    }\\n\\n    modifier onlySaleNotEnd() {\\n        require(!isSaleEnd, \\\"Sale has ended\\\");\\n        _;\\n    }\\n\\n    function purchaseTokensFor(address[] calldata recipients, uint256[] calldata amounts, uint8[] calldata durations, uint256[] calldata startTimes, uint256[] calldata lockDurations)\\n        external\\n        onlyOwner\\n    {\\n        require(recipients.length == amounts.length, \\\"Recipients and amounts do not match\\\");\\n        require(recipients.length == durations.length, \\\"Recipients and durations do not match\\\");\\n        require(recipients.length == startTimes.length, \\\"Recipients and startTimes do not match\\\");\\n        require(recipients.length == lockDurations.length, \\\"Recipients and lockDurations do not match\\\");\\n        uint256 amountVested;\\n        for (uint256 i = 0; i < recipients.length; i++) {\\n            address recipient = recipients[i];\\n            uint256 amount = amounts[i];\\n            uint8 duration = durations[i];\\n            uint256 startTime = startTimes[i];\\n            uint256 lockDuration = lockDurations[i];\\n            amountVested = amountVested + amount;\\n            require(amount > 0, \\\"Amount must be greater than zero\\\");\\n            \\n            require(duration > 0, \\\"Duration must be greater than zero\\\");\\n\\n            vestedAmount[recipient] = vestedAmount[recipient] + amount;\\n\\n            vestingContract.createVestingSchedule(\\n                recipient,\\n                amount,\\n                duration, // Number of months for the release period\\n                startTime, // Start time of the vesting schedule\\n                lockDuration // Number of months before vesting period begins\\n            );\\n            tokensSold = tokensSold + amount;\\n            emit TokensPurchased(recipient, amount);\\n        }\\n    }\\n\\n    function claimVestedTokens() external whenNotPaused {\\n        uint256 userVestedAmount = vestedAmount[msg.sender];\\n        require(userVestedAmount > 0, \\\"No tokens available to claim\\\");\\n\\n        uint256 releasableTokens = vestingContract.getReleasableTokens(address(this), msg.sender);\\n        require(releasableTokens > 0, \\\"No tokens available for release\\\");\\n\\n        vestingContract.releaseTokens(address(this), msg.sender);\\n\\n        emit TokensClaimed(msg.sender, releasableTokens);\\n    }\\n\\n    function setSaleEnd() external onlyOwner {\\n        isSaleEnd = !isSaleEnd;\\n    }\\n\\n    function seeClaimableTokens() external view returns (uint256 releasableTokens) {\\n        releasableTokens = vestingContract.getReleasableTokens(address(this), msg.sender);\\n    }\\n\\n    function updateVestingAddress(address vestingAddr) external onlyOwner {\\n        require(vestingAddr != address(0), \\\"Vesting address cannot be Zero\\\");\\n        vestingContract = Vesting(vestingAddr);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\nimport \\\"openzeppelin/access/Ownable.sol\\\";\\nimport \\\"openzeppelin/security/Pausable.sol\\\";\\n\\ncontract Vesting is Ownable, Pausable {\\n\\n    // Number of seconds in 365 days, divided by 12:\\n    uint256 public constant SECONDS_PER_MONTH = 2628000;\\n\\n    // Mapping of plan id to start date. All beneficiaries of a specific plan would have the same start time\\n    mapping(uint256 => uint256) public startDates;\\n    struct VestingSchedule {\\n        uint256 totalTokens; // amount of tokens for a recipient\\n        uint256 releasePeriod; // Number of months for the release period\\n        uint256 startDate; // The plan number for the start time of the vesting schedule\\n        uint256 releasedTokens; // Number of tokens released so far\\n        uint256 lockDuration; // Number of months for the release period\\n    }\\n    uint256 public tokensVested;\\n\\n    // privatesale addr => (user addr => schedule)\\n    mapping(address => mapping(address => VestingSchedule)) public vestingSchedules;\\n\\n    // privatesale addr => bool\\n    mapping(address => bool) public vestingSchedulesActive;\\n    mapping(address => bool) public whitelist;\\n\\n    IERC20 public token;\\n\\n    event TokensReleased(address beneficiary, uint256 amount);\\n    event VestingScheduleCreated(address beneficiary, uint256 totalTokens, uint256 startDate, uint256 lockDuration);\\n    event VestingScheduleUpdated(address beneficiary, uint256 totalTokens);\\n\\n    constructor(address _token) Ownable(msg.sender) {\\n        token = IERC20(_token);\\n    }\\n\\n    function createVestingSchedule(address beneficiary, uint256 totalTokens, uint256 releasePeriod, uint256 startDate, uint256 lockDuration)\\n        external\\n        onlyWhitelisted\\n        whenNotPaused\\n    {\\n        require(totalTokens > 0, \\\"Total tokens must be greater than zero\\\");\\n        require(releasePeriod > 0, \\\"Release period must be greater than zero\\\");\\n        require((totalTokens + tokensVested) <= token.balanceOf(address(this)), \\\"Not enough tokens for vesting\\\");\\n        require(\\n            vestingSchedules[msg.sender][beneficiary].releasedTokens == 0,\\n            \\\"Vesting schedule already in use, for the beneficiary\\\"\\n        );\\n        VestingSchedule storage schedule = vestingSchedules[msg.sender][beneficiary];\\n        if(vestingSchedules[msg.sender][beneficiary].totalTokens == 0) {\\n            schedule.totalTokens = totalTokens;\\n            schedule.releasePeriod = releasePeriod;\\n            schedule.startDate = startDate;\\n            schedule.lockDuration = lockDuration;\\n            emit VestingScheduleCreated(beneficiary, schedule.totalTokens, startDates[schedule.startDate], schedule.lockDuration);\\n        } else {\\n            schedule.totalTokens = schedule.totalTokens + totalTokens;\\n            emit VestingScheduleUpdated(beneficiary, totalTokens);\\n        }   \\n        tokensVested = tokensVested + totalTokens;\\n    }\\n\\n    function removeVestingSchedule(address contractAddress, address beneficiary)\\n        external\\n        whenNotPaused\\n        onlyWhitelisted\\n    {\\n        VestingSchedule storage schedule = vestingSchedules[contractAddress][beneficiary];\\n        uint256 tokensLeft = schedule.totalTokens - schedule.releasedTokens;\\n        tokensVested = tokensVested - tokensLeft;\\n        delete vestingSchedules[contractAddress][beneficiary];\\n    }\\n\\n    function releaseTokens(address contractAddress, address beneficiary) external whenNotPaused onlyWhitelisted {\\n        require(vestingSchedulesActive[contractAddress] == true, \\\"Vesting schedule not active\\\");\\n        uint256 releasableTokens = getReleasableTokens(contractAddress, beneficiary);\\n        require(releasableTokens > 0, \\\"No tokens available for release\\\");\\n        VestingSchedule storage schedule = vestingSchedules[contractAddress][beneficiary];\\n        schedule.releasedTokens = schedule.releasedTokens + releasableTokens;\\n        tokensVested = tokensVested - releasableTokens;\\n        token.transfer(beneficiary, releasableTokens);\\n        emit TokensReleased(beneficiary, releasableTokens);\\n    }\\n\\n    function getReleasableTokens(address contractAddress, address beneficiary) public view returns (uint256) {\\n        VestingSchedule storage schedule = vestingSchedules[contractAddress][beneficiary];\\n        require(schedule.totalTokens > 0, \\\"No vesting schedule found for the beneficiary\\\");\\n        uint256 tokensToClaim;\\n        uint256 claimingStartTime = startDates[schedule.startDate] + (schedule.lockDuration * SECONDS_PER_MONTH);\\n        if(block.timestamp <= claimingStartTime) {\\n            tokensToClaim = 0;\\n        } else {\\n            uint256 elapsedTime = block.timestamp - claimingStartTime;\\n            uint256 totalReleasePeriods = schedule.releasePeriod;\\n            uint256 totalTokens = schedule.totalTokens;\\n            uint256 tokensPerPeriod = totalTokens / totalReleasePeriods;\\n            uint256 passedMonths = (elapsedTime / SECONDS_PER_MONTH) >= totalReleasePeriods\\n                ? totalReleasePeriods\\n                : elapsedTime / SECONDS_PER_MONTH;\\n            uint256 tokensToRelease = passedMonths * (tokensPerPeriod);\\n\\n            if(passedMonths == 0) {\\n                tokensToClaim = 0;\\n            } else {\\n                tokensToClaim = passedMonths == totalReleasePeriods\\n                    ? totalTokens - schedule.releasedTokens\\n                    : tokensToRelease - schedule.releasedTokens;\\n            }\\n        }\\n        return tokensToClaim;\\n    }\\n\\n    function getNextClaimableTime(address contractAddress, address beneficiary, uint256 dateID) external view returns (uint256) {\\n        VestingSchedule storage schedule = vestingSchedules[contractAddress][beneficiary];\\n        uint256 current_time = block.timestamp;\\n        uint256 timeRemaining;\\n        uint256 claimingStartTime = startDates[dateID] + (schedule.lockDuration * SECONDS_PER_MONTH);\\n        if(current_time > ((schedule.releasePeriod * SECONDS_PER_MONTH) + claimingStartTime)) {\\n            timeRemaining = 0;\\n        } else {\\n            if(current_time >= claimingStartTime) {\\n                uint256 diff = current_time - claimingStartTime;\\n                uint256 current_multiple = diff / SECONDS_PER_MONTH;\\n                uint256 timer_start = (current_multiple * SECONDS_PER_MONTH) + claimingStartTime;\\n                uint256 current_progress_in_month = current_time - timer_start;\\n                timeRemaining = SECONDS_PER_MONTH - current_progress_in_month;\\n            } else {\\n                timeRemaining = claimingStartTime - current_time;\\n            }\\n        }\\n        return timeRemaining;\\n    }\\n\\n    modifier onlyWhitelisted() {\\n        require(whitelist[msg.sender], \\\"Sender is not whitelisted\\\");\\n        _;\\n    }\\n\\n    function updateStartDate(uint256 dateId, uint256 startDate) external onlyOwner {\\n        startDates[dateId] = startDate;\\n    }\\n\\n    function addToWhitelist(address[] calldata addresses) external onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            address addr = addresses[i];\\n            whitelist[addr] = true;\\n        }\\n    }\\n\\n    function removeFromWhitelist(address[] calldata addresses) external onlyOwner {\\n        for (uint256 i = 0; i < addresses.length; i++) {\\n            address addr = addresses[i];\\n            whitelist[addr] = false;\\n        }\\n    }\\n\\n    function setVestingSchedulesActive(address contractAddress, bool active) external onlyOwner {\\n        vestingSchedulesActive[contractAddress] = active;\\n    }\\n\\n    function updateTokenAddress(address tokenAddr) external onlyOwner {\\n        require(tokenAddr != address(0), \\\"Token address cannot be Zero\\\");\\n        token = IERC20(tokenAddr);\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vestingContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"claimVestedTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSaleEnd\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"durations\",\"type\":\"uint8[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startTimes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lockDurations\",\"type\":\"uint256[]\"}],\"name\":\"purchaseTokensFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seeClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"releasableTokens\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSaleEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vestingAddr\",\"type\":\"address\"}],\"name\":\"updateVestingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingContract\",\"outputs\":[{\"internalType\":\"contract Vesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ScheduleCreator", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000bb53cca8fe11ba4370c46e8ce59ef5a2430d25fe", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}