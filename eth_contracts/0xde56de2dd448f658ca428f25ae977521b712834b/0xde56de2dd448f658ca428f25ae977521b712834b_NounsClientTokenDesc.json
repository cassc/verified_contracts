{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/client-incentives/NounsClientTokenDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/// @title The client incentives NFT descriptor\\n\\n/*********************************\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.19;\\n\\nimport { INounsClientTokenDescriptor } from './INounsClientTokenDescriptor.sol';\\nimport { INounsClientTokenTypes } from './INounsClientTokenTypes.sol';\\nimport { Base64 } from 'base64-sol/base64.sol';\\nimport { Strings } from '@openzeppelin/contracts/utils/Strings.sol';\\nimport { ETHString } from '../libs/ETHString.sol';\\n\\ncontract NounsClientTokenDescriptor is INounsClientTokenDescriptor {\\n    using Strings for uint256;\\n    using ETHString for uint96;\\n\\n    string private constant _SVG_START_TAG =\\n        '<svg width=\\\"400\\\" height=\\\"400\\\" viewBox=\\\"0 0 400 400\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"><rect width=\\\"400\\\" height=\\\"400\\\" fill=\\\"#D5D7E1\\\"/>';\\n    string private constant _SVG_END_TAG =\\n        '<path d=\\\"M75 340H45V345H75V340Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M110 340H80V345H110V340Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M50 345H45V350H50V345Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M60 345H50V350H60V345Z\\\" fill=\\\"white\\\"/><path d=\\\"M70 345H60V350H70V345Z\\\" fill=\\\"black\\\"/><path d=\\\"M75 345H70V350H75V345Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M85 345H80V350H85V345Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M95 345H85V350H95V345Z\\\" fill=\\\"white\\\"/><path d=\\\"M105 345H95V350H105V345Z\\\" fill=\\\"black\\\"/><path d=\\\"M110 345H105V350H110V345Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M50 350H30V355H50V350Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M60 350H50V355H60V350Z\\\" fill=\\\"white\\\"/><path d=\\\"M70 350H60V355H70V350Z\\\" fill=\\\"black\\\"/><path d=\\\"M85 350H70V355H85V350Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M95 350H85V355H95V350Z\\\" fill=\\\"white\\\"/><path d=\\\"M105 350H95V355H105V350Z\\\" fill=\\\"black\\\"/><path d=\\\"M110 350H105V355H110V350Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M35 355H30V360H35V355Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M50 355H45V360H50V355Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M60 355H50V360H60V355Z\\\" fill=\\\"white\\\"/><path d=\\\"M70 355H60V360H70V355Z\\\" fill=\\\"black\\\"/><path d=\\\"M75 355H70V360H75V355Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M85 355H80V360H85V355Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M95 355H85V360H95V355Z\\\" fill=\\\"white\\\"/><path d=\\\"M105 355H95V360H105V355Z\\\" fill=\\\"black\\\"/><path d=\\\"M110 355H105V360H110V355Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M35 360H30V365H35V360Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M50 360H45V365H50V360Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M60 360H50V365H60V360Z\\\" fill=\\\"white\\\"/><path d=\\\"M70 360H60V365H70V360Z\\\" fill=\\\"black\\\"/><path d=\\\"M75 360H70V365H75V360Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M85 360H80V365H85V360Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M95 360H85V365H95V360Z\\\" fill=\\\"white\\\"/><path d=\\\"M105 360H95V365H105V360Z\\\" fill=\\\"black\\\"/><path d=\\\"M110 360H105V365H110V360Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M75 365H45V370H75V365Z\\\" fill=\\\"#D19A54\\\"/><path d=\\\"M110 365H80V370H110V365Z\\\" fill=\\\"#D19A54\\\"/><line x1=\\\"30\\\" y1=\\\"314.5\\\" x2=\\\"370\\\" y2=\\\"314.5\\\" stroke=\\\"black\\\" stroke-opacity=\\\"0.5\\\"/></svg>';\\n    string private constant TEXT_SPAN_END = '</tspan></text>';\\n    string private constant ETH = ' ETH';\\n    string private constant CLIENT_NAME_START =\\n        '<text fill=\\\"black\\\" fill-opacity=\\\"0.5\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"43.4329\\\">Client Name:</tspan></text><text fill=\\\"black\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"62.4329\\\">';\\n    string private constant STATUS_START =\\n        '<text fill=\\\"black\\\" fill-opacity=\\\"0.5\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"99.4329\\\">Status:</tspan></text><text fill=\\\"black\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"118.433\\\">';\\n    string private constant TOTAL_REWARDED_START =\\n        '<text fill=\\\"black\\\" fill-opacity=\\\"0.5\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"155.433\\\">Total Rewarded:</tspan></text><text fill=\\\"black\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"174.433\\\">';\\n    string private constant CLIENT_ID_START =\\n        '<text fill=\\\"black\\\" fill-opacity=\\\"0.5\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"211.433\\\">Client ID:</tspan></text><text fill=\\\"black\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"230.433\\\">';\\n    string private constant CLIENT_DESCRIPTION_START =\\n        '<text fill=\\\"black\\\" fill-opacity=\\\"0.5\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"267.433\\\">Client Description:</tspan></text><text fill=\\\"black\\\" xml:space=\\\"preserve\\\" style=\\\"white-space: pre\\\" font-family=\\\"Courier\\\" font-size=\\\"15\\\" letter-spacing=\\\"0em\\\"><tspan x=\\\"30\\\" y=\\\"286.433\\\">';\\n\\n    function tokenURI(\\n        uint256 tokenId,\\n        INounsClientTokenTypes.ClientMetadata memory metadata\\n    ) external pure returns (string memory) {\\n        string memory name = string(abi.encodePacked('Nouns Client ', tokenId.toString(), ': ', metadata.name));\\n        string memory image = Base64.encode(\\n            bytes(abi.encodePacked(_SVG_START_TAG, _generateSVGText(tokenId, metadata), _SVG_END_TAG))\\n        );\\n\\n        return\\n            string(\\n                abi.encodePacked(\\n                    'data:application/json;base64,',\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                name,\\n                                '\\\", \\\"description\\\":\\\"',\\n                                metadata.description,\\n                                '\\\", \\\"image\\\": \\\"',\\n                                'data:image/svg+xml;base64,',\\n                                image,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _generateSVGText(\\n        uint256 tokenId,\\n        INounsClientTokenTypes.ClientMetadata memory metadata\\n    ) private pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _clientNameSVG(metadata),\\n                    _clientStatusSVG(metadata),\\n                    _totalRewardedSVG(metadata),\\n                    _clientIdSVG(tokenId),\\n                    _clientDescriptionSVG(metadata)\\n                )\\n            );\\n    }\\n\\n    function _clientNameSVG(\\n        INounsClientTokenTypes.ClientMetadata memory metadata\\n    ) private pure returns (string memory) {\\n        return string(abi.encodePacked(CLIENT_NAME_START, metadata.name, TEXT_SPAN_END));\\n    }\\n\\n    function _clientStatusSVG(\\n        INounsClientTokenTypes.ClientMetadata memory metadata\\n    ) private pure returns (string memory) {\\n        return string(abi.encodePacked(STATUS_START, metadata.approved ? 'Approved' : 'Not Approved', TEXT_SPAN_END));\\n    }\\n\\n    function _totalRewardedSVG(\\n        INounsClientTokenTypes.ClientMetadata memory metadata\\n    ) private pure returns (string memory) {\\n        return string(abi.encodePacked(TOTAL_REWARDED_START, metadata.rewarded.toETHString(), ETH, TEXT_SPAN_END));\\n    }\\n\\n    function _clientIdSVG(uint256 tokenId) private pure returns (string memory) {\\n        return string(abi.encodePacked(CLIENT_ID_START, tokenId.toString(), TEXT_SPAN_END));\\n    }\\n\\n    function _clientDescriptionSVG(\\n        INounsClientTokenTypes.ClientMetadata memory metadata\\n    ) private pure returns (string memory) {\\n        return string(abi.encodePacked(CLIENT_DESCRIPTION_START, metadata.description, TEXT_SPAN_END));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/client-incentives/INounsClientTokenDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*********************************\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.19;\\n\\nimport { INounsClientTokenTypes } from './INounsClientTokenTypes.sol';\\n\\ninterface INounsClientTokenDescriptor {\\n    function tokenURI(\\n        uint256 tokenId,\\n        INounsClientTokenTypes.ClientMetadata calldata metadata\\n    ) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/client-incentives/INounsClientTokenTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*********************************\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.19;\\n\\ninterface INounsClientTokenTypes {\\n    struct ClientMetadata {\\n        /// @notice Whether the DAO has approved the client to withdraw their rewards.\\n        bool approved;\\n        /// @notice The amount of reward tokens this client has been rewarded.\\n        uint96 rewarded;\\n        /// @notice The amount of tokens this client has withdrawn.\\n        uint96 withdrawn;\\n        /// @dev A gap for future storage needs.\\n        uint56 __gap;\\n        /// @notice The client's display name.\\n        string name;\\n        /// @notice The client's description, e.g. its URL.\\n        string description;\\n    }\\n}\\n\"\r\n    },\r\n    \"../../node_modules/base64-sol/base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"../../node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libs/ETHString.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\n/*********************************\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n * \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 *\\n *********************************/\\n\\npragma solidity ^0.8.19;\\n\\nimport { Strings } from '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary ETHString {\\n    using Strings for uint256;\\n\\n    function toETHString(uint256 amount) internal pure returns (string memory result) {\\n        string memory integerPart = (amount / 1 ether).toString();\\n        uint256 decimalPart = (amount % 1 ether) / 10 ** 16; // 10^16 wei = 0.01 ETH\\n\\n        if (decimalPart == 0) {\\n            result = string(abi.encodePacked(integerPart, '.00'));\\n        } else if (decimalPart < 10) {\\n            result = string(abi.encodePacked(integerPart, '.0', decimalPart.toString()));\\n        } else {\\n            result = string(abi.encodePacked(integerPart, '.', decimalPart.toString()));\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@ensdomains/=../../node_modules/@ensdomains/\",\r\n      \"@openzeppelin/=../../node_modules/@openzeppelin/\",\r\n      \"base64-sol/=../../node_modules/base64-sol/\",\r\n      \"eth-gas-reporter/=../../node_modules/eth-gas-reporter/\",\r\n      \"hardhat/=../../node_modules/hardhat/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"},{\"internalType\":\"uint96\",\"name\":\"rewarded\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"withdrawn\",\"type\":\"uint96\"},{\"internalType\":\"uint56\",\"name\":\"__gap\",\"type\":\"uint56\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct INounsClientTokenTypes.ClientMetadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "NounsClientTokenDescriptor", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}