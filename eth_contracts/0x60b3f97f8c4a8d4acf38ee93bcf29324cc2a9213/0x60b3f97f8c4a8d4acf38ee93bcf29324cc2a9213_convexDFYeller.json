{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ETH/convex/DOLA-FRAXBP/convexDFYeller.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        // solhint-disable-next-line no-inline-assembly\\r\\n        assembly { size := extcodesize(account) }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain`call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        // solhint-disable-next-line avoid-low-level-calls\\r\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\r\\n        return _verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n\\r\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                // solhint-disable-next-line no-inline-assembly\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function token0() external view returns (address);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\ncontract OwnableData {\\r\\n    address public owner;\\r\\n    address public pendingOwner;\\r\\n}\\r\\n\\r\\nabstract contract Ownable is OwnableData {\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        owner = msg.sender;\\r\\n        emit OwnershipTransferred(address(0), owner);\\r\\n    }\\r\\n\\r\\n    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\\r\\n        if (direct) {\\r\\n\\r\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\r\\n\\r\\n            emit OwnershipTransferred(owner, newOwner);\\r\\n            owner = newOwner;\\r\\n        } else {\\r\\n            pendingOwner = newOwner;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function claimOwnership() public {\\r\\n        address _pendingOwner = pendingOwner;\\r\\n\\r\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\r\\n\\r\\n        emit OwnershipTransferred(owner, _pendingOwner);\\r\\n        owner = _pendingOwner;\\r\\n        pendingOwner = address(0);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        // solhint-disable-next-line max-line-length\\r\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length > 0) { // Return data is optional\\r\\n            // solhint-disable-next-line max-line-length\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IStrategyCommonChefLP {\\r\\n    function yelRewards() external view returns (uint256);\\r\\n    function beforeDeposit() external;\\r\\n    function chef() external view returns (address);\\r\\n    function outputToNativeToYel() external view returns (address[] memory);\\r\\n    function poolId() external view returns (uint256);\\r\\n    function unirouter() external view returns (address);\\r\\n    function want() external view returns (address);\\r\\n    function balanceOf() external view returns (uint);\\r\\n}\\r\\n\\r\\ninterface IChef {\\r\\n    function rewarder(uint256) external view returns (address);\\r\\n}\\r\\n\\r\\ninterface IRewarder {\\r\\n    function poolInfo(uint256 _pid) external view returns (address ,address ,address ,address ,address ,bool);\\r\\n    function earned(address) external view returns (uint);\\r\\n}\\r\\n\\r\\ninterface LPToken {\\r\\n    function get_balances() external view returns (uint256[2] memory);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function get_virtual_price() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n  function getAmountsOut(uint256, address[] memory) external view returns (uint256[] memory);\\r\\n  function decimals() external view returns (uint8);\\r\\n\\r\\n  function latestRoundData() external view returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n}\\r\\n\\r\\ncontract convexDFYeller is Ownable {\\r\\n    using SafeERC20 for IERC20;\\r\\n    // Info of each user.\\r\\n    struct UserInfo {\\r\\n        uint256 amount; // How many tokens the user has provided.\\r\\n        uint256 rewardDebt; // Reward debt. See explanation below.\\r\\n        uint256 remainingYelTokenReward;  // YEL Tokens that weren't distributed for user per pool.\\r\\n        //\\r\\n        // Any point in time, the amount of YEL entitled to a user but is pending to be distributed is:\\r\\n        // pending reward = (user.amount * pool.accYELPerShare) - user.rewardDebt\\r\\n        //\\r\\n        // Whenever a user deposits or withdraws Staked tokens to a pool. Here's what happens:\\r\\n        //   1. The pool's `accYELPerShare` (and `lastRewardTime`) gets updated.\\r\\n        //   2. User receives the pending reward sent to his/her address.\\r\\n        //   3. User's `amount` gets updated.\\r\\n        //   4. User's `rewardDebt` gets updated.\\r\\n    }\\r\\n    // Info of each pool.\\r\\n    struct PoolInfo {\\r\\n        IERC20 stakingToken; // Contract address of staked token\\r\\n        uint256 stakingTokenTotalAmount; //Total amount of deposited tokens\\r\\n        uint256 accYelPerShare; // Accumulated YEL per share, times 1e12. See below.\\r\\n        uint32 lastRewardTime; // Last timestamp number that YEL distribution occurs.\\r\\n    }\\r\\n\\r\\n    IStrategyCommonChefLP public strategy; // Farming strategy.\\r\\n    AggregatorV3Interface internal priceFeedNative;\\r\\n    \\r\\n    IERC20 immutable public yel; // The YEL token.\\r\\n    \\r\\n    PoolInfo[] public poolInfo; // Info of each pool.\\r\\n    \\r\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // Info of each user that stakes tokens.\\r\\n    \\r\\n    uint256 immutable public DIVISOR = 1e18; // Divisor for formating numbers.\\r\\n    address public zap;\\r\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\r\\n\\r\\n    constructor(\\r\\n        IERC20 _yel,\\r\\n        address _strategy,\\r\\n        address _priceFeedNative,\\r\\n        address _zap\\r\\n    ) {\\r\\n        yel = _yel;\\r\\n        strategy = IStrategyCommonChefLP(_strategy);\\r\\n        priceFeedNative = AggregatorV3Interface(_priceFeedNative);\\r\\n        zap = _zap;\\r\\n    }\\r\\n\\r\\n    // Add a new staking token to the pool. Can only be called by the owner.\\r\\n    // VERY IMPORTANT NOTICE \\r\\n    // ----------- DO NOT add the same staking token more than once. Rewards will be messed up if you do. -------------\\r\\n    // Good practice to update pools without messing up the contract\\r\\n    function add(IERC20 _stakingToken) external onlyOwner {\\r\\n        uint256 lastRewardTime = block.timestamp;\\r\\n        poolInfo.push(\\r\\n            PoolInfo({\\r\\n                stakingToken: _stakingToken,\\r\\n                stakingTokenTotalAmount: 0,\\r\\n                lastRewardTime: uint32(lastRewardTime),\\r\\n                accYelPerShare: 0\\r\\n            })\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // View function to see pending YEL on frontend.\\r\\n    function pendingYel(uint256 _pid, address _user)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256)\\r\\n    {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_user];\\r\\n        uint256 accYelPerShare = pool.accYelPerShare;\\r\\n       \\r\\n        if (block.timestamp > pool.lastRewardTime && pool.stakingTokenTotalAmount != 0) {\\r\\n            (,uint pendingRewardsYel) = getPendingRewards();\\r\\n\\r\\n            accYelPerShare += (pendingRewardsYel - (pendingRewardsYel * 10 / 100)) * DIVISOR / pool.stakingTokenTotalAmount;\\r\\n        }\\r\\n        return user.amount * accYelPerShare / DIVISOR - user.rewardDebt + user.remainingYelTokenReward;\\r\\n    }\\r\\n\\r\\n    function getPendingRewards() internal view returns(uint256, uint256){\\r\\n        address unirouter = strategy.unirouter();\\r\\n        address[] memory outputToNativeToYelRoute = strategy.outputToNativeToYel();\\r\\n\\r\\n        address[] memory outputToNative = new address[](2);\\r\\n        outputToNative[0] = outputToNativeToYelRoute[0];\\r\\n        outputToNative[1] = outputToNativeToYelRoute[1];\\r\\n\\r\\n        address[] memory nativeToYel = new address[](2);\\r\\n        nativeToYel[0] = outputToNativeToYelRoute[1];\\r\\n        nativeToYel[1] = outputToNativeToYelRoute[2];\\r\\n\\r\\n        address chef = strategy.chef();\\r\\n        uint poolId = strategy.poolId();\\r\\n\\r\\n        (, , ,address crvRewards , , ) = IRewarder(chef).poolInfo(poolId);\\r\\n        uint pendingCRV = IRewarder(crvRewards).earned(address(strategy));\\r\\n\\r\\n        uint256 wholeRewardsNative = wholeNativeRewards(pendingCRV, unirouter, outputToNative);\\r\\n        uint[] memory amountsOutYel = AggregatorV3Interface(unirouter).getAmountsOut(wholeRewardsNative, nativeToYel);\\r\\n\\r\\n        return (wholeRewardsNative, amountsOutYel[1]);\\r\\n    }\\r\\n\\r\\n    function wholeNativeRewards(uint _pendingRewards, address _unirouter, address[] memory _outputOneToNative) private view returns(uint256) {\\r\\n        uint[] memory amountsOut = AggregatorV3Interface(_unirouter).getAmountsOut(_pendingRewards, _outputOneToNative);\\r\\n\\r\\n        return amountsOut[1];\\r\\n    }\\r\\n\\r\\n    // View function to see pending APR on frontend.\\r\\n    function getFullApr() public view returns (uint, uint) {\\r\\n        address unirouter = strategy.unirouter();\\r\\n        uint nativeUsdtPrice = getWethData();\\r\\n\\r\\n        uint stakedAmount = strategy.balanceOf(); \\r\\n        (uint cleanApr, uint aprCleanWithFee) = getSimpleApr(nativeUsdtPrice);\\r\\n        (, uint lpTokenPriceUsdt)= getLpValue();\\r\\n\\r\\n        uint yelApr = getYelApr(stakedAmount, lpTokenPriceUsdt, cleanApr, unirouter, nativeUsdtPrice);\\r\\n        uint finalApr = wholeApr(cleanApr, yelApr);\\r\\n       \\r\\n        return (finalApr, aprCleanWithFee);\\r\\n    }\\r\\n\\r\\n    function getSimpleApr(uint _nativeUsdtPrice) private view returns (uint, uint) {\\r\\n        uint32 secondsPerYear = 31560000;\\r\\n\\r\\n        uint rewardsPerSecondNative = getRewardsPerSecond();\\r\\n        uint rewardsPerYearForPool = rewardsPerSecondNative * secondsPerYear;\\r\\n        uint usdtRewardPerYear = (rewardsPerYearForPool * _nativeUsdtPrice) / 1e18;\\r\\n        (uint stakedValue, ) = getLpValue();\\r\\n\\r\\n        uint cleanApr = usdtRewardPerYear * 1e18 / stakedValue;\\r\\n        uint feeOwner = 10;\\r\\n        uint aprCleanWithFee = cleanApr - (cleanApr * feeOwner / 100);\\r\\n\\r\\n        return (cleanApr,aprCleanWithFee);\\r\\n    }\\r\\n\\r\\n    function getRewardsPerSecond() private view returns (uint) {\\r\\n        (uint pendingRewardsNative, ) = getPendingRewards();\\r\\n        uint lastHarvest = poolInfo[0].lastRewardTime;\\r\\n\\r\\n        uint rewardsPerSecondinNative = pendingRewardsNative / (block.timestamp - lastHarvest);\\r\\n\\r\\n        return rewardsPerSecondinNative;\\r\\n    }\\r\\n\\r\\n    function getWethData() public view returns (uint) {\\r\\n        (, int price, , , ) = priceFeedNative.latestRoundData();\\r\\n        uint decimalsPriceFeed = priceFeedNative.decimals();\\r\\n        uint divisor = 10**decimalsPriceFeed;\\r\\n        uint wethUsdtPrice = (uint(price) * 1e18) / divisor;\\r\\n        return wethUsdtPrice;\\r\\n    }\\r\\n\\r\\n    function getLpValue() public view returns (uint, uint) {\\r\\n        address lpToken = strategy.want();\\r\\n\\r\\n        uint lpTokenPriceUsdt = LPToken(lpToken).get_virtual_price();\\r\\n\\r\\n        uint lpFromStrat = strategy.balanceOf();\\r\\n        uint usdtStakedValue = (lpFromStrat * lpTokenPriceUsdt) / 1e18;\\r\\n\\r\\n        return (usdtStakedValue, lpTokenPriceUsdt);\\r\\n    }\\r\\n\\r\\n    function getYelApr(uint stakedAmount, uint lpTokenPriceUsdt, uint cleanApr, address _unirouter, uint _nativeUsdtPrice) private view returns (uint) {\\r\\n        uint buyPressureUsdt = ((stakedAmount * lpTokenPriceUsdt) / 1e18 * cleanApr) / 1e18;\\r\\n        address[] memory rewardsToNativeToYelRoute = strategy.outputToNativeToYel();\\r\\n        address[] memory yelToNative = new address[](2);\\r\\n        yelToNative[0] = rewardsToNativeToYelRoute[2];\\r\\n        yelToNative[1] = rewardsToNativeToYelRoute[1];\\r\\n      \\r\\n        uint[] memory yelPriceInNative = AggregatorV3Interface(_unirouter).getAmountsOut(1*1e18, yelToNative);\\r\\n  \\r\\n        uint yelInUsdtNow = (yelPriceInNative[1] * _nativeUsdtPrice) / 1e18;\\r\\n     \\r\\n        uint preassureInNative = (buyPressureUsdt * 1e18) / _nativeUsdtPrice;\\r\\n        address[] memory nativeToYel = new address[](2);\\r\\n        nativeToYel[0] = rewardsToNativeToYelRoute[1];\\r\\n        nativeToYel[1] = rewardsToNativeToYelRoute[2];\\r\\n        uint[] memory yelPressureInNative = AggregatorV3Interface(_unirouter).getAmountsOut(preassureInNative, nativeToYel);\\r\\n\\r\\n        uint afterYelPriceUsdt = (buyPressureUsdt * 1e18) / yelPressureInNative[1];\\r\\n        uint yelApr = ((afterYelPriceUsdt - yelInUsdtNow) * 1e18 / yelInUsdtNow);\\r\\n\\r\\n        return yelApr;\\r\\n    }\\r\\n\\r\\n    function wholeApr(uint _cleanApr, uint _yelApr) private pure returns (uint) {\\r\\n        uint feeOwner = 10;\\r\\n        uint allAprs = _cleanApr + _yelApr;\\r\\n        uint finalApr = allAprs - (allAprs / feeOwner);\\r\\n        return finalApr;\\r\\n    }\\r\\n\\r\\n    // View function for ZAP contract \\r\\n    function getUserInfo(uint256 _pid, address _user) public view returns (UserInfo memory) {\\r\\n        return userInfo[_pid][_user];\\r\\n    }\\r\\n\\r\\n    // View function for ZAP contract \\r\\n    function getUserAmount(uint256 _pid, address _user) public view returns (uint256) {\\r\\n        return userInfo[_pid][_user].amount;\\r\\n    }\\r\\n\\r\\n    // Update reward variables of the given pool to be up-to-date.\\r\\n    function updatePool(uint256 _pid) public {\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        if (block.timestamp <= pool.lastRewardTime) {\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        if (pool.stakingTokenTotalAmount == 0) {\\r\\n            pool.lastRewardTime = uint32(block.timestamp);\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256 yelReward = strategy.yelRewards();\\r\\n\\r\\n        pool.accYelPerShare += yelReward * DIVISOR / pool.stakingTokenTotalAmount;\\r\\n        pool.lastRewardTime = uint32(block.timestamp);\\r\\n    }\\r\\n\\r\\n    // Deposit staking tokens for YEL allocation.\\r\\n    function deposit(uint256 _pid, uint256 _amount, address _depositor) external {\\r\\n        require(msg.sender == zap, 'Yeller: access only by zap');\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][_depositor];\\r\\n        updatePool(_pid);\\r\\n\\r\\n        if (user.amount > 0) {\\r\\n            uint256 pending =\\r\\n                user.amount * pool.accYelPerShare / DIVISOR - user.rewardDebt + user.remainingYelTokenReward;\\r\\n            user.remainingYelTokenReward = safeRewardTransfer(_depositor, pending);\\r\\n        }\\r\\n\\r\\n        pool.stakingToken.safeTransferFrom(\\r\\n            address(msg.sender),\\r\\n            address(this),\\r\\n            _amount\\r\\n        );\\r\\n\\r\\n        user.amount += _amount;\\r\\n        pool.stakingTokenTotalAmount += _amount;\\r\\n        user.rewardDebt = user.amount * pool.accYelPerShare / DIVISOR;\\r\\n\\r\\n        emit Deposit(msg.sender, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Withdraw staked tokens.\\r\\n    function withdraw(uint256 _pid, uint256 _amount) external {\\r\\n        require(msg.sender == zap, 'Yeller: access only by zap');\\r\\n\\r\\n        PoolInfo storage pool = poolInfo[_pid];\\r\\n        UserInfo storage user = userInfo[_pid][tx.origin];\\r\\n        require(user.amount >= _amount, \\\"You do not have enough tokens to complete this operation\\\");\\r\\n        strategy.beforeDeposit();\\r\\n        updatePool(_pid);\\r\\n        uint256 pending = user.amount * pool.accYelPerShare / DIVISOR - user.rewardDebt + user.remainingYelTokenReward;\\r\\n\\r\\n        user.remainingYelTokenReward = safeRewardTransfer(tx.origin, pending);\\r\\n        user.amount -= _amount;\\r\\n        pool.stakingTokenTotalAmount -= _amount;\\r\\n        user.rewardDebt = user.amount * pool.accYelPerShare / DIVISOR;\\r\\n\\r\\n        pool.stakingToken.safeTransfer(zap, _amount);\\r\\n\\r\\n        emit Withdraw(tx.origin, _pid, _amount);\\r\\n    }\\r\\n\\r\\n    // Safe YEL transfer function. Just in case if the pool does not have enough YEL token,\\r\\n    // The function returns the amount which is owed to the user\\r\\n    function safeRewardTransfer(address _to, uint256 _amount) internal returns(uint256) {\\r\\n        uint256 yelTokenBalance = yel.balanceOf(address(this));\\r\\n        if (_amount > yelTokenBalance) {\\r\\n            yel.safeTransfer(_to, yelTokenBalance);\\r\\n            return _amount - yelTokenBalance;\\r\\n        }\\r\\n        yel.safeTransfer(_to, _amount);\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function getBalancesInLp() public view returns(uint256[2] memory){\\r\\n        address lpToken = strategy.want();\\r\\n        uint[2] memory balances = LPToken(lpToken).get_balances();\\r\\n\\r\\n        return balances;\\r\\n    }\\r\\n\\r\\n    function changeStrat(address _newStrat) external onlyOwner {\\r\\n        strategy = IStrategyCommonChefLP(_newStrat);\\r\\n    }\\r\\n\\r\\n    function changeZap(address _newZap) external onlyOwner {\\r\\n        zap = _newZap;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_yel\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedNative\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_stakingToken\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrat\",\"type\":\"address\"}],\"name\":\"changeStrat\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newZap\",\"type\":\"address\"}],\"name\":\"changeZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_depositor\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalancesInLp\",\"outputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFullApr\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLpValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingYelTokenReward\",\"type\":\"uint256\"}],\"internalType\":\"struct convexDFYeller.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWethData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingYel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingTokenTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accYelPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastRewardTime\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"contract IStrategyCommonChefLP\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingYelTokenReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yel\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "convexDFYeller", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000007815bda662050d84718b988735218cffd32f75ea00000000000000000000000060072780a44d30d4c8852be8bd12aec5ff1253ff0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000009df4c7c68a2052b14bd5f4f15f8321fdce855f5d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}