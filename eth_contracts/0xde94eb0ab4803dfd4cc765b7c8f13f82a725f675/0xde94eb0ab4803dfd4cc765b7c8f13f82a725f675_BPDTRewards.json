{"SourceCode": "/**\r\n\r\nThis is a contract for a BPDTrewards. Not a token address\r\n\r\n:::::::::      :::     :::::::::  :::   ::: :::::::::  :::::::::: :::::::::  ::::::::::      :::::::::  :::::::::: :::    ::: \r\n:+:    :+:   :+: :+:   :+:    :+: :+:   :+: :+:    :+: :+:        :+:    :+: :+:             :+:    :+: :+:        :+:    :+: \r\n+:+    +:+  +:+   +:+  +:+    +:+  +:+ +:+  +:+    +:+ +:+        +:+    +:+ +:+             +:+    +:+ +:+         +:+  +:+  \r\n+#++:++#+  +#++:++#++: +#++:++#+    +#++:   +#++:++#+  +#++:++#   +#++:++#+  +#++:++#        +#+    +:+ +#++:++#     +#++:+   \r\n+#+    +#+ +#+     +#+ +#+    +#+    +#+    +#+        +#+        +#+        +#+             +#+    +#+ +#+         +#+  +#+  \r\n#+#    #+# #+#     #+# #+#    #+#    #+#    #+#        #+#        #+#        #+#             #+#    #+# #+#        #+#    #+# \r\n#########  ###     ### #########     ###    ###        ########## ###        ##########      #########  ########## ###    ### \r\n\r\n                                                                                                                                                                                         \r\nDapp : https://babypepedex.xyz/#/trade\r\nWebsite : https://babypepedex.vip\r\nTwitter : https://twitter.com/babypepedex\r\nTG : https://t.me/BABYPEPEDEX\r\nWhitepaper : https://docs.babypepedex.vip/babypepe-dex/babypepe-dex-introduction\r\n\r\nThe first Pepe leveraged exchange\r\nMore tools to support Pepe coming soon\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.21;\r\n\r\ncontract BPDTRewards {\r\n    IERC20 public immutable stakingToken;\r\n    IERC20 public immutable rewardToken;\r\n\r\n    mapping(address => uint) public balanceOf;\r\n    uint public totalSupply;\r\n\r\n    uint private constant MULTIPLIER = 1e18;\r\n    uint private rewardIndex;\r\n    mapping(address => uint) private rewardIndexOf;\r\n    mapping(address => uint) private earned;\r\n\r\n    constructor(address _stakingToken, address _rewardToken) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardToken = IERC20(_rewardToken);\r\n    }\r\n\r\n    function updateRewardIndex(uint reward) external {\r\n        rewardToken.transferFrom(msg.sender, address(this), reward);\r\n        rewardIndex += (reward * MULTIPLIER) / totalSupply;\r\n    }\r\n\r\n    function _calculateRewards(address account) private view returns (uint) {\r\n        uint shares = balanceOf[account];\r\n        return (shares * (rewardIndex - rewardIndexOf[account])) / MULTIPLIER;\r\n    }\r\n\r\n    function calculateRewardsEarned(address account) external view returns (uint) {\r\n        return earned[account] + _calculateRewards(account);\r\n    }\r\n\r\n    function _updateRewards(address account) private {\r\n        earned[account] += _calculateRewards(account);\r\n        rewardIndexOf[account] = rewardIndex;\r\n    }\r\n\r\n    function stake(uint amount) external {\r\n        _updateRewards(msg.sender);\r\n\r\n        balanceOf[msg.sender] += amount;\r\n        totalSupply += amount;\r\n\r\n        stakingToken.transferFrom(msg.sender, address(this), amount);\r\n    }\r\n\r\n    function unstake(uint amount) external {\r\n        _updateRewards(msg.sender);\r\n\r\n        balanceOf[msg.sender] -= amount;\r\n        totalSupply -= amount;\r\n\r\n        stakingToken.transfer(msg.sender, amount);\r\n    }\r\n\r\n    function claim() external returns (uint) {\r\n        _updateRewards(msg.sender);\r\n\r\n        uint reward = earned[msg.sender];\r\n        if (reward > 0) {\r\n            earned[msg.sender] = 0;\r\n            rewardToken.transfer(msg.sender, reward);\r\n        }\r\n\r\n        return reward;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address account) external view returns (uint);\r\n\r\n    function transfer(address recipient, uint amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"updateRewardIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BPDTRewards", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000316a0e125ee3752b819bd151e823a07727b7e1d5000000000000000000000000316a0e125ee3752b819bd151e823a07727b7e1d5", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4a6c368e450aea7aa77ce562a5547d5c853369c8410baba5af75e112ac009533"}