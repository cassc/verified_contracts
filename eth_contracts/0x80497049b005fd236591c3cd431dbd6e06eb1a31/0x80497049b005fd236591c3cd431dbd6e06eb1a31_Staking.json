{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// EIP-2612 is Final as of 2022-11-01. This file is deprecated.\\n\\nimport \\\"./IERC20Permit.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\n     * 0 before setting it to a non-zero value.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/rewards/interfaces/IFarmingRange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\r\\n\\r\\ninterface IFarmingRange {\\r\\n    /**\\r\\n     * @notice Info of each user.\\r\\n     * @param amount How many Staking tokens the user has provided.\\r\\n     * @param rewardDebt We do some fancy math here. Basically, any point in time, the amount of reward\\r\\n     *  entitled to a user but is pending to be distributed is:\\r\\n     *\\r\\n     *    pending reward = (user.amount * pool.accRewardPerShare) - user.rewardDebt\\r\\n     *\\r\\n     *  Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\\r\\n     *    1. The pool's `accRewardPerShare` (and `lastRewardBlock`) gets updated.\\r\\n     *    2. User receives the pending reward sent to his/her address.\\r\\n     *    3. User's `amount` gets updated.\\r\\n     *    4. User's `rewardDebt` gets updated.\\r\\n     *\\r\\n     * from: https://github.com/jazz-defi/contracts/blob/master/MasterChefV2.sol\\r\\n     */\\r\\n    struct UserInfo {\\r\\n        uint256 amount;\\r\\n        uint256 rewardDebt;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Info of each reward distribution campaign.\\r\\n     * @param stakingToken address of Staking token contract.\\r\\n     * @param rewardToken address of Reward token contract\\r\\n     * @param startBlock start block of the campaign\\r\\n     * @param lastRewardBlock last block number that Reward Token distribution occurs.\\r\\n     * @param accRewardPerShare accumulated Reward Token per share, times 1e20.\\r\\n     * @param totalStaked total staked amount each campaign's stake token, typically,\\r\\n     * @param totalRewards total amount of reward to be distributed until the end of the last phase\\r\\n     *\\r\\n     * @dev each campaign has the same stake token, so no need to track it separetely\\r\\n     */\\r\\n    struct CampaignInfo {\\r\\n        IERC20 stakingToken;\\r\\n        IERC20 rewardToken;\\r\\n        uint256 startBlock;\\r\\n        uint256 lastRewardBlock;\\r\\n        uint256 accRewardPerShare;\\r\\n        uint256 totalStaked;\\r\\n        uint256 totalRewards;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Info about a reward-phase\\r\\n     * @param endBlock block number of the end of the phase\\r\\n     * @param rewardPerBlock amount of reward to be distributed per block in this phase\\r\\n     */\\r\\n    struct RewardInfo {\\r\\n        uint256 endBlock;\\r\\n        uint256 rewardPerBlock;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each deposit\\r\\n     * @param user address that deposit its funds\\r\\n     * @param amount amount deposited\\r\\n     * @param campaign campaingId on which the user has deposited funds\\r\\n     */\\r\\n    event Deposit(address indexed user, uint256 amount, uint256 campaign);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each withdraw\\r\\n     * @param user address that withdrawn its funds\\r\\n     * @param amount amount withdrawn\\r\\n     * @param campaign campaingId on which the user has withdrawn funds\\r\\n     */\\r\\n    event Withdraw(address indexed user, uint256 amount, uint256 campaign);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each emergency withdraw\\r\\n     * @param user address that emergency-withdrawn its funds\\r\\n     * @param amount amount emergency-withdrawn\\r\\n     * @param campaign campaingId on which the user has emergency-withdrawn funds\\r\\n     */\\r\\n    event EmergencyWithdraw(address indexed user, uint256 amount, uint256 campaign);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each campaign added\\r\\n     * @param campaignID new campaign id\\r\\n     * @param stakingToken token address to be staked in this campaign\\r\\n     * @param rewardToken token address of the rewards in this campaign\\r\\n     * @param startBlock starting block of this campaign\\r\\n     */\\r\\n    event AddCampaignInfo(uint256 indexed campaignID, IERC20 stakingToken, IERC20 rewardToken, uint256 startBlock);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each phase of reward added\\r\\n     * @param campaignID campaign id on which rewards were added\\r\\n     * @param phase number of the new phase added (latest at the moment of add)\\r\\n     * @param endBlock number of the block that the phase stops (phase starts at the endblock of the previous phase's\\r\\n     * endblock, and if it's the phase 0, it start at the startBlock of the campaign struct)\\r\\n     * @param rewardPerBlock amount of reward distributed per block in this phase\\r\\n     */\\r\\n    event AddRewardInfo(uint256 indexed campaignID, uint256 indexed phase, uint256 endBlock, uint256 rewardPerBlock);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when a reward phase is updated\\r\\n     * @param campaignID campaign id on which the rewards-phase is updated\\r\\n     * @param phase id of phase updated\\r\\n     * @param endBlock new endblock of the phase\\r\\n     * @param rewardPerBlock new rewardPerBlock of the phase\\r\\n     */\\r\\n    event UpdateRewardInfo(uint256 indexed campaignID, uint256 indexed phase, uint256 endBlock, uint256 rewardPerBlock);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when a reward phase is removed\\r\\n     * @param campaignID campaign id on which the rewards-phase is removed\\r\\n     * @param phase id of phase removed (only the latest phase can be removed)\\r\\n     */\\r\\n    event RemoveRewardInfo(uint256 indexed campaignID, uint256 indexed phase);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when the rewardInfoLimit is updated\\r\\n     * @param rewardInfoLimit new max phase amount per campaign\\r\\n     */\\r\\n    event SetRewardInfoLimit(uint256 rewardInfoLimit);\\r\\n\\r\\n    /**\\r\\n     * @notice set new reward info limit, defining how many phases are allowed\\r\\n     * @param _updatedRewardInfoLimit new reward info limit\\r\\n     */\\r\\n    function setRewardInfoLimit(uint256 _updatedRewardInfoLimit) external;\\r\\n\\r\\n    /**\\r\\n     * @notice reward campaign, one campaign represent a pair of staking and reward token,\\r\\n     * last reward Block and acc reward Per Share\\r\\n     * @param _stakingToken staking token address\\r\\n     * @param _rewardToken reward token address\\r\\n     * @param _startBlock block number when the campaign will start\\r\\n     */\\r\\n    function addCampaignInfo(IERC20 _stakingToken, IERC20 _rewardToken, uint256 _startBlock) external;\\r\\n\\r\\n    /**\\r\\n     * @notice add a new reward info, when a new reward info is added, the reward\\r\\n     * & its end block will be extended by the newly pushed reward info.\\r\\n     * @param _campaignID id of the campaign\\r\\n     * @param _endBlock end block of this reward info\\r\\n     * @param _rewardPerBlock reward per block to distribute until the end\\r\\n     */\\r\\n    function addRewardInfo(uint256 _campaignID, uint256 _endBlock, uint256 _rewardPerBlock) external;\\r\\n\\r\\n    /**\\r\\n     * @notice add multiple reward Info into a campaign in one tx.\\r\\n     * @param _campaignID id of the campaign\\r\\n     * @param _endBlock array of end blocks\\r\\n     * @param _rewardPerBlock array of reward per block\\r\\n     */\\r\\n    function addRewardInfoMultiple(\\r\\n        uint256 _campaignID,\\r\\n        uint256[] calldata _endBlock,\\r\\n        uint256[] calldata _rewardPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice update one campaign reward info for a specified range index.\\r\\n     * @param _campaignID id of the campaign\\r\\n     * @param _rewardIndex index of the reward info\\r\\n     * @param _endBlock end block of this reward info\\r\\n     * @param _rewardPerBlock reward per block to distribute until the end\\r\\n     */\\r\\n    function updateRewardInfo(\\r\\n        uint256 _campaignID,\\r\\n        uint256 _rewardIndex,\\r\\n        uint256 _endBlock,\\r\\n        uint256 _rewardPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice update multiple campaign rewards info for all range index.\\r\\n     * @param _campaignID id of the campaign\\r\\n     * @param _rewardIndex array of reward info index\\r\\n     * @param _endBlock array of end block\\r\\n     * @param _rewardPerBlock array of rewardPerBlock\\r\\n     */\\r\\n    function updateRewardMultiple(\\r\\n        uint256 _campaignID,\\r\\n        uint256[] memory _rewardIndex,\\r\\n        uint256[] memory _endBlock,\\r\\n        uint256[] memory _rewardPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice update multiple campaigns and rewards info for all range index.\\r\\n     * @param _campaignID array of campaign id\\r\\n     * @param _rewardIndex multi dimensional array of reward info index\\r\\n     * @param _endBlock multi dimensional array of end block\\r\\n     * @param _rewardPerBlock multi dimensional array of rewardPerBlock\\r\\n     */\\r\\n    function updateCampaignsRewards(\\r\\n        uint256[] calldata _campaignID,\\r\\n        uint256[][] calldata _rewardIndex,\\r\\n        uint256[][] calldata _endBlock,\\r\\n        uint256[][] calldata _rewardPerBlock\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice remove last reward info for specified campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     */\\r\\n    function removeLastRewardInfo(uint256 _campaignID) external;\\r\\n\\r\\n    /**\\r\\n     * @notice return the entries amount of reward info for one campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     * @return reward info quantity\\r\\n     */\\r\\n    function rewardInfoLen(uint256 _campaignID) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice return the number of campaigns.\\r\\n     * @return campaign quantity\\r\\n     */\\r\\n    function campaignInfoLen() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice return the end block of the current reward info for a given campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     * @return reward info end block number\\r\\n     */\\r\\n    function currentEndBlock(uint256 _campaignID) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice return the reward per block of the current reward info for a given campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     * @return current reward per block\\r\\n     */\\r\\n    function currentRewardPerBlock(uint256 _campaignID) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Return reward multiplier over the given _from to _to block.\\r\\n     * Reward multiplier is the amount of blocks between from and to\\r\\n     * @param _from start block number\\r\\n     * @param _to end block number\\r\\n     * @param _endBlock end block number of the reward info\\r\\n     * @return block distance\\r\\n     */\\r\\n    function getMultiplier(uint256 _from, uint256 _to, uint256 _endBlock) external returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice View function to retrieve pending Reward.\\r\\n     * @param _campaignID pending reward of campaign id\\r\\n     * @param _user address to retrieve pending reward\\r\\n     * @return current pending reward\\r\\n     */\\r\\n    function pendingReward(uint256 _campaignID, address _user) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables of the given campaign to be up-to-date.\\r\\n     * @param _campaignID campaign id\\r\\n     */\\r\\n    function updateCampaign(uint256 _campaignID) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Update reward variables for all campaigns. gas spending is HIGH in this method call, BE CAREFUL.\\r\\n     */\\r\\n    function massUpdateCampaigns() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit staking token in a campaign.\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _amount amount to deposit\\r\\n     */\\r\\n    function deposit(uint256 _campaignID, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Deposit staking token in a campaign with the EIP-2612 signature off chain\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _amount amount to deposit\\r\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @param _v The v component of the permit signature.\\r\\n     * @param _r The r component of the permit signature.\\r\\n     * @param _s The s component of the permit signature.\\r\\n     */\\r\\n    function depositWithPermit(\\r\\n        uint256 _campaignID,\\r\\n        uint256 _amount,\\r\\n        bool _approveMax,\\r\\n        uint256 _deadline,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw staking token in a campaign. Also withdraw the current pending reward\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _amount amount to withdraw\\r\\n     */\\r\\n    function withdraw(uint256 _campaignID, uint256 _amount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest campaigns, will claim rewards token of every campaign ids in the array\\r\\n     * @param _campaignIDs array of campaign id\\r\\n     */\\r\\n    function harvest(uint256[] calldata _campaignIDs) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\r\\n     * @param _campaignID campaign id\\r\\n     */\\r\\n    function emergencyWithdraw(uint256 _campaignID) external;\\r\\n\\r\\n    /**\\r\\n     * @notice get Reward info for a campaign ID and index, that is a set of {endBlock, rewardPerBlock}\\r\\n     *  indexed by campaign ID\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _rewardIndex index of the reward info\\r\\n     * @return endBlock_ end block of this reward info\\r\\n     * @return rewardPerBlock_ reward per block to distribute\\r\\n     */\\r\\n    function campaignRewardInfo(\\r\\n        uint256 _campaignID,\\r\\n        uint256 _rewardIndex\\r\\n    ) external view returns (uint256 endBlock_, uint256 rewardPerBlock_);\\r\\n\\r\\n    /**\\r\\n     * @notice get a Campaign Reward info for a campaign ID\\r\\n     * @param _campaignID campaign id\\r\\n     * @return all params from CampaignInfo struct\\r\\n     */\\r\\n    function campaignInfo(\\r\\n        uint256 _campaignID\\r\\n    ) external view returns (IERC20, IERC20, uint256, uint256, uint256, uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get a User Reward info for a campaign ID and user address\\r\\n     * @param _campaignID campaign id\\r\\n     * @param _user user address\\r\\n     * @return all params from UserInfo struct\\r\\n     */\\r\\n    function userInfo(uint256 _campaignID, address _user) external view returns (uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice how many reward phases can be set for a campaign\\r\\n     * @return rewards phases size limit\\r\\n     */\\r\\n    function rewardInfoLimit() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get reward Manager address holding rewards to distribute\\r\\n     * @return address of reward manager\\r\\n     */\\r\\n    function rewardManager() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/rewards/interfaces/IStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// interfaces\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./IFarmingRange.sol\\\";\\r\\n\\r\\ninterface IStaking is IERC20 {\\r\\n    /**\\r\\n     * @notice info of each user\\r\\n     * @param shares shares owned in the staking\\r\\n     * @param lastBlockUpdate last block the user called deposit or withdraw\\r\\n     */\\r\\n    struct UserInfo {\\r\\n        uint256 shares;\\r\\n        uint256 lastBlockUpdate;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each deposit\\r\\n     * @param from address that deposit its funds\\r\\n     * @param depositAmount amount deposited\\r\\n     * @param shares shares corresponding to the token amount deposited\\r\\n     */\\r\\n    event Deposit(address indexed from, uint256 depositAmount, uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted at each withdraw\\r\\n     * @param from address that calls the withdraw function, and of which the shares are withdrawn\\r\\n     * @param to address that receives the funds\\r\\n     * @param tokenReceived amount of token received by to\\r\\n     * @param shares shares corresponding to the token amount withdrawn\\r\\n     */\\r\\n    event Withdraw(address indexed from, address indexed to, uint256 tokenReceived, uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @notice emitted when calling emergencyWithdraw\\r\\n     * @param from address that calls the withdraw function, and of which the shares are withdrawn\\r\\n     * @param to address that receives the funds\\r\\n     * @param tokenReceived amount of token received by to\\r\\n     * @param shares shares corresponding to the token amount withdrawn\\r\\n     */\\r\\n    event EmergencyWithdraw(address indexed from, address indexed to, uint256 tokenReceived, uint256 shares);\\r\\n\\r\\n    /**\\r\\n     * @notice Initialize staking connection with farming\\r\\n     * Mint one token of stSDEX and then deposit in the staking farming pool\\r\\n     * This contract should be the only participant of the staking farming pool\\r\\n     */\\r\\n    function initializeFarming() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Send SDEX to get shares in the staking pool\\r\\n     * @param _depositAmount The amount of SDEX to send\\r\\n     */\\r\\n    function deposit(uint256 _depositAmount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Send SDEX to get shares in the staking pool with the EIP-2612 signature off chain\\r\\n     * @param _depositAmount The amount of SDEX to send\\r\\n     * @param _approveMax Whether or not the approval amount in the signature is for liquidity or uint(-1).\\r\\n     * @param _deadline Unix timestamp after which the transaction will revert.\\r\\n     * @param _v The v component of the permit signature.\\r\\n     * @param _r The r component of the permit signature.\\r\\n     * @param _s The s component of the permit signature.\\r\\n     */\\r\\n    function depositWithPermit(\\r\\n        uint256 _depositAmount,\\r\\n        bool _approveMax,\\r\\n        uint256 _deadline,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest and withdraw SDEX for the amount of shares defined\\r\\n     * @param _to The address who will receive SDEX\\r\\n     * @param _sharesAmount The amount of shares to use\\r\\n     */\\r\\n    function withdraw(address _to, uint256 _sharesAmount) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Withdraw SDEX for all shares of the sender, will not harvest before. Only use this function in emergency\\r\\n     *         WARNING: This function may result in a lower amount of SDEX being withdrawn because it bypasses potential\\r\\n     *         SDEX earnings from farming.\\r\\n     *         Only use this function if standard withdrawal does not work for unknown reasons.\\r\\n     * @param _to The address who will receive SDEX\\r\\n     */\\r\\n    function emergencyWithdraw(address _to) external;\\r\\n\\r\\n    /**\\r\\n     * @notice Harvest the farming pool for the staking, will increase the SDEX\\r\\n     */\\r\\n    function harvestFarming() external;\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate shares qty for an amount of sdex tokens\\r\\n     * @param _tokens user qty of sdex to be converted to shares\\r\\n     * @return shares_ shares equivalent to the token amount. _shares <= totalShares\\r\\n     */\\r\\n    function tokensToShares(uint256 _tokens) external view returns (uint256 shares_);\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate shares values in sdex tokens\\r\\n     * @param _shares amount of shares. _shares <= totalShares\\r\\n     * @return tokens_ qty of sdex token equivalent to the _shares. tokens_ <= _currentBalance\\r\\n     */\\r\\n    function sharesToTokens(uint256 _shares) external view returns (uint256 tokens_);\\r\\n\\r\\n    /**\\r\\n     * @notice Campaign id for staking in the farming contract\\r\\n     * @return ID of the campaign\\r\\n     */\\r\\n    function CAMPAIGN_ID() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get farming initialized status\\r\\n     * @return boolean inititalized or not\\r\\n     */\\r\\n    function farmingInitialized() external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @notice get smardex Token contract address\\r\\n     * @return smardex contract (address or type for Solidity)\\r\\n     */\\r\\n    function smardexToken() external view returns (IERC20);\\r\\n\\r\\n    /**\\r\\n     * @notice get farming contract address\\r\\n     * @return farming contract (address or type for Solidity)\\r\\n     */\\r\\n    function farming() external view returns (IFarmingRange);\\r\\n\\r\\n    /**\\r\\n     * @notice get user info for staking status\\r\\n     * @param _user user address\\r\\n     * @return shares amount for user\\r\\n     * @return lastBlockUpdate last block the user called deposit or withdraw\\r\\n     */\\r\\n    function userInfo(address _user) external view returns (uint256, uint256);\\r\\n\\r\\n    /**\\r\\n     * @notice get total shares in the staking\\r\\n     * @return total shares amount\\r\\n     */\\r\\n    function totalShares() external view returns (uint256);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/rewards/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity 0.8.17;\\r\\n\\r\\n// libraries\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\n// interfaces\\r\\nimport \\\"./interfaces/IStaking.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title Staking\\r\\n * @notice Implementation of an APY staking pool. Users can deposit SDEX for a share in the pool. New shares depend of\\r\\n * current shares supply and SDEX in the pool. Pool will receive SDEX rewards fees by external transfer from admin or\\r\\n * contract but also from farming pool. Each deposit/withdraw will harvest the user funds in the farming pool as well.\\r\\n */\\r\\ncontract Staking is IStaking, ERC20 {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    uint256 public constant CAMPAIGN_ID = 0;\\r\\n    uint256 internal constant SHARES_FACTOR = 1e18;\\r\\n    uint256 public constant MINIMUM_SHARES = 10 ** 3;\\r\\n\\r\\n    IERC20 public immutable smardexToken;\\r\\n    IFarmingRange public immutable farming;\\r\\n\\r\\n    mapping(address => UserInfo) public userInfo;\\r\\n    uint256 public totalShares;\\r\\n    bool public farmingInitialized = false;\\r\\n\\r\\n    modifier isFarmingInitialized() {\\r\\n        require(farmingInitialized == true, \\\"Staking::isFarmingInitialized::Farming campaign not initialized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier checkUserBlock() {\\r\\n        require(\\r\\n            userInfo[msg.sender].lastBlockUpdate < block.number,\\r\\n            \\\"Staking::checkUserBlock::User already called deposit or withdraw this block\\\"\\r\\n        );\\r\\n        userInfo[msg.sender].lastBlockUpdate = block.number;\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(IERC20 _smardexToken, IFarmingRange _farming) ERC20(\\\"Staked SmarDex Token\\\", \\\"stSDEX\\\") {\\r\\n        require(address(_smardexToken) != address(0), \\\"Staking::constructor::Smardex token is not defined\\\");\\r\\n        require(address(_farming) != address(0), \\\"Staking::constructor::Farming is not defined\\\");\\r\\n        smardexToken = _smardexToken;\\r\\n        farming = _farming;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function initializeFarming() external {\\r\\n        require(farmingInitialized == false, \\\"Staking::initializeFarming::Farming campaign already initialized\\\");\\r\\n        _approve(address(this), address(farming), 1 wei);\\r\\n        _mint(address(this), 1 wei);\\r\\n        farming.deposit(CAMPAIGN_ID, 1 wei);\\r\\n\\r\\n        farmingInitialized = true;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function deposit(uint256 _depositAmount) public isFarmingInitialized checkUserBlock {\\r\\n        require(_depositAmount != 0, \\\"Staking::deposit::can't deposit zero token\\\");\\r\\n\\r\\n        harvestFarming();\\r\\n\\r\\n        uint256 _currentBalance = smardexToken.balanceOf(address(this));\\r\\n        uint256 _newShares = _tokensToShares(_depositAmount, _currentBalance);\\r\\n\\r\\n        uint256 _userNewShares;\\r\\n        if (totalShares == 0) {\\r\\n            _userNewShares = _newShares - MINIMUM_SHARES;\\r\\n        } else {\\r\\n            _userNewShares = _newShares;\\r\\n        }\\r\\n        require(_userNewShares != 0, \\\"Staking::deposit::no new shares received\\\");\\r\\n        userInfo[msg.sender].shares += _userNewShares;\\r\\n        totalShares += _newShares;\\r\\n\\r\\n        smardexToken.safeTransferFrom(msg.sender, address(this), _depositAmount);\\r\\n\\r\\n        emit Deposit(msg.sender, _depositAmount, _userNewShares);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function depositWithPermit(\\r\\n        uint256 _depositAmount,\\r\\n        bool _approveMax,\\r\\n        uint256 _deadline,\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s\\r\\n    ) external {\\r\\n        SafeERC20.safePermit(\\r\\n            IERC20Permit(address(smardexToken)),\\r\\n            msg.sender,\\r\\n            address(this),\\r\\n            _approveMax ? type(uint256).max : _depositAmount,\\r\\n            _deadline,\\r\\n            _v,\\r\\n            _r,\\r\\n            _s\\r\\n        );\\r\\n\\r\\n        deposit(_depositAmount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function withdraw(address _to, uint256 _sharesAmount) external isFarmingInitialized checkUserBlock {\\r\\n        require(\\r\\n            _sharesAmount != 0 && userInfo[msg.sender].shares >= _sharesAmount,\\r\\n            \\\"Staking::withdraw::can't withdraw more than user shares or zero\\\"\\r\\n        );\\r\\n\\r\\n        harvestFarming();\\r\\n\\r\\n        uint256 _currentBalance = smardexToken.balanceOf(address(this));\\r\\n        uint256 _tokensToWithdraw = _sharesToTokens(_sharesAmount, _currentBalance);\\r\\n\\r\\n        userInfo[msg.sender].shares -= _sharesAmount;\\r\\n        totalShares -= _sharesAmount;\\r\\n        smardexToken.safeTransfer(_to, _tokensToWithdraw);\\r\\n\\r\\n        emit Withdraw(msg.sender, _to, _tokensToWithdraw, _sharesAmount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function emergencyWithdraw(address _to) external isFarmingInitialized checkUserBlock {\\r\\n        require(userInfo[msg.sender].shares != 0, \\\"Staking::emergencyWithdraw::no shares to withdraw\\\");\\r\\n\\r\\n        uint256 _sharesAmount = userInfo[msg.sender].shares;\\r\\n        uint256 _currentBalance = smardexToken.balanceOf(address(this));\\r\\n        uint256 _tokensToWithdraw = _sharesToTokens(_sharesAmount, _currentBalance);\\r\\n\\r\\n        totalShares -= _sharesAmount;\\r\\n        userInfo[msg.sender].shares = 0;\\r\\n        smardexToken.safeTransfer(_to, _tokensToWithdraw);\\r\\n\\r\\n        emit EmergencyWithdraw(msg.sender, _to, _tokensToWithdraw, _sharesAmount);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function harvestFarming() public {\\r\\n        farming.withdraw(CAMPAIGN_ID, 0);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function tokensToShares(uint256 _tokens) external view returns (uint256 shares_) {\\r\\n        uint256 _currentBalance = smardexToken.balanceOf(address(this));\\r\\n        _currentBalance += farming.pendingReward(CAMPAIGN_ID, address(this));\\r\\n\\r\\n        shares_ = _tokensToShares(_tokens, _currentBalance);\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc IStaking\\r\\n    function sharesToTokens(uint256 _shares) external view returns (uint256 tokens_) {\\r\\n        uint256 _currentBalance = smardexToken.balanceOf(address(this));\\r\\n        _currentBalance += farming.pendingReward(CAMPAIGN_ID, address(this));\\r\\n\\r\\n        tokens_ = _sharesToTokens(_shares, _currentBalance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate shares qty for an amount of sdex tokens\\r\\n     * @param _tokens user qty of sdex to be converted to shares\\r\\n     * @param _currentBalance contract balance sdex. _tokens <= _currentBalance\\r\\n     * @return shares_ shares equivalent to the token amount. _shares <= totalShares\\r\\n     */\\r\\n    function _tokensToShares(uint256 _tokens, uint256 _currentBalance) internal view returns (uint256 shares_) {\\r\\n        shares_ = totalShares != 0 ? (_tokens * totalShares) / _currentBalance : _tokens * SHARES_FACTOR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculate shares values in sdex tokens\\r\\n     * @param _shares amount of shares. _shares <= totalShares\\r\\n     * @param _currentBalance contract balance in sdex\\r\\n     * @return tokens_ qty of sdex token equivalent to the _shares. tokens_ <= _currentBalance\\r\\n     */\\r\\n    function _sharesToTokens(uint256 _shares, uint256 _currentBalance) internal view returns (uint256 tokens_) {\\r\\n        tokens_ = totalShares != 0 ? (_shares * _currentBalance) / totalShares : _shares / SHARES_FACTOR;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\",\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_smardexToken\",\"type\":\"address\"},{\"internalType\":\"contract IFarmingRange\",\"name\":\"_farming\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenReceived\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAMPAIGN_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_SHARES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_approveMax\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"name\":\"depositWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farming\",\"outputs\":[{\"internalType\":\"contract IFarmingRange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmingInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeFarming\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_shares\",\"type\":\"uint256\"}],\"name\":\"sharesToTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokens_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"smardexToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokens\",\"type\":\"uint256\"}],\"name\":\"tokensToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBlockUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sharesAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Staking", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005de8ab7e27f6e7a1fff3e5b337584aa43961beef0000000000000000000000007d85c0905a6e1ab5837a0b57cd94a419d3a77523", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}