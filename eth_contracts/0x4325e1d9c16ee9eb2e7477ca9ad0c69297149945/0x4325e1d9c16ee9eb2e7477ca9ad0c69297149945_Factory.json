{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address who) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint256);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) external returns (bool);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\nabstract contract StandardToken is IERC20 {\r\n    mapping(address => uint256) balances;\r\n    mapping(address => mapping(address => uint256)) allowed;\r\n\r\n    function balanceOf(\r\n        address _owner\r\n    ) public view override returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function _transfer(address _from, address _to, uint256 _value) internal {\r\n        balances[_from] = balances[_from] - _value;\r\n        balances[_to] = balances[_to] + _value;\r\n        emit Transfer(_from, _to, _value);\r\n    }\r\n\r\n    function _transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) internal {\r\n        uint256 _allowance = allowed[_from][msg.sender];\r\n        allowed[_from][msg.sender] = _allowance - _value;\r\n        _transfer(_from, _to, _value);\r\n    }\r\n\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    ) public override returns (bool) {\r\n        // To change the approve amount you first have to reduce the addresses`\r\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\r\n        //  already 0 to mitigate the race condition described here:\r\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n        require(\r\n            (_value == 0) || (allowed[msg.sender][_spender] == 0),\r\n            \"approve on a non-zero allowance\"\r\n        );\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    function allowance(\r\n        address _owner,\r\n        address _spender\r\n    ) public view override returns (uint256 remaining) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n}\r\n\r\ncontract Asset is StandardToken {\r\n    string public name;\r\n    string public symbol;\r\n    uint256 public immutable totalSupply;\r\n    uint8 public constant decimals = 8;\r\n\r\n    constructor(string memory _symbol, string memory _name, uint256 _supply) {\r\n        symbol = _symbol;\r\n        name = _name;\r\n        totalSupply = _supply;\r\n        balances[msg.sender] = totalSupply;\r\n    }\r\n\r\n    function transfer(\r\n        address to,\r\n        uint256 value\r\n    ) public override returns (bool) {\r\n        _transfer(msg.sender, to, value);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) public override returns (bool) {\r\n        _transferFrom(from, to, value);\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Factory {\r\n    event FactoryConstructed(bytes code);\r\n\r\n    event AssetCreated(address indexed at, uint256 key);\r\n\r\n    mapping(address => uint256) public assets;\r\n    mapping(uint256 => address) public contracts;\r\n    address public immutable inscriber;\r\n\r\n    constructor(address _inscriber) {\r\n        inscriber = _inscriber;\r\n        bytes memory code = type(Asset).creationCode;\r\n        emit FactoryConstructed(code);\r\n    }\r\n\r\n    function deploy(\r\n        uint256 _id,\r\n        string memory _symbol,\r\n        string memory _name,\r\n        uint256 _supply\r\n    ) public returns (address) {\r\n        bytes memory args = abi.encodePacked(_id, _symbol, _name, _supply);\r\n        uint256 key = uint256(keccak256(args));\r\n        address old = contracts[key];\r\n        if (old != address(0)) {\r\n            return old;\r\n        }\r\n\r\n        Asset asset = new Asset{salt: bytes32(key)}(_symbol, _name, _supply);\r\n        asset.transfer(inscriber, asset.totalSupply());\r\n        address addr = address(asset);\r\n        assets[addr] = _id;\r\n        contracts[key] = addr;\r\n        emit AssetCreated(addr, key);\r\n        return addr;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inscriber\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"at\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"key\",\"type\":\"uint256\"}],\"name\":\"AssetCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"code\",\"type\":\"bytes\"}],\"name\":\"FactoryConstructed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"contracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"}],\"name\":\"deploy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inscriber\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Factory", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f779399939256355d9ac3c72851ce042229d33b9", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://aa29fc6ec962c33aef2495422a6aa73619ea45d29d7c403194bc848e25abda8b"}