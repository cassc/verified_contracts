{"SourceCode": "// SPDX-License-Identifier: MIT\r\n//\r\n// \ud83c\udf4c DegenMart \ud83c\udf4c\r\n// Working For Peanuts? Get The Bananas.\r\n//\r\n// TG: https://t.me/degenmartportal\r\n// Website: https://degenmart.lol\r\n//\r\npragma solidity 0.8.26;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IUniswapV2Factory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n\r\n    function WETH() external pure returns (address);\r\n    \r\n    function factory() external pure returns (address);\r\n\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract DegenMart is IERC20, Ownable {\r\n    string private constant _name = \"DegenMart\";\r\n    string private constant _symbol = \"DMT\";\r\n    uint8 private constant _decimals = 9;\r\n    uint256 private constant _totalSupply = 1000000000 * (10 ** _decimals);\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint32 private _tradeCount;\r\n\r\n    bool private _genericTransfer = false;\r\n\r\n    address payable private constant _devWallet = payable(0x39263136B3640070458f1050e483e322742F47f6);\r\n    uint256 private constant _taxSwapMin = _totalSupply / 400;\r\n    uint256 private constant _taxSwapMax = _totalSupply / 20;\r\n    bool private _taxToLp = true;\r\n\r\n    mapping (address => bool) private _noFees;\r\n\r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP;\r\n    mapping (address => bool) private _isLP;\r\n\r\n    bool private _tradingOpen;\r\n\r\n    bool private _inTaxSwap = false;\r\n    modifier lockTaxSwap { \r\n        _inTaxSwap = true; \r\n        _; \r\n        _inTaxSwap = false; \r\n    }\r\n\r\n    event GenericTransferChanged(bool useGenericTransfer);\r\n    event LogTransfer(bool success, bytes data);\r\n\r\n    constructor() {\r\n        _balances[owner()] = _totalSupply;\r\n        emit Transfer(address(0), owner(), _balances[owner()]);\r\n\r\n        _noFees[owner()] = true;\r\n        _noFees[address(this)] = true;\r\n        _noFees[_swapRouterAddress] = true;\r\n        _noFees[_devWallet] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external pure override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\r\n        }\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if (_allowances[address(this)][_swapRouterAddress] < _tokenAmount) {\r\n            _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), _swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP exists\");\r\n        require(!_tradingOpen, \"Trading is open\");\r\n        require(msg.value > 0 || address(this).balance > 0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)] > 0, \"No tokens in contract\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), _primarySwapRouter.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance);\r\n        _isLP[_primaryLP] = true;\r\n        _tradeCount = 0;\r\n        _tradingOpen = true;\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        _approveRouter(_tokenAmount);\r\n        _primarySwapRouter.addLiquidityETH{ value: _ethAmountWei } (address(this), _tokenAmount, 0, 0, owner(), block.timestamp);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n\r\n        if (!_genericTransfer) {\r\n            require(_checkTradingOpen(sender), \"Trading not open\");\r\n            if (!_inTaxSwap && _isLP[recipient]) {\r\n                _swapTaxAndLiquify();\r\n            }\r\n        }\r\n\r\n        uint256 taxAmount = _genericTransfer ? 0 : _calculateTax(sender, recipient, amount);\r\n        uint256 transferAmount = amount - taxAmount;\r\n        \r\n        _balances[sender] -= amount;\r\n        \r\n        if (taxAmount > 0) {\r\n            _balances[address(this)] += taxAmount;\r\n            _incrementTradeCount();\r\n        }\r\n        \r\n        _balances[recipient] += transferAmount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _checkTradingOpen(address sender) private view returns (bool) {\r\n        if (_tradingOpen || _noFees[sender]) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    function _incrementTradeCount() private {\r\n        if (_tradeCount <= 100001) {\r\n            _tradeCount += 1;\r\n        } \r\n    }\r\n\r\n    function _getTaxPercentages() private view returns (uint32 numerator, uint32 denominator) {\r\n        uint32 taxNumerator;\r\n        uint32 taxDenominator = 100000;\r\n\r\n        if (_tradeCount <= 5000) {\r\n            taxNumerator = 15000;    // up to 5k trades tax is 15 %\r\n        } else if (_tradeCount <= 20000) {\r\n            taxNumerator = 5000;    // up to 20k trades tax is 5 %\r\n        } else if (_tradeCount <= 100000) {\r\n            taxNumerator = 3000;    // from 20k to 100k trades tax is 3 %\r\n        } else {\r\n            taxNumerator = 500;     // above 100k trades tax is 0.5 %\r\n        }\r\n\r\n        return (taxNumerator, taxDenominator);\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount;\r\n        \r\n        if (_tradingOpen && !_noFees[sender] && !_noFees[recipient]) { \r\n            if (_isLP[sender] || _isLP[recipient]) {\r\n                (uint32 numerator, uint32 denominator) = _getTaxPercentages();\r\n                taxAmount = amount * numerator / denominator;\r\n            }\r\n        }\r\n\r\n        return taxAmount;\r\n    }\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n        if (_taxTokensAvailable >= _taxSwapMin && _tradingOpen) {\r\n            if (_taxTokensAvailable >= _taxSwapMax) {\r\n                _taxTokensAvailable = _taxSwapMax;\r\n            }\r\n\r\n            uint256 _lpDenominator = 4;\r\n            uint256 _tokensForLP = 0;\r\n\r\n            // before 100k trades are reached, some of the tax goes to LP\r\n            if (_tradeCount < 100000 && _taxToLp) {\r\n                _tokensForLP = _taxTokensAvailable / (_lpDenominator * 2);\r\n            }\r\n            \r\n            uint256 _tokensToSwap = _taxTokensAvailable - _tokensForLP;\r\n            if(_tokensToSwap > 10 ** _decimals) {\r\n                uint256 _ethPreSwap = address(this).balance;\r\n                _swapTaxTokensForEth(_tokensToSwap);\r\n                uint256 _ethSwapped = address(this).balance - _ethPreSwap;\r\n                if (_tokensForLP > 0) {\r\n                    uint256 _ethWeiAmount = _ethSwapped / _lpDenominator;\r\n                    _approveRouter(_tokensForLP);\r\n                    _addLiquidity(_tokensForLP, _ethWeiAmount);\r\n                }\r\n            }\r\n            uint256 _contractETHBalance = address(this).balance;\r\n            if(_contractETHBalance > 0) {\r\n                (bool sent, bytes memory data) = _devWallet.call{value: _contractETHBalance}(\"\");\r\n                emit LogTransfer(sent, data);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _primarySwapRouter.WETH();\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function getCurrentTax() external view returns (uint32, uint32) {\r\n        (uint32 numerator, uint32 denominator) = _getTaxPercentages();\r\n        return (numerator, denominator);\r\n    }\r\n\r\n    function setGenericTransfer(bool genericTransfer) external onlyOwner {\r\n        _genericTransfer = genericTransfer;\r\n        emit GenericTransferChanged(genericTransfer);\r\n    }\r\n\r\n    function manualSend() external onlyOwner {\r\n        uint256 contractEthBalance = address(this).balance;\r\n        _devWallet.transfer(contractEthBalance);\r\n    }\r\n\r\n    function setTaxToLpEnabled(bool enabled) external onlyOwner {\r\n        _taxToLp = enabled;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"useGenericTransfer\",\"type\":\"bool\"}],\"name\":\"GenericTransferChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"LogTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTax\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"genericTransfer\",\"type\":\"bool\"}],\"name\":\"setGenericTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setTaxToLpEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DegenMart", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bfc5e48af5f3f99dee551b2c250672f29ce40fd96b232ddc778649c45201cec9"}