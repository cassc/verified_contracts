{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/OCSSNIPER.sol\": {\r\n      \"content\": \"/**\\n *Submitted for verification at Etherscan.io on 2022-12-25\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\n//import the ERC20 interface\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address recipient, uint amount) external returns (bool);\\n    function allowance(address owner, address spender) external view returns (uint);\\n    function approve(address spender, uint amount) external returns (bool);\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint amount\\n    ) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n}\\n\\n\\n//import the uniswap router\\n//the contract needs to use swapExactTokensForTokens\\n//this will allow us to import swapExactTokensForTokens into our contract\\n\\ninterface IUniswapV2Router {\\n  function getAmountsOut(uint256 amountIn, address[] memory path)\\n    external\\n    view\\n    returns (uint256[] memory amounts);\\n  \\n  function swapExactTokensForTokens(\\n  \\n    //amount of tokens we are sending in\\n    uint256 amountIn,\\n    //the minimum amount of tokens we want out of the trade\\n    uint256 amountOutMin,\\n    //list of token addresses we are going to trade in.  this is necessary to calculate amounts\\n    address[] calldata path,\\n    //this is the address we are going to send the output tokens to\\n    address to,\\n    //the last time that the trade is valid for\\n    uint256 deadline\\n  ) external returns (uint256[] memory amounts);\\n}\\n\\ninterface IUniswapV2Pair {\\n  function token0() external view returns (address);\\n  function token1() external view returns (address);\\n  function swap(\\n    uint256 amount0Out,\\n    uint256 amount1Out,\\n    address to,\\n    bytes calldata data\\n  ) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n  function getPair(address token0, address token1) external returns (address);\\n}\\n\\n\\n\\ncontract tokenSwap {\\n    \\n    //address of the uniswap v2 router\\n    address private constant UNISWAP_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n    \\n    //address of WETH token.  This is needed because some times it is better to trade through WETH.  \\n    //you might get a better price using WETH.  \\n    //example trading from token A to WETH then WETH to token B might result in a better price\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    \\n\\n    //this swap function is used to trade from one token to another\\n    //the inputs are self explainatory\\n    //token in = the token address you want to trade out of\\n    //token out = the token address you want as the output of this trade\\n    //amount in = the amount of tokens you are sending in\\n    //amount out Min = the minimum amount of tokens you want out of the trade\\n    //to = the address you want the tokens to be sent to\\n    \\n   function swap(address _tokenIn, address _tokenOut, uint256 _amountIn, uint256 _amountOutMin, address _to) external {\\n      \\n    //first we need to transfer the amount in tokens from the msg.sender to this contract\\n    //this contract will have the amount of in tokens\\n    IERC20(_tokenIn).transferFrom(msg.sender, address(this), _amountIn);\\n    \\n    //next we need to allow the uniswapv2 router to spend the token we just sent to this contract\\n    //by calling IERC20 approve you allow the uniswap contract to spend the tokens in this contract \\n    IERC20(_tokenIn).approve(UNISWAP_V2_ROUTER, _amountIn);\\n\\n    //path is an array of addresses.\\n    //this path array will have 3 addresses [tokenIn, WETH, tokenOut]\\n    //the if statement below takes into account if token in or token out is WETH.  then the path is only 2 addresses\\n    address[] memory path;\\n    if (_tokenIn == WETH || _tokenOut == WETH) {\\n      path = new address[](2);\\n      path[0] = _tokenIn;\\n      path[1] = _tokenOut;\\n    } else {\\n      path = new address[](3);\\n      path[0] = _tokenIn;\\n      path[1] = WETH;\\n      path[2] = _tokenOut;\\n    }\\n        //then we will call swapExactTokensForTokens\\n        //for the deadline we will pass in block.timestamp\\n        //the deadline is the latest time the trade is valid for\\n        IUniswapV2Router(UNISWAP_V2_ROUTER).swapExactTokensForTokens(_amountIn, _amountOutMin, path, _to, block.timestamp);\\n    }\\n    \\n       //this function will return the minimum amount from a swap\\n       //input the 3 parameters below and it will return the minimum amount out\\n       //this is needed for the swap function above\\n     function getAmountOutMin(address _tokenIn, address _tokenOut, uint256 _amountIn) external view returns (uint256) {\\n\\n       //path is an array of addresses.\\n       //this path array will have 3 addresses [tokenIn, WETH, tokenOut]\\n       //the if statement below takes into account if token in or token out is WETH.  then the path is only 2 addresses\\n        address[] memory path;\\n        if (_tokenIn == WETH || _tokenOut == WETH) {\\n            path = new address[](2);\\n            path[0] = _tokenIn;\\n            path[1] = _tokenOut;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _tokenIn;\\n            path[1] = WETH;\\n            path[2] = _tokenOut;\\n        }\\n        \\n        uint256[] memory amountOutMins = IUniswapV2Router(UNISWAP_V2_ROUTER).getAmountsOut(_amountIn, path);\\n        return amountOutMins[path.length -1];  \\n    }  \\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"}],\"name\":\"getAmountOutMin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "tokenSwap", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}