{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/YieldManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ninterface IUniV2Pair {\\n    function getReserves() external view returns (uint112 _reserve0, uint112 _reserve1, uint32 _blockTimestampLast);\\n    function totalSupply() external view returns (uint);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n}\\n\\ninterface ILockedStakingrewards {\\n    function balanceOf(address account) external view returns (uint256);\\n    function stakingToken() external view returns(address);\\n}\\n\\ncontract YieldManager is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    mapping(address => address) public affiliateLookup;\\n    mapping(address => address) public vestingLookup;\\n\\n    event AffiliateSet(address indexed sponsor, address indexed client);\\n    event NewOwner(address owner);\\n    event NewCanSetSponsor(address canSet, bool status);\\n    event NewStaking(address staking);\\n    event NewLPStaking(address lpStaking);\\n    event NewYFlow(address yflow);\\n    event NewLPFactor(uint lpFactor);\\n    event VestingSet(address client, address vesting);\\n\\n    // struct configStruct\\n    // val1 client:  withdrawal fee sponsor: % of fee\\n    struct configStruct {\\n        uint level;\\n        uint val1;\\n        uint val2;\\n        uint val3;\\n        uint val4;\\n    }\\n\\n    configStruct[] public clientLevels;\\n    configStruct[] public sponsorLevels;\\n\\n    address[] public stakingAddresses;\\n    address[] public lpStakingAddresses;\\n\\n    address public owner;\\n    mapping(address => bool) public canSetSponsor;\\n\\n    address public YFlowAddress;\\n    uint public lpFactor = 1;\\n\\n    // only owner modifier\\n    modifier onlyOwner {\\n        _onlyOwner();\\n        _;\\n    }\\n\\n    // only owner view\\n    function _onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Only the contract owner may perform this action\\\");\\n    }\\n\\n    constructor(address _YFlow) {\\n        owner = msg.sender;\\n        YFlowAddress = _YFlow;\\n        //set client levels initial\\n        clientLevels.push(\\n            configStruct({\\n                level: 0,\\n                val1: 0,\\n                // performance fee\\n                val2: 1500,\\n                // mgmt fee\\n                val3: 100,\\n                // mgmt fee fixed\\n                val4: 200\\n            })\\n        );\\n        clientLevels.push(\\n            configStruct({\\n                level: 500 * 10 ** 18,\\n                val1: 0,\\n                val2: 1250,\\n                val3: 100,\\n                val4: 200\\n            })\\n        );\\n        clientLevels.push(\\n            configStruct({\\n                level: 10000 * 10 ** 18,\\n                val1: 0,\\n                val2: 1000,\\n                val3: 100,\\n                val4: 200\\n            })\\n        );\\n        clientLevels.push(\\n            configStruct({\\n                level: 100000 * 10 ** 18,\\n                val1: 0,\\n                val2: 750,\\n                val3: 75,\\n                val4: 125\\n            })\\n        );\\n        clientLevels.push(\\n            configStruct({\\n                level: 1000000 * 10 ** 18,\\n                val1: 0,\\n                val2: 500,\\n                val3: 75,\\n                val4: 125\\n            })\\n        );\\n\\n        //set sponsor levels initial\\n        sponsorLevels.push(\\n            configStruct({\\n                level: 0,\\n                val1: 0,\\n                val2: 0,\\n                val3: 0,\\n                val4: 0\\n            })\\n        );\\n        sponsorLevels.push(\\n            configStruct({\\n                level: 500 * 10 ** 18,\\n                val1: 1000,\\n                val2: 1500,\\n                val3: 0,\\n                val4: 0\\n            })\\n        );\\n        sponsorLevels.push(\\n            configStruct({\\n                level: 10000 * 10 ** 18,\\n                val1: 1500,\\n                val2: 2500,\\n                val3: 0,\\n                val4: 0\\n            })\\n        );\\n        sponsorLevels.push(\\n            configStruct({\\n                level: 100000 * 10 ** 18,\\n                val1: 2000,\\n                val2: 5000,\\n                val3: 0,\\n                val4: 0\\n            })\\n        );\\n        sponsorLevels.push(\\n            configStruct({\\n                level: 500000 * 10 ** 18,\\n                val1: 2500,\\n                val2: 7500,\\n                val3: 0,\\n                val4: 0\\n            })\\n        );\\n    }\\n\\n    function setYflow(address _Yflow) public onlyOwner {\\n        YFlowAddress = _Yflow;\\n        emit NewYFlow(YFlowAddress);\\n    }\\n\\n    function setLPFactor(uint _lpFactor) public onlyOwner {\\n        lpFactor = _lpFactor;\\n        emit NewLPFactor(lpFactor);\\n    }\\n\\n    //updates client levels\\n    function setClientLevels(uint[] memory levels, uint[] memory val1s, uint[] memory val2s, uint[] memory val3s, uint[] memory val4s) public onlyOwner {\\n        require(levels.length == val1s.length, \\\"length mismatch\\\");\\n        require(val1s.length == val2s.length, \\\"length mismatch\\\");\\n        require(val2s.length == val3s.length, \\\"length mismatch\\\");\\n        require(val3s.length == val4s.length, \\\"length mismatch\\\");\\n        delete clientLevels;\\n\\n        for (uint i=0; i<levels.length; i++) {\\n            clientLevels.push(\\n                configStruct({\\n                    level: levels[i],\\n                    val1: val1s[i],\\n                    val2: val2s[i],\\n                    val3: val3s[i],\\n                    val4: val4s[i]\\n            })\\n            );\\n        }\\n    }\\n\\n    //updates client levels\\n    function setSponsorLevels(uint[] memory levels, uint[] memory val1s, uint[] memory val2s, uint[] memory val3s, uint[] memory val4s) public onlyOwner {\\n        require(levels.length == val1s.length, \\\"length mismatch\\\");\\n        require(val1s.length == val2s.length, \\\"length mismatch\\\");\\n        require(val2s.length == val3s.length, \\\"length mismatch\\\");\\n        require(val3s.length == val4s.length, \\\"length mismatch\\\");\\n        delete sponsorLevels;\\n\\n        for (uint i=0; i<levels.length; i++) {\\n            sponsorLevels.push(\\n                configStruct({\\n                    level: levels[i],\\n                    val1: val1s[i],\\n                    val2: val2s[i],\\n                    val3: val3s[i],\\n                    val4: val4s[i]\\n            })\\n            );\\n        }\\n    }\\n\\n    // returns sponsor\\n    function getAffiliate(address client) public view returns (address) {\\n        return affiliateLookup[client];\\n    }\\n\\n    function setAffiliate(address client, address sponsor) public {\\n        require (canSetSponsor[msg.sender] == true, \\\"not allowed to set sponsor\\\");\\n        require(affiliateLookup[client] == address(0), \\\"sponsor already set\\\");\\n        affiliateLookup[client] = sponsor;\\n        emit AffiliateSet(sponsor, client);\\n    }\\n\\n    function ownerSetAffiiliate(address client, address sponsor) public onlyOwner {\\n        affiliateLookup[client] = sponsor;\\n        emit AffiliateSet(sponsor, client);\\n    }\\n\\n    function ownerSetVestingAddress(address client, address vesting) public onlyOwner {\\n        vestingLookup[client] = vesting;\\n        emit VestingSet(client, vesting);\\n    }\\n\\n    function setStakingAddress(address[] memory stakingContract) public onlyOwner {\\n        delete stakingAddresses;\\n\\n        for (uint i=0; i<stakingContract.length; i++) {\\n            stakingAddresses.push(stakingContract[i]);\\n            emit NewStaking(stakingContract[i]);\\n        }\\n    }\\n\\n    function setLPStakingAddress(address[] memory stakingContract) public onlyOwner {\\n        delete lpStakingAddresses;\\n        for (uint i=0; i<stakingContract.length; i++) {\\n            lpStakingAddresses.push(stakingContract[i]);\\n            emit NewLPStaking(stakingContract[i]);\\n        }\\n    }\\n\\n    function calcLPTokenBonus(uint liquidity, address lpAddress) public view returns (uint) {\\n        address _token0 = IUniV2Pair(lpAddress).token0();                                // gas savings\\n        address _token1 = IUniV2Pair(lpAddress).token1();                                // gas savings\\n        uint balance0 = IERC20(_token0).balanceOf(lpAddress);\\n        uint balance1 = IERC20(_token1).balanceOf(lpAddress);\\n\\n        uint _totalSupply = IUniV2Pair(lpAddress).totalSupply(); // gas savings, must be defined here since totalSupply can update in _mintFee\\n        uint amount0 = (liquidity * balance0) / _totalSupply; // using balances ensures pro-rata distribution\\n        uint amount1 = (liquidity * balance1) / _totalSupply; // using balances ensures pro-rata distribution\\n\\n        if ( _token0 == YFlowAddress) {\\n            return amount0 * lpFactor;\\n        }\\n\\n        return amount1 * lpFactor;\\n    }\\n\\n    function getUserStakedAmount(address user) public view returns (uint) {\\n        uint stakedTokens;\\n\\n        // check normal staking\\n        for (uint i = 0; i < stakingAddresses.length; i++) {\\n            uint tempStaked = ILockedStakingrewards(stakingAddresses[i])\\n                .balanceOf(user);\\n            stakedTokens += tempStaked;\\n\\n            // check if user is in vesting\\n                if (vestingLookup[user] != (address(0))) {\\n                    uint tempStakedVester = ILockedStakingrewards(stakingAddresses[i])\\n                        .balanceOf(vestingLookup[user]);\\n                    stakedTokens += tempStakedVester;\\n            }\\n        }\\n\\n        // check lp staking\\n        for (uint i = 0; i < lpStakingAddresses.length; i++) {\\n            uint tempStaked = ILockedStakingrewards(lpStakingAddresses[i])\\n                .balanceOf(user);\\n\\n            address lpAddress = ILockedStakingrewards(lpStakingAddresses[i]).stakingToken();\\n            uint userCalc = calcLPTokenBonus(tempStaked,lpAddress);\\n            stakedTokens += userCalc;\\n        }\\n\\n        return stakedTokens;\\n    }\\n\\n    function getUserFactors(\\n        address user,\\n        uint typer\\n    ) public view returns (uint, uint, uint, uint) {\\n        uint stakedtokens = getUserStakedAmount(user);\\n\\n        // if its for client\\n        if (typer == 0) {\\n            // check normal staking\\n            if (stakedtokens < clientLevels[1].level) {\\n                return (\\n                    clientLevels[0].val1,\\n                    clientLevels[0].val2,\\n                    clientLevels[0].val3,\\n                    clientLevels[0].val4\\n                );\\n            } else if (\\n                stakedtokens >= clientLevels[1].level &&\\n                stakedtokens < clientLevels[2].level\\n            ) {\\n                return (\\n                    clientLevels[1].val1,\\n                    clientLevels[1].val2,\\n                    clientLevels[1].val3,\\n                    clientLevels[1].val4\\n                );\\n            } else if (\\n                stakedtokens >= clientLevels[2].level &&\\n                stakedtokens < clientLevels[3].level\\n            ) {\\n                return (\\n                    clientLevels[2].val1,\\n                    clientLevels[2].val2,\\n                    clientLevels[2].val3,\\n                    clientLevels[2].val4\\n                );\\n            } else if (\\n                stakedtokens >= clientLevels[3].level &&\\n                stakedtokens < clientLevels[4].level\\n            ) {\\n                return (\\n                    clientLevels[3].val1,\\n                    clientLevels[3].val2,\\n                    clientLevels[3].val3,\\n                    clientLevels[3].val4\\n                );\\n            } else {\\n                return (\\n                    clientLevels[4].val1,\\n                    clientLevels[4].val2,\\n                    clientLevels[4].val3,\\n                    clientLevels[4].val4\\n                );\\n            }\\n        }\\n\\n        // else we calculate sponsor\\n        if (stakedtokens < sponsorLevels[1].level) {\\n            return (\\n                sponsorLevels[0].val1,\\n                sponsorLevels[0].val2,\\n                sponsorLevels[0].val3,\\n                sponsorLevels[0].val4\\n            );\\n        } else if (\\n            stakedtokens >= sponsorLevels[1].level &&\\n            stakedtokens < sponsorLevels[2].level\\n        ) {\\n            return (\\n                sponsorLevels[1].val1,\\n                sponsorLevels[1].val2,\\n                sponsorLevels[1].val3,\\n                sponsorLevels[1].val4\\n            );\\n        } else if (\\n            stakedtokens >= sponsorLevels[2].level &&\\n            stakedtokens < sponsorLevels[3].level\\n        ) {\\n            return (\\n                sponsorLevels[2].val1,\\n                sponsorLevels[2].val2,\\n                sponsorLevels[2].val3,\\n                sponsorLevels[2].val4\\n            );\\n        } else if (\\n            stakedtokens >= sponsorLevels[3].level &&\\n            stakedtokens < sponsorLevels[4].level\\n        ) {\\n            return (\\n                sponsorLevels[3].val1,\\n                sponsorLevels[3].val2,\\n                sponsorLevels[3].val3,\\n                sponsorLevels[3].val4\\n            );\\n        } else {\\n            return (\\n                sponsorLevels[4].val1,\\n                sponsorLevels[4].val2,\\n                sponsorLevels[4].val3,\\n                sponsorLevels[4].val4\\n            );\\n        }\\n    }\\n\\n    function newOwner(address newOwner_) external {\\n        require(msg.sender == owner, \\\"Only factory owner\\\");\\n        require(newOwner_ != address(0), \\\"No zero address for newOwner\\\");\\n\\n        owner = newOwner_;\\n        emit NewOwner(owner);\\n    }\\n\\n    function setCanSetSponsor(address factoryContract, bool val) external onlyOwner {\\n        canSetSponsor[factoryContract] = val;\\n        emit NewCanSetSponsor(factoryContract, val);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_YFlow\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"AffiliateSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"canSet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"NewCanSetSponsor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpFactor\",\"type\":\"uint256\"}],\"name\":\"NewLPFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpStaking\",\"type\":\"address\"}],\"name\":\"NewLPStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NewOwner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staking\",\"type\":\"address\"}],\"name\":\"NewStaking\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"yflow\",\"type\":\"address\"}],\"name\":\"NewYFlow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"}],\"name\":\"VestingSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"YFlowAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"affiliateLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"lpAddress\",\"type\":\"address\"}],\"name\":\"calcLPTokenBonus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canSetSponsor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"clientLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"}],\"name\":\"getAffiliate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"typer\",\"type\":\"uint256\"}],\"name\":\"getUserFactors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpStakingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"newOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"ownerSetAffiiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vesting\",\"type\":\"address\"}],\"name\":\"ownerSetVestingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"client\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"}],\"name\":\"setAffiliate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factoryContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"val\",\"type\":\"bool\"}],\"name\":\"setCanSetSponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"levels\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"val1s\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"val2s\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"val3s\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"val4s\",\"type\":\"uint256[]\"}],\"name\":\"setClientLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lpFactor\",\"type\":\"uint256\"}],\"name\":\"setLPFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingContract\",\"type\":\"address[]\"}],\"name\":\"setLPStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"levels\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"val1s\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"val2s\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"val3s\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"val4s\",\"type\":\"uint256[]\"}],\"name\":\"setSponsorLevels\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"stakingContract\",\"type\":\"address[]\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Yflow\",\"type\":\"address\"}],\"name\":\"setYflow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"sponsorLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"level\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val3\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"val4\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingLookup\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "YieldManager", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004d21351469a6728043cacf89ecb4d1e8ec20a70c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}