{"SourceCode": "//Telegram  https://t.me/Hive_Mind_Official\r\n//Website   https://hivemind.hub\r\n//Twitter/X https://twitter.com/Hive_Mind_Token\r\n\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%++++++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@+++++#@@@@#++++*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#++++*@@@@@*%@@@@@+++++%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%+++++@@@@@%++++++++@@@@@%+++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++#@@@@@*++++#@@@@*++++#@@@@@*++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++%@@++++*@@@@@@@@@@@@+++++@@*++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++%@@++@@@@@@@@@@@@@@@@@#++@@*++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++%@@++@@@@@@@@@@@@@@@@@#++@@*++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++@@@++@@@@@@@@@@@@@@@@@#++@@*++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++@@@++@@@@@@@@@@@@@@@@@#++@@*++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++@@@++@@@@@@@@@@@@@@@@@#++@@*++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++@@@++@@@@@@@@@@@@@@@@@#++@@*++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++@@@#++++*@@@@@@@@@@+++++%@@*++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@++++#@@@@@*+++*%@@#++++*@@@@@*++++@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@*++++#%+++++@@@@@@++++++@@@@@%+++++@*++++#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@#++++*@@@@@@@@#++++*@@@@@@@@@@+++++%@@@@@@@@+++++@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@+++++%@@@@@++++%@@@@@*+++*%@@#++++*@@@@@#+++*@@@@@%++++*@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@++++#@@@@@*++*+#%+++++@@@@@%+++++*@@@@@%+++++@*++++#@@@@@*+++#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@++*@@@%+++++@@@@@@@@*++**#@@@@++@@@@*++++%@@@@@@@@+++++@@@@++#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@++*@@+*+%@@@@@@@@@@@@@@@*++@@@++@@%+**@@@@@@@@@@@@@@@#+++@@++#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@*+*@@++#@@@@@@@@@@@@@@@@@++@@@++@@%++@@@@@@@@@@@@@@@@@*++@@++#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@*+*@@++#@@@@@@@@@@@@@@@@@++#+**+++%++@@@@@@@@@@@@@@@@@*++@@++#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@++*@@+*#@@@@@@@@@@@@@@@@@++++%@@%++++@@@@@@@@@@@@@@@@@*+*@@*+#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@*+*@@+*#@@@@@@@@@@@@@@@@*+*@@@@@@@@***@@@@@@@@@@@@@@@@*+*@@**#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@***@@++#@@@@@@@@@@@@@@@@**@@@@@@@@@@+*@@@@@@@@@@@@@@@@***@@**#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@***@@++*+@@@@@@@@@@@@@@@**@@@@@@@@@@**@@@@@@@@@@@@@@%+*+*@@**#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@***@@@@#+++**###########*+*@@@@@@@@++*###########****+%@@@@**#@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@*****#@@@@@**********+***+**+@@@@+***+*+********+**@@@@@***+*%@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@*****@**%@@@@@@@@@@@@@@#*++**+%@@@@@@@@@@@@@@***%+****@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@#*****@@@@@@@@@@@@@@#*****+#@@@@@@@@@@@@@@****+%@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@***@@@@@@@@@@*****@@@@+****@@@@@@@@@@**#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#*+*@@@@%****#@@@@@@@@@@#****@@@@@+**@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#********%@#*****+****#@*********%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@******%@@@@@@#*****#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#**@@@@@@@@@@@@@@**@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@**#@@@@@@@@@@@@***@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@****************@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%***#@@@@@@#***@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@***@@@@@@***@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#***@@***%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@#****%@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n//@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\n\r\n//SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.4;\r\n\r\n/**\r\n * Standard SafeMath, stripped down to just add/sub/mul/div\r\n */\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() external virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) external virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n/**\r\n * ERC20 standard interface.\r\n */\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract HiveMind is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    string constant _name = \"The Hive Mind\";\r\n    string constant _symbol = \"HIVE\";\r\n    uint8 constant _decimals = 18;\r\n\r\n    uint256 constant _totalSupply = 100000000000 * 10**18; // 100 Billion\r\n    mapping (address => uint256) _balances;\r\n    mapping (address => mapping (address => uint256)) _allowances;\r\n\r\n    mapping (address => bool) isFeeExempt;\r\n    mapping (address => bool) isRestricted;\r\n\r\n    uint256 burnFee = 0;\r\n    uint256 daoFee = 0;\r\n    uint256 liquidityFee = 0;\r\n    uint256 marketingFee = 0;\r\n\r\n    uint256 constant feeDenominator = 10000;\r\n\r\n    address public autoLiquidityReceiver;\r\n    address public daoFeeReceiver;\r\n    address public marketingFeeReceiver;\r\n\r\n    IDEXRouter public router;\r\n    address uniswapV2ETHPair;\r\n    address[] public pairs;\r\n\r\n    bool public autoLiquifyEnabled = true;\r\n    bool public feesOnNormalTransfers = false;\r\n\r\n    bool inSwap;\r\n    modifier swapping { inSwap = true; _; inSwap = false; }\r\n    uint256 public autoLiquifyThreshold = 100 * 10 ** _decimals;\r\n\r\n    event AutoLiquify(uint256 amountETH, uint256 amountToken);\r\n    event ExcludeFromFees(address indexed account, bool isExcluded);\r\n    event FeesUpdated(uint256 indexed newBurnFee, uint256 indexed newDaoFee, uint256 newLiquidityFee, uint256 newMarketingFee);\r\n    event RecoveredExcess(uint256 amount);\r\n    event UpdateDaoAddress(address indexed newAddr, address indexed oldAddr);\r\n    event UpdateLiquidityAddress(address indexed newAddr, address indexed oldAddr);\r\n    event UpdateAutoLiquifyEnabled(bool enabled);\r\n    event UpdateFeesOnNormalTransfer(bool enabled);\r\n    event UpdateMarketingAddress(address indexed newAddr, address indexed oldAddr);\r\n\r\n    constructor() {\r\n        address ownerAddr = msg.sender;\r\n\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2ETHPair = IDEXFactory(router.factory()).createPair(router.WETH(), address(this));\r\n        _allowances[address(this)][address(router)] = ~uint256(0);\r\n\r\n        pairs.push(uniswapV2ETHPair);\r\n\r\n        isFeeExempt[ownerAddr] = true;\r\n        isFeeExempt[address(this)] = true;\r\n\r\n        daoFeeReceiver = ownerAddr;\r\n        marketingFeeReceiver = ownerAddr;\r\n        autoLiquidityReceiver = ownerAddr;\r\n\r\n        _balances[ownerAddr] = _totalSupply;\r\n        emit Transfer(address(0), ownerAddr, _totalSupply);\r\n    }\r\n\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, ~uint256(0));\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != ~uint256(0)){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(!isRestricted[recipient], \"Address is restricted\");\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }\r\n\r\n        if(shouldAutoLiquify()) { autoLiquify(); }\r\n\r\n        require(_balances[sender].sub(amount) >= 0, \"Insufficient Balance\");\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n\r\n        if (shouldTakeFee(sender, recipient)) {\r\n            uint256 burnAmount = amount.mul(burnFee).div(feeDenominator);\r\n            uint256 daoAmount = amount.mul(daoFee).div(feeDenominator);\r\n            uint256 liquidityAmount = amount.mul(liquidityFee).div(feeDenominator);\r\n            uint256 marketingAmount = amount.mul(marketingFee).div(feeDenominator);\r\n\r\n            uint256 totalStoreAmount = daoAmount + liquidityAmount + marketingAmount; // Total token fee\r\n            uint256 totalTaxAmount = burnAmount + totalStoreAmount; // Total amount of tax\r\n\r\n            _balances[address(this)] = _balances[address(this)] + totalStoreAmount; // Store tax fees within itself\r\n            emit Transfer(sender, address(this), totalStoreAmount);\r\n\r\n            _balances[DEAD] = _balances[DEAD].add(burnAmount); // Send the Burn fee to the DEAD wallet\r\n            emit Transfer(sender, DEAD, burnAmount);\r\n\r\n\r\n            uint256 amountReceived = amount - totalTaxAmount;\r\n            _balances[recipient] = _balances[recipient].add(amountReceived);\r\n            emit Transfer(sender, recipient, amountReceived);\r\n        } else {\r\n            _balances[recipient] = _balances[recipient].add(amount);\r\n            emit Transfer(sender, recipient, amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(balanceOf(sender).sub(amount) >= 0, \"Insufficient Balance\");\r\n        _balances[sender] = _balances[sender].sub(amount);\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        if (isFeeExempt[sender] || isFeeExempt[recipient]) return false;\r\n\r\n        address[] memory liqPairs = pairs;\r\n\r\n        for (uint256 i = 0; i < liqPairs.length; i++) {\r\n            if (sender == liqPairs[i] || recipient == liqPairs[i]) return true;\r\n        }\r\n\r\n        return feesOnNormalTransfers;\r\n    }\r\n\r\n    function shouldAutoLiquify() internal view returns (bool) {\r\n        return msg.sender != uniswapV2ETHPair\r\n        && !inSwap\r\n        && autoLiquifyEnabled\r\n        && _balances[address(this)] >= autoLiquifyThreshold;\r\n    }\r\n\r\n    function liquify() external onlyOwner {\r\n        autoLiquify();\r\n    }\r\n\r\n    function autoLiquify() internal swapping {\r\n        uint256 balanceBefore = address(this).balance;\r\n\r\n        uint256 totalAmount = _balances[address(this)];\r\n        uint256 denom = daoFee + liquidityFee + marketingFee;\r\n\r\n        uint256 daoSwap = totalAmount.mul(daoFee).div(denom);\r\n        uint256 liquiditySwap = totalAmount.mul(liquidityFee).div(denom);\r\n        uint256 marketingSwap = totalAmount.mul(marketingFee).div(denom);\r\n\r\n        uint256 amountToLiquify = liquiditySwap.div(2);\r\n\r\n        uint256 amountToSwap = daoSwap + amountToLiquify + marketingSwap;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToSwap);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToSwap,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n\r\n        uint256 swapedETHAmount = address(this).balance.sub(balanceBefore);\r\n\r\n        if (swapedETHAmount > 0) {\r\n            uint256 ethDenom =  daoFee + marketingFee + liquidityFee.div(2);\r\n\r\n            uint256 ethSwapMarketingAmount = swapedETHAmount.mul(marketingFee).div(ethDenom); // ETH for Marketing\r\n            uint256 ethSwapDaoAmount = swapedETHAmount.mul(daoFee).div(ethDenom); // ETH for DAO\r\n            uint256 ethLiquidify = swapedETHAmount.mul(liquidityFee.div(2)).div(ethDenom); // ETH for Liqudity\r\n\r\n            if (ethSwapMarketingAmount > 0) {\r\n                // Send ETH for Marketing\r\n                payable(marketingFeeReceiver).transfer(ethSwapMarketingAmount);\r\n            }\r\n\r\n            if (ethSwapDaoAmount > 0) {\r\n                // Send ETH for DAO\r\n                payable(daoFeeReceiver).transfer(ethSwapDaoAmount);\r\n            }\r\n\r\n            if (ethLiquidify > 0){\r\n                _approve(address(this), address(router), amountToLiquify);\r\n                router.addLiquidityETH{ value: ethLiquidify }(\r\n                    address(this),\r\n                    amountToLiquify,\r\n                    0,\r\n                    0,\r\n                    autoLiquidityReceiver,\r\n                    block.timestamp\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function ETHbalance() external view returns (uint256) {\r\n        return address(this).balance;\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n\r\n        emit ExcludeFromFees(holder, exempt);\r\n    }\r\n\r\n    function setFees(\r\n        uint256 _burnFee,\r\n        uint256 _daoFee,\r\n        uint256 _liquidityFee,\r\n        uint256 _marketingFee\r\n    ) external onlyOwner {\r\n        burnFee = _burnFee;\r\n        daoFee = _daoFee;\r\n        liquidityFee = _liquidityFee;\r\n        marketingFee = _marketingFee;\r\n\r\n        emit FeesUpdated(burnFee, daoFee, liquidityFee, marketingFee);\r\n    }\r\n\r\n    function setAutoLiquifyThreshold(uint256 threshold) external onlyOwner {\r\n        autoLiquifyThreshold = threshold;\r\n    }\r\n\r\n    function setAutoLiquifyEnabled(bool _enabled) external onlyOwner {\r\n        autoLiquifyEnabled = _enabled;\r\n        emit UpdateAutoLiquifyEnabled(_enabled);\r\n    }\r\n\r\n    function setDaoFeeReceiver(address _receiver) external onlyOwner {\r\n        address oldAddr = daoFeeReceiver;\r\n        daoFeeReceiver = _receiver;\r\n        \r\n        isFeeExempt[_receiver] = true;\r\n\r\n        emit UpdateDaoAddress(oldAddr, _receiver);\r\n    }\r\n\r\n    function setLiquidityFeeReceiver(address _receiver) external onlyOwner {\r\n        address oldAddr = autoLiquidityReceiver;\r\n        autoLiquidityReceiver = _receiver;\r\n\r\n        isFeeExempt[_receiver] = true;\r\n\r\n        emit UpdateLiquidityAddress(oldAddr, _receiver);\r\n    }\r\n\r\n    function setMarketingFeeReceiver(address _receiver) external onlyOwner {\r\n        address oldAddr = marketingFeeReceiver;\r\n        marketingFeeReceiver = _receiver;\r\n\r\n        isFeeExempt[_receiver] = true;\r\n\r\n        emit UpdateMarketingAddress(oldAddr, _receiver);\r\n    }\r\n\r\n    function getCirculatingSupply() external view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function addPair(address pair) external onlyOwner {\r\n        pairs.push(pair);\r\n    }\r\n\r\n    function removeLastPair() external onlyOwner {\r\n        pairs.pop();\r\n    }\r\n\r\n    function setFeesOnNormalTransfers(bool _enabled) external onlyOwner {\r\n        feesOnNormalTransfers = _enabled;\r\n\r\n        emit UpdateFeesOnNormalTransfer(_enabled);\r\n    }\r\n\r\n    function setisRestricted(address adr, bool restricted) external onlyOwner {\r\n        isRestricted[adr] = restricted;\r\n    }\r\n\r\n    function totalFees() external view returns (uint256) {\r\n        return burnFee.add(daoFee).add(liquidityFee).add(marketingFee).div(100);\r\n    }\r\n\r\n    function walletisRestricted(address adr) external view returns (bool) {\r\n        return isRestricted[adr];\r\n    }\r\n\r\n    function walletIsTaxExempt(address adr) external view returns (bool) {\r\n        return isFeeExempt[adr];\r\n    }\r\n\r\n    // only for recovering excess ETH in the contract, in times of miscalculation. Can only be sent to marketing wallet - ALWAYS CONFIRM BEFORE USE\r\n    function recoverExcess(uint256 amount) external onlyOwner {\r\n        require(amount < address(this).balance, \"HIVE: Can not send more than contract balance\");\r\n        payable(marketingFeeReceiver).transfer(amount);\r\n        emit RecoveredExcess(amount);\r\n    }\r\n\r\n    // only for recovering tokens that are NOT HIVE tokens sent in error by wallets\r\n    function withdrawTokens(address tokenaddr) external onlyOwner {\r\n        require(tokenaddr != address(this), 'This is for tokens sent to the contract by mistake');\r\n        uint256 tokenBal = IERC20(tokenaddr).balanceOf(address(this));\r\n        if (tokenBal > 0) {\r\n            IERC20(tokenaddr).transfer(marketingFeeReceiver, tokenBal);\r\n        }\r\n    }\r\n\r\n    receive() external payable { }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToken\",\"type\":\"uint256\"}],\"name\":\"AutoLiquify\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isExcluded\",\"type\":\"bool\"}],\"name\":\"ExcludeFromFees\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newBurnFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newDaoFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newLiquidityFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoveredExcess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UpdateAutoLiquifyEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddr\",\"type\":\"address\"}],\"name\":\"UpdateDaoAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"UpdateFeesOnNormalTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddr\",\"type\":\"address\"}],\"name\":\"UpdateLiquidityAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAddr\",\"type\":\"address\"}],\"name\":\"UpdateMarketingAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETHbalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"}],\"name\":\"addPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquidityReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoLiquifyThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesOnNormalTransfers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pairs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverExcess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLastPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setAutoLiquifyEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setAutoLiquifyThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setDaoFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_daoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_liquidityFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_marketingFee\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"}],\"name\":\"setFeesOnNormalTransfers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setLiquidityFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"name\":\"setMarketingFeeReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"restricted\",\"type\":\"bool\"}],\"name\":\"setisRestricted\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"walletIsTaxExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"walletisRestricted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenaddr\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HiveMind", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://bee68ea7fb7ec9417814abb7a0db5e63722a70fb5d7d7392801a9c07d4aaf0ac"}