{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC20Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20MetadataInternal } from './IERC20MetadataInternal.sol';\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata is IERC20MetadataInternal {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/metadata/IERC20MetadataInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC20 metadata internal interface\\n */\\ninterface IERC20MetadataInternal {\\n\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { UintUtils } from './UintUtils.sol';\\n\\nlibrary AddressUtils {\\n    using UintUtils for uint256;\\n\\n    error AddressUtils__InsufficientBalance();\\n    error AddressUtils__NotContract();\\n    error AddressUtils__SendValueFailed();\\n\\n    function toString(address account) internal pure returns (string memory) {\\n        return uint256(uint160(account)).toHexString(20);\\n    }\\n\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    function sendValue(address payable account, uint256 amount) internal {\\n        (bool success, ) = account.call{ value: amount }('');\\n        if (!success) revert AddressUtils__SendValueFailed();\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCall(target, data, 'AddressUtils: failed low-level call');\\n    }\\n\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        return _functionCallWithValue(target, data, 0, error);\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return\\n            functionCallWithValue(\\n                target,\\n                data,\\n                value,\\n                'AddressUtils: failed low-level call with value'\\n            );\\n    }\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) internal returns (bytes memory) {\\n        if (value > address(this).balance)\\n            revert AddressUtils__InsufficientBalance();\\n        return _functionCallWithValue(target, data, value, error);\\n    }\\n\\n    /**\\n     * @notice execute arbitrary external call with limited gas usage and amount of copied return data\\n     * @dev derived from https://github.com/nomad-xyz/ExcessivelySafeCall (MIT License)\\n     * @param target recipient of call\\n     * @param gasAmount gas allowance for call\\n     * @param value native token value to include in call\\n     * @param maxCopy maximum number of bytes to copy from return data\\n     * @param data encoded call data\\n     * @return success whether call is successful\\n     * @return returnData copied return data\\n     */\\n    function excessivelySafeCall(\\n        address target,\\n        uint256 gasAmount,\\n        uint256 value,\\n        uint16 maxCopy,\\n        bytes memory data\\n    ) internal returns (bool success, bytes memory returnData) {\\n        returnData = new bytes(maxCopy);\\n\\n        assembly {\\n            // execute external call via assembly to avoid automatic copying of return data\\n            success := call(\\n                gasAmount,\\n                target,\\n                value,\\n                add(data, 0x20),\\n                mload(data),\\n                0,\\n                0\\n            )\\n\\n            // determine whether to limit amount of data to copy\\n            let toCopy := returndatasize()\\n\\n            if gt(toCopy, maxCopy) {\\n                toCopy := maxCopy\\n            }\\n\\n            // store the length of the copied bytes\\n            mstore(returnData, toCopy)\\n\\n            // copy the bytes from returndata[0:toCopy]\\n            returndatacopy(add(returnData, 0x20), 0, toCopy)\\n        }\\n    }\\n\\n    function _functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory error\\n    ) private returns (bytes memory) {\\n        if (!isContract(target)) revert AddressUtils__NotContract();\\n\\n        (bool success, bytes memory returnData) = target.call{ value: value }(\\n            data\\n        );\\n\\n        if (success) {\\n            return returnData;\\n        } else if (returnData.length > 0) {\\n            assembly {\\n                let returnData_size := mload(returnData)\\n                revert(add(32, returnData), returnData_size)\\n            }\\n        } else {\\n            revert(error);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20 } from '../interfaces/IERC20.sol';\\nimport { AddressUtils } from './AddressUtils.sol';\\n\\n/**\\n * @title Safe ERC20 interaction library\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary SafeERC20 {\\n    using AddressUtils for address;\\n\\n    error SafeERC20__ApproveFromNonZeroToNonZero();\\n    error SafeERC20__DecreaseAllowanceBelowZero();\\n    error SafeERC20__OperationFailed();\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transfer.selector, to, value)\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\\n        );\\n    }\\n\\n    /**\\n     * @dev safeApprove (like approve) should only be called when setting an initial allowance or when resetting it to zero; otherwise prefer safeIncreaseAllowance and safeDecreaseAllowance\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        if ((value != 0) && (token.allowance(address(this), spender) != 0))\\n            revert SafeERC20__ApproveFromNonZeroToNonZero();\\n\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(token.approve.selector, spender, value)\\n        );\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(\\n            token,\\n            abi.encodeWithSelector(\\n                token.approve.selector,\\n                spender,\\n                newAllowance\\n            )\\n        );\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            if (oldAllowance < value)\\n                revert SafeERC20__DecreaseAllowanceBelowZero();\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(\\n                token,\\n                abi.encodeWithSelector(\\n                    token.approve.selector,\\n                    spender,\\n                    newAllowance\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @notice send transaction data and check validity of return value, if present\\n     * @param token ERC20 token interface\\n     * @param data transaction data\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        bytes memory returndata = address(token).functionCall(\\n            data,\\n            'SafeERC20: low-level call failed'\\n        );\\n\\n        if (returndata.length > 0) {\\n            if (!abi.decode(returndata, (bool)))\\n                revert SafeERC20__OperationFailed();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/utils/UintUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title utility functions for uint256 operations\\n * @dev derived from https://github.com/OpenZeppelin/openzeppelin-contracts/ (MIT license)\\n */\\nlibrary UintUtils {\\n    error UintUtils__InsufficientHexLength();\\n\\n    bytes16 private constant HEX_SYMBOLS = '0123456789abcdef';\\n\\n    function add(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? sub(a, -b) : a + uint256(b);\\n    }\\n\\n    function sub(uint256 a, int256 b) internal pure returns (uint256) {\\n        return b < 0 ? add(a, -b) : a - uint256(b);\\n    }\\n\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0';\\n        }\\n\\n        uint256 temp = value;\\n        uint256 digits;\\n\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n\\n        bytes memory buffer = new bytes(digits);\\n\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n\\n        return string(buffer);\\n    }\\n\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return '0x00';\\n        }\\n\\n        uint256 length = 0;\\n\\n        for (uint256 temp = value; temp != 0; temp >>= 8) {\\n            unchecked {\\n                length++;\\n            }\\n        }\\n\\n        return toHexString(value, length);\\n    }\\n\\n    function toHexString(\\n        uint256 value,\\n        uint256 length\\n    ) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = '0';\\n        buffer[1] = 'x';\\n\\n        unchecked {\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\n                buffer[i] = HEX_SYMBOLS[value & 0xf];\\n                value >>= 4;\\n            }\\n        }\\n\\n        if (value != 0) revert UintUtils__InsufficientHexLength();\\n\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/facets/CelerFeeHubFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { IERC20 } from \\\"@solidstate/contracts/interfaces/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@solidstate/contracts/utils/SafeERC20.sol\\\";\\nimport { IFeeDistributorFacet } from \\\"./../interfaces/IFeeDistributorFacet.sol\\\";\\nimport { ICelerFeeHubFacet } from \\\"./../interfaces/ICelerFeeHubFacet.sol\\\";\\nimport { IFeeStoreFacet } from \\\"./../interfaces/IFeeStoreFacet.sol\\\";\\nimport { IRelayerCeler } from \\\"./../interfaces/IRelayerCeler.sol\\\";\\nimport { LibAccessControlEnumerable } from \\\"./../libraries/LibAccessControlEnumerable.sol\\\";\\nimport { LibFeeManagerStorage } from \\\"./../libraries/LibFeeManagerStorage.sol\\\";\\nimport { LibFeeManager } from \\\"./../libraries/LibFeeManager.sol\\\";\\nimport { LibFeeStore } from \\\"./../libraries/LibFeeStore.sol\\\";\\nimport { LibDiamond } from \\\"./../libraries/LibDiamond.sol\\\";\\nimport { FeeConfig, FeeConfigSyncDTO, FeeConfigSyncHomeDTO, FeeSyncQueue } from \\\"./../helpers/Structs.sol\\\";\\nimport { AddressZero, AlreadyInitialized, NotAllowed, WrongChain, ZeroValueNotAllowed } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { addressZeroCheck } from \\\"./../helpers/Functions.sol\\\";\\nimport { FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\nimport { Constants } from \\\"./../helpers/Constants.sol\\\";\\n\\n/// @title Celer Fee Hub Facet\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice This contract provides the functionality to interact with the celer services through a defined relayer\\n/// @custom:version 1.0.0\\ncontract CelerFeeHubFacet is ICelerFeeHubFacet {\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    bytes32 constant STORAGE_NAMESPACE = keccak256(\\\"degenx.celer-fee-hub.storage.v1\\\");\\n\\n    address immutable relayer;\\n\\n    event QueueProcessed();\\n    event FeesSent();\\n    event UpdateThreshold(uint256 amount);\\n    event UpdateSendFeesWei(uint256 amount);\\n    event UpdateDeployFeesWei(uint256 amount);\\n    event RefundCollected(address asset, address receiver, uint256 amount);\\n    event RefundForwarded(address asset, address receiver, uint256 amount);\\n    event RelayerForChainAdded(address relayer, uint256 chainId);\\n    event RelayerForChainUpdated(address relayer, uint256 chainId);\\n    event RelayerForChainRemoved(uint256 chainId);\\n    event DeploymentSuccessful(uint64 indexed chainId);\\n\\n    error QueueEmpty();\\n    error NoChainsConfigured();\\n    error RefundFailed();\\n    error ChainExisting(uint256 chainId);\\n    error ChainNotExisting(uint256 chainId);\\n    error RelayerExists(address relayer);\\n    error ThresholdNotMet();\\n    error InsufficientFundsSent();\\n    error InsufficientFundsForGas();\\n\\n    /// @param sendFeesThreshold defines threshold when it is allowed to send fees to home chain\\n    /// @param sendFeesWei defines the funds in wei that are needed to initiate the process. leftovers are moved back to sender\\n    /// @param deployFeesWei defines the funds in wei that are needed to initiate the process. leftovers are moved back to sender\\n    /// @param chainIdToRelayer a map of chain ids and their matching relayer address\\n    struct Storage {\\n        uint256 sendFeesThreshold;\\n        uint256 sendFeesWei;\\n        uint256 deployFeesWei;\\n        mapping(uint256 => address) chainIdToRelayer;\\n    }\\n\\n    /// Constructor\\n    /// @param _relayer address of the relayer\\n    constructor(address _relayer) {\\n        relayer = _relayer;\\n    }\\n\\n    /// Adds a relayer for a specific chain id\\n    /// @param _relayer address of a relayer\\n    /// @param _chainId chain id of the relayer\\n    /// @dev this can only be executed by the FEE_MANAGER_ROLE, which is the DAO and the owner\\n    function addRelayerForChain(address _relayer, uint256 _chainId) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        addressZeroCheck(_relayer);\\n        if (_chainId == 0) revert ZeroValueNotAllowed();\\n        Storage storage s = _store();\\n        if (s.chainIdToRelayer[_chainId] != address(0)) revert ChainExisting(_chainId);\\n        s.chainIdToRelayer[_chainId] = _relayer;\\n        emit RelayerForChainAdded(_relayer, _chainId);\\n    }\\n\\n    /// Updates a relayer for a specific chain id\\n    /// @param _relayer address of a relayer\\n    /// @param _chainId chain id of the relayer\\n    /// @dev this can only be executed by the FEE_MANAGER_ROLE, which is the DAO and the owner\\n    function updateRelayerOnChain(address _relayer, uint256 _chainId) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        addressZeroCheck(_relayer);\\n        if (_chainId == 0) revert ZeroValueNotAllowed();\\n        Storage storage s = _store();\\n        if (s.chainIdToRelayer[_chainId] == address(0)) revert ChainNotExisting(_chainId);\\n        if (s.chainIdToRelayer[_chainId] == _relayer) revert RelayerExists(_relayer);\\n        s.chainIdToRelayer[_chainId] = _relayer;\\n        emit RelayerForChainUpdated(_relayer, _chainId);\\n    }\\n\\n    /// Removes a relayer for a specific chain id\\n    /// @param _chainId chain id of the relayer\\n    /// @dev this can only be executed by the FEE_MANAGER_ROLE, which is the DAO and the owner\\n    function removeRelayerOnChain(uint256 _chainId) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        Storage storage s = _store();\\n        if (s.chainIdToRelayer[_chainId] == address(0)) revert ChainNotExisting(_chainId);\\n        delete s.chainIdToRelayer[_chainId];\\n        emit RelayerForChainRemoved(_chainId);\\n    }\\n\\n    /// Sets the threshold a total fee can be sent to the home chain\\n    /// @param _amount threshold amount\\n    function updateSendFeesThreshold(uint256 _amount) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        Storage storage s = _store();\\n        s.sendFeesThreshold = _amount;\\n        emit UpdateThreshold(_amount);\\n    }\\n\\n    /// Sets the amount of fees that is being used to initiate the send fees process\\n    /// @param _wei amount of fees\\n    function updateSendFeesWei(uint256 _wei) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        Storage storage s = _store();\\n        s.sendFeesWei = _wei;\\n        emit UpdateSendFeesWei(_wei);\\n    }\\n\\n    /// Sets the amount of fees that is being used to initiate the deploy fees process\\n    /// @param _wei amount of fees\\n    function updateDeployFeesWei(uint256 _wei) external {\\n        LibAccessControlEnumerable.checkRole(Constants.FEE_MANAGER_ROLE);\\n        Storage storage s = _store();\\n        s.deployFeesWei = _wei;\\n        emit UpdateDeployFeesWei(_wei);\\n    }\\n\\n    /// @notice This method deploys added, updated or removed fee configuration to desired chains through CELER IM. It is executable by everyone (DeFi things obv)\\n    /// @dev Once the queue of the fee manager is filled with configs, it'll be processable. It creates an array of dtos which are being processed by the target chain and its relayer.\\n    function deployFeesWithCeler() external payable {\\n        LibFeeManagerStorage.FeeManagerStorage storage _managerStore = LibFeeManagerStorage.feeManagerStorage();\\n        Storage storage s = _store();\\n\\n        uint256 _providedWei = msg.value;\\n        if (_providedWei == 0 || s.deployFeesWei > _providedWei) revert InsufficientFundsSent();\\n\\n        uint256[] memory _chainIds = _managerStore.chainIds;\\n        if (_chainIds.length == 0) revert NoChainsConfigured();\\n\\n        bool _sync = false;\\n        mapping(uint256 => FeeSyncQueue[]) storage _queue = _managerStore.feeSyncQueue;\\n        for (uint256 i = 0; i < _chainIds.length; i++) {\\n            if (_queue[_chainIds[i]].length == 0) continue;\\n            if (!_sync) _sync = true;\\n            uint256 chainId = _chainIds[i];\\n            addressZeroCheck(s.chainIdToRelayer[chainId]);\\n            FeeConfigSyncDTO[] memory _dto = new FeeConfigSyncDTO[](_queue[chainId].length);\\n            for (uint256 j = 0; j < _queue[chainId].length; j++) {\\n                bytes32 feeId = _queue[chainId][j].id;\\n                FeeConfig storage _config = _managerStore.feeConfigs[feeId];\\n                _dto[j] = FeeConfigSyncDTO({\\n                    id: feeId,\\n                    fee: _config.fee,\\n                    action: _queue[chainId][j].action,\\n                    target: _managerStore.chainTargets[chainId]\\n                });\\n                _managerStore.feeDeployState[chainId][feeId] = FeeDeployState.Pending;\\n            }\\n\\n            address _target = LibFeeManager.getChainTarget(chainId);\\n            bytes memory _message = abi.encodeWithSelector(IFeeStoreFacet.syncFees.selector, _dto);\\n\\n            uint256 _fee = IRelayerCeler(relayer).deployFeesFeeCalc(_target, _message);\\n            if (_fee > _providedWei) revert InsufficientFundsForGas();\\n            _providedWei -= _fee;\\n\\n            IRelayerCeler(relayer).deployFees{ value: _fee }(s.chainIdToRelayer[chainId], _target, chainId, _message);\\n            delete _managerStore.feeSyncQueue[_chainIds[i]];\\n        }\\n        if (_sync) {\\n            if (_providedWei > 0) payable(msg.sender).sendValue(_providedWei);\\n            emit QueueProcessed();\\n        } else revert QueueEmpty();\\n    }\\n\\n    /// @inheritdoc ICelerFeeHubFacet\\n    function deployFeesWithCelerConfirm(uint64 _chainId, bytes calldata _message) external {\\n        if (relayer != msg.sender) revert NotAllowed();\\n        LibFeeManagerStorage.FeeManagerStorage storage _managerStore = LibFeeManagerStorage.feeManagerStorage();\\n        FeeConfigSyncDTO[] memory _dto = abi.decode(_message[4:], (FeeConfigSyncDTO[]));\\n        for (uint256 i = 0; i < _dto.length; i++) {\\n            _managerStore.feeDeployState[_chainId][_dto[i].id] = FeeDeployState.Deployed;\\n        }\\n    }\\n\\n    /// Sends fees stored on the FeeStore back to the home chain, respecting a bounty receiver\\n    /// @param minMaxSlippage external defined minimal max slippage by the estimation api of CELER\\n    /// @param _bountyReceiver address of the bounty receiver on the home chain\\n    /// @dev The bounty receiver is set because you can't relay on the initiator in the consuming\\n    ///      contract on the home chain, because contracts can execute this method without having\\n    ///      the same address on the home chain. It also transfers the tokens to the relayer which\\n    ///      then bridges the tokens and sends the message to the CELER IM service\\n    /// @notice Can be executed by everyone. Its success is dependend on the sendFeesThreshold being met\\n    function sendFeesWithCeler(uint32 minMaxSlippage, address _bountyReceiver) external payable {\\n        Storage storage s = _store();\\n        FeeConfigSyncHomeDTO memory _dto = LibFeeStore.prepareToSendFees(); // implicit zero fee check here\\n        if (_dto.totalFees < s.sendFeesThreshold) revert ThresholdNotMet();\\n\\n        uint256 _providedWei = msg.value;\\n        if (_providedWei == 0 || s.sendFeesWei > _providedWei) revert InsufficientFundsSent();\\n\\n        if (_bountyReceiver == address(0) || _bountyReceiver == address(0xdead)) revert AddressZero();\\n\\n        _dto.bountyReceiver = _bountyReceiver;\\n        IERC20(LibFeeStore.getIntermediateAsset()).safeTransfer(relayer, _dto.totalFees);\\n\\n        bytes memory _message = abi.encode(_dto);\\n        uint256 _fee = IRelayerCeler(relayer).sendFeesFeeCalc(_message);\\n\\n        if (_fee > _providedWei) revert InsufficientFundsForGas();\\n        _providedWei -= _fee;\\n\\n        IRelayerCeler(relayer).sendFees{ value: _fee }(LibFeeStore.getIntermediateAsset(), _dto.totalFees, minMaxSlippage, _message);\\n\\n        if (_providedWei > 0) payable(msg.sender).sendValue(_providedWei);\\n        emit FeesSent();\\n    }\\n\\n    /// viewables\\n\\n    function celerFeeHubSendFeesWei() external view returns (uint256 _wei) {\\n        Storage storage s = _store();\\n        _wei = s.sendFeesWei;\\n    }\\n\\n    function celerFeeHubDeployFeesWei() external view returns (uint256 _wei) {\\n        Storage storage s = _store();\\n        _wei = s.deployFeesWei;\\n    }\\n\\n    /// internals\\n\\n    /// Store\\n    function _store() internal pure returns (Storage storage s) {\\n        bytes32 position = STORAGE_NAMESPACE;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/helpers/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Constants {\\n    /*-------------------------------- Role --------------------------------*/\\n    // 0x0000000000000000000000000000000000000000000000000000000000000000\\n    bytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\n    // 0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775\\n    bytes32 constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    // 0xfc425f2263d0df187444b70e47283d622c70181c5baebb1306a01edba1ce184c\\n    bytes32 constant DEPLOYER_ROLE = keccak256(\\\"DEPLOYER_ROLE\\\");\\n    // 0x6c0757dc3e6b28b2580c03fd9e96c274acf4f99d91fbec9b418fa1d70604ff1c\\n    bytes32 constant FEE_MANAGER_ROLE = keccak256(\\\"FEE_MANAGER_ROLE\\\");\\n    // 0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6\\n    bytes32 constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n    // 0x3c11d16cbaffd01df69ce1c404f6340ee057498f5f00246190ea54220576a848\\n    bytes32 constant BURNER_ROLE = keccak256(\\\"BURNER_ROLE\\\");\\n    // 0x63eb04268b235ac1afacf3bcf4b19c5c175d0417a1555fb3ff79ae190f71ee7c\\n    bytes32 constant FEE_STORE_MANAGER_ROLE = keccak256(\\\"FEE_STORE_MANAGER_ROLE\\\");\\n    // 0x77f52ccf2f32e71a0cff8f14ad8c8303b7d2e4c7609b8fba963114f4db2af767\\n    bytes32 constant FEE_DISTRIBUTOR_PUSH_ROLE = keccak256(\\\"FEE_DISTRIBUTOR_PUSH_ROLE\\\");\\n    // 0xe85d5f1f8338cb18f500856d1568d0f3b0d0971f25b3ccd134475e991354edbf\\n    bytes32 constant FEE_DISTRIBUTOR_MANAGER = keccak256(\\\"FEE_DISTRIBUTOR_MANAGER\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*------------------------------- Fee ID -------------------------------*/\\n    // 0xacfc432e98ad100d9f8c385f3782bc88a17e1de7e53f69678cbcc41e8ffe72b0\\n    bytes32 constant ERC20_MARKETING_FEE = keccak256(\\\"ERC20_MARKETING_FEE\\\");\\n    // 0x6b78196f16f828b24a5a6584d4a1bcc5ce2f3154ba57839db273e6a4ebbe92c2\\n    bytes32 constant ERC20_REWARD_FEE = keccak256(\\\"ERC20_REWARD_FEE\\\");\\n    // 0x6e3678bee6f77c8a6179922c9a518b08407e6d9d2593ac683a87c979c8b31a12\\n    bytes32 constant ERC20_PLATFORM_FEE = keccak256(\\\"ERC20_PLATFORM_FEE\\\");\\n    // 0x6e2178bb28988b4c92cd3092e9e342e7639bfda2f68a02ac478cb084759607cf\\n    bytes32 constant ERC20_DEVELOPER_FEE = keccak256(\\\"ERC20_DEVELOPER_FEE\\\");\\n    /*----------------------------------------------------------------------*/\\n\\n    /*--------------------------- Relayer Actions --------------------------*/\\n    // 0xf145583e6e33d9da99af75b579493b11db4229a339336b82c748312f152b29a9\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES\\\");\\n    // 0xf375f410a0dc135af0d9a16e273eac999064981d8813a68af762e93567a43aac\\n    bytes32 constant RELAYER_ACTION_DEPLOY_FEES_CONFIRM = keccak256(\\\"RELAYER_ACTION_DEPLOY_FEES_CONFIRM\\\");\\n    // 0x9d62257b25ea052fe7cd5123fd6b791268b8673b073aae5de4a823c4dc7d7607\\n    bytes32 constant RELAYER_ACTION_SEND_FEES = keccak256(\\\"RELAYER_ACTION_SEND_FEES\\\");\\n    /*----------------------------------------------------------------------*/\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/helpers/Enums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// enums\\nenum FeeCurrency {\\n    Null,\\n    // L1\\n    Native,\\n    // different asset\\n    Token\\n}\\n\\nenum FeeType {\\n    Null,\\n    // absolute/onetime\\n    Default,\\n    // buy/sell depending on target\\n    From,\\n    // buy/sell depending on target\\n    To\\n}\\n\\nenum FeeSyncAction {\\n    Null,\\n    // adding a fee\\n    Add,\\n    // updating a fee\\n    Update,\\n    // removing a fee\\n    Delete\\n}\\n\\nenum FeeDeployState {\\n    Null,\\n    // a fee is recently added, updated or removed\\n    Queued,\\n    // a fee config is deployed\\n    Pending,\\n    // a fee gets receives information about being deployed\\n    Deployed\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/helpers/Functions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { AddressZero } from \\\"./GenericErrors.sol\\\";\\n\\nfunction addressZeroCheck(address _candidate) pure {\\n    if (_candidate == address(0)) revert AddressZero();\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/helpers/GenericErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nerror AddressZero();\\nerror ZeroValueNotAllowed();\\nerror InsufficientAllowance();\\nerror InsufficientBalance();\\nerror InsufficientFunds();\\nerror NotAllowed();\\nerror AlreadyInitialized();\\nerror NoReetrancy();\\nerror WrongChain();\\nerror UnexpectedBalance();\\nerror FailToSendNative();\\n\"\r\n    },\r\n    \"contracts/diamond/helpers/Structs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport { FeeCurrency, FeeType, FeeSyncAction, FeeDeployState } from \\\"./Enums.sol\\\";\\n\\n/// General Fee Config\\n\\nstruct FeeConfig {\\n    // relative: 10000 = 1% or 100 = 0.01%\\n    // absolute: 10000 = 1 or 1 = 0.0001\\n    uint256 fee;\\n    // Assets are always going to the fee distributor on the home chain. This config is necessary to define which receiver gets this asset.\\n    // It's purpose can be overwritten by the FeeDistributor. So it will serve as a fallback.\\n    address receiver;\\n    // defines the type. It does not have a purpose yet but may have in the future\\n    // see {Enums->FeeType}\\n    FeeType ftype;\\n    // type of how the fees should be handles\\n    // see {Enums->FeeCurrency}\\n    FeeCurrency currency;\\n    // // Deploy state of a fee config\\n    // // see {Enums->FeeDeployState}\\n    // FeeDeployState deployState;\\n}\\n\\n/// Fee Management\\n\\nstruct AddFeeConfigParams {\\n    // fee id which can be defined elsewhere but needs to be a bytes32\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->receiver}\\n    address receiver;\\n    // see {struct FeeConfig->ftype}\\n    FeeType ftype;\\n    // see {struct FeeConfig->currency}\\n    FeeCurrency currency;\\n}\\n\\nstruct UpdateFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n    // see {struct FeeConfig->fee}\\n    uint256 fee;\\n    // see {struct FeeConfig->fee}\\n    address receiver;\\n}\\n\\nstruct RemoveFeeConfigParams {\\n    // see {struct AddFeeConfigParams->id}\\n    bytes32 id;\\n}\\n\\n/// Chain Management\\n\\nstruct AddChainParams {\\n    // chain id\\n    uint256 chainId;\\n    // address of the participant, most likely the diamon address of the target chain\\n    address target;\\n}\\nstruct RemoveChainParams {\\n    // chain id\\n    uint256 chainId;\\n}\\n\\n/// Fee & Chain Management\\n\\nstruct AssignFeeConfigToChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to assign the fee config id to\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromChainParams {\\n    // fee config id\\n    bytes32 id;\\n    // chain id to unassign the fee config id from\\n    uint256 chainId;\\n}\\nstruct UnassignFeeConfigFromAllChainsParams {\\n    // fee config id\\n    bytes32 id;\\n}\\n\\n/// Syncing\\n\\nstruct FeeSyncQueue {\\n    // fee config id\\n    bytes32 id;\\n    // chain id\\n    uint256 chainId;\\n    // action to execute on the target chain\\n    FeeSyncAction action;\\n}\\n\\nstruct FeeConfigDeployState {\\n    bytes32 id;\\n    FeeDeployState state;\\n}\\n\\n/// Data Transfer Objects\\n\\nstruct FeeConfigSyncDTO {\\n    // fee config id\\n    bytes32 id;\\n    // fee value\\n    uint256 fee;\\n    // address to make conditional charged based on a specific token\\n    // a contract can decide by itself whether to it or not\\n    // if defined and used, this fee should be restricted and charged onto a specific token\\n    address target;\\n    // desired action to execute on the target chain\\n    FeeSyncAction action;\\n}\\nstruct FeeConfigSyncHomeFees {\\n    // fee config id\\n    bytes32 id;\\n    // amount of the collected fees of this if\\n    uint256 amount;\\n}\\nstruct FeeConfigSyncHomeDTO {\\n    // total amount of collected fees\\n    uint256 totalFees;\\n    // address of the bounty receiver on the home chain\\n    address bountyReceiver;\\n    // containing fee information that will moved to the home chain\\n    FeeConfigSyncHomeFees[] fees;\\n}\\n\\nstruct CelerRelayerData {\\n    // bytes32 hash which defined the action that should be taken\\n    bytes32 what;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // encoded message of the desired scope\\n    bytes message;\\n}\\n\\n/// Fee Store\\n\\nstruct FeeStoreConfig {\\n    // fee config id\\n    bytes32 id;\\n    // fee\\n    uint256 fee;\\n    // address of the contract which what is being executed to\\n    address target;\\n    // flag for being markes as deleted\\n    bool deleted;\\n}\\n\\n/// Fee Distributor\\n\\nstruct AddReceiverParams {\\n    // public name for the receiver\\n    // can be \\\"Staking\\\", \\\"Liquidity Backing\\\" or whatever\\n    string name;\\n    // potion of share in points. Points will be summarized in the distribution to calculate the relative share\\n    uint64 points;\\n    // address of the contract/account that receives the share\\n    address account;\\n    // swap path in case a share receiver expects another token then the intermediate token of the bridge\\n    address[] swapPath;\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/interfaces/ICelerFeeHubFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\n/// @title CelerFeeHubFacet Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface ICelerFeeHubFacet {\\n    /// Registers the successful deployment of the fees to the given chain\\n    /// @param _chainId chain id\\n    /// @param _message encoded message\\n    function deployFeesWithCelerConfirm(uint64 _chainId, bytes memory _message) external;\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/interfaces/IDiamondCut.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/interfaces/IFeeDistributorFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { FeeConfigSyncHomeDTO } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Fee Distributor Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IFeeDistributorFacet {\\n    // this is guarateed to get the tokens before being executed\\n    /// Pushes the fee to the desired receivers\\n    /// @param _token the token address being received\\n    /// @param _amount amount of tokens being received\\n    /// @param _dto the dto of the fee store to determine the split of _amount\\n    /// @dev an updated dto needs to be created since the receiving amount is not\\n    ///      matching the sent amount anymore. The contract will 100% receive the\\n    ///      _token _amount before being executed\\n    /// @dev only available to FEE_DISTRIBUTOR_PUSH_ROLE role\\n    /// @dev if the token doesn't match, it will fail.\\n    function pushFees(address _token, uint256 _amount, FeeConfigSyncHomeDTO calldata _dto) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/interfaces/IFeeStoreFacet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { FeeStoreConfig, FeeConfigSyncDTO, FeeConfigSyncHomeDTO } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Fee Store Facet Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IFeeStoreFacet {\\n    /// Synchronizes fee configs\\n    /// @param _feeConfigSyncDTO array of fee configs to process in the fee store\\n    function syncFees(FeeConfigSyncDTO[] calldata _feeConfigSyncDTO) external payable;\\n\\n    /// Restores fees which are actually intended to be sent to the home chain\\n    /// @param _dto data which is primarily used for sending fees to the home chain\\n    function restoreFeesFromSendFees(FeeConfigSyncHomeDTO memory _dto) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/interfaces/IRelayerCeler.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\n/// @title Relayer Celer Interface\\n/// @author Daniel <danieldegendev@gmail.com>\\ninterface IRelayerCeler {\\n    /// Deploys the fees to the desired chain\\n    /// @param _receiver relayer on target chain\\n    /// @param _target diamond address on target chain\\n    /// @param _chainId target chain id\\n    /// @param _message message to send to the message bus\\n    function deployFees(address _receiver, address _target, uint256 _chainId, bytes calldata _message) external payable;\\n\\n    /// Pre calculates upcoming fees for deploying fees\\n    /// @param _target diamond address on target chain\\n    /// @param _message message to send to the message bus\\n    function deployFeesFeeCalc(address _target, bytes calldata _message) external view returns (uint256 _wei);\\n\\n    /// Sends the fees to the home chain\\n    /// @param _asset asset that get send\\n    /// @param _amount amount of assets that gets send\\n    /// @param minMaxSlippage calculated slippage by celer\\n    /// @param _message message to send to the message bus\\n    function sendFees(address _asset, uint256 _amount, uint32 minMaxSlippage, bytes calldata _message) external payable;\\n\\n    /// Pre calculates upcoming fees for sending fees\\n    /// @param _message message to send to the message bus\\n    function sendFeesFeeCalc(bytes calldata _message) external view returns (uint256 _wei);\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/libraries/LibAccessControlEnumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary LibAccessControlEnumerable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    bytes32 constant ACCESS_CONTROL_STORAGE_POSITION = keccak256(\\\"degenx.access.control.storage\\\");\\n\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    struct AccessControlStorage {\\n        mapping(bytes32 => RoleData) roles;\\n        mapping(bytes32 => EnumerableSet.AddressSet) roleMembers;\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    function accessControlStorage() internal pure returns (AccessControlStorage storage acs) {\\n        bytes32 position = ACCESS_CONTROL_STORAGE_POSITION;\\n        assembly {\\n            acs.slot := position\\n        }\\n    }\\n\\n    function checkRole(bytes32 role) internal view {\\n        checkRole(role, msg.sender);\\n    }\\n\\n    function checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    function hasRole(bytes32 role, address account) internal view returns (bool) {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        return acs.roles[role].members[account];\\n    }\\n\\n    function grantRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (!hasRole(role, account)) {\\n            acs.roles[role].members[account] = true;\\n            emit RoleGranted(role, account, msg.sender);\\n            acs.roleMembers[role].add(account);\\n        }\\n    }\\n\\n    function revokeRole(bytes32 role, address account) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        if (hasRole(role, account)) {\\n            acs.roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, msg.sender);\\n            acs.roleMembers[role].remove(account);\\n        }\\n    }\\n\\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) internal {\\n        AccessControlStorage storage acs = accessControlStorage();\\n        bytes32 previousAdminRole = acs.roles[role].adminRole;\\n        acs.roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/libraries/LibDiamond.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\nimport { IDiamondCut } from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\\n// The loupe functions are required by the EIP2535 Diamonds standard\\n\\nerror InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            return;\\n        }\\n        enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n        (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n        if (!success) {\\n            if (error.length > 0) {\\n                // bubble up error\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(error)\\n                    revert(add(32, error), returndata_size)\\n                }\\n            } else {\\n                revert InitializationFunctionReverted(_init, _calldata);\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/libraries/LibFeeManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport \\\"./LibFeeManagerStorage.sol\\\";\\nimport { FeeConfig, FeeSyncQueue } from \\\"./../helpers/Structs.sol\\\";\\nimport { FeeType, FeeSyncAction, FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\n\\n/// @title Lib Fee Manager\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Helper functions for the Fee Manager Facet\\nlibrary LibFeeManager {\\n    /// viewables\\n\\n    /// Checks whether a fee config exsists or not\\n    /// @param _id fee config id\\n    function exists(bytes32 _id) internal view returns (bool _exists) {\\n        _exists = LibFeeManagerStorage.feeManagerStorage().feeConfigs[_id].ftype != FeeType.Null;\\n    }\\n\\n    /// Checks whether a fee config is in use on a specific chain or not\\n    /// @param _id fee config id\\n    function isFeeConfigInUse(bytes32 _id) internal view returns (bool _exists) {\\n        for (uint256 i = 0; i < store().chainIds.length; i++) {\\n            for (uint256 j = 0; j < store().chainIdFeeConfigMap[store().chainIds[i]].length; j++) {\\n                if (store().chainIdFeeConfigMap[store().chainIds[i]][j] == _id) {\\n                    _exists = true;\\n                    break;\\n                }\\n            }\\n        }\\n    }\\n\\n    /// Gets the target address for a specific chain\\n    /// @param _chainId chain id\\n    /// @dev normally the address of the diamond on the target chain\\n    function getChainTarget(uint256 _chainId) internal view returns (address _target) {\\n        _target = store().chainTargets[_chainId];\\n    }\\n\\n    /// Gets the fee config by a given id\\n    /// @param _id fee config id\\n    function getFeeConfigById(bytes32 _id) internal view returns (FeeConfig memory _feeConfig) {\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        _feeConfig = s.feeConfigs[_id];\\n    }\\n\\n    /// internals\\n\\n    /// Queues up a specific fee config for a specific chain with a specific action\\n    /// @param _id fee config id\\n    /// @param _chainId chain id\\n    /// @param _action action to execute on the target chain\\n    function queue(bytes32 _id, uint256 _chainId, FeeSyncAction _action) internal {\\n        LibFeeManagerStorage.FeeManagerStorage storage s = LibFeeManagerStorage.feeManagerStorage();\\n        bool alreadInQueue = false;\\n        for (uint256 i = 0; i < s.feeSyncQueue[_chainId].length; i++)\\n            alreadInQueue = alreadInQueue || (s.feeSyncQueue[_chainId][i].id == _id && s.feeSyncQueue[_chainId][i].chainId == _chainId);\\n\\n        if (!alreadInQueue) {\\n            s.feeSyncQueue[_chainId].push(FeeSyncQueue({ id: _id, chainId: _chainId, action: _action }));\\n            s.feeDeployState[_chainId][_id] = FeeDeployState.Queued;\\n        }\\n    }\\n\\n    /// Simple archiving of fee configs\\n    /// @param _id fee config id\\n    /// will be called on update and delete of a fee config\\n    function archiveFeeConfig(bytes32 _id) internal {\\n        FeeConfig storage feeConfigToArchive = LibFeeManagerStorage.feeManagerStorage().feeConfigs[_id];\\n        LibFeeManagerStorage.feeManagerStorage().feeConfigsArchive[_id].push(feeConfigToArchive);\\n    }\\n\\n    /// store\\n    function store() internal pure returns (LibFeeManagerStorage.FeeManagerStorage storage _store) {\\n        _store = LibFeeManagerStorage.feeManagerStorage();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/libraries/LibFeeManagerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeDeployState } from \\\"./../helpers/Enums.sol\\\";\\nimport { FeeConfig, FeeSyncQueue } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Lib Fee Manager Storage\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Storage for the Fee Manager Facet\\nlibrary LibFeeManagerStorage {\\n    bytes32 constant FEE_MANAGER_STORAGE_POSITION = keccak256(\\\"degenx.fee-manager.storage.v1\\\");\\n\\n    struct FeeManagerStorage {\\n        // all available chains\\n        uint256[] chainIds;\\n        // all available configs\\n        bytes32[] feeConfigIds;\\n        // contract to chain assignments\\n        // chainId => contract\\n        mapping(uint256 => address) chainTargets;\\n        // fee config to chain assignment to store which config should be available on which chain\\n        // chainId => list of fee config ids\\n        mapping(uint256 => bytes32[]) chainIdFeeConfigMap;\\n        // flags for quick checks to avoid looping through chainIdFeeConfigMap\\n        // chainId => feeConfigId\\n        mapping(uint256 => mapping(bytes32 => bool)) chainIdFeeConfig;\\n        // flag if a specific chain is being supported\\n        // chainId => true/false\\n        mapping(uint256 => bool) isChainSupported;\\n        // fee config id to fee config mapping. The fee config itself doesn't need to know its id\\n        // feeConfigId => FeeConfig\\n        mapping(bytes32 => FeeConfig) feeConfigs;\\n        // fee config archive of recent fee config settings to a specific fee config id\\n        // feeConfigId => list of fee config variants\\n        mapping(bytes32 => FeeConfig[]) feeConfigsArchive;\\n        // queue for syncing configs with the target contracts\\n        // chainId => list of fee sync data\\n        mapping(uint256 => FeeSyncQueue[]) feeSyncQueue;\\n        // deployment state per chain per fee config id\\n        // chainId => fee config id => deployment state of a fee config\\n        mapping(uint256 => mapping(bytes32 => FeeDeployState)) feeDeployState;\\n    }\\n\\n    /// store\\n    function feeManagerStorage() internal pure returns (FeeManagerStorage storage fms) {\\n        bytes32 position = FEE_MANAGER_STORAGE_POSITION;\\n        assembly {\\n            fms.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/libraries/LibFeeStore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.17;\\n\\nimport { IERC20Metadata } from \\\"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\\\";\\nimport { SafeERC20 } from \\\"@solidstate/contracts/utils/SafeERC20.sol\\\";\\nimport { IERC20 } from \\\"@solidstate/contracts/interfaces/IERC20.sol\\\";\\n\\nimport { LibFeeStoreStorage } from \\\"./LibFeeStoreStorage.sol\\\";\\nimport { ZeroValueNotAllowed, NotAllowed } from \\\"./../helpers/GenericErrors.sol\\\";\\nimport { FeeStoreConfig, FeeConfigSyncHomeDTO, FeeConfigSyncHomeFees } from \\\"./../helpers/Structs.sol\\\";\\n\\n/// @title Fee Store Library\\n/// @author Daniel <danieldegendev@gmail.com>\\n/// @notice Functions to help with the fee store for other instances\\nlibrary LibFeeStore {\\n    using SafeERC20 for IERC20;\\n    uint256 constant DENOMINATOR_RELATIVE = 10 ** 5; // bps denominator\\n    uint256 constant DENOMINATOR_ABSOLUTE = 10 ** 4;\\n\\n    error ZeroFees();\\n    error FeeNotExisting(bytes32 id);\\n    error FeeExists(bytes32 id);\\n\\n    event FeeConfigAdded(bytes32 indexed id);\\n    event FeeConfigUpdated(bytes32 indexed id);\\n    event FeeConfigDeleted(bytes32 indexed id);\\n    event FeeConfigMarkedAsDeleted(bytes32 indexed id);\\n    event FeesPrepared(uint256 amount, FeeConfigSyncHomeDTO candidate);\\n\\n    /// Store a specific amount of fees in the store\\n    /// @param _feeConfigId fee config id\\n    /// @param _amount amount of tokens\\n    function putFees(bytes32 _feeConfigId, uint256 _amount) internal {\\n        if (_amount == 0) revert ZeroValueNotAllowed();\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        FeeStoreConfig memory _config = s.feeConfigs[_feeConfigId];\\n        if (_config.id == bytes32(\\\"\\\")) revert NotAllowed();\\n        s.collectedFees[_config.id] += _amount;\\n        s.collectedFeesTotal += _amount;\\n    }\\n\\n    /// Prepares the fees collected on the store to be send to the home chain\\n    /// @return _dto the dto that will be used on the home chain for receiving and process fees\\n    /// @dev this method will also clean up every fee collected and sets it to 0\\n    function prepareToSendFees() internal returns (FeeConfigSyncHomeDTO memory _dto) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.collectedFeesTotal == 0) revert ZeroFees();\\n\\n        uint256 _feeIndex = 0;\\n        uint256 _noOfExpectedFees = 0;\\n\\n        // get how many fees need to get sent\\n        for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n            if (s.collectedFees[s.feeConfigIds[i]] > 0) _noOfExpectedFees++;\\n            unchecked {\\n                i++;\\n            }\\n        }\\n\\n        // collect amounts and gathers configs\\n        _dto.fees = new FeeConfigSyncHomeFees[](_noOfExpectedFees);\\n        for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n            bytes32 _id = s.feeConfigIds[i];\\n            if (s.collectedFees[_id] > 0) {\\n                uint256 _amount = s.collectedFees[_id];\\n                s.collectedFees[_id] = 0;\\n                if (s.feeConfigs[_id].deleted) deleteFee(_id);\\n                _dto.totalFees += _amount;\\n                _dto.fees[_feeIndex] = FeeConfigSyncHomeFees({ id: _id, amount: _amount });\\n                unchecked {\\n                    _feeIndex++;\\n                }\\n            }\\n            unchecked {\\n                i++;\\n            }\\n        }\\n        s.collectedFeesTotal = 0;\\n        emit FeesPrepared(_dto.totalFees, _dto);\\n    }\\n\\n    /// Removes a fee from the store\\n    /// @param _id fee id\\n    /// @dev if a fee is still in use, it will be marked as deleted. Once fees get moved to home chain, it will be deleted properly\\n    function deleteFee(bytes32 _id) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id == bytes32(0)) revert FeeNotExisting(_id);\\n        if (s.collectedFees[_id] > 0) {\\n            s.feeConfigs[_id].deleted = true;\\n            emit FeeConfigMarkedAsDeleted(_id);\\n        } else {\\n            delete s.collectedFees[_id];\\n            delete s.feeConfigs[_id];\\n            for (uint256 i = 0; i < s.feeConfigIds.length; ) {\\n                if (s.feeConfigIds[i] == _id) {\\n                    s.feeConfigIds[i] = s.feeConfigIds[s.feeConfigIds.length - 1];\\n                    break;\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n            s.feeConfigIds.pop();\\n            emit FeeConfigDeleted(_id);\\n        }\\n    }\\n\\n    /// Adds a fee to the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function addFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id != bytes32(0)) revert FeeExists(_id);\\n        s.feeConfigs[_id] = FeeStoreConfig({ id: _id, fee: _fee, target: _target, deleted: false });\\n        s.feeConfigIds.push(_id);\\n        emit FeeConfigAdded(_id);\\n    }\\n\\n    /// Updates a fee on the store\\n    /// @param _id fee id\\n    /// @param _fee fee value\\n    /// @param _target the target address\\n    function updateFee(bytes32 _id, uint256 _fee, address _target) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        if (s.feeConfigs[_id].id == bytes32(0)) revert FeeNotExisting(_id);\\n        s.feeConfigs[_id] = FeeStoreConfig({ id: _id, fee: _fee, target: _target, deleted: false });\\n        emit FeeConfigUpdated(_id);\\n    }\\n\\n    /// viewables\\n\\n    /// Calculates the relative fee based on the inserted amount\\n    /// @param _feeConfigId fee config id\\n    /// @param _asset address of the token\\n    /// @param _amount amount that fees are based on\\n    /// @return _amountNet amount excluding fee\\n    /// @return _fee amount of fee\\n    /// @return _feePoints fee value that is applied\\n    function calcFeesRelative(\\n        bytes32 _feeConfigId,\\n        address _asset,\\n        uint256 _amount\\n    ) internal view returns (uint256 _amountNet, uint256 _fee, uint256 _feePoints) {\\n        return calcFees(_feeConfigId, _asset, _amount, false);\\n    }\\n\\n    /// Calculates the absolute fee based on the inserted amount\\n    /// @param _feeConfigId fee config id\\n    /// @param _asset address of the token\\n    /// @param _amount amount that fees are based on\\n    /// @return _amountNet amount excluding fee\\n    /// @return _fee amount of fee\\n    /// @return _feePoints fee value that is applied\\n    function calcFeesAbsolute(\\n        bytes32 _feeConfigId,\\n        address _asset,\\n        uint256 _amount\\n    ) internal view returns (uint256 _amountNet, uint256 _fee, uint256 _feePoints) {\\n        return calcFees(_feeConfigId, _asset, _amount, true);\\n    }\\n\\n    /// Calculates the relative or absolute fees based on the inserted amount\\n    /// @param _feeConfigId fee config id\\n    /// @param _asset address of the token\\n    /// @param _amount amount that fees are based on\\n    /// @param _absolute whether a calculation is relative or absolute\\n    /// @return _amountNet amount excluding fee\\n    /// @return _fee amount of fee\\n    /// @return _feePoints fee value that is applied\\n    function calcFees(\\n        bytes32 _feeConfigId,\\n        address _asset,\\n        uint256 _amount,\\n        bool _absolute\\n    ) internal view returns (uint256 _amountNet, uint256 _fee, uint256 _feePoints) {\\n        if (_amount == 0) revert ZeroValueNotAllowed();\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        FeeStoreConfig memory _config = s.feeConfigs[_feeConfigId];\\n        if (_config.id == bytes32(\\\"\\\")) return (_amount, 0, 0);\\n        _feePoints = _config.fee;\\n        _fee = _absolute\\n            ? ((_feePoints * (10 ** IERC20Metadata(_asset).decimals())) / DENOMINATOR_ABSOLUTE)\\n            : ((_amount * _feePoints) / DENOMINATOR_RELATIVE);\\n        _amountNet = _amount - _fee;\\n    }\\n\\n    function getOperator() internal view returns (address _operator) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        _operator = s.operator;\\n    }\\n\\n    function setOperator(address _operator) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        s.operator = _operator;\\n    }\\n\\n    function getIntermediateAsset() internal view returns (address _intermediateAsset) {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        _intermediateAsset = s.intermediateAsset;\\n    }\\n\\n    function setIntermediateAsset(address _intermediateAsset) internal {\\n        LibFeeStoreStorage.FeeStoreStorage storage s = LibFeeStoreStorage.feeStoreStorage();\\n        s.intermediateAsset = _intermediateAsset;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/diamond/libraries/LibFeeStoreStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.19;\\n\\nimport { FeeStoreConfig } from \\\"./../helpers/Structs.sol\\\";\\n\\nlibrary LibFeeStoreStorage {\\n    bytes32 constant FEE_STORE_STORAGE_POSITION = keccak256(\\\"degenx.fee-store.storage.v1\\\");\\n\\n    struct FeeStoreStorage {\\n        // feeConfigId => FeeStoreConfig\\n        mapping(bytes32 => FeeStoreConfig) feeConfigs;\\n        // feeConfigId => amount of fees collected\\n        mapping(bytes32 => uint256) collectedFees;\\n        // represents a sum of each amount in collectedFees\\n        uint256 collectedFeesTotal;\\n        bytes32[] feeConfigIds;\\n        address operator;\\n        address intermediateAsset;\\n    }\\n\\n    function feeStoreStorage() internal pure returns (FeeStoreStorage storage fss) {\\n        bytes32 position = FEE_STORE_STORAGE_POSITION;\\n        assembly {\\n            fss.slot := position\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 99999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressUtils__NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainExisting\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"ChainNotExisting\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"FeeNotExisting\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFundsForGas\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFundsSent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoChainsConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueEmpty\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RefundFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"RelayerExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeERC20__OperationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThresholdNotMet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroFees\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroValueNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"}],\"name\":\"DeploymentSuccessful\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"FeesSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"QueueProcessed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefundForwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RelayerForChainAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RelayerForChainRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"}],\"name\":\"RelayerForChainUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateDeployFeesWei\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateSendFeesWei\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UpdateThreshold\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"addRelayerForChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"celerFeeHubDeployFeesWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"celerFeeHubSendFeesWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployFeesWithCeler\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"deployFeesWithCelerConfirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"removeRelayerOnChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"minMaxSlippage\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_bountyReceiver\",\"type\":\"address\"}],\"name\":\"sendFeesWithCeler\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"updateDeployFeesWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_chainId\",\"type\":\"uint256\"}],\"name\":\"updateRelayerOnChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"updateSendFeesThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_wei\",\"type\":\"uint256\"}],\"name\":\"updateSendFeesWei\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CelerFeeHubFacet", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "99999", "ConstructorArguments": "000000000000000000000000d5e3952e9fca45f257dc1d7d4c178fabffac1715", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}