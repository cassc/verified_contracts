{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.24;\r\n\r\nlibrary SafeMath {\r\n \r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC165 {\r\n  \r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n\r\ninterface IERC721 is IERC165 {\r\n \r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function safeTransferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 tokenId\r\n    ) external;\r\n\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    function setApprovalForAll(address operator, bool _approved) external;\r\n\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ninterface IERC721Enumerable is IERC721 {\r\n  \r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n    function tokenByIndex(uint256 index) external view returns (uint256);\r\n}\r\n\r\ninterface IERC721Receiver {\r\n     function onERC721Received(\r\n         address operator,\r\n         address from,\r\n         uint256 tokenId,\r\n         bytes calldata data\r\n     ) external returns (bytes4);\r\n    }\r\n\r\ninterface IERC721Permit is IERC721 {\r\n  \r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function permit(\r\n        address spender,\r\n        uint256 tokenId,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external payable;\r\n}\r\n\r\ninterface INonfungiblePositionManager is IERC721Permit {\r\n\r\n    struct CollectParams {\r\n        uint256 tokenId;\r\n        address recipient;\r\n        uint128 amount0Max;\r\n        uint128 amount1Max;\r\n    }\r\n    \r\n    function collect(CollectParams calldata params) external payable returns (uint256 amount0, uint256 amount1);\r\n\r\n}\r\n\r\ncontract COVFEFE_UNIV3LP_LOCKER {\r\n    using SafeMath for uint256;\r\n\r\n    address public lpOwner;\r\n    address public nftContract;\r\n    uint256 public lockUpEndTime;\r\n    bool public isNFTLocked;\r\n    bool public isWithdrawalTriggered;\r\n    INonfungiblePositionManager inpManager = INonfungiblePositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\r\n\r\n    modifier onlylpOwner() {\r\n        require(msg.sender == lpOwner, \"Only lpOwner can call this function\");\r\n        _;\r\n    }\r\n\r\n    constructor() { \r\n        lpOwner = msg.sender;\r\n        nftContract = 0xC36442b4a4522E871399CD717aBDD847Ab11FE88; \r\n        isNFTLocked = false;\r\n        isWithdrawalTriggered = false;\r\n    }\r\n\r\n    function lockLPNFT(uint256 tokenId) external onlylpOwner {\r\n        require(!isNFTLocked, \"LP NFT is already locked\");\r\n        IERC721(nftContract).transferFrom(msg.sender, address(this), tokenId);\r\n        isNFTLocked = true;\r\n    }\r\n\r\n    function triggerWithdraw() external onlylpOwner {\r\n        require(isNFTLocked, \"LP NFT is not locked\");\r\n        require(lockUpEndTime == 0, \"Withdrawal is already triggered\");\r\n        lockUpEndTime = block.timestamp.add(30 days); \r\n        isWithdrawalTriggered = true;\r\n    }\r\n\r\n    function cancelWithdrawTrigger() external onlylpOwner {\r\n        require(isNFTLocked, \"LP NFT is not locked\");\r\n        require(lockUpEndTime != 0, \"Withdrawal is not triggered\");\r\n\r\n        lockUpEndTime = 0;\r\n        isWithdrawalTriggered = false;\r\n    }\r\n\r\n    function withdrawNFTLP(uint256 tokenId) external onlylpOwner {\r\n        require(isNFTLocked, \"LP NFT is not locked\");\r\n        require(lockUpEndTime != 0, \"Withdrawal is not triggered\");\r\n        require(block.timestamp >= lockUpEndTime, \"Lock-up period has not ended yet\");\r\n\r\n        IERC721(nftContract).transferFrom(address(this), msg.sender, tokenId); // LP token ID is 509557\r\n\r\n        isNFTLocked = false;\r\n        lockUpEndTime = 0;\r\n        isWithdrawalTriggered = false;\r\n    }\r\n\r\n    function changeLockOwner(address newOwner) external onlylpOwner {\r\n        require(newOwner != address(0), \"Invalid new owner address\");\r\n        lpOwner = newOwner;\r\n    }\r\n\r\n     function claimFees(uint256 _lppairid) external onlylpOwner returns (uint256 amount0, uint256 amount1) {\r\n        INonfungiblePositionManager.CollectParams memory params =\r\n            INonfungiblePositionManager.CollectParams({\r\n                tokenId: _lppairid,\r\n                recipient: msg.sender,\r\n                amount0Max: type(uint128).max,\r\n                amount1Max: type(uint128).max\r\n            });\r\n        (amount0, amount1) = inpManager.collect(params);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"cancelWithdrawTrigger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"changeLockOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lppairid\",\"type\":\"uint256\"}],\"name\":\"claimFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNFTLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isWithdrawalTriggered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"lockLPNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockUpEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"triggerWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawNFTLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "COVFEFE_UNIV3LP_LOCKER", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c7de9289fbd101ba54fa4f893d62eb30c7795894e4c04a07c3ce74bca555e620"}