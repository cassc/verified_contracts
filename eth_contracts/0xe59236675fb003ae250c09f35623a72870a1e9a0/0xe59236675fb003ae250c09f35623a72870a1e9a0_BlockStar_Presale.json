{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.10;\r\n\r\ninterface IERC20 {\r\n  function totalSupply() external view returns (uint256);\r\n\r\n  function balanceOf(address owner) external view returns (uint256);\r\n\r\n  function transfer(address to, uint256 value) external returns (bool);\r\n\r\n  function transferFrom(\r\n    address from,\r\n    address to,\r\n    uint256 value\r\n  ) external returns (bool);\r\n\r\n  function approve(address spender, uint256 value) external returns (bool);\r\n\r\n  function allowance(\r\n    address owner,\r\n    address spender\r\n  ) external view returns (uint256);\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 value);\r\n  event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface AggregatorV3Interface {\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n}\r\n\r\ncontract BlockStar_Presale {\r\n  IERC20 public Token;\r\n  IERC20 public USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n  AggregatorV3Interface public priceFeed;\r\n\r\n  address payable public owner;\r\n\r\n  uint256 public tokenPerUsd = 33 ether;\r\n  uint256 public totalUsers;\r\n  uint256 public soldToken;\r\n  uint256 public totalSupply = 1500_000_000 ether;\r\n  uint256 public minimumBuyInUsdt = 1 * 1e6;\r\n  uint256 public minimumBuyInEth = 0.00054 ether;\r\n  uint256 public maximumBuy = 3000000 ether;\r\n  uint256 public amountRaisedETHUSDT;\r\n  uint256 public amountRaisedUSDT;\r\n\r\n  bool public presaleStatus;\r\n  bool public enableClaim;\r\n\r\n  uint256 public constant divider = 100;\r\n\r\n  // Define the vesting period (in seconds) for 70% of the tokens (12 weeks)\r\n  uint256 public vestingStartTime;\r\n  uint256 public vestingDuration = 90 days;\r\n\r\n  struct User {\r\n    uint256 eth_usdt_balance;\r\n    uint256 usdt_balance;\r\n    uint256 token_balance;\r\n    uint256 claimable_amount;\r\n    uint256 vesting_amount;\r\n    uint256 claimed_token;\r\n  }\r\n\r\n  mapping(address => User) public users;\r\n\r\n  event BuyToken(address indexed user, uint256 amount);\r\n  event ClaimToken(address indexed user, uint256 amount);\r\n  event UpdatePrice(uint256 oldPrice, uint256 newPrice);\r\n  event OwnershipTransferred(\r\n    address indexed previousOwner,\r\n    address indexed newOwner\r\n  );\r\n\r\n  modifier onlyOwner() {\r\n    require(msg.sender == owner, \"Presale: Not an owner\");\r\n    _;\r\n  }\r\n\r\n  constructor(address _tokenAddress) {\r\n    Token = IERC20(_tokenAddress);\r\n    owner = payable(msg.sender);\r\n    priceFeed = AggregatorV3Interface(\r\n      0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\r\n    );\r\n    presaleStatus = true;\r\n  }\r\n\r\n  receive() external payable {}\r\n\r\n  function getLatestPrice() public view returns (uint256) {\r\n    (, int256 price, , , ) = priceFeed.latestRoundData();\r\n    return uint256(price);\r\n  }\r\n\r\n  function buyToken() public payable {\r\n    require(presaleStatus, \"Presale: Presale is finished\");\r\n    require(\r\n      msg.value >= minimumBuyInEth,\r\n      \"Presale: Amount should be greater than minimum buy\"\r\n    );\r\n    require(soldToken <= totalSupply, \"Presale: All tokens sold\");\r\n\r\n    uint256 totalTokens = nativeToToken(msg.value);\r\n\r\n    // Calculate the amount to vest (70%)\r\n    uint256 vestingAmount = (totalTokens * 70) / 100;\r\n    uint256 nonVestingAmount = (totalTokens * 30) / 100;\r\n\r\n    // Update the soldToken, amountRaisedETHUSDT, and user balances\r\n    soldToken += totalTokens;\r\n    amountRaisedETHUSDT += (msg.value * getLatestPrice()) / (1 ether);\r\n\r\n    users[msg.sender].eth_usdt_balance +=\r\n      (msg.value * getLatestPrice()) /\r\n      (1 ether);\r\n\r\n    users[msg.sender].token_balance += totalTokens;\r\n    users[msg.sender].claimable_amount += nonVestingAmount;\r\n    users[msg.sender].vesting_amount += vestingAmount;\r\n\r\n    require(\r\n      users[msg.sender].token_balance <= maximumBuy,\r\n      \"Presale: Maximum buy limit reached\"\r\n    );\r\n\r\n    emit BuyToken(msg.sender, totalTokens);\r\n  }\r\n\r\n  function buyTokenUSDT(uint256 amount) external {\r\n    require(presaleStatus == true, \"Presale : Presale is finished\");\r\n    require(\r\n      amount >= minimumBuyInUsdt,\r\n      \"amount should be greater than minimum buy\"\r\n    );\r\n    require(soldToken <= totalSupply, \"All Sold\");\r\n\r\n    USDT.transferFrom(msg.sender, owner, amount);\r\n\r\n    uint256 totalTokens = usdtToToken(amount);\r\n\r\n    // Calculate the amount to vest (70%)\r\n    uint256 vestingAmount = (totalTokens * 70) / 100;\r\n    uint256 nonVestingAmount = (totalTokens * 30) / 100;\r\n\r\n    // Update soldToken and amountRaisedUSDT\r\n    soldToken = soldToken + (totalTokens);\r\n    amountRaisedUSDT = amountRaisedUSDT + (amount);\r\n\r\n    // Update user balances\r\n    users[msg.sender].usdt_balance += amount;\r\n    users[msg.sender].token_balance += totalTokens;\r\n    users[msg.sender].claimable_amount += nonVestingAmount;\r\n    users[msg.sender].vesting_amount += vestingAmount;\r\n\r\n    require(\r\n      users[msg.sender].token_balance <= maximumBuy,\r\n      \"Presale: Maximum buy limit reached\"\r\n    );\r\n  }\r\n\r\n  function endPresale() external onlyOwner {\r\n    require(presaleStatus, \"Presale: Presale is not active\");\r\n    presaleStatus = false;\r\n    vestingStartTime = block.timestamp;\r\n  }\r\n\r\n  // Existing buyToken and buyTokenUSDT functions...\r\n  function claimTokens() external {\r\n    require(enableClaim, \"Presale: Claim not active yet\");\r\n    require(vestingStartTime > 0, \"Presale: Vesting not started\");\r\n\r\n    (uint256 claimableAmount, bool isVestingUnlock) = getClaimableTokens(\r\n      msg.sender\r\n    );\r\n\r\n    require(claimableAmount > 0, \"Presale: No tokens to claim\");\r\n\r\n    users[msg.sender].claimed_token += claimableAmount;\r\n    users[msg.sender].token_balance -= claimableAmount;\r\n\r\n    if (isVestingUnlock) {\r\n      users[msg.sender].claimable_amount = 0;\r\n      users[msg.sender].vesting_amount = 0;\r\n    } else {\r\n      users[msg.sender].claimable_amount = 0;\r\n    }\r\n\r\n    Token.transfer(msg.sender, claimableAmount);\r\n\r\n    emit ClaimToken(msg.sender, claimableAmount);\r\n  }\r\n\r\n  function enableTokenClaim(bool _state) external onlyOwner {\r\n    enableClaim = _state;\r\n  }\r\n\r\n  function stopPresale(bool _off) external onlyOwner {\r\n    presaleStatus = _off;\r\n  }\r\n\r\n  function setMinimumBuyInUsdt(uint256 _minimumBuyInUsdt) external onlyOwner {\r\n    minimumBuyInUsdt = _minimumBuyInUsdt;\r\n  }\r\n\r\n  function setMinimumBuyInEth(uint256 _minimumBuyInEth) external onlyOwner {\r\n    minimumBuyInEth = _minimumBuyInEth;\r\n  }\r\n\r\n  function setMaxTokenBuy(uint256 _maxTokens) external onlyOwner {\r\n    maximumBuy = _maxTokens;\r\n  }\r\n\r\n  function nativeToToken(uint256 _amount) public view returns (uint256) {\r\n    uint256 ethToUsd = (_amount * getLatestPrice()) / (1 ether);\r\n    uint256 numberOfTokens = (ethToUsd * tokenPerUsd) / (1e8);\r\n    return numberOfTokens;\r\n  }\r\n\r\n  function usdtToToken(uint256 _amount) public view returns (uint256) {\r\n    uint256 numberOfTokens = (_amount * tokenPerUsd) / (1e6);\r\n    return numberOfTokens;\r\n  }\r\n\r\n  function changePrice(uint256 _price) external onlyOwner {\r\n    tokenPerUsd = _price;\r\n  }\r\n\r\n  function transferOwnership(address payable _newOwner) external onlyOwner {\r\n    require(_newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n    address payable oldOwner = owner;\r\n    owner = _newOwner;\r\n    emit OwnershipTransferred(oldOwner, owner);\r\n  }\r\n\r\n  function changeToken(address _token) external onlyOwner {\r\n    Token = IERC20(_token);\r\n  }\r\n\r\n  function changeUSDT(address _USDT) external onlyOwner {\r\n    USDT = IERC20(_USDT);\r\n  }\r\n\r\n  function transferFunds(uint256 _value) external onlyOwner {\r\n    owner.transfer(_value);\r\n  }\r\n\r\n  function transferTokens(IERC20 token, uint256 _value) external onlyOwner {\r\n    token.transfer(msg.sender, _value);\r\n  }\r\n\r\n  function getClaimableTokens(\r\n    address _user\r\n  ) public view returns (uint256, bool) {\r\n    uint256 claimableAmount = users[_user].claimable_amount;\r\n    bool isVestingUnlock = block.timestamp >=\r\n      vestingStartTime + vestingDuration;\r\n\r\n    if (isVestingUnlock) {\r\n      claimableAmount += users[_user].vesting_amount;\r\n    }\r\n\r\n    return (claimableAmount, isVestingUnlock);\r\n  }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BuyToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ClaimToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"UpdatePrice\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedETHUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountRaisedUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyTokenUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"changeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_USDT\",\"type\":\"address\"}],\"name\":\"changeUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divider\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"enableTokenClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maximumBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBuyInEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBuyInUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"nativeToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokens\",\"type\":\"uint256\"}],\"name\":\"setMaxTokenBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumBuyInEth\",\"type\":\"uint256\"}],\"name\":\"setMinimumBuyInEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumBuyInUsdt\",\"type\":\"uint256\"}],\"name\":\"setMinimumBuyInUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"soldToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_off\",\"type\":\"bool\"}],\"name\":\"stopPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPerUsd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"usdtToToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eth_usdt_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"usdt_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimable_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vesting_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed_token\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BlockStar_Presale", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dfba1613b408f55b976d61087056fcaa477bb0af", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2e9c25f9ce4a0e53acd53887d34db3ddf4b154e1d9a6fd1bb2e07390cbea819c"}