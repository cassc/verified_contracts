{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/gasprice-capped-robots/GasCappedVotingChainRobotKeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {VotingChainRobotKeeper} from '../VotingChainRobotKeeper.sol';\\nimport {AutomationCompatibleInterface} from 'chainlink/src/v0.8/interfaces/automation/AutomationCompatibleInterface.sol';\\nimport {GasCappedRobotBase} from './GasCappedRobotBase.sol';\\n\\n/**\\n * @title GasCappedVotingChainRobotKeeper\\n * @author BGD Labs\\n * @notice Contract to perform automation on voting machine and data warehouse contract for goveranance v3.\\n *         The difference from VotingChainRobotKeeper is that automation is only\\n *         performed when the network gas price in within the maximum configured range.\\n */\\ncontract GasCappedVotingChainRobotKeeper is GasCappedRobotBase, VotingChainRobotKeeper {\\n  /**\\n   * @param votingMachine address of the voting machine contract.\\n   * @param rootsConsumer address of the roots consumer contract to registers the roots.\\n   * @param gasPriceOracle address of the gas price oracle contract.\\n   */\\n  constructor(\\n    address votingMachine,\\n    address rootsConsumer,\\n    address gasPriceOracle\\n  ) VotingChainRobotKeeper(votingMachine, rootsConsumer) GasCappedRobotBase(gasPriceOracle) {}\\n\\n  /**\\n   * @inheritdoc AutomationCompatibleInterface\\n   * @dev run off-chain, checks if payload should be executed\\n   *      also checks that the gas price of the network in within range to perform actions\\n   */\\n  function checkUpkeep(bytes memory) public view override returns (bool, bytes memory) {\\n    if (!isGasPriceInRange()) return (false, '');\\n\\n    return super.checkUpkeep('');\\n  }\\n}\\n\"\r\n    },\r\n    \"src/contracts/VotingChainRobotKeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IRootsConsumer} from '../interfaces/IRootsConsumer.sol';\\nimport {IVotingStrategy} from 'aave-governance-v3/src/contracts/voting/interfaces/IVotingStrategy.sol';\\nimport {IVotingMachineWithProofs} from 'aave-governance-v3/src/contracts/voting/interfaces/IVotingMachineWithProofs.sol';\\nimport {IDataWarehouse} from 'aave-governance-v3/src/contracts/voting/DataWarehouse.sol';\\nimport {IVotingChainRobotKeeper, AutomationCompatibleInterface} from '../interfaces/IVotingChainRobotKeeper.sol';\\nimport {GovernanceV3Ethereum} from 'aave-address-book/GovernanceV3Ethereum.sol';\\nimport {Ownable} from 'solidity-utils/contracts/oz-common/Ownable.sol';\\n\\n/**\\n * @title VotingChainRobotKeeper\\n * @author BGD Labs\\n * @notice Contract to perform automation on voting machine and data warehouse contract for goveranance v3.\\n * @dev Aave chainlink automation-keeper-compatible contract to:\\n *      - check if createVote, closeAndSendVote be called could be called for the proposal on voting machine or\\n *        if roots needs to be submitted on the data warehouse.\\n *      - Calls createVote and closeAndSendVote, submits roots if all the conditions are met.\\n */\\ncontract VotingChainRobotKeeper is Ownable, IVotingChainRobotKeeper {\\n  /// @inheritdoc IVotingChainRobotKeeper\\n  address public immutable VOTING_MACHINE;\\n\\n  /// @inheritdoc IVotingChainRobotKeeper\\n  address public immutable VOTING_STRATEGY;\\n\\n  /// @inheritdoc IVotingChainRobotKeeper\\n  address public immutable ROOTS_CONSUMER;\\n\\n  /// @inheritdoc IVotingChainRobotKeeper\\n  address public immutable DATA_WAREHOUSE;\\n\\n  mapping(uint256 => bool) internal _disabledProposals;\\n  mapping(bytes32 => bool) internal _rootsSubmitted;\\n\\n  /**\\n   * @inheritdoc IVotingChainRobotKeeper\\n   * @dev maximum number of actions that can be performed by the keeper in one performUpkeep.\\n   *      we only perform a max of 5 actions in one performUpkeep as the gas consumption would be quite high otherwise.\\n   */\\n  uint256 public constant MAX_ACTIONS = 5;\\n\\n  /**\\n   * @inheritdoc IVotingChainRobotKeeper\\n   * @dev size of the proposal list to fetch from last/latest to check if an action could be performed upon.\\n   *      we fetch the last 20 proposal and check to be very sure that no proposal is being unchecked.\\n   */\\n  uint256 public constant SIZE = 20;\\n\\n  error NoActionCanBePerformed();\\n\\n  /**\\n   * @param votingMachine address of the voting machine contract.\\n   * @param rootsConsumer address of the roots consumer contract to registers the roots.\\n   */\\n  constructor(address votingMachine, address rootsConsumer) {\\n    VOTING_MACHINE = votingMachine;\\n    ROOTS_CONSUMER = rootsConsumer;\\n    VOTING_STRATEGY = address(IVotingMachineWithProofs(VOTING_MACHINE).VOTING_STRATEGY());\\n    DATA_WAREHOUSE = address(IVotingMachineWithProofs(VOTING_MACHINE).DATA_WAREHOUSE());\\n  }\\n\\n  /**\\n   * @inheritdoc AutomationCompatibleInterface\\n   * @dev run off-chain, checks if payload should be executed, createVote closeAndSendVote needs\\n   *      to be called or if roots needs to be submitted.\\n   */\\n  function checkUpkeep(bytes memory) public view virtual override returns (bool, bytes memory) {\\n    ActionWithId[] memory actionsWithIds = new ActionWithId[](MAX_ACTIONS);\\n\\n    bool canVotingActionBePerformed;\\n    uint256 actionsCount;\\n    uint256 skip;\\n\\n    // we fetch the proposal list from the last/latest proposalId till the SIZE, and check if any action could be performed.\\n    // in case any voting action can be performed, we fetch the proposal list again, starting from (latest proposalId - SIZE) till\\n    // the size and check again. we only check proposals from the last proposalId or (latest proposalId - SIZE) and so on till size if\\n    // any action could be performed and proposals beyond that will not be checked by the keeper.\\n    while (true) {\\n      (canVotingActionBePerformed, actionsCount, actionsWithIds) = _checkForVotingActions(\\n        skip,\\n        actionsCount,\\n        actionsWithIds\\n      );\\n      if (canVotingActionBePerformed) {\\n        skip += SIZE;\\n      } else {\\n        break;\\n      }\\n    }\\n\\n    if (actionsCount > 0) {\\n      // we do not know the length in advance, so we init arrays with MAX_ACTIONS\\n      // and then squeeze the array using mstore\\n      assembly {\\n        mstore(actionsWithIds, actionsCount)\\n      }\\n      bytes memory performData = abi.encode(actionsWithIds);\\n      return (true, performData);\\n    }\\n\\n    return (false, '');\\n  }\\n\\n  /**\\n   * @inheritdoc AutomationCompatibleInterface\\n   * @dev executes submits root action by calling requestSubmitRoots on roots consumer, and createVote, closeAndSendVote action on the voting machine.\\n   * @param performData array of proposal ids, array of actions whether to executePayload, submit roots or createVote, closeAndSendVote.\\n   */\\n  function performUpkeep(bytes calldata performData) external override {\\n    ActionWithId[] memory actionsWithIds = abi.decode(performData, (ActionWithId[]));\\n    bool isActionPerformed;\\n\\n    // executes action on proposalIds / roots consumer in order from first to last\\n    for (uint256 i = actionsWithIds.length; i > 0; i--) {\\n      uint256 proposalId = actionsWithIds[i - 1].id;\\n      ProposalAction action = actionsWithIds[i - 1].action;\\n\\n      IVotingMachineWithProofs.ProposalState proposalState = IVotingMachineWithProofs(\\n        VOTING_MACHINE\\n      ).getProposalState(proposalId);\\n\\n      IVotingMachineWithProofs.ProposalVoteConfiguration\\n        memory voteConfig = IVotingMachineWithProofs(VOTING_MACHINE).getProposalVoteConfiguration(\\n          proposalId\\n        );\\n\\n      if (\\n        action == ProposalAction.PerformSubmitRoots &&\\n        !_rootsSubmitted[voteConfig.l1ProposalBlockHash] &&\\n        _canSubmitRoots(proposalState, voteConfig)\\n      ) {\\n        IRootsConsumer(ROOTS_CONSUMER).requestSubmitRoots(voteConfig.l1ProposalBlockHash);\\n        isActionPerformed = true;\\n        _rootsSubmitted[voteConfig.l1ProposalBlockHash] = true;\\n        emit ActionSucceeded(proposalId, action);\\n      } else if (\\n        action == ProposalAction.PerformCreateVote && _canCreateVote(proposalState, voteConfig)\\n      ) {\\n        IVotingMachineWithProofs(VOTING_MACHINE).startProposalVote(proposalId);\\n        isActionPerformed = true;\\n        emit ActionSucceeded(proposalId, action);\\n      } else if (\\n        action == ProposalAction.PerformCloseAndSendVote && _canCloseAndSendVote(proposalState)\\n      ) {\\n        IVotingMachineWithProofs(VOTING_MACHINE).closeAndSendVote(proposalId);\\n        isActionPerformed = true;\\n        emit ActionSucceeded(proposalId, action);\\n      }\\n    }\\n\\n    if (!isActionPerformed) revert NoActionCanBePerformed();\\n  }\\n\\n  /// @inheritdoc IVotingChainRobotKeeper\\n  function isDisabled(uint256 id) public view returns (bool) {\\n    return _disabledProposals[id];\\n  }\\n\\n  /// @inheritdoc IVotingChainRobotKeeper\\n  function toggleDisableAutomationById(uint256 id) external onlyOwner {\\n    _disabledProposals[id] = !_disabledProposals[id];\\n  }\\n\\n  /// @inheritdoc IVotingChainRobotKeeper\\n  function retrySubmitRoots(uint256 proposalId) external onlyOwner {\\n    IVotingMachineWithProofs.ProposalVoteConfiguration memory voteConfig = IVotingMachineWithProofs(\\n      VOTING_MACHINE\\n    ).getProposalVoteConfiguration(proposalId);\\n    _rootsSubmitted[voteConfig.l1ProposalBlockHash] = false;\\n  }\\n\\n  /**\\n   * @notice method to check and return if any voting actions could be performed for proposals in the given range.\\n   * @param skip the number of proposals to skip from the last/latest.\\n   * @param actionsCount the current count of the number of voting actions that can be performed.\\n   * @param actionsWithIds the current list of objects containing the current proposals id and voting actions which can be performed.\\n   * @return true if any voting action could be performed for the proposals in the given range, false otherwise.\\n   * @return the updated count of the number of voting actions that can be performed.\\n   * @return the updated list of objects containing the current proposals id and voting actions which can be performed.\\n   */\\n  function _checkForVotingActions(\\n    uint256 skip,\\n    uint256 actionsCount,\\n    ActionWithId[] memory actionsWithIds\\n  ) internal view returns (bool, uint256, ActionWithId[] memory) {\\n    uint256[] memory proposalIds = IVotingMachineWithProofs(VOTING_MACHINE)\\n      .getProposalsVoteConfigurationIds(skip, SIZE);\\n    uint256 initialActionsCount = actionsCount;\\n\\n    for (uint256 i = 0; i < proposalIds.length; i++) {\\n      if (!isDisabled(proposalIds[i])) {\\n        if (actionsCount > MAX_ACTIONS) break;\\n\\n        IVotingMachineWithProofs.ProposalState proposalState = IVotingMachineWithProofs(\\n          VOTING_MACHINE\\n        ).getProposalState(proposalIds[i]);\\n        IVotingMachineWithProofs.ProposalVoteConfiguration\\n          memory voteConfig = IVotingMachineWithProofs(VOTING_MACHINE).getProposalVoteConfiguration(\\n            proposalIds[i]\\n          );\\n\\n        if (_canSubmitRoots(proposalState, voteConfig)) {\\n          actionsWithIds[actionsCount].id = proposalIds[i];\\n          actionsWithIds[actionsCount].action = ProposalAction.PerformSubmitRoots;\\n          actionsCount++;\\n        } else if (_canCreateVote(proposalState, voteConfig)) {\\n          actionsWithIds[actionsCount].id = proposalIds[i];\\n          actionsWithIds[actionsCount].action = ProposalAction.PerformCreateVote;\\n          actionsCount++;\\n        } else if (_canCloseAndSendVote(proposalState)) {\\n          actionsWithIds[actionsCount].id = proposalIds[i];\\n          actionsWithIds[actionsCount].action = ProposalAction.PerformCloseAndSendVote;\\n          actionsCount++;\\n        }\\n      }\\n    }\\n\\n    return (initialActionsCount != actionsCount, actionsCount, actionsWithIds);\\n  }\\n\\n  /**\\n   * @notice method to check if roots can be submitted for the proposal in given state and vote configuration.\\n   * @param proposalState the current state the proposal is in.\\n   * @param voteConfig the vote configuration of the proposal passed from l1.\\n   * @return true if roots can be submitted, false otherwise.\\n   */\\n  function _canSubmitRoots(\\n    IVotingMachineWithProofs.ProposalState proposalState,\\n    IVotingMachineWithProofs.ProposalVoteConfiguration memory voteConfig\\n  ) internal view returns (bool) {\\n    return (proposalState == IVotingMachineWithProofs.ProposalState.NotCreated &&\\n      !_hasRequiredRoots(voteConfig.l1ProposalBlockHash) &&\\n      !_rootsSubmitted[voteConfig.l1ProposalBlockHash]);\\n  }\\n\\n  /**\\n   * @notice method to check if create vote action can be performed for the proposal in given state and vote configuration.\\n   * @param proposalState the current state the proposal is in.\\n   * @param voteConfig the vote configuration of the proposal passed from l1.\\n   * @return true if create vote action can be performed, false otherwise.\\n   */\\n  function _canCreateVote(\\n    IVotingMachineWithProofs.ProposalState proposalState,\\n    IVotingMachineWithProofs.ProposalVoteConfiguration memory voteConfig\\n  ) internal view returns (bool) {\\n    return (proposalState == IVotingMachineWithProofs.ProposalState.NotCreated &&\\n      _hasRequiredRoots(voteConfig.l1ProposalBlockHash));\\n  }\\n\\n  /**\\n   * @notice method to check if close and send vote action can be performed for the proposal in given state.\\n   * @param proposalState the current state the proposal is in.\\n   * @return true if close and send vote action can be performed, false otherwise.\\n   */\\n  function _canCloseAndSendVote(\\n    IVotingMachineWithProofs.ProposalState proposalState\\n  ) internal pure returns (bool) {\\n    return (proposalState == IVotingMachineWithProofs.ProposalState.Finished);\\n  }\\n\\n  /**\\n   * @notice method to check if for a given blockhash roots have been registered for all the tokens.\\n   * @param snapshotBlockHash hash of the block to check from where the roots have been registered.\\n   * @return true if roots have been registered, false otherwise.\\n   */\\n  function _hasRequiredRoots(bytes32 snapshotBlockHash) internal view returns (bool) {\\n    bool hasRequiredRoots;\\n    try IVotingStrategy(VOTING_STRATEGY).hasRequiredRoots(snapshotBlockHash) {\\n      if (\\n        IDataWarehouse(DATA_WAREHOUSE).getStorageRoots(\\n          address(GovernanceV3Ethereum.GOVERNANCE),\\n          snapshotBlockHash\\n        ) != bytes32(0)\\n      ) {\\n        hasRequiredRoots = true;\\n      }\\n    } catch (bytes memory) {}\\n\\n    return hasRequiredRoots;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/chainlink/contracts/src/v0.8/interfaces/automation/AutomationCompatibleInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/gasprice-capped-robots/GasCappedRobotBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IGasPriceCappedRobot} from '../../interfaces/IGasPriceCappedRobot.sol';\\nimport {AggregatorInterface} from 'aave-address-book/AaveV3.sol';\\nimport {Ownable} from 'solidity-utils/contracts/oz-common/Ownable.sol';\\n\\n/**\\n * @title GasCappedRobotBase\\n * @author BGD Labs\\n * @notice Abstract contract to be inherited by robots to limit actions by configured gasPrice.\\n */\\nabstract contract GasCappedRobotBase is Ownable, IGasPriceCappedRobot {\\n  /// @inheritdoc IGasPriceCappedRobot\\n  address public immutable GAS_PRICE_ORACLE;\\n\\n  uint256 internal _maxGasPrice;\\n\\n  /**\\n   * @param gasPriceOracle address of the gas price oracle contract.\\n   */\\n  constructor(address gasPriceOracle) {\\n    GAS_PRICE_ORACLE = gasPriceOracle;\\n  }\\n\\n  /// @inheritdoc IGasPriceCappedRobot\\n  function setMaxGasPrice(uint256 maxGasPrice) external onlyOwner {\\n    _maxGasPrice = maxGasPrice;\\n    emit MaxGasPriceSet(maxGasPrice);\\n  }\\n\\n  /// @inheritdoc IGasPriceCappedRobot\\n  function getMaxGasPrice() external view returns (uint256) {\\n    return _maxGasPrice;\\n  }\\n\\n  /// @inheritdoc IGasPriceCappedRobot\\n  function isGasPriceInRange() public view virtual returns (bool) {\\n    if (uint256(AggregatorInterface(GAS_PRICE_ORACLE).latestAnswer()) > _maxGasPrice) {\\n      return false;\\n    }\\n    return true;\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRootsConsumer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IRootsConsumer\\n * @author BGD Labs\\n * @notice Defines the interface for the contract to fetch api response to register storage roots.\\n **/\\ninterface IRootsConsumer {\\n  /**\\n   * @notice Emitted when we get a response from chainlink api and the storage roots are registered to the data warehouse.\\n   * @param requestId request id received by chainlink.\\n   * @param blockHash block hash for which roots have beeen registered.\\n   */\\n  event RootsRegisteredFulfilled(bytes32 indexed requestId, bytes32 indexed blockHash);\\n\\n  /**\\n   * @notice Emitted when we set a new api url to fetch the roots data.\\n   * @param newApiUrl url of the new chainlink api request.\\n   */\\n  event ApiUrlSet(string indexed newApiUrl);\\n\\n  /**\\n   * @notice Emitted when we set a new jobId of the chainlink operator.\\n   * @param newJobId jobId which has been set.\\n   */\\n  event JobIdSet(bytes32 indexed newJobId);\\n\\n  /**\\n   * @notice Emitted when we set a new fee to pay for the chainlink api request.\\n   * @param newFee fee set for the api request.\\n   */\\n  event FeeSet(uint256 indexed newFee);\\n\\n  /**\\n   * @notice Emitted when we set a new chainlink operator.\\n   * @param newOperator address of the chainlink operator.\\n   */\\n  event OperatorSet(address indexed newOperator);\\n\\n  /**\\n   * @notice Emitted when the link withdraw address has been changed of the consumer.\\n   * @param newWithdrawAddress address of the new withdraw address where link will be withdrawn to.\\n   */\\n  event WithdrawAddressSet(address indexed newWithdrawAddress);\\n\\n  /**\\n   * @notice Emitted when we set a new robot keeper.\\n   * @param newRobotKeeper address of the new robot keeper.\\n   */\\n  event RobotKeeperSet(address indexed newRobotKeeper);\\n\\n  /**\\n   * @notice Emitted when we send a request by the keeper to register the roots.\\n   * @param blockHash blockHash for which the roots need to be registered.\\n   * @param requestUrl url to request data needed to register the roots.\\n   * @param fee fee paid to the chainlink operator for the request.\\n   */\\n  event OperatorRequestSent(\\n    bytes32 indexed blockHash,\\n    string indexed requestUrl,\\n    uint256 indexed fee\\n  );\\n\\n  /**\\n   * @notice method to request data needed to register roots via chainlink api.\\n   * @param blockHash block hash for which roots needs to be registered.\\n   **/\\n  function requestSubmitRoots(bytes32 blockHash) external;\\n\\n  /**\\n   * @notice method called by chainlink node operator containing the api response as encoded data, used for registering roots.\\n   * @param requestId request id received by chainlink.\\n   * @param response encoded data received as the api response which is used to register the roots.\\n   **/\\n  function fulfillRegisterRoots(bytes32 requestId, bytes calldata response) external;\\n\\n  /**\\n   * @notice method called by the owner / robot guardian to change the chainlink operator.\\n   * @param chainlinkOperator new operator for api requests.\\n   **/\\n  function setOperator(address chainlinkOperator) external;\\n\\n  /**\\n   * @notice method called by the owner / robot guardian to change the fee paid to the operator.\\n   * @param fee new fee paid to the operator.\\n   **/\\n  function setFee(uint256 fee) external;\\n\\n  /**\\n   * @notice method called by the owner / robot guardian to change the api url we use to fetch data to register roots.\\n   * @param api_url new api url to set.\\n   **/\\n  function setApiUrl(string memory api_url) external;\\n\\n  /**\\n   * @notice method called by the owner / robot guardian to change the jobId of the operator.\\n   * @param jobId new job id of the operator.\\n   **/\\n  function setJobId(bytes32 jobId) external;\\n\\n  /**\\n   * @notice method called by owner / robot guardian to set the robot keeper which can request to submit roots.\\n   * @param robotKeeper new address of the robot keeper to set.\\n   **/\\n  function setRobotKeeper(address robotKeeper) external;\\n\\n  /**\\n   * @notice method to get the fee to be paid to the chainlink operator.\\n   * @return operator fee.\\n   */\\n  function getFee() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the job id of the chainlink operator.\\n   * @return job id.\\n   */\\n  function getJobId() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the api url which returns the data to register storage roots.\\n   * @return url of the backend api.\\n   */\\n  function getApiUrl() external view returns (string memory);\\n\\n  /**\\n   * @notice method to get the the robot keeper which can request to submit roots.\\n   * @return address of the robot keeeper contract.\\n   */\\n  function getRobotKeeper() external view returns (address);\\n\\n  /**\\n   * @notice method to get the address of the data warehouse contract.\\n   * @return address of the data warehouse contract.\\n   */\\n  function DATA_WAREHOUSE() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/aave-governance-v3/src/contracts/voting/interfaces/IVotingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDataWarehouse} from './IDataWarehouse.sol';\\n\\n/**\\n * @title IVotingStrategy\\n * @author BGD Labs\\n * @notice interface containing the methods definitions of the VotingStrategy contract\\n */\\ninterface IVotingStrategy {\\n  /**\\n   * @notice method to get the DataWarehouse contract\\n   * @return DataWarehouse contract\\n   */\\n  function DATA_WAREHOUSE() external view returns (IDataWarehouse);\\n\\n  /**\\n   * @notice method to get the exchange rate precision. Taken from stkTokenV3 contract\\n   * @return exchange rate precission\\n   */\\n  function STK_AAVE_SLASHING_EXCHANGE_RATE_PRECISION()\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice method to get the slot of the stkAave exchange rate in the stkAave contract\\n   * @return stkAave exchange rate slot\\n   */\\n  function STK_AAVE_SLASHING_EXCHANGE_RATE_SLOT()\\n    external\\n    view\\n    returns (uint256);\\n\\n  /**\\n   * @notice method to get the power scale factor of the delegated balances\\n   * @return power scale factor\\n   */\\n  function POWER_SCALE_FACTOR() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the power of an asset\\n   * @param asset address of the token to get the power\\n   * @param storageSlot storage position of the balance mapping\\n   * @param power balance of a determined asset to be used for the vote\\n   * @param blockHash block hash of when we want to get the power. Optional parameter\\n   * @return voting power of the specified asset\\n   */\\n  function getVotingPower(\\n    address asset,\\n    uint128 storageSlot,\\n    uint256 power,\\n    bytes32 blockHash\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice method to check that the roots for all the tokens in the voting strategy have been registered. Including\\n             the registry of the stkAave exchange rate slot\\n   * @param blockHash hash of the block from where the roots have been registered.\\n   */\\n  function hasRequiredRoots(bytes32 blockHash) external view;\\n}\\n\"\r\n    },\r\n    \"lib/aave-governance-v3/src/contracts/voting/interfaces/IVotingMachineWithProofs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDataWarehouse} from './IDataWarehouse.sol';\\nimport {IVotingStrategy} from './IVotingStrategy.sol';\\n\\n/**\\n * @title IVotingMachine\\n * @author BGD Labs\\n * @notice interface containing the objects, events and method definitions of the VotingMachine contract\\n */\\ninterface IVotingMachineWithProofs {\\n  /**\\n   * @notice Object containing the signature parameters to be able to vote as a representative\\n   * @param v v part of the voter signature\\n   * @param r r part of the voter signature\\n   * @param s s part of the voter signature\\n   */\\n  struct SignatureParams {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  /**\\n   * @notice Object to use over submitVoteBySignature and in case of bridging for protect against wrong roots inclusion\\n   * @param underlyingAsset address of the token on L1, used for voting\\n   * @param slot base storage position where the balance on underlyingAsset contract resides on L1. (Normally position 0)\\n   */\\n  struct VotingAssetWithSlot {\\n    address underlyingAsset;\\n    uint128 slot;\\n  }\\n\\n  /**\\n   * @notice object containing the information of a bridged vote\\n   * @param support indicates if vote is in favor or against the proposal\\n   * @param votingAssetsWithSlots list of token addresses with storage slots, that the voter will use for voting\\n   */\\n  struct BridgedVote {\\n    bool support;\\n    VotingAssetWithSlot[] votingAssetsWithSlot;\\n  }\\n\\n  /**\\n   * @notice enum delimiting the possible states a proposal can have on the voting machine\\n   * @dev ProposalState enum defines the state machine of a proposal being voted, so the order on which the state is\\n          defined is important. Check logic correctness if new states are added / removed\\n   */\\n  enum ProposalState {\\n    NotCreated,\\n    Active,\\n    Finished,\\n    SentToGovernance\\n  }\\n\\n  /**\\n   * @notice Object with vote information\\n   * @param support boolean indicating if the vote is in favor or against a proposal\\n   * @param votingPower the power used for voting\\n   */\\n  struct Vote {\\n    bool support;\\n    uint248 votingPower;\\n  }\\n\\n  /**\\n   * @notice Object containing a proposal information\\n   * @param id numeric identification of the proposal\\n   * @param sentToGovernance boolean indication if the proposal results have been sent back to L1 governance\\n   * @param startTime timestamp of the start of voting on the proposal\\n   * @param endTime timestamp when the voting on the proposal finishes (startTime + votingDuration)\\n   * @param votingClosedAndSentTimestamp timestamp indicating when the vote has been closed and sent to governance chain\\n   * @param forVotes votes cast in favor of the proposal\\n   * @param againstVotes votes cast against the proposal\\n   * @param creationBlockNumber blockNumber from when the proposal has been created in votingMachine\\n   * @param votingClosedAndSentBlockNumber block from when the vote has been closed and sent to governance chain\\n   * @param votes mapping indication for every voter of the proposal the information of that vote\\n   */\\n  struct Proposal {\\n    uint256 id;\\n    bool sentToGovernance;\\n    uint40 startTime;\\n    uint40 endTime;\\n    uint40 votingClosedAndSentTimestamp;\\n    uint128 forVotes;\\n    uint128 againstVotes;\\n    uint256 creationBlockNumber;\\n    uint256 votingClosedAndSentBlockNumber;\\n    mapping(address => Vote) votes;\\n  }\\n\\n  /**\\n   * @notice Object containing a proposal information\\n   * @param id numeric identification of the proposal\\n   * @param sentToGovernance boolean indication if the proposal results have been sent back to L1 governance\\n   * @param startTime timestamp of the start of voting on the proposal\\n   * @param endTime timestamp when the voting on the proposal finishes (startTime + votingDuration)\\n   * @param votingClosedAndSentTimestamp timestamp indicating when the vote has been closed and sent to governance chain\\n   * @param forVotes votes cast in favor of the proposal\\n   * @param againstVotes votes cast against the proposal\\n   * @param creationBlockNumber blockNumber from when the proposal has been created in votingMachine\\n   * @param votingClosedAndSentBlockNumber block from when the vote has been closed and sent back to governance chain\\n   */\\n  struct ProposalWithoutVotes {\\n    uint256 id;\\n    bool sentToGovernance;\\n    uint40 startTime;\\n    uint40 endTime;\\n    uint40 votingClosedAndSentTimestamp;\\n    uint128 forVotes;\\n    uint128 againstVotes;\\n    uint256 creationBlockNumber;\\n    uint256 votingClosedAndSentBlockNumber;\\n  }\\n\\n  /**\\n   * @notice vote configuration passed from l1\\n   * @param votingDuration duration in seconds of the vote for a proposal\\n   * @param l1BlockHash hash of the block on L1 from the block when the proposal was activated for voting (sent to voting machine)\\n            this block hash is used to delimit from when the voting power is accounted for voting\\n   */\\n  struct ProposalVoteConfiguration {\\n    uint24 votingDuration;\\n    bytes32 l1ProposalBlockHash;\\n  }\\n\\n  /**\\n   * @notice Object with the necessary information to process a vote\\n   * @param underlyingAsset address of the token on L1, used for voting\\n   * @param slot base storage position where the balance on underlyingAsset contract resides on L1. (Normally position 0)\\n   * @param proof bytes of the generated proof on L1 with the slot information of underlying asset.\\n   */\\n  struct VotingBalanceProof {\\n    address underlyingAsset;\\n    uint128 slot;\\n    bytes proof;\\n  }\\n\\n  /**\\n   * @notice emitted when a proposal is created\\n   * @param proposalId numeric id of the created proposal\\n   * @param l1BlockHash block hash from the block on l1 from when the proposal was activated for voting\\n   * @param startTime timestamp when the proposal was created and ready for voting\\n   * @param endTime timestamp of when the voting period ends. (startTime + votingDuration)\\n   */\\n  event ProposalVoteStarted(\\n    uint256 indexed proposalId,\\n    bytes32 indexed l1BlockHash,\\n    uint256 startTime,\\n    uint256 endTime\\n  );\\n\\n  /**\\n   * @notice emitted when the results of a vote on a proposal are sent to L1\\n   * @param proposalId numeric id of the proposal which results are sent to L1\\n   * @param forVotes votes cast in favor of proposal\\n   * @param againstVotes votes cast against the proposal\\n   */\\n  event ProposalResultsSent(\\n    uint256 indexed proposalId,\\n    uint256 forVotes,\\n    uint256 againstVotes\\n  );\\n\\n  /**\\n   * @notice emitted when a vote is registered\\n   * @param proposalId Id of the proposal\\n   * @param voter address of the voter\\n   * @param support boolean, true = vote for, false = vote against\\n   * @param votingPower Power of the voter/vote\\n   */\\n  event VoteEmitted(\\n    uint256 indexed proposalId,\\n    address indexed voter,\\n    bool indexed support,\\n    uint256 votingPower\\n  );\\n\\n  /**\\n   * @notice emitted when a voting configuration of a proposal gets received. Meaning that has been bridged successfully\\n   * @param proposalId id of the proposal bridged to start the vote on\\n   * @param blockHash hash of the block on L1 when the proposal was activated for voting\\n   * @param votingDuration duration in seconds of the vote\\n   * @param voteCreated boolean indicating if the vote has been created or not.\\n   * @dev the vote will only be created automatically if when the configuration is bridged, all necessary roots\\n          have been registered already.\\n   */\\n  event ProposalVoteConfigurationBridged(\\n    uint256 indexed proposalId,\\n    bytes32 indexed blockHash,\\n    uint24 votingDuration,\\n    bool indexed voteCreated\\n  );\\n\\n  /**\\n   * @notice method to get the representatives mapping slot in Governance contract\\n   * @return representatives slot\\n   */\\n  function REPRESENTATIVES_SLOT() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the Governance contract address\\n   * @return Governance address\\n   */\\n  function GOVERNANCE() external view returns (address);\\n\\n  /**\\n   * @notice method to get the voting asset with slot signature\\n   * @return signature of the voting asset with slot method\\n   */\\n  function VOTING_ASSET_WITH_SLOT_RAW() external view returns (string memory);\\n\\n  /**\\n   * @notice method to get the DataWarehouse contract\\n   * @return DataWarehouse contract\\n   */\\n  function DATA_WAREHOUSE() external view returns (IDataWarehouse);\\n\\n  /**\\n   * @notice method to get the VotingStrategy contract\\n   * @return VotingStrategy contract\\n   */\\n  function VOTING_STRATEGY() external view returns (IVotingStrategy);\\n\\n  /**\\n   * @notice Get the v4 compatible domain separator\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the vote submitted type hash for permits digest\\n   * @return hash of vote submitted string\\n   */\\n  function VOTE_SUBMITTED_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the vote submitted by representative type hash for permits digest\\n   * @return hash of vote submitted by representative string\\n   */\\n  function VOTE_SUBMITTED_BY_REPRESENTATIVE_TYPEHASH()\\n    external\\n    view\\n    returns (bytes32);\\n\\n  /**\\n   * @notice method to get the voting asset with slot type hash for permits digest\\n   * @return hash of vote submitted string\\n   */\\n  function VOTING_ASSET_WITH_SLOT_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the contract name for permits digest\\n   * @return contract name string\\n   */\\n  function NAME() external view returns (string memory);\\n\\n  /**\\n   * @notice method to get a proposal information specified by its id\\n   * @param proposalId id of the proposal to retrieve\\n   * @return the proposal information without the users vote\\n   */\\n  function getProposalById(\\n    uint256 proposalId\\n  ) external view returns (ProposalWithoutVotes memory);\\n\\n  /**\\n   * @notice method to get the state of a proposal specified by its id\\n   * @param proposalId id of the proposal to retrieve the state of\\n   * @return the state of the proposal\\n   */\\n  function getProposalState(\\n    uint256 proposalId\\n  ) external view returns (ProposalState);\\n\\n  /**\\n   * @notice method to get the voting configuration of a proposal specified by its id\\n   * @param proposalId id of the proposal to retrieve the voting configuration from\\n   * @return the proposal vote configuration object\\n   */\\n  function getProposalVoteConfiguration(\\n    uint256 proposalId\\n  ) external view returns (ProposalVoteConfiguration memory);\\n\\n  /**\\n  * @notice method to get a paginated list of proposalIds. The proposals are taken from a list of proposals that have\\n            received vote configuration from governance chain\\n  * @param skip number of proposal ids to skip. from latest in the list of proposal ids with voting configuration\\n  * @param size length of proposal ids to ask for.\\n  * @return list of proposal ids\\n  * @dev This is mainly used to get a list of proposals that require automation in some step of the proposal live cycle.\\n  */\\n  function getProposalsVoteConfigurationIds(\\n    uint256 skip,\\n    uint256 size\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice method to get the vote set by a user on a proposal specified by its id\\n   * @param user address of the user that voted\\n   * @param proposalId id of the proposal to retrieve the vote from\\n   * @return the vote (support and voting power) emitted\\n   */\\n  function getUserProposalVote(\\n    address user,\\n    uint256 proposalId\\n  ) external view returns (Vote memory);\\n\\n  /**\\n    * @notice method to start a vote on a proposal specified by its id.\\n    * @param proposalId id of the proposal to start the vote on.\\n    * @return the id of the proposal that had the vote started on.\\n    * @dev this method can be called by anyone, requiring that the appropriate conditions are met.\\n           basically that the proper roots have been registered.\\n           It can also be called internally when the bridged message is received and the the required roots\\n           have been registered\\n    */\\n  function startProposalVote(uint256 proposalId) external returns (uint256);\\n\\n  /**\\n    * @notice method to cast a vote on a proposal specified by its id\\n    * @param proposalId id of the proposal on which the vote will be cast\\n    * @param support boolean indicating if the vote is in favor or against the proposal\\n    * @param votingBalanceProofs list of objects containing the information necessary to vote using the tokens\\n             allowed on the voting strategy.\\n    * @dev A vote does not need to use all the tokens allowed, can be a subset\\n    */\\n  function submitVote(\\n    uint256 proposalId,\\n    bool support,\\n    VotingBalanceProof[] calldata votingBalanceProofs\\n  ) external;\\n\\n  /**\\n   * @notice Function to register the vote of user that has voted offchain via signature\\n   * @param proposalId id of the proposal\\n   * @param voter the voter address\\n   * @param support boolean, true = vote for, false = vote against\\n   * @param votingBalanceProofs list of voting assets proofs\\n   * @param v v part of the voter signature\\n   * @param r r part of the voter signature\\n   * @param s s part of the voter signature\\n   */\\n  function submitVoteBySignature(\\n    uint256 proposalId,\\n    address voter,\\n    bool support,\\n    VotingBalanceProof[] calldata votingBalanceProofs,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice method to close a vote on a proposal specified by its id and send the results back to governance\\n   * @param proposalId id of the proposal to close the vote on and send the voting result to governance\\n   * @dev This method will trigger the bridging flow\\n   */\\n  function closeAndSendVote(uint256 proposalId) external;\\n\\n  /**\\n   * @notice Function to register the vote of user as its representative\\n   * @param proposalId id of the proposal\\n   * @param support boolean, true = vote for, false = vote against\\n   * @param voter the voter address\\n   * @param proofOfRepresentation proof that can validate that msg.sender is the voter representative\\n   * @param votingBalanceProofs list of voting assets proofs\\n   */\\n  function submitVoteAsRepresentative(\\n    uint256 proposalId,\\n    bool support,\\n    address voter,\\n    bytes memory proofOfRepresentation,\\n    VotingBalanceProof[] calldata votingBalanceProofs\\n  ) external;\\n\\n  /**\\n   * @notice Function to register the vote of user as its representative with a signed message\\n   * @param proposalId id of the proposal\\n   * @param voter the voter address\\n   * @param proofOfRepresentation proof that can validate that msg.sender is the voter representative\\n   * @param votingBalanceProofs list of voting assets proofs\\n   * @param signatureParams object containing the necessary signature parameters\\n   */\\n  function submitVoteAsRepresentativeBySignature(\\n    uint256 proposalId,\\n    address voter,\\n    address representative,\\n    bool support,\\n    bytes memory proofOfRepresentation,\\n    VotingBalanceProof[] calldata votingBalanceProofs,\\n    SignatureParams memory signatureParams\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-governance-v3/src/contracts/voting/DataWarehouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {IDataWarehouse} from './interfaces/IDataWarehouse.sol';\\nimport {StateProofVerifier} from './libs/StateProofVerifier.sol';\\nimport {RLPReader} from './libs/RLPReader.sol';\\nimport {Errors} from '../libraries/Errors.sol';\\n\\n/**\\n * @title DataWarehouse\\n * @author BGD Labs\\n * @notice This contract stores account state roots and allows proving against them\\n */\\ncontract DataWarehouse is IDataWarehouse {\\n  using RLPReader for bytes;\\n  using RLPReader for RLPReader.RLPItem;\\n\\n  // account address => (block hash => Account state root hash)\\n  mapping(address => mapping(bytes32 => bytes32)) internal _storageRoots;\\n\\n  // account address => (block hash => (slot => slot value))\\n  mapping(address => mapping(bytes32 => mapping(bytes32 => uint256)))\\n    internal _slotsRegistered;\\n\\n  /// @inheritdoc IDataWarehouse\\n  function getStorageRoots(\\n    address account,\\n    bytes32 blockHash\\n  ) external view returns (bytes32) {\\n    return _storageRoots[account][blockHash];\\n  }\\n\\n  /// @inheritdoc IDataWarehouse\\n  function getRegisteredSlot(\\n    bytes32 blockHash,\\n    address account,\\n    bytes32 slot\\n  ) external view returns (uint256) {\\n    return _slotsRegistered[account][blockHash][slot];\\n  }\\n\\n  /// @inheritdoc IDataWarehouse\\n  function processStorageRoot(\\n    address account,\\n    bytes32 blockHash,\\n    bytes memory blockHeaderRLP,\\n    bytes memory accountStateProofRLP\\n  ) external returns (bytes32) {\\n    StateProofVerifier.BlockHeader memory decodedHeader = StateProofVerifier\\n      .verifyBlockHeader(blockHeaderRLP, blockHash);\\n    // The path for an account in the state trie is the hash of its address\\n    bytes32 proofPath = keccak256(abi.encodePacked(account));\\n    StateProofVerifier.Account memory accountData = StateProofVerifier\\n      .extractAccountFromProof(\\n        proofPath,\\n        decodedHeader.stateRootHash,\\n        accountStateProofRLP.toRlpItem().toList()\\n      );\\n\\n    _storageRoots[account][blockHash] = accountData.storageRoot;\\n\\n    emit StorageRootProcessed(msg.sender, account, blockHash);\\n\\n    return accountData.storageRoot;\\n  }\\n\\n  /// @inheritdoc IDataWarehouse\\n  function getStorage(\\n    address account,\\n    bytes32 blockHash,\\n    bytes32 slot,\\n    bytes memory storageProof\\n  ) public view returns (StateProofVerifier.SlotValue memory) {\\n    bytes32 root = _storageRoots[account][blockHash];\\n    require(root != bytes32(0), Errors.UNPROCESSED_STORAGE_ROOT);\\n\\n    // The path for a storage value is the hash of its slot\\n    bytes32 proofPath = keccak256(abi.encodePacked(slot));\\n    StateProofVerifier.SlotValue memory slotData = StateProofVerifier\\n      .extractSlotValueFromProof(\\n        proofPath,\\n        root,\\n        storageProof.toRlpItem().toList()\\n      );\\n\\n    return slotData;\\n  }\\n\\n  /// @inheritdoc IDataWarehouse\\n  function processStorageSlot(\\n    address account,\\n    bytes32 blockHash,\\n    bytes32 slot,\\n    bytes calldata storageProof\\n  ) external {\\n    StateProofVerifier.SlotValue memory storageSlot = getStorage(\\n      account,\\n      blockHash,\\n      slot,\\n      storageProof\\n    );\\n\\n    _slotsRegistered[account][blockHash][slot] = storageSlot.value;\\n\\n    emit StorageSlotProcessed(\\n      msg.sender,\\n      account,\\n      blockHash,\\n      slot,\\n      storageSlot.value\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IVotingChainRobotKeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AutomationCompatibleInterface} from 'chainlink/src/v0.8/interfaces/automation/AutomationCompatibleInterface.sol';\\n\\n/**\\n * @title IVotingChainRobotKeeper\\n * @author BGD Labs\\n * @notice Defines the interface for the contract to automate actions for voting machine, data warehouse on the voting chain.\\n **/\\ninterface IVotingChainRobotKeeper is AutomationCompatibleInterface {\\n  /**\\n   * @notice Emitted when performUpkeep is called and an action is executed.\\n   * @param id proposal id of successful action.\\n   * @param action successful action performed on the proposal.\\n   */\\n  event ActionSucceeded(uint256 indexed id, ProposalAction indexed action);\\n\\n  /**\\n   * @notice Actions that can be performed by the robot for governance v3.\\n   * PerformSubmitRoots: performs requestSubmitRoots action on the Chainlink API consumer contract.\\n   *                     which submits the roots to Data warehouse contract via a callback function.\\n   * PerformCreateVote: performs createVote action on the voting machine contract.\\n   * PerformCloseAndSendVote: performs createVote action on the voting machine contract.\\n   **/\\n  enum ProposalAction {\\n    PerformSubmitRoots,\\n    PerformCreateVote,\\n    PerformCloseAndSendVote\\n  }\\n\\n  /**\\n   * @notice holds action to be performed for a given proposalId.\\n   * @param id proposal id for which action needs to be performed.\\n   * @param action action to be perfomed for the proposalId.\\n   */\\n  struct ActionWithId {\\n    uint256 id;\\n    ProposalAction action;\\n  }\\n\\n  /**\\n   * @notice method to check if a proposalId is disabled.\\n   * @param id - proposalId to check if disabled.\\n   * @return bool if proposal is disabled or not.\\n   **/\\n  function isDisabled(uint256 id) external view returns (bool);\\n\\n  /**\\n   * @notice method called by owner to disable/enabled automation on a specific proposalId.\\n   * @param proposalId proposalId for which we need to disable/enable automation.\\n   */\\n  function toggleDisableAutomationById(uint256 proposalId) external;\\n\\n  /**\\n   * @notice method to retry submitting roots for the blockhash of the proposal. This is required incase the\\n   *         chainlink node operator fail to perform the operation and we wish to retry.\\n   * @param proposalId - proposalId for which submit roots needs to be retryed.\\n   **/\\n  function retrySubmitRoots(uint256 proposalId) external;\\n\\n  /**\\n   * @notice method to get the address of the voting machine contract.\\n   * @return voting machine contract address.\\n   */\\n  function VOTING_MACHINE() external view returns (address);\\n\\n  /**\\n   * @notice method to get the address of the voting strategy contract.\\n   * @return voting strategy contract address.\\n   */\\n  function VOTING_STRATEGY() external view returns (address);\\n\\n  /**\\n   * @notice method to get the address of the roots consumer contract.\\n   * @return roots consumer contract address.\\n   */\\n  function ROOTS_CONSUMER() external view returns (address);\\n\\n  /**\\n   * @notice method to get the address of the data warehouse contract.\\n   * @return address of the data warehouse contract.\\n   */\\n  function DATA_WAREHOUSE() external view returns (address);\\n\\n  /**\\n   * @notice method to get the maximum number of actions that can be performed by the keeper in one performUpkeep.\\n   * @return max number of actions.\\n   */\\n  function MAX_ACTIONS() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the size of the proposal list to fetch from last/latest to check if an action could be performed upon.\\n   * @return size of the proposal list to check.\\n   */\\n  function SIZE() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/GovernanceV3Ethereum.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\n// AUTOGENERATED - MANUALLY CHANGES WILL BE REVERTED BY THE GENERATOR\\nimport {IGovernanceCore, IPayloadsControllerCore, IDataWarehouse, IVotingStrategy} from './GovernanceV3.sol';\\n\\nlibrary GovernanceV3Ethereum {\\n  // https://etherscan.io/address/0xEd42a7D8559a463722Ca4beD50E0Cc05a386b0e1\\n  address internal constant CROSS_CHAIN_CONTROLLER = 0xEd42a7D8559a463722Ca4beD50E0Cc05a386b0e1;\\n\\n  // https://etherscan.io/address/0x9AEE0B04504CeF83A65AC3f0e838D0593BCb2BC7\\n  IGovernanceCore internal constant GOVERNANCE =\\n    IGovernanceCore(0x9AEE0B04504CeF83A65AC3f0e838D0593BCb2BC7);\\n\\n  // https://etherscan.io/address/0xdAbad81aF85554E9ae636395611C58F7eC1aAEc5\\n  IPayloadsControllerCore internal constant PAYLOADS_CONTROLLER =\\n    IPayloadsControllerCore(0xdAbad81aF85554E9ae636395611C58F7eC1aAEc5);\\n\\n  // https://etherscan.io/address/0x617332a777780F546261247F621051d0b98975Eb\\n  address internal constant VOTING_MACHINE = 0x617332a777780F546261247F621051d0b98975Eb;\\n\\n  // https://etherscan.io/address/0xf23f7De3AC42F22eBDA17e64DC4f51FB66b8E21f\\n  address internal constant VOTING_PORTAL_ETH_ETH = 0xf23f7De3AC42F22eBDA17e64DC4f51FB66b8E21f;\\n\\n  // https://etherscan.io/address/0x33aCEf7365809218485873B7d0d67FeE411B5D79\\n  address internal constant VOTING_PORTAL_ETH_AVAX = 0x33aCEf7365809218485873B7d0d67FeE411B5D79;\\n\\n  // https://etherscan.io/address/0x9b24C168d6A76b5459B1d47071a54962a4df36c3\\n  address internal constant VOTING_PORTAL_ETH_POL = 0x9b24C168d6A76b5459B1d47071a54962a4df36c3;\\n\\n  // https://etherscan.io/address/0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A\\n  address internal constant PC_DATA_HELPER = 0xE3B770Dc4ae3f8bECaB3Ed12dE692c741603e16A;\\n\\n  // https://etherscan.io/address/0x971c82c8316aD611904F95616c21ce90837f1856\\n  address internal constant GOV_DATA_HELPER = 0x971c82c8316aD611904F95616c21ce90837f1856;\\n\\n  // https://etherscan.io/address/0x77976B51569896523EE215962Ee91ff236Fa50E8\\n  address internal constant VM_DATA_HELPER = 0x77976B51569896523EE215962Ee91ff236Fa50E8;\\n\\n  // https://etherscan.io/address/0x94363B11b37BC3ffe43AB09cff5A010352FE85dC\\n  address internal constant META_DELEGATE_HELPER = 0x94363B11b37BC3ffe43AB09cff5A010352FE85dC;\\n\\n  // https://etherscan.io/address/0x73C6Fb358dDA8e84D50e98A98F7c0dF32e15C7e9\\n  address internal constant EMERGENCY_REGISTRY = 0x73C6Fb358dDA8e84D50e98A98F7c0dF32e15C7e9;\\n\\n  // https://etherscan.io/address/0xa198Fac58E02A5C5F8F7e877895d50cFa9ad1E04\\n  address internal constant GOVERNANCE_POWER_STRATEGY = 0xa198Fac58E02A5C5F8F7e877895d50cFa9ad1E04;\\n\\n  // https://etherscan.io/address/0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A\\n  address internal constant EXECUTOR_LVL_1 = 0x5300A1a15135EA4dc7aD5a167152C01EFc9b192A;\\n\\n  // https://etherscan.io/address/0x17Dd33Ed0e3dD2a80E37489B8A63063161BE6957\\n  address internal constant EXECUTOR_LVL_2 = 0x17Dd33Ed0e3dD2a80E37489B8A63063161BE6957;\\n\\n  // https://etherscan.io/address/0x5642A5A5Ec284B4145563aBF319620204aCCA7f4\\n  IVotingStrategy internal constant VOTING_STRATEGY =\\n    IVotingStrategy(0x5642A5A5Ec284B4145563aBF319620204aCCA7f4);\\n\\n  // https://etherscan.io/address/0x1699FE9CaDC8a0b6c93E06B62Ab4592a0fFEcF61\\n  IDataWarehouse internal constant DATA_WAREHOUSE =\\n    IDataWarehouse(0x1699FE9CaDC8a0b6c93E06B62Ab4592a0fFEcF61);\\n}\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/oz-common/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.0;\\n\\nimport './Context.sol';\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n  address private _owner;\\n\\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n  /**\\n   * @dev Initializes the contract setting the deployer as the initial owner.\\n   */\\n  constructor() {\\n    _transferOwnership(_msgSender());\\n  }\\n\\n  /**\\n   * @dev Throws if called by any account other than the owner.\\n   */\\n  modifier onlyOwner() {\\n    _checkOwner();\\n    _;\\n  }\\n\\n  /**\\n   * @dev Returns the address of the current owner.\\n   */\\n  function owner() public view virtual returns (address) {\\n    return _owner;\\n  }\\n\\n  /**\\n   * @dev Throws if the sender is not the owner.\\n   */\\n  function _checkOwner() internal view virtual {\\n    require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n  }\\n\\n  /**\\n   * @dev Leaves the contract without owner. It will not be possible to call\\n   * `onlyOwner` functions anymore. Can only be called by the current owner.\\n   *\\n   * NOTE: Renouncing ownership will leave the contract without an owner,\\n   * thereby removing any functionality that is only available to the owner.\\n   */\\n  function renounceOwnership() public virtual onlyOwner {\\n    _transferOwnership(address(0));\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Can only be called by the current owner.\\n   */\\n  function transferOwnership(address newOwner) public virtual onlyOwner {\\n    require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n    _transferOwnership(newOwner);\\n  }\\n\\n  /**\\n   * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n   * Internal function without access restriction.\\n   */\\n  function _transferOwnership(address newOwner) internal virtual {\\n    address oldOwner = _owner;\\n    _owner = newOwner;\\n    emit OwnershipTransferred(oldOwner, newOwner);\\n  }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IGasPriceCappedRobot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {AggregatorInterface} from 'aave-address-book/AaveV3.sol';\\n\\n/**\\n * @title IGasPriceCappedRobot\\n * @author BGD Labs\\n * @notice Defines the interface for the gas price capped robot.\\n **/\\ninterface IGasPriceCappedRobot {\\n  /**\\n   * @notice Emitted when maxGasPrice has been set by the owner.\\n   * @param maxGasPrice new maximum gas price of the network set by the owner.\\n   */\\n  event MaxGasPriceSet(uint256 indexed maxGasPrice);\\n\\n  /**\\n   * @notice method to check if the current gas prices is lesser than the configured maximum gas prices.\\n   * @return bool if the current network gasPrice is in range or not.\\n   **/\\n  function isGasPriceInRange() external view returns (bool);\\n\\n  /**\\n   * @notice method called by the owner to set the maximum gas price beyond which actions won't be executed.\\n   * @param maxGasPrice the maximum gas price in wei of the current network to set.\\n   **/\\n  function setMaxGasPrice(uint256 maxGasPrice) external;\\n\\n  /**\\n   * @notice method to get the maximum gas price configured beyond which actions won't be executed.\\n   * @return maxGasPrice the maximum gas price in wei of the current network.\\n   **/\\n  function getMaxGasPrice() external returns (uint256);\\n\\n  /**\\n   * @notice method to get the network gas price oracle contract.\\n   * @return address of the network gas price oracle.\\n   */\\n  function GAS_PRICE_ORACLE() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/AaveV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nimport {DataTypes} from 'aave-v3-core/contracts/protocol/libraries/types/DataTypes.sol';\\nimport {Errors} from 'aave-v3-core/contracts/protocol/libraries/helpers/Errors.sol';\\nimport {ConfiguratorInputTypes} from 'aave-v3-core/contracts/protocol/libraries/types/ConfiguratorInputTypes.sol';\\nimport {IPoolAddressesProvider} from 'aave-v3-core/contracts/interfaces/IPoolAddressesProvider.sol';\\nimport {IAToken} from 'aave-v3-core/contracts/interfaces/IAToken.sol';\\nimport {IPool} from 'aave-v3-core/contracts/interfaces/IPool.sol';\\nimport {IPoolConfigurator} from 'aave-v3-core/contracts/interfaces/IPoolConfigurator.sol';\\nimport {IPriceOracleGetter} from 'aave-v3-core/contracts/interfaces/IPriceOracleGetter.sol';\\nimport {IAaveOracle} from 'aave-v3-core/contracts/interfaces/IAaveOracle.sol';\\nimport {IACLManager as BasicIACLManager} from 'aave-v3-core/contracts/interfaces/IACLManager.sol';\\nimport {IPoolDataProvider} from 'aave-v3-core/contracts/interfaces/IPoolDataProvider.sol';\\nimport {IDefaultInterestRateStrategy} from 'aave-v3-core/contracts/interfaces/IDefaultInterestRateStrategy.sol';\\nimport {IReserveInterestRateStrategy} from 'aave-v3-core/contracts/interfaces/IReserveInterestRateStrategy.sol';\\nimport {IPoolDataProvider as IAaveProtocolDataProvider} from 'aave-v3-core/contracts/interfaces/IPoolDataProvider.sol';\\nimport {AggregatorInterface} from 'aave-v3-core/contracts/dependencies/chainlink/AggregatorInterface.sol';\\n\\ninterface IACLManager is BasicIACLManager {\\n  function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n  function DEFAULT_ADMIN_ROLE() external pure returns (bytes32);\\n\\n  function renounceRole(bytes32 role, address account) external;\\n\\n  function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n  function grantRole(bytes32 role, address account) external;\\n\\n  function revokeRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-governance-v3/src/contracts/voting/interfaces/IDataWarehouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity ^0.8.0;\\n\\nimport {StateProofVerifier} from '../libs/StateProofVerifier.sol';\\n\\n/**\\n * @title IDataWarehouse\\n * @author BGD Labs\\n * @notice interface containing the methods definitions of the DataWarehouse contract\\n */\\ninterface IDataWarehouse {\\n  /**\\n   * @notice event emitted when a storage root has been processed successfully\\n   * @param caller address that called the processStorageRoot method\\n   * @param account address where the root is generated\\n   * @param blockHash hash of the block where the root was generated\\n   */\\n  event StorageRootProcessed(\\n    address indexed caller,\\n    address indexed account,\\n    bytes32 indexed blockHash\\n  );\\n\\n  /**\\n   * @notice event emitted when a storage root has been processed successfully\\n   * @param caller address that called the processStorageSlot method\\n   * @param account address where the slot is processed\\n   * @param blockHash hash of the block where the storage proof was generated\\n   * @param slot storage location to search\\n   * @param value storage information on the specified location\\n   */\\n  event StorageSlotProcessed(\\n    address indexed caller,\\n    address indexed account,\\n    bytes32 indexed blockHash,\\n    bytes32 slot,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @notice method to get the storage roots of an account (token) in a certain block hash\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @return state root hash of the account on the block hash specified\\n   */\\n  function getStorageRoots(\\n    address account,\\n    bytes32 blockHash\\n  ) external view returns (bytes32);\\n\\n  /**\\n   * @notice method to process the storage root from an account on a block hash.\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param blockHeaderRLP rlp encoded block header. At same block where the block hash was taken\\n   * @param accountStateProofRLP rlp encoded account state proof, taken in same block as block hash\\n   * @return the storage root\\n   */\\n  function processStorageRoot(\\n    address account,\\n    bytes32 blockHash,\\n    bytes memory blockHeaderRLP,\\n    bytes memory accountStateProofRLP\\n  ) external returns (bytes32);\\n\\n  /**\\n   * @notice method to get the storage value at a certain slot and block hash for a certain address\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param slot hash of the explicit storage placement where the value to get is found.\\n   * @param storageProof generated proof containing the storage, at block hash\\n   * @return an object containing the slot value at the specified storage slot\\n   */\\n  function getStorage(\\n    address account,\\n    bytes32 blockHash,\\n    bytes32 slot,\\n    bytes memory storageProof\\n  ) external view returns (StateProofVerifier.SlotValue memory);\\n\\n  /**\\n   * @notice method to register the storage value at a certain slot and block hash for a certain address\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param slot hash of the explicit storage placement where the value to get is found.\\n   * @param storageProof generated proof containing the storage, at block hash\\n   */\\n  function processStorageSlot(\\n    address account,\\n    bytes32 blockHash,\\n    bytes32 slot,\\n    bytes calldata storageProof\\n  ) external;\\n\\n  /**\\n   * @notice method to get the value from storage at a certain block hash, previously registered.\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param account address of the token to get the storage roots from\\n   * @param slot hash of the explicit storage placement where the value to get is found.\\n   * @return numeric slot value of the slot. The value must be decoded to get the actual stored information\\n   */\\n  function getRegisteredSlot(\\n    bytes32 blockHash,\\n    address account,\\n    bytes32 slot\\n  ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-governance-v3/src/contracts/voting/libs/StateProofVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from './RLPReader.sol';\\nimport {MerklePatriciaProofVerifier} from './MerklePatriciaProofVerifier.sol';\\n\\n/**\\n * @title A helper library for verification of Merkle Patricia account and state proofs.\\n */\\nlibrary StateProofVerifier {\\n  using RLPReader for RLPReader.RLPItem;\\n  using RLPReader for bytes;\\n\\n  uint256 constant HEADER_STATE_ROOT_INDEX = 3;\\n  uint256 constant HEADER_NUMBER_INDEX = 8;\\n  uint256 constant HEADER_TIMESTAMP_INDEX = 11;\\n\\n  struct BlockHeader {\\n    bytes32 hash;\\n    bytes32 stateRootHash;\\n    uint256 number;\\n    uint256 timestamp;\\n  }\\n\\n  struct Account {\\n    bool exists;\\n    uint256 nonce;\\n    uint256 balance;\\n    bytes32 storageRoot;\\n    bytes32 codeHash;\\n  }\\n\\n  struct SlotValue {\\n    bool exists;\\n    uint256 value;\\n  }\\n\\n  /**\\n   * @notice Parses block header and verifies its presence onchain within the latest 256 blocks.\\n   * @param _headerRlpBytes RLP-encoded block header.\\n   */\\n  function verifyBlockHeader(\\n    bytes memory _headerRlpBytes,\\n    bytes32 _blockHash\\n  ) internal pure returns (BlockHeader memory) {\\n    BlockHeader memory header = parseBlockHeader(_headerRlpBytes);\\n    require(header.hash == _blockHash, 'blockhash mismatch');\\n    return header;\\n  }\\n\\n  /**\\n   * @notice Parses RLP-encoded block header.\\n   * @param _headerRlpBytes RLP-encoded block header.\\n   */\\n  function parseBlockHeader(\\n    bytes memory _headerRlpBytes\\n  ) internal pure returns (BlockHeader memory) {\\n    BlockHeader memory result;\\n    RLPReader.RLPItem[] memory headerFields = _headerRlpBytes\\n      .toRlpItem()\\n      .toList();\\n\\n    require(headerFields.length > HEADER_TIMESTAMP_INDEX);\\n\\n    result.stateRootHash = bytes32(\\n      headerFields[HEADER_STATE_ROOT_INDEX].toUint()\\n    );\\n    result.number = headerFields[HEADER_NUMBER_INDEX].toUint();\\n    result.timestamp = headerFields[HEADER_TIMESTAMP_INDEX].toUint();\\n    result.hash = keccak256(_headerRlpBytes);\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @notice Verifies Merkle Patricia proof of an account and extracts the account fields.\\n   *\\n   * @param _addressHash Keccak256 hash of the address corresponding to the account.\\n   * @param _stateRootHash MPT root hash of the Ethereum state trie.\\n   */\\n  function extractAccountFromProof(\\n    bytes32 _addressHash, // keccak256(abi.encodePacked(address))\\n    bytes32 _stateRootHash,\\n    RLPReader.RLPItem[] memory _proof\\n  ) internal pure returns (Account memory) {\\n    bytes memory acctRlpBytes = MerklePatriciaProofVerifier.extractProofValue(\\n      _stateRootHash,\\n      abi.encodePacked(_addressHash),\\n      _proof\\n    );\\n    Account memory account;\\n\\n    if (acctRlpBytes.length == 0) {\\n      return account;\\n    }\\n\\n    RLPReader.RLPItem[] memory acctFields = acctRlpBytes.toRlpItem().toList();\\n    require(acctFields.length == 4);\\n\\n    account.exists = true;\\n    account.nonce = acctFields[0].toUint();\\n    account.balance = acctFields[1].toUint();\\n    account.storageRoot = bytes32(acctFields[2].toUint());\\n    account.codeHash = bytes32(acctFields[3].toUint());\\n\\n    return account;\\n  }\\n\\n  /**\\n   * @notice Verifies Merkle Patricia proof of a slot and extracts the slot's value.\\n   *\\n   * @param _slotHash Keccak256 hash of the slot position.\\n   * @param _storageRootHash MPT root hash of the account's storage trie.\\n   */\\n  function extractSlotValueFromProof(\\n    bytes32 _slotHash,\\n    bytes32 _storageRootHash,\\n    RLPReader.RLPItem[] memory _proof\\n  ) internal pure returns (SlotValue memory) {\\n    bytes memory valueRlpBytes = MerklePatriciaProofVerifier.extractProofValue(\\n      _storageRootHash,\\n      abi.encodePacked(_slotHash),\\n      _proof\\n    );\\n\\n    SlotValue memory value;\\n\\n    if (valueRlpBytes.length != 0) {\\n      value.exists = true;\\n      value.value = valueRlpBytes.toRlpItem().toUint();\\n    }\\n\\n    return value;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-governance-v3/src/contracts/voting/libs/RLPReader.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n * Code copied from: https://github.com/hamdiallam/Solidity-RLP/blob/master/contracts/RLPReader.sol\\n */\\npragma solidity ^0.8.0;\\n\\nlibrary RLPReader {\\n  uint8 constant STRING_SHORT_START = 0x80;\\n  uint8 constant STRING_LONG_START = 0xb8;\\n  uint8 constant LIST_SHORT_START = 0xc0;\\n  uint8 constant LIST_LONG_START = 0xf8;\\n  uint8 constant WORD_SIZE = 32;\\n\\n  struct RLPItem {\\n    uint256 len;\\n    uint256 memPtr;\\n  }\\n\\n  struct Iterator {\\n    RLPItem item; // Item that's being iterated over.\\n    uint256 nextPtr; // Position of the next item in the list.\\n  }\\n\\n  /*\\n   * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n   * @param self The iterator.\\n   * @return The next element in the iteration.\\n   */\\n  function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n    require(hasNext(self));\\n\\n    uint256 ptr = self.nextPtr;\\n    uint256 itemLength = _itemLength(ptr);\\n    self.nextPtr = ptr + itemLength;\\n\\n    return RLPItem(itemLength, ptr);\\n  }\\n\\n  /*\\n   * @dev Returns true if the iteration has more elements.\\n   * @param self The iterator.\\n   * @return true if the iteration has more elements.\\n   */\\n  function hasNext(Iterator memory self) internal pure returns (bool) {\\n    RLPItem memory item = self.item;\\n    return self.nextPtr < item.memPtr + item.len;\\n  }\\n\\n  /*\\n   * @param item RLP encoded bytes\\n   */\\n  function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n    uint256 memPtr;\\n    assembly {\\n      memPtr := add(item, 0x20)\\n    }\\n\\n    return RLPItem(item.length, memPtr);\\n  }\\n\\n  /*\\n   * @dev Create an iterator. Reverts if item is not a list.\\n   * @param self The RLP item.\\n   * @return An 'Iterator' over the item.\\n   */\\n  function iterator(\\n    RLPItem memory self\\n  ) internal pure returns (Iterator memory) {\\n    require(isList(self));\\n\\n    uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n    return Iterator(self, ptr);\\n  }\\n\\n  /*\\n   * @param the RLP item.\\n   */\\n  function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n    return item.len;\\n  }\\n\\n  /*\\n   * @param the RLP item.\\n   * @return (memPtr, len) pair: location of the item's payload in memory.\\n   */\\n  function payloadLocation(\\n    RLPItem memory item\\n  ) internal pure returns (uint256, uint256) {\\n    uint256 offset = _payloadOffset(item.memPtr);\\n    uint256 memPtr = item.memPtr + offset;\\n    uint256 len = item.len - offset; // data length\\n    return (memPtr, len);\\n  }\\n\\n  /*\\n   * @param the RLP item.\\n   */\\n  function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n    (, uint256 len) = payloadLocation(item);\\n    return len;\\n  }\\n\\n  /*\\n   * @param the RLP item containing the encoded list.\\n   */\\n  function toList(\\n    RLPItem memory item\\n  ) internal pure returns (RLPItem[] memory) {\\n    require(isList(item));\\n\\n    uint256 items = numItems(item);\\n    RLPItem[] memory result = new RLPItem[](items);\\n\\n    uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 dataLen;\\n    for (uint256 i = 0; i < items; i++) {\\n      dataLen = _itemLength(memPtr);\\n      result[i] = RLPItem(dataLen, memPtr);\\n      memPtr = memPtr + dataLen;\\n    }\\n\\n    return result;\\n  }\\n\\n  // @return indicator whether encoded payload is a list. negate this function call for isData.\\n  function isList(RLPItem memory item) internal pure returns (bool) {\\n    if (item.len == 0) return false;\\n\\n    uint8 byte0;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < LIST_SHORT_START) return false;\\n    return true;\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of RLP encoded bytes.\\n   */\\n  function rlpBytesKeccak256(\\n    RLPItem memory item\\n  ) internal pure returns (bytes32) {\\n    uint256 ptr = item.memPtr;\\n    uint256 len = item.len;\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(ptr, len)\\n    }\\n    return result;\\n  }\\n\\n  /*\\n   * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n   * @return keccak256 hash of the item payload.\\n   */\\n  function payloadKeccak256(\\n    RLPItem memory item\\n  ) internal pure returns (bytes32) {\\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\\n    bytes32 result;\\n    assembly {\\n      result := keccak256(memPtr, len)\\n    }\\n    return result;\\n  }\\n\\n  /** RLPItem conversions into data types **/\\n\\n  // @returns raw rlp encoding in bytes\\n  function toRlpBytes(\\n    RLPItem memory item\\n  ) internal pure returns (bytes memory) {\\n    bytes memory result = new bytes(item.len);\\n    if (result.length == 0) return result;\\n\\n    uint256 ptr;\\n    assembly {\\n      ptr := add(0x20, result)\\n    }\\n\\n    copy(item.memPtr, ptr, item.len);\\n    return result;\\n  }\\n\\n  // any non-zero byte except \\\"0x80\\\" is considered true\\n  function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n    require(item.len == 1);\\n    uint256 result;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      result := byte(0, mload(memPtr))\\n    }\\n\\n    // SEE Github Issue #5.\\n    // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n    // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n    // here.\\n    if (result == 0 || result == STRING_SHORT_START) {\\n      return false;\\n    } else {\\n      return true;\\n    }\\n  }\\n\\n  function toAddress(RLPItem memory item) internal pure returns (address) {\\n    // 1 byte for the length prefix\\n    require(item.len == 21);\\n\\n    return address(uint160(toUint(item)));\\n  }\\n\\n  function toUint(RLPItem memory item) internal pure returns (uint256) {\\n    require(item.len > 0 && item.len <= 33);\\n\\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n    uint256 result;\\n    assembly {\\n      result := mload(memPtr)\\n\\n      // shift to the correct location if neccesary\\n      if lt(len, 32) {\\n        result := div(result, exp(256, sub(32, len)))\\n      }\\n    }\\n\\n    return result;\\n  }\\n\\n  // enforces 32 byte length\\n  function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n    // one byte prefix\\n    require(item.len == 33);\\n\\n    uint256 result;\\n    uint256 memPtr = item.memPtr + 1;\\n    assembly {\\n      result := mload(memPtr)\\n    }\\n\\n    return result;\\n  }\\n\\n  function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n    require(item.len > 0);\\n\\n    (uint256 memPtr, uint256 len) = payloadLocation(item);\\n    bytes memory result = new bytes(len);\\n\\n    uint256 destPtr;\\n    assembly {\\n      destPtr := add(0x20, result)\\n    }\\n\\n    copy(memPtr, destPtr, len);\\n    return result;\\n  }\\n\\n  /*\\n   * Private Helpers\\n   */\\n\\n  // @return number of payload items inside an encoded list.\\n  function numItems(RLPItem memory item) private pure returns (uint256) {\\n    if (item.len == 0) return 0;\\n\\n    uint256 count = 0;\\n    uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n    uint256 endPtr = item.memPtr + item.len;\\n    while (currPtr < endPtr) {\\n      currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n      count++;\\n    }\\n\\n    return count;\\n  }\\n\\n  // @return entire rlp item byte length\\n  function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n    uint256 itemLen;\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) {\\n      itemLen = 1;\\n    } else if (byte0 < STRING_LONG_START) {\\n      itemLen = byte0 - STRING_SHORT_START + 1;\\n    } else if (byte0 < LIST_SHORT_START) {\\n      assembly {\\n        let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n        memPtr := add(memPtr, 1) // skip over the first byte\\n\\n        /* 32 byte word size */\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    } else if (byte0 < LIST_LONG_START) {\\n      itemLen = byte0 - LIST_SHORT_START + 1;\\n    } else {\\n      assembly {\\n        let byteLen := sub(byte0, 0xf7)\\n        memPtr := add(memPtr, 1)\\n\\n        let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n        itemLen := add(dataLen, add(byteLen, 1))\\n      }\\n    }\\n\\n    return itemLen;\\n  }\\n\\n  // @return number of bytes until the data\\n  function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n    uint256 byte0;\\n    assembly {\\n      byte0 := byte(0, mload(memPtr))\\n    }\\n\\n    if (byte0 < STRING_SHORT_START) {\\n      return 0;\\n    } else if (\\n      byte0 < STRING_LONG_START ||\\n      (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)\\n    ) {\\n      return 1;\\n    } else if (byte0 < LIST_SHORT_START) {\\n      // being explicit\\n      return byte0 - (STRING_LONG_START - 1) + 1;\\n    } else {\\n      return byte0 - (LIST_LONG_START - 1) + 1;\\n    }\\n  }\\n\\n  /*\\n   * @param src Pointer to source\\n   * @param dest Pointer to destination\\n   * @param len Amount of memory to copy from the source\\n   */\\n  function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n    if (len == 0) return;\\n\\n    // copy as many word sizes as possible\\n    for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n\\n      src += WORD_SIZE;\\n      dest += WORD_SIZE;\\n    }\\n\\n    if (len > 0) {\\n      // left over bytes. Mask is used to remove unwanted bytes from the word\\n      uint256 mask = 256 ** (WORD_SIZE - len) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask)) // zero out src\\n        let destpart := and(mload(dest), mask) // retrieve the bytes\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-governance-v3/src/contracts/libraries/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author BGD Labs\\n * @notice Defines the error messages emitted by the different contracts of the Aave Governance V3\\n */\\nlibrary Errors {\\n  string public constant VOTING_PORTALS_COUNT_NOT_0 = '1'; // to be able to rescue voting portals count must be 0\\n  string public constant AT_LEAST_ONE_PAYLOAD = '2'; // to create a proposal, it must have at least one payload\\n  string public constant VOTING_PORTAL_NOT_APPROVED = '3'; // the voting portal used to vote on proposal must be approved\\n  string public constant PROPOSITION_POWER_IS_TOO_LOW = '4'; // proposition power of proposal creator must be equal or higher than the specified threshold for the access level\\n  string public constant PROPOSAL_NOT_IN_CREATED_STATE = '5'; // proposal should be in the CREATED state\\n  string public constant PROPOSAL_NOT_IN_ACTIVE_STATE = '6'; // proposal must be in an ACTIVE state\\n  string public constant PROPOSAL_NOT_IN_QUEUED_STATE = '7'; // proposal must be in a QUEUED state\\n  string public constant VOTING_START_COOLDOWN_PERIOD_NOT_PASSED = '8'; // to activate a proposal vote, the cool down delay must pass\\n  string public constant CALLER_NOT_A_VALID_VOTING_PORTAL = '9'; // only an allowed voting portal can queue a proposal\\n  string public constant QUEUE_COOLDOWN_PERIOD_NOT_PASSED = '10'; // to execute a proposal a cooldown delay must pass\\n  string public constant PROPOSAL_NOT_IN_THE_CORRECT_STATE = '11'; // proposal must be created but not executed yet to be able to be canceled\\n  string public constant CALLER_NOT_GOVERNANCE = '12'; // caller must be governance\\n  string public constant VOTER_ALREADY_VOTED_ON_PROPOSAL = '13'; // voter can only vote once per proposal using voting portal\\n  string public constant WRONG_MESSAGE_ORIGIN = '14'; // received message must come from registered source address, chain id, CrossChainController\\n  string public constant NO_VOTING_ASSETS = '15'; // Strategy must have voting assets\\n  string public constant PROPOSAL_VOTE_ALREADY_CREATED = '16'; // vote on proposal can only be created once\\n  string public constant INVALID_SIGNATURE = '17'; // submitted signature is not valid\\n  string public constant PROPOSAL_VOTE_NOT_FINISHED = '18'; // proposal vote must be finished\\n  string public constant PROPOSAL_VOTE_NOT_IN_ACTIVE_STATE = '19'; // proposal vote must be in active state\\n  string public constant PROPOSAL_VOTE_ALREADY_EXISTS = '20'; // proposal vote already exists\\n  string public constant VOTE_ONCE_FOR_ASSET = '21'; // an asset can only be used once per vote\\n  string public constant USER_BALANCE_DOES_NOT_EXISTS = '22'; // to vote an user must have balance in the token the user is voting with\\n  string public constant USER_VOTING_BALANCE_IS_ZERO = '23'; // to vote an user must have some balance between all the tokens selected for voting\\n  string public constant MISSING_AAVE_ROOTS = '24'; // must have AAVE roots registered to use strategy\\n  string public constant MISSING_STK_AAVE_ROOTS = '25'; // must have stkAAVE roots registered to use strategy\\n  string public constant MISSING_STK_AAVE_SLASHING_EXCHANGE_RATE = '26'; // must have stkAAVE slashing exchange rate registered to use strategy\\n  string public constant UNPROCESSED_STORAGE_ROOT = '27'; // root must be registered beforehand\\n  string public constant NOT_ENOUGH_MSG_VALUE = '28'; // method was not called with enough value to execute the call\\n  string public constant FAILED_ACTION_EXECUTION = '29'; // action failed to execute\\n  string public constant SHOULD_BE_AT_LEAST_ONE_EXECUTOR = '30'; // at least one executor is needed\\n  string public constant INVALID_EMPTY_TARGETS = '31'; // target of the payload execution must not be empty\\n  string public constant EXECUTOR_WAS_NOT_SPECIFIED_FOR_REQUESTED_ACCESS_LEVEL =\\n    '32'; // payload executor must be registered for the specified payload access level\\n  string public constant PAYLOAD_NOT_IN_QUEUED_STATE = '33'; // payload must be en the queued state\\n  string public constant TIMELOCK_NOT_FINISHED = '34'; // delay has not passed before execution can be called\\n  string public constant PAYLOAD_NOT_IN_THE_CORRECT_STATE = '35'; // payload must be created but not executed yet to be able to be canceled\\n  string public constant PAYLOAD_NOT_IN_CREATED_STATE = '36'; // payload must be in the created state\\n  string public constant MISSING_A_AAVE_ROOTS = '37'; // must have aAAVE roots registered to use strategy\\n  string public constant MISSING_PROPOSAL_BLOCK_HASH = '38'; // block hash for this proposal was not bridged before\\n  string public constant PROPOSAL_VOTE_CONFIGURATION_ALREADY_BRIDGED = '39'; // configuration for this proposal bridged already\\n  string public constant INVALID_VOTING_PORTAL_ADDRESS = '40'; // voting portal address can't be 0x0\\n  string public constant INVALID_POWER_STRATEGY = '41'; // 0x0 is not valid as the power strategy\\n  string public constant INVALID_EXECUTOR_ADDRESS = '42'; // executor address can't be 0x0\\n  string public constant EXECUTOR_ALREADY_SET_IN_DIFFERENT_LEVEL = '43'; // executor address already being used as executor of a different level\\n  string public constant INVALID_VOTING_DURATION = '44'; // voting duration can not be bigger than the time it takes to execute a proposal\\n  string public constant VOTING_DURATION_NOT_PASSED = '45'; // at least votingDuration should have passed since voting started for a proposal to be queued\\n  string public constant INVALID_PROPOSAL_ACCESS_LEVEL = '46'; // the bridged proposal access level does not correspond with the maximum access level required by the payload\\n  string public constant PAYLOAD_NOT_CREATED_BEFORE_PROPOSAL = '47'; // payload must be created before proposal\\n  string public constant INVALID_CROSS_CHAIN_CONTROLLER_ADDRESS = '48';\\n  string public constant INVALID_MESSAGE_ORIGINATOR_ADDRESS = '49';\\n  string public constant INVALID_ORIGIN_CHAIN_ID = '50';\\n  string public constant INVALID_ACTION_TARGET = '51';\\n  string public constant INVALID_ACTION_ACCESS_LEVEL = '52';\\n  string public constant INVALID_EXECUTOR_ACCESS_LEVEL = '53';\\n  string public constant INVALID_VOTING_PORTAL_CROSS_CHAIN_CONTROLLER = '54';\\n  string public constant INVALID_VOTING_PORTAL_VOTING_MACHINE = '55';\\n  string public constant INVALID_VOTING_PORTAL_GOVERNANCE = '56';\\n  string public constant INVALID_VOTING_MACHINE_CHAIN_ID = '57';\\n  string public constant G_INVALID_CROSS_CHAIN_CONTROLLER_ADDRESS = '58';\\n  string public constant G_INVALID_IPFS_HASH = '59';\\n  string public constant G_INVALID_PAYLOAD_ACCESS_LEVEL = '60';\\n  string public constant G_INVALID_PAYLOADS_CONTROLLER = '61';\\n  string public constant G_INVALID_PAYLOAD_CHAIN = '62';\\n  string public constant POWER_STRATEGY_HAS_NO_TOKENS = '63'; // power strategy should at least have\\n  string public constant INVALID_VOTING_CONFIG_ACCESS_LEVEL = '64';\\n  string public constant VOTING_DURATION_TOO_SMALL = '65';\\n  string public constant NO_BRIDGED_VOTING_ASSETS = '66';\\n  string public constant INVALID_VOTER = '67';\\n  string public constant INVALID_DATA_WAREHOUSE = '68';\\n  string public constant INVALID_VOTING_MACHINE_CROSS_CHAIN_CONTROLLER = '69';\\n  string public constant INVALID_L1_VOTING_PORTAL = '70';\\n  string public constant INVALID_VOTING_PORTAL_CHAIN_ID = '71';\\n  string public constant INVALID_VOTING_STRATEGY = '72';\\n  string public constant INVALID_VOTE_CONFIGURATION_BLOCKHASH = '73';\\n  string public constant INVALID_VOTE_CONFIGURATION_VOTING_DURATION = '74';\\n  string public constant INVALID_GAS_LIMIT = '75';\\n  string public constant INVALID_VOTING_CONFIGS = '76'; // a lvl2 voting configuration must be sent to initializer\\n  string public constant INVALID_EXECUTOR_DELAY = '77';\\n  string public constant REPEATED_STRATEGY_ASSET = '78';\\n  string public constant EMPTY_ASSET_STORAGE_SLOTS = '79';\\n  string public constant REPEATED_STRATEGY_ASSET_SLOT = '80';\\n  string public constant INVALID_EXECUTION_TARGET = '81';\\n  string public constant MISSING_VOTING_CONFIGURATIONS = '82'; // voting configurations for lvl1 and lvl2 must be included on initialization\\n  string public constant INVALID_PROPOSITION_POWER = '83';\\n  string public constant INVALID_YES_THRESHOLD = '84';\\n  string public constant INVALID_YES_NO_DIFFERENTIAL = '85';\\n  string public constant ETH_TRANSFER_FAILED = '86';\\n  string public constant INVALID_INITIAL_VOTING_CONFIGS = '87'; // initial voting configurations can not be of the same level\\n  string public constant INVALID_VOTING_PORTAL_ADDRESS_IN_VOTING_MACHINE = '88';\\n  string public constant INVALID_VOTING_PORTAL_OWNER = '89';\\n  string public constant CANCELLATION_FEE_REDEEM_FAILED = '90'; // cancellation fee was not able to be redeemed\\n  string public constant INVALID_CANCELLATION_FEE_COLLECTOR = '91'; // collector can not be address 0\\n  string public constant INVALID_CANCELLATION_FEE_SENT = '92'; // cancellation fee sent does not match the needed amount\\n  string public constant CANCELLATION_FEE_ALREADY_REDEEMED = '93'; // cancellation fee already redeemed\\n  string public constant INVALID_STATE_TO_REDEEM_CANCELLATION_FEE = '94'; // proposal state is not a valid state to redeem cancellation fee\\n  string public constant MISSING_REPRESENTATION_ROOTS = '95'; // to represent a voter the representation roots need to be registered\\n  string public constant CALLER_IS_NOT_VOTER_REPRESENTATIVE = '96'; // to represent a voter, caller must be the stored representative\\n  string public constant VM_INVALID_GOVERNANCE_ADDRESS = '97'; // governance address can not be 0\\n  string public constant ALL_DELEGATION_ACTIONS_FAILED = '98'; // all meta delegation actions failed on MetaDelegateHelper\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/GovernanceV3.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from './governance-v3/Errors.sol';\\nimport {IBaseReceiverPortal} from './governance-v3/IBaseReceiverPortal.sol';\\nimport {IDataWarehouse} from './governance-v3/IDataWarehouse.sol';\\nimport {IExecutor} from './governance-v3/IExecutor.sol';\\nimport {IGovernanceCore} from './governance-v3/IGovernanceCore.sol';\\nimport {IGovernancePowerStrategy} from './governance-v3/IGovernancePowerStrategy.sol';\\nimport {IPayloadsControllerCore} from './governance-v3/IPayloadsControllerCore.sol';\\nimport {IVotingMachineWithProofs} from './governance-v3/IVotingMachineWithProofs.sol';\\nimport {IVotingPortal} from './governance-v3/IVotingPortal.sol';\\nimport {IVotingStrategy} from './governance-v3/IVotingStrategy.sol';\\nimport {PayloadsControllerUtils} from './governance-v3/PayloadsControllerUtils.sol';\\n\"\r\n    },\r\n    \"lib/solidity-utils/src/contracts/oz-common/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n// From commit https://github.com/OpenZeppelin/openzeppelin-contracts/commit/8b778fa20d6d76340c5fac1ed66c80273f05b95a\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62: siloed borrowing enabled\\n    //bit 63: flashloaning enabled\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {NONE, STABLE, VARIABLE}\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/protocol/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE_OR_LTV_ZERO = '62'; // 'User is in isolation mode or ltv is zero'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/protocol/libraries/types/ConfiguratorInputTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary ConfiguratorInputTypes {\\n  struct InitReserveInput {\\n    address aTokenImpl;\\n    address stableDebtTokenImpl;\\n    address variableDebtTokenImpl;\\n    uint8 underlyingAssetDecimals;\\n    address interestRateStrategyAddress;\\n    address underlyingAsset;\\n    address treasury;\\n    address incentivesController;\\n    string aTokenName;\\n    string aTokenSymbol;\\n    string variableDebtTokenName;\\n    string variableDebtTokenSymbol;\\n    string stableDebtTokenName;\\n    string stableDebtTokenSymbol;\\n    bytes params;\\n  }\\n\\n  struct UpdateATokenInput {\\n    address asset;\\n    address treasury;\\n    address incentivesController;\\n    string name;\\n    string symbol;\\n    address implementation;\\n    bytes params;\\n  }\\n\\n  struct UpdateDebtTokenInput {\\n    address asset;\\n    address incentivesController;\\n    string name;\\n    string symbol;\\n    address implementation;\\n    bytes params;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\\nimport {IScaledBalanceToken} from './IScaledBalanceToken.sol';\\nimport {IInitializableAToken} from './IInitializableAToken.sol';\\n\\n/**\\n * @title IAToken\\n * @author Aave\\n * @notice Defines the basic interface for an AToken.\\n */\\ninterface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\\n  /**\\n   * @dev Emitted during the transfer action\\n   * @param from The user whose tokens are being transferred\\n   * @param to The recipient\\n   * @param value The scaled amount being transferred\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\\n\\n  /**\\n   * @notice Mints `amount` aTokens to `user`\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted aTokens\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   * @return `true` if the the previous balance of the user was 0\\n   */\\n  function mint(\\n    address caller,\\n    address onBehalfOf,\\n    uint256 amount,\\n    uint256 index\\n  ) external returns (bool);\\n\\n  /**\\n   * @notice Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\\n   * @dev In some instances, the mint event could be emitted from a burn transaction\\n   * if the amount to burn is less than the interest that the user accrued\\n   * @param from The address from which the aTokens will be burned\\n   * @param receiverOfUnderlying The address that will receive the underlying\\n   * @param amount The amount being burned\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function burn(address from, address receiverOfUnderlying, uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @notice Mints aTokens to the reserve treasury\\n   * @param amount The amount of tokens getting minted\\n   * @param index The next liquidity index of the reserve\\n   */\\n  function mintToTreasury(uint256 amount, uint256 index) external;\\n\\n  /**\\n   * @notice Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\\n   * @param from The address getting liquidated, current owner of the aTokens\\n   * @param to The recipient\\n   * @param value The amount of tokens getting transferred\\n   */\\n  function transferOnLiquidation(address from, address to, uint256 value) external;\\n\\n  /**\\n   * @notice Transfers the underlying asset to `target`.\\n   * @dev Used by the Pool to transfer assets in borrow(), withdraw() and flashLoan()\\n   * @param target The recipient of the underlying\\n   * @param amount The amount getting transferred\\n   */\\n  function transferUnderlyingTo(address target, uint256 amount) external;\\n\\n  /**\\n   * @notice Handles the underlying received by the aToken after the transfer has been completed.\\n   * @dev The default implementation is empty as with standard ERC20 tokens, nothing needs to be done after the\\n   * transfer is concluded. However in the future there may be aTokens that allow for example to stake the underlying\\n   * to receive LM rewards. In that case, `handleRepayment()` would perform the staking of the underlying asset.\\n   * @param user The user executing the repayment\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed\\n   * @param amount The amount getting repaid\\n   */\\n  function handleRepayment(address user, address onBehalfOf, uint256 amount) external;\\n\\n  /**\\n   * @notice Allow passing a signed message to approve spending\\n   * @dev implements the permit function as for\\n   * https://github.com/ethereum/EIPs/blob/8a34d644aacf0f9f8f00815307fd7dd5da07655f/EIPS/eip-2612.md\\n   * @param owner The owner of the funds\\n   * @param spender The spender\\n   * @param value The amount\\n   * @param deadline The deadline timestamp, type(uint256).max for max deadline\\n   * @param v Signature param\\n   * @param s Signature param\\n   * @param r Signature param\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @return The address of the underlying asset\\n   */\\n  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the Aave treasury, receiving the fees on this aToken.\\n   * @return Address of the Aave treasury\\n   */\\n  function RESERVE_TREASURY_ADDRESS() external view returns (address);\\n\\n  /**\\n   * @notice Get the domain separator for the token\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the nonce for owner.\\n   * @param owner The address of the owner\\n   * @return The nonce of the owner\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(address token, address to, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(address asset, uint256 amount, uint256 fee) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(address asset, uint256 amount, address to) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address rateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(\\n    address asset,\\n    DataTypes.ReserveConfigurationMap calldata configuration\\n  ) external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(\\n    address asset\\n  ) external view returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(\\n    address user\\n  ) external view returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(address token, address to, uint256 amount) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IPoolConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {ConfiguratorInputTypes} from '../protocol/libraries/types/ConfiguratorInputTypes.sol';\\n\\n/**\\n * @title IPoolConfigurator\\n * @author Aave\\n * @notice Defines the basic interface for a Pool configurator.\\n */\\ninterface IPoolConfigurator {\\n  /**\\n   * @dev Emitted when a reserve is initialized.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aToken The address of the associated aToken contract\\n   * @param stableDebtToken The address of the associated stable rate debt token\\n   * @param variableDebtToken The address of the associated variable rate debt token\\n   * @param interestRateStrategyAddress The address of the interest rate strategy for the reserve\\n   */\\n  event ReserveInitialized(\\n    address indexed asset,\\n    address indexed aToken,\\n    address stableDebtToken,\\n    address variableDebtToken,\\n    address interestRateStrategyAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when borrowing is enabled or disabled on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing is enabled, false otherwise\\n   */\\n  event ReserveBorrowing(address indexed asset, bool enabled);\\n\\n  /**\\n   * @dev Emitted when flashloans are enabled or disabled on a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if flashloans are enabled, false otherwise\\n   */\\n  event ReserveFlashLoaning(address indexed asset, bool enabled);\\n\\n  /**\\n   * @dev Emitted when the collateralization risk parameters for the specified asset are updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param ltv The loan to value of the asset when used as collateral\\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n   */\\n  event CollateralConfigurationChanged(\\n    address indexed asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  );\\n\\n  /**\\n   * @dev Emitted when stable rate borrowing is enabled or disabled on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if stable rate borrowing is enabled, false otherwise\\n   */\\n  event ReserveStableRateBorrowing(address indexed asset, bool enabled);\\n\\n  /**\\n   * @dev Emitted when a reserve is activated or deactivated\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param active True if reserve is active, false otherwise\\n   */\\n  event ReserveActive(address indexed asset, bool active);\\n\\n  /**\\n   * @dev Emitted when a reserve is frozen or unfrozen\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param frozen True if reserve is frozen, false otherwise\\n   */\\n  event ReserveFrozen(address indexed asset, bool frozen);\\n\\n  /**\\n   * @dev Emitted when a reserve is paused or unpaused\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param paused True if reserve is paused, false otherwise\\n   */\\n  event ReservePaused(address indexed asset, bool paused);\\n\\n  /**\\n   * @dev Emitted when a reserve is dropped.\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  event ReserveDropped(address indexed asset);\\n\\n  /**\\n   * @dev Emitted when a reserve factor is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldReserveFactor The old reserve factor, expressed in bps\\n   * @param newReserveFactor The new reserve factor, expressed in bps\\n   */\\n  event ReserveFactorChanged(\\n    address indexed asset,\\n    uint256 oldReserveFactor,\\n    uint256 newReserveFactor\\n  );\\n\\n  /**\\n   * @dev Emitted when the borrow cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldBorrowCap The old borrow cap\\n   * @param newBorrowCap The new borrow cap\\n   */\\n  event BorrowCapChanged(address indexed asset, uint256 oldBorrowCap, uint256 newBorrowCap);\\n\\n  /**\\n   * @dev Emitted when the supply cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldSupplyCap The old supply cap\\n   * @param newSupplyCap The new supply cap\\n   */\\n  event SupplyCapChanged(address indexed asset, uint256 oldSupplyCap, uint256 newSupplyCap);\\n\\n  /**\\n   * @dev Emitted when the liquidation protocol fee of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldFee The old liquidation protocol fee, expressed in bps\\n   * @param newFee The new liquidation protocol fee, expressed in bps\\n   */\\n  event LiquidationProtocolFeeChanged(address indexed asset, uint256 oldFee, uint256 newFee);\\n\\n  /**\\n   * @dev Emitted when the unbacked mint cap of a reserve is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldUnbackedMintCap The old unbacked mint cap\\n   * @param newUnbackedMintCap The new unbacked mint cap\\n   */\\n  event UnbackedMintCapChanged(\\n    address indexed asset,\\n    uint256 oldUnbackedMintCap,\\n    uint256 newUnbackedMintCap\\n  );\\n\\n  /**\\n   * @dev Emitted when the category of an asset in eMode is changed.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldCategoryId The old eMode asset category\\n   * @param newCategoryId The new eMode asset category\\n   */\\n  event EModeAssetCategoryChanged(address indexed asset, uint8 oldCategoryId, uint8 newCategoryId);\\n\\n  /**\\n   * @dev Emitted when a new eMode category is added.\\n   * @param categoryId The new eMode category id\\n   * @param ltv The ltv for the asset category in eMode\\n   * @param liquidationThreshold The liquidationThreshold for the asset category in eMode\\n   * @param liquidationBonus The liquidationBonus for the asset category in eMode\\n   * @param oracle The optional address of the price oracle specific for this category\\n   * @param label A human readable identifier for the category\\n   */\\n  event EModeCategoryAdded(\\n    uint8 indexed categoryId,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus,\\n    address oracle,\\n    string label\\n  );\\n\\n  /**\\n   * @dev Emitted when a reserve interest strategy contract is updated.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldStrategy The address of the old interest strategy contract\\n   * @param newStrategy The address of the new interest strategy contract\\n   */\\n  event ReserveInterestRateStrategyChanged(\\n    address indexed asset,\\n    address oldStrategy,\\n    address newStrategy\\n  );\\n\\n  /**\\n   * @dev Emitted when an aToken implementation is upgraded.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The aToken proxy address\\n   * @param implementation The new aToken implementation\\n   */\\n  event ATokenUpgraded(\\n    address indexed asset,\\n    address indexed proxy,\\n    address indexed implementation\\n  );\\n\\n  /**\\n   * @dev Emitted when the implementation of a stable debt token is upgraded.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The stable debt token proxy address\\n   * @param implementation The new aToken implementation\\n   */\\n  event StableDebtTokenUpgraded(\\n    address indexed asset,\\n    address indexed proxy,\\n    address indexed implementation\\n  );\\n\\n  /**\\n   * @dev Emitted when the implementation of a variable debt token is upgraded.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param proxy The variable debt token proxy address\\n   * @param implementation The new aToken implementation\\n   */\\n  event VariableDebtTokenUpgraded(\\n    address indexed asset,\\n    address indexed proxy,\\n    address indexed implementation\\n  );\\n\\n  /**\\n   * @dev Emitted when the debt ceiling of an asset is set.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldDebtCeiling The old debt ceiling\\n   * @param newDebtCeiling The new debt ceiling\\n   */\\n  event DebtCeilingChanged(address indexed asset, uint256 oldDebtCeiling, uint256 newDebtCeiling);\\n\\n  /**\\n   * @dev Emitted when the the siloed borrowing state for an asset is changed.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param oldState The old siloed borrowing state\\n   * @param newState The new siloed borrowing state\\n   */\\n  event SiloedBorrowingChanged(address indexed asset, bool oldState, bool newState);\\n\\n  /**\\n   * @dev Emitted when the bridge protocol fee is updated.\\n   * @param oldBridgeProtocolFee The old protocol fee, expressed in bps\\n   * @param newBridgeProtocolFee The new protocol fee, expressed in bps\\n   */\\n  event BridgeProtocolFeeUpdated(uint256 oldBridgeProtocolFee, uint256 newBridgeProtocolFee);\\n\\n  /**\\n   * @dev Emitted when the total premium on flashloans is updated.\\n   * @param oldFlashloanPremiumTotal The old premium, expressed in bps\\n   * @param newFlashloanPremiumTotal The new premium, expressed in bps\\n   */\\n  event FlashloanPremiumTotalUpdated(\\n    uint128 oldFlashloanPremiumTotal,\\n    uint128 newFlashloanPremiumTotal\\n  );\\n\\n  /**\\n   * @dev Emitted when the part of the premium that goes to protocol is updated.\\n   * @param oldFlashloanPremiumToProtocol The old premium, expressed in bps\\n   * @param newFlashloanPremiumToProtocol The new premium, expressed in bps\\n   */\\n  event FlashloanPremiumToProtocolUpdated(\\n    uint128 oldFlashloanPremiumToProtocol,\\n    uint128 newFlashloanPremiumToProtocol\\n  );\\n\\n  /**\\n   * @dev Emitted when the reserve is set as borrowable/non borrowable in isolation mode.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param borrowable True if the reserve is borrowable in isolation, false otherwise\\n   */\\n  event BorrowableInIsolationChanged(address asset, bool borrowable);\\n\\n  /**\\n   * @notice Initializes multiple reserves.\\n   * @param input The array of initialization parameters\\n   */\\n  function initReserves(ConfiguratorInputTypes.InitReserveInput[] calldata input) external;\\n\\n  /**\\n   * @dev Updates the aToken implementation for the reserve.\\n   * @param input The aToken update parameters\\n   */\\n  function updateAToken(ConfiguratorInputTypes.UpdateATokenInput calldata input) external;\\n\\n  /**\\n   * @notice Updates the stable debt token implementation for the reserve.\\n   * @param input The stableDebtToken update parameters\\n   */\\n  function updateStableDebtToken(\\n    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\n  ) external;\\n\\n  /**\\n   * @notice Updates the variable debt token implementation for the asset.\\n   * @param input The variableDebtToken update parameters\\n   */\\n  function updateVariableDebtToken(\\n    ConfiguratorInputTypes.UpdateDebtTokenInput calldata input\\n  ) external;\\n\\n  /**\\n   * @notice Configures borrowing on a reserve.\\n   * @dev Can only be disabled (set to false) if stable borrowing is disabled\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if borrowing needs to be enabled, false otherwise\\n   */\\n  function setReserveBorrowing(address asset, bool enabled) external;\\n\\n  /**\\n   * @notice Configures the reserve collateralization parameters.\\n   * @dev All the values are expressed in bps. A value of 10000, results in 100.00%\\n   * @dev The `liquidationBonus` is always above 100%. A value of 105% means the liquidator will receive a 5% bonus\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param ltv The loan to value of the asset when used as collateral\\n   * @param liquidationThreshold The threshold at which loans using this asset as collateral will be considered undercollateralized\\n   * @param liquidationBonus The bonus liquidators receive to liquidate this asset\\n   */\\n  function configureReserveAsCollateral(\\n    address asset,\\n    uint256 ltv,\\n    uint256 liquidationThreshold,\\n    uint256 liquidationBonus\\n  ) external;\\n\\n  /**\\n   * @notice Enable or disable stable rate borrowing on a reserve.\\n   * @dev Can only be enabled (set to true) if borrowing is enabled\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if stable rate borrowing needs to be enabled, false otherwise\\n   */\\n  function setReserveStableRateBorrowing(address asset, bool enabled) external;\\n\\n  /**\\n   * @notice Enable or disable flashloans on a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param enabled True if flashloans need to be enabled, false otherwise\\n   */\\n  function setReserveFlashLoaning(address asset, bool enabled) external;\\n\\n  /**\\n   * @notice Activate or deactivate a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param active True if the reserve needs to be active, false otherwise\\n   */\\n  function setReserveActive(address asset, bool active) external;\\n\\n  /**\\n   * @notice Freeze or unfreeze a reserve. A frozen reserve doesn't allow any new supply, borrow\\n   * or rate swap but allows repayments, liquidations, rate rebalances and withdrawals.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param freeze True if the reserve needs to be frozen, false otherwise\\n   */\\n  function setReserveFreeze(address asset, bool freeze) external;\\n\\n  /**\\n   * @notice Sets the borrowable in isolation flag for the reserve.\\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the\\n   * borrowed amount will be accumulated in the isolated collateral's total debt exposure\\n   * @dev Only assets of the same family (e.g. USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param borrowable True if the asset should be borrowable in isolation, false otherwise\\n   */\\n  function setBorrowableInIsolation(address asset, bool borrowable) external;\\n\\n  /**\\n   * @notice Pauses a reserve. A paused reserve does not allow any interaction (supply, borrow, repay,\\n   * swap interest rate, liquidate, atoken transfers).\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param paused True if pausing the reserve, false if unpausing\\n   */\\n  function setReservePause(address asset, bool paused) external;\\n\\n  /**\\n   * @notice Updates the reserve factor of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newReserveFactor The new reserve factor of the reserve\\n   */\\n  function setReserveFactor(address asset, uint256 newReserveFactor) external;\\n\\n  /**\\n   * @notice Sets the interest rate strategy of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newRateStrategyAddress The address of the new interest strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(\\n    address asset,\\n    address newRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Pauses or unpauses all the protocol reserves. In the paused state all the protocol interactions\\n   * are suspended.\\n   * @param paused True if protocol needs to be paused, false otherwise\\n   */\\n  function setPoolPause(bool paused) external;\\n\\n  /**\\n   * @notice Updates the borrow cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newBorrowCap The new borrow cap of the reserve\\n   */\\n  function setBorrowCap(address asset, uint256 newBorrowCap) external;\\n\\n  /**\\n   * @notice Updates the supply cap of a reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newSupplyCap The new supply cap of the reserve\\n   */\\n  function setSupplyCap(address asset, uint256 newSupplyCap) external;\\n\\n  /**\\n   * @notice Updates the liquidation protocol fee of reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newFee The new liquidation protocol fee of the reserve, expressed in bps\\n   */\\n  function setLiquidationProtocolFee(address asset, uint256 newFee) external;\\n\\n  /**\\n   * @notice Updates the unbacked mint cap of reserve.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newUnbackedMintCap The new unbacked mint cap of the reserve\\n   */\\n  function setUnbackedMintCap(address asset, uint256 newUnbackedMintCap) external;\\n\\n  /**\\n   * @notice Assign an efficiency mode (eMode) category to asset.\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param newCategoryId The new category id of the asset\\n   */\\n  function setAssetEModeCategory(address asset, uint8 newCategoryId) external;\\n\\n  /**\\n   * @notice Adds a new efficiency mode (eMode) category.\\n   * @dev If zero is provided as oracle address, the default asset oracles will be used to compute the overall debt and\\n   * overcollateralization of the users using this category.\\n   * @dev The new ltv and liquidation threshold must be greater than the base\\n   * ltvs and liquidation thresholds of all assets within the eMode category\\n   * @param categoryId The id of the category to be configured\\n   * @param ltv The ltv associated with the category\\n   * @param liquidationThreshold The liquidation threshold associated with the category\\n   * @param liquidationBonus The liquidation bonus associated with the category\\n   * @param oracle The oracle associated with the category\\n   * @param label A label identifying the category\\n   */\\n  function setEModeCategory(\\n    uint8 categoryId,\\n    uint16 ltv,\\n    uint16 liquidationThreshold,\\n    uint16 liquidationBonus,\\n    address oracle,\\n    string calldata label\\n  ) external;\\n\\n  /**\\n   * @notice Drops a reserve entirely.\\n   * @param asset The address of the reserve to drop\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the bridge fee collected by the protocol reserves.\\n   * @param newBridgeProtocolFee The part of the fee sent to the protocol treasury, expressed in bps\\n   */\\n  function updateBridgeProtocolFee(uint256 newBridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates the total flash loan premium.\\n   * Total flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra balance\\n   * - A part is collected by the protocol reserves\\n   * @dev Expressed in bps\\n   * @dev The premium is calculated on the total amount borrowed\\n   * @param newFlashloanPremiumTotal The total flashloan premium\\n   */\\n  function updateFlashloanPremiumTotal(uint128 newFlashloanPremiumTotal) external;\\n\\n  /**\\n   * @notice Updates the flash loan premium collected by protocol reserves\\n   * @dev Expressed in bps\\n   * @dev The premium to protocol is calculated on the total flashloan premium\\n   * @param newFlashloanPremiumToProtocol The part of the flashloan premium sent to the protocol treasury\\n   */\\n  function updateFlashloanPremiumToProtocol(uint128 newFlashloanPremiumToProtocol) external;\\n\\n  /**\\n   * @notice Sets the debt ceiling for an asset.\\n   * @param newDebtCeiling The new debt ceiling\\n   */\\n  function setDebtCeiling(address asset, uint256 newDebtCeiling) external;\\n\\n  /**\\n   * @notice Sets siloed borrowing for an asset\\n   * @param siloed The new siloed borrowing state\\n   */\\n  function setSiloedBorrowing(address asset, bool siloed) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IPriceOracleGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n  /**\\n   * @notice Returns the base currency address\\n   * @dev Address 0x0 is reserved for USD as base currency.\\n   * @return Returns the base currency address.\\n   */\\n  function BASE_CURRENCY() external view returns (address);\\n\\n  /**\\n   * @notice Returns the base currency unit\\n   * @dev 1 ether for ETH, 1e8 for USD.\\n   * @return Returns the base currency unit.\\n   */\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IAaveOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPriceOracleGetter} from './IPriceOracleGetter.sol';\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IAaveOracle\\n * @author Aave\\n * @notice Defines the basic interface for the Aave Oracle\\n */\\ninterface IAaveOracle is IPriceOracleGetter {\\n  /**\\n   * @dev Emitted after the base currency is set\\n   * @param baseCurrency The base currency of used for price quotes\\n   * @param baseCurrencyUnit The unit of the base currency\\n   */\\n  event BaseCurrencySet(address indexed baseCurrency, uint256 baseCurrencyUnit);\\n\\n  /**\\n   * @dev Emitted after the price source of an asset is updated\\n   * @param asset The address of the asset\\n   * @param source The price source of the asset\\n   */\\n  event AssetSourceUpdated(address indexed asset, address indexed source);\\n\\n  /**\\n   * @dev Emitted after the address of fallback oracle is updated\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n  event FallbackOracleUpdated(address indexed fallbackOracle);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider contract\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Sets or replaces price sources of assets\\n   * @param assets The addresses of the assets\\n   * @param sources The addresses of the price sources\\n   */\\n  function setAssetSources(address[] calldata assets, address[] calldata sources) external;\\n\\n  /**\\n   * @notice Sets the fallback oracle\\n   * @param fallbackOracle The address of the fallback oracle\\n   */\\n  function setFallbackOracle(address fallbackOracle) external;\\n\\n  /**\\n   * @notice Returns a list of prices from a list of assets addresses\\n   * @param assets The list of assets addresses\\n   * @return The prices of the given assets\\n   */\\n  function getAssetsPrices(address[] calldata assets) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice Returns the address of the source for an asset address\\n   * @param asset The address of the asset\\n   * @return The address of the source\\n   */\\n  function getSourceOfAsset(address asset) external view returns (address);\\n\\n  /**\\n   * @notice Returns the address of the fallback oracle\\n   * @return The address of the fallback oracle\\n   */\\n  function getFallbackOracle() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IACLManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IACLManager\\n * @author Aave\\n * @notice Defines the basic interface for the ACL Manager\\n */\\ninterface IACLManager {\\n  /**\\n   * @notice Returns the contract address of the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Returns the identifier of the PoolAdmin role\\n   * @return The id of the PoolAdmin role\\n   */\\n  function POOL_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the EmergencyAdmin role\\n   * @return The id of the EmergencyAdmin role\\n   */\\n  function EMERGENCY_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the RiskAdmin role\\n   * @return The id of the RiskAdmin role\\n   */\\n  function RISK_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the FlashBorrower role\\n   * @return The id of the FlashBorrower role\\n   */\\n  function FLASH_BORROWER_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the Bridge role\\n   * @return The id of the Bridge role\\n   */\\n  function BRIDGE_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Returns the identifier of the AssetListingAdmin role\\n   * @return The id of the AssetListingAdmin role\\n   */\\n  function ASSET_LISTING_ADMIN_ROLE() external view returns (bytes32);\\n\\n  /**\\n   * @notice Set the role as admin of a specific role.\\n   * @dev By default the admin role for all roles is `DEFAULT_ADMIN_ROLE`.\\n   * @param role The role to be managed by the admin role\\n   * @param adminRole The admin role\\n   */\\n  function setRoleAdmin(bytes32 role, bytes32 adminRole) external;\\n\\n  /**\\n   * @notice Adds a new admin as PoolAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addPoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as PoolAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removePoolAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is PoolAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is PoolAdmin, false otherwise\\n   */\\n  function isPoolAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as EmergencyAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as EmergencyAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeEmergencyAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is EmergencyAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is EmergencyAdmin, false otherwise\\n   */\\n  function isEmergencyAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as RiskAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as RiskAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeRiskAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is RiskAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is RiskAdmin, false otherwise\\n   */\\n  function isRiskAdmin(address admin) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as FlashBorrower\\n   * @param borrower The address of the new FlashBorrower\\n   */\\n  function addFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Removes an address as FlashBorrower\\n   * @param borrower The address of the FlashBorrower to remove\\n   */\\n  function removeFlashBorrower(address borrower) external;\\n\\n  /**\\n   * @notice Returns true if the address is FlashBorrower, false otherwise\\n   * @param borrower The address to check\\n   * @return True if the given address is FlashBorrower, false otherwise\\n   */\\n  function isFlashBorrower(address borrower) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new address as Bridge\\n   * @param bridge The address of the new Bridge\\n   */\\n  function addBridge(address bridge) external;\\n\\n  /**\\n   * @notice Removes an address as Bridge\\n   * @param bridge The address of the bridge to remove\\n   */\\n  function removeBridge(address bridge) external;\\n\\n  /**\\n   * @notice Returns true if the address is Bridge, false otherwise\\n   * @param bridge The address to check\\n   * @return True if the given address is Bridge, false otherwise\\n   */\\n  function isBridge(address bridge) external view returns (bool);\\n\\n  /**\\n   * @notice Adds a new admin as AssetListingAdmin\\n   * @param admin The address of the new admin\\n   */\\n  function addAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Removes an admin as AssetListingAdmin\\n   * @param admin The address of the admin to remove\\n   */\\n  function removeAssetListingAdmin(address admin) external;\\n\\n  /**\\n   * @notice Returns true if the address is AssetListingAdmin, false otherwise\\n   * @param admin The address to check\\n   * @return True if the given address is AssetListingAdmin, false otherwise\\n   */\\n  function isAssetListingAdmin(address admin) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IPoolDataProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IPoolDataProvider\\n * @author Aave\\n * @notice Defines the basic interface of a PoolDataProvider\\n */\\ninterface IPoolDataProvider {\\n  struct TokenData {\\n    string symbol;\\n    address tokenAddress;\\n  }\\n\\n  /**\\n   * @notice Returns the address for the PoolAddressesProvider contract.\\n   * @return The address for the PoolAddressesProvider contract\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Returns the list of the existing reserves in the pool.\\n   * @dev Handling MKR and ETH in a different way since they do not have standard `symbol` functions.\\n   * @return The list of reserves, pairs of symbols and addresses\\n   */\\n  function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n  /**\\n   * @notice Returns the list of the existing ATokens in the pool.\\n   * @return The list of ATokens, pairs of symbols and addresses\\n   */\\n  function getAllATokens() external view returns (TokenData[] memory);\\n\\n  /**\\n   * @notice Returns the configuration data of the reserve\\n   * @dev Not returning borrow and supply caps for compatibility, nor pause flag\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return decimals The number of decimals of the reserve\\n   * @return ltv The ltv of the reserve\\n   * @return liquidationThreshold The liquidationThreshold of the reserve\\n   * @return liquidationBonus The liquidationBonus of the reserve\\n   * @return reserveFactor The reserveFactor of the reserve\\n   * @return usageAsCollateralEnabled True if the usage as collateral is enabled, false otherwise\\n   * @return borrowingEnabled True if borrowing is enabled, false otherwise\\n   * @return stableBorrowRateEnabled True if stable rate borrowing is enabled, false otherwise\\n   * @return isActive True if it is active, false otherwise\\n   * @return isFrozen True if it is frozen, false otherwise\\n   */\\n  function getReserveConfigurationData(\\n    address asset\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 decimals,\\n      uint256 ltv,\\n      uint256 liquidationThreshold,\\n      uint256 liquidationBonus,\\n      uint256 reserveFactor,\\n      bool usageAsCollateralEnabled,\\n      bool borrowingEnabled,\\n      bool stableBorrowRateEnabled,\\n      bool isActive,\\n      bool isFrozen\\n    );\\n\\n  /**\\n   * @notice Returns the efficiency mode category of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The eMode id of the reserve\\n   */\\n  function getReserveEModeCategory(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the caps parameters of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return borrowCap The borrow cap of the reserve\\n   * @return supplyCap The supply cap of the reserve\\n   */\\n  function getReserveCaps(\\n    address asset\\n  ) external view returns (uint256 borrowCap, uint256 supplyCap);\\n\\n  /**\\n   * @notice Returns if the pool is paused\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return isPaused True if the pool is paused, false otherwise\\n   */\\n  function getPaused(address asset) external view returns (bool isPaused);\\n\\n  /**\\n   * @notice Returns the siloed borrowing flag\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return True if the asset is siloed for borrowing\\n   */\\n  function getSiloedBorrowing(address asset) external view returns (bool);\\n\\n  /**\\n   * @notice Returns the protocol fee on the liquidation bonus\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The protocol fee on liquidation\\n   */\\n  function getLiquidationProtocolFee(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the unbacked mint cap of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The unbacked mint cap of the reserve\\n   */\\n  function getUnbackedMintCap(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the debt ceiling of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The debt ceiling of the reserve\\n   */\\n  function getDebtCeiling(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the debt ceiling decimals\\n   * @return The debt ceiling decimals\\n   */\\n  function getDebtCeilingDecimals() external pure returns (uint256);\\n\\n  /**\\n   * @notice Returns the reserve data\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return unbacked The amount of unbacked tokens\\n   * @return accruedToTreasuryScaled The scaled amount of tokens accrued to treasury that is to be minted\\n   * @return totalAToken The total supply of the aToken\\n   * @return totalStableDebt The total stable debt of the reserve\\n   * @return totalVariableDebt The total variable debt of the reserve\\n   * @return liquidityRate The liquidity rate of the reserve\\n   * @return variableBorrowRate The variable borrow rate of the reserve\\n   * @return stableBorrowRate The stable borrow rate of the reserve\\n   * @return averageStableBorrowRate The average stable borrow rate of the reserve\\n   * @return liquidityIndex The liquidity index of the reserve\\n   * @return variableBorrowIndex The variable borrow index of the reserve\\n   * @return lastUpdateTimestamp The timestamp of the last update of the reserve\\n   */\\n  function getReserveData(\\n    address asset\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 unbacked,\\n      uint256 accruedToTreasuryScaled,\\n      uint256 totalAToken,\\n      uint256 totalStableDebt,\\n      uint256 totalVariableDebt,\\n      uint256 liquidityRate,\\n      uint256 variableBorrowRate,\\n      uint256 stableBorrowRate,\\n      uint256 averageStableBorrowRate,\\n      uint256 liquidityIndex,\\n      uint256 variableBorrowIndex,\\n      uint40 lastUpdateTimestamp\\n    );\\n\\n  /**\\n   * @notice Returns the total supply of aTokens for a given asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The total supply of the aToken\\n   */\\n  function getATokenTotalSupply(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total debt for a given asset\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The total debt for asset\\n   */\\n  function getTotalDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the user data in a reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param user The address of the user\\n   * @return currentATokenBalance The current AToken balance of the user\\n   * @return currentStableDebt The current stable debt of the user\\n   * @return currentVariableDebt The current variable debt of the user\\n   * @return principalStableDebt The principal stable debt of the user\\n   * @return scaledVariableDebt The scaled variable debt of the user\\n   * @return stableBorrowRate The stable borrow rate of the user\\n   * @return liquidityRate The liquidity rate of the reserve\\n   * @return stableRateLastUpdated The timestamp of the last update of the user stable rate\\n   * @return usageAsCollateralEnabled True if the user is using the asset as collateral, false\\n   *         otherwise\\n   */\\n  function getUserReserveData(\\n    address asset,\\n    address user\\n  )\\n    external\\n    view\\n    returns (\\n      uint256 currentATokenBalance,\\n      uint256 currentStableDebt,\\n      uint256 currentVariableDebt,\\n      uint256 principalStableDebt,\\n      uint256 scaledVariableDebt,\\n      uint256 stableBorrowRate,\\n      uint256 liquidityRate,\\n      uint40 stableRateLastUpdated,\\n      bool usageAsCollateralEnabled\\n    );\\n\\n  /**\\n   * @notice Returns the token addresses of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return aTokenAddress The AToken address of the reserve\\n   * @return stableDebtTokenAddress The StableDebtToken address of the reserve\\n   * @return variableDebtTokenAddress The VariableDebtToken address of the reserve\\n   */\\n  function getReserveTokensAddresses(\\n    address asset\\n  )\\n    external\\n    view\\n    returns (\\n      address aTokenAddress,\\n      address stableDebtTokenAddress,\\n      address variableDebtTokenAddress\\n    );\\n\\n  /**\\n   * @notice Returns the address of the Interest Rate strategy\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return irStrategyAddress The address of the Interest Rate strategy\\n   */\\n  function getInterestRateStrategyAddress(\\n    address asset\\n  ) external view returns (address irStrategyAddress);\\n\\n  /**\\n   * @notice Returns whether the reserve has FlashLoans enabled or disabled\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return True if FlashLoans are enabled, false otherwise\\n   */\\n  function getFlashLoanEnabled(address asset) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IDefaultInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IReserveInterestRateStrategy} from './IReserveInterestRateStrategy.sol';\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\n\\n/**\\n * @title IDefaultInterestRateStrategy\\n * @author Aave\\n * @notice Defines the basic interface of the DefaultReserveInterestRateStrategy\\n */\\ninterface IDefaultInterestRateStrategy is IReserveInterestRateStrategy {\\n  /**\\n   * @notice Returns the usage ratio at which the pool aims to obtain most competitive borrow rates.\\n   * @return The optimal usage ratio, expressed in ray.\\n   */\\n  function OPTIMAL_USAGE_RATIO() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the optimal stable to total debt ratio of the reserve.\\n   * @return The optimal stable to total debt ratio, expressed in ray.\\n   */\\n  function OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the excess usage ratio above the optimal.\\n   * @dev It's always equal to 1-optimal usage ratio (added as constant for gas optimizations)\\n   * @return The max excess usage ratio, expressed in ray.\\n   */\\n  function MAX_EXCESS_USAGE_RATIO() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the excess stable debt ratio above the optimal.\\n   * @dev It's always equal to 1-optimal stable to total debt ratio (added as constant for gas optimizations)\\n   * @return The max excess stable to total debt ratio, expressed in ray.\\n   */\\n  function MAX_EXCESS_STABLE_TO_TOTAL_DEBT_RATIO() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the address of the PoolAddressesProvider\\n   * @return The address of the PoolAddressesProvider contract\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Returns the variable rate slope below optimal usage ratio\\n   * @dev It's the variable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO\\n   * @return The variable rate slope, expressed in ray\\n   */\\n  function getVariableRateSlope1() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the variable rate slope above optimal usage ratio\\n   * @dev It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO\\n   * @return The variable rate slope, expressed in ray\\n   */\\n  function getVariableRateSlope2() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the stable rate slope below optimal usage ratio\\n   * @dev It's the stable rate when usage ratio > 0 and <= OPTIMAL_USAGE_RATIO\\n   * @return The stable rate slope, expressed in ray\\n   */\\n  function getStableRateSlope1() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the stable rate slope above optimal usage ratio\\n   * @dev It's the variable rate when usage ratio > OPTIMAL_USAGE_RATIO\\n   * @return The stable rate slope, expressed in ray\\n   */\\n  function getStableRateSlope2() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the stable rate excess offset\\n   * @dev It's an additional premium applied to the stable when stable debt > OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO\\n   * @return The stable rate excess offset, expressed in ray\\n   */\\n  function getStableRateExcessOffset() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the base stable borrow rate\\n   * @return The base stable borrow rate, expressed in ray\\n   */\\n  function getBaseStableBorrowRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the base variable borrow rate\\n   * @return The base variable borrow rate, expressed in ray\\n   */\\n  function getBaseVariableBorrowRate() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the maximum variable borrow rate\\n   * @return The maximum variable borrow rate, expressed in ray\\n   */\\n  function getMaxVariableBorrowRate() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IReserveInterestRateStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IReserveInterestRateStrategy\\n * @author Aave\\n * @notice Interface for the calculation of the interest rates\\n */\\ninterface IReserveInterestRateStrategy {\\n  /**\\n   * @notice Calculates the interest rates depending on the reserve's state and configurations\\n   * @param params The parameters needed to calculate interest rates\\n   * @return liquidityRate The liquidity rate expressed in rays\\n   * @return stableBorrowRate The stable borrow rate expressed in rays\\n   * @return variableBorrowRate The variable borrow rate expressed in rays\\n   */\\n  function calculateInterestRates(\\n    DataTypes.CalculateInterestRatesParams memory params\\n  ) external view returns (uint256, uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/dependencies/chainlink/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Chainlink Contracts v0.8\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"lib/aave-governance-v3/src/contracts/voting/libs/MerklePatriciaProofVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/**\\n * Copied from https://github.com/lidofinance/curve-merkle-oracle/blob/main/contracts/MerklePatriciaProofVerifier.sol\\n */\\npragma solidity ^0.8.0;\\n\\nimport {RLPReader} from './RLPReader.sol';\\n\\nlibrary MerklePatriciaProofVerifier {\\n  using RLPReader for RLPReader.RLPItem;\\n  using RLPReader for bytes;\\n\\n  /// @dev Validates a Merkle-Patricia-Trie proof.\\n  ///      If the proof proves the inclusion of some key-value pair in the\\n  ///      trie, the value is returned. Otherwise, i.e. if the proof proves\\n  ///      the exclusion of a key from the trie, an empty byte array is\\n  ///      returned.\\n  /// @param rootHash is the Keccak-256 hash of the root node of the MPT.\\n  /// @param path is the key of the node whose inclusion/exclusion we are\\n  ///        proving.\\n  /// @param stack is the stack of MPT nodes (starting with the root) that\\n  ///        need to be traversed during verification.\\n  /// @return value whose inclusion is proved or an empty byte array for\\n  ///         a proof of exclusion\\n  function extractProofValue(\\n    bytes32 rootHash,\\n    bytes memory path,\\n    RLPReader.RLPItem[] memory stack\\n  ) internal pure returns (bytes memory value) {\\n    bytes memory mptKey = _decodeNibbles(path, 0);\\n    uint256 mptKeyOffset = 0;\\n\\n    bytes32 nodeHashHash;\\n    RLPReader.RLPItem[] memory node;\\n\\n    RLPReader.RLPItem memory rlpValue;\\n\\n    if (stack.length == 0) {\\n      // Root hash of empty Merkle-Patricia-Trie\\n      require(\\n        rootHash ==\\n          0x56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\\n      );\\n      return new bytes(0);\\n    }\\n\\n    // Traverse stack of nodes starting at root.\\n    for (uint256 i = 0; i < stack.length; i++) {\\n      // We use the fact that an rlp encoded list consists of some\\n      // encoding of its length plus the concatenation of its\\n      // *rlp-encoded* items.\\n\\n      // The root node is hashed with Keccak-256 ...\\n      if (i == 0 && rootHash != stack[i].rlpBytesKeccak256()) {\\n        revert();\\n      }\\n      // ... whereas all other nodes are hashed with the MPT\\n      // hash function.\\n      if (i != 0 && nodeHashHash != _mptHashHash(stack[i])) {\\n        revert();\\n      }\\n      // We verified that stack[i] has the correct hash, so we\\n      // may safely decode it.\\n      node = stack[i].toList();\\n\\n      if (node.length == 2) {\\n        // Extension or Leaf node\\n\\n        bool isLeaf;\\n        bytes memory nodeKey;\\n        (isLeaf, nodeKey) = _merklePatriciaCompactDecode(node[0].toBytes());\\n\\n        uint256 prefixLength = _sharedPrefixLength(\\n          mptKeyOffset,\\n          mptKey,\\n          nodeKey\\n        );\\n        mptKeyOffset += prefixLength;\\n\\n        if (prefixLength < nodeKey.length) {\\n          // Proof claims divergent extension or leaf. (Only\\n          // relevant for proofs of exclusion.)\\n          // An Extension/Leaf node is divergent iff it \\\"skips\\\" over\\n          // the point at which a Branch node should have been had the\\n          // excluded key been included in the trie.\\n          // Example: Imagine a proof of exclusion for path [1, 4],\\n          // where the current node is a Leaf node with\\n          // path [1, 3, 3, 7]. For [1, 4] to be included, there\\n          // should have been a Branch node at [1] with a child\\n          // at 3 and a child at 4.\\n\\n          // Sanity check\\n          if (i < stack.length - 1) {\\n            // divergent node must come last in proof\\n            revert();\\n          }\\n\\n          return new bytes(0);\\n        }\\n\\n        if (isLeaf) {\\n          // Sanity check\\n          if (i < stack.length - 1) {\\n            // leaf node must come last in proof\\n            revert();\\n          }\\n\\n          if (mptKeyOffset < mptKey.length) {\\n            return new bytes(0);\\n          }\\n\\n          rlpValue = node[1];\\n          return rlpValue.toBytes();\\n        } else {\\n          // extension\\n          // Sanity check\\n          if (i == stack.length - 1) {\\n            // shouldn't be at last level\\n            revert();\\n          }\\n\\n          if (!node[1].isList()) {\\n            // rlp(child) was at least 32 bytes. node[1] contains\\n            // Keccak256(rlp(child)).\\n            nodeHashHash = node[1].payloadKeccak256();\\n          } else {\\n            // rlp(child) was less than 32 bytes. node[1] contains\\n            // rlp(child).\\n            nodeHashHash = node[1].rlpBytesKeccak256();\\n          }\\n        }\\n      } else if (node.length == 17) {\\n        // Branch node\\n\\n        if (mptKeyOffset != mptKey.length) {\\n          // we haven't consumed the entire path, so we need to look at a child\\n          uint8 nibble = uint8(mptKey[mptKeyOffset]);\\n          mptKeyOffset += 1;\\n          if (nibble >= 16) {\\n            // each element of the path has to be a nibble\\n            revert();\\n          }\\n\\n          if (_isEmptyBytesequence(node[nibble])) {\\n            // Sanity\\n            if (i != stack.length - 1) {\\n              // leaf node should be at last level\\n              revert();\\n            }\\n\\n            return new bytes(0);\\n          } else if (!node[nibble].isList()) {\\n            nodeHashHash = node[nibble].payloadKeccak256();\\n          } else {\\n            nodeHashHash = node[nibble].rlpBytesKeccak256();\\n          }\\n        } else {\\n          // we have consumed the entire mptKey, so we need to look at what's contained in this node.\\n\\n          // Sanity\\n          if (i != stack.length - 1) {\\n            // should be at last level\\n            revert();\\n          }\\n\\n          return node[16].toBytes();\\n        }\\n      }\\n    }\\n  }\\n\\n  /// @dev Computes the hash of the Merkle-Patricia-Trie hash of the RLP item.\\n  ///      Merkle-Patricia-Tries use a weird \\\"hash function\\\" that outputs\\n  ///      *variable-length* hashes: If the item is shorter than 32 bytes,\\n  ///      the MPT hash is the item. Otherwise, the MPT hash is the\\n  ///      Keccak-256 hash of the item.\\n  ///      The easiest way to compare variable-length byte sequences is\\n  ///      to compare their Keccak-256 hashes.\\n  /// @param item The RLP item to be hashed.\\n  /// @return Keccak-256(MPT-hash(item))\\n  function _mptHashHash(\\n    RLPReader.RLPItem memory item\\n  ) private pure returns (bytes32) {\\n    if (item.len < 32) {\\n      return item.rlpBytesKeccak256();\\n    } else {\\n      return keccak256(abi.encodePacked(item.rlpBytesKeccak256()));\\n    }\\n  }\\n\\n  function _isEmptyBytesequence(\\n    RLPReader.RLPItem memory item\\n  ) private pure returns (bool) {\\n    if (item.len != 1) {\\n      return false;\\n    }\\n    uint8 b;\\n    uint256 memPtr = item.memPtr;\\n    assembly {\\n      b := byte(0, mload(memPtr))\\n    }\\n    return b == 0x80 /* empty byte string */;\\n  }\\n\\n  function _merklePatriciaCompactDecode(\\n    bytes memory compact\\n  ) private pure returns (bool isLeaf, bytes memory nibbles) {\\n    require(compact.length > 0);\\n    uint256 first_nibble = (uint8(compact[0]) >> 4) & 0xF;\\n    uint256 skipNibbles;\\n    if (first_nibble == 0) {\\n      skipNibbles = 2;\\n      isLeaf = false;\\n    } else if (first_nibble == 1) {\\n      skipNibbles = 1;\\n      isLeaf = false;\\n    } else if (first_nibble == 2) {\\n      skipNibbles = 2;\\n      isLeaf = true;\\n    } else if (first_nibble == 3) {\\n      skipNibbles = 1;\\n      isLeaf = true;\\n    } else {\\n      // Not supposed to happen!\\n      revert();\\n    }\\n    return (isLeaf, _decodeNibbles(compact, skipNibbles));\\n  }\\n\\n  function _decodeNibbles(\\n    bytes memory compact,\\n    uint256 skipNibbles\\n  ) private pure returns (bytes memory nibbles) {\\n    require(compact.length > 0);\\n\\n    uint256 length = compact.length * 2;\\n    require(skipNibbles <= length);\\n    length -= skipNibbles;\\n\\n    nibbles = new bytes(length);\\n    uint256 nibblesLength = 0;\\n\\n    for (uint256 i = skipNibbles; i < skipNibbles + length; i += 1) {\\n      if (i % 2 == 0) {\\n        nibbles[nibblesLength] = bytes1((uint8(compact[i / 2]) >> 4) & 0xF);\\n      } else {\\n        nibbles[nibblesLength] = bytes1((uint8(compact[i / 2]) >> 0) & 0xF);\\n      }\\n      nibblesLength += 1;\\n    }\\n\\n    assert(nibblesLength == nibbles.length);\\n  }\\n\\n  function _sharedPrefixLength(\\n    uint256 xsOffset,\\n    bytes memory xs,\\n    bytes memory ys\\n  ) private pure returns (uint256) {\\n    uint256 i;\\n    for (i = 0; i + xsOffset < xs.length && i < ys.length; i++) {\\n      if (xs[i + xsOffset] != ys[i]) {\\n        return i;\\n      }\\n    }\\n    return i;\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n  string public constant VOTING_PORTALS_COUNT_NOT_0 = '1'; // to be able to rescue voting portals count must be 0\\n  string public constant AT_LEAST_ONE_PAYLOAD = '2'; // to create a proposal, it must have at least one payload\\n  string public constant VOTING_PORTAL_NOT_APPROVED = '3'; // the voting portal used to vote on proposal must be approved\\n  string public constant PROPOSITION_POWER_IS_TOO_LOW = '4'; // proposition power of proposal creator must be equal or higher than the specified threshold for the access level\\n  string public constant PROPOSAL_NOT_IN_CREATED_STATE = '5'; // proposal should be in the CREATED state\\n  string public constant PROPOSAL_NOT_IN_ACTIVE_STATE = '6'; // proposal must be in an ACTIVE state\\n  string public constant PROPOSAL_NOT_IN_QUEUED_STATE = '7'; // proposal must be in a QUEUED state\\n  string public constant VOTING_START_COOLDOWN_PERIOD_NOT_PASSED = '8'; // to activate a proposal vote, the cool down delay must pass\\n  string public constant CALLER_NOT_A_VALID_VOTING_PORTAL = '9'; // only an allowed voting portal can queue a proposal\\n  string public constant QUEUE_COOLDOWN_PERIOD_NOT_PASSED = '10'; // to execute a proposal a cooldown delay must pass\\n  string public constant PROPOSAL_NOT_IN_THE_CORRECT_STATE = '11'; // proposal must be created but not executed yet to be able to be canceled\\n  string public constant CALLER_NOT_GOVERNANCE = '12'; // caller must be governance\\n  string public constant VOTER_ALREADY_VOTED_ON_PROPOSAL = '13'; // voter can only vote once per proposal using voting portal\\n  string public constant WRONG_MESSAGE_ORIGIN = '14'; // received message must come from registered source address, chain id, CrossChainController\\n  string public constant NO_VOTING_ASSETS = '15'; // Strategy must have voting assets\\n  string public constant PROPOSAL_VOTE_ALREADY_CREATED = '16'; // vote on proposal can only be created once\\n  string public constant INVALID_SIGNATURE = '17'; // submitted signature is not valid\\n  string public constant PROPOSAL_VOTE_NOT_FINISHED = '18'; // proposal vote must be finished\\n  string public constant PROPOSAL_VOTE_NOT_IN_ACTIVE_STATE = '19'; // proposal vote must be in active state\\n  string public constant PROPOSAL_VOTE_ALREADY_EXISTS = '20'; // proposal vote already exists\\n  string public constant VOTE_ONCE_FOR_ASSET = '21'; // an asset can only be used once per vote\\n  string public constant USER_BALANCE_DOES_NOT_EXISTS = '22'; // to vote an user must have balance in the token the user is voting with\\n  string public constant USER_VOTING_BALANCE_IS_ZERO = '23'; // to vote an user must have some balance between all the tokens selected for voting\\n  string public constant MISSING_AAVE_ROOTS = '24'; // must have AAVE roots registered to use strategy\\n  string public constant MISSING_STK_AAVE_ROOTS = '25'; // must have stkAAVE roots registered to use strategy\\n  string public constant MISSING_STK_AAVE_SLASHING_EXCHANGE_RATE = '26'; // must have stkAAVE slashing exchange rate registered to use strategy\\n  string public constant UNPROCESSED_STORAGE_ROOT = '27'; // root must be registered beforehand\\n  string public constant NOT_ENOUGH_MSG_VALUE = '28'; // method was not called with enough value to execute the call\\n  string public constant FAILED_ACTION_EXECUTION = '29'; // action failed to execute\\n  string public constant SHOULD_BE_AT_LEAST_ONE_EXECUTOR = '30'; // at least one executor is needed\\n  string public constant INVALID_EMPTY_TARGETS = '31'; // target of the payload execution must not be empty\\n  string public constant EXECUTOR_WAS_NOT_SPECIFIED_FOR_REQUESTED_ACCESS_LEVEL = '32'; // payload executor must be registered for the specified payload access level\\n  string public constant PAYLOAD_NOT_IN_QUEUED_STATE = '33'; // payload must be en the queued state\\n  string public constant TIMELOCK_NOT_FINISHED = '34'; // delay has not passed before execution can be called\\n  string public constant PAYLOAD_NOT_IN_THE_CORRECT_STATE = '35'; // payload must be created but not executed yet to be able to be canceled\\n  string public constant PAYLOAD_NOT_IN_CREATED_STATE = '36'; // payload must be in the created state\\n  string public constant MISSING_A_AAVE_ROOTS = '37'; // must have aAAVE roots registered to use strategy\\n  string public constant MISSING_PROPOSAL_BLOCK_HASH = '38'; // block hash for this proposal was not bridged before\\n  string public constant PROPOSAL_VOTE_CONFIGURATION_ALREADY_BRIDGED = '39'; // configuration for this proposal bridged already\\n  string public constant INVALID_VOTING_PORTAL_ADDRESS = '40'; // voting portal address can't be 0x0\\n  string public constant INVALID_POWER_STRATEGY = '41'; // 0x0 is not valid as the power strategy\\n  string public constant INVALID_EXECUTOR_ADDRESS = '42'; // executor address can't be 0x0\\n  string public constant EXECUTOR_ALREADY_SET_IN_DIFFERENT_LEVEL = '43'; // executor address already being used as executor of a different level\\n  string public constant INVALID_VOTING_DURATION = '44'; // voting duration can not be bigger than the time it takes to execute a proposal\\n  string public constant VOTING_DURATION_NOT_PASSED = '45'; // at least votingDuration should have passed since voting started for a proposal to be queued\\n  string public constant INVALID_PROPOSAL_ACCESS_LEVEL = '46'; // the bridged proposal access level does not correspond with the maximum access level required by the payload\\n  string public constant PAYLOAD_NOT_CREATED_BEFORE_PROPOSAL = '47'; // payload must be created before proposal\\n  string public constant INVALID_CROSS_CHAIN_CONTROLLER_ADDRESS = '48';\\n  string public constant INVALID_MESSAGE_ORIGINATOR_ADDRESS = '49';\\n  string public constant INVALID_ORIGIN_CHAIN_ID = '50';\\n  string public constant INVALID_ACTION_TARGET = '51';\\n  string public constant INVALID_ACTION_ACCESS_LEVEL = '52';\\n  string public constant INVALID_EXECUTOR_ACCESS_LEVEL = '53';\\n  string public constant INVALID_VOTING_PORTAL_CROSS_CHAIN_CONTROLLER = '54';\\n  string public constant INVALID_VOTING_PORTAL_VOTING_MACHINE = '55';\\n  string public constant INVALID_VOTING_PORTAL_GOVERNANCE = '56';\\n  string public constant INVALID_VOTING_MACHINE_CHAIN_ID = '57';\\n  string public constant G_INVALID_CROSS_CHAIN_CONTROLLER_ADDRESS = '58';\\n  string public constant G_INVALID_IPFS_HASH = '59';\\n  string public constant G_INVALID_PAYLOAD_ACCESS_LEVEL = '60';\\n  string public constant G_INVALID_PAYLOADS_CONTROLLER = '61';\\n  string public constant G_INVALID_PAYLOAD_CHAIN = '62';\\n  string public constant POWER_STRATEGY_HAS_NO_TOKENS = '63'; // power strategy should at least have\\n  string public constant INVALID_VOTING_CONFIG_ACCESS_LEVEL = '64';\\n  string public constant VOTING_DURATION_TOO_SMALL = '65';\\n  string public constant NO_BRIDGED_VOTING_ASSETS = '66';\\n  string public constant INVALID_VOTER = '67';\\n  string public constant INVALID_DATA_WAREHOUSE = '68';\\n  string public constant INVALID_VOTING_MACHINE_CROSS_CHAIN_CONTROLLER = '69';\\n  string public constant INVALID_L1_VOTING_PORTAL = '70';\\n  string public constant INVALID_VOTING_PORTAL_CHAIN_ID = '71';\\n  string public constant INVALID_VOTING_STRATEGY = '72';\\n  string public constant INVALID_VOTE_CONFIGURATION_BLOCKHASH = '73';\\n  string public constant INVALID_VOTE_CONFIGURATION_VOTING_DURATION = '74';\\n  string public constant INVALID_GAS_LIMIT = '75';\\n  string public constant INVALID_VOTING_CONFIGS = '76'; // a lvl2 voting configuration must be sent to initializer\\n  string public constant INVALID_EXECUTOR_DELAY = '77';\\n  string public constant REPEATED_STRATEGY_ASSET = '78';\\n  string public constant EMPTY_ASSET_STORAGE_SLOTS = '79';\\n  string public constant REPEATED_STRATEGY_ASSET_SLOT = '80';\\n  string public constant INVALID_EXECUTION_TARGET = '81';\\n  string public constant MISSING_VOTING_CONFIGURATIONS = '82'; // voting configurations for lvl1 and lvl2 must be included on initialization\\n  string public constant INVALID_PROPOSITION_POWER = '83';\\n  string public constant INVALID_YES_THRESHOLD = '84';\\n  string public constant INVALID_YES_NO_DIFFERENTIAL = '85';\\n  string public constant ETH_TRANSFER_FAILED = '86';\\n  string public constant INVALID_INITIAL_VOTING_CONFIGS = '87'; // initial voting configurations can not be of the same level\\n  string public constant INVALID_VOTING_PORTAL_ADDRESS_IN_VOTING_MACHINE = '88';\\n  string public constant INVALID_VOTING_PORTAL_OWNER = '89';\\n  string public constant CANCELLATION_FEE_REDEEM_FAILED = '90'; // cancellation fee was not able to be redeemed\\n  string public constant INVALID_CANCELLATION_FEE_COLLECTOR = '91'; // collector can not be address 0\\n  string public constant INVALID_CANCELLATION_FEE_SENT = '92'; // cancellation fee sent does not match the needed amount\\n  string public constant CANCELLATION_FEE_ALREADY_REDEEMED = '93'; // cancellation fee already redeemed\\n  string public constant INVALID_STATE_TO_REDEEM_CANCELLATION_FEE = '94'; // proposal state is not a valid state to redeem cancellation fee\\n  string public constant MISSING_REPRESENTATION_ROOTS = '95'; // to represent a voter the representation roots need to be registered\\n  string public constant CALLER_IS_NOT_VOTER_REPRESENTATIVE = '96'; // to represent a voter, caller must be the stored representative\\n  string public constant VM_INVALID_GOVERNANCE_ADDRESS = '97'; // governance address can not be 0\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/IBaseReceiverPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IBaseReceiverPortal\\n * @author BGD Labs\\n * @notice interface defining the method that needs to be implemented by all receiving portals, as its the one that\\n           will be called when a received message gets confirmed\\n */\\ninterface IBaseReceiverPortal {\\n  /**\\n   * @notice method called by CrossChainController when a message has been confirmed\\n   * @param originSender address of the sender of the bridged message\\n   * @param originChainId id of the chain where the message originated\\n   * @param message bytes bridged containing the desired information\\n   */\\n  function receiveCrossChainMessage(\\n    address originSender,\\n    uint256 originChainId,\\n    bytes memory message\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/IDataWarehouse.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IDataWarehouse {\\n  struct SlotValue {\\n    bool exists;\\n    uint256 value;\\n  }\\n  /**\\n   * @notice event emitted when a storage root has been processed successfully\\n   * @param caller address that called the processStorageRoot method\\n   * @param account address where the root is generated\\n   * @param blockHash hash of the block where the root was generated\\n   */\\n  event StorageRootProcessed(\\n    address indexed caller,\\n    address indexed account,\\n    bytes32 indexed blockHash\\n  );\\n\\n  /**\\n   * @notice event emitted when a storage root has been processed successfully\\n   * @param caller address that called the processStorageSlot method\\n   * @param account address where the slot is processed\\n   * @param blockHash hash of the block where the storage proof was generated\\n   * @param slot storage location to search\\n   * @param value storage information on the specified location\\n   */\\n  event StorageSlotProcessed(\\n    address indexed caller,\\n    address indexed account,\\n    bytes32 indexed blockHash,\\n    bytes32 slot,\\n    uint256 value\\n  );\\n\\n  /**\\n   * @notice method to get the storage roots of an account (token) in a certain block hash\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @return state root hash of the account on the block hash specified\\n   */\\n  function getStorageRoots(address account, bytes32 blockHash) external view returns (bytes32);\\n\\n  /**\\n   * @notice method to process the storage root from an account on a block hash.\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param blockHeaderRLP rlp encoded block header. At same block where the block hash was taken\\n   * @param accountStateProofRLP rlp encoded account state proof, taken in same block as block hash\\n   * @return the storage root\\n   */\\n  function processStorageRoot(\\n    address account,\\n    bytes32 blockHash,\\n    bytes memory blockHeaderRLP,\\n    bytes memory accountStateProofRLP\\n  ) external returns (bytes32);\\n\\n  /**\\n   * @notice method to get the storage value at a certain slot and block hash for a certain address\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param slot hash of the explicit storage placement where the value to get is found.\\n   * @param storageProof generated proof containing the storage, at block hash\\n   * @return an object containing the slot value at the specified storage slot\\n   */\\n  function getStorage(\\n    address account,\\n    bytes32 blockHash,\\n    bytes32 slot,\\n    bytes memory storageProof\\n  ) external view returns (SlotValue memory);\\n\\n  /**\\n   * @notice method to register the storage value at a certain slot and block hash for a certain address\\n   * @param account address of the token to get the storage roots from\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param slot hash of the explicit storage placement where the value to get is found.\\n   * @param storageProof generated proof containing the storage, at block hash\\n   */\\n  function processStorageSlot(\\n    address account,\\n    bytes32 blockHash,\\n    bytes32 slot,\\n    bytes calldata storageProof\\n  ) external;\\n\\n  /**\\n   * @notice method to get the value from storage at a certain block hash, previously registered.\\n   * @param blockHash hash of the block from where the roots are generated\\n   * @param account address of the token to get the storage roots from\\n   * @param slot hash of the explicit storage placement where the value to get is found.\\n   * @return numeric slot value of the slot. The value must be decoded to get the actual stored information\\n   */\\n  function getRegisteredSlot(\\n    bytes32 blockHash,\\n    address account,\\n    bytes32 slot\\n  ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/IExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExecutor {\\n  /**\\n   * @notice emitted when an action got executed\\n   * @param target address of the targeted contract\\n   * @param value wei value of the transaction\\n   * @param signature function signature of the transaction\\n   * @param data function arguments of the transaction or callData if signature empty\\n   * @param executionTime time at which to execute the transaction\\n   * @param withDelegatecall boolean, true = transaction delegatecalls the target, else calls the target\\n   * @param resultData the actual callData used on the target\\n   **/\\n  event ExecutedAction(\\n    address indexed target,\\n    uint256 value,\\n    string signature,\\n    bytes data,\\n    uint256 executionTime,\\n    bool withDelegatecall,\\n    bytes resultData\\n  );\\n\\n  /**\\n   * @notice Function, called by Governance, that executes a transaction, returns the callData executed\\n   * @param target smart contract target\\n   * @param value wei value of the transaction\\n   * @param signature function signature of the transaction\\n   * @param data function arguments of the transaction or callData if signature empty\\n   * @param withDelegatecall boolean, true = transaction delegatecalls the target, else calls the target\\n   * @return result data of the execution call.\\n   **/\\n  function executeTransaction(\\n    address target,\\n    uint256 value,\\n    string memory signature,\\n    bytes memory data,\\n    bool withDelegatecall\\n  ) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/IGovernanceCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PayloadsControllerUtils} from './PayloadsControllerUtils.sol';\\nimport {IVotingMachineWithProofs} from './IVotingMachineWithProofs.sol';\\nimport {IGovernancePowerStrategy} from './IGovernancePowerStrategy.sol';\\n\\ninterface IGovernanceCore {\\n  /**\\n   * @notice Object with the necessary information of a representative\\n   * @param representative address that represents the voter\\n   * @param chainId id of the chain where the representative is on\\n   */\\n  struct RepresentativeInput {\\n    address representative;\\n    uint256 chainId;\\n  }\\n\\n  /**\\n   * @notice Object storing the vote configuration for a specific access level\\n   * @param coolDownBeforeVotingStart number of seconds indicating how much time should pass before proposal will be moved to vote\\n   * @param votingDuration number of seconds indicating the duration of a vote\\n   * @param yesThreshold minimum number of yes votes needed for a proposal to pass.\\n            FOR VOTES > YES THRESHOLD\\n            we consider that this param in case of AAVE don't need decimal places\\n   * @param yesNoDifferential number of for votes that need to be bigger than against votes to pass a proposal.\\n            FOR VOTES - AGAINST VOTES > YES NO DIFFERENTIAL\\n            we consider that this param in case of AAVE don't need decimal places\\n   * @param minPropositionPower the minimum needed power to create a proposal.\\n            we consider that this param in case of AAVE don't need decimal places\\n   */\\n  struct VotingConfig {\\n    uint24 coolDownBeforeVotingStart;\\n    uint24 votingDuration;\\n    uint56 yesThreshold;\\n    uint56 yesNoDifferential;\\n    uint56 minPropositionPower;\\n  }\\n\\n  /**\\n   * @notice object storing the input parameters of a voting configuration\\n   * @param accessLevel number of access level needed to execute a proposal in this settings\\n   * @param coolDownBeforeVotingStart number of seconds indicating the time that must pass from proposal creation for\\n            the voting to be activated\\n   * @param votingDuration number of seconds indicating the duration of a vote\\n   * @param yesThreshold minimum number of yes votes needed for a proposal to pass.\\n            FOR VOTES > YES THRESHOLD\\n            in normal units with 18 decimals\\n   * @param yesNoDifferential number of for votes that need to be bigger than against votes to pass a proposal.\\n            FOR VOTES - AGAINST VOTES > YES NO DIFFERENTIAL\\n            in normal units with 18 decimals\\n   * @param minPropositionPower the minimum needed power to create a proposal.\\n            in normal units with 18 decimals\\n   */\\n  struct SetVotingConfigInput {\\n    PayloadsControllerUtils.AccessControl accessLevel;\\n    uint24 coolDownBeforeVotingStart;\\n    uint24 votingDuration;\\n    uint256 yesThreshold;\\n    uint256 yesNoDifferential;\\n    uint256 minPropositionPower;\\n  }\\n\\n  /**\\n   * @notice enum storing the different states of a proposal\\n   * @dev State enum defines the state machine of a proposal so the order on which the state is defined is important.\\n          Check logic correctness if new states are added / removed\\n   */\\n  enum State {\\n    Null, // proposal does not exists\\n    Created, // created, waiting for a cooldown to initiate the balances snapshot\\n    Active, // balances snapshot set, voting in progress\\n    Queued, // voting results submitted, but proposal is under grace period when guardian can cancel it\\n    Executed, // results sent to the execution chain(s)\\n    Failed, // voting was not successful\\n    Cancelled, // got cancelled by guardian, or because proposition power of creator dropped below allowed minimum\\n    Expired\\n  }\\n\\n  /**\\n   * @notice object storing all the information of a proposal including the different states in time that can have\\n   * @param state current state of the proposal\\n   * @param accessLevel minimum level needed to be able to execute this proposal\\n   * @param votingDuration number of seconds indicating the duration of a vote. max is: 16'777'216 (ie 194.18 days)\\n   * @param creationTime timestamp in seconds of when the proposal was created. max is: 1.099511628\u00d710\u00b9\u00b2 (ie 34'865 years)\\n   * @param votingActivationTime timestamp in seconds of when the voting activates for the proposal\\n   * @param queuingTime timestamp in seconds of when the proposal was queued\\n   * @param cancelTimestamp timestamp in seconds of when the proposal was canceled\\n   * @param creator address of the creator of the proposal\\n   * @param votingPortal address of the votingPortal used to communicate with the voting chain\\n   * @param snapshotBlockHash block hash of when the proposal was created, as to be able to get the correct balances on this specific block\\n   * @param ipfsHash ipfs has containing the proposal metadata information\\n   * @param forVotes number of votes in favor of the proposal\\n   * @param againstVotes number of votes against the proposal\\n   * @param cancellationFee amount in eth that will be retained if proposal is cancelled\\n   * @param payloads list of objects containing the payload information necessary for execution\\n   */\\n  struct Proposal {\\n    State state;\\n    PayloadsControllerUtils.AccessControl accessLevel;\\n    uint40 creationTime;\\n    uint24 votingDuration;\\n    uint40 votingActivationTime;\\n    uint40 queuingTime;\\n    uint40 cancelTimestamp;\\n    address creator;\\n    address votingPortal;\\n    bytes32 snapshotBlockHash;\\n    bytes32 ipfsHash;\\n    uint128 forVotes;\\n    uint128 againstVotes;\\n    uint256 cancellationFee;\\n    PayloadsControllerUtils.Payload[] payloads;\\n  }\\n\\n  /**\\n   * @notice emitted when powerStrategy got updated\\n   * @param newPowerStrategy address of the new powerStrategy\\n   */\\n  event PowerStrategyUpdated(address indexed newPowerStrategy);\\n\\n  /**\\n   * @notice emitted when one of the _votingConfigs got updated\\n   * @param accessLevel minimum level needed to be able to execute this proposal\\n   * @param votingDuration duration of the voting period in seconds\\n   * @param coolDownBeforeVotingStart time in seconds between proposal creation and voting activation\\n   * @param yesThreshold min amount of yes votes needed to pass a proposal\\n   * @param yesNoDifferential minimal difference between you and no votes for proposal to pass\\n   * @param minPropositionPower minimal proposition power of a user to be able to create proposal\\n   */\\n  event VotingConfigUpdated(\\n    PayloadsControllerUtils.AccessControl indexed accessLevel,\\n    uint24 votingDuration,\\n    uint24 coolDownBeforeVotingStart,\\n    uint256 yesThreshold,\\n    uint256 yesNoDifferential,\\n    uint256 minPropositionPower\\n  );\\n\\n  /**\\n   * @notice emitted when a proposal is created.\\n   * @param proposalId id of the proposal\\n   * @param creator address of the creator of the proposal\\n   * @param accessLevel minimum level needed to be able to execute this proposal\\n   * @param ipfsHash ipfs has containing the proposal metadata information\\n   */\\n  event ProposalCreated(\\n    uint256 indexed proposalId,\\n    address indexed creator,\\n    PayloadsControllerUtils.AccessControl indexed accessLevel,\\n    bytes32 ipfsHash\\n  );\\n  /**\\n   * @notice emitted when voting is activated. Meaning that the vote configuration will be sent to voting machine\\n   * @param proposalId id of the proposal\\n   * @param snapshotBlockHash block hash of when the proposal was created, as to be able to get the correct balances on this specific block\\n   * @param votingDuration duration of the voting period in seconds\\n   */\\n  event VotingActivated(\\n    uint256 indexed proposalId,\\n    bytes32 indexed snapshotBlockHash,\\n    uint24 votingDuration\\n  );\\n\\n  /**\\n   * @notice emitted when proposal change state to Queued\\n   * @param proposalId id of the proposal\\n   * @param votesFor votes for proposal\\n   * @param votesAgainst votes against proposal\\n   */\\n  event ProposalQueued(uint256 indexed proposalId, uint128 votesFor, uint128 votesAgainst);\\n\\n  /**\\n   * @notice emitted when proposal change state to Executed\\n   * @param proposalId id of the proposal\\n   */\\n  event ProposalExecuted(uint256 indexed proposalId);\\n\\n  /**\\n   * @notice emitted when proposal change state to Canceled\\n   * @param proposalId id of the proposal\\n   */\\n  event ProposalCanceled(uint256 indexed proposalId);\\n\\n  /**\\n   * @notice emitted when proposal change state to Failed\\n   * @param proposalId id of the proposal\\n   * @param votesFor votes for proposal\\n   * @param votesAgainst votes against proposal\\n   */\\n  event ProposalFailed(uint256 indexed proposalId, uint128 votesFor, uint128 votesAgainst);\\n\\n  /**\\n   * @notice emitted when a voting machine gets updated\\n   * @param votingPortal address of the voting portal updated\\n   * @param approved boolean indicating if a voting portal has been added or removed\\n   */\\n  event VotingPortalUpdated(address indexed votingPortal, bool indexed approved);\\n\\n  /**\\n   * @notice emitted when a payload is successfully sent to the execution chain\\n   * @param proposalId id of the proposal containing the payload sent for execution\\n   * @param payloadId id of the payload sent for execution\\n   * @param payloadsController address of the payloads controller on the execution chain\\n   * @param chainId id of the execution chain\\n   * @param payloadNumberOnProposal number of payload sent for execution, from the number of payloads contained in proposal\\n   * @param numberOfPayloadsOnProposal number of payloads that are in the proposal\\n   */\\n  event PayloadSent(\\n    uint256 indexed proposalId,\\n    uint40 payloadId,\\n    address indexed payloadsController,\\n    uint256 indexed chainId,\\n    uint256 payloadNumberOnProposal,\\n    uint256 numberOfPayloadsOnProposal\\n  );\\n\\n  /**\\n   * @notice emitted when a vote is successfully sent to voting chain\\n   * @param proposalId id of the proposal the vote is for\\n   * @param voter address that wants to vote on a proposal\\n   * @param support indicates if vote is in favor or against the proposal\\n   * @param votingAssetsWithSlot list of token addresses with the base storage slot to use for the vote\\n   */\\n  event VoteForwarded(\\n    uint256 indexed proposalId,\\n    address indexed voter,\\n    bool indexed support,\\n    IVotingMachineWithProofs.VotingAssetWithSlot[] votingAssetsWithSlot\\n  );\\n\\n  /**\\n   * @notice emitted when the cancellation fee is updated\\n   * @param cancellationFee amount of the new cancellation fee\\n   */\\n  event CancellationFeeUpdated(uint256 cancellationFee);\\n\\n  /**\\n   * @notice emitted when the cancellation fee is redeemed\\n   * @param proposalId id of the proposal the fee was redeemed from\\n   * @param to address that will receive the cancellation fee\\n   * @param cancellationFee amount of the cancellation fee redeemed\\n   * @param success flag indicating if the transfer was successful or not\\n   */\\n  event CancellationFeeRedeemed(\\n    uint256 indexed proposalId,\\n    address indexed to,\\n    uint256 cancellationFee,\\n    bool indexed success\\n  );\\n\\n  /**\\n   * @notice method to get the Cancellation Fee Collector address\\n   * @return cancellation fee collector address\\n   */\\n  function CANCELLATION_FEE_COLLECTOR() external view returns (address);\\n\\n  /**\\n   * @notice method to update the cancellation fee\\n   * @param cancellationFee the fee amount to collateralize against a proposal cancellation\\n   */\\n  function updateCancellationFee(uint256 cancellationFee) external;\\n\\n  /**\\n   * @notice method to get the cancellation fee\\n   * @return cancellation fee amount\\n   */\\n  function getCancellationFee() external view returns (uint256);\\n\\n  /**\\n   * @notice method to redeem the cancellation fee from a proposal\\n   * @param proposalIds array of ids of the proposals to redeem the cancellation fee from\\n   */\\n  function redeemCancellationFee(uint256[] calldata proposalIds) external;\\n\\n  /**\\n   * @notice emitted when a voter updates its representative\\n   * @param voter address of the voter that updates\\n   * @param representative address of the chosen representative\\n   * @param chainId id of the chain where representative is representing the voter on\\n   */\\n  event RepresentativeUpdated(\\n    address indexed voter,\\n    address indexed representative,\\n    uint256 indexed chainId\\n  );\\n\\n  /**\\n   * @notice method to get the number of registered voting portals\\n   * @return number of registered voting portals\\n   */\\n  function getVotingPortalsCount() external view returns (uint256);\\n\\n  /**\\n   * @notice method to approve new voting machines\\n   * @param votingPortals array of voting portal addresses to approve\\n   */\\n  function addVotingPortals(address[] calldata votingPortals) external;\\n\\n  /**\\n   * @notice method to add a new voting portal\\n   * @param votingPortal address of the new voting portal\\n   * @dev This method is only callable by the Guardian.\\n   * @dev This method is only callable when there are no voting portals registered. Its rationale is for the Guardian\\n          to be able to \\\"rescue\\\" the system in case all voting portals were removed by mistake. This is needed because\\n          to add a new voting portal a full governance flow is required, and without the portal, the system would be bricked.\\n          To limit the Guardian's power, can only happen if there are no voting portals registered, and the guardian\\n          could only add one voting portal.\\n   */\\n  function rescueVotingPortal(address votingPortal) external;\\n\\n  /**\\n   * @notice method to remove an accepted voting portal.\\n   * @param votingPortals list of addresses of the voting machines that are no longer valid\\n   * @dev removing a voting portal effectively removes a voting machine\\n   */\\n  function removeVotingPortals(address[] calldata votingPortals) external;\\n\\n  /**\\n   * @notice creates a proposal, with configuration specified in VotingConfig corresponding to the accessLevel\\n   * @param payloads which user propose to vote for\\n   * @param votingPortal address of the contract which will bootstrap voting, and provide results in the end\\n   * @param ipfsHash ipfs hash of a document with proposal description\\n   * @return created proposal ID\\n   */\\n  function createProposal(\\n    PayloadsControllerUtils.Payload[] calldata payloads,\\n    address votingPortal,\\n    bytes32 ipfsHash\\n  ) external payable returns (uint256);\\n\\n  /**\\n   * @notice executes a proposal, can be called by anyone if proposal in Queued state\\n   * @notice and passed more then COOLDOWN_PERIOD seconds after proposal entered this state\\n   * @param proposalId id of the proposal\\n   */\\n  function executeProposal(uint256 proposalId) external;\\n\\n  /**\\n   * @notice cancels a proposal, can be initiated by guardian,\\n   * @notice or if proposition power of proposal creator will go below minPropositionPower specified in VotingConfig\\n   * @param proposalId id of the proposal\\n   */\\n  function cancelProposal(uint256 proposalId) external;\\n\\n  /**\\n   * @notice gets the state of a proposal\\n   * @param proposalId id of the proposal\\n   * @return state of the proposal\\n   */\\n  function getProposalState(uint256 proposalId) external view returns (State);\\n\\n  /**\\n   * @notice method to set a new powerStrategy contract\\n   * @param newPowerStrategy address of the new contract containing the voting a voting strategy\\n   */\\n\\n  function setPowerStrategy(IGovernancePowerStrategy newPowerStrategy) external;\\n\\n  /**\\n   * @notice method to set the voting configuration for a determined access level\\n   * @param votingConfigs object containing configuration for an access level\\n   */\\n  function setVotingConfigs(SetVotingConfigInput[] calldata votingConfigs) external;\\n\\n  /**\\n   * @notice method to get the voting configuration from an access level\\n   * @param accessLevel level for which to get the configuration of a vote\\n   * @return the voting configuration assigned to the specified accessLevel\\n   */\\n  function getVotingConfig(\\n    PayloadsControllerUtils.AccessControl accessLevel\\n  ) external view returns (VotingConfig memory);\\n\\n  /**\\n   * @notice method to get the reasonably achievable voting participation, taking into total supply, and market situation\\n   * @return maximum voting participation in wei\\n   */\\n  function ACHIEVABLE_VOTING_PARTICIPATION() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the cool down period between queuing and execution\\n   * @return time in seconds\\n   */\\n  function COOLDOWN_PERIOD() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the minimum voting duration time in seconds\\n   * @return time in seconds\\n   */\\n  function MIN_VOTING_DURATION() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the precision divider used to remove unneeded decimals\\n   * @return decimals of 1 ether (18)\\n   */\\n  function PRECISION_DIVIDER() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the the voting tokens cap\\n   * @return cap for the voting tokens\\n   * @dev This cap is used to limit the number of voting tokens, so as to not drain the bridging funds\\n          with a message too big.\\n   */\\n  function VOTING_TOKENS_CAP() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the expiration time from creation from which the proposal will be invalid\\n   * @return time in seconds\\n   */\\n  function PROPOSAL_EXPIRATION_TIME() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the name of the contract\\n   * @return name string\\n   */\\n  function NAME() external view returns (string memory);\\n\\n  /**\\n   * @notice method to get the proposal identified by passed id\\n   * @param proposalId id of the proposal to get the information of\\n   * @return proposal object containing all the information\\n   */\\n  function getProposal(uint256 proposalId) external view returns (Proposal memory);\\n\\n  /**\\n   * @notice address of the current voting strategy to use on the governance\\n   * @return address of the voting strategy\\n   */\\n  function getPowerStrategy() external view returns (IGovernancePowerStrategy);\\n\\n  /**\\n   * @notice proposals counter.\\n   * @return the current number proposals created\\n   */\\n  function getProposalsCount() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get if a voting portal is approved by the governance\\n   * @param votingPortal address of the voting portal to check if approved\\n   * @return flag indicating the approval status of the voting portal\\n   */\\n  function isVotingPortalApproved(address votingPortal) external view returns (bool);\\n\\n  /**\\n   * @notice method to queue a proposal for execution\\n   * @param proposalId the id of the proposal to queue\\n   * @param forVotes number of votes in favor of the proposal\\n   * @param againstVotes number of votes against of the proposal\\n   */\\n  function queueProposal(uint256 proposalId, uint128 forVotes, uint128 againstVotes) external;\\n\\n  /**\\n   * @notice method to send proposal to votingMachine\\n   * @param proposalId id of the proposal to start the voting on\\n   */\\n  function activateVoting(uint256 proposalId) external;\\n\\n  /**\\n   * @notice method to get the representative of a voter on a chain\\n   * @param voter address of the voter\\n   * @param chainId id of the chain to get the representative from\\n   * @return address of the representative of the voter on chainId\\n   */\\n  function getRepresentativeByChain(address voter, uint256 chainId) external view returns (address);\\n\\n  /**\\n   * @notice method to update the representative of a voter on certain chain.\\n   * @param representatives Array of objects with the representative information\\n   */\\n  function updateRepresentativesForChain(RepresentativeInput[] calldata representatives) external;\\n\\n  /**\\n   * @notice method to get the voters a representative is representing\\n   * @param representative address of the representative\\n   * @param chainId id of the chain to search for represented voters\\n   */\\n  function getRepresentedVotersByChain(\\n    address representative,\\n    uint256 chainId\\n  ) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/IGovernancePowerStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGovernancePowerStrategy {\\n  /**\\n * @notice method to get the full voting power of an user. This method is only use for consulting purposes.\\n             As its not used for voting calculations, it is not needed to force blockNumber - 1 to protect against\\n             FlashLoan attacks.\\n   * @param user address where we want to get the power from\\n   * @return full voting power of a user\\n   */\\n  function getFullVotingPower(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the full proposal power of an user. It is not needed to protect against FlashLoan\\n             attacks because once user returns the tokens (power) the proposal will get canceled as proposal creator\\n             will loose the proposition power.\\n   * @param user address where we want to get the power from\\n   * @return full proposition power of a user\\n   */\\n  function getFullPropositionPower(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/IPayloadsControllerCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {PayloadsControllerUtils} from './PayloadsControllerUtils.sol';\\n\\ninterface IPayloadsControllerCore {\\n  /// @notice Enum indicating the possible payload states\\n  enum PayloadState {\\n    None, // state 0 left as empty\\n    Created,\\n    Queued,\\n    Executed,\\n    Cancelled,\\n    Expired\\n  }\\n\\n  /**\\n   * @notice holds configuration of the executor\\n   * @param executor address of the executor\\n   * @param delay time in seconds between queuing and execution\\n   */\\n  struct ExecutorConfig {\\n    address executor;\\n    uint40 delay;\\n  }\\n\\n  /**\\n   * @notice Object containing the information necessary to set a new executor\\n   * @param accessLevel level of access that the executor will be assigned to\\n   * @param executorConfig object containing the configurations for the accessLevel specified\\n   */\\n  struct UpdateExecutorInput {\\n    PayloadsControllerUtils.AccessControl accessLevel;\\n    ExecutorConfig executorConfig;\\n  }\\n\\n  /**\\n   * @notice Object containing the information necessary to define a payload action\\n   * @param target address of the contract that needs to be executed\\n   * @param withDelegateCall boolean indicating if execution needs to be delegated\\n   * @param accessLevel access level of the executor needed for the execution\\n   * @param value value amount that needs to be sent to the executeTransaction method\\n   * @param signature method signature that will be executed\\n   * @param callData data needed for the execution of the signature\\n   */\\n  struct ExecutionAction {\\n    address target;\\n    bool withDelegateCall;\\n    PayloadsControllerUtils.AccessControl accessLevel;\\n    uint256 value;\\n    string signature;\\n    bytes callData;\\n  }\\n\\n  /**\\n   * @notice Object containing a payload information\\n   * @param creator address of the createPayload method caller\\n   * @param maximumAccessLevelRequired min level needed to be able to execute all actions\\n   * @param state indicates the current state of the payload\\n   * @param createdAt time indicating when payload has been created. In seconds // max is: 1.099511628\u00d710\u00b9\u00b2 (ie 34'865 years)\\n   * @param queuedAt time indicating when payload has been queued. In seconds  // max is: 1.099511628\u00d710\u00b9\u00b2 (ie 34'865 years)\\n   * @param executedAt time indicating when a payload has been executed. In seconds  // max is: 1.099511628\u00d710\u00b9\u00b2 (ie 34'865 years)\\n   * @param cancelledAt time indicating when the payload has been cancelled. In seconds\\n   * @param expirationTime time indicating when the Payload will expire\\n   * @param delay time in seconds that a payload must remain queued before execution\\n   * @param gracePeriod time in seconds that a payload has to be executed\\n   * @param actions array of actions to be executed\\n   */\\n  struct Payload {\\n    address creator;\\n    PayloadsControllerUtils.AccessControl maximumAccessLevelRequired;\\n    PayloadState state;\\n    uint40 createdAt;\\n    uint40 queuedAt;\\n    uint40 executedAt;\\n    uint40 cancelledAt;\\n    uint40 expirationTime;\\n    uint40 delay;\\n    uint40 gracePeriod;\\n    ExecutionAction[] actions;\\n  }\\n\\n  /**\\n   * @notice Event emitted when an executor has been set for a determined access level\\n   * @param accessLevel level of access that the executor will be set to\\n   * @param executor address that will be set for the determined access level\\n   * @param delay time in seconds between queuing and execution\\n   */\\n  event ExecutorSet(\\n    PayloadsControllerUtils.AccessControl indexed accessLevel,\\n    address indexed executor,\\n    uint40 delay\\n  );\\n\\n  /**\\n   * @notice Event emitted when a payload has been created\\n   * @param payloadId id of the payload created\\n   * @param creator address pertaining to the caller of the method createPayload\\n   * @param actions array of the actions conforming the payload\\n   * @param maximumAccessLevelRequired maximum level of the access control\\n   */\\n  event PayloadCreated(\\n    uint40 indexed payloadId,\\n    address indexed creator,\\n    ExecutionAction[] actions,\\n    PayloadsControllerUtils.AccessControl indexed maximumAccessLevelRequired\\n  );\\n\\n  /**\\n   * @notice emitted when a cross chain message gets received\\n   * @param originSender address that sent the message on the origin chain\\n   * @param originChainId id of the chain where the message originated\\n   * @param delivered flag indicating if message has been delivered\\n   * @param message bytes containing the necessary information to queue the bridged payload id\\n   * @param reason bytes with the revert information\\n   */\\n  event PayloadExecutionMessageReceived(\\n    address indexed originSender,\\n    uint256 indexed originChainId,\\n    bool indexed delivered,\\n    bytes message,\\n    bytes reason\\n  );\\n\\n  /**\\n   * @notice Event emitted when a payload has been executed\\n   * @param payloadId id of the payload being enqueued\\n   */\\n  event PayloadExecuted(uint40 payloadId);\\n\\n  /**\\n   * @notice Event emitted when a payload has been queued\\n   * @param payloadId id of the payload being enqueued\\n   */\\n  event PayloadQueued(uint40 payloadId);\\n\\n  /**\\n   * @notice Event emitted when cancelling a payload\\n   * @param payloadId id of the cancelled payload\\n   */\\n  event PayloadCancelled(uint40 payloadId);\\n\\n  /**\\n   * @notice get the expiration delay of a payload\\n   * @return expiration delay in seconds\\n   */\\n  function EXPIRATION_DELAY() external view returns (uint40);\\n\\n  /**\\n   * @notice get the maximum time in seconds that a proposal must spend being queued\\n   * @return max delay in seconds\\n   */\\n  function MAX_EXECUTION_DELAY() external view returns (uint40);\\n\\n  /**\\n   * @notice get the minimum time in seconds that a proposal must spend being queued\\n   * @return min delay in seconds\\n   */\\n  function MIN_EXECUTION_DELAY() external view returns (uint40);\\n\\n  /**\\n   * @notice time in seconds where the proposal can be executed (from executionTime) before it expires\\n   * @return grace period in seconds\\n   */\\n  function GRACE_PERIOD() external view returns (uint40);\\n\\n  /**\\n   * @notice get a previously created payload object\\n   * @param payloadId id of the payload to retrieve\\n   * @return payload information\\n   */\\n  function getPayloadById(uint40 payloadId) external view returns (Payload memory);\\n\\n  /**\\n   * @notice get the current state of a payload\\n   * @param payloadId id of the payload to retrieve the state from\\n   * @return payload state\\n   */\\n  function getPayloadState(uint40 payloadId) external view returns (PayloadState);\\n\\n  /**\\n   * @notice get the total count of payloads created\\n   * @return number of payloads\\n   */\\n  function getPayloadsCount() external view returns (uint40);\\n\\n  /**\\n   * @notice method that will create a Payload object for every action sent\\n   * @param actions array of actions which this proposal payload will contain\\n   * @return id of the created payload\\n   */\\n  function createPayload(ExecutionAction[] calldata actions) external returns (uint40);\\n\\n  /**\\n   * @notice method to execute a payload\\n   * @param payloadId id of the payload that needs to be executed\\n   */\\n  function executePayload(uint40 payloadId) external payable;\\n\\n  /**\\n   * @notice method to cancel a payload\\n   * @param payloadId id of the payload that needs to be canceled\\n   */\\n  function cancelPayload(uint40 payloadId) external;\\n\\n  /**\\n   * @notice method to add executors and its configuration\\n   * @param executors array of UpdateExecutorInput objects\\n   */\\n  function updateExecutors(UpdateExecutorInput[] calldata executors) external;\\n\\n  /**\\n   * @notice method to get the executor configuration assigned to the specified level\\n   * @param accessControl level of which we want to get the executor configuration from\\n   * @return executor configuration\\n   */\\n  function getExecutorSettingsByAccessControl(\\n    PayloadsControllerUtils.AccessControl accessControl\\n  ) external view returns (ExecutorConfig memory);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/IVotingMachineWithProofs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDataWarehouse} from './IDataWarehouse.sol';\\nimport {IVotingStrategy} from './IVotingStrategy.sol';\\n\\ninterface IVotingMachineWithProofs {\\n  /**\\n   * @notice Object containing the signature parameters to be able to vote as a representative\\n   * @param v v part of the voter signature\\n   * @param r r part of the voter signature\\n   * @param s s part of the voter signature\\n   */\\n  struct SignatureParams {\\n    uint8 v;\\n    bytes32 r;\\n    bytes32 s;\\n  }\\n\\n  /**\\n   * @notice Object to use over submitVoteBySignature and in case of bridging for protect against wrong roots inclusion\\n   * @param underlyingAsset address of the token on L1, used for voting\\n   * @param slot base storage position where the balance on underlyingAsset contract resides on L1. (Normally position 0)\\n   */\\n  struct VotingAssetWithSlot {\\n    address underlyingAsset;\\n    uint128 slot;\\n  }\\n\\n  /**\\n   * @notice object containing the information of a bridged vote\\n   * @param support indicates if vote is in favor or against the proposal\\n   * @param votingAssetsWithSlots list of token addresses with storage slots, that the voter will use for voting\\n   */\\n  struct BridgedVote {\\n    bool support;\\n    VotingAssetWithSlot[] votingAssetsWithSlot;\\n  }\\n\\n  /**\\n   * @notice enum delimiting the possible states a proposal can have on the voting machine\\n   * @dev ProposalState enum defines the state machine of a proposal being voted, so the order on which the state is\\n          defined is important. Check logic correctness if new states are added / removed\\n   */\\n  enum ProposalState {\\n    NotCreated,\\n    Active,\\n    Finished,\\n    SentToGovernance\\n  }\\n\\n  /**\\n   * @notice Object with vote information\\n   * @param support boolean indicating if the vote is in favor or against a proposal\\n   * @param votingPower the power used for voting\\n   */\\n  struct Vote {\\n    bool support;\\n    uint248 votingPower;\\n  }\\n\\n  /**\\n   * @notice Object containing a proposal information\\n   * @param id numeric identification of the proposal\\n   * @param sentToGovernance boolean indication if the proposal results have been sent back to L1 governance\\n   * @param startTime timestamp of the start of voting on the proposal\\n   * @param endTime timestamp when the voting on the proposal finishes (startTime + votingDuration)\\n   * @param votingClosedAndSentTimestamp timestamp indicating when the vote has been closed and sent to governance chain\\n   * @param forVotes votes cast in favor of the proposal\\n   * @param againstVotes votes cast against the proposal\\n   * @param creationBlockNumber blockNumber from when the proposal has been created in votingMachine\\n   * @param votingClosedAndSentBlockNumber block from when the vote has been closed and sent to governance chain\\n   * @param votes mapping indication for every voter of the proposal the information of that vote\\n   */\\n  struct Proposal {\\n    uint256 id;\\n    bool sentToGovernance;\\n    uint40 startTime;\\n    uint40 endTime;\\n    uint40 votingClosedAndSentTimestamp;\\n    uint128 forVotes;\\n    uint128 againstVotes;\\n    uint256 creationBlockNumber;\\n    uint256 votingClosedAndSentBlockNumber;\\n    mapping(address => Vote) votes;\\n  }\\n\\n  /**\\n   * @notice Object containing a proposal information\\n   * @param id numeric identification of the proposal\\n   * @param sentToGovernance boolean indication if the proposal results have been sent back to L1 governance\\n   * @param startTime timestamp of the start of voting on the proposal\\n   * @param endTime timestamp when the voting on the proposal finishes (startTime + votingDuration)\\n   * @param votingClosedAndSentTimestamp timestamp indicating when the vote has been closed and sent to governance chain\\n   * @param forVotes votes cast in favor of the proposal\\n   * @param againstVotes votes cast against the proposal\\n   * @param creationBlockNumber blockNumber from when the proposal has been created in votingMachine\\n   * @param votingClosedAndSentBlockNumber block from when the vote has been closed and sent back to governance chain\\n   */\\n  struct ProposalWithoutVotes {\\n    uint256 id;\\n    bool sentToGovernance;\\n    uint40 startTime;\\n    uint40 endTime;\\n    uint40 votingClosedAndSentTimestamp;\\n    uint128 forVotes;\\n    uint128 againstVotes;\\n    uint256 creationBlockNumber;\\n    uint256 votingClosedAndSentBlockNumber;\\n  }\\n\\n  /**\\n   * @notice vote configuration passed from l1\\n   * @param votingDuration duration in seconds of the vote for a proposal\\n   * @param l1BlockHash hash of the block on L1 from the block when the proposal was activated for voting (sent to voting machine)\\n            this block hash is used to delimit from when the voting power is accounted for voting\\n   */\\n  struct ProposalVoteConfiguration {\\n    uint24 votingDuration;\\n    bytes32 l1ProposalBlockHash;\\n  }\\n\\n  /**\\n   * @notice Object with the necessary information to process a vote\\n   * @param underlyingAsset address of the token on L1, used for voting\\n   * @param slot base storage position where the balance on underlyingAsset contract resides on L1. (Normally position 0)\\n   * @param proof bytes of the generated proof on L1 with the slot information of underlying asset.\\n   */\\n  struct VotingBalanceProof {\\n    address underlyingAsset;\\n    uint128 slot;\\n    bytes proof;\\n  }\\n\\n  /**\\n   * @notice emitted when a proposal is created\\n   * @param proposalId numeric id of the created proposal\\n   * @param l1BlockHash block hash from the block on l1 from when the proposal was activated for voting\\n   * @param startTime timestamp when the proposal was created and ready for voting\\n   * @param endTime timestamp of when the voting period ends. (startTime + votingDuration)\\n   */\\n  event ProposalVoteStarted(\\n    uint256 indexed proposalId,\\n    bytes32 indexed l1BlockHash,\\n    uint256 startTime,\\n    uint256 endTime\\n  );\\n\\n  /**\\n   * @notice emitted when the results of a vote on a proposal are sent to L1\\n   * @param proposalId numeric id of the proposal which results are sent to L1\\n   * @param forVotes votes cast in favor of proposal\\n   * @param againstVotes votes cast against the proposal\\n   */\\n  event ProposalResultsSent(uint256 indexed proposalId, uint256 forVotes, uint256 againstVotes);\\n\\n  /**\\n   * @notice emitted when a vote is registered\\n   * @param proposalId Id of the proposal\\n   * @param voter address of the voter\\n   * @param support boolean, true = vote for, false = vote against\\n   * @param votingPower Power of the voter/vote\\n   */\\n  event VoteEmitted(\\n    uint256 indexed proposalId,\\n    address indexed voter,\\n    bool indexed support,\\n    uint256 votingPower\\n  );\\n\\n  /**\\n   * @notice emitted when a voting configuration of a proposal gets received. Meaning that has been bridged successfully\\n   * @param proposalId id of the proposal bridged to start the vote on\\n   * @param blockHash hash of the block on L1 when the proposal was activated for voting\\n   * @param votingDuration duration in seconds of the vote\\n   * @param voteCreated boolean indicating if the vote has been created or not.\\n   * @dev the vote will only be created automatically if when the configuration is bridged, all necessary roots\\n          have been registered already.\\n   */\\n  event ProposalVoteConfigurationBridged(\\n    uint256 indexed proposalId,\\n    bytes32 indexed blockHash,\\n    uint24 votingDuration,\\n    bool indexed voteCreated\\n  );\\n\\n  /**\\n   * @notice method to get the representatives mapping slot in Governance contract\\n   * @return representatives slot\\n   */\\n  function REPRESENTATIVES_SLOT() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the Governance contract address\\n   * @return Governance address\\n   */\\n  function GOVERNANCE() external view returns (address);\\n\\n  /**\\n   * @notice method to get the voting asset with slot signature\\n   * @return signature of the voting asset with slot method\\n   */\\n  function VOTING_ASSET_WITH_SLOT_RAW() external view returns (string memory);\\n\\n  /**\\n   * @notice method to get the DataWarehouse contract\\n   * @return DataWarehouse contract\\n   */\\n  function DATA_WAREHOUSE() external view returns (IDataWarehouse);\\n\\n  /**\\n   * @notice method to get the VotingStrategy contract\\n   * @return VotingStrategy contract\\n   */\\n  function VOTING_STRATEGY() external view returns (IVotingStrategy);\\n\\n  /**\\n   * @notice Get the v4 compatible domain separator\\n   * @dev Return cached value if chainId matches cache, otherwise recomputes separator\\n   * @return The domain separator of the token at current chain\\n   */\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the vote submitted type hash for permits digest\\n   * @return hash of vote submitted string\\n   */\\n  function VOTE_SUBMITTED_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the vote submitted by representative type hash for permits digest\\n   * @return hash of vote submitted by representative string\\n   */\\n  function VOTE_SUBMITTED_BY_REPRESENTATIVE_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the voting asset with slot type hash for permits digest\\n   * @return hash of vote submitted string\\n   */\\n  function VOTING_ASSET_WITH_SLOT_TYPEHASH() external view returns (bytes32);\\n\\n  /**\\n   * @notice method to get the contract name for permits digest\\n   * @return contract name string\\n   */\\n  function NAME() external view returns (string memory);\\n\\n  /**\\n   * @notice method to get a proposal information specified by its id\\n   * @param proposalId id of the proposal to retrieve\\n   * @return the proposal information without the users vote\\n   */\\n  function getProposalById(uint256 proposalId) external view returns (ProposalWithoutVotes memory);\\n\\n  /**\\n   * @notice method to get the state of a proposal specified by its id\\n   * @param proposalId id of the proposal to retrieve the state of\\n   * @return the state of the proposal\\n   */\\n  function getProposalState(uint256 proposalId) external view returns (ProposalState);\\n\\n  /**\\n   * @notice method to get the voting configuration of a proposal specified by its id\\n   * @param proposalId id of the proposal to retrieve the voting configuration from\\n   * @return the proposal vote configuration object\\n   */\\n  function getProposalVoteConfiguration(\\n    uint256 proposalId\\n  ) external view returns (ProposalVoteConfiguration memory);\\n\\n  /**\\n  * @notice method to get a paginated list of proposalIds. The proposals are taken from a list of proposals that have\\n            received vote configuration from governance chain\\n  * @param skip number of proposal ids to skip. from latest in the list of proposal ids with voting configuration\\n  * @param size length of proposal ids to ask for.\\n  * @return list of proposal ids\\n  * @dev This is mainly used to get a list of proposals that require automation in some step of the proposal live cycle.\\n  */\\n  function getProposalsVoteConfigurationIds(\\n    uint256 skip,\\n    uint256 size\\n  ) external view returns (uint256[] memory);\\n\\n  /**\\n   * @notice method to get the vote set by a user on a proposal specified by its id\\n   * @param user address of the user that voted\\n   * @param proposalId id of the proposal to retrieve the vote from\\n   * @return the vote (support and voting power) emitted\\n   */\\n  function getUserProposalVote(\\n    address user,\\n    uint256 proposalId\\n  ) external view returns (Vote memory);\\n\\n  /**\\n    * @notice method to start a vote on a proposal specified by its id.\\n    * @param proposalId id of the proposal to start the vote on.\\n    * @return the id of the proposal that had the vote started on.\\n    * @dev this method can be called by anyone, requiring that the appropriate conditions are met.\\n           basically that the proper roots have been registered.\\n           It can also be called internally when the bridged message is received and the the required roots\\n           have been registered\\n    */\\n  function startProposalVote(uint256 proposalId) external returns (uint256);\\n\\n  /**\\n    * @notice method to cast a vote on a proposal specified by its id\\n    * @param proposalId id of the proposal on which the vote will be cast\\n    * @param support boolean indicating if the vote is in favor or against the proposal\\n    * @param votingBalanceProofs list of objects containing the information necessary to vote using the tokens\\n             allowed on the voting strategy.\\n    * @dev A vote does not need to use all the tokens allowed, can be a subset\\n    */\\n  function submitVote(\\n    uint256 proposalId,\\n    bool support,\\n    VotingBalanceProof[] calldata votingBalanceProofs\\n  ) external;\\n\\n  /**\\n   * @notice Function to register the vote of user that has voted offchain via signature\\n   * @param proposalId id of the proposal\\n   * @param voter the voter address\\n   * @param support boolean, true = vote for, false = vote against\\n   * @param votingBalanceProofs list of voting assets proofs\\n   * @param v v part of the voter signature\\n   * @param r r part of the voter signature\\n   * @param s s part of the voter signature\\n   */\\n  function submitVoteBySignature(\\n    uint256 proposalId,\\n    address voter,\\n    bool support,\\n    VotingBalanceProof[] calldata votingBalanceProofs,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @notice method to close a vote on a proposal specified by its id and send the results back to governance\\n   * @param proposalId id of the proposal to close the vote on and send the voting result to governance\\n   * @dev This method will trigger the bridging flow\\n   */\\n  function closeAndSendVote(uint256 proposalId) external;\\n\\n  /**\\n   * @notice Function to register the vote of user as its representative\\n   * @param proposalId id of the proposal\\n   * @param support boolean, true = vote for, false = vote against\\n   * @param voter the voter address\\n   * @param proofOfRepresentation proof that can validate that msg.sender is the voter representative\\n   * @param votingBalanceProofs list of voting assets proofs\\n   */\\n  function submitVoteAsRepresentative(\\n    uint256 proposalId,\\n    bool support,\\n    address voter,\\n    bytes memory proofOfRepresentation,\\n    VotingBalanceProof[] calldata votingBalanceProofs\\n  ) external;\\n\\n  /**\\n   * @notice Function to register the vote of user as its representative with a signed message\\n   * @param proposalId id of the proposal\\n   * @param voter the voter address\\n   * @param proofOfRepresentation proof that can validate that msg.sender is the voter representative\\n   * @param votingBalanceProofs list of voting assets proofs\\n   * @param signatureParams object containing the necessary signature parameters\\n   */\\n  function submitVoteAsRepresentativeBySignature(\\n    uint256 proposalId,\\n    address voter,\\n    address representative,\\n    bool support,\\n    bytes memory proofOfRepresentation,\\n    VotingBalanceProof[] calldata votingBalanceProofs,\\n    SignatureParams memory signatureParams\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/IVotingPortal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBaseReceiverPortal} from './IBaseReceiverPortal.sol';\\nimport {IVotingMachineWithProofs} from './IVotingMachineWithProofs.sol';\\n\\n/**\\n * @title IVotingPortal\\n * @author BGD Labs\\n * @notice interface containing the objects, events and methods definitions of the VotingPortal contract\\n */\\ninterface IVotingPortal is IBaseReceiverPortal {\\n  /**\\n   * @notice enum containing the different type of messages that can be bridged\\n   * @param Null empty state\\n   * @param Proposal indicates that the message is to bridge a proposal configuration\\n   */\\n  enum MessageType {\\n    Null,\\n    Proposal\\n  }\\n\\n  /**\\n   * @notice emitted when \\\"Start voting\\\" gas limit gets updated\\n   * @param gasLimit the new gas limit\\n   */\\n  event StartVotingGasLimitUpdated(uint128 gasLimit);\\n\\n  /**\\n   * @notice emitted when a vote message is received\\n   * @param originSender address that sent the message on the origin chain\\n   * @param originChainId id of the chain where the message originated\\n   * @param delivered flag indicating if message has been delivered\\n   * @param message bytes containing the necessary information to queue the bridged proposal id\\n   * @param reason bytes with the revert information\\n   */\\n  event VoteMessageReceived(\\n    address indexed originSender,\\n    uint256 indexed originChainId,\\n    bool indexed delivered,\\n    bytes message,\\n    bytes reason\\n  );\\n\\n  /**\\n   * @notice get the chain id where the voting machine which is deployed\\n   * @return network id\\n   */\\n  function VOTING_MACHINE_CHAIN_ID() external view returns (uint256);\\n\\n  /**\\n   * @notice gets the address of the voting machine on the destination network\\n   * @return voting machine address\\n   */\\n  function VOTING_MACHINE() external view returns (address);\\n\\n  /**\\n   * @notice gets the address of the connected governance\\n   * @return governance address\\n   */\\n  function GOVERNANCE() external view returns (address);\\n\\n  /**\\n   * @notice gets the address of the CrossChainController deployed on current network\\n   * @return CrossChainController address\\n   */\\n  function CROSS_CHAIN_CONTROLLER() external view returns (address);\\n\\n  /**\\n   * @notice method to set the gas limit for \\\"Start voting\\\" bridging tx\\n   * @param gasLimit the new gas limit\\n   */\\n  function setStartVotingGasLimit(uint128 gasLimit) external;\\n\\n  /**\\n   * @notice method to get the gas limit for \\\"Start voting\\\" bridging tx\\n   * @return the gas limit\\n   */\\n  function getStartVotingGasLimit() external view returns (uint128);\\n\\n  /**\\n   * @notice method to bridge the vote configuration to voting chain, so a vote can be started.\\n   * @param proposalId id of the proposal bridged to start the vote on\\n   * @param blockHash hash of the block on L1 when the proposal was activated for voting\\n   * @param votingDuration duration in seconds of the vote\\n   */\\n  function forwardStartVotingMessage(\\n    uint256 proposalId,\\n    bytes32 blockHash,\\n    uint24 votingDuration\\n  ) external;\\n\\n  /**\\n   * @notice method to decode a message from from voting machine chain\\n   * @param message encoded message with message type\\n   * @return proposalId, forVotes, againstVotes from the decoded message\\n   */\\n  function decodeMessage(bytes memory message) external pure returns (uint256, uint128, uint128);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/IVotingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IDataWarehouse} from './IDataWarehouse.sol';\\n\\ninterface IVotingStrategy {\\n  /**\\n   * @notice method to get the DataWarehouse contract\\n   * @return DataWarehouse contract\\n   */\\n  function DATA_WAREHOUSE() external view returns (IDataWarehouse);\\n\\n  /**\\n   * @notice method to get the exchange rate precision. Taken from stkTokenV3 contract\\n   * @return exchange rate precission\\n   */\\n  function STK_AAVE_SLASHING_EXCHANGE_RATE_PRECISION() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the slot of the stkAave exchange rate in the stkAave contract\\n   * @return stkAave exchange rate slot\\n   */\\n  function STK_AAVE_SLASHING_EXCHANGE_RATE_SLOT() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the power scale factor of the delegated balances\\n   * @return power scale factor\\n   */\\n  function POWER_SCALE_FACTOR() external view returns (uint256);\\n\\n  /**\\n   * @notice method to get the power of an asset\\n   * @param asset address of the token to get the power\\n   * @param storageSlot storage position of the balance mapping\\n   * @param power balance of a determined asset to be used for the vote\\n   * @param blockHash block hash of when we want to get the power. Optional parameter\\n   * @return voting power of the specified asset\\n   */\\n  function getVotingPower(\\n    address asset,\\n    uint128 storageSlot,\\n    uint256 power,\\n    bytes32 blockHash\\n  ) external view returns (uint256);\\n\\n  /**\\n   * @notice method to check that the roots for all the tokens in the voting strategy have been registered. Including\\n             the registry of the stkAave exchange rate slot\\n   * @param blockHash hash of the block from where the roots have been registered.\\n   */\\n  function hasRequiredRoots(bytes32 blockHash) external view;\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/src/governance-v3/PayloadsControllerUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.0;\\n\\nlibrary PayloadsControllerUtils {\\n  /// @notice enum with supported access levels\\n  enum AccessControl {\\n    Level_null, // to not use 0\\n    Level_1, // LEVEL_1 - short executor before, listing assets, changes of assets params, updates of the protocol etc\\n    Level_2 // LEVEL_2 - long executor before, payloads controller updates\\n  }\\n\\n  /**\\n   * @notice Object containing the necessary payload information.\\n   * @param chain\\n   * @param accessLevel\\n   * @param payloadsController\\n   * @param payloadId\\n   */\\n  struct Payload {\\n    uint256 chain;\\n    AccessControl accessLevel;\\n    address payloadsController; // address which holds the logic to execute after success proposal voting\\n    uint40 payloadId; // number of the payload placed to payloadsController, max is: ~10\u00b9\u00b2\\n  }\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/dependencies/openzeppelin/contracts/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IScaledBalanceToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IScaledBalanceToken\\n * @author Aave\\n * @notice Defines the basic interface for a scaled-balance token.\\n */\\ninterface IScaledBalanceToken {\\n  /**\\n   * @dev Emitted after the mint action\\n   * @param caller The address performing the mint\\n   * @param onBehalfOf The address of the user that will receive the minted tokens\\n   * @param value The scaled-up amount being minted (based on user entered amount and balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'onBehalfOf'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Mint(\\n    address indexed caller,\\n    address indexed onBehalfOf,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @dev Emitted after the burn action\\n   * @dev If the burn function does not involve a transfer of the underlying asset, the target defaults to zero address\\n   * @param from The address from which the tokens will be burned\\n   * @param target The address that will receive the underlying, if any\\n   * @param value The scaled-up amount being burned (user entered amount - balance increase from interest)\\n   * @param balanceIncrease The increase in scaled-up balance since the last action of 'from'\\n   * @param index The next liquidity index of the reserve\\n   */\\n  event Burn(\\n    address indexed from,\\n    address indexed target,\\n    uint256 value,\\n    uint256 balanceIncrease,\\n    uint256 index\\n  );\\n\\n  /**\\n   * @notice Returns the scaled balance of the user.\\n   * @dev The scaled balance is the sum of all the updated stored balance divided by the reserve's liquidity index\\n   * at the moment of the update\\n   * @param user The user whose balance is calculated\\n   * @return The scaled balance of the user\\n   */\\n  function scaledBalanceOf(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the scaled balance of the user and the scaled total supply.\\n   * @param user The address of the user\\n   * @return The scaled balance of the user\\n   * @return The scaled total supply\\n   */\\n  function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\\n\\n  /**\\n   * @notice Returns the scaled total supply of the scaled balance token. Represents sum(debt/index)\\n   * @return The scaled total supply\\n   */\\n  function scaledTotalSupply() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns last index interest was accrued to the user's balance\\n   * @param user The address of the user\\n   * @return The last index interest was accrued to the user's balance, expressed in ray\\n   */\\n  function getPreviousIndex(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IInitializableAToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IAaveIncentivesController} from './IAaveIncentivesController.sol';\\nimport {IPool} from './IPool.sol';\\n\\n/**\\n * @title IInitializableAToken\\n * @author Aave\\n * @notice Interface for the initialize function on AToken\\n */\\ninterface IInitializableAToken {\\n  /**\\n   * @dev Emitted when an aToken is initialized\\n   * @param underlyingAsset The address of the underlying asset\\n   * @param pool The address of the associated pool\\n   * @param treasury The address of the treasury\\n   * @param incentivesController The address of the incentives controller for this aToken\\n   * @param aTokenDecimals The decimals of the underlying\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  event Initialized(\\n    address indexed underlyingAsset,\\n    address indexed pool,\\n    address treasury,\\n    address incentivesController,\\n    uint8 aTokenDecimals,\\n    string aTokenName,\\n    string aTokenSymbol,\\n    bytes params\\n  );\\n\\n  /**\\n   * @notice Initializes the aToken\\n   * @param pool The pool contract that is initializing this contract\\n   * @param treasury The address of the Aave treasury, receiving the fees on this aToken\\n   * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\\n   * @param incentivesController The smart contract managing potential incentives distribution\\n   * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\\n   * @param aTokenName The name of the aToken\\n   * @param aTokenSymbol The symbol of the aToken\\n   * @param params A set of encoded parameters for additional initialization\\n   */\\n  function initialize(\\n    IPool pool,\\n    address treasury,\\n    address underlyingAsset,\\n    IAaveIncentivesController incentivesController,\\n    uint8 aTokenDecimals,\\n    string calldata aTokenName,\\n    string calldata aTokenSymbol,\\n    bytes calldata params\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"lib/aave-address-book/lib/aave-v3-core/contracts/interfaces/IAaveIncentivesController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IAaveIncentivesController\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Incentives Controller.\\n * @dev It only contains one single function, needed as a hook on aToken and debtToken transfers.\\n */\\ninterface IAaveIncentivesController {\\n  /**\\n   * @dev Called by the corresponding asset on transfer hook in order to update the rewards distribution.\\n   * @dev The units of `totalSupply` and `userBalance` should be the same.\\n   * @param user The address of the user whose asset balance has changed\\n   * @param totalSupply The total supply of the asset prior to user balance change\\n   * @param userBalance The previous user balance prior to balance change\\n   */\\n  function handleAction(address user, uint256 totalSupply, uint256 userBalance) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"chainlink/=lib/chainlink/contracts/\",\r\n      \"openzeppelin-contracts/=lib/aave-governance-v3/lib/openzeppelin-contracts/\",\r\n      \"aave-governance-v3/=lib/aave-governance-v3/\",\r\n      \"aave-address-book/=lib/aave-address-book/src/\",\r\n      \"aave-delivery-infrastructure/=lib/aave-governance-v3/lib/aave-delivery-infrastructure/src/\",\r\n      \"solidity-utils/=lib/solidity-utils/src/\",\r\n      \"aave-token-v3/=lib/aave-governance-v3/lib/aave-token-v3/src/\",\r\n      \"aave-helpers/=lib/aave-helpers/src/\",\r\n      \"@aave/core-v3/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"@aave/periphery-v3/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"@openzeppelin/=lib/aave-governance-v3/lib/aave-delivery-infrastructure/lib/openzeppelin-contracts/\",\r\n      \"aave-delivery-infrastructure-scripts/=lib/aave-governance-v3/lib/aave-delivery-infrastructure/scripts/\",\r\n      \"aave-token-v2/=lib/aave-governance-v3/lib/aave-token-v3/lib/aave-token-v2/contracts/\",\r\n      \"aave-v3-core/=lib/aave-address-book/lib/aave-v3-core/\",\r\n      \"aave-v3-periphery/=lib/aave-address-book/lib/aave-v3-periphery/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/aave-governance-v3/lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"fx-portal/=lib/aave-governance-v3/lib/aave-delivery-infrastructure/lib/fx-portal/contracts/\",\r\n      \"governance-crosschain-bridges/=lib/aave-helpers/lib/governance-crosschain-bridges/\",\r\n      \"hyperlane-monorepo/=lib/aave-governance-v3/lib/aave-delivery-infrastructure/lib/hyperlane-monorepo/\",\r\n      \"nitro-contracts/=lib/aave-governance-v3/lib/aave-delivery-infrastructure/lib/nitro-contracts/src/\",\r\n      \"openzeppelin/=lib/aave-governance-v3/lib/openzeppelin-contracts/contracts/\",\r\n      \"solidity-examples/=lib/aave-governance-v3/lib/aave-delivery-infrastructure/lib/solidity-examples/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"votingMachine\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rootsConsumer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gasPriceOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NoActionCanBePerformed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"enum IVotingChainRobotKeeper.ProposalAction\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"ActionSucceeded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"MaxGasPriceSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DATA_WAREHOUSE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GAS_PRICE_ORACLE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_ACTIONS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOTS_CONSUMER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_MACHINE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTING_STRATEGY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isGasPriceInRange\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"}],\"name\":\"retrySubmitRoots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"setMaxGasPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"toggleDisableAutomationById\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GasCappedVotingChainRobotKeeper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000617332a777780f546261247f621051d0b98975eb0000000000000000000000002fa6f0a65886123afd24a575ae4554d0fce8b577000000000000000000000000169e633a2d1e6c10dd91238ba11c4a708dfef37c", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}