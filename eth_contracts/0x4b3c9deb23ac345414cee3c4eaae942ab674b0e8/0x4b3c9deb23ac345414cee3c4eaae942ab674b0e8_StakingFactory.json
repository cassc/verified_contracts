{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/Authorizable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\n/**\\n * @title Authorizable\\n * @dev Contract module which provides a basic authorization control mechanism, \\n * where there is an account (an owner) that can grant exclusive access to \\n * specific functions to authorised accounts.\\n */\\ncontract Authorizable is Ownable2Step {\\n    error UnAuthorised();\\n\\n    mapping(address => bool) private authorised;\\n\\n    /**\\n     * @dev Modifier to make a function callable only by authorised accounts.\\n     */\\n    modifier onlyAuthorised() {\\n        if (!isAuthorised(msg.sender)) {\\n            revert UnAuthorised();\\n        }\\n        _;\\n    }\\n\\n    /**\\n     * @dev Adds an address to the list of authorised accounts.\\n     * Can only be called by the current owner.\\n     * @param _toAdd The address to add to the authorised list.\\n     */\\n    function addAuthorised(address _toAdd) public onlyOwner {\\n        require(_toAdd != address(0), \\\"Zero Address inserted\\\");\\n        authorised[_toAdd] = true;\\n    }\\n\\n    /**\\n     * @dev Removes an address from the list of authorised accounts.\\n     * Can only be called by the current owner.\\n     * @param _toRemove The address to remove from the authorised list.\\n     */\\n    function removeAuthorised(address _toRemove) public onlyOwner {\\n        require(_toRemove != msg.sender, \\\"Owner cannot be removed\\\");\\n        authorised[_toRemove] = false;\\n    }\\n\\n    /**\\n     * @dev Checks if an address is authorised.\\n     * @param _authAdd The address to check.\\n     * @return _isAuth True if the address is authorised, false otherwise.\\n     */\\n    function isAuthorised(address _authAdd) public view returns (bool _isAuth) {\\n        _isAuth = (authorised[_authAdd] || owner() == _authAdd);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStakingPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IStakingPool {\\n    // Total want tokens managed by stratfegy\\n    function tokenLockedTotal() external view returns (uint256);\\n\\n    // Sum of all shares of users to wantLockedTotal\\n    function sharesTotal() external view returns (uint256);\\n\\n    // Main want token compounding function\\n    function earn() external;\\n\\n    // Transfer want tokens autoFarm -> strategy\\n    function deposit(\\n        address _userAddress,\\n        uint256 _wantAmt\\n    ) external returns (uint256);\\n\\n    // Transfer want tokens strategy -> autoFarm\\n    function withdraw(\\n        address _userAddress,\\n        uint256 _wantAmt\\n    ) external returns (uint256);\\n\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/StakingFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"./Authorizable.sol\\\";\\nimport \\\"./interfaces/IStakingPool.sol\\\";\\n\\n/// @title StakingFactory\\n/// @notice This contract manages multiple StakingPool contracts and distributes rewards to users who stake their LP tokens.\\ncontract StakingFactory is Authorizable, ReentrancyGuard, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    error ZeroAmountInserted();\\n    error ZeroAllocPointInserted();\\n    error InvalidPoolId();\\n    error ZeroAddressInserted();\\n    error InvalidPID();\\n    error UserSharesZero();\\n    error TotalSharesZero();\\n    error RewardTokenTransfer();\\n    error TokenAlreadyAdded();\\n    error PoolAlreadyAdded();\\n    error ZeroAmountWithdraw();\\n\\n    /// @dev Struct to store information about each user's stake in a pool.\\n    struct UserInfo {\\n        uint256 shares; // How many LP tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt.\\n    }\\n\\n    /// @dev Struct to store information about each staking pool.\\n    struct PoolInfo {\\n        IERC20 token; // Address of the pool token.\\n        uint256 allocPoint; // Allocation points assigned to the pool.\\n        uint256 lastRewardBlock; // Last block number where reward distribution occurred.\\n        uint256 accRewardTokenPerShare; // Accumulated reward tokens per share, times 1e12.\\n        address pool; // Staking Pool address.\\n    }\\n\\n    /// @notice Emitted when a user deposits LP tokens into a pool.\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\\n    /// @notice Emitted when a user withdraws LP tokens from a pool.\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    /// @notice Emitted when a user performs an emergency withdrawal from a pool.\\n    event EmergencyWithdraw(\\n        address indexed user,\\n        uint256 indexed pid,\\n        uint256 amount\\n    );\\n    /// @notice Emitted when admin adds a pool\\n    event PoolAdded(\\n        address indexed token,\\n        address indexed pool,\\n        uint256 allocPoint\\n    );\\n    /// @notice Emitted when admin update alloc of a pool\\n    event AllocUpdated(uint256 pid, uint256 allocPoint);\\n    /// @notice Emitted when admin update reward per block\\n    event AllocUpdated(uint256 rewardPerBlock);\\n    /// @notice Emitted when admin update fund source\\n    event FundSourceUpdated(address _fundSource);\\n    /// @notice Emitted when admin update reward token\\n    event RewardTokenUpdated(address _rewardToken);\\n\\n    /// @notice Address of the reward token.\\n    address public reward_token;\\n\\n    /// @notice Address of the source of reward tokens.\\n    address public fundSource;\\n\\n    /// @notice Reward tokens distributed per block.\\n    uint256 public rewardTokenPerBlock;\\n\\n    /// @notice Array containing information about all pools.\\n    PoolInfo[] public poolInfo;\\n\\n    /// @notice Mapping of user stake information for each pool.\\n    /// @dev Maps pool ID to user address to UserInfo struct.\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\\n\\n    /// @notice Tracks if a pool has already been added.\\n    /// @dev Maps pool address to boolean indicating if the pool is added.\\n    mapping(address => bool) public poolsAdded;\\n\\n    /// @notice Tracks if a token has already been added.\\n    /// @dev Maps token address to boolean indicating if the pool is added.\\n    mapping(address => bool) public tokensAdded;\\n\\n    /// @notice Total allocation points across all pools.\\n    uint256 public totalAllocPoint;\\n\\n    modifier zeroAmountCheck(uint256 amount) {\\n        if (amount == 0) {\\n            revert ZeroAmountInserted();\\n        }\\n        _;\\n    }\\n\\n    modifier zeroAddressCheck(address _address) {\\n        if (_address == address(0)) {\\n            revert ZeroAddressInserted();\\n        }\\n        _;\\n    }\\n\\n    modifier validPID(uint256 _pid) {\\n        if (_pid >= poolInfo.length) {\\n            revert InvalidPID();\\n        }\\n        _;\\n    }\\n\\n    /// @notice Initializes the StakingFactory contract with the reward token and fund source addresses.\\n    /// @param _rewardToken The address of the reward token.\\n    /// @param _fundSource The address from which reward tokens will be pulled for distribution.\\n    constructor(address _rewardToken, address _fundSource) Ownable() {\\n        reward_token = _rewardToken;\\n        fundSource = _fundSource;\\n    }\\n\\n    /// @notice Adds a new staking pool to the factory.\\n    /// @dev Only callable by the contract owner.\\n    /// @param _allocPoint Allocation points assigned to the new pool. This determines the share of rewards the pool receives.\\n    /// @param poolToken The address of the LP token that will be staked in the pool.\\n    /// @param _withUpdate Boolean indicating whether to update reward variables before adding the pool.\\n    /// @param _pool The address of the `StakingPool` contract associated with the new pool.\\n    function add(\\n        uint256 _allocPoint,\\n        address poolToken,\\n        bool _withUpdate,\\n        address _pool\\n    ) external zeroAddressCheck(poolToken) zeroAddressCheck(_pool) onlyOwner {\\n        if (poolsAdded[_pool]) revert PoolAlreadyAdded();\\n        if (tokensAdded[poolToken]) revert TokenAlreadyAdded();\\n\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        uint256 lastRewardBlock = block.number;\\n        totalAllocPoint = totalAllocPoint + (_allocPoint);\\n        poolInfo.push(\\n            PoolInfo({\\n                token: IERC20(poolToken),\\n                allocPoint: _allocPoint,\\n                lastRewardBlock: lastRewardBlock,\\n                accRewardTokenPerShare: 0,\\n                pool: _pool\\n            })\\n        );\\n        poolsAdded[_pool] = true;\\n        tokensAdded[poolToken] = true;\\n        emit PoolAdded(poolToken, _pool, _allocPoint);\\n    }\\n\\n    /// @notice Updates the allocation points of an existing pool.\\n    /// @dev Only callable by the contract owner.\\n    /// @param _pid The pool ID (index in the `poolInfo` array).\\n    /// @param _allocPoint The new allocation point for the pool.\\n    /// @param _withUpdate Boolean indicating whether to update reward variables before updating the allocation points.\\n    function set(\\n        uint256 _pid,\\n        uint256 _allocPoint,\\n        bool _withUpdate\\n    ) external validPID(_pid) onlyAuthorised {\\n        if (_withUpdate) {\\n            massUpdatePools();\\n        }\\n        totalAllocPoint =\\n            totalAllocPoint -\\n            (poolInfo[_pid].allocPoint) +\\n            (_allocPoint);\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        emit AllocUpdated(_pid, _allocPoint);\\n    }\\n\\n    /// @notice Sets the number of reward tokens to be distributed per block.\\n    /// @dev Only callable by the contract owner.\\n    /// @param _rewardTokenPerBlock The new reward token amount per block.\\n    function setRewardTokenPerBlock(\\n        uint256 _rewardTokenPerBlock\\n    ) external onlyAuthorised {\\n        massUpdatePools();\\n        rewardTokenPerBlock = _rewardTokenPerBlock;\\n        emit AllocUpdated(_rewardTokenPerBlock);\\n    }\\n\\n    /// @notice Sets the address from which reward tokens will be pulled for distribution.\\n    /// @dev Only callable by the contract owner.\\n    /// @param _fundSource The new fund source address.\\n    function setFundSource(\\n        address _fundSource\\n    ) external onlyOwner zeroAddressCheck(_fundSource) {\\n        fundSource = _fundSource;\\n        emit FundSourceUpdated(_fundSource);\\n    }\\n\\n    /// @notice Allows the contract owner to recover tokens (other than the reward token) accidentally sent to the contract.\\n    /// @param _token The address of the stuck token.\\n    /// @param _amount The amount of tokens to recover.\\n    function inCaseTokensGetStuck(\\n        address _token,\\n        uint256 _amount\\n    ) external zeroAddressCheck(_token) zeroAmountCheck(_amount) onlyOwner {\\n        if (_token == reward_token) revert RewardTokenTransfer();\\n        IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n\\n    /// @notice Allows the owner to change the reward token address\\n    /// @param _tokenAddress The address of the reward token.\\n    function changeRewardToken(address _tokenAddress) external onlyOwner {\\n        reward_token = _tokenAddress;\\n        emit RewardTokenUpdated(_tokenAddress);\\n    }\\n\\n    /// @notice Allows a user to deposit LP tokens into a specific pool for staking.\\n    /// @param _pid The pool ID.\\n    /// @param poolTokenAmt The amount of LP tokens to deposit.\\n    function deposit(\\n        uint256 _pid,\\n        uint256 poolTokenAmt\\n    )\\n        external\\n        nonReentrant\\n        whenNotPaused\\n        validPID(_pid)\\n        zeroAmountCheck(poolTokenAmt)\\n    {\\n        updatePool(_pid);\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.shares > 0) {\\n            uint256 pending = (user.shares * (pool.accRewardTokenPerShare)) /\\n                (1e12) -\\n                (user.rewardDebt);\\n            if (pending > 0) {\\n                safeRewardTokenTransfer(msg.sender, pending);\\n            }\\n        }\\n        if (poolTokenAmt > 0) {\\n            pool.token.safeTransferFrom(\\n                address(msg.sender),\\n                address(this),\\n                poolTokenAmt\\n            );\\n\\n            pool.token.approve(pool.pool, poolTokenAmt);\\n            uint256 sharesAdded = IStakingPool(poolInfo[_pid].pool).deposit(\\n                msg.sender,\\n                poolTokenAmt\\n            );\\n            user.shares = user.shares + (sharesAdded);\\n        }\\n        user.rewardDebt =\\n            (user.shares * (pool.accRewardTokenPerShare)) /\\n            (1e12);\\n        emit Deposit(msg.sender, _pid, poolTokenAmt);\\n    }\\n\\n    /// @notice Allows a user to withdraw all their staked LP tokens and accrued rewards from a specific pool.\\n    /// @param _pid The pool ID.\\n    function withdrawAll(uint256 _pid) external {\\n        withdraw(_pid, type(uint256).max);\\n    }\\n\\n    /// @notice Allows a user to claim their accrued rewards from a specific pool without withdrawing LP tokens.\\n    /// @param _pid The pool ID.\\n    function claimReward(uint256 _pid) external nonReentrant validPID(_pid) {\\n        updatePool(_pid);\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 sharesTotal = IStakingPool(poolInfo[_pid].pool).sharesTotal();\\n        if (user.shares == 0) revert UserSharesZero();\\n        if (sharesTotal == 0) revert TotalSharesZero();\\n\\n        // Withdraw pending rewardToken\\n        uint256 pending = (user.shares * (pool.accRewardTokenPerShare)) /\\n            (1e12) -\\n            (user.rewardDebt);\\n        if (pending > 0) {\\n            safeRewardTokenTransfer(msg.sender, pending);\\n        }\\n        user.rewardDebt =\\n            (user.shares * (pool.accRewardTokenPerShare)) /\\n            (1e12);\\n    }\\n\\n    /// @notice Allows a user to claim their accrued rewards from multiple pools.\\n    /// @param _pids An array of pool IDs.\\n    function claimRewardMultiple(uint256[] memory _pids) external nonReentrant {\\n        for (uint256 i = 0; i < _pids.length; i++) {\\n            uint256 _pid = _pids[i];\\n            if (_pid >= poolInfo.length) revert InvalidPID();\\n            updatePool(_pid);\\n\\n            PoolInfo storage pool = poolInfo[_pid];\\n            UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n            uint256 sharesTotal = IStakingPool(poolInfo[_pid].pool)\\n                .sharesTotal();\\n            if (user.shares == 0) revert UserSharesZero();\\n            if (sharesTotal == 0) revert TotalSharesZero();\\n\\n            // Withdraw pending rewardToken\\n            uint256 pending = (user.shares * (pool.accRewardTokenPerShare)) /\\n                (1e12) -\\n                (user.rewardDebt);\\n            if (pending > 0) {\\n                safeRewardTokenTransfer(msg.sender, pending);\\n            }\\n            user.rewardDebt =\\n                (user.shares * (pool.accRewardTokenPerShare)) /\\n                (1e12);\\n        }\\n    }\\n\\n    /// @notice Allows a user to withdraw their staked LP tokens from a specific pool without claiming rewards.\\n    /// @dev This function is for emergency situations and should be used with caution.\\n    /// @param _pid The pool ID.\\n    function emergencyWithdraw(\\n        uint256 _pid\\n    ) external nonReentrant validPID(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 tokenLockedTotal = IStakingPool(poolInfo[_pid].pool)\\n            .tokenLockedTotal();\\n        uint256 sharesTotal = IStakingPool(poolInfo[_pid].pool).sharesTotal();\\n        uint256 amount = (user.shares * (tokenLockedTotal)) / (sharesTotal);\\n\\n        IStakingPool(poolInfo[_pid].pool).withdraw(msg.sender, amount);\\n\\n        uint256 poolBalance = IERC20(pool.token).balanceOf(address(this));\\n        if (amount > poolBalance) {\\n            amount = poolBalance;\\n        }\\n\\n        if (amount == 0) revert ZeroAmountWithdraw();\\n        pool.token.safeTransfer(address(msg.sender), amount);\\n        user.shares = 0;\\n        user.rewardDebt = 0;\\n        emit EmergencyWithdraw(msg.sender, _pid, amount);\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     * - The contract must not be paused.\\n     */\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     * - The contract must be paused.\\n     */\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    /// @notice Returns the number of pools managed by the factory.\\n    /// @return The length of the `poolInfo` array.\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /// @notice Returns the pending reward tokens for a user in a specific pool.\\n    /// @param _pid The pool ID.\\n    /// @param _user The address of the user.\\n    /// @return The amount of pending reward tokens.\\n    function pendingRewardToken(\\n        uint256 _pid,\\n        address _user\\n    ) external view validPID(_pid) returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n        uint256 accRewardTokenPerShare = pool.accRewardTokenPerShare;\\n        uint256 sharesTotal = IStakingPool(pool.pool).sharesTotal();\\n        if (block.number > pool.lastRewardBlock && sharesTotal != 0) {\\n            uint256 multiplier = getMultiplier(\\n                pool.lastRewardBlock,\\n                block.number\\n            );\\n            uint256 rewardTokenReward = (multiplier *\\n                (rewardTokenPerBlock) *\\n                (pool.allocPoint)) / (totalAllocPoint);\\n            accRewardTokenPerShare =\\n                accRewardTokenPerShare +\\n                ((rewardTokenReward * (1e12)) / (sharesTotal));\\n        }\\n        return\\n            (user.shares * (accRewardTokenPerShare)) /\\n            (1e12) -\\n            (user.rewardDebt);\\n    }\\n\\n    /// @notice Returns the amount of staked LP tokens for a user in a specific pool.\\n    /// @param _pid The pool ID.\\n    /// @param _user The address of the user.\\n    /// @return The amount of staked LP tokens.\\n    function stakedTokensAmount(\\n        uint256 _pid,\\n        address _user\\n    ) external view validPID(_pid) returns (uint256) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo memory user = userInfo[_pid][_user];\\n\\n        uint256 sharesTotal = IStakingPool(pool.pool).sharesTotal();\\n        uint256 tokenLockedTotal = IStakingPool(poolInfo[_pid].pool)\\n            .tokenLockedTotal();\\n        if (sharesTotal == 0) {\\n            return 0;\\n        }\\n        return (user.shares * (tokenLockedTotal)) / (sharesTotal);\\n    }\\n\\n    /// @notice Allows a user to withdraw their staked LP tokens from a specific pool.\\n    /// @param _pid The pool ID.\\n    /// @param poolTokenAmt The amount of LP tokens to withdraw.\\n    function withdraw(\\n        uint256 _pid,\\n        uint256 poolTokenAmt\\n    ) public nonReentrant validPID(_pid) zeroAmountCheck(poolTokenAmt) {\\n        updatePool(_pid);\\n\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.shares == 0) revert UserSharesZero();\\n\\n        uint256 tokenLockedTotal = IStakingPool(poolInfo[_pid].pool)\\n            .tokenLockedTotal();\\n        uint256 sharesTotal = IStakingPool(poolInfo[_pid].pool).sharesTotal();\\n\\n        if (sharesTotal == 0) revert TotalSharesZero();\\n        // Withdraw pending rewardToken\\n        uint256 pending = (user.shares * (pool.accRewardTokenPerShare)) /\\n            (1e12) -\\n            (user.rewardDebt);\\n        if (pending > 0) {\\n            safeRewardTokenTransfer(msg.sender, pending);\\n        }\\n\\n        // Withdraw pool tokens\\n        uint256 amount = (user.shares * (tokenLockedTotal)) / (sharesTotal);\\n        if (poolTokenAmt > amount) {\\n            poolTokenAmt = amount;\\n        }\\n        if (poolTokenAmt > 0) {\\n            uint256 sharesRemoved = IStakingPool(poolInfo[_pid].pool).withdraw(\\n                msg.sender,\\n                poolTokenAmt\\n            );\\n\\n            if (sharesRemoved > user.shares) {\\n                user.shares = 0;\\n            } else {\\n                user.shares = user.shares - (sharesRemoved);\\n            }\\n\\n            uint256 tokenBal = IERC20(pool.token).balanceOf(address(this));\\n            if (tokenBal < poolTokenAmt) {\\n                poolTokenAmt = tokenBal;\\n            }\\n            if (address(pool.token) == address(reward_token)) {\\n                if (sharesRemoved == 0) revert ZeroAmountWithdraw();\\n                pool.token.safeTransfer(address(msg.sender), sharesRemoved);\\n            } else {\\n                if (poolTokenAmt == 0) revert ZeroAmountWithdraw();\\n                pool.token.safeTransfer(address(msg.sender), poolTokenAmt);\\n            }\\n        }\\n        user.rewardDebt =\\n            (user.shares * (pool.accRewardTokenPerShare)) /\\n            (1e12);\\n        emit Withdraw(msg.sender, _pid, poolTokenAmt);\\n    }\\n\\n    /// @notice Updates the reward variables of a specific pool.\\n    /// @param _pid The pool ID.\\n    function updatePool(uint256 _pid) public validPID(_pid) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        if (block.number <= pool.lastRewardBlock) {\\n            return;\\n        }\\n        uint256 sharesTotal = IStakingPool(pool.pool).sharesTotal();\\n        if (sharesTotal == 0) {\\n            pool.lastRewardBlock = block.number;\\n            return;\\n        }\\n        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\\n        if (multiplier <= 0) {\\n            return;\\n        }\\n        uint256 rewardTokenReward = (multiplier *\\n            (rewardTokenPerBlock) *\\n            (pool.allocPoint)) / (totalAllocPoint);\\n        if (rewardTokenReward > 0) {\\n            getRewardToken(rewardTokenReward);\\n        }\\n        pool.accRewardTokenPerShare =\\n            pool.accRewardTokenPerShare +\\n            ((rewardTokenReward * (1e12)) / (sharesTotal));\\n        pool.lastRewardBlock = block.number;\\n    }\\n\\n    /// @notice Updates reward variables for all pools.\\n    /// @dev This function can be expensive in terms of gas, so use it carefully.\\n    function massUpdatePools() public {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            updatePool(pid);\\n        }\\n    }\\n\\n    /// @notice Calculates the reward multiplier over a given block range.\\n    /// @param _from The starting block number.\\n    /// @param _to The ending block number.\\n    /// @return The calculated reward multiplier.\\n    function getMultiplier(\\n        uint256 _from,\\n        uint256 _to\\n    ) public pure returns (uint256) {\\n        return _to - (_from);\\n    }\\n\\n    /// @dev Internal function to safely transfer reward tokens to a user.\\n    /// @param _to The address of the recipient.\\n    /// @param _rewardTokenAmt The amount of reward tokens to transfer.\\n    function safeRewardTokenTransfer(\\n        address _to,\\n        uint256 _rewardTokenAmt\\n    ) internal zeroAddressCheck(_to) zeroAmountCheck(_rewardTokenAmt) {\\n        uint256 rewardTokenBal = IERC20(reward_token).balanceOf(address(this));\\n        if (_rewardTokenAmt > rewardTokenBal) {\\n            IERC20(reward_token).transfer(_to, rewardTokenBal);\\n        } else {\\n            IERC20(reward_token).transfer(_to, _rewardTokenAmt);\\n        }\\n    }\\n\\n    /// @dev Internal function to transfer reward tokens from the `fundSource` to the factory contract.\\n    /// @param _rewardTokenAmt The amount of reward tokens to transfer.\\n    function getRewardToken(uint256 _rewardTokenAmt) internal {\\n        IERC20(reward_token).transferFrom(\\n            fundSource,\\n            address(this),\\n            _rewardTokenAmt\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fundSource\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidPID\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPoolId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PoolAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RewardTokenTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenAlreadyAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalSharesZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnAuthorised\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserSharesZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressInserted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAllocPointInserted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmountInserted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmountWithdraw\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"AllocUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerBlock\",\"type\":\"uint256\"}],\"name\":\"AllocUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_fundSource\",\"type\":\"address\"}],\"name\":\"FundSourceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"}],\"name\":\"RewardTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"poolToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toAdd\",\"type\":\"address\"}],\"name\":\"addAuthorised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"changeRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_pids\",\"type\":\"uint256[]\"}],\"name\":\"claimRewardMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmt\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundSource\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"inCaseTokensGetStuck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_authAdd\",\"type\":\"address\"}],\"name\":\"isAuthorised\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_isAuth\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolsAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_toRemove\",\"type\":\"address\"}],\"name\":\"removeAuthorised\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenPerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward_token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fundSource\",\"type\":\"address\"}],\"name\":\"setFundSource\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardTokenPerBlock\",\"type\":\"uint256\"}],\"name\":\"setRewardTokenPerBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"stakedTokensAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensAdded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolTokenAmt\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakingFactory", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}