{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"lib/BoringSolidity/contracts/BoringOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol + Claimable.sol\\n// Simplified by BoringCrypto\\n\\ncontract BoringOwnableData {\\n    address public owner;\\n    address public pendingOwner;\\n}\\n\\ncontract BoringOwnable is BoringOwnableData {\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice `owner` defaults to msg.sender on construction.\\n    constructor() {\\n        owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    /// @notice Transfers ownership to `newOwner`. Either directly or claimable by the new pending owner.\\n    /// Can only be invoked by the current `owner`.\\n    /// @param newOwner Address of the new owner.\\n    /// @param direct True if `newOwner` should be set immediately. False if `newOwner` needs to use `claimOwnership`.\\n    /// @param renounce Allows the `newOwner` to be `address(0)` if `direct` and `renounce` is True. Has no effect otherwise.\\n    function transferOwnership(\\n        address newOwner,\\n        bool direct,\\n        bool renounce\\n    ) public onlyOwner {\\n        if (direct) {\\n            // Checks\\n            require(newOwner != address(0) || renounce, \\\"Ownable: zero address\\\");\\n\\n            // Effects\\n            emit OwnershipTransferred(owner, newOwner);\\n            owner = newOwner;\\n            pendingOwner = address(0);\\n        } else {\\n            // Effects\\n            pendingOwner = newOwner;\\n        }\\n    }\\n\\n    /// @notice Needs to be called by `pendingOwner` to claim ownership.\\n    function claimOwnership() public {\\n        address _pendingOwner = pendingOwner;\\n\\n        // Checks\\n        require(msg.sender == _pendingOwner, \\\"Ownable: caller != pending owner\\\");\\n\\n        // Effects\\n        emit OwnershipTransferred(owner, _pendingOwner);\\n        owner = _pendingOwner;\\n        pendingOwner = address(0);\\n    }\\n\\n    /// @notice Only allows the `owner` to execute the function.\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/BoringSolidity/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // transfer and tranferFrom have been removed, because they don't work on all tokens (some aren't ERC20 complaint).\\n    // By removing them you can't accidentally use them.\\n    // name, symbol and decimals have been removed, because they are optional and sometimes wrongly implemented (MKR).\\n    // Use BoringERC20 with `using BoringERC20 for IERC20` and call `safeTransfer`, `safeTransferFrom`, etc instead.\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IStrictERC20 {\\n    // This is the strict ERC20 interface. Don't use this, certainly not if you don't control the ERC20 token you're calling.\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address _owner) external view returns (uint256 balance);\\n    function transfer(address _to, uint256 _value) external returns (bool success);\\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\\n    function approve(address _spender, uint256 _value) external returns (bool success);\\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /// @notice EIP 2612\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IOracle {\\n    /// @notice Get the latest exchange rate.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function get(bytes calldata data) external returns (bool success, uint256 rate);\\n\\n    /// @notice Check the last exchange rate without any state changes.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return success if no valid (recent) rate is available, return false else true.\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peek(bytes calldata data) external view returns (bool success, uint256 rate);\\n\\n    /// @notice Check the current spot exchange rate without any state changes. For oracles like TWAP this will be different from peek().\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return rate The rate of the requested asset / pair / pool.\\n    function peekSpot(bytes calldata data) external view returns (uint256 rate);\\n\\n    /// @notice Returns a human readable (short) name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable symbol name about this oracle.\\n    function symbol(bytes calldata data) external view returns (string memory);\\n\\n    /// @notice Returns a human readable name about this oracle.\\n    /// @param data Usually abi encoded, implementation specific data that contains information and arguments to & about the oracle.\\n    /// For example:\\n    /// (string memory collateralSymbol, string memory assetSymbol, uint256 division) = abi.decode(data, (string, string, uint256));\\n    /// @return (string) A human readable name about this oracle.\\n    function name(bytes calldata data) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/oracles/Oracle.sol\": {\r\n      \"content\": \"// contracts/Oracle.sol\\n// SPDX-License-Identifier: UNLICENSED\\n// Copyright \u00a9 2023 SolarExplorer\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"periphery/Operatable.sol\\\";\\nimport \\\"interfaces/IOracle.sol\\\";\\n\\ncontract Oracle is IOracle, Operatable {\\n    // EIP712 related variables and functions\\n    bytes32 private constant DOMAIN_SEPARATOR_SIGNATURE_HASH = keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\");\\n    // See https://eips.ethereum.org/EIPS/eip-191\\n    string private constant EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA = \\\"\\\\x19\\\\x01\\\";\\n    bytes32 private constant APPROVAL_SIGNATURE_HASH = keccak256(\\\"LogUpdateObservation(uint144 value,uint256 deadline)\\\");\\n\\n    // solhint-disable-next-line var-name-mixedcase\\n    bytes32 private immutable _DOMAIN_SEPARATOR;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint256 private immutable DOMAIN_SEPARATOR_CHAIN_ID;\\n\\n    uint256 public constant PRECISION = 1e6;\\n    uint256 public constant HEARTBEAT = 5 minutes;\\n    uint8 public constant FROZEN = 1;\\n    uint8 public constant UNFROZEN = 0;\\n\\n    uint256 public latestInteraction;\\n\\n    struct StorageType {\\n        uint144 observation;\\n        uint64 lastUpdate;\\n        uint32 deltaPercentage;\\n        uint8 frozen;\\n        uint8 signerThreshold;\\n    }\\n\\n    StorageType public observation;\\n\\n    event LogMaxDeltaPercentageChanged(uint256 timestamp, uint32 maxDeltaPercentage);\\n    event LogFrozenChanged(uint256 timestamp, uint8 frozen);\\n    event LogSignerThresholdChanged(uint256 timestamp, uint8 signerThreshold);\\n    event LogUpdateObservation(uint256 timestamp, uint144 observation);\\n\\n    constructor(address to) {\\n        // Set default roles\\n        emit OwnershipTransferred(owner, to);\\n        owner = to;\\n\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        _DOMAIN_SEPARATOR = _calculateDomainSeparator(DOMAIN_SEPARATOR_CHAIN_ID = chainId);\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return keccak256(abi.encode(DOMAIN_SEPARATOR_SIGNATURE_HASH, keccak256(\\\"Oracle\\\"), chainId, address(this)));\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view returns (bytes32) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId == DOMAIN_SEPARATOR_CHAIN_ID ? _DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    function _checkDeltaPercentage(uint256 existingValue, uint256 updatedValue, uint256 maxDelta) internal pure {\\n        uint256 deltaPercentage;\\n\\n        if (existingValue <= updatedValue) {\\n            deltaPercentage = PRECISION - (PRECISION * existingValue / updatedValue);\\n        } else {\\n            deltaPercentage = PRECISION - (PRECISION * updatedValue / existingValue);\\n        }\\n\\n        require(deltaPercentage < maxDelta, \\\"Delta percentage\\\");\\n    }\\n\\n    function _verifySignature(address signer, uint144 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) internal view {\\n        require(operators[signer], \\\"Oracle: not operator\\\");\\n\\n        // Also, ecrecover returns address(0) on failure. So we check this.\\n        require(signer != address(0), \\\"PermissionMgr: Operator cannot be 0\\\");\\n\\n        require(deadline >= block.timestamp && deadline <= (block.timestamp + 15 minutes), 'Oracle: EXPIRED');\\n\\n        bytes32 digest =\\n            keccak256(\\n                abi.encodePacked(\\n                    EIP191_PREFIX_FOR_EIP712_STRUCTURED_DATA,\\n                    DOMAIN_SEPARATOR(),\\n                    keccak256(\\n                        abi.encode(\\n                            APPROVAL_SIGNATURE_HASH,\\n                            value,\\n                            deadline\\n                        )\\n                    )\\n                )\\n            );\\n\\n        address recoveredAddress = ecrecover(digest, v, r, s);\\n        require(recoveredAddress == signer, \\\"Oracle: Invalid Signature\\\");\\n    }\\n\\n    function updateObservation(uint144 value, address[] calldata signers, uint256[] calldata deadline, uint8[] calldata v, bytes32[] calldata r, bytes32[] calldata s) external {\\n        StorageType memory oldObservation = observation;\\n\\n        require(signers.length >= oldObservation.signerThreshold, \\\"Too few signers\\\");\\n        require(block.timestamp != oldObservation.lastUpdate, \\\"Cooldown period\\\");\\n\\n        address lastSigner;\\n\\n        for (uint256 i = 0; i < signers.length; i++) {\\n            require(signers[i] > lastSigner, \\\"Duplicated signer\\\");\\n\\n            _verifySignature(signers[i], value, deadline[i], v[i], r[i], s[i]);\\n            lastSigner = signers[i];\\n        }\\n\\n        if (oldObservation.observation != 0) {\\n            _checkDeltaPercentage(uint256(oldObservation.observation), uint256(value), uint256(oldObservation.deltaPercentage));\\n        }\\n\\n        observation = StorageType(value, uint64(block.timestamp), oldObservation.deltaPercentage, oldObservation.frozen, oldObservation.signerThreshold);\\n        emit LogUpdateObservation(block.timestamp, value);\\n    }\\n\\n    function get(bytes memory) public view override returns (bool, uint256) {\\n        StorageType memory oldObservation = observation;\\n        bool isValid = oldObservation.frozen != FROZEN && block.timestamp - oldObservation.lastUpdate < HEARTBEAT;\\n        return (isValid, uint256(oldObservation.observation));\\n    }\\n\\n    function freeze() external onlyOperators {\\n        observation.frozen = FROZEN;\\n        emit LogFrozenChanged(block.timestamp, FROZEN);\\n    }\\n\\n    function setMaximumDeltaPercentage(uint32 maximumDeltaPercentage) external onlyOwner {\\n        observation.deltaPercentage = maximumDeltaPercentage;\\n        emit LogMaxDeltaPercentageChanged(block.timestamp, maximumDeltaPercentage);\\n    }\\n\\n    function unfreeze() external onlyOwner {\\n        observation.frozen = UNFROZEN;\\n        emit LogFrozenChanged(block.timestamp, UNFROZEN);\\n    }\\n\\n    function setThreshold(uint8 threshold) external onlyOwner {\\n        observation.signerThreshold = threshold;\\n        emit LogSignerThresholdChanged(block.timestamp, threshold);\\n    }\\n\\n    // Check the last exchange rate without any state changes\\n    /// @inheritdoc IOracle\\n    function peek(bytes calldata data) public view override returns (bool, uint256) {\\n        return get(data);\\n    }\\n\\n    // Check the current spot exchange rate without any state changes\\n    /// @inheritdoc IOracle\\n    function peekSpot(bytes calldata data) external view override returns (uint256 rate) {\\n        (,rate) = peek(data); \\n    }\\n\\n    /// @inheritdoc IOracle\\n    function name(bytes calldata) public pure override returns (string memory) {\\n        return \\\"Oracle\\\";\\n    }\\n\\n    /// @inheritdoc IOracle\\n    function symbol(bytes calldata) public pure override returns (string memory) {\\n        return \\\"Oracle\\\";\\n    }\\n}\"\r\n    },\r\n    \"src/periphery/Operatable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"BoringSolidity/interfaces/IERC20.sol\\\";\\nimport \\\"BoringSolidity/BoringOwnable.sol\\\";\\n\\ncontract Operatable is BoringOwnable {\\n    event OperatorChanged(address indexed, bool);\\n    error NotAllowedOperator();\\n\\n    mapping(address => bool) public operators;\\n\\n    constructor() {\\n        operators[msg.sender] = true;\\n    }\\n\\n    modifier onlyOperators() {\\n        if (!operators[msg.sender]) {\\n            revert NotAllowedOperator();\\n        }\\n        _;\\n    }\\n\\n    function setOperator(address operator, bool status) external onlyOwner {\\n        operators[operator] = status;\\n        emit OperatorChanged(operator, status);\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 690\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"remappings\": [\r\n      \"/=src/\",\r\n      \"BoringSolidity/=lib/BoringSolidity/contracts/\",\r\n      \"OpenZeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"cauldrons/=src/cauldrons/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"interfaces/=src/interfaces/\",\r\n      \"lenses/=src/lenses/\",\r\n      \"libraries/=src/libraries/\",\r\n      \"mocks/=src/mocks/\",\r\n      \"oracles/=src/oracles/\",\r\n      \"periphery/=src/periphery/\",\r\n      \"solidity-stringutils/=lib/surl/lib/solidity-stringutils/src/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"strategies/=src/strategies/\",\r\n      \"surl/=lib/surl/src/\",\r\n      \"swappers/=src/swappers/\",\r\n      \"tokens/=src/tokens/\",\r\n      \"utils/=utils/\",\r\n      \"OpenZeppelin-Upgrades/=lib/openzeppelin-contracts-upgradeable/contracts/\"\r\n    ],\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotAllowedOperator\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"frozen\",\"type\":\"uint8\"}],\"name\":\"LogFrozenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxDeltaPercentage\",\"type\":\"uint32\"}],\"name\":\"LogMaxDeltaPercentageChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"signerThreshold\",\"type\":\"uint8\"}],\"name\":\"LogSignerThresholdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint144\",\"name\":\"observation\",\"type\":\"uint144\"}],\"name\":\"LogUpdateObservation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"OperatorChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FROZEN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEARTBEAT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNFROZEN\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestInteraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"observation\",\"outputs\":[{\"internalType\":\"uint144\",\"name\":\"observation\",\"type\":\"uint144\"},{\"internalType\":\"uint64\",\"name\":\"lastUpdate\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"deltaPercentage\",\"type\":\"uint32\"},{\"internalType\":\"uint8\",\"name\":\"frozen\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"signerThreshold\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operators\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"peek\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"peekSpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"maximumDeltaPercentage\",\"type\":\"uint32\"}],\"name\":\"setMaximumDeltaPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"threshold\",\"type\":\"uint8\"}],\"name\":\"setThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"direct\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"renounce\",\"type\":\"bool\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint144\",\"name\":\"value\",\"type\":\"uint144\"},{\"internalType\":\"address[]\",\"name\":\"signers\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deadline\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8[]\",\"name\":\"v\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"r\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"s\",\"type\":\"bytes32[]\"}],\"name\":\"updateObservation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Oracle", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "690", "ConstructorArguments": "0000000000000000000000001da4ebf84afae68915206855213a70a4fb693da6", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}