{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IDepositContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IDepositContract {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(\\n        bytes pubkey,\\n        bytes withdrawal_credentials,\\n        bytes amount,\\n        bytes signature,\\n        bytes index\\n    );\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/INodeLiquidETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface INodeLiquidETH is IERC20 {\\n    function mint(address to, uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n\\n    function getSharePrice() external view returns (uint256);\\n\\n    function updateSharePrice(uint256 newSharePrice) external;\\n\\n    function assetsToShares(uint256 assets) external view returns (uint256);\\n\\n    function sharesToAssets(uint256 shares) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRewardsManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ninterface IRewardsManager {\\n    receive() external payable;\\n\\n    // GETTER FUNCTIONS\\n    function totalRewards() external view returns (uint256);\\n\\n    function rewardsPool() external view returns (uint256);\\n\\n    function updateRewards(uint256 _newRewards) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVNetwork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\nimport \\\"./ISSVNetworkCore.sol\\\";\\n\\ninterface ISSVNetwork is ISSVNetworkCore {\\n    function registerValidator(\\n        bytes calldata publicKey,\\n        uint64[] memory operatorIds,\\n        bytes calldata sharesData,\\n        uint256 amount,\\n        ISSVNetworkCore.Cluster memory cluster\\n    ) external;\\n\\n    function removeValidator(\\n        bytes calldata publicKey,\\n        uint64[] calldata operatorIds,\\n        ISSVNetworkCore.Cluster memory cluster\\n    ) external;\\n\\n    function reactivate(\\n        uint64[] memory operatorIds,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVNetworkCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.17;\\n\\ninterface ISSVNetworkCore {\\n    /***********/\\n    /* Structs */\\n    /***********/\\n\\n    /// @notice Represents a snapshot of an operator's or a DAO's state at a certain block\\n    struct Snapshot {\\n        /// @dev The block number when the snapshot was taken\\n        uint32 block;\\n        /// @dev The last index calculated by the formula index += (currentBlock - block) * fee\\n        uint64 index;\\n        /// @dev Total accumulated earnings calculated by the formula accumulated + lastIndex * validatorCount\\n        uint64 balance;\\n    }\\n\\n    /// @notice Represents an SSV operator\\n    struct Operator {\\n        /// @dev The number of validators associated with this operator\\n        uint32 validatorCount;\\n        /// @dev The fee charged by the operator, set to zero for private operators and cannot be increased once set\\n        uint64 fee;\\n        /// @dev The address of the operator's owner\\n        address owner;\\n        /// @dev Whitelisted flag for this operator\\n        bool whitelisted;\\n        /// @dev The state snapshot of the operator\\n        Snapshot snapshot;\\n    }\\n\\n    /// @notice Represents a request to change an operator's fee\\n    struct OperatorFeeChangeRequest {\\n        /// @dev The new fee proposed by the operator\\n        uint64 fee;\\n        /// @dev The time when the approval period for the fee change begins\\n        uint64 approvalBeginTime;\\n        /// @dev The time when the approval period for the fee change ends\\n        uint64 approvalEndTime;\\n    }\\n\\n    /// @notice Represents a cluster of validators\\n    struct Cluster {\\n        /// @dev The number of validators in the cluster\\n        uint32 validatorCount;\\n        /// @dev The index of network fees related to this cluster\\n        uint64 networkFeeIndex;\\n        /// @dev The last index calculated for the cluster\\n        uint64 index;\\n        /// @dev Flag indicating whether the cluster is active\\n        bool active;\\n        /// @dev The balance of the cluster\\n        uint256 balance;\\n    }\\n\\n    /**********/\\n    /* Errors */\\n    /**********/\\n\\n    error CallerNotOwner(); // 0x5cd83192\\n    error CallerNotWhitelisted(); // 0x8c6e5d71\\n    error FeeTooLow(); // 0x732f9413\\n    error FeeExceedsIncreaseLimit(); // 0x958065d9\\n    error NoFeeDeclared(); // 0x1d226c30\\n    error ApprovalNotWithinTimeframe(); // 0x97e4b518\\n    error OperatorDoesNotExist(); // 0x961e3e8c\\n    error InsufficientBalance(); // 0xf4d678b8\\n    error ValidatorAlreadyExists(); // 0x8d09a73e\\n    error ValidatorDoesNotExist(); // 0xe51315d2\\n    error IncorrectValidatorState(); // 0x2feda3c1\\n    error ClusterNotLiquidatable(); // 0x60300a8d\\n    error InvalidPublicKeyLength(); // 0x637297a4\\n    error InvalidOperatorIdsLength(); // 0x38186224\\n    error ClusterAlreadyEnabled(); // 0x3babafd2\\n    error ClusterIsLiquidated(); // 0x95a0cf33\\n    error ClusterDoesNotExists(); // 0x185e2b16\\n    error IncorrectClusterState(); // 0x12e04c87\\n    error UnsortedOperatorsList(); // 0xdd020e25\\n    error NewBlockPeriodIsBelowMinimum(); // 0x6e6c9cac\\n    error ExceedValidatorLimit(); // 0x6df5ab76\\n    error TokenTransferFailed(); // 0x045c4b02\\n    error SameFeeChangeNotAllowed(); // 0xc81272f8\\n    error FeeIncreaseNotAllowed(); // 0x410a2b6c\\n    error NotAuthorized(); // 0xea8e4eb5\\n    error OperatorsListNotUnique(); // 0xa5a1ff5d\\n    error OperatorAlreadyExists(); // 0x289c9494\\n    error TargetModuleDoesNotExist(); // 0x8f9195fb\\n    error MaxValueExceeded(); // 0x91aa3017\\n}\"\r\n    },\r\n    \"contracts/NodeStakingPoolV230.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n/**\\n01Node Staking Pool v2.3.0\\n\\nEthereum Staking Pool contract using SSV Network technology.\\n\\nhttps://github.com/01node/staking-pool-v2-contracts\\n\\nCopyright (c) 2023 Alexandru Ovidiu Miclea\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\\"Software\\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in all\\ncopies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\nSOFTWARE.\\n\\nTHIS SOFTWARE IS NOT TESTED OR AUDITED. DO NOT USE FOR PRODUCTION.\\n*/\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./interfaces/ISSVNetwork.sol\\\";\\nimport \\\"./interfaces/ISSVNetworkCore.sol\\\";\\nimport \\\"./interfaces/IDepositContract.sol\\\";\\nimport \\\"./interfaces/INodeLiquidETH.sol\\\";\\nimport \\\"./interfaces/IRewardsManager.sol\\\";\\n\\n/* import \\\"hardhat/console.sol\\\"; */\\n\\n/// @custom:security-contact security@ovmi.sh\\ncontract NodeStakingPoolV230 is\\n    Initializable,\\n    PausableUpgradeable,\\n    OwnableUpgradeable\\n{\\n    /****************\\n    Libraries\\n    ****************/\\n    using Math for uint256;\\n\\n    /****************\\n    Constants\\n    ****************/\\n    uint256 private constant MIN_DEPOSIT_AMOUNT = 0.01 ether;\\n    uint256 private constant BEACON_DEPOSIT_AMOUNT = 32 ether;\\n\\n    /****************\\n    Global variables\\n    ****************/\\n    address public WithdrawalAddress; // Rewards withdrawal address usually is Rewards Manager address\\n\\n    address public BeaconContract; // Beacon contract address\\n    address public SSVNetwork; // SSVNetwork contract\\n    address public SSVToken; // SSVToken contract\\n\\n    address public NodeLiquidETH; // NodeLiquidETH contract\\n\\n    address public PoolDeployer; // Pool Deployer address - Could be a multisig contract\\n    address public PoolManager; // Pool Manager address - Could be a PoolManager DAO contract\\n    address public OracleManager; // Oracle Manager address - Could be an OracleManager contract\\n    address payable public RewardsManager; // Rewards Manager address - Could be a RewardsManager contract\\n\\n    uint256 lastShareUpdate; // Last block number when oracle stats were updated\\n\\n    /****************\\n    Pool management data\\n    ****************/\\n\\n    struct Operator {\\n        uint32 id;\\n        address oracleAddress;\\n        string publicKey;\\n    }\\n    Operator[] private operatorsPool;\\n    mapping(uint256 => uint256) private operatorsPoolIndex; // id -> index\\n\\n    bytes[] public validatorsPool;\\n    mapping(bytes32 => uint256) public validatorBytesToIndex; // keccak256(publicKey) -> index\\n\\n    /****************\\n    Staking data\\n    ****************/\\n\\n    mapping(address => uint256) public userStakes; // userStakedETH\\n    uint256 public totalETHStaked; // Total ETH staked in Pool validators\\n\\n    uint256 public pendingETHToStake; // Total ETH pending to be staked in Pool validators\\n    uint256[] public pendingETHToStakeArray; // Array of user pending to stake amounts\\n    mapping(address => uint256) public pendingETHToStakeByUser; // pendingETHToStakeArray by user\\n\\n    uint256 public beaconBalance; // Total validators balance in beaconchain\\n\\n    /****************\\n    Withdrawals data\\n    ****************/\\n    uint256 public withdrawalsPool; // available ETH for withdrawals\\n\\n    uint256 public pendingUnstakeTotal; // Total pending withdrawal amounts\\n    uint256[] public pendingUnstakeArray; // Array of pending withdrawal shares\\n    mapping(address => uint256) public pendingUnstakeByUser; // pending withdrawal amounts per address\\n\\n    // @dev reserve storage space for future new state variables in base contract\\n    // slither-disable-next-line shadowing-state\\n    uint256[30] __gap;\\n\\n    /****************\\n    CustomErrors\\n    ****************/\\n    error InvalidAddress();\\n    error OnlyDeployerCanCall();\\n    error OnlyManagerCanCall();\\n    error OnlyOracleCanCall();\\n    error WithdrawalsDisabled();\\n    error NotEnoughETHBalance();\\n    error InvalidDepositAmount();\\n    error AmountTooLow();\\n    error AmountTooHigh();\\n    error NotEnoughShares();\\n    error NotEnoughETHInWithdrawalsPool();\\n    error OperatorAlreadyExists();\\n    error OperatorDoesNotExist();\\n    error OverflowError();\\n    error FailedToSendETH();\\n\\n    /****************\\n    Modifiers\\n    ****************/\\n    /**\\n     * @dev Throws if called by any account other than the PoolDeployer.\\n     */\\n    modifier onlyDeployer() {\\n        if (msg.sender != PoolDeployer) revert OnlyDeployerCanCall();\\n        _;\\n    }\\n    /**\\n     * @dev Throws if called by any account other than the PoolManager.\\n     */\\n    modifier onlyManager() {\\n        if (msg.sender != PoolManager) revert OnlyManagerCanCall();\\n        _;\\n    }\\n    /**\\n     * @dev Throws if called by any account other than the OracleManager.\\n     */\\n    modifier onlyOracle() {\\n        if (msg.sender != OracleManager) revert OnlyOracleCanCall();\\n        _;\\n    }\\n\\n    /****************\\n    Events\\n    ****************/\\n\\n    /**\\n     * @dev Emitted contract receives ETH\\n     * @param amount Amount of ETH received\\n     * @param sender Sender address\\n     */\\n    event ReceivedETH(uint256 amount, address sender);\\n\\n    /**\\n     * @dev Emitted when one operator is added to the operatorsPool\\n     * @param operator Operator details\\n     */\\n    event OperatorAdded(Operator operator);\\n\\n    /**\\n     * @dev Emitted when one operator is removed from the operatorsPool\\n     * @param operator Operator ID\\n     */\\n    event OperatorRemoved(uint256 operator);\\n\\n    /**\\n     * @dev Emitted when one validator is added to the validatorsPool\\n     * @param publicKey Validator address\\n     */\\n    event ValidatorDepositedToBeacon(bytes publicKey);\\n    event Stake(address indexed staker, uint256 amount, uint256 shares);\\n    event PendingUnstake(address indexed staker, uint256 shares);\\n    event Unstake(\\n        address indexed staker,\\n        uint256 shares,\\n        uint256 amount,\\n        bytes data\\n    );\\n    event WithdrawalsPoolUpdated(address indexed depositer, uint256 amount);\\n    event PoolManagerUpdated(address indexed newPoolManager);\\n    event OracleManagerUpdated(address indexed newOracleManager);\\n    event UpdatedOracleStats(uint256 beaconBalance, uint256 rewards);\\n    event AddValidatorInPool(bytes publicKey);\\n    event RemoveValidatorFromPool(bytes publicKey);\\n\\n    /****************\\n    Constructor\\n    ****************/\\n\\n    /**\\n     * @dev Initialize the contract\\n     * @param _nLETH NodeLiquidETH contract address\\n     * @param _ssvNetwork SSVNetwork contract address\\n     * @param _ssvToken SSVToken contract address\\n     * @param _beaconContract Beacon contract address\\n     * @param _poolManager PoolManager address\\n     * @param _rewardsManager RewardsManager address\\n     */\\n    function initialize(\\n        address _nLETH,\\n        address _ssvNetwork,\\n        address _ssvToken,\\n        address _beaconContract,\\n        address _poolManager,\\n        address payable _rewardsManager\\n    ) public initializer {\\n        if (\\n            _nLETH == address(0) ||\\n            _ssvNetwork == address(0) ||\\n            _ssvToken == address(0) ||\\n            _beaconContract == address(0) ||\\n            _poolManager == address(0) ||\\n            _rewardsManager == address(0)\\n        ) revert InvalidAddress();\\n\\n        NodeLiquidETH = _nLETH;\\n        SSVNetwork = _ssvNetwork;\\n        SSVToken = _ssvToken;\\n        BeaconContract = _beaconContract;\\n        WithdrawalAddress = address(this);\\n        PoolManager = _poolManager;\\n        PoolDeployer = msg.sender;\\n        RewardsManager = _rewardsManager;\\n        OracleManager = _poolManager;\\n\\n        // Intialize global variables\\n        lastShareUpdate = block.number;\\n\\n        pendingUnstakeArray.push(0);\\n        pendingUnstakeByUser[address(0)] = 0;\\n\\n        pendingETHToStakeArray.push(0);\\n        pendingETHToStakeByUser[address(0)] = 0;\\n    }\\n\\n    /**\\n     * @dev Fallback function to receive ETH\\n     */\\n    receive() external payable {\\n        emit ReceivedETH(msg.value, msg.sender);\\n    }\\n\\n    /****************\\n    Pool General Methods\\n    ****************/\\n\\n    /**\\n     * @dev Update Pool Manager Address\\n     * @param _poolManager New Pool Manager address\\n     */\\n    function updatePoolManager(address _poolManager) external onlyDeployer {\\n        if (_poolManager == address(0)) revert InvalidAddress();\\n\\n        PoolManager = _poolManager;\\n\\n        emit PoolManagerUpdated(_poolManager);\\n    }\\n\\n    /**\\n     * @dev Update Oracle Manager Address\\n     * @param _oracleManager New Oracle Manager address\\n     */\\n    function updateOracleManager(address _oracleManager) external onlyDeployer {\\n        if (_oracleManager == address(0)) revert InvalidAddress();\\n\\n        OracleManager = _oracleManager;\\n\\n        emit OracleManagerUpdated(_oracleManager);\\n    }\\n\\n    /**\\n     * @dev Pause contract using OpenZeepelin Pausable\\n     */\\n    function pause() external onlyManager {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause contract using OpenZeepelin Pausable\\n     */\\n    function unpause() external onlyManager {\\n        _unpause();\\n    }\\n\\n    // add ETH to withdrawals pool\\n    function addToWithdrawalsPool() external payable onlyManager {\\n        withdrawalsPool += msg.value;\\n\\n        emit WithdrawalsPoolUpdated(msg.sender, msg.value);\\n    }\\n\\n    /****************\\n    Pool Operators Methods\\n    ****************/\\n\\n    /**\\n     * @dev Add operator to operatorsPool\\n     * @param _operator Operator to add\\n     */\\n    function addOperator(Operator calldata _operator) external onlyManager {\\n        if (\\n            operatorsPool.length > 0 &&\\n            operatorsPool[operatorsPoolIndex[_operator.id]].id == _operator.id\\n        ) {\\n            revert OperatorAlreadyExists();\\n        }\\n\\n        operatorsPool.push(_operator);\\n        operatorsPoolIndex[_operator.id] = operatorsPool.length - 1;\\n\\n        emit OperatorAdded(_operator);\\n    }\\n\\n    /**\\n     * @dev Remove operator from operatorsPool\\n     * @param _operatorId operator index to remove\\n     */\\n    function removeOperator(uint32 _operatorId) external onlyManager {\\n        uint256 index = operatorsPoolIndex[_operatorId];\\n\\n        if (operatorsPool[index].id != _operatorId)\\n            revert OperatorDoesNotExist();\\n\\n        operatorsPool[index] = operatorsPool[operatorsPool.length - 1];\\n        operatorsPoolIndex[operatorsPool[operatorsPool.length - 1].id] = index;\\n        operatorsPool.pop();\\n\\n        delete operatorsPoolIndex[_operatorId];\\n\\n        emit OperatorRemoved(_operatorId);\\n    }\\n\\n    /**\\n     * @dev Get operatorsPool\\n     * @return Operator[] Operators Pool array\\n     */\\n    function getOperatorsPool() public view returns (Operator[] memory) {\\n        return operatorsPool;\\n    }\\n\\n    /**\\n     *   @dev Get validatorsPool array\\n     *   @return bytes[] Validators Pool array\\n     */\\n    function getValidatorsPool() public view returns (bytes[] memory) {\\n        return validatorsPool;\\n    }\\n\\n    /**\\n     *   @dev Get Validator index in validatorsPool array\\n     *   @return uint256 Validator index\\n     */\\n    function getValidatorIndex(\\n        bytes memory _publicKey\\n    ) public view returns (uint256) {\\n        return validatorBytesToIndex[keccak256(_publicKey)];\\n    }\\n\\n    /****************\\n    Pool Validators Methods\\n    ****************/\\n\\n    /**\\n     * @dev Deposit ETH to Beacon contract\\n     * @param _publicKey Validator public key\\n     * @param _withdrawalCredentials Validator withdrawal credentials\\n     * @param _signature Validator signature\\n     * @param _amount Amount of ETH to deposit\\n     * @param _depositDataRoot Validator deposit data root\\n     */\\n    function depositToBeaconContract(\\n        bytes calldata _publicKey,\\n        bytes calldata _withdrawalCredentials,\\n        bytes calldata _signature,\\n        uint256 _amount,\\n        bytes32 _depositDataRoot\\n    ) public onlyManager {\\n        if (_amount != BEACON_DEPOSIT_AMOUNT) revert InvalidDepositAmount();\\n\\n        uint256 availableBalance = address(this).balance - withdrawalsPool;\\n\\n        if (_amount > availableBalance || _amount > pendingETHToStake)\\n            revert NotEnoughETHBalance();\\n\\n        IDepositContract(BeaconContract).deposit{value: _amount}(\\n            _publicKey,\\n            _withdrawalCredentials,\\n            _signature,\\n            _depositDataRoot\\n        );\\n\\n        // clear elements from pending to stake array\\n        uint256 _pendingETHToStake = 0;\\n        for (uint256 i = 0; i < pendingETHToStakeArray.length; i++) {\\n            _pendingETHToStake += pendingETHToStakeArray[i];\\n            if (_pendingETHToStake >= _amount) {\\n                pendingETHToStakeArray[i] = _pendingETHToStake - _amount;\\n                break;\\n            } else {\\n                pendingETHToStakeArray[i] = 0;\\n            }\\n        }\\n\\n        // Update global pendingETHToStake variable\\n        pendingETHToStake -= _amount;\\n\\n        // Update validator in pool, totalETHStaked and new beaconBalance\\n        addValidatorInPool(_publicKey);\\n\\n        emit ValidatorDepositedToBeacon(_publicKey);\\n    }\\n\\n    /****************\\n    Pool User Methods\\n    ****************/\\n\\n    /**\\n     * @dev Stake ETH to the pool\\n     */\\n    function stake() public payable whenNotPaused {\\n        if (msg.value < MIN_DEPOSIT_AMOUNT) {\\n            revert AmountTooLow();\\n        }\\n\\n        // update pending ETH to stake array\\n        if (pendingETHToStakeByUser[msg.sender] == 0) {\\n            pendingETHToStakeArray.push(msg.value);\\n            pendingETHToStakeByUser[msg.sender] =\\n                pendingETHToStakeArray.length -\\n                1;\\n        } else {\\n            pendingETHToStakeArray[pendingETHToStakeByUser[msg.sender]] += msg\\n                .value;\\n        }\\n\\n        // Update globar variables\\n        pendingETHToStake += msg.value;\\n\\n        uint256 shares = INodeLiquidETH(NodeLiquidETH).assetsToShares(\\n            msg.value\\n        );\\n        INodeLiquidETH(NodeLiquidETH).mint(msg.sender, shares);\\n\\n        emit Stake(msg.sender, msg.value, shares);\\n    }\\n\\n    /**\\n     * @dev Unstake ETH from the pool\\n     * @param shares Amount of shares to unstake\\n     */\\n    function unstake(uint256 shares) external whenNotPaused {\\n        if (shares <= 0) {\\n            revert AmountTooLow();\\n        }\\n\\n        uint256 userIndex = pendingUnstakeByUser[msg.sender];\\n        uint256 alreadyPendingUnstakeShares = 0;\\n\\n        if (userIndex > 0) {\\n            alreadyPendingUnstakeShares = pendingUnstakeArray[userIndex];\\n        }\\n\\n        uint256 userTotalShares = INodeLiquidETH(NodeLiquidETH).balanceOf(\\n            msg.sender\\n        );\\n\\n        if (shares > userTotalShares - alreadyPendingUnstakeShares) {\\n            revert NotEnoughShares();\\n        }\\n\\n        INodeLiquidETH(NodeLiquidETH).burnFrom(msg.sender, shares);\\n\\n        if (pendingUnstakeArray[userIndex] > 0) {\\n            pendingUnstakeArray[userIndex] += shares;\\n        } else {\\n            pendingUnstakeArray.push(shares);\\n            userIndex = pendingUnstakeArray.length - 1;\\n            pendingUnstakeByUser[msg.sender] = userIndex;\\n        }\\n\\n        pendingUnstakeTotal += shares;\\n\\n        emit PendingUnstake(msg.sender, shares);\\n    }\\n\\n    /**\\n     * @dev Unstake pending ETH from the pool\\n     */\\n    function unstakePending() external whenNotPaused {\\n        uint256 index = pendingUnstakeByUser[msg.sender];\\n        uint256 shares = 0;\\n\\n        if (index == 0) {\\n            revert NotEnoughShares();\\n        }\\n\\n        shares = pendingUnstakeArray[index];\\n\\n        if (shares == 0) {\\n            revert NotEnoughShares();\\n        }\\n\\n        uint256 amount = INodeLiquidETH(NodeLiquidETH).sharesToAssets(shares);\\n\\n        if (withdrawalsPool < amount) {\\n            revert NotEnoughETHInWithdrawalsPool();\\n        }\\n\\n        withdrawalsPool -= amount;\\n        pendingUnstakeArray[index] = 0;\\n\\n        (bool sent, bytes memory data) = msg.sender.call{value: amount}(\\\"\\\");\\n\\n        if (sent == false) {\\n            revert FailedToSendETH();\\n        }\\n\\n        emit Unstake(msg.sender, shares, amount, data);\\n    }\\n\\n    /**\\n     * @dev Get pending stake for user\\n     * @param _user User address\\n     * @return uint256 Pending stake amount\\n     */\\n    function getPendingStakeForUser(\\n        address _user\\n    ) public view returns (uint256) {\\n        return pendingETHToStakeArray[pendingETHToStakeByUser[_user]];\\n    }\\n\\n    /**\\n     * @dev Get pending unstake for user\\n     * @param _user User address\\n     * @return uint256 Pending unstake amount\\n     */\\n    function getPendingUnstakeForUser(\\n        address _user\\n    ) public view returns (uint256) {\\n        return pendingUnstakeArray[pendingUnstakeByUser[_user]];\\n    }\\n\\n    /****************\\n    Pool Oracle Manager Methods\\n    ****************/\\n    /**\\n     * @dev Update Oracle Stats\\n     * @param _beaconBalance Beacon balance\\n     * @param _rewards Rewards amount\\n     */\\n    function updateOracleStats(\\n        uint256 _beaconBalance,\\n        uint256 _rewards\\n    ) public onlyOracle {\\n        _updateOracleStats(_beaconBalance, _rewards);\\n    }\\n\\n    /****************\\n    Internal functions\\n    ****************/\\n    function _updateOracleStats(\\n        uint256 _beaconBalance,\\n        uint256 _rewards\\n    ) internal {\\n        IRewardsManager rewardsManager = IRewardsManager(RewardsManager);\\n\\n        rewardsManager.updateRewards(_rewards);\\n\\n        uint256 assetsBalance = _beaconBalance +\\n            _rewards +\\n            pendingETHToStake -\\n            pendingUnstakeTotal;\\n\\n        lastShareUpdate = block.number;\\n\\n        // Update the beaconBalance\\n        beaconBalance = _beaconBalance;\\n\\n        INodeLiquidETH(NodeLiquidETH).updateSharePrice(assetsBalance);\\n\\n        emit UpdatedOracleStats(_beaconBalance, _rewards);\\n    }\\n\\n    function addValidatorInPool(bytes memory _publicKey) public onlyManager {\\n        validatorsPool.push(_publicKey);\\n        validatorBytesToIndex[keccak256(_publicKey)] =\\n            validatorsPool.length -\\n            1;\\n\\n        totalETHStaked += 32 ether;\\n\\n        uint256 newBeaconBalance = beaconBalance + 32 ether;\\n\\n        _updateOracleStats(newBeaconBalance, 0);\\n\\n        emit AddValidatorInPool(_publicKey);\\n    }\\n\\n    function removeValidatorFromPool(\\n        bytes memory _publicKey\\n    ) public onlyManager {\\n        uint256 index = validatorBytesToIndex[keccak256(_publicKey)];\\n\\n        validatorsPool[index] = validatorsPool[validatorsPool.length - 1];\\n        validatorBytesToIndex[\\n            keccak256(validatorsPool[validatorsPool.length - 1])\\n        ] = index;\\n        validatorsPool.pop();\\n\\n        delete validatorBytesToIndex[keccak256(_publicKey)];\\n\\n        totalETHStaked -= 32 ether;\\n\\n        uint256 newBeaconBalance = beaconBalance - 32 ether;\\n        _updateOracleStats(newBeaconBalance, 0);\\n\\n        emit RemoveValidatorFromPool(_publicKey);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AmountTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedToSendETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDepositAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughETHBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughETHInWithdrawalsPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughShares\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyDeployerCanCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManagerCanCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyOracleCanCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OverflowError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawalsDisabled\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"AddValidatorInPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"}],\"indexed\":false,\"internalType\":\"struct NodeStakingPoolV230.Operator\",\"name\":\"operator\",\"type\":\"tuple\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"operator\",\"type\":\"uint256\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracleManager\",\"type\":\"address\"}],\"name\":\"OracleManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"PendingUnstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPoolManager\",\"type\":\"address\"}],\"name\":\"PoolManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ReceivedETH\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"RemoveValidatorFromPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Stake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"Unstake\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beaconBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"UpdatedOracleStats\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorDepositedToBeacon\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawalsPoolUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BeaconContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NodeLiquidETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OracleManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PoolDeployer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PoolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RewardsManager\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSVNetwork\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SSVToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WithdrawalAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"}],\"internalType\":\"struct NodeStakingPoolV230.Operator\",\"name\":\"_operator\",\"type\":\"tuple\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addToWithdrawalsPool\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"addValidatorInPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beaconBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_withdrawalCredentials\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_depositDataRoot\",\"type\":\"bytes32\"}],\"name\":\"depositToBeaconContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorsPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"id\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"oracleAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"publicKey\",\"type\":\"string\"}],\"internalType\":\"struct NodeStakingPoolV230.Operator[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingStakeForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getPendingUnstakeForUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"getValidatorIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidatorsPool\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nLETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ssvNetwork\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ssvToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beaconContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"_rewardsManager\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingETHToStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingETHToStakeArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingETHToStakeByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingUnstakeArray\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pendingUnstakeByUser\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingUnstakeTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_operatorId\",\"type\":\"uint32\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_publicKey\",\"type\":\"bytes\"}],\"name\":\"removeValidatorFromPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalETHStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakePending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleManager\",\"type\":\"address\"}],\"name\":\"updateOracleManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_beaconBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_rewards\",\"type\":\"uint256\"}],\"name\":\"updateOracleStats\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolManager\",\"type\":\"address\"}],\"name\":\"updatePoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"validatorBytesToIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validatorsPool\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalsPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "NodeStakingPoolV230", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}