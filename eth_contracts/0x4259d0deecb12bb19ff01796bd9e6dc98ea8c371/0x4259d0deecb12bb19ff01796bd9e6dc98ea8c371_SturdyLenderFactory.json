{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.18;\r\n\r\n// We use the Tokenized Strategy interface.\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\r\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\r\n *\r\n * _Available since v4.7._\r\n */\r\ninterface IERC4626 is IERC20, IERC20Metadata {\r\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\r\n\r\n    event Withdraw(\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        address indexed owner,\r\n        uint256 assets,\r\n        uint256 shares\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\r\n     *\r\n     * - MUST be an ERC-20 token contract.\r\n     * - MUST NOT revert.\r\n     */\r\n    function asset() external view returns (address assetTokenAddress);\r\n\r\n    /**\r\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\r\n     *\r\n     * - SHOULD include any compounding that occurs from yield.\r\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT revert.\r\n     */\r\n    function totalAssets() external view returns (uint256 totalManagedAssets);\r\n\r\n    /**\r\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\r\n     * through a deposit call.\r\n     *\r\n     * - MUST return a limited value if receiver is subject to some deposit limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\r\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\r\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   deposit execution, and are accounted for during deposit.\r\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\r\n     * - MUST return a limited value if receiver is subject to some mint limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxMint(address receiver) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\r\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\r\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\r\n     */\r\n    function previewMint(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\r\n     *   execution, and are accounted for during mint.\r\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\r\n     * Vault, through a withdraw call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\r\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\r\n     *   called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\r\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   withdraw execution, and are accounted for during withdraw.\r\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\r\n     * through a redeem call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\r\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\r\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\r\n     */\r\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   redeem execution, and are accounted for during redeem.\r\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// Interface that implements the 4626 standard and the implementation functions\r\ninterface ITokenizedStrategy is IERC4626, IERC20Permit {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event StrategyShutdown();\r\n\r\n    event NewTokenizedStrategy(\r\n        address indexed strategy,\r\n        address indexed asset,\r\n        string apiVersion\r\n    );\r\n\r\n    event Reported(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 protocolFees,\r\n        uint256 performanceFees\r\n    );\r\n\r\n    event UpdatePerformanceFeeRecipient(\r\n        address indexed newPerformanceFeeRecipient\r\n    );\r\n\r\n    event UpdateKeeper(address indexed newKeeper);\r\n\r\n    event UpdatePerformanceFee(uint16 newPerformanceFee);\r\n\r\n    event UpdateManagement(address indexed newManagement);\r\n\r\n    event UpdateEmergencyAdmin(address indexed newEmergencyAdmin);\r\n\r\n    event UpdateProfitMaxUnlockTime(uint256 newProfitMaxUnlockTime);\r\n\r\n    event UpdatePendingManagement(address indexed newPendingManagement);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           INITIALIZATION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function initialize(\r\n        address _asset,\r\n        string memory _name,\r\n        address _management,\r\n        address _performanceFeeRecipient,\r\n        address _keeper\r\n    ) external;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    NON-STANDARD 4626 OPTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        MODIFIER HELPERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function requireManagement(address _sender) external view;\r\n\r\n    function requireKeeperOrManagement(address _sender) external view;\r\n\r\n    function requireEmergencyAuthorized(address _sender) external view;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        KEEPERS FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function tend() external;\r\n\r\n    function report() external returns (uint256 _profit, uint256 _loss);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function MAX_FEE() external view returns (uint16);\r\n\r\n    function FACTORY() external view returns (address);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            GETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function management() external view returns (address);\r\n\r\n    function pendingManagement() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function emergencyAdmin() external view returns (address);\r\n\r\n    function performanceFee() external view returns (uint16);\r\n\r\n    function performanceFeeRecipient() external view returns (address);\r\n\r\n    function fullProfitUnlockDate() external view returns (uint256);\r\n\r\n    function profitUnlockingRate() external view returns (uint256);\r\n\r\n    function profitMaxUnlockTime() external view returns (uint256);\r\n\r\n    function lastReport() external view returns (uint256);\r\n\r\n    function isShutdown() external view returns (bool);\r\n\r\n    function unlockedShares() external view returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            SETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setPendingManagement(address) external;\r\n\r\n    function acceptManagement() external;\r\n\r\n    function setKeeper(address _keeper) external;\r\n\r\n    function setEmergencyAdmin(address _emergencyAdmin) external;\r\n\r\n    function setPerformanceFee(uint16 _performanceFee) external;\r\n\r\n    function setPerformanceFeeRecipient(\r\n        address _performanceFeeRecipient\r\n    ) external;\r\n\r\n    function setProfitMaxUnlockTime(uint256 _profitMaxUnlockTime) external;\r\n\r\n    function shutdownStrategy() external;\r\n\r\n    function emergencyWithdraw(uint256 _amount) external;\r\n}\r\n\r\ninterface IBaseStrategy {\r\n    function tokenizedStrategyAddress() external view returns (address);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            IMMUTABLE FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function availableDepositLimit(\r\n        address _owner\r\n    ) external view returns (uint256);\r\n\r\n    function availableWithdrawLimit(\r\n        address _owner\r\n    ) external view returns (uint256);\r\n\r\n    function deployFunds(uint256 _assets) external;\r\n\r\n    function freeFunds(uint256 _amount) external;\r\n\r\n    function harvestAndReport() external returns (uint256);\r\n\r\n    function tendThis(uint256 _totalIdle) external;\r\n\r\n    function shutdownWithdraw(uint256 _amount) external;\r\n\r\n    function tendTrigger() external view returns (bool, bytes memory);\r\n}\r\n\r\ninterface IStrategy is IBaseStrategy, ITokenizedStrategy {}\r\n\r\n// TokenizedStrategy interface used for internal view delegateCalls.\r\n\r\n/**\r\n * @title YearnV3 Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to\r\n *  seamlessly integrate with the `TokenizedStrategy` implementation contract\r\n *  allowing anyone to easily build a fully permissionless ERC-4626 compliant\r\n *  Vault by inheriting this contract and overriding three simple functions.\r\n\r\n *  It utilizes an immutable proxy pattern that allows the BaseStrategy\r\n *  to remain simple and small. All standard logic is held within the\r\n *  `TokenizedStrategy` and is reused over any n strategies all using the\r\n *  `fallback` function to delegatecall the implementation so that strategists\r\n *  can only be concerned with writing their strategy specific code.\r\n *\r\n *  This contract should be inherited and the three main abstract methods\r\n *  `_deployFunds`, `_freeFunds` and `_harvestAndReport` implemented to adapt\r\n *  the Strategy to the particular needs it has to generate yield. There are\r\n *  other optional methods that can be implemented to further customize\r\n *  the strategy if desired.\r\n *\r\n *  All default storage for the strategy is controlled and updated by the\r\n *  `TokenizedStrategy`. The implementation holds a storage struct that\r\n *  contains all needed global variables in a manual storage slot. This\r\n *  means strategists can feel free to implement their own custom storage\r\n *  variables as they need with no concern of collisions. All global variables\r\n *  can be viewed within the Strategy by a simple call using the\r\n *  `TokenizedStrategy` variable. IE: TokenizedStrategy.globalVariable();.\r\n */\r\nabstract contract BaseStrategy {\r\n    /*//////////////////////////////////////////////////////////////\r\n                            MODIFIERS\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @dev Used on TokenizedStrategy callback functions to make sure it is post\r\n     * a delegateCall from this address to the TokenizedStrategy.\r\n     */\r\n    modifier onlySelf() {\r\n        _onlySelf();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from the strategies management.\r\n     */\r\n    modifier onlyManagement() {\r\n        TokenizedStrategy.requireManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from either the strategies\r\n     * management or the keeper.\r\n     */\r\n    modifier onlyKeepers() {\r\n        TokenizedStrategy.requireKeeperOrManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from either the strategies\r\n     * management or the emergency admin.\r\n     */\r\n    modifier onlyEmergencyAuthorized() {\r\n        TokenizedStrategy.requireEmergencyAuthorized(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Require that the msg.sender is this address.\r\n     */\r\n    function _onlySelf() internal view {\r\n        require(msg.sender == address(this), \"!self\");\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev This is the address of the TokenizedStrategy implementation\r\n     * contract that will be used by all strategies to handle the\r\n     * accounting, logic, storage etc.\r\n     *\r\n     * Any external calls to the that don't hit one of the functions\r\n     * defined in this base or the strategy will end up being forwarded\r\n     * through the fallback function, which will delegateCall this address.\r\n     *\r\n     * This address should be the same for every strategy, never be adjusted\r\n     * and always be checked before any integration with the Strategy.\r\n     */\r\n    address public constant tokenizedStrategyAddress =\r\n        0xBB51273D6c746910C7C06fe718f30c936170feD0;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            IMMUTABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Underlying asset the Strategy is earning yield on.\r\n     * Stored here for cheap retrievals within the strategy.\r\n     */\r\n    ERC20 internal immutable asset;\r\n\r\n    /**\r\n     * @dev This variable is set to address(this) during initialization of each strategy.\r\n     *\r\n     * This can be used to retrieve storage data within the strategy\r\n     * contract as if it were a linked library.\r\n     *\r\n     *       i.e. uint256 totalAssets = TokenizedStrategy.totalAssets()\r\n     *\r\n     * Using address(this) will mean any calls using this variable will lead\r\n     * to a call to itself. Which will hit the fallback function and\r\n     * delegateCall that to the actual TokenizedStrategy.\r\n     */\r\n    ITokenizedStrategy internal immutable TokenizedStrategy;\r\n\r\n    /**\r\n     * @notice Used to initialize the strategy on deployment.\r\n     *\r\n     * This will set the `TokenizedStrategy` variable for easy\r\n     * internal view calls to the implementation. As well as\r\n     * initializing the default storage variables based on the\r\n     * parameters and using the deployer for the permissioned roles.\r\n     *\r\n     * @param _asset Address of the underlying asset.\r\n     * @param _name Name the strategy will use.\r\n     */\r\n    constructor(address _asset, string memory _name) {\r\n        asset = ERC20(_asset);\r\n\r\n        // Set instance of the implementation for internal use.\r\n        TokenizedStrategy = ITokenizedStrategy(address(this));\r\n\r\n        // Initialize the strategy's storage variables.\r\n        _delegateCall(\r\n            abi.encodeCall(\r\n                ITokenizedStrategy.initialize,\r\n                (_asset, _name, msg.sender, msg.sender, msg.sender)\r\n            )\r\n        );\r\n\r\n        // Store the tokenizedStrategyAddress at the standard implementation\r\n        // address storage slot so etherscan picks up the interface. This gets\r\n        // stored on initialization and never updated.\r\n        assembly {\r\n            sstore(\r\n                // keccak256('eip1967.proxy.implementation' - 1)\r\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\r\n                tokenizedStrategyAddress\r\n            )\r\n        }\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                NEEDED TO BE OVERRIDDEN BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Can deploy up to '_amount' of 'asset' in the yield source.\r\n     *\r\n     * This function is called at the end of a {deposit} or {mint}\r\n     * call. Meaning that unless a whitelist is implemented it will\r\n     * be entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy can attempt\r\n     * to deposit in the yield source.\r\n     */\r\n    function _deployFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Should attempt to free the '_amount' of 'asset'.\r\n     *\r\n     * NOTE: The amount of 'asset' that is already loose has already\r\n     * been accounted for.\r\n     *\r\n     * This function is called during {withdraw} and {redeem} calls.\r\n     * Meaning that unless a whitelist is implemented it will be\r\n     * entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * Should not rely on asset.balanceOf(address(this)) calls other than\r\n     * for diff accounting purposes.\r\n     *\r\n     * Any difference between `_amount` and what is actually freed will be\r\n     * counted as a loss and passed on to the withdrawer. This means\r\n     * care should be taken in times of illiquidity. It may be better to revert\r\n     * if withdraws are simply illiquid so not to realize incorrect losses.\r\n     *\r\n     * @param _amount, The amount of 'asset' to be freed.\r\n     */\r\n    function _freeFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Internal function to harvest all rewards, redeploy any idle\r\n     * funds and return an accurate accounting of all funds currently\r\n     * held by the Strategy.\r\n     *\r\n     * This should do any needed harvesting, rewards selling, accrual,\r\n     * redepositing etc. to get the most accurate view of current assets.\r\n     *\r\n     * NOTE: All applicable assets including loose assets should be\r\n     * accounted for in this function.\r\n     *\r\n     * Care should be taken when relying on oracles or swap values rather\r\n     * than actual amounts as all Strategy profit/loss accounting will\r\n     * be done based on this returned value.\r\n     *\r\n     * This can still be called post a shutdown, a strategist can check\r\n     * `TokenizedStrategy.isShutdown()` to decide if funds should be\r\n     * redeployed or simply realize any profits/losses.\r\n     *\r\n     * @return _totalAssets A trusted and accurate account for the total\r\n     * amount of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function _harvestAndReport()\r\n        internal\r\n        virtual\r\n        returns (uint256 _totalAssets);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    OPTIONAL TO OVERRIDE BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Optional function for strategist to override that can\r\n     *  be called in between reports.\r\n     *\r\n     * If '_tend' is used tendTrigger() will also need to be overridden.\r\n     *\r\n     * This call can only be called by a permissioned role so may be\r\n     * through protected relays.\r\n     *\r\n     * This can be used to harvest and compound rewards, deposit idle funds,\r\n     * perform needed position maintenance or anything else that doesn't need\r\n     * a full report for.\r\n     *\r\n     *   EX: A strategy that can not deposit funds without getting\r\n     *       sandwiched can use the tend when a certain threshold\r\n     *       of idle to totalAssets has been reached.\r\n     *\r\n     * This will have no effect on PPS of the strategy till report() is called.\r\n     *\r\n     * @param _totalIdle The current amount of idle funds that are available to deploy.\r\n     */\r\n    function _tend(uint256 _totalIdle) internal virtual {}\r\n\r\n    /**\r\n     * @dev Optional trigger to override if tend() will be used by the strategy.\r\n     * This must be implemented if the strategy hopes to invoke _tend().\r\n     *\r\n     * @return . Should return true if tend() should be called by keeper or false if not.\r\n     */\r\n    function _tendTrigger() internal view virtual returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns if tend() should be called by a keeper.\r\n     *\r\n     * @return . Should return true if tend() should be called by keeper or false if not.\r\n     * @return . Calldata for the tend call.\r\n     */\r\n    function tendTrigger() external view virtual returns (bool, bytes memory) {\r\n        return (\r\n            // Return the status of the tend trigger.\r\n            _tendTrigger(),\r\n            // And the needed calldata either way.\r\n            abi.encodeWithSelector(ITokenizedStrategy.tend.selector)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that an address can deposit.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any deposit or mints to enforce\r\n     * any limits desired by the strategist. This can be used for either a\r\n     * traditional deposit limit or for implementing a whitelist etc.\r\n     *\r\n     *   EX:\r\n     *      if(isAllowed[_owner]) return super.availableDepositLimit(_owner);\r\n     *\r\n     * This does not need to take into account any conversion rates\r\n     * from shares to assets. But should know that any non max uint256\r\n     * amounts may be converted to shares. So it is recommended to keep\r\n     * custom amounts low enough as not to cause overflow when multiplied\r\n     * by `totalSupply`.\r\n     *\r\n     * @param . The address that is depositing into the strategy.\r\n     * @return . The available amount the `_owner` can deposit in terms of `asset`\r\n     */\r\n    function availableDepositLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that can be withdrawn.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any withdraw or redeem to enforce\r\n     * any limits desired by the strategist. This can be used for illiquid\r\n     * or sandwichable strategies. It should never be lower than `totalIdle`.\r\n     *\r\n     *   EX:\r\n     *       return TokenIzedStrategy.totalIdle();\r\n     *\r\n     * This does not need to take into account the `_owner`'s share balance\r\n     * or conversion rates from shares to assets.\r\n     *\r\n     * @param . The address that is withdrawing from the strategy.\r\n     * @return . The available amount that can be withdrawn in terms of `asset`\r\n     */\r\n    function availableWithdrawLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @dev Optional function for a strategist to override that will\r\n     * allow management to manually withdraw deployed funds from the\r\n     * yield source if a strategy is shutdown.\r\n     *\r\n     * This should attempt to free `_amount`, noting that `_amount` may\r\n     * be more than is currently deployed.\r\n     *\r\n     * NOTE: This will not realize any profits or losses. A separate\r\n     * {report} will be needed in order to record any profit/loss. If\r\n     * a report may need to be called after a shutdown it is important\r\n     * to check if the strategy is shutdown during {_harvestAndReport}\r\n     * so that it does not simply re-deploy all funds that had been freed.\r\n     *\r\n     * EX:\r\n     *   if(freeAsset > 0 && !TokenizedStrategy.isShutdown()) {\r\n     *       depositFunds...\r\n     *    }\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function _emergencyWithdraw(uint256 _amount) internal virtual {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        TokenizedStrategy HOOKS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Can deploy up to '_amount' of 'asset' in yield source.\r\n     * @dev Callback for the TokenizedStrategy to call during a {deposit}\r\n     * or {mint} to tell the strategy it can deploy funds.\r\n     *\r\n     * Since this can only be called after a {deposit} or {mint}\r\n     * delegateCall to the TokenizedStrategy msg.sender == address(this).\r\n     *\r\n     * Unless a whitelist is implemented this will be entirely permissionless\r\n     * and thus can be sandwiched or otherwise manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy can\r\n     * attempt to deposit in the yield source.\r\n     */\r\n    function deployFunds(uint256 _amount) external virtual onlySelf {\r\n        _deployFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Should attempt to free the '_amount' of 'asset'.\r\n     * @dev Callback for the TokenizedStrategy to call during a withdraw\r\n     * or redeem to free the needed funds to service the withdraw.\r\n     *\r\n     * This can only be called after a 'withdraw' or 'redeem' delegateCall\r\n     * to the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should attempt to free up.\r\n     */\r\n    function freeFunds(uint256 _amount) external virtual onlySelf {\r\n        _freeFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the accurate amount of all funds currently\r\n     * held by the Strategy.\r\n     * @dev Callback for the TokenizedStrategy to call during a report to\r\n     * get an accurate accounting of assets the strategy controls.\r\n     *\r\n     * This can only be called after a report() delegateCall to the\r\n     * TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @return . A trusted and accurate account for the total amount\r\n     * of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function harvestAndReport() external virtual onlySelf returns (uint256) {\r\n        return _harvestAndReport();\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_tend' when a keeper tends the strategy.\r\n     * @dev Callback for the TokenizedStrategy to initiate a _tend call in the strategy.\r\n     *\r\n     * This can only be called after a tend() delegateCall to the TokenizedStrategy\r\n     * so msg.sender == address(this).\r\n     *\r\n     * We name the function `tendThis` so that `tend` calls are forwarded to\r\n     * the TokenizedStrategy.\r\n\r\n     * @param _totalIdle The amount of current idle funds that can be\r\n     * deployed during the tend\r\n     */\r\n    function tendThis(uint256 _totalIdle) external virtual onlySelf {\r\n        _tend(_totalIdle);\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_emergencyWithdraw' function.\r\n     * @dev Callback for the TokenizedStrategy during an emergency withdraw.\r\n     *\r\n     * This can only be called after a emergencyWithdraw() delegateCall to\r\n     * the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * We name the function `shutdownWithdraw` so that `emergencyWithdraw`\r\n     * calls are forwarded to the TokenizedStrategy.\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function shutdownWithdraw(uint256 _amount) external virtual onlySelf {\r\n        _emergencyWithdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function used to delegate call the TokenizedStrategy with\r\n     * certain `_calldata` and return any return values.\r\n     *\r\n     * This is used to setup the initial storage of the strategy, and\r\n     * can be used by strategist to forward any other call to the\r\n     * TokenizedStrategy implementation.\r\n     *\r\n     * @param _calldata The abi encoded calldata to use in delegatecall.\r\n     * @return . The return value if the call was successful in bytes.\r\n     */\r\n    function _delegateCall(\r\n        bytes memory _calldata\r\n    ) internal returns (bytes memory) {\r\n        // Delegate call the tokenized strategy with provided calldata.\r\n        (bool success, bytes memory result) = tokenizedStrategyAddress\r\n            .delegatecall(_calldata);\r\n\r\n        // If the call reverted. Return the error.\r\n        if (!success) {\r\n            assembly {\r\n                let ptr := mload(0x40)\r\n                let size := returndatasize()\r\n                returndatacopy(ptr, 0, size)\r\n                revert(ptr, size)\r\n            }\r\n        }\r\n\r\n        // Return the result.\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a function on the TokenizedStrategy and return any value.\r\n     *\r\n     * This fallback function will be executed when any of the standard functions\r\n     * defined in the TokenizedStrategy are called since they wont be defined in\r\n     * this contract.\r\n     *\r\n     * It will delegatecall the TokenizedStrategy implementation with the exact\r\n     * calldata and return any relevant values.\r\n     *\r\n     */\r\n    fallback() external {\r\n        // load our target address\r\n        address _tokenizedStrategyAddress = tokenizedStrategyAddress;\r\n        // Execute external function using delegatecall and return any value.\r\n        assembly {\r\n            // Copy function selector and any arguments.\r\n            calldatacopy(0, 0, calldatasize())\r\n            // Execute function delegatecall.\r\n            let result := delegatecall(\r\n                gas(),\r\n                _tokenizedStrategyAddress,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            // Get any return value\r\n            returndatacopy(0, 0, returndatasize())\r\n            // Return any return value or error back to the caller\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *   @title Base Health Check\r\n *   @author Yearn.finance\r\n *   @notice This contract can be inherited by any Yearn\r\n *   V3 strategy wishing to implement a health check during\r\n *   the `report` function in order to prevent any unexpected\r\n *   behavior from being permanently recorded as well as the\r\n *   `checkHealth` modifier.\r\n *\r\n *   A strategist simply needs to inherit this contract. Set\r\n *   the limit ratios to the desired amounts and then\r\n *   override `_harvestAndReport()` just as they otherwise\r\n *  would. If the profit or loss that would be recorded is\r\n *   outside the acceptable bounds the tx will revert.\r\n *\r\n *   The healthcheck does not prevent a strategy from reporting\r\n *   losses, but rather can make sure manual intervention is\r\n *   needed before reporting an unexpected loss or profit.\r\n */\r\nabstract contract BaseHealthCheck is BaseStrategy {\r\n    // Can be used to determine if a healthcheck should be called.\r\n    // Defaults to true;\r\n    bool public doHealthCheck = true;\r\n\r\n    uint256 internal constant MAX_BPS = 10_000;\r\n\r\n    // Default profit limit to 100%.\r\n    uint256 private _profitLimitRatio = MAX_BPS;\r\n\r\n    // Defaults loss limit to 0.\r\n    uint256 private _lossLimitRatio;\r\n\r\n    constructor(\r\n        address _asset,\r\n        string memory _name\r\n    ) BaseStrategy(_asset, _name) {}\r\n\r\n    /**\r\n     * @notice Returns the current profit limit ratio.\r\n     * @dev Use a getter function to keep the variable private.\r\n     * @return . The current profit limit ratio.\r\n     */\r\n    function profitLimitRatio() public view returns (uint256) {\r\n        return _profitLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current loss limit ratio.\r\n     * @dev Use a getter function to keep the variable private.\r\n     * @return . The current loss limit ratio.\r\n     */\r\n    function lossLimitRatio() public view returns (uint256) {\r\n        return _lossLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `profitLimitRatio`.\r\n     * @dev Denominated in basis points. I.E. 1_000 == 10%.\r\n     * @param _newProfitLimitRatio The mew profit limit ratio.\r\n     */\r\n    function setProfitLimitRatio(\r\n        uint256 _newProfitLimitRatio\r\n    ) external onlyManagement {\r\n        _setProfitLimitRatio(_newProfitLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Internally set the profit limit ratio. Denominated\r\n     * in basis points. I.E. 1_000 == 10%.\r\n     * @param _newProfitLimitRatio The mew profit limit ratio.\r\n     */\r\n    function _setProfitLimitRatio(uint256 _newProfitLimitRatio) internal {\r\n        require(_newProfitLimitRatio > 0, \"!zero profit\");\r\n        _profitLimitRatio = _newProfitLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `lossLimitRatio`.\r\n     * @dev Denominated in basis points. I.E. 1_000 == 10%.\r\n     * @param _newLossLimitRatio The new loss limit ratio.\r\n     */\r\n    function setLossLimitRatio(\r\n        uint256 _newLossLimitRatio\r\n    ) external onlyManagement {\r\n        _setLossLimitRatio(_newLossLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Internally set the loss limit ratio. Denominated\r\n     * in basis points. I.E. 1_000 == 10%.\r\n     * @param _newLossLimitRatio The new loss limit ratio.\r\n     */\r\n    function _setLossLimitRatio(uint256 _newLossLimitRatio) internal {\r\n        require(_newLossLimitRatio < MAX_BPS, \"!loss limit\");\r\n        _lossLimitRatio = _newLossLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Turns the healthcheck on and off.\r\n     * @dev If turned off the next report will auto turn it back on.\r\n     * @param _doHealthCheck Bool if healthCheck should be done.\r\n     */\r\n    function setDoHealthCheck(bool _doHealthCheck) public onlyManagement {\r\n        doHealthCheck = _doHealthCheck;\r\n    }\r\n\r\n    /**\r\n     * @notice OVerrides the default {harvestAndReport} to include a healthcheck.\r\n     * @return _totalAssets New totalAssets post report.\r\n     */\r\n    function harvestAndReport()\r\n        external\r\n        override\r\n        onlySelf\r\n        returns (uint256 _totalAssets)\r\n    {\r\n        // Let the strategy report.\r\n        _totalAssets = _harvestAndReport();\r\n\r\n        // Run the healthcheck on the amount returned.\r\n        _executeHealthCheck(_totalAssets);\r\n    }\r\n\r\n    /**\r\n     * @dev To be called during a report to make sure the profit\r\n     * or loss being recorded is within the acceptable bound.\r\n     *\r\n     * @param _newTotalAssets The amount that will be reported.\r\n     */\r\n    function _executeHealthCheck(uint256 _newTotalAssets) internal virtual {\r\n        if (!doHealthCheck) {\r\n            doHealthCheck = true;\r\n            return;\r\n        }\r\n\r\n        // Get the current total assets from the implementation.\r\n        uint256 currentTotalAssets = TokenizedStrategy.totalAssets();\r\n\r\n        if (_newTotalAssets > currentTotalAssets) {\r\n            require(\r\n                ((_newTotalAssets - currentTotalAssets) <=\r\n                    (currentTotalAssets * _profitLimitRatio) / MAX_BPS),\r\n                \"healthCheck\"\r\n            );\r\n        } else if (currentTotalAssets > _newTotalAssets) {\r\n            require(\r\n                (currentTotalAssets - _newTotalAssets <=\r\n                    ((currentTotalAssets * _lossLimitRatio) / MAX_BPS)),\r\n                \"healthCheck\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    enum Rounding {\r\n        Down, // Toward negative infinity\r\n        Up, // Toward infinity\r\n        Zero // Toward zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds up instead\r\n     * of rounding down.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\r\n     * with further edits by Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod0 := mul(x, y)\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            require(denominator > prod1, \"Math: mulDiv overflow\");\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\r\n            // See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\r\n            uint256 twos = denominator & (~denominator + 1);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\r\n            // in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, rounded down, of a positive value.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\n/**\r\n * @title Base4626Compounder\r\n * @dev Can be used to make a simple strategy that compounds\r\n *   rewards for any 4626 vault.\r\n */\r\ncontract Base4626Compounder is BaseHealthCheck {\r\n    using SafeERC20 for ERC20;\r\n\r\n    IStrategy public immutable vault;\r\n\r\n    constructor(\r\n        address _asset,\r\n        string memory _name,\r\n        address _vault\r\n    ) BaseHealthCheck(_asset, _name) {\r\n        require(IStrategy(_vault).asset() == _asset, \"wrong vault\");\r\n        vault = IStrategy(_vault);\r\n\r\n        asset.safeApprove(_vault, type(uint256).max);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                NEEDED TO BE OVERRIDDEN BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Should deploy up to '_amount' of 'asset' in the yield source.\r\n     *\r\n     * This function is called at the end of a {deposit} or {mint}\r\n     * call. Meaning that unless a whitelist is implemented it will\r\n     * be entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should attempt\r\n     * to deposit in the yield source.\r\n     */\r\n    function _deployFunds(uint256 _amount) internal virtual override {\r\n        vault.deposit(_amount, address(this));\r\n        _stake();\r\n    }\r\n\r\n    /**\r\n     * @dev Will attempt to free the '_amount' of 'asset'.\r\n     *\r\n     * The amount of 'asset' that is already loose has already\r\n     * been accounted for.\r\n     *\r\n     * This function is called during {withdraw} and {redeem} calls.\r\n     * Meaning that unless a whitelist is implemented it will be\r\n     * entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * Should not rely on asset.balanceOf(address(this)) calls other than\r\n     * for diff accounting purposes.\r\n     *\r\n     * Any difference between `_amount` and what is actually freed will be\r\n     * counted as a loss and passed on to the withdrawer. This means\r\n     * care should be taken in times of illiquidity. It may be better to revert\r\n     * if withdraws are simply illiquid so not to realize incorrect losses.\r\n     *\r\n     * @param _amount, The amount of 'asset' to be freed.\r\n     */\r\n    function _freeFunds(uint256 _amount) internal virtual override {\r\n        uint256 shares = vault.convertToShares(_amount);\r\n\r\n        uint256 vaultBalance = balanceOfVault();\r\n        if (shares > vaultBalance) {\r\n            unchecked {\r\n                _unStake(shares - vaultBalance);\r\n            }\r\n            shares = Math.min(shares, balanceOfVault());\r\n        }\r\n\r\n        vault.redeem(shares, address(this), address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to harvest all rewards, redeploy any idle\r\n     * funds and return an accurate accounting of all funds currently\r\n     * held by the Strategy.\r\n     *\r\n     * This should do any needed harvesting, rewards selling, accrual,\r\n     * redepositing etc. to get the most accurate view of current assets.\r\n     *\r\n     * NOTE: All applicable assets including loose assets should be\r\n     * accounted for in this function.\r\n     *\r\n     * Care should be taken when relying on oracles or swap values rather\r\n     * than actual amounts as all Strategy profit/loss accounting will\r\n     * be done based on this returned value.\r\n     *\r\n     * This can still be called post a shutdown, a strategist can check\r\n     * `TokenizedStrategy.isShutdown()` to decide if funds should be\r\n     * redeployed or simply realize any profits/losses.\r\n     *\r\n     * @return _totalAssets A trusted and accurate account for the total\r\n     * amount of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function _harvestAndReport()\r\n        internal\r\n        virtual\r\n        override\r\n        returns (uint256 _totalAssets)\r\n    {\r\n        // Claim and sell any rewards.\r\n        _claimAndSellRewards();\r\n\r\n        // Return total balance\r\n        _totalAssets = balanceOfAsset() + valueOfVault();\r\n    }\r\n\r\n    /**\r\n     * @dev Override to stake loose vault tokens after they\r\n     *   are deposited to the `vault`.\r\n     */\r\n    function _stake() internal virtual {}\r\n\r\n    /**\r\n     * @dev If vault tokens are staked, override to unstake them before\r\n     *   any withdraw or redeems.\r\n     * @param _amount The amount of vault tokens to unstake.\r\n     */\r\n    function _unStake(uint256 _amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Called during reports to do any harvesting of rewards needed.\r\n     */\r\n    function _claimAndSellRewards() internal virtual {}\r\n\r\n    /**\r\n     * @notice Return the current loose balance of this strategies `asset`.\r\n     */\r\n    function balanceOfAsset() public view virtual returns (uint256) {\r\n        return asset.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Return the current balance of the strategies vault shares.\r\n     */\r\n    function balanceOfVault() public view virtual returns (uint256) {\r\n        return vault.balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice If the vaults tokens are staked. To override and return the\r\n     *  amount of vault tokens the strategy has staked.\r\n     */\r\n    function balanceOfStake() public view virtual returns (uint256) {}\r\n\r\n    /**\r\n     * @notice The full value denominated in `asset` of the strategies vault\r\n     *   tokens held both in the contract and staked.\r\n     */\r\n    function valueOfVault() public view virtual returns (uint256) {\r\n        return vault.convertToAssets(balanceOfVault() + balanceOfStake());\r\n    }\r\n\r\n    /**\r\n     * @notice The max amount of `asset` than can be redeemed from the vault.\r\n     * @dev If the vault tokens are staked this needs to include the\r\n     *  vault.maxRedeem(stakingContract) to be accurate.\r\n     *\r\n     *  NOTE: This should use vault.convertToAssets(vault.maxRedeem(address));\r\n     *    rather than vault.maxWithdraw(address);\r\n     */\r\n    function vaultsMaxWithdraw() public view virtual returns (uint256) {\r\n        return vault.convertToAssets(vault.maxRedeem(address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that an address can deposit.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any deposit or mints to enforce\r\n     * any limits desired by the strategist. This can be used for either a\r\n     * traditional deposit limit or for implementing a whitelist etc.\r\n     *\r\n     *   EX:\r\n     *      if(isAllowed[_owner]) return super.availableDepositLimit(_owner);\r\n     *\r\n     * This does not need to take into account any conversion rates\r\n     * from shares to assets. But should know that any non max uint256\r\n     * amounts may be converted to shares. So it is recommended to keep\r\n     * custom amounts low enough as not to cause overflow when multiplied\r\n     * by `totalSupply`.\r\n     *\r\n     * @param . The address that is depositing into the strategy.\r\n     * @return . The available amount the `_owner` can deposit in terms of `asset`\r\n     */\r\n    function availableDepositLimit(\r\n        address\r\n    ) public view virtual override returns (uint256) {\r\n        // Return the max amount the vault will allow for deposits.\r\n        return vault.maxDeposit(address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that can be withdrawn.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any withdraw or redeem to enforce\r\n     * any limits desired by the strategist. This can be used for illiquid\r\n     * or sandwichable strategies. It should never be lower than `totalIdle`.\r\n     *\r\n     *   EX:\r\n     *       return TokenIzedStrategy.totalIdle();\r\n     *\r\n     * This does not need to take into account the `_owner`'s share balance\r\n     * or conversion rates from shares to assets.\r\n     *\r\n     * @param . The address that is withdrawing from the strategy.\r\n     * @return . The available amount that can be withdrawn in terms of `asset`\r\n     */\r\n    function availableWithdrawLimit(\r\n        address\r\n    ) public view virtual override returns (uint256) {\r\n        // Return the loose balance of asset and the max we can withdraw from the vault\r\n        return balanceOfAsset() + vaultsMaxWithdraw();\r\n    }\r\n\r\n    /**\r\n     * @dev Optional function for a strategist to override that will\r\n     * allow management to manually withdraw deployed funds from the\r\n     * yield source if a strategy is shutdown.\r\n     *\r\n     * This should attempt to free `_amount`, noting that `_amount` may\r\n     * be more than is currently deployed.\r\n     *\r\n     * NOTE: This will not realize any profits or losses. A separate\r\n     * {report} will be needed in order to record any profit/loss. If\r\n     * a report may need to be called after a shutdown it is important\r\n     * to check if the strategy is shutdown during {_harvestAndReport}\r\n     * so that it does not simply re-deploy all funds that had been freed.\r\n     *\r\n     * EX:\r\n     *   if(freeAsset > 0 && !TokenizedStrategy.isShutdown()) {\r\n     *       depositFunds...\r\n     *    }\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function _emergencyWithdraw(uint256 _amount) internal virtual override {\r\n        _freeFunds(Math.min(_amount, vaultsMaxWithdraw()));\r\n    }\r\n}\r\n\r\n// Math library from https://github.com/ajna-finance/ajna-core/blob/master/src/libraries/internal/Maths.sol\r\n\r\n/**\r\n    @title  Maths library\r\n    @notice Internal library containing common maths.\r\n */\r\nlibrary Maths {\r\n    uint256 internal constant WAD = 1e18;\r\n    uint256 internal constant RAY = 1e27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y + WAD / 2) / WAD;\r\n    }\r\n\r\n    function floorWmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y) / WAD;\r\n    }\r\n\r\n    function ceilWmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y + WAD - 1) / WAD;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * WAD + y / 2) / y;\r\n    }\r\n\r\n    function floorWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * WAD) / y;\r\n    }\r\n\r\n    function ceilWdiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * WAD + y - 1) / y;\r\n    }\r\n\r\n    function ceilDiv(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x + y - 1) / y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function wad(uint256 x) internal pure returns (uint256) {\r\n        return x * WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256) {\r\n        return (x * y + RAY / 2) / RAY;\r\n    }\r\n\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n\r\n    /*************************/\r\n    /*** Integer Functions ***/\r\n    /*************************/\r\n\r\n    function maxInt(int256 x, int256 y) internal pure returns (int256) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function minInt(int256 x, int256 y) internal pure returns (int256) {\r\n        return x <= y ? x : y;\r\n    }\r\n}\r\n\r\ncontract Governance {\r\n    /// @notice Emitted when the governance address is updated.\r\n    event GovernanceTransferred(\r\n        address indexed previousGovernance,\r\n        address indexed newGovernance\r\n    );\r\n\r\n    modifier onlyGovernance() {\r\n        _checkGovernance();\r\n        _;\r\n    }\r\n\r\n    /// @notice Checks if the msg sender is the governance.\r\n    function _checkGovernance() internal view virtual {\r\n        require(governance == msg.sender, \"!governance\");\r\n    }\r\n\r\n    /// @notice Address that can set the default base fee and provider\r\n    address public governance;\r\n\r\n    constructor(address _governance) {\r\n        governance = _governance;\r\n\r\n        emit GovernanceTransferred(address(0), _governance);\r\n    }\r\n\r\n    /**\r\n     * @notice Sets a new address as the governance of the contract.\r\n     * @dev Throws if the caller is not current governance.\r\n     * @param _newGovernance The new governance address.\r\n     */\r\n    function transferGovernance(\r\n        address _newGovernance\r\n    ) external virtual onlyGovernance {\r\n        require(_newGovernance != address(0), \"ZERO ADDRESS\");\r\n        address oldGovernance = governance;\r\n        governance = _newGovernance;\r\n\r\n        emit GovernanceTransferred(oldGovernance, _newGovernance);\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\ninterface ITaker {\r\n    function auctionTakeCallback(\r\n        bytes32 _auctionId,\r\n        address _sender,\r\n        uint256 _amountTaken,\r\n        uint256 _amountNeeded,\r\n        bytes calldata _data\r\n    ) external;\r\n}\r\n\r\n/// @notice Interface that the optional `hook` contract should implement if the non-standard logic is desired.\r\ninterface IHook {\r\n    function kickable(address _fromToken) external view returns (uint256);\r\n\r\n    function auctionKicked(address _fromToken) external returns (uint256);\r\n\r\n    function preTake(\r\n        address _fromToken,\r\n        uint256 _amountToTake,\r\n        uint256 _amountToPay\r\n    ) external;\r\n\r\n    function postTake(\r\n        address _toToken,\r\n        uint256 _amountTaken,\r\n        uint256 _amountPayed\r\n    ) external;\r\n}\r\n\r\n/**\r\n *   @title Auction\r\n *   @author yearn.fi\r\n *   @notice General use dutch auction contract for token sales.\r\n */\r\ncontract Auction is Governance, ReentrancyGuard {\r\n    using SafeERC20 for ERC20;\r\n\r\n    /// @notice Emitted when a new auction is enabled\r\n    event AuctionEnabled(\r\n        bytes32 auctionId,\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed auctionAddress\r\n    );\r\n\r\n    /// @notice Emitted when an auction is disabled.\r\n    event AuctionDisabled(\r\n        bytes32 auctionId,\r\n        address indexed from,\r\n        address indexed to,\r\n        address indexed auctionAddress\r\n    );\r\n\r\n    /// @notice Emitted when auction has been kicked.\r\n    event AuctionKicked(bytes32 auctionId, uint256 available);\r\n\r\n    /// @notice Emitted when any amount of an active auction was taken.\r\n    event AuctionTaken(\r\n        bytes32 auctionId,\r\n        uint256 amountTaken,\r\n        uint256 amountLeft\r\n    );\r\n\r\n    /// @dev Store address and scaler in one slot.\r\n    struct TokenInfo {\r\n        address tokenAddress;\r\n        uint96 scaler;\r\n    }\r\n\r\n    /// @notice Store all the auction specific information.\r\n    struct AuctionInfo {\r\n        TokenInfo fromInfo;\r\n        uint96 kicked;\r\n        address receiver;\r\n        uint128 initialAvailable;\r\n        uint128 currentAvailable;\r\n    }\r\n\r\n    /// @notice Store the hook address and each flag in one slot.\r\n    struct Hook {\r\n        address hook;\r\n        bool kickable;\r\n        bool kick;\r\n        bool preTake;\r\n        bool postTake;\r\n    }\r\n\r\n    uint256 internal constant WAD = 1e18;\r\n\r\n    /// @notice Used for the price decay.\r\n    uint256 internal constant MINUTE_HALF_LIFE =\r\n        0.988514020352896135_356867505 * 1e27; // 0.5^(1/60)\r\n\r\n    /// @notice Struct to hold the info for `want`.\r\n    TokenInfo internal wantInfo;\r\n\r\n    /// @notice Contract to call during write functions.\r\n    Hook internal hook_;\r\n\r\n    /// @notice The amount to start the auction at.\r\n    uint256 public startingPrice;\r\n\r\n    /// @notice The time that each auction lasts.\r\n    uint256 public auctionLength;\r\n\r\n    /// @notice The minimum time to wait between auction 'kicks'.\r\n    uint256 public auctionCooldown;\r\n\r\n    /// @notice Mapping from an auction ID to its struct.\r\n    mapping(bytes32 => AuctionInfo) public auctions;\r\n\r\n    /// @notice Array of all the enabled auction for this contract.\r\n    bytes32[] public enabledAuctions;\r\n\r\n    constructor() Governance(msg.sender) {}\r\n\r\n    /**\r\n     * @notice Initializes the Auction contract with initial parameters.\r\n     * @param _want Address this auction is selling to.\r\n     * @param _hook Address of the hook contract (optional).\r\n     * @param _governance Address of the contract governance.\r\n     * @param _auctionLength Duration of each auction in seconds.\r\n     * @param _auctionCooldown Cooldown period between auctions in seconds.\r\n     * @param _startingPrice Starting price for each auction.\r\n     */\r\n    function initialize(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown,\r\n        uint256 _startingPrice\r\n    ) external virtual {\r\n        require(auctionLength == 0, \"initialized\");\r\n        require(_want != address(0), \"ZERO ADDRESS\");\r\n        require(_auctionLength != 0, \"length\");\r\n        require(_auctionLength < _auctionCooldown, \"cooldown\");\r\n        require(_startingPrice != 0, \"starting price\");\r\n\r\n        // Cannot have more than 18 decimals.\r\n        uint256 decimals = ERC20(_want).decimals();\r\n        require(decimals <= 18, \"unsupported decimals\");\r\n\r\n        // Set variables\r\n        wantInfo = TokenInfo({\r\n            tokenAddress: _want,\r\n            scaler: uint96(WAD / 10 ** decimals)\r\n        });\r\n\r\n        // If we are using a hook.\r\n        if (_hook != address(0)) {\r\n            // All flags default to true.\r\n            hook_ = Hook({\r\n                hook: _hook,\r\n                kickable: true,\r\n                kick: true,\r\n                preTake: true,\r\n                postTake: true\r\n            });\r\n        }\r\n\r\n        governance = _governance;\r\n        auctionLength = _auctionLength;\r\n        auctionCooldown = _auctionCooldown;\r\n        startingPrice = _startingPrice;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                         VIEW METHODS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Get the address of this auctions want token.\r\n     * @return . The want token.\r\n     */\r\n    function want() public view virtual returns (address) {\r\n        return wantInfo.tokenAddress;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the address of the hook if any.\r\n     * @return . The hook.\r\n     */\r\n    function hook() external view virtual returns (address) {\r\n        return hook_.hook;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the current status of which hooks are being used.\r\n     * @return . If the kickable hook is used.\r\n     * @return . If the kick hook is used.\r\n     * @return . If the preTake hook is used.\r\n     * @return . If the postTake hook is used.\r\n     */\r\n    function getHookFlags()\r\n        external\r\n        view\r\n        virtual\r\n        returns (bool, bool, bool, bool)\r\n    {\r\n        Hook memory _hook;\r\n        return (_hook.kickable, _hook.kick, _hook.preTake, _hook.postTake);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the length of the enabled auctions array.\r\n     */\r\n    function numberOfEnabledAuctions() external view virtual returns (uint256) {\r\n        return enabledAuctions.length;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the unique auction identifier.\r\n     * @param _from The address of the token to sell.\r\n     * @return bytes32 A unique auction identifier.\r\n     */\r\n    function getAuctionId(address _from) public view virtual returns (bytes32) {\r\n        return keccak256(abi.encodePacked(_from, want(), address(this)));\r\n    }\r\n\r\n    /**\r\n     * @notice Retrieves information about a specific auction.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return _from The address of the token to sell.\r\n     * @return _to The address of the token to buy.\r\n     * @return _kicked The timestamp of the last kick.\r\n     * @return _available The current available amount for the auction.\r\n     */\r\n    function auctionInfo(\r\n        bytes32 _auctionId\r\n    )\r\n        public\r\n        view\r\n        virtual\r\n        returns (\r\n            address _from,\r\n            address _to,\r\n            uint256 _kicked,\r\n            uint256 _available\r\n        )\r\n    {\r\n        AuctionInfo memory auction = auctions[_auctionId];\r\n\r\n        return (\r\n            auction.fromInfo.tokenAddress,\r\n            want(),\r\n            auction.kicked,\r\n            auction.kicked + auctionLength > block.timestamp\r\n                ? auction.currentAvailable\r\n                : 0\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Get the pending amount available for the next auction.\r\n     * @dev Defaults to the auctions balance of the from token if no hook.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return uint256 The amount that can be kicked into the auction.\r\n     */\r\n    function kickable(\r\n        bytes32 _auctionId\r\n    ) external view virtual returns (uint256) {\r\n        // If not enough time has passed then `kickable` is 0.\r\n        if (auctions[_auctionId].kicked + auctionCooldown > block.timestamp) {\r\n            return 0;\r\n        }\r\n\r\n        // Check if we have a hook to call.\r\n        Hook memory _hook = hook_;\r\n        if (_hook.kickable) {\r\n            // If so default to the hooks logic.\r\n            return\r\n                IHook(_hook.hook).kickable(\r\n                    auctions[_auctionId].fromInfo.tokenAddress\r\n                );\r\n        } else {\r\n            // Else just use the full balance of this contract.\r\n            return\r\n                ERC20(auctions[_auctionId].fromInfo.tokenAddress).balanceOf(\r\n                    address(this)\r\n                );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of `want` needed to buy a specific amount of `from`.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _amountToTake The amount of `from` to take in the auction.\r\n     * @return . The amount of `want` needed to fulfill the take amount.\r\n     */\r\n    function getAmountNeeded(\r\n        bytes32 _auctionId,\r\n        uint256 _amountToTake\r\n    ) external view virtual returns (uint256) {\r\n        return\r\n            _getAmountNeeded(\r\n                auctions[_auctionId],\r\n                _amountToTake,\r\n                block.timestamp\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the amount of `want` needed to buy a specific amount of `from` at a specific timestamp.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _amountToTake The amount `from` to take in the auction.\r\n     * @param _timestamp The specific timestamp for calculating the amount needed.\r\n     * @return . The amount of `want` needed to fulfill the take amount.\r\n     */\r\n    function getAmountNeeded(\r\n        bytes32 _auctionId,\r\n        uint256 _amountToTake,\r\n        uint256 _timestamp\r\n    ) external view virtual returns (uint256) {\r\n        return\r\n            _getAmountNeeded(auctions[_auctionId], _amountToTake, _timestamp);\r\n    }\r\n\r\n    /**\r\n     * @dev Return the amount of `want` needed to buy `_amountToTake`.\r\n     */\r\n    function _getAmountNeeded(\r\n        AuctionInfo memory _auction,\r\n        uint256 _amountToTake,\r\n        uint256 _timestamp\r\n    ) internal view virtual returns (uint256) {\r\n        return\r\n            // Scale _amountToTake to 1e18\r\n            (_amountToTake *\r\n                _auction.fromInfo.scaler *\r\n                // Price is always 1e18\r\n                _price(\r\n                    _auction.kicked,\r\n                    _auction.initialAvailable * _auction.fromInfo.scaler,\r\n                    _timestamp\r\n                )) /\r\n            1e18 /\r\n            // Scale back down to want.\r\n            wantInfo.scaler;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the price of the auction at the current timestamp.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return . The price of the auction.\r\n     */\r\n    function price(bytes32 _auctionId) external view virtual returns (uint256) {\r\n        return price(_auctionId, block.timestamp);\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the price of the auction at a specific timestamp.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _timestamp The specific timestamp for calculating the price.\r\n     * @return . The price of the auction.\r\n     */\r\n    function price(\r\n        bytes32 _auctionId,\r\n        uint256 _timestamp\r\n    ) public view virtual returns (uint256) {\r\n        // Get unscaled price and scale it down.\r\n        return\r\n            _price(\r\n                auctions[_auctionId].kicked,\r\n                auctions[_auctionId].initialAvailable *\r\n                    auctions[_auctionId].fromInfo.scaler,\r\n                _timestamp\r\n            ) / wantInfo.scaler;\r\n    }\r\n\r\n    /**\r\n     * @dev Internal function to calculate the scaled price based on auction parameters.\r\n     * @param _kicked The timestamp the auction was kicked.\r\n     * @param _available The initial available amount scaled 1e18.\r\n     * @param _timestamp The specific timestamp for calculating the price.\r\n     * @return . The calculated price scaled to 1e18.\r\n     */\r\n    function _price(\r\n        uint256 _kicked,\r\n        uint256 _available,\r\n        uint256 _timestamp\r\n    ) internal view virtual returns (uint256) {\r\n        if (_available == 0) return 0;\r\n\r\n        uint256 secondsElapsed = _timestamp - _kicked;\r\n\r\n        if (secondsElapsed > auctionLength) return 0;\r\n\r\n        // Exponential decay from https://github.com/ajna-finance/ajna-core/blob/master/src/libraries/helpers/PoolHelper.sol\r\n        uint256 hoursComponent = 1e27 >> (secondsElapsed / 3600);\r\n        uint256 minutesComponent = Maths.rpow(\r\n            MINUTE_HALF_LIFE,\r\n            (secondsElapsed % 3600) / 60\r\n        );\r\n        uint256 initialPrice = Maths.wdiv(startingPrice * 1e18, _available);\r\n\r\n        return\r\n            (initialPrice * Maths.rmul(hoursComponent, minutesComponent)) /\r\n            1e27;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            SETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Enables a new auction.\r\n     * @dev Uses governance as the receiver.\r\n     * @param _from The address of the token to be auctioned.\r\n     * @return . The unique identifier of the enabled auction.\r\n     */\r\n    function enable(address _from) external virtual returns (bytes32) {\r\n        return enable(_from, msg.sender);\r\n    }\r\n\r\n    /**\r\n     * @notice Enables a new auction.\r\n     * @param _from The address of the token to be auctioned.\r\n     * @param _receiver The address that will receive the funds in the auction.\r\n     * @return _auctionId The unique identifier of the enabled auction.\r\n     */\r\n    function enable(\r\n        address _from,\r\n        address _receiver\r\n    ) public virtual onlyGovernance returns (bytes32 _auctionId) {\r\n        address _want = want();\r\n        require(_from != address(0) && _from != _want, \"ZERO ADDRESS\");\r\n        require(\r\n            _receiver != address(0) && _receiver != address(this),\r\n            \"receiver\"\r\n        );\r\n        // Cannot have more than 18 decimals.\r\n        uint256 decimals = ERC20(_from).decimals();\r\n        require(decimals <= 18, \"unsupported decimals\");\r\n\r\n        // Calculate the id.\r\n        _auctionId = getAuctionId(_from);\r\n\r\n        require(\r\n            auctions[_auctionId].fromInfo.tokenAddress == address(0),\r\n            \"already enabled\"\r\n        );\r\n\r\n        // Store all needed info.\r\n        auctions[_auctionId].fromInfo = TokenInfo({\r\n            tokenAddress: _from,\r\n            scaler: uint96(WAD / 10 ** decimals)\r\n        });\r\n        auctions[_auctionId].receiver = _receiver;\r\n\r\n        // Add to the array.\r\n        enabledAuctions.push(_auctionId);\r\n\r\n        emit AuctionEnabled(_auctionId, _from, _want, address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Disables an existing auction.\r\n     * @dev Only callable by governance.\r\n     * @param _from The address of the token being sold.\r\n     */\r\n    function disable(address _from) external virtual {\r\n        disable(_from, 0);\r\n    }\r\n\r\n    /**\r\n     * @notice Disables an existing auction.\r\n     * @dev Only callable by governance.\r\n     * @param _from The address of the token being sold.\r\n     * @param _index The index the auctionId is at in the array.\r\n     */\r\n    function disable(\r\n        address _from,\r\n        uint256 _index\r\n    ) public virtual onlyGovernance {\r\n        bytes32 _auctionId = getAuctionId(_from);\r\n\r\n        // Make sure the auction was enabled.\r\n        require(\r\n            auctions[_auctionId].fromInfo.tokenAddress != address(0),\r\n            \"not enabled\"\r\n        );\r\n\r\n        // Remove the struct.\r\n        delete auctions[_auctionId];\r\n\r\n        // Remove the auction ID from the array.\r\n        bytes32[] memory _enabledAuctions = enabledAuctions;\r\n        if (_enabledAuctions[_index] != _auctionId) {\r\n            // If the _index given is not the id find it.\r\n            for (uint256 i = 0; i < _enabledAuctions.length; ++i) {\r\n                if (_enabledAuctions[i] == _auctionId) {\r\n                    _index = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Move the id to the last spot if not there.\r\n        if (_index < _enabledAuctions.length - 1) {\r\n            _enabledAuctions[_index] = _enabledAuctions[\r\n                _enabledAuctions.length - 1\r\n            ];\r\n            // Update the array.\r\n            enabledAuctions = _enabledAuctions;\r\n        }\r\n\r\n        // Pop the id off the array.\r\n        enabledAuctions.pop();\r\n\r\n        emit AuctionDisabled(_auctionId, _from, want(), address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice Set the flags to be used with hook.\r\n     * @param _kickable If the kickable hook should be used.\r\n     * @param _kick If the kick hook should be used.\r\n     * @param _preTake If the preTake hook should be used.\r\n     * @param _postTake If the postTake should be used.\r\n     */\r\n    function setHookFlags(\r\n        bool _kickable,\r\n        bool _kick,\r\n        bool _preTake,\r\n        bool _postTake\r\n    ) external virtual onlyGovernance {\r\n        address _hook = hook_.hook;\r\n        require(_hook != address(0), \"no hook set\");\r\n\r\n        hook_ = Hook({\r\n            hook: _hook,\r\n            kickable: _kickable,\r\n            kick: _kick,\r\n            preTake: _preTake,\r\n            postTake: _postTake\r\n        });\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                      PARTICIPATE IN AUCTION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Kicks off an auction, updating its status and making funds available for bidding.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return available The available amount for bidding on in the auction.\r\n     */\r\n    function kick(\r\n        bytes32 _auctionId\r\n    ) external virtual nonReentrant returns (uint256 available) {\r\n        address _fromToken = auctions[_auctionId].fromInfo.tokenAddress;\r\n        require(_fromToken != address(0), \"not enabled\");\r\n        require(\r\n            block.timestamp > auctions[_auctionId].kicked + auctionCooldown,\r\n            \"too soon\"\r\n        );\r\n\r\n        Hook memory _hook = hook_;\r\n        // Use hook if defined.\r\n        if (_hook.kick) {\r\n            available = IHook(_hook.hook).auctionKicked(_fromToken);\r\n        } else {\r\n            // Else just use current balance.\r\n            available = ERC20(_fromToken).balanceOf(address(this));\r\n        }\r\n\r\n        require(available != 0, \"nothing to kick\");\r\n\r\n        // Update the auctions status.\r\n        auctions[_auctionId].kicked = uint96(block.timestamp);\r\n        auctions[_auctionId].initialAvailable = uint128(available);\r\n        auctions[_auctionId].currentAvailable = uint128(available);\r\n\r\n        emit AuctionKicked(_auctionId, available);\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction.\r\n     * @dev Defaults to taking the full amount and sending to the msg sender.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @return . The amount of fromToken taken in the auction.\r\n     */\r\n    function take(bytes32 _auctionId) external virtual returns (uint256) {\r\n        return _take(_auctionId, type(uint256).max, msg.sender, new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction with a specified maximum amount.\r\n     * @dev Uses the sender's address as the receiver.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _maxAmount The maximum amount of fromToken to take in the auction.\r\n     * @return . The amount of fromToken taken in the auction.\r\n     */\r\n    function take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount\r\n    ) external virtual returns (uint256) {\r\n        return _take(_auctionId, _maxAmount, msg.sender, new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _maxAmount The maximum amount of fromToken to take in the auction.\r\n     * @param _receiver The address that will receive the fromToken.\r\n     * @return _amountTaken The amount of fromToken taken in the auction.\r\n     */\r\n    function take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount,\r\n        address _receiver\r\n    ) external virtual returns (uint256) {\r\n        return _take(_auctionId, _maxAmount, _receiver, new bytes(0));\r\n    }\r\n\r\n    /**\r\n     * @notice Take the token being sold in a live auction.\r\n     * @param _auctionId The unique identifier of the auction.\r\n     * @param _maxAmount The maximum amount of fromToken to take in the auction.\r\n     * @param _receiver The address that will receive the fromToken.\r\n     * @param _data The data signify the callback should be used and sent with it.\r\n     * @return _amountTaken The amount of fromToken taken in the auction.\r\n     */\r\n    function take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount,\r\n        address _receiver,\r\n        bytes calldata _data\r\n    ) external virtual returns (uint256) {\r\n        return _take(_auctionId, _maxAmount, _receiver, _data);\r\n    }\r\n\r\n    /// @dev Implements the take of the auction.\r\n    function _take(\r\n        bytes32 _auctionId,\r\n        uint256 _maxAmount,\r\n        address _receiver,\r\n        bytes memory _data\r\n    ) internal virtual nonReentrant returns (uint256 _amountTaken) {\r\n        AuctionInfo memory auction = auctions[_auctionId];\r\n        // Make sure the auction is active.\r\n        require(\r\n            auction.kicked + auctionLength >= block.timestamp,\r\n            \"not kicked\"\r\n        );\r\n\r\n        // Max amount that can be taken.\r\n        _amountTaken = auction.currentAvailable > _maxAmount\r\n            ? _maxAmount\r\n            : auction.currentAvailable;\r\n\r\n        // Get the amount needed\r\n        uint256 needed = _getAmountNeeded(\r\n            auction,\r\n            _amountTaken,\r\n            block.timestamp\r\n        );\r\n\r\n        require(needed != 0, \"zero needed\");\r\n\r\n        // How much is left in this auction.\r\n        uint256 left;\r\n        unchecked {\r\n            left = auction.currentAvailable - _amountTaken;\r\n        }\r\n        auctions[_auctionId].currentAvailable = uint128(left);\r\n\r\n        Hook memory _hook = hook_;\r\n        if (_hook.preTake) {\r\n            // Use hook if defined.\r\n            IHook(_hook.hook).preTake(\r\n                auction.fromInfo.tokenAddress,\r\n                _amountTaken,\r\n                needed\r\n            );\r\n        }\r\n\r\n        // Send `from`.\r\n        ERC20(auction.fromInfo.tokenAddress).safeTransfer(\r\n            _receiver,\r\n            _amountTaken\r\n        );\r\n\r\n        // If the caller has specified data.\r\n        if (_data.length != 0) {\r\n            // Do the callback.\r\n            ITaker(_receiver).auctionTakeCallback(\r\n                _auctionId,\r\n                msg.sender,\r\n                _amountTaken,\r\n                needed,\r\n                _data\r\n            );\r\n        }\r\n\r\n        // Cache the want address.\r\n        address _want = want();\r\n\r\n        // Pull `want`.\r\n        ERC20(_want).safeTransferFrom(msg.sender, auction.receiver, needed);\r\n\r\n        // Post take hook if defined.\r\n        if (_hook.postTake) {\r\n            IHook(_hook.hook).postTake(_want, _amountTaken, needed);\r\n        }\r\n\r\n        emit AuctionTaken(_auctionId, _amountTaken, left);\r\n    }\r\n}\r\n\r\ncontract Clonable {\r\n    /// @notice Set to the address to auto clone from.\r\n    address public original;\r\n\r\n    /**\r\n     * @notice Clone the contracts default `original` contract.\r\n     * @return Address of the new Minimal Proxy clone.\r\n     */\r\n    function _clone() internal virtual returns (address) {\r\n        return _clone(original);\r\n    }\r\n\r\n    /**\r\n     * @notice Clone any `_original` contract.\r\n     * @return _newContract Address of the new Minimal Proxy clone.\r\n     */\r\n    function _clone(\r\n        address _original\r\n    ) internal virtual returns (address _newContract) {\r\n        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\r\n        bytes20 addressBytes = bytes20(_original);\r\n        assembly {\r\n            // EIP-1167 bytecode\r\n            let clone_code := mload(0x40)\r\n            mstore(\r\n                clone_code,\r\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\r\n            )\r\n            mstore(add(clone_code, 0x14), addressBytes)\r\n            mstore(\r\n                add(clone_code, 0x28),\r\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\r\n            )\r\n            _newContract := create(0, clone_code, 0x37)\r\n        }\r\n    }\r\n}\r\n\r\n/// @title AuctionFactory\r\n/// @notice Deploy a new Auction.\r\ncontract AuctionFactory is Clonable {\r\n    event DeployedNewAuction(address indexed auction, address indexed want);\r\n\r\n    /// @notice The time that each auction lasts.\r\n    uint256 public constant DEFAULT_AUCTION_LENGTH = 1 days;\r\n\r\n    /// @notice The minimum time to wait between auction 'kicks'.\r\n    uint256 public constant DEFAULT_AUCTION_COOLDOWN = 5 days;\r\n\r\n    /// @notice The amount to start the auction with.\r\n    uint256 public constant DEFAULT_STARTING_PRICE = 1_000_000;\r\n\r\n    /// @notice Full array of all auctions deployed through this factory.\r\n    address[] public auctions;\r\n\r\n    constructor() {\r\n        // Deploy the original\r\n        original = address(new Auction());\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(address _want) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                address(0),\r\n                msg.sender,\r\n                DEFAULT_AUCTION_LENGTH,\r\n                DEFAULT_AUCTION_COOLDOWN,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                msg.sender,\r\n                DEFAULT_AUCTION_LENGTH,\r\n                DEFAULT_AUCTION_COOLDOWN,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @param _governance Address allowed to enable and disable auctions.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                _governance,\r\n                DEFAULT_AUCTION_LENGTH,\r\n                DEFAULT_AUCTION_COOLDOWN,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @param _governance Address allowed to enable and disable auctions.\r\n     * @param _auctionLength Length of the auction in seconds.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                _governance,\r\n                _auctionLength,\r\n                DEFAULT_AUCTION_COOLDOWN,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @param _governance Address allowed to enable and disable auctions.\r\n     * @param _auctionLength Length of the auction in seconds.\r\n     * @param _auctionCooldown Minimum time period between kicks in seconds.\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                _governance,\r\n                _auctionLength,\r\n                _auctionCooldown,\r\n                DEFAULT_STARTING_PRICE\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @notice Creates a new auction contract.\r\n     * @param _want Address of the token users will bid with.\r\n     * @param _hook Address of the hook contract if any.\r\n     * @param _governance Address allowed to enable and disable auctions.\r\n     * @param _auctionLength Length of the auction in seconds.\r\n     * @param _auctionCooldown Minimum time period between kicks in seconds.\r\n     * @param _startingPrice Starting price for the auction (no decimals).\r\n     *  NOTE: The starting price should be without decimals (1k == 1_000).\r\n     * @return _newAuction Address of the newly created auction contract.\r\n     */\r\n    function createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown,\r\n        uint256 _startingPrice\r\n    ) external returns (address) {\r\n        return\r\n            _createNewAuction(\r\n                _want,\r\n                _hook,\r\n                _governance,\r\n                _auctionLength,\r\n                _auctionCooldown,\r\n                _startingPrice\r\n            );\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and initializes a new Auction\r\n     */\r\n    function _createNewAuction(\r\n        address _want,\r\n        address _hook,\r\n        address _governance,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown,\r\n        uint256 _startingPrice\r\n    ) internal returns (address _newAuction) {\r\n        _newAuction = _clone();\r\n\r\n        Auction(_newAuction).initialize(\r\n            _want,\r\n            _hook,\r\n            _governance,\r\n            _auctionLength,\r\n            _auctionCooldown,\r\n            _startingPrice\r\n        );\r\n\r\n        auctions.push(_newAuction);\r\n\r\n        emit DeployedNewAuction(_newAuction, _want);\r\n    }\r\n\r\n    /**\r\n     * @notice Get the full list of auctions deployed through this factory.\r\n     */\r\n    function getAllAuctions() external view returns (address[] memory) {\r\n        return auctions;\r\n    }\r\n\r\n    /**\r\n     * @notice Get the total number of auctions deployed through this factory.\r\n     */\r\n    function numberOfAuctions() external view returns (uint256) {\r\n        return auctions.length;\r\n    }\r\n}\r\n\r\n/**\r\n *   @title AuctionSwapper\r\n *   @author yearn.fi\r\n *   @dev Helper contract for a strategy to use dutch auctions for token sales.\r\n *\r\n *   This contract is meant to be inherited by a V3 strategy in order\r\n *   to easily integrate dutch auctions into a contract for token swaps.\r\n *\r\n *   The strategist will need to implement a way to call `_enableAuction`\r\n *   for an token pair they want to use, or a setter to manually set the\r\n *   `auction` contract.\r\n *\r\n *   The contract comes with all of the needed function to act as a `hook`\r\n *   contract for the specific auction contract with the ability to override\r\n *   any of the functions to implement custom hooks.\r\n *\r\n *   NOTE: If any hooks are not desired, the strategist should also\r\n *   implement a way to call the {setHookFlags} on the auction contract\r\n *   to avoid unnecessary gas for unused functions.\r\n */\r\ncontract AuctionSwapper {\r\n    using SafeERC20 for ERC20;\r\n\r\n    modifier onlyAuction() {\r\n        _isAuction();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Check the caller is the auction contract for hooks.\r\n     */\r\n    function _isAuction() internal view virtual {\r\n        require(msg.sender == auction, \"!auction\");\r\n    }\r\n\r\n    /// @notice The pre-deployed Auction factory for cloning.\r\n    address public constant auctionFactory =\r\n        0x4A14145C4977E18c719BB70E6FcBF8fBFF6F62d2;\r\n\r\n    /// @notice Address of the specific Auction this strategy uses.\r\n    address public auction;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    AUCTION STARTING AND STOPPING\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _enableAuction(\r\n        address _from,\r\n        address _want\r\n    ) internal virtual returns (bytes32) {\r\n        return _enableAuction(_from, _want, 1 days, 3 days, 1e6);\r\n    }\r\n\r\n    /**\r\n     * @dev Used to enable a new Auction to sell `_from` to `_want`.\r\n     *   If this is the first auction enabled it will deploy a new `auction`\r\n     *   contract to use from the factory.\r\n     *\r\n     * NOTE: This only supports one `_want` token per strategy.\r\n     *\r\n     * @param _from Token to sell\r\n     * @param _want Token to buy.\r\n     * @return .The auction ID.\r\n     */\r\n    function _enableAuction(\r\n        address _from,\r\n        address _want,\r\n        uint256 _auctionLength,\r\n        uint256 _auctionCooldown,\r\n        uint256 _startingPrice\r\n    ) internal virtual returns (bytes32) {\r\n        address _auction = auction;\r\n\r\n        // If this is the first auction.\r\n        if (_auction == address(0)) {\r\n            // Deploy a new auction\r\n            _auction = AuctionFactory(auctionFactory).createNewAuction(\r\n                _want,\r\n                address(this),\r\n                address(this),\r\n                _auctionLength,\r\n                _auctionCooldown,\r\n                _startingPrice\r\n            );\r\n            // Store it for future use.\r\n            auction = _auction;\r\n        } else {\r\n            // Can only use one `want` per auction contract.\r\n            require(Auction(_auction).want() == _want, \"wrong want\");\r\n        }\r\n\r\n        // Enable new auction for `_from` token.\r\n        return Auction(_auction).enable(_from);\r\n    }\r\n\r\n    /**\r\n     * @dev Disable an auction for a given token.\r\n     * @param _from The token that was being sold.\r\n     */\r\n    function _disableAuction(address _from) internal virtual {\r\n        Auction(auction).disable(_from);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        OPTIONAL AUCTION HOOKS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Return how much `_token` could currently be kicked into auction.\r\n     * @dev This can be overridden by a strategist to implement custom logic.\r\n     * @param _token Address of the `_from` token.\r\n     * @return . The amount of `_token` ready to be auctioned off.\r\n     */\r\n    function kickable(address _token) public view virtual returns (uint256) {\r\n        return ERC20(_token).balanceOf(address(this));\r\n    }\r\n\r\n    /**\r\n     * @dev To override if something other than just sending the loose balance\r\n     *  of `_token` to the auction is desired, such as accruing and and claiming rewards.\r\n     *\r\n     * @param _token Address of the token being auctioned off\r\n     */\r\n    function _auctionKicked(address _token) internal virtual returns (uint256) {\r\n        // Send any loose balance to the auction.\r\n        uint256 balance = ERC20(_token).balanceOf(address(this));\r\n        if (balance != 0) ERC20(_token).safeTransfer(auction, balance);\r\n        return ERC20(_token).balanceOf(auction);\r\n    }\r\n\r\n    /**\r\n     * @dev To override if something needs to be done before a take is completed.\r\n     *   This can be used if the auctioned token only will be freed up when a `take`\r\n     *   occurs.\r\n     * @param _token Address of the token being taken.\r\n     * @param _amountToTake Amount of `_token` needed.\r\n     * @param _amountToPay Amount of `want` that will be payed.\r\n     */\r\n    function _preTake(\r\n        address _token,\r\n        uint256 _amountToTake,\r\n        uint256 _amountToPay\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev To override if a post take action is desired.\r\n     *\r\n     * This could be used to re-deploy the bought token back into the yield source,\r\n     * or in conjunction with {_preTake} to check that the price sold at was within\r\n     * some allowed range.\r\n     *\r\n     * @param _token Address of the token that the strategy was sent.\r\n     * @param _amountTaken Amount of the from token taken.\r\n     * @param _amountPayed Amount of `_token` that was sent to the strategy.\r\n     */\r\n    function _postTake(\r\n        address _token,\r\n        uint256 _amountTaken,\r\n        uint256 _amountPayed\r\n    ) internal virtual {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            AUCTION HOOKS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice External hook for the auction to call during a `kick`.\r\n     * @dev Will call the internal version for the strategist to override.\r\n     * @param _token Token being kicked into auction.\r\n     * @return . The amount of `_token` to be auctioned off.\r\n     */\r\n    function auctionKicked(\r\n        address _token\r\n    ) external virtual onlyAuction returns (uint256) {\r\n        return _auctionKicked(_token);\r\n    }\r\n\r\n    /**\r\n     * @notice External hook for the auction to call before a `take`.\r\n     * @dev Will call the internal version for the strategist to override.\r\n     * @param _token Token being taken in the auction.\r\n     * @param _amountToTake The amount of `_token` to be sent to the taker.\r\n     * @param _amountToPay Amount of `want` that will be payed.\r\n     */\r\n    function preTake(\r\n        address _token,\r\n        uint256 _amountToTake,\r\n        uint256 _amountToPay\r\n    ) external virtual onlyAuction {\r\n        _preTake(_token, _amountToTake, _amountToPay);\r\n    }\r\n\r\n    /**\r\n     * @notice External hook for the auction to call after a `take` completed.\r\n     * @dev Will call the internal version for the strategist to override.\r\n     * @param _token The `want` token that was sent to the strategy.\r\n     * @param _amountTaken Amount of the from token taken.\r\n     * @param _amountPayed Amount of `_token` that was sent to the strategy.\r\n     */\r\n    function postTake(\r\n        address _token,\r\n        uint256 _amountTaken,\r\n        uint256 _amountPayed\r\n    ) external virtual onlyAuction {\r\n        _postTake(_token, _amountTaken, _amountPayed);\r\n    }\r\n}\r\n\r\ncontract SturdyLender is Base4626Compounder, AuctionSwapper {\r\n    // Mapping to be set by management for any reward tokens.\r\n    // This can be used to set different mins for different tokens\r\n    // or to set to uin256.max if selling a reward token is reverting\r\n    mapping(address => uint256) public minAmountToSellMapping;\r\n\r\n    constructor(\r\n        address _asset,\r\n        string memory _name,\r\n        address _vault\r\n    ) Base4626Compounder(_asset, _name, _vault) {}\r\n\r\n    function setAuction(address _auction) external onlyEmergencyAuthorized {\r\n        if (_auction != address(0)) {\r\n            require(Auction(_auction).want() == address(asset), \"wrong want\");\r\n        }\r\n        auction = _auction;\r\n    }\r\n\r\n    function _auctionKicked(\r\n        address _token\r\n    ) internal virtual override returns (uint256 _kicked) {\r\n        require(\r\n            _token != address(asset) && _token != address(vault),\r\n            \"!allowed\"\r\n        );\r\n        _kicked = super._auctionKicked(_token);\r\n        require(_kicked >= minAmountToSellMapping[_token], \"too little\");\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `minAmountToSellMapping` for a specific `_token`.\r\n     * @dev This can be used by management to adjust wether or not the\r\n     * _claimAndSellRewards() function will attempt to sell a specific\r\n     * reward token. This can be used if liquidity is to low, amounts\r\n     * are to low or any other reason that may cause reverts.\r\n     *\r\n     * @param _token The address of the token to adjust.\r\n     * @param _amount Min required amount to sell.\r\n     */\r\n    function setMinAmountToSellMapping(\r\n        address _token,\r\n        uint256 _amount\r\n    ) external onlyManagement {\r\n        minAmountToSellMapping[_token] = _amount;\r\n    }\r\n}\r\n\r\ninterface IBaseHealthCheck is IStrategy {\r\n    function doHealthCheck() external view returns (bool);\r\n\r\n    function profitLimitRatio() external view returns (uint256);\r\n\r\n    function lossLimitRatio() external view returns (uint256);\r\n\r\n    function setProfitLimitRatio(uint256 _newProfitLimitRatio) external;\r\n\r\n    function setLossLimitRatio(uint256 _newLossLimitRatio) external;\r\n\r\n    function setDoHealthCheck(bool _doHealthCheck) external;\r\n}\r\n\r\ninterface IBase4626Compounder is IBaseHealthCheck {\r\n    function vault() external view returns (address);\r\n\r\n    function balanceOfAsset() external view returns (uint256);\r\n\r\n    function balanceOfVault() external view returns (uint256);\r\n\r\n    function balanceOfStake() external view returns (uint256);\r\n\r\n    function valueOfVault() external view returns (uint256);\r\n\r\n    function vaultsMaxWithdraw() external view returns (uint256);\r\n}\r\n\r\ninterface IStrategyInterface is IBase4626Compounder {}\r\n\r\ninterface IAjnaRouter is IStrategyInterface {\r\n    function depositor() external view returns (address);\r\n    function setDepositor(address _depositor) external;\r\n}\r\n\r\ncontract SturdyLenderFactory {\r\n    /// @notice Revert message for when a strategy has already been deployed.\r\n    error AlreadyDeployed(address _strategy);\r\n\r\n    event NewSturdyLender(address indexed strategy, address indexed asset);\r\n\r\n    address public management;\r\n    address public performanceFeeRecipient;\r\n    address public keeper;\r\n\r\n    /// @notice Track the deployments. asset => pool => strategy\r\n    mapping(address => address) public deployments;\r\n\r\n    constructor(\r\n        address _management,\r\n        address _performanceFeeRecipient,\r\n        address _keeper\r\n    ) {\r\n        management = _management;\r\n        performanceFeeRecipient = _performanceFeeRecipient;\r\n        keeper = _keeper;\r\n    }\r\n\r\n    /**\r\n     * @notice Deploy a new Sturdy Lender.\r\n     * @dev This will set the msg.sender to all of the permissioned roles.\r\n     * @param _asset The underlying asset for the lender to use.\r\n     * @param _name The name for the lender to use.\r\n     * @return . The address of the new lender.\r\n     */\r\n    function newSturdyLender(\r\n        address _asset,\r\n        string memory _name,\r\n        address _vault\r\n    ) external returns (address) {\r\n        if (deployments[_vault] != address(0))\r\n            revert AlreadyDeployed(deployments[_vault]);\r\n        // We need to use the custom interface with the\r\n        // tokenized strategies available setters.\r\n        IStrategyInterface newStrategy = IStrategyInterface(\r\n            address(new SturdyLender(_asset, _name, _vault))\r\n        );\r\n\r\n        newStrategy.setPerformanceFeeRecipient(performanceFeeRecipient);\r\n\r\n        newStrategy.setKeeper(keeper);\r\n\r\n        newStrategy.setPendingManagement(management);\r\n\r\n        emit NewSturdyLender(address(newStrategy), _asset);\r\n\r\n        deployments[_vault] = address(newStrategy);\r\n        return address(newStrategy);\r\n    }\r\n\r\n    function setAddresses(\r\n        address _management,\r\n        address _performanceFeeRecipient,\r\n        address _keeper\r\n    ) external {\r\n        require(msg.sender == management, \"!management\");\r\n        management = _management;\r\n        performanceFeeRecipient = _performanceFeeRecipient;\r\n        keeper = _keeper;\r\n    }\r\n\r\n    function isDeployedStrategy(\r\n        address _strategy\r\n    ) external view returns (bool) {\r\n        address _vault = address(SturdyLender(_strategy).vault());\r\n        return deployments[_vault] == _strategy;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_performanceFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"AlreadyDeployed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"NewSturdyLender\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deployments\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"isDeployedStrategy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeper\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"newSturdyLender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_performanceFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_keeper\",\"type\":\"address\"}],\"name\":\"setAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SturdyLenderFactory", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002d57bb1ad5eab2caacb50e8527eb0ee504f49e480000000000000000000000002d57bb1ad5eab2caacb50e8527eb0ee504f49e48000000000000000000000000c2d26d13582324f10c7c3753b8f5fc71011ecf57", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://cbec941064da15e2be98deaef55da19e37db932d440b3944bd8df1004e6aaa8c"}