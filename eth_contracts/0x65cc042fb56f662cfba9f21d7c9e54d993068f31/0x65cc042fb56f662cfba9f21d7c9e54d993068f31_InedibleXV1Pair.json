{"SourceCode": "// Sources flattened with hardhat v2.12.6 https://hardhat.org\r\n\r\n// File contracts/interfaces/IUniswapV2ERC20.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2ERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n    function symbol() external pure returns (string memory);\r\n    function decimals() external pure returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\r\n}\r\n\r\n\r\n// File contracts/libraries/SafeMath.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\r\n\r\nlibrary SafeMath {\r\n    function add(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x + y) >= x, \"ds-math-add-overflow\");\r\n    }\r\n\r\n    function sub(uint x, uint y) internal pure returns (uint z) {\r\n        require((z = x - y) <= x, \"ds-math-sub-underflow\");\r\n    }\r\n\r\n    function mul(uint x, uint y) internal pure returns (uint z) {\r\n        require(y == 0 || (z = x * y) / y == x, \"ds-math-mul-overflow\");\r\n    }\r\n\r\n    function div(uint x, uint y) internal pure returns (uint z) {\r\n        require(y > 0, \"ds-math-div-overflow\");\r\n        z = x / y;\r\n    }\r\n}\r\n\r\n\r\n// File contracts/InedibleXV1ERC20.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.5.16;\r\n\r\n\r\ncontract InedibleXV1ERC20 is IUniswapV2ERC20 {\r\n    using SafeMath for uint;\r\n\r\n    string public constant name = \"inedibleX V1\";\r\n    string public constant symbol = \"ineX-V1\";\r\n    uint public totalSupply;\r\n\r\n    uint112 internal reserve0; // uses single storage slot, accessible via getReserves\r\n    uint112 internal reserve1; // uses single storage slot, accessible via getReserves\r\n\r\n    // pack variables to use single slot\r\n    uint8 public constant decimals = 18;\r\n    uint32 internal blockTimestampLast; //\r\n    uint8 private unlocked = 1;\r\n\r\n    uint public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\r\n\r\n    mapping(address => uint) public balanceOf;\r\n    mapping(address => mapping(address => uint)) public allowance;\r\n\r\n    // Added by Inedible\r\n    mapping(address => uint) public lockedUntil;\r\n    // Last cumulative fee per token amount a user has withdrawn.\r\n    mapping(address => uint) public lastUserCumulative;\r\n    // Fees ready to be claimed by user.\r\n    mapping(address => uint256) public unclaimed;\r\n    // Cumulative amount of fees generated per single full token.\r\n    uint public cumulativeFees;\r\n\r\n    bytes32 public DOMAIN_SEPARATOR;\r\n    // keccak256(\"Permit(address owner,address spender,uint value,uint nonce,uint deadline)\");\r\n    bytes32 public constant PERMIT_TYPEHASH =\r\n        0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\r\n    mapping(address => uint) public nonces;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    modifier lock() {\r\n        require(unlocked == 1, \"UniswapV2: LOCKED\");\r\n        unlocked = 0;\r\n        _;\r\n        unlocked = 1;\r\n    }\r\n\r\n    constructor() public {\r\n        uint chainId;\r\n        assembly {\r\n            chainId := chainid\r\n        }\r\n        DOMAIN_SEPARATOR = keccak256(\r\n            abi.encode(\r\n                keccak256(\r\n                    \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\r\n                ),\r\n                keccak256(bytes(name)),\r\n                keccak256(bytes(\"1\")),\r\n                chainId,\r\n                address(this)\r\n            )\r\n        );\r\n    }\r\n\r\n    function _mint(address to, uint value) internal {\r\n        _updateFees(to);\r\n        totalSupply = totalSupply.add(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n        emit Transfer(address(0), to, value);\r\n    }\r\n\r\n    function _burn(address from, uint value) internal {\r\n        _updateFees(from);\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        totalSupply = totalSupply.sub(value);\r\n        emit Transfer(from, address(0), value);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint value) private {\r\n        allowance[owner][spender] = value;\r\n        emit Approval(owner, spender, value);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint value,\r\n        bool fromClaimFees\r\n    ) private {\r\n        // Here we need to give users more fees and update\r\n        require(lockedUntil[from] < block.timestamp, \"User balance is locked.\");\r\n\r\n        if (!fromClaimFees) {\r\n            _mintFee(reserve0, reserve1);\r\n\r\n            _updateFees(from);\r\n            _updateFees(to);\r\n        }\r\n        balanceOf[from] = balanceOf[from].sub(value);\r\n        balanceOf[to] = balanceOf[to].add(value);\r\n\r\n        emit Transfer(from, to, value);\r\n    }\r\n\r\n    // Virtual function to be called on the V2Pair contract.\r\n    function _mintFee(\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) internal returns (bool feeOn) {}\r\n\r\n    function _updateFees(address _user) internal {\r\n        // Div buffer is because cumulative fees is based on a full token value.\r\n        uint256 balance = balanceOf[_user];\r\n        uint lastCumulative = lastUserCumulative[_user];\r\n        // update cumulative fees here because we need to take care of transfer\r\n        lastUserCumulative[_user] = cumulativeFees;\r\n\r\n        if (balance == 0) return;\r\n\r\n        uint256 feeAmount = balance\r\n            .mul((cumulativeFees).sub(lastCumulative))\r\n            .div(1e18);\r\n        unclaimed[_user] = unclaimed[_user].add(feeAmount);\r\n    }\r\n\r\n    // Added by Inedible\r\n    function claimFees(address _user) public lock {\r\n        _mintFee(reserve0, reserve1);\r\n\r\n        // Div buffer is because cumulative fees is based on a full token value.\r\n        uint256 feeAmount = balanceOf[_user]\r\n            .mul((cumulativeFees).sub(lastUserCumulative[_user]))\r\n            .div(1e18);\r\n        uint256 _unclaimed = unclaimed[_user];\r\n\r\n        lastUserCumulative[_user] = cumulativeFees;\r\n        if (feeAmount.add(_unclaimed) > 0) {\r\n            _transfer(\r\n                address(1),\r\n                address(this),\r\n                feeAmount.add(_unclaimed),\r\n                true\r\n            );\r\n            unclaimed[_user] = 0;\r\n            _burnHelper(_user, true);\r\n        } else {\r\n            kLast = uint(reserve0).mul(reserve1);\r\n        }\r\n    }\r\n\r\n    // Added by Inedible\r\n    function viewFees(address _user) public view returns (uint256) {\r\n        // Div buffer is because cumulative fees is based on a full token value.\r\n        uint256 feeAmount = balanceOf[_user]\r\n            .mul((cumulativeFees).sub(lastUserCumulative[_user]))\r\n            .div(1e18);\r\n        uint256 _unclaimed = unclaimed[_user];\r\n\r\n        return feeAmount.add(_unclaimed);\r\n    }\r\n\r\n    // Virtual function to be called on the V2Pair contract.\r\n    function _burnHelper(\r\n        address _user,\r\n        bool _fromClaim\r\n    ) private returns (uint amount0, uint amount1) {}\r\n\r\n    function approve(address spender, uint value) external returns (bool) {\r\n        _approve(msg.sender, spender, value);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address to, uint value) external returns (bool) {\r\n        _transfer(msg.sender, to, value, false);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool) {\r\n        if (allowance[from][msg.sender] != uint(-1)) {\r\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(\r\n                value\r\n            );\r\n        }\r\n        _transfer(from, to, value, false);\r\n        return true;\r\n    }\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external {\r\n        require(deadline >= block.timestamp, \"UniswapV2: EXPIRED\");\r\n        bytes32 digest = keccak256(\r\n            abi.encodePacked(\r\n                \"\\x19\\x01\",\r\n                DOMAIN_SEPARATOR,\r\n                keccak256(\r\n                    abi.encode(\r\n                        PERMIT_TYPEHASH,\r\n                        owner,\r\n                        spender,\r\n                        value,\r\n                        nonces[owner]++,\r\n                        deadline\r\n                    )\r\n                )\r\n            )\r\n        );\r\n        address recoveredAddress = ecrecover(digest, v, r, s);\r\n        require(\r\n            recoveredAddress != address(0) && recoveredAddress == owner,\r\n            \"UniswapV2: INVALID_SIGNATURE\"\r\n        );\r\n        _approve(owner, spender, value);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/interfaces/IERC20.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IERC20 {\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint);\r\n    function balanceOf(address owner) external view returns (uint);\r\n    function allowance(address owner, address spender) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function transferFrom(address from, address to, uint value) external returns (bool);\r\n}\r\n\r\n\r\n// File contracts/interfaces/IInedibleXV1Factory.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IInedibleXV1Factory {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint pairLength\r\n    );\r\n\r\n    event InedibleCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address pair,\r\n        uint pairLength,\r\n        bool launch,\r\n        uint lock,\r\n        uint vesting\r\n    );\r\n\r\n    function treasury() external view returns (address);\r\n\r\n    function feeTo() external view returns (address);\r\n\r\n    function dao() external view returns (address);\r\n\r\n    function getPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external view returns (address pair);\r\n\r\n    function allPairs(uint) external view returns (address pair);\r\n\r\n    function allPairsLength() external view returns (uint);\r\n\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB,\r\n        bool launch,\r\n        uint16 launchFeePct,\r\n        uint40 lock,\r\n        uint40 vesting\r\n    ) external returns (address pair);\r\n\r\n    function setFeeTo(address) external;\r\n\r\n    // added by inedible\r\n    function setLaunchFeePct(uint16 _launchFeePct) external;\r\n\r\n    function setMinSupplyPct(uint16 _minSupplyPct) external;\r\n\r\n    function transferOwnership(address _newDao) external;\r\n\r\n    function renounceOwnership() external;\r\n\r\n    function acceptOwnership() external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IInedibleXV1Pair.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IInedibleXV1Pair {\r\n    struct Balance {\r\n        uint balance0;\r\n        uint balance1;\r\n    }\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n\r\n    function name() external pure returns (string memory);\r\n\r\n    function symbol() external pure returns (string memory);\r\n\r\n    function decimals() external pure returns (uint8);\r\n\r\n    function totalSupply() external view returns (uint);\r\n\r\n    function balanceOf(address owner) external view returns (uint);\r\n\r\n    function allowance(\r\n        address owner,\r\n        address spender\r\n    ) external view returns (uint);\r\n\r\n    function approve(address spender, uint value) external returns (bool);\r\n\r\n    function transfer(address to, uint value) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint value\r\n    ) external returns (bool);\r\n\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n\r\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\r\n\r\n    function nonces(address owner) external view returns (uint);\r\n\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint value,\r\n        uint deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\r\n\r\n    function factory() external view returns (address);\r\n\r\n    function token0() external view returns (address);\r\n\r\n    function token1() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n\r\n    function price0CumulativeLast() external view returns (uint);\r\n\r\n    function price1CumulativeLast() external view returns (uint);\r\n\r\n    function kLast() external view returns (uint);\r\n\r\n    function mint(address to) external returns (uint liquidity);\r\n\r\n    function burn(address to) external returns (uint amount0, uint amount1);\r\n\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        address operator,\r\n        bytes calldata data\r\n    ) external;\r\n\r\n    function skim(address to) external;\r\n\r\n    function sync() external;\r\n\r\n    function initialize(\r\n        address _token0,\r\n        address _token1,\r\n        address _router,\r\n        uint16 _minSupplyPct,\r\n        uint16 _launchFeePct,\r\n        bool _launch,\r\n        uint40 _lockDuration,\r\n        uint40 _vestingDuration\r\n    ) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IRewards.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IRewards {\r\n    function payFee(address _token, uint256 _amount) external;\r\n}\r\n\r\n\r\n// File contracts/interfaces/IUniswapV2Callee.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity >=0.5.0;\r\n\r\ninterface IUniswapV2Callee {\r\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\r\n}\r\n\r\n\r\n// File contracts/libraries/Math.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.5.16;\r\n\r\n// a library for performing various math operations\r\n\r\nlibrary Math {\r\n    function min(uint x, uint y) internal pure returns (uint z) {\r\n        z = x < y ? x : y;\r\n    }\r\n\r\n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\r\n    function sqrt(uint y) internal pure returns (uint z) {\r\n        if (y > 3) {\r\n            z = y;\r\n            uint x = y / 2 + 1;\r\n            while (x < z) {\r\n                z = x;\r\n                x = (y / x + x) / 2;\r\n            }\r\n        } else if (y != 0) {\r\n            z = 1;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n// File contracts/libraries/UQ112x112.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.5.16;\r\n\r\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\r\n\r\n// range: [0, 2**112 - 1]\r\n// resolution: 1 / 2**112\r\n\r\nlibrary UQ112x112 {\r\n    uint224 constant Q112 = 2**112;\r\n\r\n    // encode a uint112 as a UQ112x112\r\n    function encode(uint112 y) internal pure returns (uint224 z) {\r\n        z = uint224(y) * Q112; // never overflows\r\n    }\r\n\r\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\r\n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\r\n        z = x / uint224(y);\r\n    }\r\n}\r\n\r\n\r\n// File contracts/InedibleXV1Pair.sol\r\n\r\n// SPDX-License-Identifier: UNLICENSED\r\npragma solidity =0.5.16;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract InedibleXV1Pair is IInedibleXV1Pair, InedibleXV1ERC20 {\r\n    using SafeMath for uint;\r\n    using SafeMath for uint40;\r\n    using UQ112x112 for uint224;\r\n\r\n    uint public constant MINIMUM_LIQUIDITY = 10 ** 3;\r\n    bytes4 private constant SELECTOR =\r\n        bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\r\n\r\n    address public factory;\r\n    address public token0;\r\n    address public token1;\r\n\r\n    uint public price0CumulativeLast;\r\n    uint public price1CumulativeLast;\r\n\r\n    // Variables below added by Inedible\r\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    // router address\r\n    address public router;\r\n    // Denominator for percent math. Numerator of 1,000 == 10%.\r\n    uint256 public constant DENOM = 10000;\r\n    // Whether or not this was a launch of a token.\r\n    bool public launch;\r\n    // This will equal block.timestamp once 2 trades have occurred on the block.\r\n    uint40 private twoTrades;\r\n    // The time that token vesting ends.\r\n    uint40 public vestingEnd;\r\n    // Minimum percent of a token that must be initially supplied.\r\n    uint40 public initialLockDuration;\r\n    uint16 public minSupplyPct;\r\n    // Percent of tokens to send to the treasury from initial supply.\r\n    uint16 public launchFeePct;\r\n    // Amount of tokens bought from the dex. Avoids dumping.\r\n    mapping(address => uint256) private buyBalance;\r\n\r\n    function getReserves()\r\n        public\r\n        view\r\n        returns (\r\n            uint112 _reserve0,\r\n            uint112 _reserve1,\r\n            uint32 _blockTimestampLast\r\n        )\r\n    {\r\n        _reserve0 = reserve0;\r\n        _reserve1 = reserve1;\r\n        _blockTimestampLast = blockTimestampLast;\r\n    }\r\n\r\n    function _safeTransfer(address token, address to, uint value) private {\r\n        (bool success, bytes memory data) = token.call(\r\n            abi.encodeWithSelector(SELECTOR, to, value)\r\n        );\r\n        require(\r\n            success && (data.length == 0 || abi.decode(data, (bool))),\r\n            \"UniswapV2: TRANSFER_FAILED\"\r\n        );\r\n    }\r\n\r\n    event Mint(address indexed sender, uint amount0, uint amount1);\r\n    event Burn(\r\n        address indexed sender,\r\n        uint amount0,\r\n        uint amount1,\r\n        address indexed to\r\n    );\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Sync(uint112 reserve0, uint112 reserve1);\r\n\r\n    constructor() public {\r\n        factory = msg.sender;\r\n    }\r\n\r\n    // called once by the factory at time of deployment\r\n    function initialize(\r\n        address _token0,\r\n        address _token1,\r\n        address _router,\r\n        uint16 _minSupplyPct,\r\n        uint16 _launchFeePct,\r\n        bool _launch,\r\n        uint40 _lockDuration,\r\n        uint40 _vestingDuration\r\n    ) external {\r\n        require(msg.sender == factory, \"UniswapV2: FORBIDDEN\"); // sufficient check\r\n        token0 = _token0;\r\n        token1 = _token1;\r\n\r\n        // Add launch variable\r\n        if (_launch) {\r\n            router = _router;\r\n            launch = true;\r\n\r\n            // Added by Inedible\r\n            minSupplyPct = _minSupplyPct;\r\n            launchFeePct = _launchFeePct;\r\n            uint40 timestamp = uint40(block.timestamp);\r\n            // won't overflow, router restricts vesting < 365 days\r\n            vestingEnd = timestamp + _vestingDuration;\r\n            initialLockDuration = _lockDuration;\r\n        }\r\n    }\r\n\r\n    // update reserves and, on the first call per block, price accumulators\r\n    function _update(\r\n        uint balance0,\r\n        uint balance1,\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) private {\r\n        require(\r\n            balance0 <= uint112(-1) && balance1 <= uint112(-1),\r\n            \"UniswapV2: OVERFLOW\"\r\n        );\r\n        uint32 blockTimestamp = uint32(block.timestamp % 2 ** 32);\r\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\r\n        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\r\n            // * never overflows, and + overflow is desired\r\n            price0CumulativeLast +=\r\n                uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) *\r\n                timeElapsed;\r\n            price1CumulativeLast +=\r\n                uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) *\r\n                timeElapsed;\r\n        }\r\n        reserve0 = uint112(balance0);\r\n        reserve1 = uint112(balance1);\r\n        // Added by Inedible\r\n        // If 1 trade has already been made, save that a second trade is happening.\r\n        // If a second trade has already occurred this block, revert.\r\n        if (timeElapsed == 0) {\r\n            if (twoTrades < block.timestamp) {\r\n                twoTrades = uint40(block.timestamp);\r\n            } else if (\r\n                // This is an exception for a HoneyBot contract\r\n                token0 != 0x0A127232C33cd61Dc838293aEb1Bfa6d51C89D78 &&\r\n                token1 != 0x0A127232C33cd61Dc838293aEb1Bfa6d51C89D78\r\n            ) {\r\n                revert(\"Two trades have already occurred on this block.\");\r\n            }\r\n        }\r\n\r\n        blockTimestampLast = blockTimestamp;\r\n        emit Sync(reserve0, reserve1);\r\n    }\r\n\r\n    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\r\n    function _mintFee(\r\n        uint112 _reserve0,\r\n        uint112 _reserve1\r\n    ) internal returns (bool feeOn) {\r\n        address treasury = IInedibleXV1Factory(factory).treasury();\r\n        feeOn = treasury != address(0);\r\n        uint _kLast = kLast; // gas savings\r\n        if (feeOn) {\r\n            if (_kLast != 0) {\r\n                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\r\n                uint rootKLast = Math.sqrt(_kLast);\r\n                if (rootK > rootKLast) {\r\n                    uint256 _totalSupply = totalSupply;\r\n                    uint numerator = _totalSupply.mul(rootK.sub(rootKLast));\r\n                    uint denominator = rootK.mul(5).add(rootKLast);\r\n                    uint liquidity = numerator / denominator;\r\n                    if (liquidity > 0) {\r\n                        // address1 is where we store lp fees and\r\n                        // that balance should not be owed fees\r\n                        uint addr1BalBefore = balanceOf[address(1)];\r\n\r\n                        cumulativeFees = cumulativeFees.add(\r\n                            liquidity.mul(5).mul(1e18).div(\r\n                                _totalSupply - addr1BalBefore\r\n                            )\r\n                        );\r\n\r\n                        // protocol fees\r\n                        _mint(treasury, liquidity);\r\n\r\n                        // liquidity provider fees\r\n                        // This is a storage address to hold the rest of the fees.\r\n                        // It's not the most efficient way to distribute fees separately from\r\n                        // initial tokens, but it's the one that requires the least code changes.\r\n                        _mint(address(1), liquidity.mul(5));\r\n                    }\r\n                }\r\n            }\r\n        } else if (_kLast != 0) {\r\n            kLast = 0;\r\n        }\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function mint(address to) external lock returns (uint liquidity) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        uint balance0 = IERC20(token0).balanceOf(address(this));\r\n        uint balance1 = IERC20(token1).balanceOf(address(this));\r\n        uint amount0 = balance0.sub(_reserve0);\r\n        uint amount1 = balance1.sub(_reserve1);\r\n\r\n        // Added by Inedible\r\n        // Specific actions on adding first liquidity, must come before amounts are counted\r\n        if (totalSupply == 0 && launch) {\r\n            IERC20 launchToken = token0 == WETH\r\n                ? IERC20(token1)\r\n                : IERC20(token0);\r\n            uint launchAmount = token0 == WETH ? amount1 : amount0;\r\n            uint256 tokenSupply = launchToken.totalSupply();\r\n            uint256 launchFee = (tokenSupply * launchFeePct) / DENOM;\r\n            uint256 minSupply = (tokenSupply * minSupplyPct) / DENOM;\r\n            // Ends with tokens in pool actually less than amount0 because the treasury is sent a %\r\n            require(minSupply <= launchAmount, \"Not enough tokens supplied.\");\r\n\r\n            lockedUntil[to] = block.timestamp.add(initialLockDuration);\r\n            address feeTo = IInedibleXV1Factory(factory).feeTo();\r\n            launchToken.approve(feeTo, launchFee);\r\n            IRewards(feeTo).payFee(address(launchToken), launchFee);\r\n\r\n            // update amount0 and balance0 because the treasury took a fee\r\n            if (token0 != WETH) {\r\n                amount0 = amount0.sub(launchFee);\r\n                balance0 = balance0.sub(launchFee);\r\n            } else {\r\n                amount1 = amount1.sub(launchFee);\r\n                balance1 = balance1.sub(launchFee);\r\n            }\r\n        }\r\n\r\n        bool feeOn = _mintFee(_reserve0, _reserve1);\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        if (_totalSupply == 0) {\r\n            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\r\n            _mint(address(0), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\r\n        } else {\r\n            liquidity = Math.min(\r\n                amount0.mul(_totalSupply) / _reserve0,\r\n                amount1.mul(_totalSupply) / _reserve1\r\n            );\r\n        }\r\n        require(liquidity > 0, \"UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED\");\r\n        _mint(to, liquidity);\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Mint(msg.sender, amount0, amount1);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function burn(address to) public lock returns (uint amount0, uint amount1) {\r\n        (amount0, amount1) = _burnHelper(to, false);\r\n    }\r\n\r\n    function _burnHelper(\r\n        address to,\r\n        bool fromClaim\r\n    ) private returns (uint amount0, uint amount1) {\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        bool feeOn = true;\r\n\r\n        if (!fromClaim) {\r\n            feeOn = _mintFee(_reserve0, _reserve1);\r\n        }\r\n\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        uint balance0 = IERC20(_token0).balanceOf(address(this));\r\n        uint balance1 = IERC20(_token1).balanceOf(address(this));\r\n        uint liquidity = balanceOf[address(this)];\r\n\r\n        uint _totalSupply = totalSupply; // gas savings, must be defined here since totalSupply can update in _mintFee\r\n        amount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\r\n        amount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\r\n        require(\r\n            amount0 > 0 && amount1 > 0,\r\n            \"UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED\"\r\n        );\r\n        _burn(address(this), liquidity);\r\n        _safeTransfer(_token0, to, amount0);\r\n        _safeTransfer(_token1, to, amount1);\r\n        balance0 = IERC20(_token0).balanceOf(address(this));\r\n        balance1 = IERC20(_token1).balanceOf(address(this));\r\n\r\n        _update(balance0, balance1, _reserve0, _reserve1);\r\n        if (feeOn) kLast = uint(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\r\n        emit Burn(msg.sender, amount0, amount1, to);\r\n    }\r\n\r\n    // this low-level function should be called from a contract which performs important safety checks\r\n    function swap(\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address to,\r\n        address transactor,\r\n        bytes calldata data\r\n    ) external lock {\r\n        require(\r\n            amount0Out > 0 || amount1Out > 0,\r\n            \"UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT\"\r\n        );\r\n        (uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\r\n        require(\r\n            amount0Out < _reserve0 && amount1Out < _reserve1,\r\n            \"UniswapV2: INSUFFICIENT_LIQUIDITY\"\r\n        );\r\n        Balance memory bal;\r\n\r\n        {\r\n            // scope for _token{0,1}, avoids stack too deep errors\r\n            address _token0 = token0;\r\n            address _token1 = token1;\r\n            require(to != _token0 && to != _token1, \"UniswapV2: INVALID_TO\");\r\n            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out); // optimistically transfer tokens\r\n            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out); // optimistically transfer tokens\r\n            if (data.length > 0)\r\n                IUniswapV2Callee(to).uniswapV2Call(\r\n                    msg.sender,\r\n                    amount0Out,\r\n                    amount1Out,\r\n                    data\r\n                );\r\n            bal.balance0 = IERC20(_token0).balanceOf(address(this));\r\n            bal.balance1 = IERC20(_token1).balanceOf(address(this));\r\n        }\r\n        uint amount0In = bal.balance0 > _reserve0 - amount0Out\r\n            ? bal.balance0 - (_reserve0 - amount0Out)\r\n            : 0;\r\n        uint amount1In = bal.balance1 > _reserve1 - amount1Out\r\n            ? bal.balance1 - (_reserve1 - amount1Out)\r\n            : 0;\r\n        require(\r\n            amount0In > 0 || amount1In > 0,\r\n            \"UniswapV2: INSUFFICIENT_INPUT_AMOUNT\"\r\n        );\r\n        {\r\n            // scope for reserve{0,1}Adjusted, avoids stack too deep errors\r\n            uint balance0Adjusted = bal.balance0.mul(10000).sub(\r\n                amount0In.mul(36)\r\n            );\r\n            uint balance1Adjusted = bal.balance1.mul(10000).sub(\r\n                amount1In.mul(36)\r\n            );\r\n            require(\r\n                balance0Adjusted.mul(balance1Adjusted) >=\r\n                    uint(_reserve0).mul(_reserve1).mul(10000 ** 2),\r\n                \"UniswapV2: K\"\r\n            );\r\n        }\r\n\r\n        {\r\n            // scope for inedible, avoids stack too deep errors\r\n\r\n            // Added by Inedible\r\n            // This could technically be used to grief, but only by sending money to the person being \"griefed\"\r\n            if (launch && block.timestamp < vestingEnd) {\r\n                // If token0 is not WETH, it's the launch token that we need to restrict sells on.\r\n                bool token0IsLaunch = token0 != WETH;\r\n\r\n                // we check for tokenIn to be equal to zero because this low\r\n                // level function can be used to bypass vesting by sending\r\n                // vested token to contract and calling swap which will\r\n                // update buyBalance and allow for a sell.\r\n                if (\r\n                    token0IsLaunch\r\n                        ? amount0Out > 0 && amount0In == 0\r\n                        : amount1Out > 0 && amount1In == 0\r\n                ) {\r\n                    buyBalance[to] = buyBalance[to].add(\r\n                        token0IsLaunch ? amount0Out : amount1Out\r\n                    );\r\n                } else {\r\n                    if (msg.sender == router) {\r\n                        buyBalance[transactor] = buyBalance[transactor].sub(\r\n                            token0IsLaunch ? amount0In : amount1In\r\n                        );\r\n                    } else {\r\n                        buyBalance[to] = buyBalance[to].sub(\r\n                            token0IsLaunch ? amount0In : amount1In\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n            _update(bal.balance0, bal.balance1, _reserve0, _reserve1);\r\n            emit Swap(\r\n                msg.sender,\r\n                amount0In,\r\n                amount1In,\r\n                amount0Out,\r\n                amount1Out,\r\n                to\r\n            );\r\n        }\r\n    }\r\n\r\n    // Added by Inedible\r\n    function extendLock(uint256 _extension) external {\r\n        lockedUntil[msg.sender] = lockedUntil[msg.sender].add(_extension);\r\n    }\r\n\r\n    /**\r\n     * @dev Admin multisig can unlock liquidity for 1 month after MVP launch.\r\n     *      If we find any bugs, we need to be able to migrate.\r\n     **/\r\n    function adminUnlock(address _user) external {\r\n        require(\r\n            msg.sender == 0x1f28eD9D4792a567DaD779235c2b766Ab84D8E33,\r\n            \"only admin\"\r\n        );\r\n        require(\r\n            block.timestamp < 1691390687,\r\n            \"May not unlock after August 6th.\"\r\n        );\r\n        delete lockedUntil[_user];\r\n    }\r\n\r\n    // force balances to match reserves\r\n    function skim(address to) external lock {\r\n        address _token0 = token0; // gas savings\r\n        address _token1 = token1; // gas savings\r\n        _safeTransfer(\r\n            _token0,\r\n            to,\r\n            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\r\n        );\r\n        _safeTransfer(\r\n            _token1,\r\n            to,\r\n            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\r\n        );\r\n    }\r\n\r\n    // force reserves to match balances\r\n    function sync() external lock {\r\n        _update(\r\n            IERC20(token0).balanceOf(address(this)),\r\n            IERC20(token1).balanceOf(address(this)),\r\n            reserve0,\r\n            reserve1\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve0\",\"type\":\"uint112\"},{\"indexed\":false,\"internalType\":\"uint112\",\"name\":\"reserve1\",\"type\":\"uint112\"}],\"name\":\"Sync\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"constant\":true,\"inputs\":[],\"name\":\"DENOM\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINIMUM_LIQUIDITY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"adminUnlock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"cumulativeFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_extension\",\"type\":\"uint256\"}],\"name\":\"extendLock\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"factory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getReserves\",\"outputs\":[{\"internalType\":\"uint112\",\"name\":\"_reserve0\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"_reserve1\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"_blockTimestampLast\",\"type\":\"uint32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initialLockDuration\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_minSupplyPct\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_launchFeePct\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_launch\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"_lockDuration\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_vestingDuration\",\"type\":\"uint40\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastUserCumulative\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"launchFeePct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedUntil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"minSupplyPct\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price0CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"price1CumulativeLast\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"skim\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transactor\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"swap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token0\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token1\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"unclaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"vestingEnd\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"viewFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "InedibleXV1Pair", "CompilerVersion": "v0.5.16+commit.9c3226ce", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://8089e210425a93c83ed1be1014a2d34457b82b8a16e83b15f4843227b4f98916"}