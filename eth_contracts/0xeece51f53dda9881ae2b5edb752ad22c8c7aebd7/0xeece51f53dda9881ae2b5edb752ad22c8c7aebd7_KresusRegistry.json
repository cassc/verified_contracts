{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable2Step.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() external {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/infrastructure/IKresusRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IModuleRegistry\\n * @notice Interface for the registry of authorised modules.\\n */\\ninterface IKresusRegistry {\\n    /**\\n     * @notice Registers a new module. New modules which are registered can be authorized for each {ProxyVault}.\\n     * @param _module The module address which has to be registered.\\n     * @param _name The name of the module.\\n     */\\n    function registerModule(address _module, string calldata _name) external;\\n\\n    /**\\n     * @notice Deregisters a module.\\n     * @param _module The module address.\\n     */\\n    function deregisterModule(address _module) external;\\n\\n    /**\\n     * @notice Registers contract addresses with their selectors.\\n     * @param _contracts Contract addresses to be whitelisted.\\n     * @param _selectors List of corresponding method ids to be whitelisted.\\n     */\\n    function registerContract(address[] memory _contracts, bytes4[] memory _selectors) external;\\n    \\n    /**\\n     * @notice Deregisters contract addresses with their selectors.\\n     * @param _contracts Contract addresses to be whitelisted.\\n     * @param _selectors List of corresponding method ids to be whitelisted.\\n     */\\n    function deregisterContract(address[] memory _contracts, bytes4[] memory _selectors) external;\\n\\n    /**\\n     * @notice Function to set the time delay for remove guardian operation.\\n     * @param _td New time delay for removing guardian.\\n     */\\n    function setRemoveGuardianTd(uint256 _td) external;\\n\\n    /**\\n     * @notice Function to set the time delay for unlock operation.\\n     * @param _td New time delay for unlocking a vault.\\n     */\\n    function setUnlockTd(uint256 _td) external;\\n\\n    /**\\n     * @notice Gets the name of a module from its address.\\n     * @param _module The module address.\\n     * @return The name of the module.\\n     */\\n    function moduleInfo(address _module) external view returns (string memory);\\n\\n    /**\\n     * @notice Checks if a module is registered.\\n     * @param _module The module address.\\n     * @return True if the module is registered, else false.\\n     */\\n    function isRegisteredModule(address _module) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if given modules are registered.\\n     * @param _modules The module addresses.\\n     * @return True if modules are registered, else false.\\n     */\\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool);\\n\\n    /**\\n     * @notice Checks if given list of contracts addresses and corresponsing method ids are whitelisted.\\n     * @param _contracts List of contract addresses.\\n     * @param _sigs List of corresponding method ids.\\n     * @return True if all the contract addresses and method ids are whitelisted, else false.\\n     */\\n    function isRegisteredCalls(address[] memory _contracts, bytes4[] memory _sigs) external view returns (bool);\\n\\n    /**\\n     * @notice Function to get the time delay for unlock.\\n     * @return Time delay for unlocking a vault.\\n     */\\n    function getUnlockTd() external view returns(uint256); \\n\\n\\n    /**\\n     * @notice Function to get the time delay for remove guardian.\\n     * @return Time delay for remove guardian.\\n     */\\n    function getRemoveGuardianTd() external view returns(uint256); \\n}\"\r\n    },\r\n    \"contracts/infrastructure/KresusRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport {Ownable2Step} from \\\"@openzeppelin/contracts/access/Ownable2Step.sol\\\";\\n\\nimport {IKresusRegistry} from \\\"./IKresusRegistry.sol\\\";\\n\\n/**\\n * @title KresusRegistry\\n *\\n * @dev Implementation of {IKresusRegistry} interface.\\n *\\n * @notice Registry of authorised modules and contract addresses with selectors.\\n * Modules must be registered before they can be authorised/added to a vault.\\n * Vaults can iteract without timedelay with external contracts whose methods are registered.\\n * Deployer owns the contract and is responsible to register/deregister modules, contracts with method selectors.\\n */\\ncontract KresusRegistry is IKresusRegistry, Ownable2Step {\\n\\n    uint256 private removeGuardianTd = 5 days;\\n    uint256 private unlockTd = 10 days;\\n\\n    struct ModuleInfo {\\n        bool exists;\\n        string name;\\n    }\\n\\n    struct ContractInfo {\\n        bytes4[] selectors;\\n        mapping(bytes4 => uint256) index;\\n    }\\n\\n    // deployed module address to Info struct mapping.\\n    mapping (address => ModuleInfo) internal modules;\\n\\n    // contract addresses which are whitelisted.\\n    mapping (address => ContractInfo) internal contracts;\\n\\n    // emitted when a new module is registered.\\n    event ModuleRegistered(address indexed module, string name);\\n\\n    // emitted when an existing module is removed from the registry.\\n    event ModuleDeRegistered(address module);\\n\\n    // emitted when a new contract is registered with selectors.\\n    event ContractRegistered(address[] contracts, bytes4[] selectors);\\n\\n    // emitted when an existing contract is removed from the registry\\n    event ContractDeRegistered(address[] contracts, bytes4[] selectors);\\n\\n    // emitted when time delay is changed for unlock\\n    event UnlockTdChanged(uint256 _td);\\n\\n    // emitted when time delay is changed for remove guardian\\n    event RemoveGuardianTdChanged(uint256 _td);\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function registerModule(\\n        address _module,\\n        string calldata _name\\n    )\\n        external\\n        onlyOwner\\n    {\\n        require(_module != address(0), \\\"KRe: Invalid module\\\");\\n        require(!modules[_module].exists, \\\"KRe: module already exists\\\");\\n        modules[_module] = ModuleInfo({exists: true, name: _name});\\n        emit ModuleRegistered(_module, _name);\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function deregisterModule(address _module) external onlyOwner {\\n        require(modules[_module].exists, \\\"KRe: module does not exist\\\");\\n        delete modules[_module];\\n        emit ModuleDeRegistered(_module);\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function registerContract(\\n        address[] calldata _contracts,\\n        bytes4[] calldata _selectors\\n    )\\n        external\\n        onlyOwner\\n    {\\n        uint256 len = _contracts.length;\\n        require(len == _selectors.length, \\\"KRe: Inconsistent lengths\\\");\\n        for(uint256 i=0; i<len; i++) {\\n            ContractInfo storage ci = contracts[_contracts[i]];\\n            require(ci.index[_selectors[i]] == 0, \\\"KRe: Already registered\\\");\\n            ci.selectors.push(_selectors[i]);\\n            ci.index[_selectors[i]] = ci.selectors.length;\\n        }\\n        emit ContractRegistered(_contracts, _selectors);\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function deregisterContract(\\n        address[] calldata _contracts,\\n        bytes4[] calldata _selectors\\n    )\\n        external\\n        onlyOwner\\n    {\\n        uint256 len = _contracts.length;\\n        require(len == _selectors.length, \\\"KRe: Inconsistent lengths\\\");\\n        for(uint256 i=0; i<len; i++) {\\n            ContractInfo storage ci = contracts[_contracts[i]];\\n            uint256 j = ci.index[_selectors[i]];\\n            require(j != 0, \\\"KRe: Already deregistered\\\");\\n            ci.selectors[j - 1] = ci.selectors[ci.selectors.length - 1];\\n            ci.index[ci.selectors[j-1]] = j;\\n            ci.index[_selectors[i]] = 0;\\n            ci.selectors.pop();\\n        }\\n        emit ContractDeRegistered(_contracts, _selectors);\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function setRemoveGuardianTd(\\n        uint256 _td\\n    ) \\n        external\\n        onlyOwner\\n    {\\n        removeGuardianTd = _td;\\n        emit RemoveGuardianTdChanged(_td);\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function setUnlockTd(\\n        uint256 _td\\n    )\\n        external\\n        onlyOwner\\n    {\\n        unlockTd = _td;\\n        emit UnlockTdChanged(_td);\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function moduleInfo(address _module) external view returns (string memory) {\\n        return modules[_module].name;\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function isRegisteredModule(\\n        address _module\\n    )\\n        external\\n        view\\n        returns(bool)\\n    {\\n        return modules[_module].exists;\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function isRegisteredModule(address[] calldata _modules) external view returns (bool) {\\n        for (uint256 i = 0; i < _modules.length; i++) {\\n            if (!modules[_modules[i]].exists) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function isRegisteredCalls(\\n        address[] memory _contracts,\\n        bytes4[] memory _sigs\\n    )\\n        external\\n        view\\n        returns(bool registered)\\n    {\\n        registered = true;\\n        uint256 len = _contracts.length;\\n        require(len == _sigs.length, \\\"KRe: Inconsistent lengths\\\");\\n        for(uint256 i=0;i<len;i++) {\\n            uint256 index = contracts[_contracts[i]].index[_sigs[i]];\\n            if(index == 0)\\n                return false;\\n        }\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function getUnlockTd() external view returns(uint256) {\\n        return unlockTd;\\n    }\\n\\n    /**\\n     * @inheritdoc IKresusRegistry\\n     */\\n    function getRemoveGuardianTd() external view returns(uint256) {\\n        return removeGuardianTd;\\n    }\\n\\n    /**\\n     * @notice Function to override {Ownable} implementation to prevent transferring ownership to null address.\\n     */\\n    function renounceOwnership() public pure override {\\n        revert(\\\"KRe: Method not allowed\\\");\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"name\":\"ContractDeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes4[]\",\"name\":\"selectors\",\"type\":\"bytes4[]\"}],\"name\":\"ContractRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"}],\"name\":\"ModuleDeRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"module\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"ModuleRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_td\",\"type\":\"uint256\"}],\"name\":\"RemoveGuardianTdChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_td\",\"type\":\"uint256\"}],\"name\":\"UnlockTdChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_selectors\",\"type\":\"bytes4[]\"}],\"name\":\"deregisterContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"deregisterModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemoveGuardianTd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnlockTd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_sigs\",\"type\":\"bytes4[]\"}],\"name\":\"isRegisteredCalls\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"registered\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"isRegisteredModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_modules\",\"type\":\"address[]\"}],\"name\":\"isRegisteredModule\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"}],\"name\":\"moduleInfo\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_contracts\",\"type\":\"address[]\"},{\"internalType\":\"bytes4[]\",\"name\":\"_selectors\",\"type\":\"bytes4[]\"}],\"name\":\"registerContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_module\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"name\":\"registerModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_td\",\"type\":\"uint256\"}],\"name\":\"setRemoveGuardianTd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_td\",\"type\":\"uint256\"}],\"name\":\"setUnlockTd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "KresusRegistry", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}