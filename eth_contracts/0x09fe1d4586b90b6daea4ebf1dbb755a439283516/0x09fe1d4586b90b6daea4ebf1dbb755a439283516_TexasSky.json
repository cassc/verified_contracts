{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract Freezable {\r\n    mapping(address => bool) private _freezes;\r\n\r\n    event Freezed(address indexed account);\r\n    event Unfreezed(address indexed account);\r\n\r\n    /**\r\n     * @dev Freeze account, only owner can freeze\r\n     */\r\n    function _freeze(address account) internal {\r\n        _freezes[account] = true;\r\n        emit Freezed(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Unfreeze account, only supervisor can unfreeze\r\n     */\r\n    function _unfreeze(address account) internal {\r\n        _freezes[account] = false;\r\n        emit Unfreezed(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether the address is freezed.\r\n     */\r\n    function isFreezed(address account) public view returns (bool) {\r\n        return _freezes[account];\r\n    }\r\n}\r\n\r\n\r\ncontract Lockable {\r\n    struct TimeLock {\r\n        uint256 amount;\r\n        uint256 lockedAt;\r\n        uint256 expiresAt;\r\n    }\r\n\r\n    struct VestingLock {\r\n        uint256 amount;\r\n        uint256 lockedAt;\r\n        uint256 startsAt;\r\n        uint256 period;\r\n        uint256 count;\r\n    }\r\n\r\n    mapping(address => TimeLock[]) private _timeLocks;\r\n    mapping(address => VestingLock[]) private _vestingLocks;\r\n\r\n    event TimeLocked(address indexed account);\r\n    event TimeUnlocked(address indexed account);\r\n    event VestingLocked(address indexed account);\r\n    event VestingUnlocked(address indexed account);\r\n    event VestingUpdated(address indexed account, uint256 index);\r\n\r\n\r\n    function _addTimeLock(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 expiresAt\r\n    ) internal {\r\n        require(amount > 0, \"TimeLock: lock amount is 0\");\r\n        require(expiresAt > block.timestamp, \"TimeLock: invalid expire date\");\r\n        _timeLocks[account].push(TimeLock(amount, block.timestamp, expiresAt));\r\n        emit TimeLocked(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove time lock, only locker can remove\r\n     * @param account The address want to remove time lock\r\n     * @param index Time lock index\r\n     */\r\n    function _removeTimeLock(address account, uint8 index) internal {\r\n        require(_timeLocks[account].length > index && index >= 0, \"TimeLock: invalid index\");\r\n\r\n        uint256 len = _timeLocks[account].length;\r\n        if (len - 1 != index) {\r\n            // if it is not last item, swap it\r\n            _timeLocks[account][index] = _timeLocks[account][len - 1];\r\n        }\r\n        _timeLocks[account].pop();\r\n        emit TimeUnlocked(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Get time lock array length\r\n     * @param account The address want to know the time lock length.\r\n     * @return time lock length\r\n     */\r\n    function getTimeLockLength(address account) public view returns (uint256) {\r\n        return _timeLocks[account].length;\r\n    }\r\n\r\n    /**\r\n     * @dev Get time lock info\r\n     * @param account The address want to know the time lock state.\r\n     * @param index Time lock index\r\n     * @return time lock info\r\n     */\r\n    function getTimeLock(address account, uint8 index) public view returns (uint256, uint256) {\r\n        require(_timeLocks[account].length > index && index >= 0, \"TimeLock: invalid index\");\r\n        return (_timeLocks[account][index].amount, _timeLocks[account][index].expiresAt);\r\n    }\r\n\r\n    function getAllTimeLocks(address account) public view returns (TimeLock[] memory) {\r\n        require(account != address(0), \"TimeLock: query for the zero address\");\r\n        return _timeLocks[account];\r\n    }\r\n\r\n    /**\r\n     * @dev get total time locked amount of address\r\n     * @param account The address want to know the time lock amount.\r\n     * @return time locked amount\r\n     */\r\n    function getTimeLockedAmount(address account) public view returns (uint256) {\r\n        uint256 timeLockedAmount = 0;\r\n\r\n        uint256 len = _timeLocks[account].length;\r\n        for (uint256 i = 0; i < len; i++) {\r\n            if (block.timestamp < _timeLocks[account][i].expiresAt) {\r\n                timeLockedAmount = timeLockedAmount + _timeLocks[account][i].amount;\r\n            }\r\n        }\r\n        return timeLockedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Add vesting lock, only locker can add\r\n     * @param account vesting lock account.\r\n     * @param amount vesting lock amount.\r\n     * @param startsAt vesting lock release start date.\r\n     * @param period vesting lock period. End date is startsAt + (period - 1) * count\r\n     * @param count vesting lock count. If count is 1, it works like a time lock\r\n     */\r\n    function _addVestingLock(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) internal {\r\n        require(account != address(0), \"VestingLock: lock from the zero address\");\r\n        // require(startsAt > block.timestamp, \"VestingLock: must set after now\");\r\n        require(period > 0, \"VestingLock: period is 0\");\r\n        require(count > 0, \"VestingLock: count is 0\");\r\n        _vestingLocks[account].push(VestingLock(amount, block.timestamp, startsAt, period, count));\r\n        emit VestingLocked(account);\r\n    }\r\n\r\n    /**\r\n     * @dev Remove vesting lock, only supervisor can remove\r\n     * @param account The address want to remove the vesting lock\r\n     */\r\n    function _removeVestingLock(address account, uint256 index) internal {\r\n        require(index < _vestingLocks[account].length, \"Invalid index\");\r\n\r\n        if (index != _vestingLocks[account].length - 1) {\r\n            _vestingLocks[account][index] = _vestingLocks[account][_vestingLocks[account].length - 1];\r\n        }\r\n        _vestingLocks[account].pop();\r\n    }\r\n\r\n    function _updateVestingLock(\r\n        address account,\r\n        uint256 index,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) internal {\r\n        require(account != address(0), \"VestingLock: lock from the zero address\");\r\n        // require(startsAt > block.timestamp, \"VestingLock: must set after now\");\r\n        require(amount > 0, \"VestingLock: amount is 0\");\r\n        require(period > 0, \"VestingLock: period is 0\");\r\n        require(count > 0, \"VestingLock: count is 0\");\r\n\r\n        VestingLock storage lock = _vestingLocks[account][index];\r\n        lock.amount = amount;\r\n        lock.startsAt = startsAt;\r\n        lock.period = period;\r\n        lock.count = count;\r\n\r\n        emit VestingUpdated(account, index);\r\n    }\r\n\r\n    /**\r\n     * @dev Get vesting lock info\r\n     * @param account The address want to know the vesting lock state.\r\n     * @return vesting lock info\r\n     */\r\n    function getVestingLock(address account, uint256 index) public view returns (VestingLock memory) {\r\n        return _vestingLocks[account][index];\r\n    }\r\n\r\n    /**\r\n     * @dev Get total vesting locked amount of address, locked amount will be released by 100%/months\r\n     * If months is 5, locked amount released 20% per 1 month.\r\n     * @param account The address want to know the vesting lock amount.\r\n     * @return vesting locked amount\r\n     */\r\n    function getVestingLockedAmount(address account) public view returns (uint256) {\r\n        uint256 vestingLockedAmount = 0;\r\n        for (uint256 i = 0; i < _vestingLocks[account].length; i++) {\r\n          VestingLock memory lock = _vestingLocks[account][i];\r\n          \r\n          uint256 amount = lock.amount;\r\n          if (amount > 0) {\r\n              uint256 startsAt = lock.startsAt;\r\n              uint256 period = lock.period;\r\n              uint256 count = lock.count;\r\n              uint256 expiresAt = startsAt + period * (count);\r\n              uint256 timestamp = block.timestamp;\r\n              if (timestamp < startsAt) {\r\n                  vestingLockedAmount += amount;\r\n              } else if (timestamp < expiresAt) {\r\n                  vestingLockedAmount += (amount * ((expiresAt - timestamp) / period)) / count;\r\n              }\r\n          }\r\n        }\r\n        return vestingLockedAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Get all locked amount\r\n     * @param account The address want to know the all locked amount\r\n     * @return all locked amount\r\n     */\r\n    function getAllLockedAmount(address account) public view returns (uint256) {\r\n        return getTimeLockedAmount(account) + getVestingLockedAmount(account);\r\n    }\r\n\r\n    function getAllVestingCount(address account) public view returns (uint256) {\r\n        require(account != address(0), \"VestingLock: query for the zero address\");\r\n        return _vestingLocks[account].length;\r\n    }\r\n\r\n    function getAllVestings(address account) public view returns (VestingLock[] memory) {\r\n        require(account != address(0), \"VestingLock: query for the zero address\");\r\n        return _vestingLocks[account];\r\n    }\r\n           \r\n    function Checktimelock(address account) public returns (bool) {\r\n        for (uint8 i = 0; i < _timeLocks[account].length; i++) {\r\n            if (_timeLocks[account][i].expiresAt < block.timestamp) {\r\n                _removeTimeLock(account, i);\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n}\r\n\r\nabstract contract ERC20Burnable is Context, ERC20 {\r\n\r\n    function burn(uint256 amount) public virtual {\r\n        _burn(_msgSender(), amount);\r\n    }\r\n}\r\n\r\ncontract TexasSky is ERC20, Ownable, Freezable, Lockable, ERC20Burnable {\r\n\r\n    constructor() ERC20(\"Texas Sky\", \"TXO\") {\r\n        _mint(msg.sender, 2000000000 * (10 ** decimals()));\r\n    }\r\n\r\n    function maxSupply() public view returns (uint256) {\r\n        return 20000000000 * (10 ** decimals());\r\n    }\r\n\r\n    function freeze(address account) public onlyOwner {\r\n        _freeze(account);\r\n    }\r\n\r\n    function unfreeze(address account) public onlyOwner {\r\n        _unfreeze(account);\r\n    }\r\n\r\n\r\n    function addTimeLock(address account, uint256 amount, uint256 expiresAt) public onlyOwner  {\r\n        _addTimeLock(account, amount, expiresAt);\r\n    }\r\n\r\n    function removeTimeLock(address account, uint8 index) public onlyOwner {\r\n        _removeTimeLock(account, index);\r\n    }\r\n\r\n    function addVestingLock(\r\n        address account,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) public onlyOwner {\r\n        require(amount > 0 && balanceOf(account) >= amount, \"VestingLock: amount is 0 or over balance\");\r\n        _addVestingLock(account, amount, startsAt, period, count);\r\n    }\r\n\r\n    function updateVestingLock(\r\n        address account,\r\n        uint256 index,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) public onlyOwner {\r\n        _updateVestingLock(account, index, amount, startsAt, period, count);\r\n    }\r\n\r\n    function removeVestingLock(address account, uint index) public onlyOwner {\r\n        _removeVestingLock(account, index);\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal override (ERC20) {\r\n        require(!isFreezed(from), \"Freezable: token transfer from freezed account\");\r\n        require(!isFreezed(to), \"Freezable: token transfer to freezed account\");\r\n        require(!isFreezed(_msgSender()), \"Freezable: token transfer called from freezed account\");\r\n        if (from != address(0)) require(balanceOf(from) - getAllLockedAmount(from) >= amount, \"Lockable: insufficient transfer amount\");\r\n\r\n        super._beforeTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    function batchTransfer(address[] memory recipients, uint256[] memory amounts) public {\r\n        require(recipients.length == amounts.length, \"EML: recipients and amounts length mismatch\");\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            transfer(recipients[i], amounts[i]);\r\n        }\r\n    }\r\n\r\n    function vestedTransfer(\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 startsAt,\r\n        uint256 period,\r\n        uint256 count\r\n    ) public onlyOwner {\r\n        // Transfer tokens to the recipient\r\n        transfer(recipient, amount);\r\n\r\n        // Add a vesting lock for the recipient\r\n        addVestingLock(recipient, amount, startsAt, period, count);\r\n    }\r\n\r\n    function lockedTransfer(\r\n        address recipient,\r\n        uint256 amount,\r\n        uint256 expiresAt\r\n    ) public onlyOwner {\r\n        // Transfer tokens to the recipient\r\n        transfer(recipient, amount);\r\n\r\n        // Add a timed lock for the recipient\r\n        addTimeLock(recipient, amount, expiresAt);\r\n    }\r\n\r\n    function batchVestedTransfer(\r\n        address[] memory recipients,\r\n        uint256[] memory amounts,\r\n        uint256[] memory startsAt,\r\n        uint256[] memory periods,\r\n        uint256[] memory counts\r\n    ) public onlyOwner {\r\n        require(\r\n            recipients.length == amounts.length &&\r\n            ((recipients.length == startsAt.length && recipients.length == periods.length && recipients.length == counts.length) || \r\n            (startsAt.length == 1 && periods.length == 1 && counts.length == 1)),\r\n            \"EML: arrays must have the same length\"\r\n        );\r\n\r\n        if (startsAt.length == 1 && periods.length == 1 && counts.length == 1) {\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n                // Transfer tokens to the recipient\r\n                transfer(recipients[i], amounts[i]);\r\n                addVestingLock(\r\n                    recipients[i],\r\n                    amounts[i],\r\n                    startsAt[0],\r\n                    periods[0],\r\n                    counts[0]\r\n                );\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n                // Transfer tokens to the recipient\r\n                transfer(recipients[i], amounts[i]);\r\n                addVestingLock(\r\n                    recipients[i],\r\n                    amounts[i],\r\n                    startsAt[i],\r\n                    periods[i],\r\n                    counts[i]\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n    function batchTimeLockedTransfer(address[] memory recipients, uint256[] memory amounts,uint256[] memory expiresAt) public onlyOwner {\r\n        require(\r\n            recipients.length == amounts.length &&\r\n            ((recipients.length == expiresAt.length) || (expiresAt.length == 1)),\r\n            \"EML: arrays must have the same length\"\r\n        );\r\n\r\n        if (expiresAt.length == 1) {\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n                // Transfer tokens to the recipient\r\n                transfer(recipients[i], amounts[i]);\r\n                addTimeLock(\r\n                    recipients[i],\r\n                    amounts[i],\r\n                    expiresAt[0]\r\n                );\r\n            }\r\n        } else {\r\n            for (uint256 i = 0; i < recipients.length; i++) {\r\n                // Transfer tokens to the recipient\r\n                transfer(recipients[i], amounts[i]);\r\n                addTimeLock(\r\n                    recipients[i],\r\n                    amounts[i],\r\n                    expiresAt[i]\r\n                );\r\n            }\r\n        }\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Freezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TimeLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"TimeUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unfreezed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VestingLocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"VestingUnlocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"VestingUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Checktimelock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"addTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"addVestingLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"expiresAt\",\"type\":\"uint256[]\"}],\"name\":\"batchTimeLockedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"startsAt\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"periods\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"counts\",\"type\":\"uint256[]\"}],\"name\":\"batchVestedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"freeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllTimeLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"internalType\":\"struct Lockable.TimeLock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllVestingCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAllVestings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"internalType\":\"struct Lockable.VestingLock[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"getTimeLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTimeLockLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTimeLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getVestingLock\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"internalType\":\"struct Lockable.VestingLock\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getVestingLockedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isFreezed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiresAt\",\"type\":\"uint256\"}],\"name\":\"lockedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"removeTimeLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"removeVestingLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unfreeze\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"updateVestingLock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startsAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"vestedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TexasSky", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://84217cb2c67f5141913397437e071c35e84e7b0b719ee54c1698ad053defd2e0"}