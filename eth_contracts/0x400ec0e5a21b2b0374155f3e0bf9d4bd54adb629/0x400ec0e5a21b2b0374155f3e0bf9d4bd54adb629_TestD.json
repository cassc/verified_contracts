{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"degen/contracts/TestD.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\n\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transfer(address to, uint256 value) external returns (bool);\\r\\n\\r\\n    function balanceOf(address user) external view returns (uint256);\\r\\n\\r\\n    function submit(address _referral) external payable returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ITest {\\r\\n    function getPlateFormfee() external view returns (uint256);\\r\\n\\r\\n    function getWallet() external view returns (address);\\r\\n}\\r\\n\\r\\nerror test__ValueCantBeZero();\\r\\nerror test__TransferFailed();\\r\\nerror test__NotEnoughTokens(uint256 _amount);\\r\\n\\r\\ncontract TestD is Ownable {\\r\\n    //////////////////////////////////////////State Variables///////////////////////////////////////////////////////////////////\\r\\n\\r\\n    ITest private _helper;\\r\\n    address public constant stEth = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor(\\r\\n        address _initialOwner,\\r\\n        address _wallet\\r\\n    ) Ownable(_initialOwner) {\\r\\n        _helper = ITest(_wallet);\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////////////Main Function///////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /// @notice Do the staking of stETH in the contract . e.g. 1ETH = 1stETH (fee exclusive)\\r\\n    function stakeStEth() external payable {\\r\\n        uint256 _amount = msg.value;\\r\\n        IERC20 _helperStEth = IERC20(stEth);\\r\\n        uint256 _contractBal = _helperStEth.balanceOf(address(this));\\r\\n        if (_amount == 0) revert test__ValueCantBeZero();\\r\\n        if (_amount > _contractBal)\\r\\n            revert test__NotEnoughTokens(_contractBal);\\r\\n        (uint256 _amountAfterFee, ) = _calculationForFee(_amount);\\r\\n        _sendETH(_amount);\\r\\n        _helperStEth.transfer(_msgSender(), _amountAfterFee);\\r\\n    }\\r\\n\\r\\n    /// @notice Withdraws the stETH from the contract\\r\\n    /// @dev  Only owner can call this function\\r\\n    /// @param _amount The amount which you want to withdraw\\r\\n    function withdrawStEth(uint256 _amount) external onlyOwner {\\r\\n        IERC20 _helperStEth = IERC20(stEth);\\r\\n        uint256 _contractBal = _helperStEth.balanceOf(address(this));\\r\\n        if (_amount == 0) revert test__ValueCantBeZero();\\r\\n        if (_amount > _contractBal)\\r\\n            revert test__NotEnoughTokens(_contractBal);\\r\\n        _helperStEth.transfer(_msgSender(), _amount);\\r\\n    }\\r\\n\\r\\n    /////////////////////////////////////////Private Function///////////////////////////////////////////////////////////////////\\r\\n\\r\\n    /// @notice Do the calculation for fee deduction\\r\\n    /// @dev  Private function only for contract\\r\\n    /// @param _amount The amount from which the fee will deduct\\r\\n    /// @return _amountAfterFee The amount after fee deduction\\r\\n    /// @return _fee The amount which is deducted by the contract in terms of fee\\r\\n    function _calculationForFee(\\r\\n        uint256 _amount\\r\\n    ) private view returns (uint256 _amountAfterFee, uint256 _fee) {\\r\\n        _fee = (_amount * _helper.getPlateFormfee()) / 10000;\\r\\n        _amountAfterFee = _amount - _fee;\\r\\n    }\\r\\n\\r\\n    /// @notice Use to send ethereum to the wallet\\r\\n    /// @dev  Private function only for contract\\r\\n    /// @param _amount The amount which will send to the wallet\\r\\n    function _sendETH(uint256 _amount) private {\\r\\n        address wallet = _helper.getWallet();\\r\\n        (bool success, ) = wallet.call{value: _amount}(\\\"\\\");\\r\\n        if (!success) revert test__TransferFailed();\\r\\n    }\\r\\n\\r\\n    //@temp function, the only will deposit steth in the contract, so remove this function later after testing\\r\\n    function test() external payable {\\r\\n        IERC20(stEth).submit{value: msg.value}(address(0));\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"test__NotEnoughTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"test__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"test__ValueCantBeZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stEth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeStEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "TestD", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007aa433f3255c595f2e1c29a11a341a349211fe3c0000000000000000000000007b88501622b85ffa4aa66920b99cfbe0264e19c9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}