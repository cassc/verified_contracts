{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/ENSUltraBulk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\npragma solidity ~0.8.17;\\n\\nimport \\\"./IETHRegistrarController.sol\\\";\\nimport \\\"./IUltraBulkRenewal.sol\\\";\\nimport \\\"solmate/auth/Owned.sol\\\";\\n\\ncontract UltraBulk is IUltraBulkRenewal, Owned {\\n    IETHRegistrarController public controller;\\n\\n    constructor(IETHRegistrarController _controller) Owned(msg.sender) {\\n        controller = _controller;\\n    }\\n\\n    function renewAll(\\n        string[] calldata names,\\n        uint256 duration,\\n        uint256 price\\n    ) external payable override {\\n        uint256 length = names.length;\\n        uint256 i = 0;\\n\\n        uint256 total = price * length;\\n        require(msg.value > total, \\\"insufficient balance\\\");\\n\\n        while (i < length) {\\n            controller.renew{value: price}(names[i], duration);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function multiCommit(\\n        bytes32[] calldata commitments\\n    ) external payable {\\n        uint256 length = commitments.length;\\n        uint256 i = 0;\\n        while (i < length) {\\n            controller.commit(commitments[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function multiRegisterWithAddress(\\n        string[] calldata names,\\n        address[] calldata owners,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        address addr\\n    ) external payable {\\n        multiRegisterInternal(names, owners, duration, secret, resolver, addr);\\n    }\\n\\n    function multiRegister(\\n        string[] calldata names,\\n        address[] calldata owners,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver\\n    ) external payable {\\n        multiRegisterInternal(names, owners, duration, secret, resolver, address(0));\\n    }\\n\\n    function multiRegisterInternal(\\n        string[] calldata names,\\n        address[] calldata owners,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        address addr\\n    ) internal {\\n        require(names.length == owners.length, \\\"names and owners length mismatch\\\");\\n\\n        uint256 v = controller.rentPrice(names[0], duration);\\n\\n        uint256 length = names.length;\\n        uint256 i = 0;\\n\\n        uint256 total = v * length;\\n        require(msg.value > total, \\\"insufficient balance\\\");\\n\\n        while (i < length) {\\n            controller.registerWithConfig{value: v}(names[i], owners[i], duration, secret, resolver, addr);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function ethcall(\\n        address to,\\n        bytes calldata data\\n    ) external payable onlyOwner {\\n        (bool success, ) = to.call{value: msg.value}(data);\\n        require(success, \\\"ethcall failed\\\");\\n    }\\n\\n    function refund() external payable {\\n        payable(owner).transfer(address(this).balance);\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\"\r\n    },\r\n    \"src/IETHRegistrarController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ~0.8.17;\\n\\ninterface IETHRegistrarController {\\n    function renew(string calldata name, uint256 duration) external payable;\\n\\n    function rentPrice(\\n        string memory name,\\n        uint256 duration\\n    ) external view returns (uint256 price);\\n\\n    function makeCommitment(\\n        string memory name,\\n        address owner,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        bytes[] calldata data,\\n        bool reverseRecord,\\n        uint16 ownerControlledFuses\\n    ) external pure returns (bytes32);\\n\\n    function commit(bytes32 commitment) external;\\n\\n    function makeCommitmentWithConfig(\\n        string memory name,\\n        address owner,\\n        bytes32 secret,\\n        address resolver,\\n        address addr\\n    ) external pure returns (bytes32);\\n\\n    function registerWithConfig(\\n        string memory name,\\n        address owner,\\n        uint duration,\\n        bytes32 secret,\\n        address resolver,\\n        address addr\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"src/IUltraBulkRenewal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPLv3\\npragma solidity ~0.8.17;\\n\\ninterface IUltraBulkRenewal {\\n    function renewAll(\\n        string[] calldata names,\\n        uint256 duration,\\n        uint256 price\\n    ) external payable;\\n\\n    function refund() external payable;\\n\\n    function multiCommit(\\n        bytes32[] calldata commitments\\n    ) external payable;\\n\\n    function multiRegisterWithAddress(\\n        string[] calldata names,\\n        address[] calldata owners,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver,\\n        address addr\\n    ) external payable;\\n\\n    function multiRegister(\\n        string[] calldata names,\\n        address[] calldata owners,\\n        uint256 duration,\\n        bytes32 secret,\\n        address resolver\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"lib/solmate/src/auth/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"solmate/=lib/solmate/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IETHRegistrarController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IETHRegistrarController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ethcall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"commitments\",\"type\":\"bytes32[]\"}],\"name\":\"multiCommit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"multiRegister\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"secret\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"multiRegisterWithAddress\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"renewAll\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "UltraBulk", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000283af0b28c62c092c9727f1ee09c02ca627eb7f5", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}