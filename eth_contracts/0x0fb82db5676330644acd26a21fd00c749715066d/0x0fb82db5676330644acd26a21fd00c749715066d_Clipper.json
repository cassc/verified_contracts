{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/abaci.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n/// abaci.sol -- price decrease functions for auctions\\r\\n\\r\\n// Copyright (C) 2020-2022 Dai Foundation\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published\\r\\n// by the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\n\\r\\ninterface Abacus {\\r\\n    // 1st arg: initial price               [ray]\\r\\n    // 2nd arg: seconds since auction start [seconds]\\r\\n    // returns: current auction price       [ray]\\r\\n    function price(uint256, uint256) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract LinearDecrease is Initializable, Abacus {\\r\\n\\r\\n    // --- Auth ---\\r\\n    mapping (address => uint256) public wards;\\r\\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\\r\\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\\r\\n    modifier auth {\\r\\n        require(wards[msg.sender] == 1, \\\"LinearDecrease/not-authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- Data ---\\r\\n    uint256 public tau;  // Seconds after auction start when the price reaches zero [seconds]\\r\\n\\r\\n    // --- Events ---\\r\\n    event Rely(address indexed usr);\\r\\n    event Deny(address indexed usr);\\r\\n\\r\\n    event File(bytes32 indexed what, uint256 data);\\r\\n    \\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    // --- Constructor ---\\r\\n    constructor() { _disableInitializers(); }\\r\\n\\r\\n    // --- Init ---\\r\\n    function initialize() external initializer {\\r\\n        wards[msg.sender] = 1;\\r\\n        emit Rely(msg.sender);\\r\\n    }\\r\\n\\r\\n    // --- Administration ---\\r\\n    function file(bytes32 what, uint256 data) external auth {\\r\\n        if (what ==  \\\"tau\\\") tau = data;\\r\\n        else revert(\\\"LinearDecrease/file-unrecognized-param\\\");\\r\\n        emit File(what, data);\\r\\n    }\\r\\n\\r\\n    // --- Math ---\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            require((z = x + y) >= x);\\r\\n        }\\r\\n    }\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            require(y == 0 || (z = x * y) / y == x);\\r\\n        }\\r\\n    }\\r\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            z = x * y;\\r\\n            require(y == 0 || z / y == x);\\r\\n            z = z / RAY;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // Price calculation when price is decreased linearly in proportion to time:\\r\\n    // tau: The number of seconds after the start of the auction where the price will hit 0\\r\\n    // top: Initial price\\r\\n    // dur: current seconds since the start of the auction\\r\\n    //\\r\\n    // Returns y = top * ((tau - dur) / tau)\\r\\n    //\\r\\n    // Note the internal call to mul multiples by RAY, thereby ensuring that the rmul calculation\\r\\n    // which utilizes top and tau (RAY values) is also a RAY value.\\r\\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\\r\\n        if (dur >= tau) return 0;\\r\\n        return rmul(top, mul(tau - dur, RAY) / tau);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract StairstepExponentialDecrease is Initializable, Abacus {\\r\\n\\r\\n    // --- Auth ---\\r\\n    mapping (address => uint256) public wards;\\r\\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\\r\\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\\r\\n    modifier auth {\\r\\n        require(wards[msg.sender] == 1, \\\"StairstepExponentialDecrease/not-authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- Data ---\\r\\n    uint256 public step; // Length of time between price drops [seconds]\\r\\n    uint256 public cut;  // Per-step multiplicative factor     [ray]\\r\\n\\r\\n    // --- Events ---\\r\\n    event Rely(address indexed usr);\\r\\n    event Deny(address indexed usr);\\r\\n\\r\\n    event File(bytes32 indexed what, uint256 data);\\r\\n\\r\\n    // --- Constructor ---\\r\\n    constructor() { _disableInitializers(); }\\r\\n\\r\\n    // --- Init ---\\r\\n    // @notice: `cut` and `step` values must be correctly set for\\r\\n    //     this contract to return a valid price\\r\\n    function initialize() external initializer {\\r\\n        wards[msg.sender] = 1;\\r\\n        emit Rely(msg.sender);\\r\\n    }\\r\\n\\r\\n    // --- Administration ---\\r\\n    function file(bytes32 what, uint256 data) external auth {\\r\\n        if      (what ==  \\\"cut\\\") require((cut = data) <= RAY, \\\"StairstepExponentialDecrease/cut-gt-RAY\\\");\\r\\n        else if (what == \\\"step\\\") step = data;\\r\\n        else revert(\\\"StairstepExponentialDecrease/file-unrecognized-param\\\");\\r\\n        emit File(what, data);\\r\\n    }\\r\\n\\r\\n    // --- Math ---\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            z = x * y;\\r\\n            require(y == 0 || z / y == x);\\r\\n            z = z / RAY;\\r\\n        }\\r\\n    }\\r\\n    // optimized version from dss PR #78\\r\\n    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch n case 0 { z := b }\\r\\n            default {\\r\\n                switch x case 0 { z := 0 }\\r\\n                default {\\r\\n                    switch mod(n, 2) case 0 { z := b } default { z := x }\\r\\n                    let half := div(b, 2)  // for rounding.\\r\\n                    for { n := div(n, 2) } n { n := div(n,2) } {\\r\\n                        let xx := mul(x, x)\\r\\n                        if shr(128, x) { revert(0,0) }\\r\\n                        let xxRound := add(xx, half)\\r\\n                        if lt(xxRound, xx) { revert(0,0) }\\r\\n                        x := div(xxRound, b)\\r\\n                        if mod(n,2) {\\r\\n                            let zx := mul(z, x)\\r\\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\\r\\n                            let zxRound := add(zx, half)\\r\\n                            if lt(zxRound, zx) { revert(0,0) }\\r\\n                            z := div(zxRound, b)\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // top: initial price\\r\\n    // dur: seconds since the auction has started\\r\\n    // step: seconds between a price drop\\r\\n    // cut: cut encodes the percentage to decrease per step.\\r\\n    //   For efficiency, the values is set as (1 - (% value / 100)) * RAY\\r\\n    //   So, for a 1% decrease per step, cut would be (1 - 0.01) * RAY\\r\\n    //\\r\\n    // returns: top * (cut ^ dur)\\r\\n    //\\r\\n    //\\r\\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\\r\\n        return rmul(top, rpow(cut, dur / step, RAY));\\r\\n    }\\r\\n}\\r\\n\\r\\n// While an equivalent function can be obtained by setting step = 1 in StairstepExponentialDecrease,\\r\\n// this continous (i.e. per-second) exponential decrease has be implemented as it is more gas-efficient\\r\\n// than using the stairstep version with step = 1 (primarily due to 1 fewer SLOAD per price calculation).\\r\\ncontract ExponentialDecrease is Initializable, Abacus {\\r\\n\\r\\n    // --- Auth ---\\r\\n    mapping (address => uint256) public wards;\\r\\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\\r\\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\\r\\n    modifier auth {\\r\\n        require(wards[msg.sender] == 1, \\\"ExponentialDecrease/not-authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- Data ---\\r\\n    uint256 public cut;  // Per-second multiplicative factor [ray]\\r\\n\\r\\n    // --- Events ---\\r\\n    event Rely(address indexed usr);\\r\\n    event Deny(address indexed usr);\\r\\n\\r\\n    event File(bytes32 indexed what, uint256 data);\\r\\n\\r\\n    // --- Constructor ---\\r\\n    constructor() { _disableInitializers(); }\\r\\n\\r\\n    // --- Init ---\\r\\n    // @notice: `cut` value must be correctly set for\\r\\n    //     this contract to return a valid price\\r\\n    function initialize() external initializer {\\r\\n        wards[msg.sender] = 1;\\r\\n        emit Rely(msg.sender);\\r\\n    }\\r\\n\\r\\n    // --- Administration ---\\r\\n    function file(bytes32 what, uint256 data) external auth {\\r\\n        if      (what ==  \\\"cut\\\") require((cut = data) <= RAY, \\\"ExponentialDecrease/cut-gt-RAY\\\");\\r\\n        else revert(\\\"ExponentialDecrease/file-unrecognized-param\\\");\\r\\n        emit File(what, data);\\r\\n    }\\r\\n\\r\\n    // --- Math ---\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            z = x * y;\\r\\n            require(y == 0 || z / y == x);\\r\\n            z = z / RAY;\\r\\n        }\\r\\n    }\\r\\n    // optimized version from dss PR #78\\r\\n    function rpow(uint256 x, uint256 n, uint256 b) internal pure returns (uint256 z) {\\r\\n        assembly {\\r\\n            switch n case 0 { z := b }\\r\\n            default {\\r\\n                switch x case 0 { z := 0 }\\r\\n                default {\\r\\n                    switch mod(n, 2) case 0 { z := b } default { z := x }\\r\\n                    let half := div(b, 2)  // for rounding.\\r\\n                    for { n := div(n, 2) } n { n := div(n,2) } {\\r\\n                        let xx := mul(x, x)\\r\\n                        if shr(128, x) { revert(0,0) }\\r\\n                        let xxRound := add(xx, half)\\r\\n                        if lt(xxRound, xx) { revert(0,0) }\\r\\n                        x := div(xxRound, b)\\r\\n                        if mod(n,2) {\\r\\n                            let zx := mul(z, x)\\r\\n                            if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\\r\\n                            let zxRound := add(zx, half)\\r\\n                            if lt(zxRound, zx) { revert(0,0) }\\r\\n                            z := div(zxRound, b)\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // top: initial price\\r\\n    // dur: seconds since the auction has started\\r\\n    // cut: cut encodes the percentage to decrease per second.\\r\\n    //   For efficiency, the values is set as (1 - (% value / 100)) * RAY\\r\\n    //   So, for a 1% decrease per second, cut would be (1 - 0.01) * RAY\\r\\n    //\\r\\n    // returns: top * (cut ^ dur)\\r\\n    //\\r\\n    function price(uint256 top, uint256 dur) override external view returns (uint256) {\\r\\n        return rmul(top, rpow(cut, dur, RAY));\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/clip.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-or-later\\r\\n\\r\\n/// clip.sol -- Davos auction module 2.0\\r\\n\\r\\n// Copyright (C) 2020-2022 Dai Foundation\\r\\n//\\r\\n// This program is free software: you can redistribute it and/or modify\\r\\n// it under the terms of the GNU Affero General Public License as published\\r\\n// by the Free Software Foundation, either version 3 of the License, or\\r\\n// (at your option) any later version.\\r\\n//\\r\\n// This program is distributed in the hope that it will be useful,\\r\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\r\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\r\\n// GNU Affero General Public License for more details.\\r\\n//\\r\\n// You should have received a copy of the GNU Affero General Public License\\r\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\r\\n\\r\\n\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./interfaces/ClipperLike.sol\\\";\\r\\nimport \\\"./interfaces/VatLike.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"./interfaces/SpotLike.sol\\\";\\r\\nimport \\\"./interfaces/DogLike.sol\\\";\\r\\nimport { Abacus } from \\\"./abaci.sol\\\";\\r\\n\\r\\ninterface ClipperCallee {\\r\\n    function clipperCall(address, uint256, uint256, bytes calldata) external;\\r\\n}\\r\\n\\r\\ncontract Clipper is Initializable, ClipperLike {\\r\\n    // --- Auth ---\\r\\n    mapping (address => uint256) public wards;\\r\\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\\r\\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\\r\\n    modifier auth {\\r\\n        require(wards[msg.sender] == 1, \\\"Clipper/not-authorized\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // --- Data ---\\r\\n    bytes32 public ilk;   // Collateral type of this Clipper\\r\\n    VatLike public vat;   // Core CDP Engine\\r\\n\\r\\n    DogLike     public dog;      // Liquidation module\\r\\n    address     public vow;      // Recipient of davos raised in auctions\\r\\n    SpotLike public spotter;  // Collateral price module\\r\\n    Abacus  public calc;     // Current price calculator\\r\\n\\r\\n    uint256 public buf;    // Multiplicative factor to increase starting price                  [ray]\\r\\n    uint256 public tail;   // Time elapsed before auction reset                                 [seconds]\\r\\n    uint256 public cusp;   // Percentage drop before auction reset                              [ray]\\r\\n    uint64  public chip;   // Percentage of tab to suck from vow to incentivize keepers         [wad]\\r\\n    uint192 public tip;    // Flat fee to suck from vow to incentivize keepers                  [rad]\\r\\n    uint256 public chost;  // Cache the ilk dust times the ilk chop to prevent excessive SLOADs [rad]\\r\\n\\r\\n    uint256   public kicks;   // Total auctions\\r\\n    uint256[] public active;  // Array of active auction ids\\r\\n\\r\\n    mapping(uint256 => Sale) private _sales;\\r\\n\\r\\n    uint256 internal locked;\\r\\n\\r\\n    // Levels for circuit breaker\\r\\n    // 0: no breaker\\r\\n    // 1: no new kick()\\r\\n    // 2: no new kick() or redo()\\r\\n    // 3: no new kick(), redo(), or take()\\r\\n    uint256 public stopped;\\r\\n\\r\\n    // --- Events ---\\r\\n    event Rely(address indexed usr);\\r\\n    event Deny(address indexed usr);\\r\\n\\r\\n    event File(bytes32 indexed what, uint256 data);\\r\\n    event File(bytes32 indexed what, address data);\\r\\n\\r\\n    event Kick(\\r\\n        uint256 indexed id,\\r\\n        uint256 top,\\r\\n        uint256 tab,\\r\\n        uint256 lot,\\r\\n        address indexed usr,\\r\\n        address indexed kpr,\\r\\n        uint256 coin\\r\\n    );\\r\\n    event Take(\\r\\n        uint256 indexed id,\\r\\n        uint256 max,\\r\\n        uint256 price,\\r\\n        uint256 owe,\\r\\n        uint256 tab,\\r\\n        uint256 lot,\\r\\n        address indexed usr\\r\\n    );\\r\\n    event Redo(\\r\\n        uint256 indexed id,\\r\\n        uint256 top,\\r\\n        uint256 tab,\\r\\n        uint256 lot,\\r\\n        address indexed usr,\\r\\n        address indexed kpr,\\r\\n        uint256 coin\\r\\n    );\\r\\n\\r\\n    event Yank(uint256 id);\\r\\n    \\r\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\r\\n    // --- Constructor ---\\r\\n    constructor() { _disableInitializers(); }\\r\\n\\r\\n    // --- Init ---\\r\\n    function initialize(address vat_, address spotter_, address dog_, bytes32 ilk_) external initializer {\\r\\n        vat     = VatLike(vat_);\\r\\n        spotter = SpotLike(spotter_);\\r\\n        dog     = DogLike(dog_);\\r\\n        ilk     = ilk_;\\r\\n        buf     = RAY;\\r\\n        wards[msg.sender] = 1;\\r\\n        stopped = 0;\\r\\n        emit Rely(msg.sender);\\r\\n    }\\r\\n\\r\\n    // --- Synchronization ---\\r\\n    modifier lock {\\r\\n        require(locked == 0, \\\"Clipper/system-locked\\\");\\r\\n        locked = 1;\\r\\n        _;\\r\\n        locked = 0;\\r\\n    }\\r\\n\\r\\n    modifier isStopped(uint256 level) {\\r\\n        require(stopped < level, \\\"Clipper/stopped-incorrect\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function sales(uint256 id) override external view returns (Sale memory) {\\r\\n        return _sales[id];\\r\\n    }\\r\\n\\r\\n    // --- Administration ---\\r\\n    function file(bytes32 what, uint256 data) external auth lock {\\r\\n        if      (what == \\\"buf\\\")         buf = data;\\r\\n        else if (what == \\\"tail\\\")       tail = data;           // Time elapsed before auction reset\\r\\n        else if (what == \\\"cusp\\\")       cusp = data;           // Percentage drop before auction reset\\r\\n        else if (what == \\\"chip\\\")       chip = uint64(data);   // Percentage of tab to incentivize (max: 2^64 - 1 => 18.xxx WAD = 18xx%)\\r\\n        else if (what == \\\"tip\\\")         tip = uint192(data);  // Flat fee to incentivize keepers (max: 2^192 - 1 => 6.277T RAD)\\r\\n        else if (what == \\\"stopped\\\") stopped = data;           // Set breaker (0, 1, 2, or 3)\\r\\n        else revert(\\\"Clipper/file-unrecognized-param\\\");\\r\\n        emit File(what, data);\\r\\n    }\\r\\n    function file(bytes32 what, address data) external auth lock {\\r\\n        if (what == \\\"spotter\\\") spotter = SpotLike(data);\\r\\n        else if (what == \\\"dog\\\")    dog = DogLike(data);\\r\\n        else if (what == \\\"vow\\\")    vow = data;\\r\\n        else if (what == \\\"calc\\\")  calc = Abacus(data);\\r\\n        else revert(\\\"Clipper/file-unrecognized-param\\\");\\r\\n        emit File(what, data);\\r\\n    }\\r\\n\\r\\n    // --- Math ---\\r\\n    uint256 constant BLN = 10 **  9;\\r\\n    uint256 constant WAD = 10 ** 18;\\r\\n    uint256 constant RAY = 10 ** 27;\\r\\n\\r\\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        z = x <= y ? x : y;\\r\\n    }\\r\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            require((z = x + y) >= x);\\r\\n        }\\r\\n    }\\r\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            require((z = x - y) <= x);\\r\\n        }\\r\\n    }\\r\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            require(y == 0 || (z = x * y) / y == x);\\r\\n        }\\r\\n    }\\r\\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            z = mul(x, y) / WAD;\\r\\n        }\\r\\n    }\\r\\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            z = mul(x, y) / RAY;\\r\\n        }\\r\\n    }\\r\\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n        unchecked {\\r\\n            z = mul(x, RAY) / y;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // --- Auction ---\\r\\n\\r\\n    // get the price directly from the OSM\\r\\n    // Could get this from rmul(Vat.ilks(ilk).spot, Spotter.mat()) instead, but\\r\\n    // if mat has changed since the last poke, the resulting value will be\\r\\n    // incorrect.\\r\\n    function getFeedPrice() internal returns (uint256 feedPrice) {\\r\\n        (PipLike pip, ) = spotter.ilks(ilk);\\r\\n        (bytes32 val, bool has) = pip.peek();\\r\\n        require(has, \\\"Clipper/invalid-price\\\");\\r\\n        feedPrice = rdiv(mul(uint256(val), BLN), spotter.par());\\r\\n    }\\r\\n\\r\\n    // start an auction\\r\\n    // note: trusts the caller to transfer collateral to the contract\\r\\n    // The starting price `top` is obtained as follows:\\r\\n    //\\r\\n    //     top = val * buf / par\\r\\n    //\\r\\n    // Where `val` is the collateral's unitary value in USD, `buf` is a\\r\\n    // multiplicative factor to increase the starting price, and `par` is a\\r\\n    // reference per DAVOS.\\r\\n    function kick(\\r\\n        uint256 tab,  // Debt                   [rad]\\r\\n        uint256 lot,  // Collateral             [wad]\\r\\n        address usr,  // Address that will receive any leftover collateral\\r\\n        address kpr   // Address that will receive incentives\\r\\n    ) external auth lock isStopped(1) returns (uint256 id) {\\r\\n        // Input validation\\r\\n        require(tab  >          0, \\\"Clipper/zero-tab\\\");\\r\\n        require(lot  >          0, \\\"Clipper/zero-lot\\\");\\r\\n        require(usr != address(0), \\\"Clipper/zero-usr\\\");\\r\\n        id = ++kicks;\\r\\n        require(id   >          0, \\\"Clipper/overflow\\\");\\r\\n\\r\\n        active.push(id);\\r\\n\\r\\n        _sales[id].pos = active.length - 1;\\r\\n\\r\\n        _sales[id].tab = tab;\\r\\n        _sales[id].lot = lot;\\r\\n        _sales[id].usr = usr;\\r\\n        _sales[id].tic = uint96(block.timestamp);\\r\\n\\r\\n        uint256 top;\\r\\n        top = rmul(getFeedPrice(), buf);\\r\\n        require(top > 0, \\\"Clipper/zero-top-price\\\");\\r\\n        _sales[id].top = top;\\r\\n\\r\\n        // incentive to kick auction\\r\\n        uint256 _tip  = tip;\\r\\n        uint256 _chip = chip;\\r\\n        uint256 coin;\\r\\n        if (_tip > 0 || _chip > 0) {\\r\\n            coin = add(_tip, wmul(tab, _chip));\\r\\n            vat.suck(vow, kpr, coin);\\r\\n        }\\r\\n\\r\\n        emit Kick(id, top, tab, lot, usr, kpr, coin);\\r\\n    }\\r\\n\\r\\n    // Reset an auction\\r\\n    // See `kick` above for an explanation of the computation of `top`.\\r\\n    function redo(\\r\\n        uint256 id,  // id of the auction to reset\\r\\n        address kpr  // Address that will receive incentives\\r\\n    ) external auth lock isStopped(2) {\\r\\n        // Read auction data\\r\\n        address usr = _sales[id].usr;\\r\\n        uint96  tic = _sales[id].tic;\\r\\n        uint256 top = _sales[id].top;\\r\\n\\r\\n        require(usr != address(0), \\\"Clipper/not-running-auction\\\");\\r\\n\\r\\n        // Check that auction needs reset\\r\\n        // and compute current price [ray]\\r\\n        (bool done,) = status(tic, top);\\r\\n        require(done, \\\"Clipper/cannot-reset\\\");\\r\\n\\r\\n        uint256 tab   = _sales[id].tab;\\r\\n        uint256 lot   = _sales[id].lot;\\r\\n        _sales[id].tic = uint96(block.timestamp);\\r\\n\\r\\n        uint256 feedPrice = getFeedPrice();\\r\\n        top = rmul(feedPrice, buf);\\r\\n        require(top > 0, \\\"Clipper/zero-top-price\\\");\\r\\n        _sales[id].top = top;\\r\\n\\r\\n        // incentive to redo auction\\r\\n        uint256 _tip  = tip;\\r\\n        uint256 _chip = chip;\\r\\n        uint256 coin;\\r\\n        if (_tip > 0 || _chip > 0) {\\r\\n            uint256 _chost = chost;\\r\\n            if (tab >= _chost && mul(lot, feedPrice) >= _chost) {\\r\\n                coin = add(_tip, wmul(tab, _chip));\\r\\n                vat.suck(vow, kpr, coin);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit Redo(id, top, tab, lot, usr, kpr, coin);\\r\\n    }\\r\\n\\r\\n    // Buy up to `amt` of collateral from the auction indexed by `id`.\\r\\n    // \\r\\n    // Auctions will not collect more DAVOS than their assigned DAVOS target,`tab`;\\r\\n    // thus, if `amt` would cost more DAVOS than `tab` at the current price, the\\r\\n    // amount of collateral purchased will instead be just enough to collect `tab` DAVOS.\\r\\n    //\\r\\n    // To avoid partial purchases resulting in very small leftover auctions that will\\r\\n    // never be cleared, any partial purchase must leave at least `Clipper.chost`\\r\\n    // remaining DAVOS target. `chost` is an asynchronously updated value equal to\\r\\n    // (Vat.dust * Dog.chop(ilk) / WAD) where the values are understood to be determined\\r\\n    // by whatever they were when Clipper.upchost() was last called. Purchase amounts\\r\\n    // will be minimally decreased when necessary to respect this limit; i.e., if the\\r\\n    // specified `amt` would leave `tab < chost` but `tab > 0`, the amount actually\\r\\n    // purchased will be such that `tab == chost`.\\r\\n    //\\r\\n    // If `tab <= chost`, partial purchases are no longer possible; that is, the remaining\\r\\n    // collateral can only be purchased entirely, or not at all.\\r\\n    function take(\\r\\n        uint256 id,           // Auction id\\r\\n        uint256 amt,          // Upper limit on amount of collateral to buy  [wad]\\r\\n        uint256 max,          // Maximum acceptable price (DAVOS / collateral) [ray]\\r\\n        address who,          // Receiver of collateral and external call address\\r\\n        bytes calldata data   // Data to pass in external call; if length 0, no call is done\\r\\n    ) external auth lock isStopped(3) {\\r\\n\\r\\n        address usr = _sales[id].usr;\\r\\n        uint96  tic = _sales[id].tic;\\r\\n\\r\\n        require(usr != address(0), \\\"Clipper/not-running-auction\\\");\\r\\n\\r\\n        uint256 price;\\r\\n        {\\r\\n            bool done;\\r\\n            (done, price) = status(tic, _sales[id].top);\\r\\n\\r\\n            // Check that auction doesn't need reset\\r\\n            require(!done, \\\"Clipper/needs-reset\\\");\\r\\n        }\\r\\n\\r\\n        // Ensure price is acceptable to buyer\\r\\n        require(max >= price, \\\"Clipper/too-expensive\\\");\\r\\n\\r\\n        uint256 lot = _sales[id].lot;\\r\\n        uint256 tab = _sales[id].tab;\\r\\n        uint256 owe;\\r\\n\\r\\n        {\\r\\n            // Purchase as much as possible, up to amt\\r\\n            uint256 slice = min(lot, amt);  // slice <= lot\\r\\n\\r\\n            // DAVOS needed to buy a slice of this sale\\r\\n            owe = mul(slice, price);\\r\\n\\r\\n            // Don't collect more than tab of DAVOS\\r\\n            if (owe > tab) {\\r\\n                // Total debt will be paid\\r\\n                owe = tab;                  // owe' <= owe\\r\\n                // Adjust slice\\r\\n                slice = owe / price;        // slice' = owe' / price <= owe / price == slice <= lot\\r\\n            } else if (owe < tab && slice < lot) {\\r\\n                // If slice == lot => auction completed => dust doesn't matter\\r\\n                uint256 _chost = chost;\\r\\n                if (tab - owe < _chost) {    // safe as owe < tab\\r\\n                    // If tab <= chost, buyers have to take the entire lot.\\r\\n                    require(tab > _chost, \\\"Clipper/no-partial-purchase\\\");\\r\\n                    // Adjust amount to pay\\r\\n                    owe = tab - _chost;      // owe' <= owe\\r\\n                    // Adjust slice\\r\\n                    slice = owe / price;     // slice' = owe' / price < owe / price == slice < lot\\r\\n                }\\r\\n            }\\r\\n\\r\\n            // Calculate remaining tab after operation\\r\\n            tab = tab - owe;  // safe since owe <= tab\\r\\n            // Calculate remaining lot after operation\\r\\n            lot = lot - slice;\\r\\n\\r\\n            // Send collateral to who\\r\\n            vat.flux(ilk, address(this), who, slice);\\r\\n\\r\\n            // Do external call (if data is defined) but to be\\r\\n            // extremely careful we don't allow to do it to the two\\r\\n            // contracts which the Clipper needs to be authorized\\r\\n            DogLike dog_ = dog;\\r\\n            if (data.length > 0 && who != address(vat) && who != address(dog_)) {\\r\\n                ClipperCallee(who).clipperCall(msg.sender, owe, slice, data);\\r\\n            }\\r\\n\\r\\n            // Get DAVOS from caller\\r\\n            vat.move(msg.sender, vow, owe);\\r\\n\\r\\n            // Removes DAVOS out for liquidation from accumulator\\r\\n            dog_.digs(ilk, lot == 0 ? tab + owe : owe);\\r\\n        }\\r\\n\\r\\n        if (lot == 0) {\\r\\n            _remove(id);\\r\\n        } else if (tab == 0) {\\r\\n            vat.flux(ilk, address(this), usr, lot);\\r\\n            _remove(id);\\r\\n        } else {\\r\\n            _sales[id].tab = tab;\\r\\n            _sales[id].lot = lot;\\r\\n        }\\r\\n\\r\\n        emit Take(id, max, price, owe, tab, lot, usr);\\r\\n    }\\r\\n\\r\\n    function _remove(uint256 id) internal {\\r\\n        uint256 _move    = active[active.length - 1];\\r\\n        if (id != _move) {\\r\\n            uint256 _index   = _sales[id].pos;\\r\\n            active[_index]   = _move;\\r\\n            _sales[_move].pos = _index;\\r\\n        }\\r\\n        active.pop();\\r\\n        delete _sales[id];\\r\\n    }\\r\\n\\r\\n    // The number of active auctions\\r\\n    function count() external view returns (uint256) {\\r\\n        return active.length;\\r\\n    }\\r\\n\\r\\n    // Return the entire array of active auctions\\r\\n    function list() external view returns (uint256[] memory) {\\r\\n        return active;\\r\\n    }\\r\\n\\r\\n    // Externally returns boolean for if an auction needs a redo and also the current price\\r\\n    function getStatus(uint256 id) external view returns (bool needsRedo, uint256 price, uint256 lot, uint256 tab) {\\r\\n        // Read auction data\\r\\n        address usr = _sales[id].usr;\\r\\n        uint96  tic = _sales[id].tic;\\r\\n\\r\\n        bool done;\\r\\n        (done, price) = status(tic, _sales[id].top);\\r\\n\\r\\n        needsRedo = usr != address(0) && done;\\r\\n        lot = _sales[id].lot;\\r\\n        tab = _sales[id].tab;\\r\\n    }\\r\\n\\r\\n    // Internally returns boolean for if an auction needs a redo\\r\\n    function status(uint96 tic, uint256 top) internal view returns (bool done, uint256 price) {\\r\\n        price = calc.price(top, sub(block.timestamp, tic));\\r\\n        done  = (sub(block.timestamp, tic) > tail || rdiv(price, top) < cusp);\\r\\n    }\\r\\n\\r\\n    // Public function to update the cached dust*chop value.\\r\\n    function upchost() external {\\r\\n        (,,,, uint256 _dust) = VatLike(vat).ilks(ilk);\\r\\n        chost = wmul(_dust, dog.chop(ilk));\\r\\n    }\\r\\n\\r\\n    // Cancel an auction during ES or via governance action.\\r\\n    function yank(uint256 id) external auth lock {\\r\\n        require(_sales[id].usr != address(0), \\\"Clipper/not-running-auction\\\");\\r\\n        dog.digs(ilk, _sales[id].tab);\\r\\n        vat.flux(ilk, address(this), msg.sender, _sales[id].lot);\\r\\n        _remove(id);\\r\\n        emit Yank(id);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ClipperLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nstruct Sale {\\r\\n    uint256 pos; // Index in active array\\r\\n    uint256 tab; // Davos to raise       [rad]\\r\\n    uint256 lot; // collateral to sell [wad]\\r\\n    address usr; // Liquidated CDP\\r\\n    uint96 tic; // Auction start time\\r\\n    uint256 top; // Starting price     [ray]\\r\\n}\\r\\n\\r\\ninterface ClipperLike {\\r\\n    function ilk() external view returns (bytes32);\\r\\n\\r\\n    function kick(\\r\\n        uint256 tab,\\r\\n        uint256 lot,\\r\\n        address usr,\\r\\n        address kpr\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function take(\\r\\n        uint256 id,\\r\\n        uint256 amt,\\r\\n        uint256 max,\\r\\n        address who,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function redo(uint256 id, address kpr) external;\\r\\n\\r\\n    function upchost() external;\\r\\n\\r\\n    function getStatus(uint256 id) external view returns (bool, uint256, uint256, uint256);\\r\\n\\r\\n    function kicks() external view returns (uint256);\\r\\n\\r\\n    function count() external view returns (uint256);\\r\\n\\r\\n    function list() external view returns (uint256[] memory);\\r\\n\\r\\n    function sales(uint256 auctionId) external view returns (Sale memory);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/DogLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface DogLike {\\r\\n\\r\\n       // --- Administration ---\\r\\n    function file(bytes32 what, address data) external;\\r\\n    function file(bytes32 what, uint256 data) external;\\r\\n    function file(bytes32 ilk, bytes32 what, uint256 data) external;\\r\\n    function file(bytes32 ilk, bytes32 what, address clip) external;\\r\\n\\r\\n    function chop(bytes32 ilk) external view returns (uint256);\\r\\n\\r\\n    // --- CDP Liquidation: all bark and no bite ---\\r\\n    //\\r\\n    // Liquidate a Vault and start a Dutch auction to sell its collateral for DAVOS.\\r\\n    //\\r\\n    // The third argument is the address that will receive the liquidation reward, if any.\\r\\n    //\\r\\n    // The entire Vault will be liquidated except when the target amount of DAVOS to be raised in\\r\\n    // the resulting auction (debt of Vault + liquidation penalty) causes either Dirt to exceed\\r\\n    // Hole or ilk.dirt to exceed ilk.hole by an economically significant amount. In that\\r\\n    // case, a partial liquidation is performed to respect the global and per-ilk limits on\\r\\n    // outstanding DAVOS target. The one exception is if the resulting auction would likely\\r\\n    // have too little collateral to be interesting to Keepers (debt taken from Vault < ilk.dust),\\r\\n    // in which case the function reverts. Please refer to the code and comments within if\\r\\n    // more detail is desired.\\r\\n    function bark(bytes32 ilk, address urn, address kpr) external returns (uint256 id);\\r\\n\\r\\n    function digs(bytes32 ilk, uint256 rad) external;\\r\\n\\r\\n    function cage() external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/PipLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface PipLike {\\r\\n    function peek() external view returns (bytes32, bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/SpotLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\nimport \\\"./PipLike.sol\\\";\\r\\n\\r\\ninterface SpotLike {\\r\\n    function ilks(bytes32) external view returns (PipLike, uint256);\\r\\n\\r\\n    function poke(bytes32) external;\\r\\n\\r\\n    function file(bytes32 ilk, bytes32 what, uint data) external;\\r\\n\\r\\n    function par() external returns (uint256);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/VatLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.10;\\r\\n\\r\\ninterface VatLike {\\r\\n    function init(bytes32 ilk) external;\\r\\n\\r\\n    function hope(address usr) external;\\r\\n\\r\\n    function nope(address usr) external;\\r\\n\\r\\n    function rely(address usr) external;\\r\\n\\r\\n    function deny(address usr) external;\\r\\n\\r\\n    function move(address src, address dst, uint256 rad) external;\\r\\n\\r\\n    function behalf(address bit, address usr) external;\\r\\n\\r\\n    function frob(bytes32 i, address u, address v, address w, int dink, int dart) external;\\r\\n\\r\\n    function flux(bytes32 ilk, address src, address dst, uint256 wad) external;\\r\\n\\r\\n    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\\r\\n\\r\\n    function fold(bytes32 i, address u, int rate) external;\\r\\n\\r\\n    function gem(bytes32, address) external view returns (uint256);\\r\\n\\r\\n    function davos(address) external view returns (uint256);\\r\\n\\r\\n    function urns(bytes32, address) external view returns (uint256, uint256);\\r\\n\\r\\n    function file(bytes32, bytes32, uint) external;\\r\\n\\r\\n    function sin(address) external view returns (uint256);\\r\\n\\r\\n    function heal(uint rad) external;\\r\\n\\r\\n    function suck(address u, address v, uint rad) external;\\r\\n\\r\\n    function grab(bytes32,address,address,address,int256,int256) external;\\r\\n\\r\\n    function slip(bytes32,address,int) external;\\r\\n\\r\\n    function live() external returns(uint256);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kpr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"}],\"name\":\"Kick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"kpr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"coin\",\"type\":\"uint256\"}],\"name\":\"Redo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"owe\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Take\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"Yank\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"active\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"calc\",\"outputs\":[{\"internalType\":\"contract Abacus\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"count\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cusp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dog\",\"outputs\":[{\"internalType\":\"contract DogLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"needsRedo\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ilk\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vat_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spotter_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dog_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"ilk_\",\"type\":\"bytes32\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"kpr\",\"type\":\"address\"}],\"name\":\"kick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kicks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"list\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"kpr\",\"type\":\"address\"}],\"name\":\"redo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"sales\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"pos\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tab\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"tic\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"top\",\"type\":\"uint256\"}],\"internalType\":\"struct Sale\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract SpotLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tail\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"take\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tip\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upchost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vow\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"yank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Clipper", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}