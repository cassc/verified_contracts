{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n/**\r\n * @title PurpleCoin\r\n * @dev A simple ERC20 token \r\n * PURPLE/MONG Pair\r\n * PURPLE/PEPE Pair\r\n */\r\ncontract PurpleCoin {\r\n    string public name = \"Purple Coin\";\r\n    string public symbol = \"PURPLE\";\r\n    uint256 public constant totalSupply = 420_690_000_000 * 10 ** 18;\r\n    uint8 public constant decimals = 18;\r\n    address public taxWallet = 0x72E61aE4aE17bE6c0cE55B51e04C1E193cE29Fe9;\r\n    uint256 public constant TAX_PERCENT_BASIS = 0;\r\n    mapping(address => uint256) private balances;\r\n    mapping(address => mapping(address => uint256)) private allowed;\r\n    address private _owner;\r\n\r\n    error TransferToZeroAddress(address _address);\r\n    error InsufficientBalance(uint256 _balance, uint256 _value);\r\n    error InsufficientAllowance(uint256 _allowance, uint256 _value);\r\n\r\n    error CallerIsNotTheOwner(address _caller);\r\n\r\n    /**\r\n     * @dev Constructor that sets the initial balance and tax wallet address.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(msg.sender);\r\n        balances[msg.sender] = totalSupply;\r\n        emit Transfer(address(0), msg.sender, totalSupply);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the balance of the given address.\r\n     * @param _holder The address to query the balance of.\r\n     * @return balance The balance of the specified address.\r\n     */\r\n    function balanceOf(address _holder) public view returns (uint256 balance) {\r\n        return balances[_holder];\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens to a specified address after applying the tax, if applicable.\r\n     * @param _to The address to transfer to.\r\n     * @param _value The amount of tokens to be transferred.\r\n     * @return success A boolean that indicates if the operation was successful.\r\n     */\r\n    function transfer(\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        if (_to == address(0)) {\r\n            revert TransferToZeroAddress(_to);\r\n        }\r\n        if (_value > balances[msg.sender]) {\r\n            revert InsufficientBalance(balances[msg.sender], _value);\r\n        }\r\n        (uint256 taxAmount, uint256 taxedAmount) = getTaxedAmount(\r\n            _value,\r\n            msg.sender == taxWallet\r\n        );\r\n        balances[msg.sender] -= _value;\r\n        balances[taxWallet] += taxAmount; // tax wallet gets the tax amount\r\n        balances[_to] += taxedAmount;\r\n        emit Transfer(msg.sender, _to, taxedAmount);\r\n        emit Transfer(msg.sender, taxWallet, taxAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers tokens from one address to another after applying the tax, if applicable.\r\n     * @param _from The address which you want to send tokens from.\r\n     * @param _to The address which you want to transfer to.\r\n     * @param _value The amount of tokens to be transferred.\r\n     * @return success A boolean that indicates if the operation was successful.\r\n     */\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        if (_to == address(0)) {\r\n            revert TransferToZeroAddress(_to);\r\n        }\r\n        if (_value > balances[_from]) {\r\n            revert InsufficientBalance(balances[_from], _value);\r\n        }\r\n        if (_value > allowed[_from][msg.sender]) {\r\n            revert InsufficientAllowance(allowed[_from][msg.sender], _value);\r\n        }\r\n        (uint256 taxAmount, uint256 taxedAmount) = getTaxedAmount(\r\n            _value,\r\n            _from == taxWallet\r\n        );\r\n        balances[_from] -= _value;\r\n        balances[taxWallet] += taxAmount; // tax wallet gets the tax amount\r\n        allowed[_from][msg.sender] -= _value;\r\n        balances[_to] += taxedAmount;\r\n        emit Transfer(_from, _to, taxedAmount);\r\n        emit Transfer(_from, taxWallet, taxAmount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Approves the passed address to spend the specified amount of tokens on behalf of msg.sender.\r\n     * @param _spender The address which will spend the funds.\r\n     * @param _value The amount of tokens to be spent.\r\n     * @return success A boolean that indicates if the operation was successful.\r\n     */\r\n    function approve(\r\n        address _spender,\r\n        uint256 _value\r\n    ) public returns (bool success) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens allowed by the owner (_holder) for a spender (_spender) to spend.\r\n     * @param _holder The address which owns the tokens.\r\n     * @param _spender The address which will spend the tokens.\r\n     * @return remaining The amount of tokens still available for the spender.\r\n     */\r\n    function allowance(\r\n        address _holder,\r\n        address _spender\r\n    ) public view returns (uint256 remaining) {\r\n        return allowed[_holder][_spender];\r\n    }\r\n\r\n    /**\r\n     * @dev Calculates the tax amount and the taxed amount based on the given value and tax exemption status.\r\n     * @param _value The original amount to be taxed.\r\n     * @param _isTaxWallet Indicates if the tax wallet is exempt from taxation.\r\n     * @return taxAmount The calculated tax amount.\r\n     * @return taxedAmount The remaining amount after taxation.\r\n     */\r\n    function getTaxedAmount(\r\n        uint256 _value,\r\n        bool _isTaxWallet\r\n    ) internal pure returns (uint256 taxAmount, uint256 taxedAmount) {\r\n        taxAmount = _isTaxWallet ? 0 : (_value * TAX_PERCENT_BASIS) / 10000;\r\n        taxedAmount = _value - taxAmount;\r\n    }\r\n\r\n    /**\r\n     * @dev Sets the tax wallet address. Can only be called by the contract owner.\r\n     * @param _taxWallet The address to be set as the tax wallet.\r\n     */\r\n    function setTaxWallet(address _taxWallet) public onlyOwner {\r\n        taxWallet = _taxWallet;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != msg.sender) {\r\n            revert CallerIsNotTheOwner(msg.sender);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert TransferToZeroAddress(newOwner);\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\r\n    event Approval(\r\n        address indexed _owner,\r\n        address indexed _spender,\r\n        uint256 _value\r\n    );\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"}],\"name\":\"CallerIsNotTheOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TransferToZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TAX_PERCENT_BASIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_taxWallet\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "PurpleCoin", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://a22baf77671bac7151270728122974cc6ff6da68b9c2acd49ee8768af9d284cb"}