{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DMOMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.9 <0.9.0;\\r\\n\\r\\ninterface IDMOCollection {\\r\\n    function mint(uint256 _amount) external payable;\\r\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external payable;\\r\\n    function totalSupply() external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IERC721Receiver  {\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\ncontract DMOMinter is IERC721Receiver {\\r\\n    IDMOCollection private tokenContract = IDMOCollection(0xa275Cf78325EdCbE081b7bFeff9Ce3955fFEd3F8);\\r\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    /**\\r\\n     * @dev Mint tokens to another address\\r\\n     * @param _amount the amount of tokens to mint\\r\\n     * @param _address the recipient address of the minted tokens\\r\\n     */\\r\\n    function mint(uint256 _amount, address _address) external payable {\\r\\n        uint256 _lastTokenID = tokenContract.totalSupply(); \\r\\n        tokenContract.mint{value: msg.value}(_amount);\\r\\n        for(uint256 i = 0; i < _amount; i++) {\\r\\n            tokenContract.safeTransferFrom(address(this), _address, _lastTokenID + i);\\r\\n        }\\r\\n    }\\r\\n    /**\\r\\n     * @dev Handle the receipt of an NFT\\r\\n     * @param operator The address which called `safeTransferFrom` function\\r\\n     * @param from The address which previously owned the token\\r\\n     * @param tokenId The NFT identifier which is being transferred\\r\\n     * @param data Additional data with no specified format\\r\\n     * @return bytes4 `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external override returns (bytes4) {       \\r\\n        return _ERC721_RECEIVED;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DMOMinter", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}