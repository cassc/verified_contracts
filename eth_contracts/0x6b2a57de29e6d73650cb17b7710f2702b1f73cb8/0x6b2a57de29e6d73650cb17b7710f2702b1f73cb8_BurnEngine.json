{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BurnEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- BCOM --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./OwnableMaster.sol\\\";\\nimport \\\"./InterfaceHub/IVerseToken.sol\\\";\\nimport \\\"./TransferHub/TransferHelper.sol\\\";\\n\\nerror NoTokens();\\nerror InvalidValue();\\n\\ncontract BurnEngine is OwnableMaster, TransferHelper {\\n\\n    uint256 public burnCost;\\n    IVerseToken public immutable VERSE_TOKEN;\\n\\n    event TokensBurned(\\n        address indexed burner,\\n        uint256 amount\\n    );\\n\\n    event BurnCostUpdated(\\n        address indexed manager,\\n        uint256 newBurnCost\\n    );\\n\\n    constructor(\\n        uint256 _burnCost,\\n        IVerseToken _verseToken\\n    )\\n        OwnableMaster(\\n            msg.sender\\n        )\\n    {\\n        burnCost = _burnCost;\\n        VERSE_TOKEN = _verseToken;\\n    }\\n\\n    function adminBurn()\\n        external\\n        onlyMaster\\n    {\\n        _burn();\\n    }\\n\\n    function userBurn()\\n        external\\n    {\\n        _safeTransferFrom(\\n            address(VERSE_TOKEN),\\n            msg.sender,\\n            address(this),\\n            burnCost\\n        );\\n\\n        _burn();\\n    }\\n\\n    function _burn()\\n        private\\n    {\\n        uint256 balance = VERSE_TOKEN.balanceOf(\\n            address(this)\\n        );\\n\\n        if (balance == 0) {\\n            revert NoTokens();\\n        }\\n\\n        VERSE_TOKEN.burn(\\n            balance\\n        );\\n\\n        emit TokensBurned(\\n            msg.sender,\\n            balance\\n        );\\n    }\\n\\n    function setBurnCost(\\n        uint256 _newBurnCost\\n    )\\n        external\\n        onlyMaster\\n    {\\n        if (_newBurnCost == 0) {\\n            revert InvalidValue();\\n        }\\n\\n        burnCost = _newBurnCost;\\n\\n        emit BurnCostUpdated(\\n            msg.sender,\\n            _newBurnCost\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHub/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./CallOptionalReturn.sol\\\";\\n\\ncontract TransferHelper is CallOptionalReturn {\\n\\n    bytes4 private constant transferSelector = IERC20\\n        .transfer\\n        .selector;\\n\\n    bytes4 private constant transferFromSelector = IERC20\\n        .transferFrom\\n        .selector;\\n\\n    /**\\n     * @dev\\n     * Allows to execute safe transfer for a token\\n     */\\n    function _safeTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        _callOptionalReturn(\\n            _token,\\n            abi.encodeWithSelector(\\n                transferSelector,\\n                _to,\\n                _value\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev\\n     * Allows to execute safe transferFrom for a token\\n     */\\n    function _safeTransferFrom(\\n        address _token,\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    )\\n        internal\\n    {\\n        _callOptionalReturn(\\n            _token,\\n            abi.encodeWithSelector(\\n                transferFromSelector,\\n                _from,\\n                _to,\\n                _value\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IVerseToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- BCOM --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IVerseToken is IERC20 {\\n\\n    function burn(\\n        uint256 _value\\n    )\\n        external;\\n}\\n\"\r\n    },\r\n    \"contracts/OwnableMaster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- BCOM --\\n\\npragma solidity =0.8.21;\\n\\nerror NoValue();\\nerror NotMaster();\\nerror NotProposed();\\n\\ncontract OwnableMaster {\\n\\n    address public master;\\n    address public proposedMaster;\\n\\n    address internal constant ZERO_ADDRESS = address(0x0);\\n\\n    modifier onlyProposed() {\\n        _onlyProposed();\\n        _;\\n    }\\n\\n    function _onlyMaster()\\n        private\\n        view\\n    {\\n        if (msg.sender == master) {\\n            return;\\n        }\\n\\n        revert NotMaster();\\n    }\\n\\n    modifier onlyMaster() {\\n        _onlyMaster();\\n        _;\\n    }\\n\\n    function _onlyProposed()\\n        private\\n        view\\n    {\\n        if (msg.sender == proposedMaster) {\\n            return;\\n        }\\n\\n        revert NotProposed();\\n    }\\n\\n    event MasterProposed(\\n        address indexed proposer,\\n        address indexed proposedMaster\\n    );\\n\\n    event ClaimedOwnership(\\n        address indexed newMaster,\\n        address indexed previousMaster\\n    );\\n\\n    event RenouncedOwnership(\\n        address indexed previousMaster\\n    );\\n\\n    constructor(\\n        address _master\\n    ) {\\n        if (_master == ZERO_ADDRESS) {\\n            revert NoValue();\\n        }\\n        master = _master;\\n    }\\n\\n    /**\\n     * @dev Allows to propose next master.\\n     * Must be claimed by proposer.\\n     */\\n    function proposeOwner(\\n        address _proposedOwner\\n    )\\n        external\\n        onlyMaster\\n    {\\n        if (_proposedOwner == ZERO_ADDRESS) {\\n            revert NoValue();\\n        }\\n\\n        proposedMaster = _proposedOwner;\\n\\n        emit MasterProposed(\\n            msg.sender,\\n            _proposedOwner\\n        );\\n    }\\n\\n    /**\\n     * @dev Allows to claim master role.\\n     * Must be called by proposer.\\n     */\\n    function claimOwnership()\\n        external\\n        onlyProposed\\n    {\\n        master = proposedMaster;\\n\\n        emit ClaimedOwnership(\\n            master,\\n            msg.sender\\n        );\\n    }\\n\\n    /**\\n     * @dev Removes master role.\\n     * No ability to be in control.\\n     */\\n    function renounceOwnership()\\n        external\\n        onlyMaster\\n    {\\n        master = ZERO_ADDRESS;\\n        proposedMaster = ZERO_ADDRESS;\\n\\n        emit RenouncedOwnership(\\n            msg.sender\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TransferHub/CallOptionalReturn.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- BCOM --\\n\\npragma solidity =0.8.21;\\n\\nimport \\\"../InterfaceHub/IERC20.sol\\\";\\n\\nerror CallFailed();\\n\\ncontract CallOptionalReturn {\\n\\n    /**\\n     * @dev\\n     * Helper function to do low-level call\\n     */\\n    function _callOptionalReturn(\\n        address token,\\n        bytes memory data\\n    )\\n        internal\\n        returns (bool call)\\n    {\\n        (\\n            bool success,\\n            bytes memory returndata\\n        ) = token.call(\\n            data\\n        );\\n\\n        bool results = returndata.length == 0 || abi.decode(\\n            returndata,\\n            (bool)\\n        );\\n\\n        call = success\\n            && results\\n            && token.code.length > 0;\\n    }\\n}\"\r\n    },\r\n    \"contracts/InterfaceHub/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- BCOM --\\n\\npragma solidity =0.8.21;\\n\\ninterface IERC20 {\\n\\n    function totalSupply()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function balanceOf(\\n        address _account\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function transferFrom(\\n        address _sender,\\n        address _recipient,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function transfer(\\n        address _recipient,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    )\\n        external\\n        view\\n        returns (uint256);\\n\\n    function approve(\\n        address _spender,\\n        uint256 _amount\\n    )\\n        external\\n        returns (bool);\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n\\n    event Deposit(\\n        address indexed dst,\\n        uint wad\\n    );\\n\\n    event Withdrawal(\\n        address indexed src,\\n        uint wad\\n    );\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_burnCost\",\"type\":\"uint256\"},{\"internalType\":\"contract IVerseToken\",\"name\":\"_verseToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotMaster\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotProposed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"manager\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBurnCost\",\"type\":\"uint256\"}],\"name\":\"BurnCostUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newMaster\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMaster\",\"type\":\"address\"}],\"name\":\"ClaimedOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedMaster\",\"type\":\"address\"}],\"name\":\"MasterProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousMaster\",\"type\":\"address\"}],\"name\":\"RenouncedOwnership\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensBurned\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSE_TOKEN\",\"outputs\":[{\"internalType\":\"contract IVerseToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"master\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedOwner\",\"type\":\"address\"}],\"name\":\"proposeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proposedMaster\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newBurnCost\",\"type\":\"uint256\"}],\"name\":\"setBurnCost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"userBurn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "BurnEngine", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000249ca82617ec3dfb2589c4c17ab7ec9765350a18", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}