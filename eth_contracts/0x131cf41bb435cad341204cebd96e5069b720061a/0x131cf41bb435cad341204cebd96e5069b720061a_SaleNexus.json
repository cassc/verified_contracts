{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/SaleNexus.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n}\\r\\n\\r\\n\\r\\ninterface IERC20 {\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n}\\r\\n\\r\\ncontract SaleNexus is Pausable, ReentrancyGuard, Ownable{\\r\\n\\r\\n    /// Maps token address to priceFeed address\\r\\n    mapping(address => address) public priceFeeds;\\r\\n    /// Maps deposit token to allow or not\\r\\n    mapping(address => bool) public isAllowTokens;\\r\\n    \\r\\n    uint256 public feePercent; // decimal: 2    ex: if feePecent is 1.2% then it will become 120\\r\\n    address public treasury; // Corporte / Treasury Wallet (Crypto assets) \\r\\n    address public trading;  // Trading Wallet - (Fees %) \\r\\n    address public nexusHolder; // A holder of 50 holder\\r\\n\\r\\n    address public USEU;\\r\\n    address public EUUS;\\r\\n\\r\\n    /// price fee to get EUR/USD rate from forex market \\r\\n    address public eurUsdPriceFeed;\\r\\n\\r\\n    /// 1: buy, 2: sell, 3: both of them\\r\\n    /// if set 1, Nexus platform accepts only buying Nexus token by users\\r\\n    /// if set 2, Nexus platform accepts only selling Nexus token by users\\r\\n    /// if set 3, Nexus platform accepts both of them\\r\\n    uint256 public businessStatus; \\r\\n\\r\\n    error ZeroAddress();\\r\\n\\r\\n    event Exchange(address _inToken, uint256 inAmount, address _outToken, uint256 outAmount);\\r\\n\\r\\n    /// tokenAddresses should be not including Nexus tokens\\r\\n    constructor(address[] memory _tokenAddresses\\r\\n              , address[] memory _priceFeedAddresses\\r\\n              , address _eurUsdPriceFeed\\r\\n              , address _USEU\\r\\n              , address _EUUS\\r\\n              , address _treasury\\r\\n              , address _trading\\r\\n              , address _nexusHolder) {\\r\\n\\r\\n        /// initialize price feeds\\r\\n        for (uint256 i = 0; i < _priceFeedAddresses.length; i++) {\\r\\n            priceFeeds[_tokenAddresses[i]] = _priceFeedAddresses[i];\\r\\n        }\\r\\n        /// initialize to allow depositing tokens\\r\\n        for (uint256 i = 0; i < _priceFeedAddresses.length; i++) {\\r\\n            isAllowTokens[_tokenAddresses[i]] = true;\\r\\n        }\\r\\n        /// set EUR/USD price feed\\r\\n        eurUsdPriceFeed = _eurUsdPriceFeed;\\r\\n\\r\\n        /// set Nexus Token Address\\r\\n        USEU = _USEU;\\r\\n        EUUS = _EUUS;\\r\\n\\r\\n        /// if set 1, Nexus platform accepts only buying Nexus token by users\\r\\n        businessStatus = 1;\\r\\n        \\r\\n        /// 1% initially decimal: 2\\r\\n        feePercent = 100;\\r\\n\\r\\n        treasury = _treasury;\\r\\n        trading = _trading;\\r\\n        nexusHolder = _nexusHolder;\\r\\n    }\\r\\n\\r\\n    function getPriceByUSD(address _tokenAddress) public view returns (uint256) {\\r\\n        /// Get the latest token price from the Chainlink Price Feed\\r\\n        address priceFeed;\\r\\n        if (_tokenAddress == USEU || _tokenAddress == EUUS)\\r\\n            priceFeed = eurUsdPriceFeed;\\r\\n        else\\r\\n            priceFeed = priceFeeds[_tokenAddress];\\r\\n\\r\\n        require(priceFeed != address(0), \\\"PriceFeed data is invalid\\\");\\r\\n        (, int256 price, , , ) = AggregatorV3Interface(priceFeed).latestRoundData();\\r\\n        // Convert the price to uint256 and handle negative values\\r\\n        require(price > 0, \\\"Price data is invalid\\\");\\r\\n        uint256 tokenPrice = uint256(price);\\r\\n        if (_tokenAddress == USEU)\\r\\n            tokenPrice = uint256(10**16 / price);\\r\\n        return tokenPrice;\\r\\n    }\\r\\n\\r\\n    /// if _inToken address is 0 then it refers to Native token.\\r\\n    /// _inAmount : should inputBox * (1 + feePercent/10000) : ex 1.01\\r\\n    function exchange(address _inToken, uint256 _inAmount, address _outToken) external payable whenNotPaused nonReentrant{\\r\\n        require(_inToken != EUUS && _inToken != USEU && isAllowTokens[_inToken] == true, \\\"It's not allowed for deposit\\\");\\r\\n        require(_inToken == EUUS || _inToken == USEU || _outToken == EUUS || _outToken == USEU, \\\"Invalid Nexus Token address\\\");\\r\\n        require(_outToken != address(0), \\\"Use wrapped token(ERC20) for payout\\\");\\r\\n\\r\\n        if (businessStatus == 1) {\\r\\n            /// only buy\\r\\n            require(_outToken == EUUS || _outToken == USEU, \\\"Currently only available for purchase\\\");\\r\\n        } else if (businessStatus == 2) {\\r\\n            /// only sell\\r\\n            require(_inToken == EUUS || _inToken == USEU, \\\"Currently only available for sale\\\");\\r\\n        }\\r\\n\\r\\n        uint256 inAmount = _inAmount;\\r\\n        if (_inToken == address(0)) inAmount = msg.value;\\r\\n        require(inAmount > 0, \\\"Invalid deposit amount\\\");\\r\\n\\r\\n        uint256 feeAmount = inAmount * feePercent / (10000 + feePercent); // because feePercent decimal is 2\\r\\n        if(_inToken == address(0)) {\\r\\n            /// if deposit token is native\\r\\n            payable(trading).transfer(feeAmount);\\r\\n            payable(treasury).transfer(inAmount - feeAmount);\\r\\n        } else {\\r\\n            IERC20(_inToken).transferFrom(msg.sender, trading, feeAmount);\\r\\n            IERC20(_inToken).transferFrom(msg.sender, treasury, inAmount - feeAmount);\\r\\n        }\\r\\n\\r\\n        /// calculation amount of token to send to user\\r\\n        uint256 inTokenPrice = getPriceByUSD(_inToken);\\r\\n        uint256 outTokenPrice = getPriceByUSD(_outToken);\\r\\n        require(outTokenPrice > 0, \\\"Price data is invalid\\\");\\r\\n        uint256 outAmount = inTokenPrice * (inAmount - feeAmount) / outTokenPrice;\\r\\n        \\r\\n        if (_outToken == EUUS || _outToken == USEU) {\\r\\n            require(IERC20(_outToken).balanceOf(nexusHolder) >= outAmount, \\\"Insufficient balance of sale contract\\\");\\r\\n            IERC20(_outToken).transferFrom(nexusHolder, msg.sender, outAmount);\\r\\n        } else {\\r\\n            require(IERC20(_outToken).balanceOf(treasury) >= outAmount, \\\"Insufficient balance of sale contract\\\");\\r\\n            IERC20(_outToken).transferFrom(treasury, msg.sender, outAmount);\\r\\n        }\\r\\n\\r\\n        emit Exchange(_inToken, inAmount, _outToken, outAmount);\\r\\n    }\\r\\n\\r\\n    function updateBusinessStatus(uint256 _businessStatus) external onlyOwner {\\r\\n        require(_businessStatus > 0 && _businessStatus < 4, \\\"Invalid id of business status\\\");\\r\\n        businessStatus = _businessStatus;\\r\\n    }\\r\\n\\r\\n    function updateTrading(address _trading) external onlyOwner {\\r\\n        if (_trading == address(0)) revert ZeroAddress();\\r\\n        trading = _trading;\\r\\n    }\\r\\n\\r\\n    function updateTreasury(address _treasury) external onlyOwner {\\r\\n        if (_treasury == address(0)) revert ZeroAddress();\\r\\n        treasury = _treasury;\\r\\n    }\\r\\n    \\r\\n    /// Note: feePercent's decimal is 2, so if you want feePercent 1.5%, should input 150\\r\\n    function updateFeePercent(uint256 _feePercent) external onlyOwner {\\r\\n        feePercent = _feePercent;\\r\\n    }\\r\\n\\r\\n    function updateNexusHolder(address _nexusHolder) external onlyOwner {\\r\\n        if (_nexusHolder == address(0)) revert ZeroAddress();\\r\\n        nexusHolder = _nexusHolder;\\r\\n    }\\r\\n\\r\\n    function updateIsAllowTokens(address _tokenAddress, bool _status) external onlyOwner {\\r\\n        if (_tokenAddress == address(0)) revert ZeroAddress();\\r\\n        isAllowTokens[_tokenAddress] = _status;\\r\\n    }\\r\\n\\r\\n    function updatePriceFeeds(address _tokenAddress, address _priceFeedAddress) external onlyOwner {\\r\\n        if (_tokenAddress == address(0) || _priceFeedAddress == address(0)) revert ZeroAddress();\\r\\n        priceFeeds[_tokenAddress] = _priceFeedAddress;\\r\\n    }\\r\\n\\r\\n    function updateEurUsdPriceFeed(address _eurUsdPriceFeed) external onlyOwner {\\r\\n        if (_eurUsdPriceFeed == address(0)) revert ZeroAddress();\\r\\n        eurUsdPriceFeed = _eurUsdPriceFeed;\\r\\n    }\\r\\n\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokenAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_priceFeedAddresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_eurUsdPriceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_USEU\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_EUUS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trading\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nexusHolder\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"Exchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EUUS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USEU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"businessStatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eurUsdPriceFeed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"}],\"name\":\"exchange\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"getPriceByUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAllowTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nexusHolder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceFeeds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trading\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_businessStatus\",\"type\":\"uint256\"}],\"name\":\"updateBusinessStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_eurUsdPriceFeed\",\"type\":\"address\"}],\"name\":\"updateEurUsdPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"updateFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateIsAllowTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nexusHolder\",\"type\":\"address\"}],\"name\":\"updateNexusHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"name\":\"updatePriceFeeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trading\",\"type\":\"address\"}],\"name\":\"updateTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SaleNexus", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001c0000000000000000000000000b49f677943bc038e9857d61e7d053caa2c1734c1000000000000000000000000e07ecc676daf0b24b24a1c46c966d9c463984b38000000000000000000000000735acdedd91a80334ff72f07bff41e1eecf26677000000000000000000000000814b6dd7faea235a6134b6619caac14b8ab88be2000000000000000000000000f915f542771aa6028c3e5c2db5be8b963011e079000000000000000000000000d2851f4fd84eb22ee8bd6c22f870168d1054a9ac00000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000000000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000002260fac5e5542a773aa44fbcfedf7c193bc2c59900000000000000000000000000000000000000000000000000000000000000050000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b84190000000000000000000000003e7d1eab13ad0104d2750b8863b489d65364e32d0000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f60000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000f4030086522a5beea4988f8ca5b36dbc97bee88c", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}