{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/IUniswap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPair {\\n    function getReserves()\\n        external\\n        view\\n        returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n\\n    function token0() external view returns (address);\\n\\n    function sync() external;\\n}\\n\\ninterface IFactory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n\\n    function getPair(\\n        address tokenA,\\n        address tokenB\\n    ) external view returns (address pair);\\n}\\n\\ninterface IUniswapRouter {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"// Telegram : https://t.me/OnlyUp_Eth\\n// Twitter  : https://twitter.com/OnlyUp_eth\\n// Website  : https://onlyup.money\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./IUniswap.sol\\\";\\n\\nabstract contract ERC20Detailed is IERC20 {\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint8 _tokenDecimals\\n    ) {\\n        _name = _tokenName;\\n        _symbol = _tokenSymbol;\\n        _decimals = _tokenDecimals;\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n}\\n\\ncontract OnlyUP is ERC20Detailed, Ownable {\\n    uint256 public rebaseFrequency = 3 hours;\\n\\n    uint256 public nextRebase;\\n    uint256 public finalRebase;\\n\\n    bool public autoRebase = true;\\n    bool public rebaseStarted = false;\\n    uint256 public rebasesThisCycle;\\n    uint256 public lastRebaseThisCycle;\\n\\n    uint256 public maxAmount;\\n    uint256 public maxWallet;\\n\\n    address public taxWallet;\\n    uint256 public finalTax = 5;\\n\\n    uint256 private _initialTax = 25;\\n    uint256 private _reduceTaxAt = 25;\\n\\n    uint256 private _buyCount = 0;\\n    uint256 private _sellCount = 0;\\n\\n    uint8 private constant DECIMALS = 9;\\n    uint256 private constant INITIAL_TOKENS_SUPPLY =\\n        18_000_000_000_000 * 10 ** DECIMALS;\\n\\n    uint256 private constant FINAL_TOTAL_SUPPLY =\\n        2_000_000_000 * 10 ** DECIMALS;\\n    uint256 private constant TOTAL_PARTS =\\n        type(uint256).max - (type(uint256).max % INITIAL_TOKENS_SUPPLY);\\n\\n    event Rebase(uint256 indexed time, uint256 totalSupply);\\n    event RemovedLimits();\\n\\n    IUniswapRouter public router;\\n    address public pair;\\n\\n    bool public limitsInEffect = true;\\n    bool public tradingEnable = false;\\n\\n    uint256 private _totalSupply;\\n    uint256 private _partsPerToken;\\n\\n    uint256 private partsSwapThreshold = ((TOTAL_PARTS / 100000) * 25);\\n\\n    mapping(address => uint256) private _partBalances;\\n    mapping(address => mapping(address => uint256)) private _allowedTokens;\\n    mapping(address => bool) public isExcludedFromFees;\\n\\n    modifier validRecipient(address to) {\\n        require(to != address(0x0));\\n        _;\\n    }\\n\\n    bool inSwap;\\n\\n    modifier swapping() {\\n        inSwap = true;\\n        _;\\n        inSwap = false;\\n    }\\n\\n    constructor() ERC20Detailed(\\\"Only Up\\\", \\\"OLUP\\\", DECIMALS) {\\n        taxWallet = msg.sender;\\n\\n        finalRebase = type(uint256).max;\\n        nextRebase = type(uint256).max;\\n\\n        router = IUniswapRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n        _totalSupply = INITIAL_TOKENS_SUPPLY;\\n        _partBalances[msg.sender] = TOTAL_PARTS;\\n        _partsPerToken = TOTAL_PARTS / (_totalSupply);\\n\\n        isExcludedFromFees[address(this)] = true;\\n        isExcludedFromFees[address(router)] = true;\\n        isExcludedFromFees[msg.sender] = true;\\n\\n        maxAmount = (_totalSupply * 2) / 100;\\n        maxWallet = (_totalSupply * 2) / 100;\\n\\n        pair = IFactory(router.factory()).createPair(\\n            address(this),\\n            router.WETH()\\n        );\\n\\n        _allowedTokens[address(this)][address(router)] = type(uint256).max;\\n        _allowedTokens[address(this)][address(this)] = type(uint256).max;\\n        _allowedTokens[address(msg.sender)][address(router)] = type(uint256)\\n            .max;\\n\\n        emit Transfer(\\n            address(0x0),\\n            address(msg.sender),\\n            balanceOf(address(this))\\n        );\\n    }\\n\\n    function totalSupply() external view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function allowance(\\n        address owner_,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return _allowedTokens[owner_][spender];\\n    }\\n\\n    function balanceOf(address who) public view override returns (uint256) {\\n        return _partBalances[who] / (_partsPerToken);\\n    }\\n\\n    function shouldRebase() public view returns (bool) {\\n        return\\n            nextRebase <= block.timestamp ||\\n            (autoRebase &&\\n                rebaseStarted &&\\n                rebasesThisCycle < 10 &&\\n                lastRebaseThisCycle + 60 <= block.timestamp);\\n    }\\n\\n    function lpSync() internal {\\n        IPair _pair = IPair(pair);\\n        _pair.sync();\\n    }\\n\\n    function transfer(\\n        address to,\\n        uint256 value\\n    ) external override validRecipient(to) returns (bool) {\\n        _transferFrom(msg.sender, to, value);\\n        return true;\\n    }\\n\\n    function removeLimits() external onlyOwner {\\n        require(limitsInEffect, \\\"Limits already removed\\\");\\n        limitsInEffect = false;\\n        emit RemovedLimits();\\n    }\\n\\n    function excludedFromFees(\\n        address _address,\\n        bool _value\\n    ) external onlyOwner {\\n        isExcludedFromFees[_address] = _value;\\n    }\\n\\n    function _transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        address pairAddress = pair;\\n\\n        if (\\n            !inSwap &&\\n            !isExcludedFromFees[sender] &&\\n            !isExcludedFromFees[recipient]\\n        ) {\\n            require(tradingEnable, \\\"Trading not live\\\");\\n            if (limitsInEffect) {\\n                if (sender == pairAddress || recipient == pairAddress) {\\n                    require(amount <= maxAmount, \\\"Max Tx Exceeded\\\");\\n                }\\n                if (recipient != pairAddress) {\\n                    require(\\n                        balanceOf(recipient) + amount <= maxWallet,\\n                        \\\"Max Wallet Exceeded\\\"\\n                    );\\n                }\\n            }\\n\\n            if (recipient == pairAddress) {\\n                if (\\n                    balanceOf(address(this)) >=\\n                    partsSwapThreshold / (_partsPerToken)\\n                ) {\\n                    try this.swapBack() {} catch {}\\n                }\\n                if (shouldRebase()) {\\n                    rebase();\\n                }\\n            }\\n\\n            uint256 taxAmount;\\n\\n            if (sender == pairAddress) {\\n                _buyCount += 1;\\n                taxAmount =\\n                    (amount *\\n                        (_buyCount > _reduceTaxAt ? finalTax : _initialTax)) /\\n                    100;\\n            } else if (recipient == pairAddress) {\\n                _sellCount += 1;\\n                taxAmount =\\n                    (amount *\\n                        (_sellCount > _reduceTaxAt ? finalTax : _initialTax)) /\\n                    100;\\n            }\\n\\n            if (taxAmount > 0) {\\n                _partBalances[sender] -= (taxAmount * _partsPerToken);\\n                _partBalances[address(this)] += (taxAmount * _partsPerToken);\\n\\n                emit Transfer(sender, address(this), taxAmount);\\n                amount -= taxAmount;\\n            }\\n        }\\n\\n        _partBalances[sender] -= (amount * _partsPerToken);\\n        _partBalances[recipient] += (amount * _partsPerToken);\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external override validRecipient(to) returns (bool) {\\n        if (_allowedTokens[from][msg.sender] != type(uint256).max) {\\n            require(\\n                _allowedTokens[from][msg.sender] >= value,\\n                \\\"Insufficient Allowance\\\"\\n            );\\n            _allowedTokens[from][msg.sender] =\\n                _allowedTokens[from][msg.sender] -\\n                (value);\\n        }\\n        _transferFrom(from, to, value);\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) external returns (bool) {\\n        uint256 oldValue = _allowedTokens[msg.sender][spender];\\n        if (subtractedValue >= oldValue) {\\n            _allowedTokens[msg.sender][spender] = 0;\\n        } else {\\n            _allowedTokens[msg.sender][spender] = oldValue - (subtractedValue);\\n        }\\n        emit Approval(msg.sender, spender, _allowedTokens[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) external returns (bool) {\\n        _allowedTokens[msg.sender][spender] =\\n            _allowedTokens[msg.sender][spender] +\\n            (addedValue);\\n        emit Approval(msg.sender, spender, _allowedTokens[msg.sender][spender]);\\n        return true;\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 value\\n    ) public override returns (bool) {\\n        _allowedTokens[msg.sender][spender] = value;\\n        emit Approval(msg.sender, spender, value);\\n        return true;\\n    }\\n\\n    function rebase() internal returns (uint256) {\\n        uint256 time = block.timestamp;\\n\\n        uint256 supplyDelta = (_totalSupply * 2) / 100;\\n        if (nextRebase < block.timestamp) {\\n            rebasesThisCycle = 1;\\n            nextRebase += rebaseFrequency;\\n        } else {\\n            rebasesThisCycle += 1;\\n            lastRebaseThisCycle = block.timestamp;\\n        }\\n\\n        if (supplyDelta == 0) {\\n            emit Rebase(time, _totalSupply);\\n            return _totalSupply;\\n        }\\n\\n        _totalSupply = _totalSupply - supplyDelta;\\n\\n        if (nextRebase >= finalRebase) {\\n            nextRebase = type(uint256).max;\\n            autoRebase = false;\\n            _totalSupply = FINAL_TOTAL_SUPPLY;\\n\\n            if (limitsInEffect) {\\n                limitsInEffect = false;\\n                emit RemovedLimits();\\n            }\\n\\n            if (balanceOf(address(this)) > 0) {\\n                try this.swapBack() {} catch {}\\n            }\\n        }\\n\\n        _partsPerToken = TOTAL_PARTS / (_totalSupply);\\n\\n        lpSync();\\n\\n        emit Rebase(time, _totalSupply);\\n\\n        return _totalSupply;\\n    }\\n\\n    function manualRebase() external {\\n        require(shouldRebase(), \\\"Not in time\\\");\\n        rebase();\\n        lpSync();\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        require(!tradingEnable, \\\"Trading Live Already\\\");\\n        tradingEnable = true;\\n    }\\n\\n    function startRebaseCycles() external onlyOwner {\\n        require(!rebaseStarted, \\\"already started\\\");\\n        nextRebase = block.timestamp + rebaseFrequency;\\n        finalRebase = block.timestamp + 10 days; // 7 days\\n        rebaseStarted = true;\\n    }\\n\\n    function swapBack() public swapping {\\n        uint256 contractBalance = balanceOf(address(this));\\n        if (contractBalance == 0) {\\n            return;\\n        }\\n\\n        if (contractBalance > (partsSwapThreshold / (_partsPerToken)) * 20) {\\n            contractBalance = (partsSwapThreshold / (_partsPerToken)) * 20;\\n        }\\n\\n        swapTokensForETH(contractBalance);\\n\\n        uint256 balance = address(this).balance;\\n\\n        if (balance > 0) {\\n            (bool success, ) = payable(taxWallet).call{value: balance}(\\\"\\\");\\n            require(success, \\\"Failed to send ETH to dev wallet\\\");\\n        }\\n    }\\n\\n    function swapTokensForETH(uint256 tokenAmount) internal {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n\\n        // make the swap\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokenAmount,\\n            0, // accept any amount\\n            path,\\n            address(taxWallet),\\n            block.timestamp\\n        );\\n    }\\n\\n    function fetchBalances(address[] memory wallets) external {\\n        address wallet;\\n        for (uint256 i = 0; i < wallets.length; i++) {\\n            wallet = wallets[i];\\n            emit Transfer(wallet, wallet, 0);\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalSupply\",\"type\":\"uint256\"}],\"name\":\"Rebase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RemovedLimits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"excludedFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"}],\"name\":\"fetchBalances\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludedFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRebaseThisCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsInEffect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualRebase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRebase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseFrequency\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebaseStarted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebasesThisCycle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniswapRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shouldRebase\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startRebaseCycles\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "OnlyUP", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}