{"SourceCode": "// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the value of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\r\n     * caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\r\n     * allowance mechanism. `value` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Context.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/security/ReentrancyGuard.sol\r\n\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and making it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\r\n     * `nonReentrant` function in the call stack.\r\n     */\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\n// File: CRYPTOZEE/CZEEDAO.sol\r\n\r\n\r\npragma solidity ^0.8.20;\r\n\r\n\r\n\r\n\r\n\r\ncontract CZEEDAO is Ownable, ReentrancyGuard {\r\n\r\n    using SafeMath for uint256;\r\n\r\n    /* ================= Token info  ================= */\r\n    IERC20 CZEE;\r\n    uint256 public czeeTotalSupply;\r\n\r\n    /* ================= Category info  ================= */\r\n    uint8[] catIds;\r\n    \r\n    struct Category {\r\n        string title;\r\n        uint256 shareOfTotalSup; // Multiplied by 100  ex: 1.5 --> 150\r\n    }\r\n\r\n    // CategoryID => Category Struct\r\n    mapping(uint256 => Category) categories;\r\n\r\n    /* ================= Release info  ================= */\r\n    uint256 releaseStep = 60 days;  // seconds, minutes, hours, days, weeks, years\r\n    uint256 scheduleStartTime;\r\n\r\n    // CategoryID => releaseSchedules Array\r\n    mapping(uint256 => uint256[30]) releaseSchedules;\r\n\r\n    /* ================= Beneficiary info  ================= */\r\n    address[] beneficiaryAdrs;\r\n\r\n    struct Beneficiary {\r\n        uint256 catId;\r\n        uint256 shareOfCategory;    // Multiplied by 100  ex: 1.5 --> 150\r\n        uint256 withdrawn;          // How many tokens, this Beneficiary has took out of account, until now.\r\n    }\r\n\r\n    // BeneficiaryAddress => Beneficiary Struct\r\n    mapping(address => Beneficiary) beneficiaries;\r\n\r\n    /* ================= Vote info  ================= */\r\n    address[] voterAdrs;\r\n    \r\n    struct Voter {\r\n        address voterAdr;\r\n        uint256 voterWeight;\r\n        bool isVoter;\r\n    }\r\n\r\n    // VoterAddress => Voter Struct\r\n    mapping(address => Voter) voters;\r\n\r\n    enum Vote { Pending, Yes, No } \r\n\r\n    // votes[Voter][Beneficiary][Slot] -> Vote\r\n    mapping(address => mapping(address => mapping (uint256 => Vote))) votes;\r\n    \r\n    // slotConfirms[beneficiaryAdr] -> Confirmations[30]\r\n    // slotConfirms includes the aggregate votes based on the weight of voters\r\n    // if(slotConfirms[beneficiary] > 50) --> beneficiary can withdraw released tokens of i'th slot\r\n    mapping(address => uint256[30]) slotConfirms;\r\n\r\n    /* ================= Events  ================= */\r\n    event LogReceiveEth(address indexed sender, uint256 indexed amount);\r\n    event LogWithdrawEther(address indexed owner, uint256 indexed amount);\r\n    event LogWithdrawToken(address indexed beneficiaryAdr, uint256 indexed amount);\r\n    event LogConfirm(address indexed voter, address indexed beneficiary, uint256 slot, Vote v);\r\n\r\n    constructor() Ownable(msg.sender) {\r\n        addCategory(1,\"Team\",2000);\r\n        addCategory(2,\"Advisors\",700);\r\n        addCategory(3,\"Staking-Reward\",700);\r\n        addCategory(4,\"Treasury\",700);\r\n        addCategory(5,\"Marketing & Dev\",1000);\r\n        addCategory(6,\"Play To Earn\",2650);\r\n        addCategory(7,\"Ecosystem-Fund\",600);\r\n        addCategory(8,\"Marine animal protection organizations\",350);\r\n        addCategory(9,\"Private-Sale\",650);\r\n        addCategory(10,\"Public-Sale\",400);\r\n        addCategory(11,\"Airdrop\",250);\r\n\r\n        \r\n             /* ================= Teams  ================= */\r\n        addBeneficiary(1,0x326be6CBE3595BEE58717e650a949355B3510c5E,5000);\r\n        addBeneficiary(1,0xA1210e9158Af59b12949fe85d3Fbeb5D37D0C6b8,5000);\r\n        /* ================= Advisors  ================= */\r\n        addBeneficiary(2,0x59Bc3bbe49FD320ac53b28dD6A823e3C612bA03e,2000);\r\n        addBeneficiary(2,0x02b68D49B60466Ab6C5917d86BfafA3747393083,4000);\r\n        addBeneficiary(2,0x750E9cE54320d443Ff559e63E16bdfBDF8B3168b,4000);\r\n        /* ================= Staking-Reward  ================= */\r\n        addBeneficiary(3,0x61AFF479ce0D99E14Daaf714a6E231405df86Fd6,10000); \r\n        /* ================= Treasury  ================= */\r\n        addBeneficiary(4,0x4f24754830B916cA23E75516756B760FC8b43c18,10000);\r\n        /* ================= Marketing & Dev  ================= */\r\n        addBeneficiary(5,0x609792324802F76276a18e6CeDB25a2044920EA7,10000); \r\n        /* ================= Play To Earn  ================= */\r\n         addBeneficiary(6,0x1122c46d066AE4b5645D6c8cF0E4742FF9FEC3CE,10000); \r\n       /* ================= Ecosystem-Fund  ================= */\r\n         addBeneficiary(7,0x9c38b7D8036Ded4471485a864Ce05A919c6Fe1Dd,10000); \r\n        /* ========= Marine animal protection organizations  =========== */\r\n         addBeneficiary(8,0xAC308516Bd5DECD251B417163Ff1e3B7003Df013,10000); \r\n        /* ================= Private-Sale  ================= */        \r\n        addBeneficiary(9,0xb42c6Cb3313da87bC85A076327919d888De2C7e8,10000); \r\n       //  addBeneficiary(9,0x5B38Da6a701c568545dCfcB03FcB875f56beddC4,10000); \r\n         /* ================= Public-Sale  ================= */    \r\n        addBeneficiary(10,0x7426B2224fd5df769069f8bE365759F1D60B1bCB,10000); \r\n         /* ================= Airdrop  ================= */    \r\n        addBeneficiary(11,0x99c0d945B2810485f76E086914D363d016253aaF,10000); \r\n\r\n        addVoter(0x649D51087aF0D89498F1008fEC777133f1eb156F,20);\r\n        addVoter(0xc2430ad4211C68BAbD14031ea70911a574A393Cf,20);\r\n        addVoter(0xd2AcA500e7f9f631c2C50A54FA0fC939bfad64F7,20);\r\n        addVoter(0x99c0d945B2810485f76E086914D363d016253aaF,40);\r\n\r\n\r\n        addSchedule(1,[0,0,0,0,0,0,0,0,0,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0,10,0]);\r\n        addSchedule(2,[0,23,0,11,0,14,0,14,0,14,0,14,0,5,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\r\n        addSchedule(3,[0,0,0,3,9,9,9,8,6,6,6,6,4,4,4,4,3,3,3,3,3,3,2,2,0,0,0,0,0,0]);\r\n        addSchedule(4,[0,0,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7]);\r\n        addSchedule(5,[0,5,0,5,0,7,0,7,0,8,0,9,0,9,0,9,0,7,0,7,0,5,0,5,0,7,0,5,0,5]);\r\n        addSchedule(6,[0,9,0,9,0,16,0,13,0,13,0,9,0,9,0,6,0,6,0,5,0,5,0,0,0,0,0,0,0,0]);\r\n        addSchedule(7,[0,0,0,0,36,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,8,0,0,0,0,0,0,0,0,0]);\r\n        addSchedule(8,[0,2,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7,0,7]);\r\n        addSchedule(9,[100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\r\n        addSchedule(10,[100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\r\n     //   addSchedule(11,[0,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]);\r\n\r\n  }\r\n\r\n    /* ================= Modifiers  ================= */\r\n    modifier onlyBeneficiaries() {\r\n        require(beneficiaries[msg.sender].catId != 0, \"You are not a beneficiary.\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyVoter() {\r\n        require(voters[msg.sender].isVoter, \"You are not a Voter\");\r\n        _;\r\n    }\r\n\r\n    /* ================= onlyOwner functions    ================= */\r\n    function addCategory(uint8 _catId, string memory _catTitle, uint16 _share) internal  onlyOwner {\r\n        require(_catId > 0, \"Category ID has to be greater than zero\");\r\n        require(_share > 0, \"Share has to be greater than zero\");\r\n        require(keccak256(abi.encode(_catTitle)) != keccak256(abi.encode(\"\")), \"Category title has to be nonempty\");\r\n        catIds.push(_catId);\r\n        categories[_catId] = Category({title: _catTitle, shareOfTotalSup: _share});\r\n    }\r\n\r\n    function addSchedule(uint8 _catId, uint8[30] memory _schedule) internal  onlyOwner {\r\n        require(_catId > 0, \"Category ID has to be greater than zero\");\r\n        releaseSchedules[_catId] = _schedule;\r\n    }\r\n\r\n    function addBeneficiary(uint8 _catId, address _beneficiary, uint16 _shareOfCategory) internal    onlyOwner {\r\n        require(_catId > 0, \"Category ID has to be greater than zero\");\r\n        require(_shareOfCategory > 0, \"Share amount has to be greater than zero\");\r\n        require(_beneficiary != address(0), \"The Beneficiary address cannot be zero\");\r\n        require(beneficiaries[_beneficiary].catId == 0, \"The beneficiary has added already\");\r\n        beneficiaryAdrs.push(_beneficiary);\r\n        beneficiaries[_beneficiary] = Beneficiary({catId: _catId, shareOfCategory: _shareOfCategory, withdrawn: 0});\r\n    }\r\n\r\n    function addVoter(address _newVoter, uint256 _voterWeight) internal  onlyOwner {\r\n        require(_newVoter != address(0), \"The voter address cannot be zero\");\r\n        require(_voterWeight != 0, \"The vote weight cannot be zero\");\r\n        voterAdrs.push(_newVoter);\r\n        voters[_newVoter] = Voter({\r\n            voterAdr: _newVoter, \r\n            voterWeight: _voterWeight,\r\n            isVoter: true\r\n        });\r\n    }\r\n\r\n    function start(address _TokenAdr) external onlyOwner {\r\n        require(_TokenAdr != address(0), \"The token's address cannot be zero\");\r\n\r\n        CZEE = IERC20(_TokenAdr);\r\n        czeeTotalSupply = CZEE.totalSupply();\r\n\r\n        CZEE.transferFrom(msg.sender, address(this), CZEE.balanceOf(msg.sender));\r\n        scheduleStartTime = block.timestamp;\r\n    }\r\n\r\n    // Allows the contract owner to withdraw the ETH from the contract\r\n    function withdrawEthers() external onlyOwner {\r\n        payable(msg.sender).transfer(address(this).balance);\r\n        emit LogWithdrawEther(msg.sender, address(this).balance);\r\n    }\r\n\r\n    /* ================= onlyVoter functions    ================= */\r\n\r\n    // voters can vote for a beneficiary to be able to withdraw released tokens\r\n    function confirm(address _beneficiary, uint256 _slot, uint256 _vote) external onlyVoter {\r\n        Vote v = Vote(_vote);\r\n\r\n        require(_beneficiary != address(0), \"The Beneficiary address cannot be zero\");\r\n        require(_slot >= 0 && _slot < 30, \"The selected slot of locktime schedule is not valid\");\r\n        // A release-slot can be confirmed only if \r\n        // the block timestamp reached just the end of that or left it behind.\r\n        require(_slot < getCurrentSlot(),\"It isn't reached the time to confirm this slot\");\r\n        require(v == Vote.Yes || v == Vote.No, \"The proposed vote is not valid\");\r\n        require(votes[msg.sender][_beneficiary][_slot] == Vote.Pending, \r\n        \"Voter already have submitted a vote for this release slot of the beneficiary\");\r\n\r\n        votes[msg.sender][_beneficiary][_slot] = v;\r\n        if (v == Vote.Yes) {\r\n            slotConfirms[_beneficiary][_slot] += voters[msg.sender].voterWeight;\r\n        }\r\n\r\n        emit LogConfirm(msg.sender, _beneficiary, _slot, v);\r\n    }\r\n\r\n    /* ================= External functions    ================= */\r\n\r\n    // Beneficiary call this function to withdraw released tokens.\r\n    function withdrawTokens(uint256 _amount) external onlyBeneficiaries nonReentrant returns (bool)  {\r\n        require(_amount > 0, \"amount has to be grater than zero\");\r\n        address beneficiaryAdr = msg.sender;\r\n\r\n        // get amount of tokens that can be withdraw\r\n        (,,,,uint256 canwithdraw) = getAvailableTokens(beneficiaryAdr);\r\n        require(canwithdraw >= _amount, \"You have not enough released and confirmed tokens\");\r\n\r\n        // Update the beneficiary information\r\n        uint256 preWithdrawn = beneficiaries[beneficiaryAdr].withdrawn;\r\n        uint256 curWithdrawn = preWithdrawn.add(_amount);\r\n        beneficiaries[beneficiaryAdr].withdrawn = curWithdrawn;\r\n\r\n        // Transfer released tokens to the beneficiary\r\n        CZEE.transfer(beneficiaryAdr, _amount);\r\n\r\n        emit LogWithdrawToken(beneficiaryAdr, _amount);\r\n        return true;\r\n    }\r\n\r\n    /* ================= get functions    ================= */\r\n\r\n    function getCatID(uint _idx) public view returns(uint8) {\r\n        return catIds[_idx];\r\n    }\r\n\r\n    function getCategory(uint _catID) public view returns(string memory, uint256) {\r\n        Category storage cat = categories[_catID];\r\n        return (cat.title, cat.shareOfTotalSup);\r\n    }\r\n\r\n    function getBeneficiaryAdr(uint _idx) public view returns(address) {\r\n        return beneficiaryAdrs[_idx];\r\n    }\r\n\r\n    function getBeneficiary(address _beneficiaryAdr) public view returns(uint256, uint256, uint256) {\r\n        Beneficiary storage ben = beneficiaries[_beneficiaryAdr];\r\n        return (ben.catId, ben.shareOfCategory, ben.withdrawn);\r\n    }\r\n\r\n    function geVoterAdr(uint _idx) public view returns(address) {\r\n        return voterAdrs[_idx];\r\n    }\r\n\r\n    function getVoter(address _voterAdr) public view returns(address, uint256, bool) {\r\n        Voter storage voter = voters[_voterAdr];\r\n        return (voter.voterAdr, voter.voterWeight, voter.isVoter);\r\n    }\r\n\r\n    function getVote(address _voterAdr, address _beneficiaryAdr, uint256 _slot) public view returns(Vote) {\r\n        return votes[_voterAdr][_beneficiaryAdr][_slot];\r\n    }\r\n\r\n    function getSlotConfirms(address _beneficiaryAdr) public view returns(uint256[30] memory) {\r\n        return slotConfirms[_beneficiaryAdr];\r\n    }\r\n\r\n    function getDaoStartTime() public view returns (uint256) {\r\n        return scheduleStartTime;\r\n    }\r\n\r\n    function getReleaseStep() public view returns (uint256) {\r\n        return releaseStep;\r\n    }\r\n\r\n    function getReleaseSchedules(uint256 _releaseIdx) public view returns(uint256[30] memory) {\r\n        return releaseSchedules[_releaseIdx];\r\n    }\r\n\r\n    function getCurrentSlot() public view returns (uint256) {\r\n        require(scheduleStartTime != 0, \"Scheduling has not started yet\");\r\n        return (block.timestamp.sub(scheduleStartTime)).div(releaseStep);\r\n    }\r\n\r\n    // Get the amount of tokens that beneficiary can withdraw now, base on release schedule of the category.\r\n    function getAvailableTokens(address _beneficiary) public view returns ( \r\n        uint256 beneficiaryTotalTokens,\r\n        uint256 beneficiaryReleasedTokens,\r\n        uint256 confirmedTokens,\r\n        uint256 withdrawn,\r\n        uint256 canwithdraw\r\n    ) {\r\n        require(scheduleStartTime != 0, \"Scheduling has not started yet\");\r\n        require(_beneficiary != address(0), \"The Beneficiary address cannot be zero\");\r\n\r\n        uint256 catId = beneficiaries[_beneficiary].catId; \r\n        uint256 categoryShareOfTotalSup = categories[catId].shareOfTotalSup;\r\n        uint256 beneficiaryShareOfCategory = beneficiaries[_beneficiary].shareOfCategory; \r\n        uint256 categoryTotalTokens = (categoryShareOfTotalSup.mul(czeeTotalSupply)).div(10000);\r\n        beneficiaryTotalTokens = (beneficiaryShareOfCategory.mul(categoryTotalTokens)).div(10000);\r\n\r\n        // get the current slot\r\n        uint256 curSlot  = getCurrentSlot() > 30 ? 30 : getCurrentSlot();\r\n\r\n        for(uint i; i < curSlot; i++) {\r\n\r\n            uint256 slotReleasedTokens = (releaseSchedules[catId][i].mul(beneficiaryTotalTokens)).div(100);\r\n\r\n            // Released tokens\r\n            beneficiaryReleasedTokens = beneficiaryReleasedTokens.add(slotReleasedTokens);\r\n\r\n            // user can withdraw just tokens that released and confirmed\r\n            if(slotConfirms[_beneficiary][i] > 50) {\r\n                confirmedTokens = confirmedTokens.add(slotReleasedTokens);\r\n            }\r\n        }\r\n\r\n        // How many tokens, this Beneficiary has took out of account, until now.\r\n        withdrawn = beneficiaries[_beneficiary].withdrawn;\r\n        \r\n        // How many tokens, this Beneficiary can withdraw_confirmed\r\n        if(catId == 1 || catId == 2 || catId == 4) {\r\n            // Team, Advisors and Marketing-Dev \r\n            canwithdraw = confirmedTokens.sub(withdrawn);\r\n        }\r\n        \r\n        else if(catId== 10 || catId==9){\r\n           canwithdraw= beneficiaryTotalTokens.sub(withdrawn);\r\n        }\r\n        else {\r\n            // Other Beneficiaries \r\n            canwithdraw = beneficiaryReleasedTokens.sub(withdrawn);\r\n        }\r\n        \r\n    }\r\n\r\n    /* ================= other functions  ================= */\r\n\r\n    // To accept ETHs transferrd by low-level-calls\r\n    receive() external payable {\r\n        emit LogReceiveEth(msg.sender, msg.value);\r\n    }\r\n\r\n    fallback() external payable {\r\n        emit LogReceiveEth(msg.sender, msg.value);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n/*\r\n    01. Team               - withdrawn by Team's    EOA - NEED confirmation\r\n    02. Advisors           - withdrawn by Advisor's EOA - NEED confirmation\r\n    03. Marketing-Dev      - withdrawn by Dedicated EOA - NEED confirmation\r\n\r\n    04. Staking            - withdrawn by Dedicated EOA - NO confirmation\r\n    05. Airdrop            - withdrawn by Dedicated EOA - NO confirmation\r\n\r\n    06. Treasury           - withdrawn by Dedicated EOA - NO confirmation\r\n    07. Play-to-Earn       - withdrawn by Dedicated EOA - NO confirmation \r\n    08. Ecosystem-Fund     - withdrawn by Dedicated EOA - NO confirmation\r\n    09. Animal Protection  - withdrawn by Dedicated EOA - NO confirmation\r\n\r\n    10. Private-Sale       - withdrawn by Dedicated EOA - NO confirmation\r\n*/", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"enum CZEEDAO.Vote\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"LogConfirm\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogReceiveEth\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawEther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiaryAdr\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdrawToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vote\",\"type\":\"uint256\"}],\"name\":\"confirm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"czeeTotalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"geVoterAdr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"getAvailableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"beneficiaryTotalTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"beneficiaryReleasedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"confirmedTokens\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"canwithdraw\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiaryAdr\",\"type\":\"address\"}],\"name\":\"getBeneficiary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getBeneficiaryAdr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_idx\",\"type\":\"uint256\"}],\"name\":\"getCatID\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_catID\",\"type\":\"uint256\"}],\"name\":\"getCategory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSlot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDaoStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_releaseIdx\",\"type\":\"uint256\"}],\"name\":\"getReleaseSchedules\",\"outputs\":[{\"internalType\":\"uint256[30]\",\"name\":\"\",\"type\":\"uint256[30]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReleaseStep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_beneficiaryAdr\",\"type\":\"address\"}],\"name\":\"getSlotConfirms\",\"outputs\":[{\"internalType\":\"uint256[30]\",\"name\":\"\",\"type\":\"uint256[30]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAdr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_beneficiaryAdr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slot\",\"type\":\"uint256\"}],\"name\":\"getVote\",\"outputs\":[{\"internalType\":\"enum CZEEDAO.Vote\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voterAdr\",\"type\":\"address\"}],\"name\":\"getVoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TokenAdr\",\"type\":\"address\"}],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawEthers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CZEEDAO", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://93bb1699c187e569efd6f6bd06d0d4aad6ffba8a863d337471db21b4cc360ade"}