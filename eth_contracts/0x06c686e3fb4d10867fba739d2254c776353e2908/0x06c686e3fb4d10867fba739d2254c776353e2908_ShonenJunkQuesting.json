{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/ShonenJunkQuesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\ncontract ShonenJunkQuesting is ReentrancyGuard, Context, Ownable {\\n    /*\\n          .__                                     __              __    \\n      _____|  |__   ____   ____   ____   ____     |__|__ __  ____ |  | __\\n    /  ___/  |  \\\\ /  _ \\\\ /    \\\\_/ __ \\\\ /    \\\\    |  |  |  \\\\/    \\\\|  |/ /\\n    \\\\___ \\\\|   Y  (  <_> )   |  \\\\  ___/|   |  \\\\   |  |  |  /   |  \\\\    < \\n    /____  >___|  /\\\\____/|___|  /\\\\___  >___|  /\\\\__|  |____/|___|  /__|_ \\\\\\n        \\\\/     \\\\/            \\\\/     \\\\/     \\\\/\\\\______|          \\\\/     \\\\/\\n    */\\n    IERC721 public immutable nftCollection;\\n    uint16 public immutable maxSupply;\\n    bool public stakingEnabled = true;\\n    bool public unstakingEnabled = true;\\n    uint256 public minimumTimeOfStaking = 0;\\n    address[] private activeStakers;\\n\\n    constructor(IERC721 _nftCollection, uint16 _maxSupply) {\\n        nftCollection = _nftCollection;\\n        maxSupply = _maxSupply;\\n    }\\n\\n    struct StakedToken {\\n        address staker;\\n        uint16 tokenId;\\n        // The time when this token started staking\\n        uint256 timeOfStaking;\\n        // Duration in seconds which is calculated during retrieval\\n        uint256 durationOfStaking;\\n    }\\n\\n    struct Staker {\\n        uint16 amountStaked;\\n        StakedToken[] stakedTokens;\\n        uint256 timeOfLastUpdate;\\n    }\\n\\n    // Mapping of owner address to staker info\\n    mapping(address => Staker) public stakers;\\n\\n    // Mapping of Token Id to original owner address\\n    mapping(uint256 => address) public stakerAddress;\\n\\n    function stake(uint16 _tokenId) external nonReentrant {\\n        require(stakingEnabled, \\\"Staking is currently disabled.\\\");\\n\\n        address invoker = _msgSender();\\n\\n        require(\\n            nftCollection.ownerOf(_tokenId) == invoker,\\n            \\\"You don't own this token.\\\"\\n        );\\n\\n        require(\\n            stakerAddress[_tokenId] != invoker,\\n            \\\"You already staked this token.\\\"\\n        );\\n\\n        _stakeTokenIdWithAddress(invoker, _tokenId);\\n        _updateStakingMetadata(invoker);\\n    }\\n\\n    function unstake(uint16 _tokenId) external nonReentrant {\\n        require(unstakingEnabled, \\\"Unstaking is currently disabled.\\\");\\n\\n        address invoker = _msgSender();\\n\\n        require(\\n            nftCollection.ownerOf(_tokenId) == invoker,\\n            \\\"You don't own this token.\\\"\\n        );\\n\\n        require(stakerAddress[_tokenId] == invoker, \\\"Token is not staked.\\\");\\n\\n        _unstakeTokenIdWithAddress(invoker, _tokenId);\\n        _updateStakingMetadata(invoker);\\n    }\\n\\n    function bulkStake(uint16[] memory _tokenIds) external nonReentrant {\\n        require(stakingEnabled, \\\"Staking is currently disabled.\\\");\\n        require(_tokenIds.length > 0, \\\"You must specify tokens to stake.\\\");\\n\\n        address invoker = _msgSender();\\n\\n        bool ownedAllTokens = true;\\n        bool tokensNotYetStaked = true;\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            if (nftCollection.ownerOf(_tokenIds[i]) != invoker) {\\n                ownedAllTokens = false;\\n                break;\\n            } else if (stakerAddress[_tokenIds[i]] == invoker) {\\n                tokensNotYetStaked = false;\\n                break;\\n            }\\n        }\\n\\n        require(\\n            ownedAllTokens,\\n            \\\"You don't own one or more of the tokens you're staking.\\\"\\n        );\\n        require(\\n            tokensNotYetStaked,\\n            \\\"One or more of the tokens you're staking is already staked.\\\"\\n        );\\n\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            _stakeTokenIdWithAddress(invoker, _tokenIds[i]);\\n        }\\n\\n        _updateStakingMetadata(invoker);\\n    }\\n\\n    function bulkUnstake(uint16[] memory _tokenIds) external nonReentrant {\\n        require(unstakingEnabled, \\\"Unstaking is currently disabled.\\\");\\n        require(_tokenIds.length > 0, \\\"You must specify tokens to unstake.\\\");\\n\\n        address invoker = _msgSender();\\n\\n        bool ownedAllTokens = true;\\n        bool tokensAreStaked = true;\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            if (nftCollection.ownerOf(_tokenIds[i]) != invoker) {\\n                ownedAllTokens = false;\\n                break;\\n            } else if (stakerAddress[_tokenIds[i]] != invoker) {\\n                tokensAreStaked = false;\\n                break;\\n            }\\n        }\\n        require(\\n            ownedAllTokens,\\n            \\\"You don't own one or more of the tokens you're unstaking.\\\"\\n        );\\n        require(\\n            tokensAreStaked,\\n            \\\"One or more of the tokens you're unstaking is not staked.\\\"\\n        );\\n\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            _unstakeTokenIdWithAddress(invoker, _tokenIds[i]);\\n        }\\n\\n        _updateStakingMetadata(invoker);\\n    }\\n\\n    function unstakeAll() external nonReentrant {\\n        require(unstakingEnabled, \\\"Unstaking is currently disabled.\\\");\\n\\n        address invoker = _msgSender();\\n\\n        _unstakeAllByAddress(invoker);\\n    }\\n\\n    // OWNER ONLY FUNCTIONS\\n    function setStartOfStaking(uint256 _minimumTimeOfStaking)\\n        external\\n        onlyOwner\\n    {\\n        minimumTimeOfStaking = _minimumTimeOfStaking;\\n    }\\n\\n    function allowStaking(bool _flag) external onlyOwner {\\n        require(\\n            _flag != stakingEnabled,\\n            \\\"The new value is the same as the current value.\\\"\\n        );\\n\\n        stakingEnabled = _flag;\\n    }\\n\\n    function allowUnstaking(bool _flag) external onlyOwner {\\n        require(\\n            _flag != unstakingEnabled,\\n            \\\"The new value is the same as the current value.\\\"\\n        );\\n\\n        unstakingEnabled = _flag;\\n    }\\n\\n    function forceBulkStake(uint16[] memory _tokenIds)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(_tokenIds.length > 0, \\\"You must specify tokens to stake.\\\");\\n\\n        bool tokensNotYetStaked = true;\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            if (\\n                stakerAddress[_tokenIds[i]] ==\\n                nftCollection.ownerOf(_tokenIds[i])\\n            ) {\\n                tokensNotYetStaked = false;\\n                break;\\n            }\\n        }\\n        require(\\n            tokensNotYetStaked,\\n            \\\"One or more of the tokens is already staked.\\\"\\n        );\\n\\n        address[] memory tokenOwners = new address[](_tokenIds.length);\\n        uint16 totalOwners = 0;\\n\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            address tokenOwner = nftCollection.ownerOf(_tokenIds[i]);\\n            _stakeTokenIdWithAddress(tokenOwner, _tokenIds[i]);\\n\\n            // Keep track of unique token owner addresses\\n            bool tokenOwnerIsTracked = false;\\n            for (uint16 j = 0; j < tokenOwners.length; j++) {\\n                if (tokenOwners[j] == tokenOwner) {\\n                    tokenOwnerIsTracked = true;\\n                    break;\\n                }\\n            }\\n            if (!tokenOwnerIsTracked) {\\n                tokenOwners[totalOwners] = tokenOwner;\\n                totalOwners++;\\n            }\\n        }\\n\\n        // Update staking metadata for each unique token owner\\n        for (uint16 i = 0; i < totalOwners; i++) {\\n            _updateStakingMetadata(tokenOwners[i]);\\n        }\\n    }\\n\\n    function forceBulkUnstake(uint16[] memory _tokenIds)\\n        external\\n        onlyOwner\\n        nonReentrant\\n    {\\n        require(_tokenIds.length > 0, \\\"You must specify tokens to unstake.\\\");\\n\\n        address[] memory tokenOwners = new address[](_tokenIds.length);\\n        uint16 totalOwners = 0;\\n\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            address tokenOwner = nftCollection.ownerOf(_tokenIds[i]);\\n            _unstakeTokenIdWithAddress(tokenOwner, _tokenIds[i]);\\n\\n            // Keep track of unique token owner addresses\\n            bool tokenOwnerIsTracked = false;\\n            for (uint16 j = 0; j < tokenOwners.length; j++) {\\n                if (tokenOwners[j] == tokenOwner) {\\n                    tokenOwnerIsTracked = true;\\n                    break;\\n                }\\n            }\\n            if (!tokenOwnerIsTracked) {\\n                tokenOwners[totalOwners] = tokenOwner;\\n                totalOwners++;\\n            }\\n        }\\n\\n        // Update staking metadata for each unique token owner\\n        for (uint16 i = 0; i < totalOwners; i++) {\\n            _updateStakingMetadata(tokenOwners[i]);\\n        }\\n    }\\n\\n    function forceUpdateTimeOfStaking(\\n        uint16[] memory _tokenIds,\\n        uint256 timeOfStaking\\n    ) external onlyOwner nonReentrant {\\n        require(_tokenIds.length > 0, \\\"You must specify tokens to update.\\\");\\n\\n        address targetStaker = nftCollection.ownerOf(_tokenIds[0]);\\n\\n        bool validTokenIds = true;\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            if (nftCollection.ownerOf(_tokenIds[i]) != targetStaker) {\\n                validTokenIds = false;\\n                break;\\n            }\\n        }\\n        require(validTokenIds, \\\"Tokens must belong to the same address.\\\");\\n\\n        // Try and update the timeOfStaking for each token Id\\n        for (uint16 i = 0; i < _tokenIds.length; i++) {\\n            uint16 currentTokenId = _tokenIds[i];\\n            // Retrieve the tokenIndex from the stakers array of staked tokens\\n            uint16 tokenIndex = maxSupply;\\n            for (\\n                uint16 j = 0;\\n                j < stakers[targetStaker].stakedTokens.length;\\n                j++\\n            ) {\\n                if (\\n                    stakers[targetStaker].stakedTokens[j].tokenId ==\\n                    currentTokenId\\n                ) {\\n                    tokenIndex = j;\\n                    break;\\n                }\\n            }\\n\\n            require(\\n                tokenIndex < maxSupply,\\n                \\\"One or more tokens is not currently staked.\\\"\\n            );\\n\\n            // Ensure the tokenIndex is not out of bounds\\n            if (tokenIndex < maxSupply) {\\n                bool dataIsCorrect = stakers[targetStaker]\\n                    .stakedTokens[tokenIndex]\\n                    .staker ==\\n                    targetStaker &&\\n                    stakerAddress[currentTokenId] == targetStaker;\\n                bool stillInOwnersWallet = nftCollection.ownerOf(\\n                    currentTokenId\\n                ) == targetStaker;\\n\\n                // Update the time of staking if all other staking information is still intact\\n                if (dataIsCorrect && stillInOwnersWallet) {\\n                    stakers[targetStaker]\\n                        .stakedTokens[tokenIndex]\\n                        .timeOfStaking = timeOfStaking;\\n                }\\n            }\\n        }\\n    }\\n\\n    function forceUnstakeAll(address _targetStaker) external onlyOwner {\\n        _unstakeAllByAddress(_targetStaker);\\n    }\\n\\n    // VIEW ONLY FUNCTIONS\\n    function getMyTotalStakeCount() external view returns (uint16) {\\n        address invoker = _msgSender();\\n\\n        return _getStakeCountByAddress(invoker);\\n    }\\n\\n    function getAllStakedTokens() external view returns (StakedToken[] memory) {\\n        uint16 allStakedTokensCount = _countAllStakedTokens();\\n        StakedToken[] memory allStakedTokens = new StakedToken[](\\n            allStakedTokensCount\\n        );\\n        address[] memory currentActiveStakers = _getAllActiveStakers();\\n\\n        uint16 counter = 0;\\n        for (uint16 i = 0; i < currentActiveStakers.length; i++) {\\n            StakedToken[] memory stakedTokens = _getStakedTokensByAddress(\\n                currentActiveStakers[i]\\n            );\\n\\n            for (uint16 j = 0; j < stakedTokens.length; j++) {\\n                allStakedTokens[counter] = (stakedTokens[j]);\\n                counter++;\\n            }\\n        }\\n\\n        return allStakedTokens;\\n    }\\n\\n    function getStakedTokensByAddress(address _staker)\\n        external\\n        view\\n        returns (StakedToken[] memory)\\n    {\\n        return _getStakedTokensByAddress(_staker);\\n    }\\n\\n    function getAllActiveStakers() external view returns (address[] memory) {\\n        return _getAllActiveStakers();\\n    }\\n\\n    function getAllActiveStakersCount() external view returns (uint16) {\\n        address[] memory verifiedStakers = new address[](activeStakers.length);\\n        uint16 counter = 0;\\n        for (uint16 i = 0; i < activeStakers.length; i++) {\\n            address currentAddress = activeStakers[i];\\n            StakedToken[] memory stakedTokens = stakers[currentAddress]\\n                .stakedTokens;\\n            for (uint16 j = 0; j < stakedTokens.length; j++) {\\n                if (\\n                    stakerAddress[stakedTokens[j].tokenId] == currentAddress &&\\n                    nftCollection.ownerOf(stakedTokens[j].tokenId) ==\\n                    currentAddress\\n                ) {\\n                    verifiedStakers[counter] = currentAddress;\\n                    counter++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        return counter;\\n    }\\n\\n    // INTERNAL\\n    function _getStakedTokensByAddress(address _staker)\\n        internal\\n        view\\n        returns (StakedToken[] memory)\\n    {\\n        uint16 totalStakeCountByAddress = _getStakeCountByAddress(_staker);\\n        // Return empty list if address has no staked tokens\\n        if (totalStakeCountByAddress < 1) {\\n            return new StakedToken[](0);\\n        }\\n\\n        // Return all the tokens actively staked by this owner\\n        StakedToken[] memory activeStakedTokens = new StakedToken[](\\n            totalStakeCountByAddress\\n        );\\n        uint16 index = 0;\\n\\n        // Go thru each staked tokens and validate before adding them to list\\n        for (uint16 i = 0; i < stakers[_staker].stakedTokens.length; i++) {\\n            StakedToken memory stakedTokenInfo = stakers[_staker].stakedTokens[\\n                i\\n            ];\\n            bool dataIsCorrect = stakedTokenInfo.staker == _staker &&\\n                stakerAddress[stakedTokenInfo.tokenId] == _staker;\\n            bool stillInOwnersWallet = nftCollection.ownerOf(\\n                stakedTokenInfo.tokenId\\n            ) == _staker;\\n\\n            if (dataIsCorrect && stillInOwnersWallet) {\\n                // Copy the staked token information\\n                activeStakedTokens[index] = stakedTokenInfo;\\n                // Update the duration of stake\\n                activeStakedTokens[index].durationOfStaking = block.timestamp >\\n                    activeStakedTokens[index].timeOfStaking\\n                    ? block.timestamp - activeStakedTokens[index].timeOfStaking\\n                    : 0;\\n\\n                index++;\\n            }\\n        }\\n\\n        return activeStakedTokens;\\n    }\\n\\n    function _stakeTokenIdWithAddress(address _staker, uint16 _tokenId)\\n        internal\\n    {\\n        uint256 timeOfStaking = block.timestamp;\\n\\n        // Create StakedToken\\n        StakedToken memory stakedToken = StakedToken(\\n            _staker,\\n            _tokenId,\\n            // Ensure tokens can't be staked before official start of staking\\n            timeOfStaking > minimumTimeOfStaking\\n                ? timeOfStaking\\n                : minimumTimeOfStaking,\\n            0\\n        );\\n\\n        // Find the index of the token from the stakedToken list if it exists\\n        uint16 tokenIndex = maxSupply;\\n        for (uint16 i = 0; i < stakers[_staker].stakedTokens.length; i++) {\\n            if (stakers[_staker].stakedTokens[i].tokenId == _tokenId) {\\n                tokenIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // Add or update\\n        if (tokenIndex < maxSupply) {\\n            stakers[_staker].stakedTokens[tokenIndex] = stakedToken;\\n        } else {\\n            stakers[_staker].stakedTokens.push(stakedToken);\\n        }\\n\\n        // Update the mapping of the Token Id to the stakers address\\n        _bindAddressToTokenId(_staker, _tokenId);\\n    }\\n\\n    function _unstakeTokenIdWithAddress(address _staker, uint16 _tokenId)\\n        internal\\n    {\\n        // Find the index of the token from the stakedToken list\\n        uint16 tokenIndex = maxSupply;\\n        for (uint16 i = 0; i < stakers[_staker].stakedTokens.length; i++) {\\n            if (stakers[_staker].stakedTokens[i].tokenId == _tokenId) {\\n                tokenIndex = i;\\n                break;\\n            }\\n        }\\n\\n        // _tokenId is in stakedTokens\\n        if (tokenIndex < maxSupply) {\\n            // Remove this token from the users stakedTokens list\\n            stakers[_staker].stakedTokens[tokenIndex].staker = address(0);\\n            stakers[_staker].stakedTokens[tokenIndex].timeOfStaking = 0;\\n        }\\n\\n        // Set the stakerAddress for the tokenId to address(0) to indicate that the token is no longer staked\\n        stakerAddress[_tokenId] = address(0);\\n    }\\n\\n    // This method ensures that the staking data is intact\\n    // must be called after all the _stakeTokenIdWithAddress/_unstakeTokenIdWithAddress calls are finished\\n    function _updateStakingMetadata(address _staker) internal {\\n        uint16 totalStakedCountByAddress = _getStakeCountByAddress(_staker);\\n        stakers[_staker].amountStaked = totalStakedCountByAddress;\\n        stakers[_staker].timeOfLastUpdate = block.timestamp;\\n\\n        bool completelyUnstaked = totalStakedCountByAddress == 0;\\n        if (completelyUnstaked) {\\n            _unstakeAllByAddress(_staker);\\n        } else {\\n            _addToActiveStakers(_staker);\\n        }\\n    }\\n\\n    function _addToActiveStakers(address _staker) internal {\\n        for (uint16 i = 0; i < activeStakers.length; i++) {\\n            if (activeStakers[i] == _staker) {\\n                return;\\n            }\\n        }\\n\\n        activeStakers.push(_staker);\\n    }\\n\\n    function _removeFromActiveStakers(address _inactiveStakerAddress)\\n        internal\\n        returns (bool)\\n    {\\n        for (uint256 i = 0; i < activeStakers.length; i++) {\\n            if (activeStakers[i] == _inactiveStakerAddress) {\\n                activeStakers[i] = activeStakers[activeStakers.length - 1];\\n                activeStakers.pop();\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    // Clear staking data of an address\\n    function _unstakeAllByAddress(address _staker) internal {\\n        _removeFromActiveStakers(_staker);\\n        stakers[_staker].timeOfLastUpdate = block.timestamp;\\n        delete stakers[_staker].stakedTokens;\\n        stakers[_staker].amountStaked = 0;\\n    }\\n\\n    // Binds the staker information to a token Id\\n    function _bindAddressToTokenId(address _staker, uint16 _tokenId) internal {\\n        address previousStakerAddress = stakerAddress[_tokenId];\\n        bool hasValidPreviousStakerAddress = previousStakerAddress != _staker &&\\n            previousStakerAddress != address(0);\\n\\n        // Unstake and update previous owner if there's any\\n        if (hasValidPreviousStakerAddress) {\\n            _unstakeTokenIdWithAddress(previousStakerAddress, _tokenId);\\n            _updateStakingMetadata(previousStakerAddress);\\n        }\\n\\n        stakerAddress[_tokenId] = _staker;\\n    }\\n\\n    function _getStakeCountByAddress(address _staker)\\n        internal\\n        view\\n        returns (uint16)\\n    {\\n        uint16 stakeCount = 0;\\n\\n        for (uint16 i = 0; i < stakers[_staker].stakedTokens.length; i++) {\\n            uint16 currentTokenId = stakers[_staker].stakedTokens[i].tokenId;\\n            bool dataIsCorrect = stakers[_staker].stakedTokens[i].staker ==\\n                _staker &&\\n                stakerAddress[currentTokenId] == _staker;\\n            bool stillInOwnersWallet = nftCollection.ownerOf(currentTokenId) ==\\n                _staker;\\n\\n            // Count only those that have valid staking data and still owned by the staker\\n            if (stillInOwnersWallet && dataIsCorrect) {\\n                stakeCount++;\\n            }\\n        }\\n\\n        return stakeCount;\\n    }\\n\\n    function _getAllActiveStakers() internal view returns (address[] memory) {\\n        address[] memory verifiedStakers = new address[](activeStakers.length);\\n        uint16 counter = 0;\\n        for (uint16 i = 0; i < activeStakers.length; i++) {\\n            address currentAddress = activeStakers[i];\\n            StakedToken[] memory stakedTokens = stakers[currentAddress]\\n                .stakedTokens;\\n            for (uint16 j = 0; j < stakedTokens.length; j++) {\\n                if (\\n                    stakerAddress[stakedTokens[j].tokenId] == currentAddress &&\\n                    nftCollection.ownerOf(stakedTokens[j].tokenId) ==\\n                    currentAddress\\n                ) {\\n                    verifiedStakers[counter] = currentAddress;\\n                    counter++;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        address[] memory filteredActiveStakers = new address[](counter);\\n        for (uint16 i = 0; i < counter; i++) {\\n            filteredActiveStakers[i] = verifiedStakers[i];\\n        }\\n\\n        return filteredActiveStakers;\\n    }\\n\\n    function _countAllStakedTokens() internal view returns (uint16) {\\n        uint16 total = 0;\\n        address[] memory currentActiveStakers = _getAllActiveStakers();\\n        for (uint16 i = 0; i < currentActiveStakers.length; i++) {\\n            total += _getStakeCountByAddress(currentActiveStakers[i]);\\n        }\\n\\n        return total;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_nftCollection\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_maxSupply\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"allowStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_flag\",\"type\":\"bool\"}],\"name\":\"allowUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"bulkStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"bulkUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"forceBulkStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"}],\"name\":\"forceBulkUnstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_targetStaker\",\"type\":\"address\"}],\"name\":\"forceUnstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_tokenIds\",\"type\":\"uint16[]\"},{\"internalType\":\"uint256\",\"name\":\"timeOfStaking\",\"type\":\"uint256\"}],\"name\":\"forceUpdateTimeOfStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveStakers\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllActiveStakersCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllStakedTokens\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timeOfStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationOfStaking\",\"type\":\"uint256\"}],\"internalType\":\"struct ShonenJunkQuesting.StakedToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMyTotalStakeCount\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"}],\"name\":\"getStakedTokensByAddress\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"tokenId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timeOfStaking\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"durationOfStaking\",\"type\":\"uint256\"}],\"internalType\":\"struct ShonenJunkQuesting.StakedToken[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumTimeOfStaking\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCollection\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minimumTimeOfStaking\",\"type\":\"uint256\"}],\"name\":\"setStartOfStaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"amountStaked\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"timeOfLastUpdate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_tokenId\",\"type\":\"uint16\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ShonenJunkQuesting", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000f4121a2880c225f90dc3b3466226908c9cb2b0850000000000000000000000000000000000000000000000000000000000002329", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}