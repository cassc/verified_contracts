{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/token-distribution/nft/support/MoonpassNFTDistributionResetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Proprietary\\n/**\\n\\n  Moonpass Token Management Platform. All rights reserved.\\n  \\n  Access https://moonpass.io to learn more.\\n\\n*/\\n\\npragma solidity ^0.8.18;\\n\\nimport { MoonpassNFTDistribution } from \\\"../MoonpassNFTDistribution.sol\\\";\\nimport { MoonpassRoles } from \\\"../../../auth/MoonpassRoles.sol\\\";\\n\\ncontract MoonpassNFTDistributionResetter is\\n  MoonpassNFTDistribution\\n{\\n  function reinitialize(\\n    uint256 committed,\\n    uint64 version\\n  )\\n    public\\n    reinitializer(version)\\n    onlyRole(MoonpassRoles.UPGRADER_ROLE)\\n  {\\n    MoonpassTokenDistributionStorage storage $$ = _getMoonpassTokenDistributionStorage();\\n    $$._committed = committed;\\n  }\\n}\"\r\n    },\r\n    \"src/token-distribution/nft/MoonpassNFTDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Proprietary\\n/**\\n\\n  Moonpass Token Management Platform. All rights reserved.\\n  \\n  Access https://moonpass.io to learn more.\\n\\n*/\\n\\npragma solidity ^0.8.18;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { MoonpassInitializer, RequestSignature } from \\\"../../interfaces/IMoonpassContract.sol\\\";\\nimport { IMoonpassNFTDistribution, NFTDistributionInitializer, SetNFTCollectionRequest, AddNFTAllocationsRequest, RemoveNFTAllocationsRequest } from \\\"../../interfaces/token-distribution/nft/IMoonpassNFTDistribution.sol\\\";\\nimport { MoonpassTokenDistribution } from \\\"../MoonpassTokenDistribution.sol\\\";\\nimport { Token, TokenLibrary } from \\\"../../types/Token.sol\\\";\\nimport { MoonpassRoles } from \\\"../../auth/MoonpassRoles.sol\\\";\\n\\ncontract MoonpassNFTDistribution is\\n  IMoonpassNFTDistribution,\\n  MoonpassTokenDistribution\\n{\\n  using TokenLibrary for Token;\\n\\n  bytes32 internal constant SET_NFT_COLLECTION_TYPEHASH = keccak256(\\\"SetNFTCollectionRequest(uint256 nftNetworkId,address nftAddress,RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n  bytes32 internal constant RESET_ALLOCATIONS_TYPEHASH = keccak256(\\\"ResetNFTAllocationsRequest(RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n  bytes32 internal constant ADD_ALLOCATIONS_TYPEHASH = keccak256(\\\"AddNFTAllocationsRequest(uint256[] tokenIds,uint256[] deposits,RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n  bytes32 internal constant REMOVE_ALLOCATIONS_TYPEHASH = keccak256(\\\"RemoveNFTAllocationsRequest(uint256[] tokenIds,RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n\\n  uint256 constant DEPOSIT_MASK = 18446744073709551615;\\n  uint256 constant DEPOSIT_BITS = 64;\\n  uint256 constant DEPOSIT_SLOTS = 256 / DEPOSIT_BITS;\\n  uint256 constant DEPOSIT_DECIMALS = 4;\\n  uint256 constant TOKEN_MASK = MASK_32;\\n  uint256 constant TOKEN_BITS = 32;\\n  uint256 constant TOKEN_SLOTS = 256 / TOKEN_BITS;\\n\\n  struct MoonpassNFTDistributionStorage {\\n    uint256 _nftNetworkId;\\n    address _nftAddress;\\n    uint256 _decimalsGap;\\n    uint256 _maxAllocationIndex;\\n  }\\n\\n  bytes32 private constant MoonpassNFTDistributionStorageLocation = 0xd581d835ebfbc96743dca8a21ec649c36be6c867b7e595a8b88d31eef342ea64;\\n\\n  function _getMoonpassNFTDistributionStorage()\\n    internal\\n    pure \\n    returns (MoonpassNFTDistributionStorage storage $) \\n  {\\n    assembly {\\n      $.slot := MoonpassNFTDistributionStorageLocation\\n    }\\n  }\\n\\n  function initialize(\\n    NFTDistributionInitializer calldata data,\\n    MoonpassInitializer calldata moonpass\\n  )\\n    initializer\\n    public\\n  {\\n    __TokenDistribution_init(data.distribution, moonpass);\\n    _setNFTCollection(data.nftNetworkId, data.nftAddress);\\n  }\\n\\n  function allocationOf(\\n    uint256 tokenId\\n  ) \\n    external \\n    view \\n    returns(\\n      uint256 balanceAmount,\\n      uint256 depositAmount,\\n      uint256 releasedAmount,\\n      uint256 withdrawableAmount,\\n      uint256 withdrawnAmount\\n    )\\n  {\\n    balanceAmount = _balanceOf(tokenId);\\n    depositAmount = _resolveDeposit(tokenId);\\n    releasedAmount = _releasedAt(tokenId, block.timestamp);\\n    withdrawableAmount = _withdrawableAt(tokenId, block.timestamp);\\n    withdrawnAmount = _resolveWithdrawn(tokenId);\\n  }\\n\\n  function depositOf(\\n    uint256 tokenId\\n  )\\n    external\\n    view\\n    returns(\\n      uint256 amount\\n    )\\n  {\\n    amount = _resolveDeposit(tokenId);\\n  }\\n\\n  function balanceOf(\\n    uint256 tokenId\\n  )\\n    external\\n    view\\n    returns(\\n      uint256 amount\\n    )\\n  {\\n    amount = _balanceOf(tokenId);\\n  }\\n\\n  function withdrawn(\\n    uint256 tokenId\\n  )\\n    external\\n    view\\n    returns(\\n      uint256 amount\\n    )\\n  {\\n    amount = _resolveWithdrawn(tokenId);\\n  }\\n\\n  function withdrawable(\\n    uint256 tokenId\\n  )\\n    external\\n    view\\n    returns(\\n      uint256 amount\\n    )\\n  {\\n    amount = _withdrawableAt(tokenId, block.timestamp);\\n  }\\n\\n  function withdrawableAt(\\n    uint256 tokenId,\\n    uint256 timestamp\\n  )\\n    external\\n    view\\n    returns(\\n      uint256 amount\\n    )\\n  {\\n    amount = _withdrawableAt(tokenId, timestamp);\\n  }\\n\\n  function released(\\n    uint256 tokenId\\n  )\\n    external\\n    view\\n    returns(\\n      uint256 amount\\n    )\\n  {\\n    amount = _releasedAt(tokenId, block.timestamp);\\n  }\\n\\n  function releasedAt(\\n    uint256 tokenId,\\n    uint256 timestamp\\n  )\\n    external\\n    view\\n    returns(\\n      uint256 amount\\n    )\\n  {\\n    amount = _releasedAt(tokenId, timestamp);\\n  }\\n\\n  function withdraw(\\n    uint256 tokenId,\\n    address to\\n  )\\n    external\\n    whenNotPaused\\n    whenCommitted\\n    onlyRole(MoonpassRoles.NFT_DISTRIBUTION_WITHDRAW_ROLE)\\n  {\\n    _withdraw(tokenId, to, _withdrawableAt(tokenId, block.timestamp));\\n  }\\n\\n  function withdraw(\\n    uint256 tokenId,\\n    address to,\\n    uint256 amount\\n  )\\n    external\\n    whenNotPaused\\n    whenCommitted\\n    onlyRole(MoonpassRoles.NFT_DISTRIBUTION_WITHDRAW_ROLE)\\n  {\\n    _withdraw(tokenId, to, amount);\\n  }\\n\\n  function nftCollection() \\n    external \\n    view \\n    returns (\\n      uint256 nftNetworkId,\\n      address nftAddress\\n    )\\n  {\\n    MoonpassNFTDistributionStorage storage $ = _getMoonpassNFTDistributionStorage();\\n    nftNetworkId = $._nftNetworkId;\\n    nftAddress = $._nftAddress;\\n  }\\n\\n  function setNFTCollection(\\n    SetNFTCollectionRequest calldata request,\\n    RequestSignature calldata signature\\n  )\\n    external\\n    whenNotCommitted\\n  {\\n    bytes memory data = abi.encode(\\n      SET_NFT_COLLECTION_TYPEHASH,\\n      request.nftNetworkId,\\n      request.nftAddress,\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE, _signerFrom(data, signature));\\n\\n    _setNFTCollection(request.nftNetworkId, request.nftAddress);\\n  }\\n\\n  function setNFTCollection(\\n    uint256 _nftNetworkId,\\n    address _nftAddress\\n  )\\n    external\\n    whenNotCommitted\\n    onlyRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE)\\n  {\\n    _setNFTCollection(_nftNetworkId, _nftAddress);\\n  }\\n\\n  function addAllocations(\\n    AddNFTAllocationsRequest calldata request,\\n    RequestSignature calldata signature\\n  )\\n    external\\n    whenNotCommitted\\n  {\\n    bytes memory data = abi.encode(\\n      keccak256(abi.encodePacked(request.tokenIds)),\\n      keccak256(abi.encodePacked(request.deposits)),\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE, _signerFrom(data, signature));\\n\\n    _addAllocations(request.tokenIds, request.deposits);\\n  }\\n\\n  function addAllocations(\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata deposits\\n  )\\n    external\\n    whenNotCommitted\\n    onlyRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE)\\n  {\\n    _addAllocations(tokenIds, deposits);\\n  }\\n\\n  function removeAllocations(\\n    RemoveNFTAllocationsRequest calldata request,\\n    RequestSignature calldata signature\\n  )\\n    external\\n    whenNotCommitted\\n  {\\n    bytes memory data = abi.encode(\\n      REMOVE_ALLOCATIONS_TYPEHASH,\\n      keccak256(abi.encodePacked(request.tokenIds)),\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE, _signerFrom(data, signature));\\n\\n    _removeAllocations(request.tokenIds);\\n  }\\n\\n  function removeAllocations(\\n    uint256[] calldata tokenIds\\n  )\\n    external\\n    whenNotCommitted\\n    onlyRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE)\\n  {\\n    _removeAllocations(tokenIds);\\n  }\\n\\n  function resetAllocations(\\n    RequestSignature calldata signature\\n  )\\n    external\\n    whenNotCommitted\\n  {\\n    bytes memory data = abi.encode(\\n      RESET_ALLOCATIONS_TYPEHASH,\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE, _signerFrom(data, signature));\\n\\n    _resetAllocations();\\n  }\\n\\n  function resetAllocations()\\n    external\\n    whenNotCommitted\\n    onlyRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE)\\n  {\\n    _resetAllocations();\\n  }\\n\\n  function _resolveDeposit(\\n    uint256 tokenId\\n  )\\n    internal\\n    override\\n    view\\n    returns(\\n      uint256 deposit\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $$ = _getMoonpassTokenDistributionStorage();\\n    MoonpassNFTDistributionStorage storage $ = _getMoonpassNFTDistributionStorage();\\n    deposit = ($$._allocations[tokenId / DEPOSIT_SLOTS] >> (tokenId % DEPOSIT_SLOTS * DEPOSIT_BITS) & DEPOSIT_MASK) * $._decimalsGap;\\n  }\\n\\n  function _withdraw(\\n    uint256 tokenId,\\n    address to,\\n    uint256 amount\\n  )\\n    private\\n  {\\n    if(to == address(0)) {\\n      revert InvalidAddressError();\\n    }\\n    if(amount == 0) {\\n      revert InvalidWithdrawAmountError();\\n    }\\n\\n    uint256 availableAmount = _withdrawableAt(tokenId, block.timestamp);\\n    if(availableAmount < amount) {\\n      revert InsufficientFundsError(tokenId, amount, availableAmount);\\n    }\\n    MoonpassTokenDistributionStorage storage $$ = _getMoonpassTokenDistributionStorage();\\n    $$._totalWithdrawals++;\\n    $$._totalWithdrawalsValue += amount;\\n    $$._withdrawals[tokenId] += amount;\\n\\n    $$._token.transfer(to, amount);\\n\\n    emit NFTAllocationWithdraw(tokenId, to, amount);\\n  }\\n\\n  function _setNFTCollection(\\n    uint256 nftNetworkId,\\n    address nftAddress\\n  )\\n    internal\\n  {\\n    if(nftAddress == address(0)) {\\n      revert InvalidAddressError();\\n    }\\n    MoonpassNFTDistributionStorage storage $ = _getMoonpassNFTDistributionStorage();\\n    $._nftNetworkId = nftNetworkId;\\n    $._nftAddress = nftAddress;\\n\\n    emit NFTDistributionCollectionChange(nftNetworkId, nftAddress);\\n  }\\n\\n  function _onTokenChange(Token newToken)\\n    internal\\n    override\\n  {\\n    MoonpassNFTDistributionStorage storage $ = _getMoonpassNFTDistributionStorage();\\n    $._decimalsGap = 10 ** (newToken.decimals() - DEPOSIT_DECIMALS);\\n  }\\n\\n  function _addAllocations(\\n    uint256[] calldata tokenIds,\\n    uint256[] calldata deposits\\n  )\\n    internal    \\n  {\\n    uint256 deposit;\\n    uint256 tokenId;\\n\\n    for(uint256 i = 0; i < deposits.length * DEPOSIT_SLOTS; i++) {\\n      deposit = deposits[i / DEPOSIT_SLOTS] >> (i % DEPOSIT_SLOTS * DEPOSIT_BITS) & DEPOSIT_MASK;\\n      if(deposit == 0) continue;\\n      tokenId = tokenIds[i / TOKEN_SLOTS] >> (i % TOKEN_SLOTS * TOKEN_BITS) & TOKEN_MASK;\\n      \\n      _addAllocation(tokenId, deposit);\\n    }\\n  }\\n  \\n\\n  function _addAllocation(\\n    uint256 tokenId,\\n    uint256 deposit\\n  )\\n    internal\\n  {\\n    MoonpassTokenDistributionStorage storage $$ = _getMoonpassTokenDistributionStorage();\\n    MoonpassNFTDistributionStorage storage $ = _getMoonpassNFTDistributionStorage();\\n    uint256 slot;\\n    uint256 bits;\\n    uint256 currentDeposit = _resolveDeposit(tokenId);\\n\\n    slot = tokenId / DEPOSIT_SLOTS;\\n    bits = tokenId % DEPOSIT_SLOTS * DEPOSIT_BITS;\\n    $$._allocations[slot] = ($$._allocations[slot] & ~(DEPOSIT_MASK << bits)) | (deposit << bits);\\n\\n    $._maxAllocationIndex = Math.max($._maxAllocationIndex, slot);\\n    $$._totalDeposits += currentDeposit == 0 ? 1 : 0;\\n    $$._totalDepositsValue += deposit * $._decimalsGap;\\n    $$._totalDepositsValue -= currentDeposit;\\n\\n    emit NFTAllocationCreate(tokenId, deposit * $._decimalsGap);\\n  }\\n\\n  function _removeAllocations(\\n    uint256[] calldata tokenIds\\n  )\\n    internal\\n  {\\n    uint256 deposit;\\n    uint256 tokenId;\\n    uint256 amount;\\n    uint256 total;\\n    MoonpassTokenDistributionStorage storage $$ = _getMoonpassTokenDistributionStorage();\\n    for(uint256 i = 0; i < tokenIds.length * TOKEN_SLOTS; i++) {\\n      tokenId = tokenIds[i / TOKEN_SLOTS] >> (i % TOKEN_SLOTS * TOKEN_BITS) & TOKEN_MASK;\\n      deposit = _resolveDeposit(tokenId);\\n      if(deposit == 0) continue;\\n\\n      $$._allocations[tokenId / DEPOSIT_SLOTS] &= ~(DEPOSIT_MASK << tokenId % DEPOSIT_SLOTS * DEPOSIT_BITS);\\n\\n      total++;\\n      amount += deposit;\\n\\n      emit NFTAllocationRemove(tokenId);\\n    }\\n\\n    $$._totalDeposits -= total;\\n    $$._totalDepositsValue -= amount; // Decimal gaps embedded\\n  }\\n\\n  function _resetAllocations()\\n    internal\\n  {\\n    MoonpassNFTDistributionStorage storage $ = _getMoonpassNFTDistributionStorage();\\n    MoonpassTokenDistributionStorage storage $$ = _getMoonpassTokenDistributionStorage();\\n    for(uint i = 0; i <= $._maxAllocationIndex; i++) {\\n      $$._allocations[i] = 0;\\n    }\\n    $$._totalDeposits = 0;\\n    $$._totalDepositsValue = 0;\\n    $._maxAllocationIndex = 0;\\n    emit NFTAllocationsReset();\\n  }\\n}\"\r\n    },\r\n    \"src/auth/MoonpassRoles.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Proprietary\\n/**\\n\\n  Moonpass Token Management Platform. All rights reserved.\\n  \\n  Access https://moonpass.io to learn more.\\n\\n*/\\n\\npragma solidity ^0.8.18;\\n\\nlibrary MoonpassRoles {\\n  bytes32 public constant FACTORY_MANAGER_ROLE = keccak256(\\\"FACTORY_MANAGER_ROLE\\\");\\n  bytes32 public constant DISTRIBUTION_MANAGER_ROLE = keccak256(\\\"DISTRIBUTION_MANAGER_ROLE\\\");\\n  bytes32 public constant NFT_DISTRIBUTION_WITHDRAW_ROLE = keccak256(\\\"NFT_DISTRIBUTION_WITHDRAW_ROLE\\\");\\n  bytes32 public constant ACCOUNT_DISTRIBUTION_WITHDRAW_ROLE = keccak256(\\\"ACCOUNT_DISTRIBUTION_WITHDRAW_ROLE\\\");\\n\\n  bytes32 public constant UPGRADER_ROLE = keccak256(\\\"UPGRADER_ROLE\\\");\\n  bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n  bytes32 public constant CLAIM_ADMIN_ROLE = keccak256(\\\"CLAIM_ADMIN_ROLE\\\");\\n  bytes32 public constant CLAIM_MANAGER_ROLE = keccak256(\\\"CLAIM_MANAGER_ROLE\\\");\\n  bytes32 public constant CLAIM_TRUSTEE_ROLE = keccak256(\\\"CLAIM_TRUSTEE_ROLE\\\");\\n  bytes32 public constant VAULT_TRUSTEE_ROLE = keccak256(\\\"VAULT_TRUSTEE_ROLE\\\");\\n\\n  bytes32 public constant AUTH_DEFAULT_ADMIN_ROLE = 0x00;\\n  bytes32 public constant AUTH_MANAGER_ROLE = keccak256(\\\"AUTH_MANAGER_ROLE\\\");\\n  bytes32 public constant AUTH_MASTER_ROLE = keccak256(\\\"AUTH_MASTER_ROLE\\\");\\n\\n  bytes32 public constant NFT_ADMIN_ROLE = keccak256(\\\"NFT_ADMIN_ROLE\\\");\\n  bytes32 public constant NFT_MANAGER_ROLE = keccak256(\\\"NFT_MANAGER_ROLE\\\");\\n  bytes32 public constant NFT_MINTER_ROLE = keccak256(\\\"NFT_MINTER_ROLE\\\");\\n\\n  bytes32 public constant STAKING_MANAGER_ROLE = keccak256(\\\"STAKING_MANAGER_ROLE\\\");\\n  bytes32 public constant PROPOSAL_MANAGER_ROLE = keccak256(\\\"PROPOSAL_MANAGER_ROLE\\\");\\n  bytes32 public constant FUNDRAISER_MANAGER_ROLE = keccak256(\\\"FUNDRAISER_MANAGER_ROLE\\\");\\n\\n  bytes32 public constant NFT_MINTER_TRUSTEE_ROLE = keccak256(\\\"NFT_MINTER_TRUSTEE_ROLE\\\");\\n  bytes32 public constant NFT_TRUSTEE_ROLE = keccak256(\\\"NFT_TRUSTEE_ROLE\\\");\\n  bytes32 public constant PROPOSAL_TRUSTEE_ROLE = keccak256(\\\"PROPOSAL_TRUSTEE_ROLE\\\");\\n  bytes32 public constant STAKING_TRUSTEE_ROLE = keccak256(\\\"STAKING_TRUSTEE_ROLE\\\");\\n  bytes32 public constant FUNDRAISER_TRUSTEE_ROLE = keccak256(\\\"FUNDRAISER_TRUSTEE_ROLE\\\");\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IMoonpassContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Proprietary\\n/**\\n\\n  Moonpass Token Management Platform. All rights reserved.\\n  \\n  Access https://moonpass.io to learn more.\\n\\n*/\\n\\npragma solidity ^0.8.18;\\n\\ninterface IMoonpassContract\\n{\\n  function authorizer() external view returns(address authorizerAddress);\\n\\n  function setAuthorizer(address authorizerAddress) external;\\n\\n  function setAuthorizer(SetAuthorizerRequest calldata request, RequestSignature calldata signature) external;\\n\\n  function version() external view returns (uint64);\\n\\n  error InvalidAddressError();\\n  error InvalidRequestError();\\n\\n  event AuthorizerChange(address authorizationManager);\\n}\\n\\nstruct MoonpassInitializer {\\n  address owner;\\n  address authorizer;\\n}\\n\\nstruct SetAuthorizerRequest {\\n  address authorizerAddress;\\n}\\n\\nstruct RequestSignature {\\n  uint8 v;\\n  bytes32 r;\\n  bytes32 s;\\n  uint256 expiry;\\n  uint256 nonce;\\n}\"\r\n    },\r\n    \"src/interfaces/token-distribution/nft/IMoonpassNFTDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Proprietary\\n/**\\n\\n  Moonpass Token Management Platform. All rights reserved.\\n  \\n  Access https://moonpass.io to learn more.\\n\\n*/\\n\\npragma solidity ^0.8.18;\\n\\nimport { MoonpassInitializer, RequestSignature } from \\\"../../IMoonpassContract.sol\\\";\\nimport { IMoonpassTokenDistribution, TokenDistributionInitializer } from \\\"../IMoonpassTokenDistribution.sol\\\";\\n\\ninterface IMoonpassNFTDistribution is \\n  IMoonpassTokenDistribution\\n{\\n  function initialize(NFTDistributionInitializer calldata data, MoonpassInitializer calldata moonpass) external;\\n\\n  function allocationOf(uint256 tokenId) external view returns(uint256 balanceAmount, uint256 depositAmount, uint256 releasedAmount, uint256 withdrawableAmount, uint256 withdrawnAmount);\\n\\n  function depositOf(uint256 tokenId) external view returns(uint256 amount);\\n  \\n  function balanceOf(uint256 tokenId) external view returns(uint256 amount);\\n\\n  function withdrawn(uint256 tokenId) external view returns(uint256 amount);\\n\\n  function withdrawable(uint256 tokenId) external view returns(uint256 amount);\\n\\n  function withdrawableAt(uint256 tokenId, uint256 timestamp) external view returns(uint256 amount);\\n    \\n  function released(uint256 tokenId) external view returns(uint256 amount);\\n\\n  function releasedAt(uint256 tokenId, uint256 timestamp) external view returns(uint256 amount);\\n  \\n  function withdraw(uint256 tokenId, address to, uint256 amount) external;\\n\\n  function withdraw(uint256 tokenId, address to) external;\\n\\n  function nftCollection() external view returns (uint256 nftNetworkId, address nftAddress);\\n\\n  function setNFTCollection(SetNFTCollectionRequest calldata request, RequestSignature calldata signature) external;\\n\\n  function setNFTCollection(uint256 nftNetworkId, address nftAddress) external;\\n\\n  function addAllocations(AddNFTAllocationsRequest calldata request,RequestSignature calldata signature) external;\\n\\n  function addAllocations(uint256[] calldata tokenIds, uint256[] calldata deposits) external;\\n\\n  function removeAllocations(RemoveNFTAllocationsRequest calldata request,RequestSignature calldata signature) external;\\n\\n  function removeAllocations(uint256[] calldata tokenIds) external;\\n\\n  function resetAllocations(RequestSignature calldata signature) external;\\n\\n  function resetAllocations() external;\\n\\n  event NFTDistributionCollectionChange(uint256 indexed nftNetworkId, address indexed nftAddress);\\n  event NFTAllocationRemove(uint256 indexed tokenId);\\n  event NFTAllocationsReset();\\n  event NFTAllocationCreate(uint256 indexed tokenId, uint256 indexed deposit);\\n  event NFTAllocationWithdraw(uint256 indexed tokenId, address indexed to, uint256 indexed amount);\\n  \\n  error InsufficientFundsError(uint256 tokenId, uint256 requested, uint256 available);\\n  error InvalidWithdrawAmountError();\\n}\\n\\nstruct NFTDistributionInitializer {\\n  TokenDistributionInitializer distribution;\\n  uint256 nftNetworkId;\\n  address nftAddress;\\n}\\n\\nstruct SetNFTCollectionRequest {\\n  uint256 nftNetworkId;\\n  address nftAddress;\\n}\\n\\nstruct AddNFTAllocationsRequest {\\n  uint256[] tokenIds;\\n  uint256[] deposits;\\n}\\n\\nstruct RemoveNFTAllocationsRequest {\\n  uint256[] tokenIds;\\n}\"\r\n    },\r\n    \"src/token-distribution/MoonpassTokenDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Proprietary\\n/**\\n\\n  Moonpass Token Management Platform. All rights reserved.\\n  \\n  Access https://moonpass.io to learn more.\\n\\n*/\\n\\npragma solidity ^0.8.18;\\n\\nimport { MoonpassInitializer, RequestSignature } from \\\"../interfaces/IMoonpassContract.sol\\\";\\nimport { IMoonpassTokenDistribution, TokenDistributionInitializer, ClawbackRequest, SetTokenRequest, SetNameRequest, SetVestingsRequest, VestingSchedule } from \\\"../interfaces/token-distribution/IMoonpassTokenDistribution.sol\\\";\\nimport { Token, TokenLibrary } from \\\"../types/Token.sol\\\";\\nimport { MoonpassContract } from \\\"../MoonpassContract.sol\\\";\\nimport { MoonpassRoles } from \\\"../auth/MoonpassRoles.sol\\\";\\n\\ncontract MoonpassTokenDistribution is\\n  IMoonpassTokenDistribution,\\n  MoonpassContract\\n{\\n  using TokenLibrary for Token;\\n\\n  bytes32 internal constant CLAWBACK_TYPEHASH = keccak256(\\\"ClawbackRequest(address to,RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n  bytes32 internal constant SET_TOKEN_TYPEHASH = keccak256(\\\"SetTokenRequest(address tokenAddress,RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n  bytes32 internal constant SET_NAME_TYPEHASH = keccak256(\\\"SetNameRequest(string name,RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n  bytes32 internal constant SET_VESTINGS_TYPEHASH = keccak256(\\\"SetVestingsRequest(uint256[] vestingsData,RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n  bytes32 internal constant COMMIT_TYPEHASH = keccak256(\\\"CommitRequest(RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n\\n  uint256 public constant ONE_HUNDRED_PERCENT = 100 * (10 ** 4);\\n  uint256 internal constant MASK_32 = 4294967295;\\n\\n  struct MoonpassTokenDistributionStorage {\\n    string _name;\\n    Token _token;\\n    uint256 _committed;\\n    uint256 _totalDeposits;\\n    uint256 _totalDepositsValue;\\n    uint256 _totalWithdrawals;\\n    uint256 _totalWithdrawalsValue;\\n\\n    uint256[] _vestings;\\n    mapping(uint256 => uint256) _allocations;\\n    mapping(uint256 => uint256) _withdrawals;\\n  }\\n\\n  bytes32 private constant MoonpassTokenDistributionStorageLocation = 0x17c81b7724de13b337e53af0b0bdf03a08a4b7236f0f52e022a14a1a2a5ec8b0;\\n\\n  function _getMoonpassTokenDistributionStorage()\\n    internal\\n    pure \\n    returns (MoonpassTokenDistributionStorage storage $) \\n  {\\n    assembly {\\n      $.slot := MoonpassTokenDistributionStorageLocation\\n    }\\n  }\\n\\n  function __TokenDistribution_init(\\n    TokenDistributionInitializer calldata data,\\n    MoonpassInitializer calldata moonpass\\n  )\\n    onlyInitializing\\n    internal\\n  {\\n    __Moonpass_init(moonpass);\\n    _setName(data.name);\\n    _setToken(data.tokenAddress);\\n  }\\n\\n  function committed()\\n    external\\n    view \\n    returns(\\n      bool isCommitted\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    isCommitted = $._committed == 1;\\n  }\\n\\n  function available()\\n    external\\n    view\\n    returns(\\n      uint256 percentage\\n    )\\n  {\\n    percentage = _availableAt(block.timestamp);\\n  }\\n\\n  function availableAt(\\n    uint256 timestamp\\n  )\\n    external\\n    view\\n    returns(\\n      uint256 percentage\\n    )\\n  {\\n    percentage = _availableAt(timestamp);\\n  }\\n\\n  function vestings()\\n    external\\n    view\\n    returns(\\n      VestingSchedule[] memory schedules\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    uint256 start;\\n    uint256 end;\\n    uint256 percentage;\\n    uint256 length = $._vestings.length;\\n    schedules = new VestingSchedule[](length);\\n    for(uint256 i = 0; i < length; i++) {\\n      (start, end, percentage) = _parseVesting($._vestings[i]);\\n      schedules[i] = VestingSchedule(start, end, percentage);\\n    }\\n  }\\n\\n  function balance()\\n    external\\n    view \\n    returns(uint256 amount)\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    amount = $._token.balanceOfSelf();\\n  }\\n\\n  function requiredBalance()\\n    external\\n    view\\n    returns(uint256 amount)\\n  {\\n    amount = _requiredBalanceAt(block.timestamp);\\n  }\\n\\n  function requiredBalanceAt(\\n    uint256 timestamp\\n  ) \\n    external\\n    view \\n    returns(uint256 amount)\\n  {\\n    amount = _requiredBalanceAt(timestamp);\\n  }\\n\\n  function commitment()\\n    external\\n    view\\n    returns(\\n      bool isCommitted,\\n      uint256 depositsAmount,\\n      uint256 withdrawalsAmount,\\n      uint256 balanceAmount,\\n      uint256 requiredBalanceAmount\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    isCommitted = $._committed == 1;\\n    depositsAmount = $._totalDepositsValue;\\n    withdrawalsAmount = $._totalWithdrawalsValue;\\n    balanceAmount = $._token.balanceOfSelf();\\n    requiredBalanceAmount = _requiredBalanceAt(block.timestamp);\\n  }\\n\\n  function deposits()\\n    external\\n    view\\n    returns(\\n      uint256 count,\\n      uint256 amount\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    count = $._totalDeposits;\\n    amount = $._totalDepositsValue;\\n  }\\n\\n  function withdrawals()\\n    external\\n    view\\n    returns(\\n      uint256 count,\\n      uint256 amount\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    count = $._totalWithdrawals;\\n    amount = $._totalWithdrawalsValue;\\n  }\\n\\n  function name()\\n    external \\n    view \\n    returns(\\n      string memory distributionName\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    distributionName = $._name;\\n  }\\n\\n  function setName(\\n    SetNameRequest calldata request,\\n    RequestSignature calldata signature\\n  ) \\n    external\\n  {\\n    bytes memory data = abi.encode(\\n      SET_NAME_TYPEHASH,\\n      request.name,\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE, _signerFrom(data, signature));\\n    \\n    _setName(request.name);\\n  }\\n\\n  function setName(\\n    string calldata distributionName\\n  ) \\n    external\\n    onlyRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE)\\n  {\\n    _setName(distributionName);\\n  }\\n\\n  function token()\\n    external\\n    view\\n    returns(\\n      address tokenAddress\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    tokenAddress = Token.unwrap($._token);\\n  }\\n\\n  function setToken(\\n    SetTokenRequest calldata request,\\n    RequestSignature calldata signature\\n  )\\n    external\\n    whenNotCommitted\\n  {\\n    bytes memory data = abi.encode(\\n      SET_TOKEN_TYPEHASH,\\n      request.tokenAddress,\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE, _signerFrom(data, signature));\\n    \\n    _setToken(request.tokenAddress);\\n  }\\n\\n  function setToken(\\n    address tokenAddress\\n  )\\n    external\\n    whenNotCommitted\\n    onlyRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE)\\n  {\\n    _setToken(tokenAddress);\\n  }\\n\\n  function setVestings(\\n    SetVestingsRequest calldata request,\\n    RequestSignature calldata signature\\n  )\\n    external\\n    whenNotCommitted\\n  {\\n    bytes memory data = abi.encode(\\n      SET_TOKEN_TYPEHASH,\\n      keccak256(abi.encodePacked(request.vestingsData)),\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE, _signerFrom(data, signature));\\n    \\n    _setVestings(request.vestingsData);\\n  }\\n\\n  function setVestings(\\n    uint256[] calldata vestingsData\\n  )\\n    external\\n    whenNotCommitted\\n    onlyRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE)\\n  {\\n    _setVestings(vestingsData);\\n  }\\n\\n  function commit(\\n    RequestSignature calldata signature\\n  )\\n    external\\n    whenNotCommitted\\n  {\\n    bytes memory data = abi.encode(\\n      COMMIT_TYPEHASH,\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE, _signerFrom(data, signature));\\n\\n    _commit();\\n  }\\n\\n  function commit()\\n    external\\n    whenNotCommitted\\n    onlyRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE)\\n  {\\n    _commit();\\n  }\\n\\n  function clawback(\\n    ClawbackRequest calldata request,\\n    RequestSignature calldata signature\\n  )\\n    external\\n  {\\n    bytes memory data = abi.encode(\\n      CLAWBACK_TYPEHASH,\\n      request.to,\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE, _signerFrom(data, signature));\\n\\n    _clawback(request.to);\\n  }\\n\\n  function clawback(\\n    address to\\n  )\\n    external\\n    onlyRole(MoonpassRoles.DISTRIBUTION_MANAGER_ROLE)\\n  {\\n    _clawback(to);\\n  }\\n\\n  function _setToken(\\n    address tokenAddress\\n  )\\n    internal\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    if($._totalDeposits > 0) {\\n      revert DepositsFoundError();\\n    }\\n    $._token = Token.wrap(tokenAddress);\\n    _onTokenChange($._token);\\n\\n    emit DistributionTokenChange(tokenAddress);\\n  }\\n\\n  function _setName(\\n    string calldata distributionName\\n  )\\n    internal\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    $._name = distributionName;\\n    emit DistributionNameChange();\\n  }\\n\\n  function _onTokenChange(Token newToken)\\n    internal\\n    virtual\\n  {}\\n\\n  function _setVestings(\\n    uint256[] calldata vestingsData\\n  )\\n    internal\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n   $._vestings = vestingsData;\\n\\n    emit DistributionVestingsChange(vestingsData);\\n  }\\n\\n  function _commit()\\n    internal\\n  {\\n    _validateVestings();\\n    _validateDeposits();\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    $._committed = 1;\\n\\n    emit DistributionCommit();\\n  }\\n\\n  function _balanceOf(\\n    uint256 allocation\\n  )\\n    internal\\n    view\\n    returns(\\n      uint256 balanceAmount\\n    )\\n  {\\n    balanceAmount = _resolveDeposit(allocation) - _resolveWithdrawn(allocation);\\n  }\\n\\n  function _requiredBalanceAt(\\n    uint256 timestamp\\n  ) \\n    internal\\n    view \\n    returns(uint256 amount)\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    amount = ($._totalDepositsValue * _availableAt(timestamp) / ONE_HUNDRED_PERCENT) - $._totalWithdrawalsValue;\\n  }\\n\\n  function _withdrawableAt(\\n    uint256 allocation,\\n    uint256 timestamp\\n  )\\n    internal\\n    view\\n    returns(\\n      uint256 withdrawableAmount\\n    )\\n  {\\n    uint256 released = _releasedAt(allocation, timestamp);\\n    uint256 withdrawn = _resolveWithdrawn(allocation);\\n    if(withdrawn > released) {\\n      withdrawableAmount = 0;\\n    } else {\\n      withdrawableAmount = released - withdrawn;\\n    }\\n  }\\n\\n  function _releasedAt(\\n    uint256 allocation,\\n    uint256 timestamp\\n  )\\n    internal\\n    view\\n    returns(\\n      uint256 releasedAmount\\n    )\\n  {\\n    releasedAmount = _resolveDeposit(allocation) * _availableAt(timestamp) / ONE_HUNDRED_PERCENT;\\n  }\\n\\n  function _parseVesting(\\n    uint256 vestingData\\n  )\\n    internal\\n    pure\\n    returns(\\n      uint256 start,\\n      uint256 end,\\n      uint256 percentage\\n    )\\n  {\\n    start = (vestingData >> 64) & MASK_32;\\n    end = (vestingData >> 32) & MASK_32;\\n    percentage = vestingData & MASK_32;\\n  }\\n\\n  function _resolveDeposit(\\n    uint256 allocation\\n  )\\n    internal\\n    virtual\\n    view\\n    returns(\\n      uint256 deposit\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    deposit = $._allocations[allocation];\\n  }\\n\\n  function _resolveWithdrawn(\\n    uint256 allocation\\n  )\\n    internal\\n    virtual\\n    view\\n    returns(\\n      uint256 withdrawn\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    withdrawn = $._withdrawals[allocation];\\n  }\\n\\n  function _availableAt(uint256 timestamp)\\n    internal\\n    view\\n    returns(\\n      uint256 percentage\\n    )\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    uint256 length = $._vestings.length;\\n    uint256 current = 0;\\n    for(uint256 i = 0; i < length; i++) {\\n      current = _availableByVestingAt($._vestings[i], timestamp);\\n      if(current == 0) {\\n        break;\\n      }\\n      percentage += current;\\n    }\\n  }\\n\\n  function _availableByVestingAt(\\n    uint256 vestingData,\\n    uint256 timestamp\\n  )\\n    internal\\n    pure\\n    returns(\\n      uint256 availablePercentage\\n    )\\n  {\\n    (uint256 start, uint256 end, uint256 percentage) = _parseVesting(vestingData);\\n    availablePercentage = start >= timestamp ? \\n      0 : end < timestamp ?\\n        percentage : (timestamp - start) * percentage / (end - start);\\n  }\\n\\n  function _validateDeposits()\\n    internal\\n    view\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    if($._totalDeposits == 0 || $._totalDepositsValue == 0) {\\n      revert MissingAllocationsError();\\n    }\\n  }\\n\\n  function _validateVestings()\\n    internal\\n    view\\n  {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    uint256 length = $._vestings.length;\\n    uint256 previousEnd = 0;\\n    uint256 totalPercentage;\\n    uint256 start;\\n    uint256 end;\\n    uint256 percentage;\\n\\n    if(length == 0) revert InvalidVestingsError();\\n    \\n    for(uint256 i = 0; i < length; i++) {\\n      (start, end, percentage) = _parseVesting($._vestings[i]);\\n      if(start > end\\n        || percentage == 0\\n        || percentage > ONE_HUNDRED_PERCENT\\n        || previousEnd > start\\n      ) {\\n        revert InvalidVestingError(i);\\n      }\\n      totalPercentage += percentage;\\n      previousEnd = end;\\n    }\\n\\n    if(totalPercentage != ONE_HUNDRED_PERCENT) revert InvalidVestingsError();\\n  }\\n\\n  function _clawback(\\n    address to\\n  )\\n    private\\n  {\\n    if(to == address(0)) {\\n      revert InvalidAddressError();\\n    }\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    uint256 tokenBalance = $._token.balanceOfSelf();\\n    if($._committed == 1) {\\n      uint256 required = _requiredBalanceAt(block.timestamp);\\n      if(tokenBalance <= required) {\\n        revert NoBalanceToClawbackError();\\n      }\\n      $._token.transfer(to, tokenBalance - required);\\n    } else {\\n      $._token.transfer(to, tokenBalance);\\n    }\\n\\n    emit DistributionClawback(to);\\n  }\\n\\n  modifier whenNotCommitted {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    if($._committed == 1) {\\n      revert DistributionIsCommittedError();\\n    }\\n    _;\\n  }\\n\\n  modifier whenCommitted {\\n    MoonpassTokenDistributionStorage storage $ = _getMoonpassTokenDistributionStorage();\\n    if($._committed == 0) {\\n      revert DistributionNotCommittedError();\\n    }\\n    _;\\n  }\\n}\"\r\n    },\r\n    \"src/types/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ntype Token is address;\\n\\nusing {greaterThan as >, lessThan as <, equals as ==} for Token global;\\n\\nfunction equals(Token token, Token other) pure returns (bool) {\\n  return Token.unwrap(token) == Token.unwrap(other);\\n}\\n\\nfunction greaterThan(Token token, Token other) pure returns (bool) {\\n  return Token.unwrap(token) > Token.unwrap(other);\\n}\\n\\nfunction lessThan(Token token, Token other) pure returns (bool) {\\n  return Token.unwrap(token) < Token.unwrap(other);\\n}\\n\\n/// @title TokenLibrary\\n/// @dev This library allows for transferring and holding native tokens and ERC20 tokens\\nlibrary TokenLibrary {\\n  using TokenLibrary for Token;\\n\\n  /// @notice Thrown when a native transfer fails\\n  error NativeTransferFailed();\\n\\n  /// @notice Thrown when an ERC20 transfer fails\\n  error ERC20TransferFailed();\\n\\n  Token public constant NATIVE = Token.wrap(address(0));\\n\\n  function transfer(Token token, address to, uint256 amount) internal {\\n    // implementation from\\n    // https://github.com/transmissions11/solmate/blob/e8f96f25d48fe702117ce76c79228ca4f20206cb/src/utils/SafeTransferLib.sol\\n\\n    bool success;\\n    if (token.isNative()) {\\n      assembly {\\n        // Transfer the ETH and store if it succeeded or not.\\n        success := call(gas(), to, amount, 0, 0, 0, 0)\\n      }\\n\\n      if (!success) revert NativeTransferFailed();\\n    } else {\\n      assembly {\\n        // We'll write our calldata to this slot below, but restore it later.\\n        let memPointer := mload(0x40)\\n\\n        // Write the abi-encoded calldata into memory, beginning with the function selector.\\n        mstore(0, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n        mstore(4, to) // Append the \\\"to\\\" argument.\\n        mstore(36, amount) // Append the \\\"amount\\\" argument.\\n\\n        success :=\\n          and(\\n            // Set success to whether the call reverted, if not we check it either\\n            // returned exactly 1 (can't just be non-zero data), or had no return data.\\n            or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n            // We use 68 because that's the total length of our calldata (4 + 32 * 2)\\n            // Counterintuitively, this call() must be positioned after the or() in the\\n            // surrounding and() because and() evaluates its arguments from right to left.\\n            call(gas(), token, 0, 0, 68, 0, 32)\\n          )\\n\\n        mstore(0x60, 0) // Restore the zero slot to zero.\\n        mstore(0x40, memPointer) // Restore the memPointer.\\n      }\\n\\n      if (!success) revert ERC20TransferFailed();\\n    }\\n  }\\n\\n  function balanceOfSelf(Token token) internal view returns (uint256) {\\n    if (token.isNative()) {\\n      return address(this).balance;\\n    } else {\\n      return IERC20Metadata(Token.unwrap(token)).balanceOf(address(this));\\n    }\\n  }\\n\\n  function balanceOf(Token token, address owner) internal view returns (uint256) {\\n    if (token.isNative()) {\\n      return owner.balance;\\n    } else {\\n      return IERC20Metadata(Token.unwrap(token)).balanceOf(owner);\\n    }\\n  }\\n\\n  function decimals(Token token) internal view returns (uint256) {\\n    if (token.isNative()) {\\n      return 18;\\n    } else {\\n      return IERC20Metadata(Token.unwrap(token)).decimals();\\n    }\\n  }\\n\\n  function name(Token token) internal view returns (string memory) {\\n    if (token.isNative()) {\\n      return \\\"native\\\";\\n    } else {\\n      return IERC20Metadata(Token.unwrap(token)).name();\\n    }\\n  }\\n\\n  function symbol(Token token) internal view returns (string memory) {\\n    if (token.isNative()) {\\n      return \\\"native\\\";\\n    } else {\\n      return IERC20Metadata(Token.unwrap(token)).symbol();\\n    }\\n  }\\n\\n  function isNative(Token token) internal pure returns (bool) {\\n    return Token.unwrap(token) == Token.unwrap(NATIVE);\\n  }\\n}\"\r\n    },\r\n    \"src/interfaces/token-distribution/IMoonpassTokenDistribution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Proprietary\\n/**\\n\\n  Moonpass Token Management Platform. All rights reserved.\\n  \\n  Access https://moonpass.io to learn more.\\n\\n*/\\n\\npragma solidity ^0.8.18;\\n\\nimport { RequestSignature } from \\\"../IMoonpassContract.sol\\\";\\n\\ninterface IMoonpassTokenDistribution\\n{\\n  function committed() external view returns(bool isCommitted);\\n\\n  function available() external view returns(uint256 percentage);\\n\\n  function availableAt(uint256 timestamp) external view returns(uint256 percentage);\\n\\n  function balance() external view returns(uint256 amount);\\n\\n  function requiredBalance() external view returns(uint256 amount);\\n\\n  function requiredBalanceAt(uint256 timestamp) external view returns(uint256 amount);\\n\\n  function commitment() external view returns(bool isCommitted, uint256 depositsAmount, uint256 withdrawalsAmount, uint256 balanceAmount, uint256 requiredBalanceAmount);\\n\\n  function deposits() external view returns(uint256 count, uint256 amount);\\n\\n  function withdrawals() external view returns(uint256 count, uint256 amount);\\n\\n  function name() external view returns(string memory distributionName);\\n\\n  function setName(SetNameRequest calldata request, RequestSignature calldata signature) external;\\n\\n  function setName(string calldata distributionName) external;\\n\\n  function token() external view returns(address tokenAddress);\\n\\n  function setToken(SetTokenRequest calldata request, RequestSignature calldata signature) external;\\n\\n  function setToken(address tokenAddress) external;\\n\\n  function setVestings(SetVestingsRequest calldata request, RequestSignature calldata signature) external;\\n\\n  function setVestings(uint256[] calldata vestingsData) external;\\n\\n  function commit(RequestSignature calldata signature) external;\\n\\n  function commit() external;\\n\\n  function vestings() external view returns(VestingSchedule[] memory schedules);\\n\\n  function clawback(ClawbackRequest calldata request, RequestSignature calldata signature) external;\\n\\n  function clawback(address to) external;\\n\\n  event DistributionClawback(address indexed to);\\n  event DistributionCommit();\\n  event DistributionVestingsChange(uint256[] indexed vestings);\\n  event DistributionTokenChange(address indexed tokenAddress);\\n  event DistributionNameChange();\\n\\n  error InvalidVestingError(uint256 index);\\n  error InvalidVestingsError();\\n  error MissingAllocationsError();\\n  error DistributionIsCommittedError();\\n  error DistributionNotCommittedError();\\n  error NoBalanceToClawbackError();\\n  error DepositsFoundError();\\n}\\n\\nstruct TokenDistributionInitializer {\\n  string name;\\n  address tokenAddress;\\n}\\n\\nstruct ClawbackRequest {\\n  address to;\\n}\\n\\nstruct SetTokenRequest {\\n  address tokenAddress;\\n}\\n\\nstruct SetNameRequest {\\n  string name;\\n}\\n\\nstruct SetVestingsRequest {\\n  uint256[] vestingsData;\\n}\\n\\nstruct VestingSchedule {\\n  uint256 start;\\n  uint256 end;\\n  uint256 percentage;\\n}\"\r\n    },\r\n    \"src/MoonpassContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Proprietary\\n/**\\n\\n  Moonpass Token Management Platform. All rights reserved.\\n  \\n  Access https://moonpass.io to learn more.\\n\\n*/\\n\\npragma solidity ^0.8.18;\\n\\nimport { IMoonpassContract, MoonpassInitializer, SetAuthorizerRequest, RequestSignature } from \\\"./interfaces/IMoonpassContract.sol\\\";\\nimport { PausableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { EIP712Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { ERC165Checker } from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport { IAccessControl } from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport { ECDSA } from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport { MoonpassRoles } from \\\"./auth/MoonpassRoles.sol\\\";\\n\\ncontract MoonpassContract is\\n  IMoonpassContract,\\n  OwnableUpgradeable,\\n  PausableUpgradeable,\\n  EIP712Upgradeable,\\n  UUPSUpgradeable\\n{\\n  using ECDSA for bytes32;\\n  using ERC165Checker for address;\\n\\n  bytes32 public constant SET_AUTHORIZER_TYPEHASH = keccak256(\\\"SetAuthorizerRequest(address authorizerAddress,RequestContext context)RequestContext(address requester,uint256 expiry,uint256 nonce)\\\");\\n  bytes32 public constant CONTEXT_TYPEHASH = 0x08c0db72018bde0ea5215618bdbdfe278d6c1fae34ae3cfa2ef60ce156906175;\\n\\n  struct MoonpassContractStorage {\\n    address _authorizer;\\n  }\\n\\n  bytes32 private constant MoonpassContractStorageLocation = 0xcf1e3c2eec56b7a457652c54121209bbbd2922d418d6ab903c014713a5d410e2;\\n\\n  function _getMoonpassContractStorage()\\n    private\\n    pure \\n    returns (MoonpassContractStorage storage $) \\n  {\\n    assembly {\\n      $.slot := MoonpassContractStorageLocation\\n    }\\n  }\\n\\n  function __Moonpass_init(\\n    MoonpassInitializer calldata data\\n  )\\n    internal\\n    onlyInitializing\\n  {\\n    __Pausable_init();\\n    __EIP712_init(\\\"moonpass\\\", \\\"1.1\\\");\\n    __Ownable_init(data.owner);\\n    __UUPSUpgradeable_init();\\n    _setAuthorizer(data.authorizer);\\n  }\\n\\n  function setAuthorizer(\\n    address authorizerAddress\\n  )\\n    external\\n    onlyRole(MoonpassRoles.AUTH_MANAGER_ROLE)\\n  {\\n    _setAuthorizer(authorizerAddress);\\n  }\\n\\n  function setAuthorizer(\\n    SetAuthorizerRequest calldata request,\\n    RequestSignature calldata signature\\n  ) \\n    external\\n  {\\n    bytes memory data = abi.encode(\\n      SET_AUTHORIZER_TYPEHASH,\\n      request.authorizerAddress,\\n      _encodeContext(signature)\\n    );\\n    _checkRole(MoonpassRoles.AUTH_MANAGER_ROLE, _signerFrom(data, signature));\\n\\n    _setAuthorizer(request.authorizerAddress);\\n  }\\n\\n  function version()\\n    external \\n    view \\n    returns (uint64)\\n  {\\n    return _getInitializedVersion();\\n  }\\n\\n  function _encodeContext(\\n    RequestSignature calldata signature\\n  )\\n    internal\\n    view\\n    returns(\\n      bytes32 hashed\\n    )\\n  {\\n    _checkContext(signature);\\n    hashed = keccak256(\\n      abi.encode(\\n        CONTEXT_TYPEHASH,\\n        _msgSender(),\\n        signature.expiry,\\n        signature.nonce\\n      )\\n    );\\n  }\\n\\n  function _checkContext(\\n    RequestSignature calldata signature\\n  )\\n    internal\\n    virtual\\n    view\\n  {\\n    // Nonce check is optional for child implentations\\n    if(signature.expiry < block.timestamp) {\\n      revert InvalidRequestError();\\n    }\\n  }\\n\\n  function _signerFrom(\\n    bytes memory data,\\n    RequestSignature calldata signature\\n  )\\n    internal\\n    view\\n    returns(\\n      address signer\\n    )\\n  {\\n    return _hashTypedDataV4(keccak256(data)).recover(signature.v, signature.r, signature.s);\\n  }\\n\\n  function pause() \\n    public\\n    onlyRole(MoonpassRoles.PAUSER_ROLE)\\n  {\\n    _pause();\\n  }\\n\\n  function unpause()\\n    public\\n    onlyRole(MoonpassRoles.PAUSER_ROLE)\\n  {\\n    _unpause();\\n  }\\n\\n  function authorizer()\\n    public\\n    view\\n    returns(address authorizerAddress)\\n  {\\n    MoonpassContractStorage storage $ = _getMoonpassContractStorage();\\n    authorizerAddress = $._authorizer;\\n  }\\n\\n  function _hasRole(\\n    bytes32 role\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return _hasRole(role, _msgSender());\\n  }\\n\\n  function _hasRole(\\n    bytes32 role,\\n    address account\\n  )\\n    internal\\n    view\\n    returns (bool)\\n  {\\n    return IAccessControl(authorizer()).hasRole(role, account);\\n  }\\n\\n  function _checkRole(\\n    bytes32 role\\n  )\\n    internal\\n    view\\n  {\\n    _checkRole(role, _msgSender());\\n  }\\n\\n  function _checkRole(\\n    bytes32 role,\\n    address account\\n  )\\n    internal\\n    view\\n  {\\n    if(!_hasRole(role, account)) {\\n      revert IAccessControl.AccessControlUnauthorizedAccount(account, role);\\n    }\\n  }\\n\\n  function _setAuthorizer(\\n    address authorizerAddress\\n  )\\n    internal\\n  {\\n    if(!authorizerAddress.supportsInterface(type(IAccessControl).interfaceId)) {\\n      revert InvalidAddressError();\\n    }\\n    MoonpassContractStorage storage $ = _getMoonpassContractStorage();\\n    $._authorizer = authorizerAddress;\\n\\n    emit AuthorizerChange(authorizerAddress);\\n  }\\n\\n  function _authorizeUpgrade(\\n    address newImplementation\\n  )\\n    internal\\n    override\\n  {\\n    // Recover from bad upgrades\\n    if(authorizer() == address(0)) {\\n      return;\\n    }\\n    _checkRole(MoonpassRoles.UPGRADER_ROLE);\\n  }\\n\\n  modifier onlyRole(\\n    bytes32 role\\n  )\\n  {\\n    _checkRole(role);\\n    _;\\n  }\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1822Proxiable} from \\\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\\\";\\nimport {ERC1967Utils} from \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Utils.sol\\\";\\nimport {Initializable} from \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822Proxiable {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev The version of the upgrade interface of the contract. If this getter is missing, both `upgradeTo(address)`\\n     * and `upgradeToAndCall(address,bytes)` are present, and `upgradeTo` must be used if no function should be called,\\n     * while `upgradeToAndCall` will invoke the `receive` function if the second argument is the empty byte string.\\n     * If the getter returns `\\\"5.0.0\\\"`, only `upgradeToAndCall(address,bytes)` is present, and the second argument must\\n     * be the empty byte string if no function should be called, making it impossible to invoke the `receive` function\\n     * during an upgrade.\\n     */\\n    string public constant UPGRADE_INTERFACE_VERSION = \\\"5.0.0\\\";\\n\\n    /**\\n     * @dev The call is from an unauthorized context.\\n     */\\n    error UUPSUnauthorizedCallContext();\\n\\n    /**\\n     * @dev The storage `slot` is unsupported as a UUID.\\n     */\\n    error UUPSUnsupportedProxiableUUID(bytes32 slot);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        _checkProxy();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        _checkNotDelegated();\\n        _;\\n    }\\n\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual notDelegated returns (bytes32) {\\n        return ERC1967Utils.IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data);\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is not performed via delegatecall or the execution\\n     * context is not of a proxy with an ERC1967-compliant implementation pointing to self.\\n     * See {_onlyProxy}.\\n     */\\n    function _checkProxy() internal view virtual {\\n        if (\\n            address(this) == __self || // Must be called through delegatecall\\n            ERC1967Utils.getImplementation() != __self // Must be called through an active proxy\\n        ) {\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if the execution is performed via delegatecall.\\n     * See {notDelegated}.\\n     */\\n    function _checkNotDelegated() internal view virtual {\\n        if (address(this) != __self) {\\n            // Must not be called through delegatecall\\n            revert UUPSUnauthorizedCallContext();\\n        }\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev Performs an implementation upgrade with a security check for UUPS proxies, and additional setup call.\\n     *\\n     * As a security check, {proxiableUUID} is invoked in the new implementation, and the return value\\n     * is expected to be the implementation slot in ERC1967.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data) private {\\n        try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n            if (slot != ERC1967Utils.IMPLEMENTATION_SLOT) {\\n                revert UUPSUnsupportedProxiableUUID(slot);\\n            }\\n            ERC1967Utils.upgradeToAndCall(newImplementation, data);\\n        } catch {\\n            // The implementation is not UUPS\\n            revert ERC1967Utils.ERC1967InvalidImplementation(newImplementation);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {IERC5267} from \\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n\\n        string _name;\\n        string _version;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.EIP712\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\\n        assembly {\\n            $.slot := EIP712StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165Checker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IBeacon} from \\\"../beacon/IBeacon.sol\\\";\\nimport {Address} from \\\"../../utils/Address.sol\\\";\\nimport {StorageSlot} from \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n */\\nlibrary ERC1967Utils {\\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev The `implementation` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidImplementation(address implementation);\\n\\n    /**\\n     * @dev The `admin` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidAdmin(address admin);\\n\\n    /**\\n     * @dev The `beacon` of the proxy is invalid.\\n     */\\n    error ERC1967InvalidBeacon(address beacon);\\n\\n    /**\\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\\n     */\\n    error ERC1967NonPayable();\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        if (newImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(newImplementation);\\n        }\\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     *\\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\\n     */\\n    function getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        if (newAdmin == address(0)) {\\n            revert ERC1967InvalidAdmin(address(0));\\n        }\\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {IERC1967-AdminChanged} event.\\n     */\\n    function changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.beacon\\\" subtracted by 1.\\n     */\\n    // solhint-disable-next-line private-vars-leading-underscore\\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        if (newBeacon.code.length == 0) {\\n            revert ERC1967InvalidBeacon(newBeacon);\\n        }\\n\\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\\n\\n        address beaconImplementation = IBeacon(newBeacon).implementation();\\n        if (beaconImplementation.code.length == 0) {\\n            revert ERC1967InvalidImplementation(beaconImplementation);\\n        }\\n    }\\n\\n    /**\\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\\n     * to avoid stuck value in the contract.\\n     *\\n     * Emits an {IERC1967-BeaconUpgraded} event.\\n     *\\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\\n     * efficiency.\\n     */\\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n\\n        if (data.length > 0) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        } else {\\n            _checkNonPayable();\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\\n     * if an upgrade doesn't perform an initialization call.\\n     */\\n    function _checkNonPayable() private {\\n        if (msg.value > 0) {\\n            revert ERC1967NonPayable();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {UpgradeableBeacon} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"erc721a-upgradeable/=lib/ERC721A-Upgradeable/\",\r\n      \"@1inch/spot-price-aggregator/=lib/spot-price-aggregator/contracts/\",\r\n      \"ERC721A-Upgradeable/=lib/ERC721A-Upgradeable/contracts/\",\r\n      \"chainlink/=lib/chainlink/\",\r\n      \"spot-price-aggregator/=lib/spot-price-aggregator/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DepositsFoundError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributionIsCommittedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributionNotCommittedError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"ERC1967InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC1967NonPayable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"}],\"name\":\"InsufficientFundsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddressError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRequestError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"InvalidVestingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidVestingsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWithdrawAmountError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MissingAllocationsError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoBalanceToClawbackError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UUPSUnauthorizedCallContext\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"slot\",\"type\":\"bytes32\"}],\"name\":\"UUPSUnsupportedProxiableUUID\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizationManager\",\"type\":\"address\"}],\"name\":\"AuthorizerChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"DistributionClawback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributionCommit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"DistributionNameChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"DistributionTokenChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256[]\",\"name\":\"vestings\",\"type\":\"uint256[]\"}],\"name\":\"DistributionVestingsChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deposit\",\"type\":\"uint256\"}],\"name\":\"NFTAllocationCreate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NFTAllocationRemove\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NFTAllocationWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"NFTAllocationsReset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftNetworkId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"NFTDistributionCollectionChange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CONTEXT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SET_AUTHORIZER_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPGRADE_INTERFACE_VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deposits\",\"type\":\"uint256[]\"}],\"internalType\":\"struct AddNFTAllocationsRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"addAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"deposits\",\"type\":\"uint256[]\"}],\"name\":\"addAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"allocationOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releasedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawableAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawnAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authorizer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"authorizerAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"available\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"availableAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"internalType\":\"struct ClawbackRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"clawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"clawback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"commit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"commitment\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCommitted\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"depositsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalsAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balanceAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requiredBalanceAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"committed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isCommitted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"depositOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct TokenDistributionInitializer\",\"name\":\"distribution\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"nftNetworkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"internalType\":\"struct NFTDistributionInitializer\",\"name\":\"data\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"}],\"internalType\":\"struct MoonpassInitializer\",\"name\":\"moonpass\",\"type\":\"tuple\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"distributionName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftCollection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nftNetworkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"committed\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"reinitialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"released\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"releasedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"removeAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct RemoveNFTAllocationsRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"removeAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requiredBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"requiredBalanceAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"resetAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizerAddress\",\"type\":\"address\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"authorizerAddress\",\"type\":\"address\"}],\"internalType\":\"struct SetAuthorizerRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"setAuthorizer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"nftNetworkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"internalType\":\"struct SetNFTCollectionRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"setNFTCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_nftNetworkId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"}],\"name\":\"setNFTCollection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct SetNameRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"distributionName\",\"type\":\"string\"}],\"name\":\"setName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"internalType\":\"struct SetTokenRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"vestingsData\",\"type\":\"uint256[]\"}],\"name\":\"setVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"vestingsData\",\"type\":\"uint256[]\"}],\"internalType\":\"struct SetVestingsRequest\",\"name\":\"request\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"internalType\":\"struct RequestSignature\",\"name\":\"signature\",\"type\":\"tuple\"}],\"name\":\"setVestings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestings\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"end\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"internalType\":\"struct VestingSchedule[]\",\"name\":\"schedules\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"withdrawableAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"withdrawn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MoonpassNFTDistributionResetter", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}