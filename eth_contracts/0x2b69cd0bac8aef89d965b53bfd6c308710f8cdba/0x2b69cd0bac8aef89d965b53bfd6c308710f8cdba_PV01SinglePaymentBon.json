{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeCast.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/bonds/SinglePaymentBond/V1/PV01SinglePaymentBondV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n/**\\n *\\n * For additional terms of the smart contract, please refer to the documentation uploaded under the documents section.\\n * You can access the documents by calling the smart contract function named \\\"getAllDocuments\\\".\\n *\\n */\\npragma solidity 0.8.15;\\n\\nimport {IERC20Standard} from \\\"../../../interfaces/IERC20Standard.sol\\\";\\nimport {IAddressScreen} from \\\"../../../interfaces/IAddressScreen.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {PreciseUnitMath} from \\\"../../../libs/PreciseUnitMath.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\n/**\\n * @title PV01SinglePaymentBondV1\\n * @dev PV01SinglePaymentBond implementation contract for V1.\\n * We intentionally use the \\\"*Upgradeable.sol\\\" versions of the Open Zeppelin contracts where applicable\\n * because they support the initializer pattern which is required to support the bond factory initializing the clones it produces.\\n */\\ncontract PV01SinglePaymentBondV1 is PausableUpgradeable, OwnableUpgradeable, ERC20Upgradeable {\\n  using PreciseUnitMath for uint256;\\n  using SafeERC20 for IERC20Standard;\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n  using Address for address;\\n\\n  /**\\n   * @dev Emitted when the address screening contract being used by this bond contract changes\\n   */\\n  event AddressScreenContractUpdated(address indexed newAddress, string reason);\\n\\n  /**\\n   * @dev Emitted when an investor successfully claims their investment plus yield\\n   */\\n  event Claim(address indexed addr, uint256 bondTokenAmount, uint256 assetTokenAmount);\\n\\n  /**\\n   * @dev Emitted when a funding commitment is removed from this bond contract\\n   */\\n  event FundingCommitmentRemoved(address indexed addr);\\n\\n  /**\\n   * @dev Emitted when a funding commitment is updated on this bond contract\\n   */\\n  event FundingCommitmentUpdated(address indexed addr, uint256 bondTokenAmount, uint256 proceed, uint256 date);\\n\\n  /**\\n   * @dev Emitted when a new document is added to this bond contract\\n   */\\n  event NewDocumentAdded(bytes32 indexed docNameHash, string docName, string uri, bytes32 docHashSha256);\\n\\n  /**\\n   * @dev Emitted when a new funding commitment is added to this bond contract\\n   */\\n  event NewFundingCommitmentAdded(address indexed addr, uint256 bondTokenAmount, uint256 proceed, uint256 date);\\n\\n  /**\\n   * @dev Emitted when all bond tokens have been claimed\\n   */\\n  event Redeemed();\\n\\n  /**\\n   * @dev Emitted when this bond's maturity date is updated\\n   */\\n  event MaturityDateUpdated(uint64 newDate, string reason);\\n\\n  /**\\n   * @dev Emitted when an investor pays a funding commitment\\n   */\\n  event SettleBondPurchase(address indexed addr, uint256 bondTokenAmount, uint256 proceed);\\n\\n  /**\\n   * @dev Emitted when this bond is swept of remaining bond tokens\\n   */\\n  event Sweep(address indexed addr, uint256 assetTokenAmount);\\n\\n  /**\\n   * @dev Emitted when this bond is swept of any non-bond tokens\\n   */\\n  event SweepOther(address indexed addr, address otherTokenAddress, uint256 otherTokenAmount);\\n\\n  /**\\n   * @dev Caller address must be in the address screen allow list\\n   */\\n  modifier onlyAllowListed() {\\n    require(addressScreen.isAllowListed(msg.sender), \\\"The caller must be in the allow list\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev Details of a funding commitment\\n   */\\n  struct FundingCommitmentInternal {\\n    uint256 bondTokenAmount;\\n    uint256 proceed;\\n    uint256 date;\\n  }\\n\\n  /**\\n   * @dev Details of a funding commitment along with the investor address for that funding commitment\\n   */\\n  struct FundingCommitmentExternal {\\n    address address_;\\n    FundingCommitmentInternal fundingCommitmentInternal;\\n  }\\n\\n  /**\\n   * @dev Document details as stored in the bond contract\\n   */\\n  struct DocumentDetail {\\n    string docName;\\n    bytes32 docNameHash;\\n    bytes32 docHashSha256;\\n    uint256 lastModified;\\n    string uri;\\n  }\\n\\n  /**\\n   * @dev Document specification provided when a document is created\\n   */\\n  struct DocumentSpec {\\n    string docName;\\n    bytes32 docHashSha256;\\n    string uri;\\n  }\\n\\n  //------------------------------------------------------------------------------\\n  // Funding commitments\\n  //------------------------------------------------------------------------------\\n  /**\\n   * @dev Mapping of investor address => funding commitment details\\n   */\\n  mapping(address => FundingCommitmentInternal) internal fundingCommitments;\\n\\n  /**\\n   * @dev Set of investor addresses that have funding commitments. Once an investor settles the bond purchase, the funding commitment is removed.\\n   */\\n  EnumerableSet.AddressSet internal addressWithFundingCommitment;\\n\\n  //------------------------------------------------------------------------------\\n  // Documents\\n  //------------------------------------------------------------------------------\\n  /**\\n   * @dev Mapping of document name hashes => document details\\n   */\\n  mapping(bytes32 => DocumentDetail) internal documents;\\n\\n  /**\\n   * @dev Set of document name hashes\\n   */\\n  EnumerableSet.Bytes32Set internal docNameHashes;\\n\\n  //------------------------------------------------------------------------------\\n  // Asset token\\n  //------------------------------------------------------------------------------\\n  /**\\n   * @dev Number of decimals on the asset token\\n   */\\n  uint8 public assetTokenDecimals;\\n\\n  /**\\n   * @dev Asset token\\n   */\\n  IERC20Standard public assetToken;\\n\\n  //------------------------------------------------------------------------------\\n  // Bond details\\n  //------------------------------------------------------------------------------\\n  /**\\n   * @dev Maturity date for this bond contract\\n   */\\n  uint64 public maturityDate;\\n\\n  /**\\n   * @dev Address screen contract used by this bond contract\\n   */\\n  IAddressScreen public addressScreen;\\n\\n  /**\\n   * @dev Interest rate fraction of the investment, held as percentage with 18 decimals for example:\\n   * 10% => interestRateFraction_ = 10 ** 17. The interest rate fraction is not the annualised interest\\n   * rate, it is already pro-rata and can be used directly to calculate the total amount to redeem. Max value\\n   * is 1844% (a uint64 storing 18 decimals equivalent).\\n   */\\n  uint64 public interestRateFraction;\\n\\n  /**\\n   * @dev Address of the bond issuer\\n   */\\n  address public bondIssuer;\\n\\n  /**\\n   * @dev Time interval in seconds between the maturity date and the earliest possible sweep date.\\n   * This time interval is fixed at bond creation time and is used to calculate actual sweep date according\\n   * to the current maturity date.\\n   */\\n  uint64 public sweepDelaySecondsFromMaturityDate;\\n\\n  /**\\n   * @dev Bond collateral identifier\\n   */\\n  string public collateralId;\\n\\n  /**\\n   * @dev Bond type\\n   */\\n  bytes32 public constant BOND_TYPE = \\\"SinglePaymentBond\\\";\\n\\n  /**\\n   * @dev Bond version for bond type\\n   */\\n  uint8 public constant VERSION = 1;\\n\\n  string internal constant REASON_INITIALIZE = \\\"Initialize\\\";\\n\\n  constructor() {\\n    _disableInitializers();\\n  }\\n\\n  //------------------------------------------------------------------------------\\n  // External\\n  //------------------------------------------------------------------------------\\n  /**\\n    @dev Make explicit the intention to revert transaction if contract is directly sent Ether\\n  */\\n  receive() external payable {\\n    revert(\\\"Cannot send Ether directly to this contract\\\");\\n  }\\n\\n  /**\\n   * @dev Add a new document, reverts if document name already exists. Can emit {NewDocumentAdded}.\\n   * @param documentSpec the document specification\\n   */\\n  function addDocument(DocumentSpec calldata documentSpec) external onlyOwner {\\n    _addDocument(documentSpec);\\n  }\\n\\n  /**\\n   * @dev Create multiple documents at once, reverts if any document name already exists.\\n   * Can emit one or more {NewDocumentAdded}.\\n   * @param documentSpecs array of document specifications\\n   */\\n  function addDocuments(DocumentSpec[] calldata documentSpecs) external onlyOwner {\\n    uint256 length = documentSpecs.length;\\n    require(length > 0, \\\"No document specifications provided\\\");\\n    for (uint256 i = 0; i < length; ) {\\n      _addDocument(documentSpecs[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Add a funding commitment. Can emit {NewFundingCommitmentAdded}.\\n   * @param fundingCommitment FundingCommitmentExternal\\n   */\\n  function addFundingCommitment(FundingCommitmentExternal calldata fundingCommitment) external onlyOwner {\\n    _addFundingCommitment(fundingCommitment);\\n  }\\n\\n  /**\\n   * @dev Add funding commitments. Can emit one or more {NewFundingCommitmentAdded}.\\n   * @param fundingCommitments_ FundingCommitmentExternal[]\\n   */\\n  function addFundingCommitments(FundingCommitmentExternal[] calldata fundingCommitments_) external onlyOwner {\\n    uint256 length = fundingCommitments_.length;\\n    require(length > 0, \\\"No Funding commitments provided\\\");\\n    for (uint256 i = 0; i < length; ) {\\n      _addFundingCommitment(fundingCommitments_[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Add funding commitments and documents. This is a helper function to reduce possible approval\\n   * steps and save gas. If any funding commitment or any document is not valid, the whole transaction\\n   * reverts. Leaving either funding commitments or documents arrays empty is fine, but not both.\\n   * Can emit none, one or more {NewFundingCommitmentAdded} and {NewDocumentAdded}.\\n   * @param fundingCommitments_ array of funding commitments\\n   * @param documentSpecs_ array of document specifications\\n   */\\n  function addFundingCommitmentsAndDocuments(\\n    FundingCommitmentExternal[] calldata fundingCommitments_,\\n    DocumentSpec[] calldata documentSpecs_\\n  ) external onlyOwner {\\n    uint256 fundingsLength = fundingCommitments_.length;\\n    uint256 docsLength = documentSpecs_.length;\\n    require(fundingsLength > 0 || docsLength > 0, \\\"Must provide either funding commitments, or documents, or both\\\");\\n\\n    // Funding commitments\\n    if (fundingsLength > 0) {\\n      for (uint256 i = 0; i < fundingsLength; ) {\\n        _addFundingCommitment(fundingCommitments_[i]);\\n        unchecked {\\n          i++;\\n        }\\n      }\\n    }\\n\\n    // Documents\\n    if (docsLength > 0) {\\n      for (uint256 i = 0; i < docsLength; ) {\\n        _addDocument(documentSpecs_[i]);\\n        unchecked {\\n          i++;\\n        }\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Burn an amount of bond tokens that are owned by the allow-listed sender. Equivalent of the sender doing a transfer to\\n   * address zero, but with the addition of reducing total supply. Can emit a {Transfer} event to address zero.\\n   * @param amount of bond tokens to burn\\n   */\\n  function burn(uint256 amount) external whenNotPaused onlyAllowListed {\\n    require(amount <= balanceOf(msg.sender), \\\"Insufficient bond tokens held by sender\\\");\\n    _burn(msg.sender, amount);\\n  }\\n\\n  /**\\n   * @dev Get all documents. This includes all document details. We expect 2 or 3 docs per bond.\\n   * @return DocumentDetail[] array of document names\\n   */\\n  function getAllDocuments() external view returns (DocumentDetail[] memory) {\\n    uint256 length = docNameHashes.length();\\n    DocumentDetail[] memory docs = new DocumentDetail[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      bytes32 docNameHash = docNameHashes.at(i);\\n      docs[i] = documents[docNameHash];\\n      unchecked {\\n        i++;\\n      }\\n    }\\n    return docs;\\n  }\\n\\n  /**\\n   * @dev Get names of all documents. Expect 2 or 3 docs per bond.\\n   * @return string[] array of document names\\n   */\\n  function getAllDocumentNames() external view returns (string[] memory) {\\n    uint256 length = docNameHashes.length();\\n    string[] memory docNames = new string[](length);\\n    for (uint256 i = 0; i < length; ) {\\n      bytes32 docNameHash = docNameHashes.at(i);\\n      DocumentDetail memory document = documents[docNameHash];\\n      docNames[i] = document.docName;\\n      unchecked {\\n        i++;\\n      }\\n    }\\n    return docNames;\\n  }\\n\\n  /**\\n   * @dev external function to get all the funding commitment\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees.\\n   */\\n  function getAllFundingCommitment() external view returns (FundingCommitmentExternal[] memory) {\\n    address[] memory addressWithFundingCommitment_ = addressWithFundingCommitment.values();\\n    FundingCommitmentExternal[] memory fundingCommitments_ = new FundingCommitmentExternal[](\\n      addressWithFundingCommitment_.length\\n    );\\n    for (uint256 i = 0; i < addressWithFundingCommitment_.length; ) {\\n      fundingCommitments_[i] = FundingCommitmentExternal({\\n        address_: addressWithFundingCommitment_[i],\\n        fundingCommitmentInternal: fundingCommitments[addressWithFundingCommitment_[i]]\\n      });\\n      unchecked {\\n        i++;\\n      }\\n    }\\n    return fundingCommitments_;\\n  }\\n\\n  /**\\n   * @dev Amount of asset token remaining to be repaid by the bond issuer.\\n   * This is a convenience function for those interacting with the bond contract outside the platform.\\n   * The minimum value this function can return is zero, meaning nothing is due.\\n   * @return assetTokenAmount remaining to be repaid by the bond issuer\\n   */\\n  function getAmountToRepay() external view returns (uint256 assetTokenAmount) {\\n    uint256 totalDue = _calculateAmount(totalSupply(), interestRateFraction);\\n    uint256 totalReceived = assetToken.balanceOf(address(this));\\n    if (totalDue > totalReceived) {\\n      return totalDue - totalReceived;\\n    } else {\\n      return 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Get details of a document\\n   * @param docName name of the document\\n   * @return DocumentDetail document detail\\n   */\\n  function getDocument(string calldata docName) external view returns (DocumentDetail memory) {\\n    bytes32 docNameHash = keccak256(abi.encodePacked(docName));\\n    return (documents[docNameHash]);\\n  }\\n\\n  /**\\n   * @dev Returns the final amount of asset tokens based on the bond token amount provided as input.\\n   * @param bondTokenAmount_ uint256: amount of bond token to be used to calculate the final amount\\n   */\\n  function getFinalAmount(uint256 bondTokenAmount_) external view returns (uint256) {\\n    return _calculateAmount(bondTokenAmount_, interestRateFraction);\\n  }\\n\\n  /**\\n   * @dev Returns the final amount of asset tokens based on the bond token balance of the user.\\n   * @param user_ address: address of the user to be used to calculate the final amount\\n   */\\n  function getFinalAmount(address user_) external view returns (uint256) {\\n    return _calculateAmount(balanceOf(user_), interestRateFraction);\\n  }\\n\\n  /**\\n   * @dev Returns the funding commitment for the provided user address.\\n   * @param userAddress address: address of the user.\\n   */\\n  function getFundingCommitment(address userAddress) external view returns (FundingCommitmentInternal memory) {\\n    return fundingCommitments[userAddress];\\n  }\\n\\n  /**\\n   * @dev Returns the addresses of all the user that have a funding commitment.\\n   */\\n  function getFundingCommitmentInvestors() external view returns (address[] memory) {\\n    return addressWithFundingCommitment.values();\\n  }\\n\\n  /**\\n   * @dev Returns timestamp of the earliest date that a sweep can happen\\n   * @return unix timestamp of sweep date\\n   */\\n  function getSweepDate() external view returns (uint64) {\\n    return maturityDate + sweepDelaySecondsFromMaturityDate;\\n  }\\n\\n  /**\\n   * @dev Called at bond creation time to initialise a new bond\\n   * @param name_ string: name of the bond\\n   * @param symbol_ string: symbol of the bond\\n   * @param fundingCommitments_ FundingCommitmentExternal[]: initial funding commitment\\n   * @param assetTokenAddress_ address: address of the asset token for the investments\\n   * @param interestRateFraction_ uint64: interest rate fraction of the investment, must be initialized as a percentage with\\n   *        18 decimals for example: 10% => interestRateFraction_ = 10 ** 17. The interest rate fraction is not the annualised interest\\n   *        rate, it is already pro-rata and can be used directly to calculate the total amount to redeem. Max value is 1844% (a\\n   *        uint64 storing 18 decimals equivalent). Converted to uint256 during calculations.\\n   * @param maturityDate_ uint64: unix timestamp of the maturity date\\n   * @param bondIssuer_ address: address of the bond issuer which will receive the investment token\\n   * @param addressScreen_ address: address of the previously deployed address screening contract\\n   * @param sweepDate_ uint64: unix timestamp of earliest sweep date, must be at least 7 days later than maturity date\\n   * @param owner_ address: owner administrator of bond able to call admin functions\\n   * @param collateralId_ string: external id of bond, may be blank\\n   */\\n  function initialize(\\n    string memory name_,\\n    string memory symbol_,\\n    FundingCommitmentExternal[] memory fundingCommitments_,\\n    address assetTokenAddress_,\\n    uint64 interestRateFraction_,\\n    uint64 maturityDate_,\\n    address bondIssuer_,\\n    address addressScreen_,\\n    uint64 sweepDate_,\\n    address owner_,\\n    string memory collateralId_\\n  ) public virtual initializer {\\n    require(bondIssuer_ != address(0), \\\"bondIssuer cannot be address zero\\\");\\n    require(sweepDate_ > maturityDate_, \\\"sweepDate must be after maturityDate\\\");\\n    require(owner_ != address(0), \\\"Owner cannot be address zero\\\");\\n    require(bytes(name_).length != 0, \\\"name cannot be empty string\\\");\\n    require(bytes(symbol_).length != 0, \\\"symbol cannot be empty string\\\");\\n    require(assetTokenAddress_ != address(0), \\\"assetTokenAddress cannot be address zero\\\");\\n    require(assetTokenAddress_.isContract(), \\\"assetTokenAddress is not a contract\\\");\\n\\n    // ERC20 and owners\\n    __ERC20_init(name_, symbol_);\\n    _transferOwnership(owner_);\\n    bondIssuer = bondIssuer_;\\n\\n    // Asset token, interest\\n    assetToken = IERC20Standard(assetTokenAddress_);\\n    assetTokenDecimals = assetToken.decimals();\\n    interestRateFraction = interestRateFraction_;\\n\\n    // Dates\\n    _setMaturityDate(maturityDate_, REASON_INITIALIZE);\\n    sweepDelaySecondsFromMaturityDate = sweepDate_ - maturityDate;\\n    require(\\n      sweepDelaySecondsFromMaturityDate >= 3 days,\\n      \\\"Sweep date must be at least 3 days after maturity date\\\"\\n    );\\n\\n    // Address screening\\n    _setAddressScreenContract(addressScreen_, REASON_INITIALIZE);\\n\\n    // Funding commitments\\n    uint256 length_ = fundingCommitments_.length;\\n    for (uint256 i = 0; i < length_; ) {\\n      _addFundingCommitment(fundingCommitments_[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    // Bond id\\n    collateralId = collateralId_;\\n  }\\n\\n  /**\\n   * @dev Remove the funding commitment of the specified user. Can emit {FundingCommitmentRemoved}.\\n   * @param userAddress address\\n   */\\n  function removeFundingCommitment(address userAddress) external onlyOwner {\\n    _removeFundingCommitment(userAddress);\\n  }\\n\\n  /**\\n   * @dev Remove funding commitments of the specified users. Can emit one or more {FundingCommitmentRemoved}.\\n   * @param userAddresses address\\n   */\\n  function removeFundingCommitments(address[] calldata userAddresses) external onlyOwner {\\n    uint256 length = userAddresses.length;\\n    for (uint256 i = 0; i < length; ) {\\n      _removeFundingCommitment(userAddresses[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Checks and sets the address screening contract. Can emit {AddressScreenContractUpdated}.\\n   * @param newAddress new address of the screening contract\\n   * @param reason the reason for the change\\n   */\\n  function setAddressScreenContract(address newAddress, string calldata reason) external onlyOwner {\\n    _setAddressScreenContract(newAddress, reason);\\n  }\\n\\n  /**\\n   * @dev Checks and sets a maturity date. Can emit {MaturityDateUpdated}.\\n   * @param newDate the maturity date\\n   * @param reason the reason for the change\\n   */\\n  function setMaturityDate(uint64 newDate, string calldata reason) external onlyOwner {\\n    // checks applied for external calls only (these checks do not apply during contract init)\\n    require(\\n      addressWithFundingCommitment.length() == 0,\\n      \\\"Cannot change maturity date if funding commitments are present\\\"\\n    );\\n    _setMaturityDate(newDate, reason);\\n  }\\n\\n  /**\\n   * @dev Update a funding commitment. Can emit {FundingCommitmentUpdated}.\\n   * @param fundingCommitment FundingCommitmentExternal\\n   */\\n  function updateFundingCommitment(FundingCommitmentExternal calldata fundingCommitment) external onlyOwner {\\n    _updateFundingCommitment(fundingCommitment);\\n  }\\n\\n  /**\\n   * @dev Update funding commitments. Can emit one more {FundingCommitmentUpdated}.\\n   * @param fundingCommitments_ FundingCommitmentExternal[]\\n   */\\n  function updateFundingCommitments(FundingCommitmentExternal[] calldata fundingCommitments_) external onlyOwner {\\n    uint256 length = fundingCommitments_.length;\\n    for (uint256 i = 0; i < length; ) {\\n      _updateFundingCommitment(fundingCommitments_[i]);\\n      unchecked {\\n        i++;\\n      }\\n    }\\n  }\\n\\n  //------------------------------------------------------------------------------\\n  // Public\\n  //------------------------------------------------------------------------------\\n  /**\\n   * @dev Can be called by allow listed address in order to claim the investment.\\n   * Can emit {Claim} if claim was successful and {Redeemed} if bond is fully redeemed.\\n   * @return bondTokenAmount uint256: amount of bond token claimed\\n   * @return assetTokenAmount uint256: amount of asset token received by the user\\n   */\\n  function claim()\\n    public\\n    virtual\\n    whenNotPaused\\n    onlyAllowListed\\n    returns (uint256 bondTokenAmount, uint256 assetTokenAmount)\\n  {\\n    // Checks\\n    bondTokenAmount = balanceOf(msg.sender);\\n    require(bondTokenAmount > 0, \\\"No bond token to claim\\\");\\n    require(isRepaidInFull(), \\\"The contract does not have the full amount of money to repay everyone back\\\");\\n\\n    // Effects\\n    _burn(msg.sender, bondTokenAmount);\\n    assetTokenAmount = _calculateAmount(bondTokenAmount, interestRateFraction);\\n\\n    // Interactions (safeTransfer reverts if unsuccessful)\\n    assetToken.safeTransfer(msg.sender, assetTokenAmount);\\n    // events\\n    emit Claim(msg.sender, bondTokenAmount, assetTokenAmount);\\n    if (totalSupply() == 0) {\\n      // all funds have been claimed, the bond is redeemed\\n      emit Redeemed();\\n    }\\n  }\\n\\n  /**\\n   * @dev Return decimals for the bond token. This is the same decimals as the associated asset token.\\n   */\\n  function decimals() public view override returns (uint8) {\\n    return assetTokenDecimals;\\n  }\\n\\n  /**\\n   * @return hasBeenRepaid bool: did the bond issuer pay back the debt in full?\\n   */\\n  function isRepaidInFull() public view virtual returns (bool) {\\n    uint256 totalSupply_ = totalSupply();\\n    if (totalSupply_ > 0) {\\n      // bond tokens exist, do we have enough asset token to repay everyone?\\n      return assetToken.balanceOf(address(this)) >= _calculateAmount(totalSupply_, interestRateFraction);\\n    } else {\\n      // no bond tokens, can only have repaid in full if no funding commitments remain\\n      return addressWithFundingCommitment.length() == 0;\\n    }\\n  }\\n\\n  /**\\n   * @dev Pauses this bond contract, preventing claim, settle bond purchase, bond token transfers.\\n   */\\n  function pause() public onlyOwner {\\n    _pause();\\n  }\\n\\n  /**\\n   * @dev Can be called by an address in the funding commitment list in order to fulfill a funding commitment.\\n   * Can emit {SettleBondPurchase}.\\n   * @return bondTokenAmount uint256: amount of new bond token minted\\n   * @return proceed uint256: amount of asset token sent by the user to the bond issuer\\n   */\\n  function settleBondPurchase() public virtual whenNotPaused returns (uint256 bondTokenAmount, uint256 proceed) {\\n    // Checks\\n    bondTokenAmount = fundingCommitments[msg.sender].bondTokenAmount;\\n    proceed = fundingCommitments[msg.sender].proceed;\\n    require(bondTokenAmount > 0, \\\"No funding commitment\\\");\\n    uint256 date_ = fundingCommitments[msg.sender].date;\\n    require(block.timestamp <= date_, \\\"Funding commitment date already passed\\\");\\n    require(block.timestamp > date_ - (24 hours), \\\"Timeout period has not finished yet\\\");\\n\\n    // Effects\\n    addressWithFundingCommitment.remove(msg.sender);\\n    delete fundingCommitments[msg.sender];\\n\\n    // Interactions (safeTransferFrom reverts if unsuccessful)\\n    assetToken.safeTransferFrom(msg.sender, bondIssuer, proceed);\\n    _mint(msg.sender, bondTokenAmount);\\n    // events\\n    emit SettleBondPurchase(msg.sender, bondTokenAmount, proceed);\\n  }\\n\\n  /**\\n   * @dev Can be called by the owner in order to take off all the remaining asset token in the bond.\\n   * The tokens are sent to the bond issuer. Can emit {Sweep}.\\n   * @return transferAmount uint256: amount of asset token received by the bond issuer\\n   */\\n  function sweep() public virtual onlyOwner returns (uint256 transferAmount) {\\n    require(\\n      block.timestamp >= (maturityDate + sweepDelaySecondsFromMaturityDate),\\n      \\\"Sweep date not yet passed\\\"\\n    );\\n    transferAmount = assetToken.balanceOf(address(this));\\n    require(transferAmount > 0, \\\"There is nothing to sweep\\\");\\n    assetToken.safeTransfer(bondIssuer, transferAmount);\\n    emit Sweep(bondIssuer, transferAmount);\\n  }\\n\\n  /**\\n   * @dev Can be called by the owner in order to take off any other tokens accidentally sent to the bond. This means\\n   * tokens other than the asset token. The tokens are sent to the bond issuer. Can emit {SweepOther}.\\n   * @return transferAmount uint256: amount of token received by the bond issuer\\n   */\\n  function sweepOther(address otherTokenAddress) public virtual onlyOwner returns (uint256 transferAmount) {\\n    require(otherTokenAddress != address(assetToken), \\\"Use sweep() to sweep asset token\\\");\\n    IERC20Standard otherToken = IERC20Standard(otherTokenAddress);\\n    transferAmount = otherToken.balanceOf(address(this));\\n    require(transferAmount > 0, \\\"There is nothing to sweep\\\");\\n    otherToken.safeTransfer(bondIssuer, transferAmount);\\n    emit SweepOther(bondIssuer, otherTokenAddress, transferAmount);\\n  }\\n\\n  /**\\n   * @dev Unpauses this bond contract, allowing claim, settle bond purchase, bond token transfers.\\n   */\\n  function unpause() public onlyOwner {\\n    _unpause();\\n  }\\n\\n  //------------------------------------------------------------------------------\\n  // Internal\\n  //------------------------------------------------------------------------------\\n\\n  /**\\n   * @dev Add a new document, reverts if document name already exists. Can emit {NewDocumentAdded}.\\n   * @param documentSpec the document specification\\n   */\\n  function _addDocument(DocumentSpec memory documentSpec) internal {\\n    string memory docName = documentSpec.docName;\\n    require(bytes(docName).length > 0, \\\"Invalid document name\\\");\\n    require(bytes(documentSpec.uri).length > 0, \\\"Invalid URI\\\");\\n\\n    bytes32 docNameHash = keccak256(abi.encodePacked(docName));\\n    require(docNameHashes.add(docNameHash), \\\"Document already exists for this docName\\\");\\n    documents[docNameHash] = DocumentDetail(\\n      docName,\\n      docNameHash,\\n      documentSpec.docHashSha256,\\n      block.timestamp,\\n      documentSpec.uri\\n    );\\n    emit NewDocumentAdded(docNameHash, docName, documentSpec.uri, documentSpec.docHashSha256);\\n  }\\n\\n  /**\\n   * @dev Internal function to add a funding commitment. Can emit {NewFundingCommitmentAdded}.\\n   * @param fundingCommitment FundingCommitmentExternal\\n   */\\n  function _addFundingCommitment(FundingCommitmentExternal memory fundingCommitment) internal {\\n    require(\\n      addressWithFundingCommitment.add(fundingCommitment.address_),\\n      \\\"Funding commitment already exist for this address\\\"\\n    );\\n    _checkAndSetFundingCommitment(fundingCommitment);\\n    emit NewFundingCommitmentAdded(\\n      fundingCommitment.address_,\\n      fundingCommitment.fundingCommitmentInternal.bondTokenAmount,\\n      fundingCommitment.fundingCommitmentInternal.proceed,\\n      fundingCommitment.fundingCommitmentInternal.date\\n    );\\n  }\\n\\n  /**\\n   * @dev Apply transfer restrictions, this OpenZeppelin dev hook gets called inside\\n   * all mint, burn, transfer and transferFrom functions. Restrictions applied are:\\n   *  - contract must be not paused (restricts everything, transfers and minting and burning).\\n   *  - the spender/from/to addresses must be not on deny list.\\n   */\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override whenNotPaused {\\n    super._beforeTokenTransfer(from, to, amount);\\n    require(!addressScreen.isDenyListed(from), \\\"Token sender must not be on deny list\\\");\\n    require(!addressScreen.isDenyListed(to), \\\"Token receiver must not be on deny list\\\");\\n    require(!addressScreen.isDenyListed(_msgSender()), \\\"Transaction initiator must not be on deny list\\\");\\n  }\\n\\n  /**\\n   * @dev Returns the amount plus interest\\n   * @param amount uint256: amount to have interest added to it\\n   * @param _interestRateFraction uint256: interest rate fraction to be used\\n   */\\n  function _calculateAmount(uint256 amount, uint256 _interestRateFraction) internal pure returns (uint256) {\\n    return (amount + amount.mul(_interestRateFraction));\\n  }\\n\\n  /**\\n   * @dev Internal function to check and add or modify a funding commitment.\\n   * @param fundingCommitment FundingCommitmentExternal\\n   */\\n  function _checkAndSetFundingCommitment(FundingCommitmentExternal memory fundingCommitment) internal {\\n    require(fundingCommitment.fundingCommitmentInternal.bondTokenAmount > 0, \\\"Bond Token Amount must be more than 0\\\");\\n    require(fundingCommitment.fundingCommitmentInternal.proceed > 0, \\\"Proceed must be more than 0\\\");\\n    require(\\n      fundingCommitment.fundingCommitmentInternal.date < maturityDate,\\n      \\\"Date must be before maturityDate\\\"\\n    );\\n    fundingCommitments[fundingCommitment.address_] = fundingCommitment.fundingCommitmentInternal;\\n  }\\n\\n  /**\\n   * @dev Internal function to remove the funding commitment of the specified user. Can emit {FundingCommitmentRemoved}.\\n   * @param userAddress address\\n   */\\n  function _removeFundingCommitment(address userAddress) internal {\\n    require(\\n      addressWithFundingCommitment.remove(userAddress),\\n      \\\"Funding commitment does not already exist for this address\\\"\\n    );\\n    delete fundingCommitments[userAddress];\\n    emit FundingCommitmentRemoved(userAddress);\\n  }\\n\\n  /**\\n   * @dev Checks and sets the address screening contract. Can emit {AddressScreenContractUpdated}.\\n   * @param newAddress new address of the screening contract\\n   * @param reason the reason for the change\\n   */\\n  function _setAddressScreenContract(address newAddress, string memory reason) internal {\\n    require(newAddress != address(0), \\\"Address screen address cannot be address zero\\\");\\n    require(newAddress.isContract(), \\\"Address screen is not a contract\\\");\\n    require(\\n      newAddress != address(addressScreen),\\n      \\\"New address screen contract must be different from the existing address screen contract\\\"\\n    );\\n    addressScreen = IAddressScreen(newAddress);\\n    emit AddressScreenContractUpdated(newAddress, reason);\\n  }\\n\\n  /**\\n   * @dev Checks and sets a maturity date. Can emit {MaturityDateUpdated}.\\n   * @param newDate the maturity date\\n   * @param reason the reason for the change\\n   */\\n  function _setMaturityDate(uint64 newDate, string memory reason) internal {\\n    require(newDate > block.timestamp, \\\"maturityDate must be in the future\\\");\\n    require(\\n      newDate != maturityDate,\\n      \\\"New maturity date must be different from the existing maturity date\\\"\\n    );\\n    maturityDate = newDate;\\n    emit MaturityDateUpdated(newDate, reason);\\n  }\\n\\n  /**\\n   * @dev Internal function to update a funding commitment. Can emit {FundingCommitmentUpdated}.\\n   * @param fundingCommitment FundingCommitmentExternal\\n   */\\n  function _updateFundingCommitment(FundingCommitmentExternal calldata fundingCommitment) internal {\\n    require(\\n      addressWithFundingCommitment.contains(fundingCommitment.address_),\\n      \\\"Funding commitment does not already exist for this address\\\"\\n    );\\n    _checkAndSetFundingCommitment(fundingCommitment);\\n    emit FundingCommitmentUpdated(\\n      fundingCommitment.address_,\\n      fundingCommitment.fundingCommitmentInternal.bondTokenAmount,\\n      fundingCommitment.fundingCommitmentInternal.proceed,\\n      fundingCommitment.fundingCommitmentInternal.date\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressScreen.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.15;\\n\\n/**\\n * @title IAddressScreen\\n * @dev Interface that the address screening contract exposes to consumers.\\n */\\ninterface IAddressScreen {\\n  /**\\n   * @dev Return true if the address is allow listed, false otherwise.\\n   * @param addr address\\n   */\\n  function isAllowListed(address addr) external view returns (bool);\\n\\n  /**\\n   * @dev Returns true if the address is deny listed, false otherwise.\\n   * @param addr address\\n   */\\n  function isDenyListed(address addr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IERC20Standard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IERC20Standard is IERC20 {\\n  function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/libs/PreciseUnitMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.15;\\n\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n/**\\n * @title PreciseUnitMath\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n */\\nlibrary PreciseUnitMath {\\n  using SafeCast for int256;\\n\\n  // The number One in precise units.\\n  uint256 internal constant PRECISE_UNIT = 10 ** 18;\\n  int256 internal constant PRECISE_UNIT_INT = 10 ** 18;\\n\\n  // Max unsigned integer value\\n  uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n  // Max and min signed integer value\\n  int256 internal constant MAX_INT_256 = type(int256).max;\\n  int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n  /**\\n   * @dev Getter function since constants can't be read directly from libraries.\\n   */\\n  function preciseUnit() internal pure returns (uint256) {\\n    return PRECISE_UNIT;\\n  }\\n\\n  /**\\n   * @dev Getter function since constants can't be read directly from libraries.\\n   */\\n  function preciseUnitInt() internal pure returns (int256) {\\n    return PRECISE_UNIT_INT;\\n  }\\n\\n  /**\\n   * @dev Getter function since constants can't be read directly from libraries.\\n   */\\n  function maxUint256() internal pure returns (uint256) {\\n    return MAX_UINT_256;\\n  }\\n\\n  /**\\n   * @dev Getter function since constants can't be read directly from libraries.\\n   */\\n  function maxInt256() internal pure returns (int256) {\\n    return MAX_INT_256;\\n  }\\n\\n  /**\\n   * @dev Getter function since constants can't be read directly from libraries.\\n   */\\n  function minInt256() internal pure returns (int256) {\\n    return MIN_INT_256;\\n  }\\n\\n  /**\\n   * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n   * of a number with 18 decimals precision.\\n   */\\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return (a * b) / PRECISE_UNIT;\\n  }\\n\\n  /**\\n   * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n   * significand of a number with 18 decimals precision.\\n   */\\n  function mul(int256 a, int256 b) internal pure returns (int256) {\\n    return (a * b) / PRECISE_UNIT_INT;\\n  }\\n\\n  /**\\n   * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n   * of a number with 18 decimals precision.\\n   */\\n  function mulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (a == 0 || b == 0) {\\n      return 0;\\n    }\\n    return (a * b - 1) / PRECISE_UNIT + 1;\\n  }\\n\\n  /**\\n   * @dev Divides value a by value b (result is rounded down).\\n   */\\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return (a * PRECISE_UNIT) / b;\\n  }\\n\\n  /**\\n   * @dev Divides value a by value b (result is rounded towards 0).\\n   */\\n  function div(int256 a, int256 b) internal pure returns (int256) {\\n    return (a * PRECISE_UNIT_INT) / b;\\n  }\\n\\n  /**\\n   * @dev Divides value a by value b (result is rounded up or away from 0).\\n   */\\n  function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n    require(b != 0, \\\"Cant divide by 0\\\");\\n\\n    return a > 0 ? (a * PRECISE_UNIT - 1) / b + 1 : 0;\\n  }\\n\\n  /**\\n   * @dev Divides value a by value b (result is rounded up or away from 0). When `a` is 0, 0 is\\n   * returned. When `b` is 0, method reverts with divide-by-zero error.\\n   */\\n  function divCeil(int256 a, int256 b) internal pure returns (int256) {\\n    require(b != 0, \\\"Cant divide by 0\\\");\\n\\n    a = a * PRECISE_UNIT_INT;\\n    int256 c = a / b;\\n\\n    if (a % b != 0) {\\n      // a ^ b == 0 case is covered by the previous if statement, hence it won't resolve to --c\\n      (a ^ b > 0) ? ++c : --c;\\n    }\\n\\n    return c;\\n  }\\n\\n  /**\\n   * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n   */\\n  function divDown(int256 a, int256 b) internal pure returns (int256) {\\n    require(b != 0, \\\"Cant divide by 0\\\");\\n    require(a != MIN_INT_256 || b != -1, \\\"Invalid input\\\");\\n\\n    int256 result = a / b;\\n    if (a ^ b < 0 && a % b != 0) {\\n      result -= 1;\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n   * (positive values are rounded towards zero and negative values are rounded away from 0).\\n   */\\n  function conservativeMul(int256 a, int256 b) internal pure returns (int256) {\\n    return divDown(a * b, PRECISE_UNIT_INT);\\n  }\\n\\n  /**\\n   * @dev Divides value a by value b where rounding is towards the lesser number.\\n   * (positive values are rounded towards zero and negative values are rounded away from 0).\\n   */\\n  function conservativeDiv(int256 a, int256 b) internal pure returns (int256) {\\n    return divDown(a * PRECISE_UNIT_INT, b);\\n  }\\n\\n  /**\\n   * @dev Performs the power on a specified value, reverts on overflow.\\n   */\\n  function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n    require(a > 0, \\\"Value must be positive\\\");\\n\\n    uint256 result = 1;\\n    for (uint256 i = 0; i < pow; i++) {\\n      uint256 previousResult = result;\\n\\n      result = previousResult * a;\\n    }\\n\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns true if a =~ b within range, false otherwise.\\n   */\\n  function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\\n    return a <= b + range && a >= b - range;\\n  }\\n\\n  /**\\n   * Returns the absolute value of int256 `a` as a uint256\\n   */\\n  function abs(int256 a) internal pure returns (uint256) {\\n    return a >= 0 ? a.toUint256() : (a * -1).toUint256();\\n  }\\n\\n  /**\\n   * Returns the negation of a\\n   */\\n  function neg(int256 a) internal pure returns (int256) {\\n    require(a > MIN_INT_256, \\\"Inversion overflow\\\");\\n    return -a;\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"AddressScreenContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"FundingCommitmentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"FundingCommitmentUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newDate\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"MaturityDateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"docNameHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"docName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"docHashSha256\",\"type\":\"bytes32\"}],\"name\":\"NewDocumentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"name\":\"NewFundingCommitmentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Redeemed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"}],\"name\":\"SettleBondPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetTokenAmount\",\"type\":\"uint256\"}],\"name\":\"Sweep\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"otherTokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"otherTokenAmount\",\"type\":\"uint256\"}],\"name\":\"SweepOther\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BOND_TYPE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"docName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"docHashSha256\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.DocumentSpec\",\"name\":\"documentSpec\",\"type\":\"tuple\"}],\"name\":\"addDocument\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"docName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"docHashSha256\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.DocumentSpec[]\",\"name\":\"documentSpecs\",\"type\":\"tuple[]\"}],\"name\":\"addDocuments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentInternal\",\"name\":\"fundingCommitmentInternal\",\"type\":\"tuple\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentExternal\",\"name\":\"fundingCommitment\",\"type\":\"tuple\"}],\"name\":\"addFundingCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentInternal\",\"name\":\"fundingCommitmentInternal\",\"type\":\"tuple\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentExternal[]\",\"name\":\"fundingCommitments_\",\"type\":\"tuple[]\"}],\"name\":\"addFundingCommitments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentInternal\",\"name\":\"fundingCommitmentInternal\",\"type\":\"tuple\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentExternal[]\",\"name\":\"fundingCommitments_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"docName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"docHashSha256\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.DocumentSpec[]\",\"name\":\"documentSpecs_\",\"type\":\"tuple[]\"}],\"name\":\"addFundingCommitmentsAndDocuments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addressScreen\",\"outputs\":[{\"internalType\":\"contract IAddressScreen\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetToken\",\"outputs\":[{\"internalType\":\"contract IERC20Standard\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetTokenDecimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondIssuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"assetTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralId\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDocumentNames\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDocuments\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"docName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"docNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"docHashSha256\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.DocumentDetail[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllFundingCommitment\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentInternal\",\"name\":\"fundingCommitmentInternal\",\"type\":\"tuple\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentExternal[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAmountToRepay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"assetTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"docName\",\"type\":\"string\"}],\"name\":\"getDocument\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"docName\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"docNameHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"docHashSha256\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lastModified\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.DocumentDetail\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount_\",\"type\":\"uint256\"}],\"name\":\"getFinalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user_\",\"type\":\"address\"}],\"name\":\"getFinalAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getFundingCommitment\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentInternal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFundingCommitmentInvestors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSweepDate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentInternal\",\"name\":\"fundingCommitmentInternal\",\"type\":\"tuple\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentExternal[]\",\"name\":\"fundingCommitments_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"assetTokenAddress_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"interestRateFraction_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maturityDate_\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"bondIssuer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"addressScreen_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"sweepDate_\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"collateralId_\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateFraction\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRepaidInFull\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturityDate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"removeFundingCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userAddresses\",\"type\":\"address[]\"}],\"name\":\"removeFundingCommitments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"setAddressScreenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newDate\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"setMaturityDate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleBondPurchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweep\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepDelaySecondsFromMaturityDate\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"otherTokenAddress\",\"type\":\"address\"}],\"name\":\"sweepOther\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"transferAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentInternal\",\"name\":\"fundingCommitmentInternal\",\"type\":\"tuple\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentExternal\",\"name\":\"fundingCommitment\",\"type\":\"tuple\"}],\"name\":\"updateFundingCommitment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"address_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"bondTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proceed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentInternal\",\"name\":\"fundingCommitmentInternal\",\"type\":\"tuple\"}],\"internalType\":\"struct PV01SinglePaymentBondV1.FundingCommitmentExternal[]\",\"name\":\"fundingCommitments_\",\"type\":\"tuple[]\"}],\"name\":\"updateFundingCommitments\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PV01SinglePaymentBondV1", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}