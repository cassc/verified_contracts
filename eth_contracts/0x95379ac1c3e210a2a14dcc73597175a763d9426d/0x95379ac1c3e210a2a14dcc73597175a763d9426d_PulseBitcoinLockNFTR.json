{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/PulseBitcoinLockNFTRewardsBulk.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ninterface PulseBitcoinLockNFTRewardsInterface {\\n  function pulseBitcoinLockNftContractAddress() external view returns (address);\\n  function tokenIdsToRegistered(uint tokenId) external view returns (bool);\\n  function tokenIdsToLastWithdrawalDay(uint tokenId) external view returns (uint);\\n  function tokenIdsToEndRewardsDay(uint tokenId) external view returns (uint);\\n  function tokenIdsToDailyRewardAmount(uint tokenId) external view returns (uint);\\n\\n  function registerNftForRewards(uint tokenId) external;\\n  function withdrawRewards(uint tokenId) external;\\n\\n  function currentDay() external view returns (uint256);\\n}\\n\\ninterface PulseBitcoinLockNFTInterface {\\n  function ownerOf(uint256 tokenId) external returns (address);\\n}\\n\\ncontract PulseBitcoinLockNFTRewardsBulk is Ownable, ReentrancyGuard {\\n  PulseBitcoinLockNFTRewardsInterface public plsbLockRewards;\\n\\n  address public txnFeeSendTo;\\n  uint public baseTxnFee;\\n\\n  event TxnError(uint tokenId, string reason);\\n  event TxnErrorBytes(uint tokenId, bytes reason);\\n  event NotOwnerError(uint tokenId);\\n\\n  struct NftVariables {\\n    uint tokenId;\\n    bool isRegistered;\\n    bool canWithdrawal;\\n    uint withdrawalAmount;\\n  }\\n\\n  constructor(address _txnFeeSendTo) {\\n    txnFeeSendTo = _txnFeeSendTo;\\n    baseTxnFee = 0.0007 ether;\\n  }\\n\\n  receive() payable external {\\n    payable(txnFeeSendTo).transfer(msg.value);\\n  }\\n\\n  function _senderIsTokenOwner(uint tokenId) internal returns(bool) {\\n    return msg.sender == PulseBitcoinLockNFTInterface(\\n      plsbLockRewards.pulseBitcoinLockNftContractAddress()\\n    ).ownerOf(tokenId);\\n  }\\n\\n  function _txnFee(uint tokenIdLength) internal view returns(uint) {\\n    uint txnFee = baseTxnFee * tokenIdLength;\\n\\n    if(txnFee < baseTxnFee * 10) {\\n      txnFee = baseTxnFee * 10;\\n    }\\n\\n    return txnFee;\\n  }\\n\\n  function fetchNftVariables(\\n    uint[] calldata tokenIds\\n  ) public view returns(NftVariables[] memory) {\\n\\n    NftVariables[] memory variablesArray;\\n    variablesArray = new NftVariables[](tokenIds.length);\\n\\n    for(uint i; i < tokenIds.length;) {\\n      uint tokenId = tokenIds[i];\\n\\n      NftVariables memory nftVariables = NftVariables({\\n        tokenId: tokenId,\\n        isRegistered: false,\\n        canWithdrawal: false,\\n        withdrawalAmount: 0\\n      });\\n\\n      if(plsbLockRewards.tokenIdsToRegistered(tokenId)) {\\n        nftVariables.isRegistered = true;\\n\\n        // Can withdraw today?\\n        if(\\n            plsbLockRewards.tokenIdsToLastWithdrawalDay(tokenId) < \\n            plsbLockRewards.tokenIdsToEndRewardsDay(tokenId)\\n          &&\\n            plsbLockRewards.currentDay() > \\n            plsbLockRewards.tokenIdsToLastWithdrawalDay(tokenId)\\n          ) {\\n          nftVariables.canWithdrawal = true;\\n\\n          // Calc rewards\\n          uint256 totalDaysOfRewardsLeft =\\n            plsbLockRewards.tokenIdsToEndRewardsDay(tokenId) -\\n            plsbLockRewards.tokenIdsToLastWithdrawalDay(tokenId);\\n\\n          uint256 numOfDaysSinceLastWithdrawal =\\n            plsbLockRewards.currentDay() -\\n            plsbLockRewards.tokenIdsToLastWithdrawalDay(tokenId);\\n\\n          if (numOfDaysSinceLastWithdrawal > totalDaysOfRewardsLeft) {\\n            numOfDaysSinceLastWithdrawal = totalDaysOfRewardsLeft;\\n          }\\n\\n          nftVariables.withdrawalAmount =\\n            plsbLockRewards.tokenIdsToDailyRewardAmount(tokenId) *\\n            numOfDaysSinceLastWithdrawal;\\n        }\\n      }\\n\\n      variablesArray[i] = nftVariables;\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n    return variablesArray;\\n  }\\n\\n  function bulkRegister(uint[] calldata tokenIds) public payable nonReentrant {\\n    uint tokenIdsLength = tokenIds.length;\\n    uint txnFee = _txnFee(tokenIdsLength);\\n\\n    if(msg.value != txnFee) {\\n      revert(\\\"Txn Fee invalid\\\");\\n    }\\n\\n    payable(txnFeeSendTo).transfer(txnFee);\\n\\n    for( uint i; i < tokenIdsLength; ) {\\n      if(!_senderIsTokenOwner(tokenIds[i])) {\\n        emit NotOwnerError(tokenIds[i]);\\n        continue;\\n      }\\n\\n      try plsbLockRewards.registerNftForRewards(tokenIds[i]) {\\n        // Do nothing\\n      } catch Error(string memory reason) {\\n        emit TxnError(tokenIds[i], reason);\\n      } catch (bytes memory reason) {\\n        emit TxnErrorBytes(tokenIds[i], reason);\\n      }\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n  }\\n\\n  function bulkWithdraw(uint[] calldata tokenIds) public payable nonReentrant {\\n    uint tokenIdsLength = tokenIds.length;\\n    uint txnFee = _txnFee(tokenIdsLength);\\n\\n    if(msg.value != txnFee) {\\n      revert(\\\"Txn Fee invalid\\\");\\n    }\\n\\n    payable(txnFeeSendTo).transfer(txnFee);\\n\\n    for( uint i; i < tokenIdsLength; ) {\\n      if(!_senderIsTokenOwner(tokenIds[i])) {\\n        emit NotOwnerError(tokenIds[i]);\\n        continue;\\n      }\\n\\n      try plsbLockRewards.withdrawRewards(tokenIds[i]) {\\n        // Do nothing\\n      } catch Error(string memory reason) {\\n        emit TxnError(tokenIds[i], reason);\\n      } catch (bytes memory reason) {\\n        emit TxnErrorBytes(tokenIds[i], reason);\\n      }\\n\\n      unchecked {\\n        i++;\\n      }\\n    }\\n\\n  }\\n\\n  function configureLockRewards(address _plsbLockRewardsAddress) public onlyOwner {\\n    plsbLockRewards = PulseBitcoinLockNFTRewardsInterface(_plsbLockRewardsAddress);\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_txnFeeSendTo\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NotOwnerError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"TxnError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"reason\",\"type\":\"bytes\"}],\"name\":\"TxnErrorBytes\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"baseTxnFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bulkRegister\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"bulkWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_plsbLockRewardsAddress\",\"type\":\"address\"}],\"name\":\"configureLockRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"fetchNftVariables\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isRegistered\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"canWithdrawal\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"withdrawalAmount\",\"type\":\"uint256\"}],\"internalType\":\"struct PulseBitcoinLockNFTRewardsBulk.NftVariables[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"plsbLockRewards\",\"outputs\":[{\"internalType\":\"contract PulseBitcoinLockNFTRewardsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txnFeeSendTo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PulseBitcoinLockNFTRewardsBulk", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000AEE6586AF05Ef9f944B8619276599C375A7a5Ed2", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}