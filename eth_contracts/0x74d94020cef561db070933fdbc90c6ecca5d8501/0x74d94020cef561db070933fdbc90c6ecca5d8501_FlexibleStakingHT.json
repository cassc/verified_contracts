{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.19;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\nabstract contract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    error ReentrancyGuardReentrantCall();\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        _nonReentrantBefore();\r\n        _;\r\n        _nonReentrantAfter();\r\n    }\r\n\r\n    function _nonReentrantBefore() private {\r\n        if (_status == _ENTERED) {\r\n            revert ReentrancyGuardReentrantCall();\r\n        }\r\n\r\n        _status = _ENTERED;\r\n    }\r\n\r\n    function _nonReentrantAfter() private {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    function _reentrancyGuardEntered() internal view returns (bool) {\r\n        return _status == _ENTERED;\r\n    }\r\n}\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\n\r\ncontract FlexibleStakingHT is Ownable, ReentrancyGuard {\r\n\r\n    struct Pool {\r\n        uint256 launchTimestamp;\r\n        uint256 endTimestamp;\r\n        uint256 lastUpdateTimestamp;\r\n        uint256 poolLifetime;\r\n        uint256 minDeposit;\r\n        uint256 totalStaked;\r\n        uint256 totalRewards;\r\n        uint256 accRewardPerShare;\r\n        bool isOpen;\r\n        bool exists;\r\n    }\r\n\r\n    struct User {\r\n        uint256 stakedAmount;\r\n        uint256 rewardDebt;\r\n    }\r\n\r\n    IERC20 private rewardToken;\r\n\r\n    mapping(uint256 => Pool) private poolMapping; // Pool ID => Pool struct\r\n\r\n    mapping(address => mapping(uint256 => User)) private userInPool; // User address => Pool ID => User struct of this individual pool\r\n\r\n    Pool[] private poolList;\r\n    \r\n    uint256 private currentPoolId = 0;\r\n\r\n    constructor(address tokenAddress) Ownable(msg.sender) {\r\n        rewardToken = IERC20(tokenAddress);\r\n    }\r\n\r\n    function stake(uint256 poolId, uint256 amount) external nonReentrant {\r\n        require(amount > 0, \"Amount must be greater than 0\");\r\n        require(amount >= poolMapping[poolId].minDeposit, \"Amount must be greater than or equal to minimum deposit amount\");\r\n        require(poolMapping[poolId].exists, \"Pool does not exist\");\r\n        require(poolMapping[poolId].isOpen, \"Pool is not open\");\r\n        \r\n        rewardToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        updatePool(poolId);\r\n\r\n        Pool memory pool = poolMapping[poolId];\r\n        User memory user = userInPool[msg.sender][poolId];\r\n\r\n        if(user.stakedAmount > 0) {\r\n            uint256 pending = user.stakedAmount * pool.accRewardPerShare / 1e12 - user.rewardDebt;\r\n            if(pending > 0) {\r\n                rewardToken.transfer(msg.sender, pending);\r\n                poolMapping[poolId].totalRewards -= pending;\r\n            }\r\n        }\r\n\r\n        userInPool[msg.sender][poolId].stakedAmount += amount;\r\n        userInPool[msg.sender][poolId].rewardDebt = userInPool[msg.sender][poolId].stakedAmount * pool.accRewardPerShare / 1e12;\r\n        poolMapping[poolId].totalStaked += amount;\r\n\r\n        emit stakeEvent(msg.sender, poolId, amount);\r\n    }\r\n\r\n    function withdraw(uint256 poolId, uint256 amount) external nonReentrant {\r\n        require(poolMapping[poolId].exists, \"Pool does not exist\");\r\n        \r\n        updatePool(poolId);\r\n\r\n        Pool memory pool = poolMapping[poolId];\r\n        User memory user = userInPool[msg.sender][poolId];\r\n\r\n        require(user.stakedAmount >= amount, \"Amount must be less than or equal to staked amount\");\r\n\r\n        uint256 pending = user.stakedAmount * pool.accRewardPerShare / 1e12 - user.rewardDebt;\r\n\r\n        if(pending > 0) {\r\n            rewardToken.transfer(msg.sender, pending);\r\n            poolMapping[poolId].totalRewards -= pending;\r\n        }\r\n\r\n        userInPool[msg.sender][poolId].stakedAmount -= amount;\r\n\r\n        userInPool[msg.sender][poolId].rewardDebt = userInPool[msg.sender][poolId].stakedAmount * pool.accRewardPerShare / 1e12;\r\n\r\n        poolMapping[poolId].totalStaked -= amount;\r\n\r\n        rewardToken.transfer(msg.sender, amount);\r\n\r\n        emit withdrawEvent(msg.sender, poolId, amount);\r\n    }\r\n\r\n    function claim(uint256 poolId) external nonReentrant {\r\n        require(poolMapping[poolId].exists, \"Pool does not exist\");\r\n\r\n        updatePool(poolId);\r\n\r\n        Pool memory pool = poolMapping[poolId];\r\n        User memory user = userInPool[msg.sender][poolId];\r\n\r\n        uint256 pending = user.stakedAmount * pool.accRewardPerShare / 1e12 - user.rewardDebt;\r\n\r\n        userInPool[msg.sender][poolId].rewardDebt = userInPool[msg.sender][poolId].stakedAmount * pool.accRewardPerShare / 1e12;\r\n\r\n        if(pending > 0) {\r\n            rewardToken.transfer(msg.sender, pending);\r\n            poolMapping[poolId].totalRewards -= pending;\r\n        }\r\n\r\n        emit claimEvent(msg.sender, poolId, pending);\r\n    }\r\n\r\n    function getTotalStakedPool(uint256 poolId) external view returns (uint256) {\r\n        return poolMapping[poolId].totalStaked;\r\n    }\r\n\r\n    function getPool(uint256 poolId) external view returns (Pool memory) {\r\n        return poolMapping[poolId];\r\n    }\r\n\r\n    function getUserInPool(address user, uint256 poolId) external view returns (User memory) {\r\n        return userInPool[user][poolId];\r\n    }\r\n\r\n    function getPoolIsOpen(uint256 poolId) external view returns (bool) {\r\n        return poolMapping[poolId].isOpen;\r\n    }\r\n\r\n    function getUserStakedAmount(address user, uint256 poolId) external view returns (uint256) {\r\n        return userInPool[user][poolId].stakedAmount;\r\n    }\r\n\r\nfunction getUserPendingRewards(address userAddr, uint256 poolId) external view returns (uint256) {\r\n    Pool memory pool = poolMapping[poolId];\r\n    User memory user = userInPool[userAddr][poolId];\r\n    \r\n    uint256 accRewardPerShare = pool.accRewardPerShare;\r\n    if (block.timestamp > pool.lastUpdateTimestamp && pool.totalStaked != 0) {\r\n        uint256 poolLifeLeft = pool.endTimestamp > block.timestamp ? pool.endTimestamp - block.timestamp : 0;\r\n        uint256 emissionPerSecond = (poolLifeLeft > 0) ? pool.totalRewards / poolLifeLeft : 0;\r\n\r\n        uint256 secondsPassed = block.timestamp - pool.lastUpdateTimestamp;\r\n        uint256 reward = secondsPassed * emissionPerSecond;\r\n        accRewardPerShare = accRewardPerShare + (reward * 1e12 / pool.totalStaked);\r\n    }\r\n    \r\n    uint256 pending = user.stakedAmount * accRewardPerShare / 1e12 - user.rewardDebt;\r\n    return pending;\r\n}\r\n\r\n    function getPoolList() external view returns (Pool[] memory) {\r\n        return poolList;\r\n    }\r\n\r\n    function getCurrentPoolId() external view returns (uint256) {\r\n        return currentPoolId;\r\n    }\r\n\r\n    function getPoolTimeLeft(uint256 poolId) external view returns (uint256) {\r\n        Pool memory pool = poolMapping[poolId];\r\n        if(pool.endTimestamp > block.timestamp) {\r\n            return pool.endTimestamp - block.timestamp;\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function createPool(uint256 poolLifetime, uint256 minDeposit) external onlyOwner {\r\n        require(poolLifetime > 0, \"Pool lifetime must be greater than 0.\");\r\n        require(minDeposit > 0, \"Minimum deposit must be greater than 0.\");\r\n\r\n        Pool memory pool = Pool({\r\n            launchTimestamp: 0,\r\n            endTimestamp: 0,\r\n            lastUpdateTimestamp: 0,\r\n            poolLifetime: poolLifetime,\r\n            minDeposit: minDeposit,\r\n            totalStaked: 0,\r\n            totalRewards: 0,\r\n            accRewardPerShare: 0,\r\n            isOpen: false,\r\n            exists: true\r\n        });\r\n\r\n        poolMapping[currentPoolId] = pool;\r\n        poolList.push(pool);\r\n        emit addedNewPool(currentPoolId, poolLifetime, minDeposit);\r\n        currentPoolId++;\r\n    }\r\n\r\n    function startPool(uint256 poolId, uint256 initialRewards) external onlyOwner {\r\n        require(poolMapping[poolId].exists, \"Pool does not exist.\");\r\n        require(poolMapping[poolId].totalRewards == 0, \"Pool already has rewards.\");\r\n        require(!poolMapping[poolId].isOpen, \"Pool is already open.\");\r\n\r\n        rewardToken.transferFrom(msg.sender, address(this), initialRewards);\r\n\r\n        poolMapping[poolId].launchTimestamp = block.timestamp;\r\n        poolMapping[poolId].endTimestamp = block.timestamp + poolMapping[poolId].poolLifetime;\r\n        poolMapping[poolId].lastUpdateTimestamp = block.timestamp;\r\n        poolMapping[poolId].totalRewards = initialRewards;\r\n        poolMapping[poolId].isOpen = true;\r\n\r\n        emit startedPool(poolId);\r\n    }\r\n\r\n    function closePool(uint256 poolId) external onlyOwner {\r\n        require(poolMapping[poolId].exists, \"Pool does not exist.\");\r\n        require(poolMapping[poolId].isOpen, \"Pool is already closed.\");\r\n\r\n        poolMapping[poolId].isOpen = false;\r\n\r\n        emit poolClosed(poolId);\r\n    }\r\n\r\n    function openPool(uint256 poolId) external onlyOwner {\r\n        require(poolMapping[poolId].exists, \"Pool does not exist.\");\r\n        require(!poolMapping[poolId].isOpen, \"Pool is already open.\");\r\n\r\n        poolMapping[poolId].isOpen = true;\r\n\r\n        emit poolOpened(poolId);\r\n    }\r\n\r\n    function addRewards(uint256 poolId, uint256 amount) external onlyOwner {\r\n        require(poolMapping[poolId].exists, \"Pool does not exist.\");\r\n\r\n        rewardToken.transferFrom(msg.sender, address(this), amount);\r\n\r\n        poolMapping[poolId].totalRewards += amount;\r\n\r\n        emit addedRewards(poolId, amount);\r\n    }\r\n\r\n    function withdrawRewards(uint256 poolId, uint256 amount) external onlyOwner {\r\n        require(poolMapping[poolId].exists, \"Pool does not exist.\");\r\n        require(poolMapping[poolId].totalRewards >= amount, \"Amount must be less than or equal to total rewards.\");\r\n\r\n        rewardToken.transfer(msg.sender, amount);\r\n\r\n        poolMapping[poolId].totalRewards -= amount;\r\n\r\n        emit withdrewRewards(poolId, amount);\r\n    }\r\n\r\n    function updatePool(uint256 poolId) public {\r\n        Pool memory pool = poolMapping[poolId];\r\n\r\n        if(block.timestamp <= pool.lastUpdateTimestamp) {\r\n            return;\r\n        }\r\n\r\n        uint256 totalStaked = pool.totalStaked;\r\n\r\n        if(totalStaked == 0) {\r\n            poolMapping[poolId].lastUpdateTimestamp = block.timestamp;\r\n            return;\r\n        }\r\n\r\n        uint256 poolLifeLeft = pool.endTimestamp - block.timestamp;\r\n        uint256 poolLastUpdate = pool.lastUpdateTimestamp;\r\n        uint256 poolTotalRewards = pool.totalRewards;\r\n        uint256 emissionPerSecond = poolTotalRewards / poolLifeLeft;\r\n        uint256 secondsPassed = block.timestamp - poolLastUpdate;\r\n        uint256 reward = secondsPassed * emissionPerSecond;\r\npoolMapping[poolId].accRewardPerShare += (reward * 1e12) / pool.totalStaked;\r\n        poolMapping[poolId].lastUpdateTimestamp = block.timestamp;\r\n        emit poolUpdated(poolId);\r\n    }\r\n\r\n    event addedNewPool(uint256 poolId, uint256 poolLifetime, uint256 minDeposit);\r\n    event startedPool(uint256 poolId);\r\n    event poolOpened(uint256 poolId);\r\n    event poolClosed(uint256 poolId);\r\n    event poolUpdated(uint256 poolId);\r\n\r\n    event addedRewards(uint256 poolId, uint256 amount);\r\n    event withdrewRewards(uint256 poolId, uint256 amount);\r\n\r\n    event stakeEvent(address user, uint256 poolId, uint256 amount);\r\n    event withdrawEvent(address user, uint256 poolId, uint256 amount);\r\n    event claimEvent(address user, uint256 poolId, uint256 amount);\r\n    \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolLifetime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"}],\"name\":\"addedNewPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addedRewards\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"poolClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"poolOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"poolUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stakeEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"startedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrewRewards\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"closePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"}],\"name\":\"createPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentPoolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"launchTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct FlexibleStakingHT.Pool\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolIsOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPoolList\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"launchTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolLifetime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minDeposit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isOpen\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"internalType\":\"struct FlexibleStakingHT.Pool[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getPoolTimeLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getTotalStakedPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserInPool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct FlexibleStakingHT.User\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"getUserStakedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"openPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialRewards\",\"type\":\"uint256\"}],\"name\":\"startPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlexibleStakingHT", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000474b0df2ec4bf9f7e6e01f82965f6e94d27e7fc3", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f07c3105e3da50aa5bea943c13f9ec5f92aa6f101ace805d893114bb3c49cfa6"}