{"SourceCode": "// SPDX-FileCopyrightText: \u00a9 2023 Dai Foundation <www.daifoundation.org>\r\n// SPDX-License-Identifier: AGPL-3.0-or-later\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\npragma solidity ^0.8.16;\r\n\r\ninterface VatLike {\r\n    function live() external view returns (uint256);\r\n    function hope(address) external;\r\n    function move(address, address, uint256) external;\r\n}\r\n\r\ninterface DaiJoinLike {\r\n    function vat() external view returns (address);\r\n    function dai() external view returns (address);\r\n    function exit(address, uint256) external;\r\n}\r\n\r\ninterface SpotterLike {\r\n    function par() external view returns (uint256);\r\n}\r\n\r\ninterface GemLike {\r\n    function decimals() external view returns (uint8);\r\n    function balanceOf(address) external view returns (uint256);\r\n    function approve(address, uint256) external;\r\n    function transfer(address, uint256) external;\r\n}\r\n\r\ninterface PipLike {\r\n    function read() external view returns (bytes32);\r\n}\r\n\r\n// https://github.com/Uniswap/v2-core/blob/ee547b17853e71ed4e0101ccfd52e70d5acded58/contracts/UniswapV2Pair.sol\r\ninterface PairLike {\r\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\r\n    function token0() external view returns (address);\r\n    function mint(address to) external returns (uint256 liquidity);\r\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\r\n    function sync() external;\r\n}\r\n\r\ncontract FlapperUniV2 {\r\n    mapping (address => uint256) public wards;\r\n\r\n    uint256 public live;  // Active Flag\r\n    PipLike public pip;   // Reference price oracle\r\n    uint256 public hop;   // [Seconds]    Time between kicks\r\n    uint256 public zzz;   // [Timestamp]  Last kick\r\n    uint256 public want;  // [WAD]        Relative multiplier of the reference price to insist on in the swap.\r\n                          //              For example: 0.98 * WAD allows 2% worse price than the reference.\r\n\r\n    VatLike     public immutable vat;\r\n    DaiJoinLike public immutable daiJoin;\r\n    SpotterLike public immutable spotter;\r\n    address     public immutable dai;\r\n    address     public immutable gem;\r\n    address     public immutable receiver;\r\n\r\n    PairLike    public immutable pair;\r\n    bool        public immutable daiFirst;\r\n\r\n    event Rely(address indexed usr);\r\n    event Deny(address indexed usr);\r\n    event File(bytes32 indexed what, uint256 data);\r\n    event File(bytes32 indexed what, address data);\r\n    event Kick(uint256 lot, uint256 total, uint256 bought, uint256 liquidity);\r\n    event Cage(uint256 rad);\r\n\r\n    constructor(\r\n        address _daiJoin,\r\n        address _spotter,\r\n        address _gem,\r\n        address _pair,\r\n        address _receiver\r\n    ) {\r\n        daiJoin = DaiJoinLike(_daiJoin);\r\n        vat     = VatLike(daiJoin.vat());\r\n        spotter = SpotterLike(_spotter);\r\n\r\n        dai = daiJoin.dai();\r\n        gem = _gem;\r\n        require(GemLike(gem).decimals() == 18, \"FlapperUniV2/gem-decimals-not-18\");\r\n\r\n        pair     = PairLike(_pair);\r\n        daiFirst = pair.token0() == dai;\r\n        receiver = _receiver;\r\n\r\n        vat.hope(address(daiJoin));\r\n\r\n        wards[msg.sender] = 1;\r\n        emit Rely(msg.sender);\r\n\r\n        // Initial values for safety\r\n        hop  = 1 hours;\r\n        want = WAD;\r\n\r\n        live = 1;\r\n    }\r\n\r\n    modifier auth {\r\n        require(wards[msg.sender] == 1, \"FlapperUniV2/not-authorized\");\r\n        _;\r\n    }\r\n\r\n    uint256 internal constant WAD = 10 ** 18;\r\n    uint256 internal constant RAY = 10 ** 27;\r\n\r\n    function rely(address usr) external auth { wards[usr] = 1; emit Rely(usr); }\r\n    function deny(address usr) external auth { wards[usr] = 0; emit Deny(usr); }\r\n\r\n    // Warning - low `want` values increase the susceptibility to oracle manipulation attacks\r\n    function file(bytes32 what, uint256 data) external auth {\r\n        if      (what == \"hop\")  hop = data;\r\n        else if (what == \"want\") want = data;\r\n        else revert(\"FlapperUniV2/file-unrecognized-param\");\r\n        emit File(what, data);\r\n    }\r\n\r\n    function file(bytes32 what, address data) external auth {\r\n        if (what == \"pip\") pip = PipLike(data);\r\n        else revert(\"FlapperUniV2/file-unrecognized-param\");\r\n        emit File(what, data);\r\n    }\r\n\r\n    function _getReserves() internal returns (uint256 reserveDai, uint256 reserveGem) {\r\n        (uint256 _reserveA, uint256 _reserveB,) = pair.getReserves();\r\n        (reserveDai, reserveGem) = daiFirst ? (_reserveA, _reserveB) : (_reserveB, _reserveA);\r\n\r\n        uint256 _daiBalance = GemLike(dai).balanceOf(address(pair));\r\n        uint256 _gemBalance = GemLike(gem).balanceOf(address(pair));\r\n        if (_daiBalance > reserveDai || _gemBalance > reserveGem) {\r\n            pair.sync();\r\n            (reserveDai, reserveGem) = (_daiBalance, _gemBalance);\r\n        }\r\n    }\r\n\r\n    // The Uniswap invariant needs to hold through the swap.\r\n    // Additionally, The deposited funds need to be in the same ratio as the reserves after the swap.\r\n    //\r\n    // (1)   reserveDai * reserveGem = (reserveDai + lot * 997 / 1000) * (reserveGem - bought)\r\n    // (2)   (total - lot) / bought  = (reserveDai + lot) / (reserveGem - bought)\r\n    //\r\n    // The solution for the these equations for variable `total` and `bought` is used below.\r\n    function _getTotalDai(uint256 wlot, uint256 reserveDai) internal pure returns (uint256 total) {\r\n        total = wlot * (997 * wlot + 1997 * reserveDai) / (1000 * reserveDai);\r\n    }\r\n\r\n    // Based on: https://github.com/Uniswap/v2-periphery/blob/0335e8f7e1bd1e8d8329fd300aea2ef2f36dd19f/contracts/libraries/UniswapV2Library.sol#L43\r\n    function _getAmountOut(uint256 amtIn, uint256 reserveIn, uint256 reserveOut) internal pure returns (uint256 amtOut) {\r\n        uint256 _amtInFee = amtIn * 997;\r\n        amtOut = _amtInFee * reserveOut / (reserveIn * 1000 + _amtInFee);\r\n    }\r\n\r\n    function kick(uint256 lot, uint256) external auth returns (uint256) {\r\n        require(live == 1, \"FlapperUniV2/not-live\");\r\n\r\n        require(block.timestamp >= zzz + hop, \"FlapperUniV2/kicked-too-soon\");\r\n        zzz = block.timestamp;\r\n\r\n        // Check Amounts\r\n        (uint256 _reserveDai, uint256 _reserveGem) = _getReserves();\r\n\r\n        uint256 _wlot = lot / RAY;\r\n        uint256 _total = _getTotalDai(_wlot, _reserveDai);\r\n        require(_total < _wlot * 220 / 100, \"FlapperUniV2/total-insanity\");\r\n\r\n        uint256 _buy = _getAmountOut(_wlot, _reserveDai, _reserveGem);\r\n        require(_buy >= _wlot * want / (uint256(pip.read()) * RAY / spotter.par()), \"FlapperUniV2/insufficient-buy-amount\");\r\n        //\r\n\r\n        // Get Dai\r\n        vat.move(msg.sender, address(this), _total * RAY);\r\n        daiJoin.exit(address(this), _total);\r\n        //\r\n\r\n        // Swap\r\n        GemLike(dai).transfer(address(pair), _wlot);\r\n        (uint256 _amt0Out, uint256 _amt1Out) = daiFirst ? (uint256(0), _buy) : (_buy, uint256(0));\r\n        pair.swap(_amt0Out, _amt1Out, address(this), new bytes(0));\r\n        //\r\n\r\n        // Deposit\r\n        GemLike(dai).transfer(address(pair), _total - _wlot);\r\n        GemLike(gem).transfer(address(pair), _buy);\r\n        uint256 _liquidity = pair.mint(receiver);\r\n        //\r\n\r\n        emit Kick(lot, _total, _buy, _liquidity);\r\n        return 0;\r\n    }\r\n\r\n    function cage(uint256) external auth {\r\n        live = 0;\r\n        emit Cage(0);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_daiJoin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spotter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gem\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rad\",\"type\":\"uint256\"}],\"name\":\"Cage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"Kick\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"cage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dai\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiFirst\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daiJoin\",\"outputs\":[{\"internalType\":\"contract DaiJoinLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gem\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"kick\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"live\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract PairLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pip\",\"outputs\":[{\"internalType\":\"contract PipLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"spotter\",\"outputs\":[{\"internalType\":\"contract SpotterLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"want\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zzz\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "FlapperUniV2", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000009759a6ac90977b93b58547b4a71c78317f391a2800000000000000000000000065c79fcb50ca1594b025960e539ed7a9a6d434a30000000000000000000000009f8f72aa9304c8b593d555f12ef6589cc3a579a2000000000000000000000000517f9dd285e75b599234f7221227339478d0fcc8000000000000000000000000be8e3e3618f7474f8cb1d074a26affef007e98fb", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c121096d738b0bcef1efcece3a7bfdfe598393586bc4003c7cc2d839d4361de0"}