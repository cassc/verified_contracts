{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/LandControllerV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nabstract contract NftContract {\\n  function mintToken(address to, uint256 tokenId) external virtual;\\n\\n  function burnToken(uint256 tokenId) external virtual;\\n\\n  function exists(uint256 tokenId) external view virtual returns (bool);\\n\\n  function ownerOf(uint256 tokenId) public view virtual returns (address);\\n\\n  function totalSupply() public view virtual returns (uint256);\\n\\n  function MAX_SUPPLY() public view virtual returns (uint256);\\n\\n  function LAND_WIDTH() public view virtual returns (uint8);\\n\\n  function LAND_HEIGHT() public view virtual returns (uint8);\\n\\n  function setWH(\\n    uint256 tokenId,\\n    uint8 width,\\n    uint8 height\\n  ) external virtual;\\n\\n  function rectOrigin(uint256 tokenId) public view virtual returns (uint256);\\n\\n  function setRectOrigin(uint256 tokenId, uint256 originTokenId)\\n    external\\n    virtual;\\n}\\n\\ncontract LandControllerV1 is Ownable {\\n  NftContract immutable nftContract;\\n  uint8 immutable LAND_WIDTH;\\n  uint8 immutable LAND_HEIGHT;\\n  uint256 immutable MAX_SUPPLY;\\n  address minter;\\n\\n  event Mint(address to, uint256 tokenId, uint8 width, uint8 height);\\n  event BatchMint(address to, uint256[] tokenIdList, uint8 width, uint8 height);\\n\\n  constructor(address _nftContractAddress) {\\n    nftContract = NftContract(_nftContractAddress);\\n    MAX_SUPPLY = nftContract.MAX_SUPPLY();\\n    LAND_WIDTH = nftContract.LAND_WIDTH();\\n    LAND_HEIGHT = nftContract.LAND_HEIGHT();\\n  }\\n\\n  function setMinter(address newAddress) external onlyOwner {\\n    minter = newAddress;\\n  }\\n\\n  function batchMint(\\n    address to,\\n    uint256[] calldata tokenIdList,\\n    uint8 width,\\n    uint8 height\\n  ) external onlyOwner {\\n    require(\\n      nftContract.totalSupply() + tokenIdList.length <= MAX_SUPPLY,\\n      \\\"Out of space\\\"\\n    );\\n    for (uint256 i = 0; i < tokenIdList.length; i++) {\\n      _mintSpace(to, tokenIdList[i], width, height);\\n    }\\n    emit BatchMint(to, tokenIdList, width, height);\\n  }\\n\\n  function mint(\\n    address to,\\n    uint256 tokenId,\\n    uint8 width,\\n    uint8 height\\n  ) external {\\n    require(msg.sender == minter, \\\"Not minter\\\");\\n    require(nftContract.totalSupply() + 1 <= MAX_SUPPLY, \\\"Out of space\\\");\\n    _mintSpace(to, tokenId, width, height);\\n    emit Mint(to, tokenId, width, height);\\n  }\\n\\n  // Internal functions\\n  function _mintSpace(\\n    address to,\\n    uint256 tokenId,\\n    uint8 width,\\n    uint8 height\\n  ) internal {\\n    require(tokenId > 0, \\\"Incorrect token id\\\");\\n    (uint256 x, uint256 y) = _getXY(tokenId);\\n    require(\\n      x + width <= LAND_WIDTH + 1 && y + height <= LAND_HEIGHT + 1,\\n      \\\"Out of land boundary\\\"\\n    );\\n    for (uint256 i = x; i < x + width; i++) {\\n      for (uint256 j = y; j < y + height; j++) {\\n        uint256 currentTokenId = _getTokenId(i, j);\\n        require(!nftContract.exists(currentTokenId), \\\"Not available\\\");\\n        require(nftContract.rectOrigin(currentTokenId) == 0, \\\"Not available\\\");\\n        if (currentTokenId != tokenId) {\\n          nftContract.setRectOrigin(currentTokenId, tokenId);\\n        }\\n      }\\n    }\\n    nftContract.setWH(tokenId, width, height);\\n    nftContract.mintToken(to, tokenId);\\n  }\\n\\n  function _getTokenId(uint256 x, uint256 y) internal pure returns (uint256) {\\n    return\\n      ((y - 1) / 50) *\\n      10000 +\\n      ((x - 1) / 40) *\\n      2000 +\\n      ((y - 1) % 50) *\\n      40 +\\n      ((x - 1) % 40) +\\n      1;\\n  }\\n\\n  function _getXY(uint256 tokenId)\\n    internal\\n    pure\\n    returns (uint256 x, uint256 y)\\n  {\\n    x = (((tokenId - 1) % 10000) / 2000) * 40 + ((tokenId - 1) % 40) + 1;\\n    y = ((tokenId - 1) / 10000) * 50 + ((tokenId - 1) % 2000) / 40 + 1;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"height\",\"type\":\"uint8\"}],\"name\":\"BatchMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"height\",\"type\":\"uint8\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIdList\",\"type\":\"uint256[]\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"height\",\"type\":\"uint8\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"width\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"height\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"setMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LandControllerV1", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005a0d6e239a9137bb089edf326b2b2435b1975fa0", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}