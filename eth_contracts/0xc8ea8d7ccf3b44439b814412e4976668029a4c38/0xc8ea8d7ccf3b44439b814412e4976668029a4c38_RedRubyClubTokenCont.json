{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2024-06-23\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\n/**\r\n *Submitted for verification at Etherscan.io on 2024-04-21\r\nRed Ruby Club  - RRCE | Creators - Red Ruby Club\r\nVersion: 2.0\r\n\r\nWebsites: \r\n    1. https://redrubygroup.com/\r\n    2. https://redrubygroup.com/theterrace/\r\n    3. https://www.rosalitasbali.com/\r\n    4. https://thesocialseminyak.com/\r\n\r\n\r\nListen: https://www.mixcloud.com/RedRuby/\r\nInstagram: https://www.instagram.com/redrubybali\r\nFacebook:  https://www.facebook.com/redrubybali\r\nYoutube: https://www.youtube.com/channel/UC6TEhupEh867Yn6dt7YFJ2A\r\nTelegram: https://t.me/redrubyclub\r\n*/\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC777 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address owner) external view returns (uint256);\r\n    function send(address recipient, uint256 amount, bytes calldata data) external;\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function authorizeOperator(address operator) external;\r\n    function revokeOperator(address operator) external;\r\n    function isOperatorFor(address operator, address tokenHolder) external view returns (bool);\r\n    function operatorSend(address sender, address recipient, uint256 amount, bytes calldata data, bytes calldata operatorData) external;\r\n    function mint(address recipient, uint256 amount, bytes calldata data) external;\r\n    function burn(uint256 amount, bytes calldata data) external;\r\n\r\n    event Sent(address indexed operator, address indexed from, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n    event Minted(address indexed operator, address indexed to, uint256 amount, bytes data, bytes operatorData);\r\n    event Burned(address indexed operator, address indexed from, uint256 amount, bytes data, bytes operatorData);\r\n    event AuthorizedOperator(address indexed operator, address indexed tokenHolder);\r\n    event RevokedOperator(address indexed operator, address indexed tokenHolder);\r\n}\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface IERC1820Registry {\r\n    function setInterfaceImplementer(address account, bytes32 interfaceHash, address implementer) external;\r\n    function getInterfaceImplementer(address account, bytes32 interfaceHash) external view returns (address);\r\n    function setManager(address account, address newManager) external;\r\n    function getManager(address account) external view returns (address);\r\n}\r\n\r\ncontract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), msg.sender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\ncontract RedRubyClubTokenContract is IERC777, IERC20, Ownable {\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n    uint8 private _decimals;\r\n    address public burnRecipient;\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => bool)) private _authorizedOperators;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    IERC1820Registry private constant _ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\r\n\r\n    bytes32 private constant _TOKENS_SENDER_INTERFACE_HASH = keccak256(\"ERC777TokensSender\");\r\n    bytes32 private constant _TOKENS_RECIPIENT_INTERFACE_HASH = keccak256(\"ERC777TokensRecipient\");\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_, uint256 initialSupply, address[] memory defaultOperators) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n        _decimals = 18;\r\n        _mint(msg.sender, initialSupply, \"\", \"\");\r\n\r\n        bool success;\r\n        bytes memory data;\r\n\r\n        (success, data) = address(_ERC1820_REGISTRY).call(\r\n            abi.encodeWithSignature(\"setInterfaceImplementer(address,bytes32,address)\", address(this), keccak256(\"ERC777Token\"), address(this))\r\n        );\r\n        require(success, \"Failed to set ERC777Token interface implementer\");\r\n\r\n        (success, data) = address(_ERC1820_REGISTRY).call(\r\n            abi.encodeWithSignature(\"setInterfaceImplementer(address,bytes32,address)\", address(this), keccak256(\"ERC20Token\"), address(this))\r\n        );\r\n        require(success, \"Failed to set ERC20Token interface implementer\");\r\n\r\n        for (uint256 i = 0; i < defaultOperators.length; i++) {\r\n            _authorizedOperators[defaultOperators[i]][msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    function name() public view override(IERC777, IERC20) returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view override(IERC777, IERC20) returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view override returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view override(IERC777, IERC20) returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address owner) public view override(IERC777, IERC20) returns (uint256) {\r\n        return _balances[owner];\r\n    }\r\n\r\n    function send(address recipient, uint256 amount, bytes calldata data) public override {\r\n        _send(msg.sender, msg.sender, recipient, amount, data, \"\", true);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override(IERC777, IERC20) returns (bool) {\r\n        _send(msg.sender, msg.sender, recipient, amount, \"\", \"\", false);\r\n        return true;\r\n    }\r\n\r\n    function authorizeOperator(address operator) public override {\r\n        require(msg.sender != operator, \"ERC777: authorizing self as operator\");\r\n        _authorizedOperators[operator][msg.sender] = true;\r\n        emit AuthorizedOperator(operator, msg.sender);\r\n    }\r\n\r\n    function revokeOperator(address operator) public override {\r\n        require(operator != msg.sender, \"ERC777: revoking self as operator\");\r\n        _authorizedOperators[operator][msg.sender] = false;\r\n        emit RevokedOperator(operator, msg.sender);\r\n    }\r\n\r\n    function isOperatorFor(address operator, address tokenHolder) public view override returns (bool) {\r\n        return operator == tokenHolder || _authorizedOperators[operator][tokenHolder];\r\n    }\r\n\r\n    function operatorSend(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount,\r\n        bytes calldata data,\r\n        bytes calldata operatorData\r\n    ) public override {\r\n        require(isOperatorFor(msg.sender, sender), \"ERC777: caller is not an operator for holder\");\r\n        _send(msg.sender, sender, recipient, amount, data, operatorData, true);\r\n    }\r\n\r\n    function mint(address recipient, uint256 amount, bytes calldata data) public override onlyOwner {\r\n        _mint(recipient, amount, data, \"\");\r\n    }\r\n\r\n    function setBurnRecipient(address _burnRecipient) external onlyOwner {\r\n        burnRecipient = _burnRecipient;\r\n    }\r\n\r\n    function burn(uint256 amount, bytes calldata data) public override onlyOwner {\r\n        _burn(msg.sender, amount, data, \"\");\r\n    }\r\n\r\n    function burntoAddress(uint256 amount, bytes calldata data) public onlyOwner {\r\n        require(burnRecipient != address(0), \"Burn recipient is not set\");\r\n        _send(msg.sender, msg.sender, burnRecipient, amount, data, \"\", false);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        require(_allowances[sender][msg.sender] >= amount, \"ERC777: transfer amount exceeds allowance\");\r\n        _allowances[sender][msg.sender] -= amount;\r\n        _send(msg.sender, sender, recipient, amount, \"\", \"\", false);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function _send(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    ) private {\r\n        require(from != address(0), \"ERC777: send from the zero address\");\r\n        require(to != address(0), \"ERC777: send to the zero address\");\r\n\r\n        _callTokensToSend(operator, from, to, amount, data, operatorData);\r\n\r\n        _move(operator, from, to, amount, data, operatorData);\r\n\r\n        _callTokensReceived(operator, from, to, amount, data, operatorData, requireReceptionAck);\r\n    }\r\n\r\n    function _move(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData\r\n    ) private {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC777: transfer amount exceeds balance\");\r\n        _balances[from] = fromBalance - amount;\r\n        _balances[to] += amount;\r\n\r\n        emit Sent(operator, from, to, amount, data, operatorData);\r\n        emit Transfer(from, to, amount); // ERC20 compatibility\r\n    }\r\n\r\n    function _mint(\r\n        address account,\r\n        uint256 amount,\r\n        bytes memory userData,\r\n        bytes memory operatorData\r\n    ) internal {\r\n        require(account != address(0), \"ERC777: mint to the zero address\");\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n\r\n        emit Minted(msg.sender, account, amount, userData, operatorData);\r\n        emit Transfer(address(0), account, amount); // ERC20 compatibility\r\n    }\r\n\r\n    function _burn(\r\n        address from,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData\r\n    ) internal {\r\n        require(from != address(0), \"ERC777: burn from the zero address\");\r\n\r\n        _callTokensToSend(msg.sender, from, address(0), amount, data, operatorData);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC777: burn amount exceeds balance\");\r\n        _balances[from] = fromBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Burned(msg.sender, from, amount, data, operatorData);\r\n        emit Transfer(from, address(0), amount); // ERC20 compatibility\r\n    }\r\n\r\n    function _callTokensToSend(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData\r\n    ) private {\r\n        bool success;\r\n        bytes memory returnData;\r\n\r\n        (success, returnData) = address(_ERC1820_REGISTRY).staticcall(\r\n            abi.encodeWithSignature(\"getInterfaceImplementer(address,bytes32)\", from, _TOKENS_SENDER_INTERFACE_HASH)\r\n        );\r\n        if (success && returnData.length > 0) {\r\n            address implementer = abi.decode(returnData, (address));\r\n            if (implementer != address(0)) {\r\n                IERC777Sender(implementer).tokensToSend(operator, from, to, amount, data, operatorData);\r\n            }\r\n        }\r\n    }\r\n\r\n    function _callTokensReceived(\r\n        address operator,\r\n        address from,\r\n        address to,\r\n        uint256 amount,\r\n        bytes memory data,\r\n        bytes memory operatorData,\r\n        bool requireReceptionAck\r\n    ) private {\r\n        bool success;\r\n        bytes memory returnData;\r\n\r\n        (success, returnData) = address(_ERC1820_REGISTRY).staticcall(\r\n            abi.encodeWithSignature(\"getInterfaceImplementer(address,bytes32)\", to, _TOKENS_RECIPIENT_INTERFACE_HASH)\r\n        );\r\n        if (success && returnData.length > 0) {\r\n            address implementer = abi.decode(returnData, (address));\r\n            if (implementer != address(0)) {\r\n                IERC777Recipient(implementer).tokensReceived(operator, from, to, amount, data, operatorData);\r\n            } else if (requireReceptionAck) {\r\n                require(to.code.length == 0, \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\r\n            }\r\n        } else if (requireReceptionAck) {\r\n            require(to.code.length == 0, \"ERC777: token recipient contract has no implementer for ERC777TokensRecipient\");\r\n        }\r\n    }\r\n}\r\n\r\ninterface IERC777Sender {\r\n    function tokensToSend(address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData) external;\r\n}\r\n\r\ninterface IERC777Recipient {\r\n    function tokensReceived(address operator, address from, address to, uint256 amount, bytes calldata userData, bytes calldata operatorData) external;\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"defaultOperators\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"AuthorizedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"RevokedOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"Sent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"authorizeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"burntoAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenHolder\",\"type\":\"address\"}],\"name\":\"isOperatorFor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"operatorData\",\"type\":\"bytes\"}],\"name\":\"operatorSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"revokeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_burnRecipient\",\"type\":\"address\"}],\"name\":\"setBurnRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "RedRubyClubTokenContract", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000003077b58d5d378391980000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000002f526564205275627920436c7562202d205265616c20576f726c6420417373657420546f6b656e20436f6e74726163740000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000752656452756279000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4de6eb02c65e7b0d598e21c130fd64e499745814dfbb96b1797cb0c9fdf9252a"}