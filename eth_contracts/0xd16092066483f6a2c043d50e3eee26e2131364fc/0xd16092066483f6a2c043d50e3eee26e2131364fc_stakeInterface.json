{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.24;\r\n\r\n/// Standard IERC20 interface\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function name() external view returns(string memory);\r\n    function symbol() external view returns(string memory);\r\n    function balanceOf(address user) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface sdep{\r\n    function sdOwner() external view returns(address);\r\n    function BackingLogicAddress() external view returns(address);\r\n    function backingAsset() external view returns(address);\r\n}\r\n\r\ninterface stakeDeployer{\r\n    function isReward(address addy) external view returns(bool);\r\n    function setIsReward(address addy) external;\r\n    function readyMigrate(address addy) external view returns(bool);\r\n    function migrateAddress(address addy) external view returns(address);\r\n    function distributeBulk() external;\r\n}\r\n\r\ninterface Reader {\r\n    function isAdmin(address addy) external view returns (bool);\r\n    function isSetter(address addy) external view returns (bool);\r\n    function setIsSD(address addy) external;\r\n    function protocolAddy() external view returns (address);    \r\n    function feeConverter() external view returns (address);\r\n    function sdDepAddy() external view returns (address);\r\n    function getProtocolFee() external view returns (uint256);\r\n    function breaker() external view returns (bool); //circuit breaked in case of an exploit to handle\r\n    function dataAddress() external view returns (address);\r\n    function isWhitelistContract(address addy) external view returns (bool);\r\n    function setWhitelistContract(address addy, bool _bool) external;\r\n    function stakeDeployerAddress() external view returns(address);\r\n    function FEGstake() external view returns(address);\r\n}\r\n\r\ninterface StakeLogics{    \r\n    function start() external;\r\n    function balanceOf(address user) external view returns (uint256);\r\n    function totalSupply() external view returns (uint256);\r\n    function amountStaked(address user) external view returns (uint256 StakedSD);  \r\n    function isStakeholder(address user) external view returns (bool);\r\n    function stake(address user, uint256 amt) external returns (uint256 poolAmountOut, uint256 afterFee);\r\n    function withdraw(address user, uint256 amt) external returns (uint256);\r\n    function setWithdrawalFee(uint256 amt) external;\r\n    function withdrawFee() external view returns(uint256);\r\n    function setDepositFee(uint256 amt) external;\r\n    function depositFee() external view returns(uint256);\r\n    function addReward(address reward, uint256 amt) external;\r\n    function getTotalRewards(address reward) external view returns(uint256);\r\n    function getRewardRound(address reward) external view returns(uint256);\r\n    function claimRewardTokenEarned(address user, address reward) external returns (uint256 owing);\r\n    function claimAllReward(address user) external;\r\n    function pendingRewardTokenEarned(address user, address reward) external view returns (uint256 _pendingReward);\r\n    function syncRewards() external;\r\n    function userRewardCheck(address user) external view returns(bool owed);\r\n    function setRewardToken(address reward, uint256 _syncLevel) external;\r\n    function setSyncLevel(address reward, uint256 amt) external;\r\n    function getSyncLevel(address reward) external view returns(uint256);\r\n    function setDelay(uint256 amt) external;\r\n    function delay() external view returns(uint256);\r\n    function setMatureDelay(bool _bool) external;    \r\n    function matureDelay() external view returns(bool);\r\n    function setBoost(uint256 amt) external;\r\n    function boost() external view returns(uint256);\r\n    function setBoostBacking(bool _bool) external;\r\n    function boostBacking() external view returns(bool);\r\n    function setBurnWDFee(bool _bool) external;\r\n    function burnWDFee() external view returns(bool);\r\n    function setSacrificeEnabled(bool _bool) external;\r\n    function sacrificeEnabled() external view returns(bool);\r\n    function setSacrificeLevel(address user, uint256 amt) external;\r\n    function parent() external view returns(address);\r\n    function stakers(address user) external view returns(uint256, uint256, uint256, bool, bool);\r\n    function rewards(address user) external view returns(bool, bool, uint256, uint256, uint256, uint256);\r\n    function userRewards(address reward, address user) external view returns(uint256, uint256, uint256);\r\n    function rewardRounds(address reward, uint256 round) external view returns(uint256, uint256, uint256);\r\n    function rewardAddresses(uint256 amount) external view returns(address);\r\n    function isRewardToken(address reward) external view returns(bool);\r\n    function rewardLength() external view returns(uint256);\r\n    function getAllPendingRewardTokenEarned(address user) external view returns (uint256[] memory, address[] memory);\r\n    function live() external view returns(bool);\r\n    function getStakeTime(address user) external view returns(uint256);\r\n    function transferOwnership(address newowner) external;\r\n    function sacrificed(address user) external view returns(uint256);\r\n    function setOffRewardToken(address reward, bool _bool) external;\r\n}\r\n\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/// Transfer Helper to ensure the correct transfer of the tokens or ETH\r\nlibrary SafeTransfer {\r\n    using Address for address;\r\n    /** Safe Transfer asset from one wallet with approval of the wallet\r\n    * @param erc20: the contract address of the erc20 token\r\n    * @param from: the wallet to take from\r\n    * @param amount: the amount to take from the wallet\r\n    **/\r\n    function _pullUnderlying(IERC20 erc20, address from, uint amount) internal\r\n    {\r\n        safeTransferFrom(erc20,from,address(this),amount);\r\n    }\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /** Safe Transfer asset to one wallet from within the contract\r\n    * @param erc20: the contract address of the erc20 token\r\n    * @param to: the wallet to send to\r\n    * @param amount: the amount to send from the contract\r\n    **/\r\n    function _pushUnderlying(IERC20 erc20, address to, uint amount) internal\r\n    {\r\n        safeTransfer(erc20,to,amount);\r\n    }\r\n\r\n    /** Safe Transfer ETH to one wallet from within the contract\r\n    * @param to: the wallet to send to\r\n    * @param value: the amount to send from the contract\r\n    **/\r\n    function safeTransferETH(address to, uint256 value) internal {\r\n        (bool success,) = to.call{value : value}(new bytes(0));\r\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\ncontract ReentrancyGuard {\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n    uint256 private _status;\r\n\r\n    constructor () {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    modifier nonReentrant() {\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n        _status = _ENTERED;\r\n        _;\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\ninterface Dataport {\r\n    function DATA_READ() external view returns(address);\r\n}\r\n\r\ncontract stakeInterface is ReentrancyGuard{\r\n    address public SD;\r\n    address public _owner;\r\n    address public stakeLogic;\r\n    string  private _name;\r\n    string  private _symbol;\r\n    bool    public paused;\r\n    uint8   private _decimals = 18;\r\n    mapping(address => uint256) public staked;\r\n    mapping(address => uint256) public accu;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address user, address token, string memory tname, string memory tsymbol) {\r\n        SD = token;\r\n        _name = tname;\r\n        _symbol = tsymbol;\r\n        _owner = user;\r\n    }\r\n    \r\n    event STAKED(address staker, uint256 tokens);\r\n    event ADDREWARD(address reward, uint256 amount);\r\n    event WITHDRAW(address staker, uint256 tokens);\r\n    event PAYOUT(uint256 round, uint256 tokens, address sender);\r\n    event CLAIMEDREWARD(address staker, address reward, uint256 amount);\r\n    event CLAIMEDSDEARNED(address staker, uint256 reward); \r\n    event CLAIMALLREWARD(address staker); \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    modifier live() {\r\n        require(!paused, \"Paused\");\r\n        _;\r\n    }\r\n\r\n    modifier dist() {\r\n        if(address(this) != Reader(DATA_READ()).FEGstake()){\r\n        stakeDeployer(stakeDeployerAddress()).distributeBulk();\r\n        }\r\n        _;\r\n    }\r\n\r\n    function stakeDeployerAddress() public view returns(address) {\r\n        return Reader(DATA_READ()).stakeDeployerAddress();\r\n    }\r\n    \r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */    \r\n\r\n    modifier onlyOwner {\r\n        if(_owner != address(0)) {\r\n        require(msg.sender == _owner, \"owner\");\r\n        }\r\n        if(_owner == address(0)) {\r\n        require(Reader(DATA_READ()).isAdmin(msg.sender));\r\n        }\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"use renounce\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n        StakeLogics(stakeLogic).transferOwnership(newOwner);\r\n    }\r\n\r\n    function DATA_READ() public view returns(address) {\r\n       return Dataport(0xcCeD1a96321B2B2a06E8F3F4B0B883dDD059968c).DATA_READ();\r\n    }\r\n\r\n    function name() public view returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public view returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public view returns(uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function isLive() public view returns(bool) {\r\n        return StakeLogics(stakeLogic).live();\r\n    }\r\n\r\n    function setPause(bool _bool) external onlyOwner {\r\n        require(stakeDeployer(stakeDeployerAddress()).readyMigrate(SD), \"Not ready\");\r\n        paused = _bool;\r\n    }\r\n\r\n    function setLogics(address addy) external {\r\n        require(stakeLogic == address(0), \"0x\");\r\n        stakeLogic = addy;\r\n    }\r\n\r\n    function userRewardCheck(address user) public view returns(bool) {\r\n        return StakeLogics(stakeLogic).userRewardCheck(user);\r\n    }\r\n\r\n    function getStakeTime(address user) public view returns(uint256) {\r\n        return StakeLogics(stakeLogic).getStakeTime(user);\r\n    }\r\n\r\n    function getTotalRewards(address reward) external view returns(uint256) {\r\n        return StakeLogics(stakeLogic).getTotalRewards(reward);        \r\n    }\r\n\r\n    function sendTokens(address user, uint256 amt, uint256 amt0) external {\r\n        require(msg.sender == stakeLogic, \"Not SL\");\r\n        SafeTransfer.safeTransfer(IERC20(SD), user, amt);\r\n        uint256 ts = staked[user];\r\n        uint256 us = accu[user];\r\n        staked[user] = amt0 > ts ? 0 : ts - amt0;\r\n        accu[user] = amt0 > us ? 0 : us - amt0;\r\n    }\r\n\r\n    function sendReward(address reward, address user, uint256 amt) external {\r\n        require(msg.sender == stakeLogic, \"Not SL\");\r\n        SafeTransfer.safeTransfer(IERC20(reward), user, amt);\r\n    }\r\n\r\n    function setStakeLogic() external onlyOwner {\r\n        require(stakeDeployer(stakeDeployerAddress()).readyMigrate(SD), \"Not ready\");\r\n        stakeLogic = stakeDeployer(stakeDeployerAddress()).migrateAddress(SD);\r\n    }\r\n\r\n    function setWithdrawalFee(uint256 amt) external onlyOwner {\r\n        StakeLogics(stakeLogic).setWithdrawalFee(amt);\r\n    }\r\n\r\n    function withdrawalFee() external view returns(uint256) {\r\n        return StakeLogics(stakeLogic).withdrawFee();\r\n    }\r\n\r\n    function setDepositFee(uint256 amt) external onlyOwner {\r\n        StakeLogics(stakeLogic).setDepositFee(amt);\r\n    }\r\n\r\n    function depositFee() external view returns(uint256) {\r\n        return StakeLogics(stakeLogic).depositFee();\r\n    }\r\n\r\n    function balanceOf(address user) external view returns(uint256) {\r\n        return StakeLogics(stakeLogic).balanceOf(user);\r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n        return StakeLogics(stakeLogic).totalSupply();\r\n    }\r\n\r\n    function isStaker(address user) public view returns(bool) {\r\n        return StakeLogics(stakeLogic).isStakeholder(user);\r\n    }\r\n    \r\n    function start() external {\r\n        require(msg.sender == _owner, \"owner\");\r\n        StakeLogics(stakeLogic).start();\r\n    }\r\n\r\n    function sacrificed(address user) external view returns(uint256) {\r\n        return StakeLogics(stakeLogic).sacrificed(user);\r\n    }\r\n\r\n    function stake(uint256 amount) public nonReentrant returns(uint256) { \r\n        require(isLive(), \"not live\");\r\n        SafeTransfer.safeTransferFrom(IERC20(SD), msg.sender, stakeLogic, amount); \r\n        (uint256 poolAmountOut, uint256 afterFee) = StakeLogics(stakeLogic).stake(msg.sender, amount);\r\n        staked[msg.sender] += afterFee;\r\n        accu[msg.sender] += afterFee;\r\n        emit STAKED(msg.sender, amount);\r\n        emit Transfer(msg.sender, address(this), poolAmountOut);\r\n        return poolAmountOut;        \r\n    }\r\n\r\n    function stake(address user, uint256 amount) public nonReentrant returns(uint256) { \r\n        require(isLive(), \"not live\");\r\n        SafeTransfer.safeTransferFrom(IERC20(SD), msg.sender, stakeLogic, amount); \r\n        (uint256 poolAmountOut, uint256 afterFee) = StakeLogics(stakeLogic).stake(user, amount);\r\n        staked[user] += afterFee;\r\n        accu[user] += afterFee;\r\n        emit STAKED(user, amount);\r\n        emit Transfer(user, address(this), poolAmountOut);\r\n        return poolAmountOut;        \r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Owners can send the funds to be distributed to stakers using this function\r\n    // @param tokens number of tokens to distribute\r\n    // ------------------------------------------------------------------------\r\n    function addReward(address reward, uint256 amt) public nonReentrant {   \r\n        SafeTransfer.safeTransferFrom(IERC20(reward), msg.sender, address(this), amt); \r\n        StakeLogics(stakeLogic).addReward(reward, amt);\r\n        emit ADDREWARD(reward, amt);  \r\n    }\r\n    \r\n    function setOffRewardToken(address reward, bool _bool) external nonReentrant onlyOwner {\r\n        StakeLogics(stakeLogic).setOffRewardToken(reward, _bool);\r\n    }\r\n\r\n    function claimRewardTokenEarned(address reward) public nonReentrant  live returns(uint256 owing) {      \r\n        owing = StakeLogics(stakeLogic).claimRewardTokenEarned(msg.sender, reward);   \r\n        emit CLAIMEDREWARD(msg.sender, reward, owing);\r\n        return owing;\r\n    }    \r\n    \r\n    function claimAllReward() public nonReentrant live {    \r\n        StakeLogics(stakeLogic).claimAllReward(msg.sender);\r\n        emit CLAIMALLREWARD(msg.sender);\r\n    }\r\n\r\n    // ------------------------------------------------------------------------\r\n    // Get the pending rewards of the staker\r\n    // @param _staker the address of the staker\r\n    // ------------------------------------------------------------------------    \r\n    \r\n    function pendingRewardTokenEarned(address staker, address reward) public view returns(uint256 _pendingReward) {\r\n        require(staker != address(0), \"ERC20: sending to the zero address\");\r\n        return StakeLogics(stakeLogic).pendingRewardTokenEarned(staker, reward);\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Get the SST balance of the token holder\r\n    // @param user the address of the token holder includes earned SD tokens from staking\r\n    // ------------------------------------------------------------------------\r\n    function amountStaked(address user) public view returns(uint256 StakedSD) {\r\n        require(user != address(0), \"ERC20: sending to the zero address\");\r\n        uint256 a = StakeLogics(stakeLogic).amountStaked(user);\r\n        StakedSD = a < staked[user] ? staked[user] : a;\r\n    }\r\n    \r\n    // ------------------------------------------------------------------------\r\n    // Stakers can un stake the staked tokens using this function\r\n    // @param tokens the number of tokens to withdraw\r\n    // ------------------------------------------------------------------------\r\n    function withdraw(uint256 amount) public nonReentrant live dist returns (uint256 tokenAmountOut) {\r\n        require(isLive(), \"not live\");\r\n        tokenAmountOut = StakeLogics(stakeLogic).withdraw(msg.sender, amount); \r\n        emit WITHDRAW(msg.sender, amount);\r\n        emit Transfer(address(this), msg.sender, tokenAmountOut);\r\n        return tokenAmountOut;\r\n    }\r\n\r\n    function stk(address user, uint256 amount, bool _bool) public nonReentrant live {\r\n        require(msg.sender == stakeLogic, \"SL\");\r\n        staked[user] = _bool ? staked[user] + amount : staked[user] - amount;\r\n    }\r\n\r\n    function accumulated(address user) external view returns(uint256) {\r\n        uint256 a = accu[user];\r\n        uint256 c = amountStaked(user);\r\n        return c > a ? c - a : 0; \r\n    }\r\n    \r\n    function resetAccumulated() external {\r\n        accu[msg.sender] = amountStaked(msg.sender);\r\n    }\r\n\r\n    function emergencySaveLostTokens(address to, address _token, uint256 _amt) public dist onlyOwner {\r\n        require(_token != SD, \"Can't remove Main Token\");\r\n        require(!stakeDeployer(stakeDeployerAddress()).isReward(_token), \"Cannot remove rewards\");\r\n        IERC20(_token).transfer(to, _amt);\r\n    }\r\n\r\n    function setRewardToken(address reward, uint256 _syncLevel) external{ // Incase wraps ever update\r\n        if(msg.sender != stakeDeployerAddress()){\r\n        require(msg.sender == owner(), \"OO\");\r\n    }\r\n        if(!stakeDeployer(stakeDeployerAddress()).isReward(reward)){\r\n        stakeDeployer(stakeDeployerAddress()).setIsReward(reward);\r\n        }\r\n        StakeLogics(stakeLogic).setRewardToken(reward, _syncLevel);\r\n    }\r\n    \r\n    function syncRewards() public nonReentrant {\r\n        StakeLogics(stakeLogic).syncRewards();\r\n    }\r\n\r\n    function setSacrificeLevel(uint256 amt) external {\r\n        StakeLogics(stakeLogic).setSacrificeLevel(msg.sender, amt);\r\n    }\r\n    \r\n    function setSacrificeEnabled(bool _bool) external onlyOwner {\r\n        StakeLogics(stakeLogic).setSacrificeEnabled(_bool);\r\n    }\r\n\r\n    function setBurnWDFee(bool _bool) external onlyOwner {\r\n        StakeLogics(stakeLogic).setBurnWDFee(_bool);\r\n    }\r\n\r\n    function setBoostBacking(bool _bool) external onlyOwner {\r\n        StakeLogics(stakeLogic).setBoostBacking(_bool);\r\n    }\r\n    \r\n    function setBoost(uint256 amt) external onlyOwner {\r\n        StakeLogics(stakeLogic).setBoost(amt);\r\n    }\r\n    \r\n    function setSyncLevel(address reward, uint256 amt) external onlyOwner {\r\n        require(amt > 1e7, \" 1e7\");\r\n        StakeLogics(stakeLogic).setSyncLevel(reward, amt);\r\n    }\r\n\r\n    function getSyncLevel(address reward) external view returns(uint256) {\r\n        return StakeLogics(stakeLogic).getSyncLevel(reward);\r\n    }\r\n    \r\n    function delay() external view returns(uint256) {\r\n        return StakeLogics(stakeLogic).delay();\r\n    }\r\n    \r\n    function getRewardRound(address reward) external view returns(uint256) {\r\n        return StakeLogics(stakeLogic).getRewardRound(reward);\r\n    }\r\n    \r\n    function boost() external view returns(uint256) {\r\n        return StakeLogics(stakeLogic).boost();\r\n    }\r\n    \r\n    function boostBacking() external view returns(bool) {\r\n        return StakeLogics(stakeLogic).boostBacking();\r\n    }\r\n    \r\n    function burnWDFee() external view returns(bool) {\r\n        return StakeLogics(stakeLogic).burnWDFee();\r\n    }\r\n    \r\n    function sacrificeEnabled() external view returns(bool) {\r\n        return StakeLogics(stakeLogic).sacrificeEnabled();\r\n    }\r\n    \r\n    function matureDelay() external view returns(bool) {\r\n        return StakeLogics(stakeLogic).matureDelay();\r\n    }\r\n\r\n    function setMatureDelay(bool _bool) external onlyOwner {\r\n        StakeLogics(stakeLogic).setMatureDelay(_bool);\r\n    }\r\n    \r\n    function setDelay(uint256 amt) external onlyOwner {\r\n        StakeLogics(stakeLogic).setDelay(amt);\r\n    }\r\n\r\n    function getStakers(address user) external view returns(uint256 stakeTime, uint256 sacrificeLevel, uint256 withdrawFee, bool initialized, bool preDelay) {\r\n        return StakeLogics(stakeLogic).stakers(user);\r\n    }\r\n\r\n    function getRewards(address reward) external view returns(bool islive, bool isOn, uint256 round, uint256 totalDividends, uint256 totalRewards, uint256 _syncLevel) {\r\n        return StakeLogics(stakeLogic).rewards(reward);\r\n    }\r\n\r\n    function getUserRewards(address reward, address user) external view returns(uint256 entryRound, uint256 lastEarned, uint256 totalEarned) {\r\n        return StakeLogics(stakeLogic).userRewards(reward, user);\r\n    }\r\n    \r\n    function getRewardRounds(address reward, uint256 round) external view returns(uint256 entryRound, uint256 lastEarned, uint256 totalEarned) {\r\n        return StakeLogics(stakeLogic).rewardRounds(reward, round);\r\n    }\r\n\r\n    function rewardAddresses(uint256 reward) public view returns(address) {        \r\n        return StakeLogics(stakeLogic).rewardAddresses(reward);\r\n    }\r\n\r\n    function rewardLength() public view returns(uint256) {\r\n        return StakeLogics(stakeLogic).rewardLength();\r\n    }\r\n\r\n    function getAllPendingRewardTokenEarned(address user) public view returns (uint256[] memory amounts, address[] memory reward, string[] memory name_, string[] memory symbol_, uint8[] memory decimals_) {\r\n        uint256 rl = rewardLength();\r\n        address rw;\r\n        reward = new address[](rl);\r\n        amounts = new uint256[](rl);\r\n        name_ = new string[](rl);\r\n        symbol_ = new string[](rl);\r\n        decimals_ = new uint8[](rl);\r\n        for (uint256 j = 0; j < rl; j++) {\r\n            rw = rewardAddresses(j);\r\n            reward[j] = rw;\r\n            amounts[j] = pendingRewardTokenEarned(user, rw);\r\n            name_[j] = IERC20(rw).name();\r\n            symbol_[j] = IERC20(rw).symbol();\r\n            decimals_[j] = IERC20(rw).decimals();\r\n        }\r\n    }\r\n\r\n    function getPaginatedPendingRewardTokenEarned(address user, uint256 starting, uint256 amount) public view returns (uint256[] memory amounts, address[] memory reward, string[] memory name_, string[] memory symbol_, uint8[] memory decimals_) {\r\n        uint256 rl = amount;\r\n        address rw;\r\n        starting -= 1;\r\n        reward = new address[](rl);\r\n        amounts = new uint256[](rl);\r\n        name_ = new string[](rl);\r\n        symbol_ = new string[](rl);\r\n        decimals_ = new uint8[](rl);\r\n        for (uint256 j = starting; j < rl + starting; j++) {\r\n            rw = rewardAddresses(j);\r\n            reward[j] = rw;\r\n            amounts[j] = pendingRewardTokenEarned(user, rw);\r\n            name_[j] = IERC20(rw).name();\r\n            symbol_[j] = IERC20(rw).symbol();\r\n            decimals_[j] = IERC20(rw).decimals();\r\n        }\r\n    }\r\n\r\n    function getRewardList() external view returns(address[] memory reward, string[] memory name_, string[] memory symbol_) {\r\n        uint256 rl = rewardLength();\r\n        address rw;\r\n        reward = new address[](rl);\r\n        name_ = new string[](rl);\r\n        symbol_ = new string[](rl);\r\n        for (uint256 j = 0; j < rl; j++) {\r\n            rw = rewardAddresses(j);\r\n            reward[j] = rw;\r\n            name_[j] = IERC20(rw).name();\r\n            symbol_[j] = IERC20(rw).symbol();\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tname\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tsymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ADDREWARD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"}],\"name\":\"CLAIMALLREWARD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CLAIMEDREWARD\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"CLAIMEDSDEARNED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"PAYOUT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"STAKED\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"WITHDRAW\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DATA_READ\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accu\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"accumulated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"amountStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"StakedSD\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boostBacking\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnWDFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"claimRewardTokenEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"owing\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amt\",\"type\":\"uint256\"}],\"name\":\"emergencySaveLostTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAllPendingRewardTokenEarned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"reward\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"name_\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"symbol_\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals_\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"starting\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getPaginatedPendingRewardTokenEarned\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"reward\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"name_\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"symbol_\",\"type\":\"string[]\"},{\"internalType\":\"uint8[]\",\"name\":\"decimals_\",\"type\":\"uint8[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"reward\",\"type\":\"address[]\"},{\"internalType\":\"string[]\",\"name\":\"name_\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"symbol_\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getRewardRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"}],\"name\":\"getRewardRounds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"islive\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isOn\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"round\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDividends\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_syncLevel\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getStakers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sacrificeLevel\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"preDelay\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getSyncLevel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"getTotalRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"entryRound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastEarned\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalEarned\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isStaker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"matureDelay\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"}],\"name\":\"pendingRewardTokenEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_pendingReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetAccumulated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"rewardAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sacrificeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"sacrificed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"sendReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amt0\",\"type\":\"uint256\"}],\"name\":\"sendTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setBoost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setBoostBacking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setBurnWDFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setDepositFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addy\",\"type\":\"address\"}],\"name\":\"setLogics\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setMatureDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setOffRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_syncLevel\",\"type\":\"uint256\"}],\"name\":\"setRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setSacrificeEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setSacrificeLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setStakeLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setSyncLevel\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amt\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeDeployerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeLogic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"stk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userRewardCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "stakeInterface", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008d5e1cd48b17d807e81dbfbe6c591cb7fab63971000000000000000000000000f3c7cecf8cbc3066f9a87b310cebe198d00479ac000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000000000000000000000000b464547205374616b696e6700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034653540000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://ea23e88dcead24c6956f1cfd82af22a7bc9bf7ed7c69d7c9229d3abe6bfa8e78"}