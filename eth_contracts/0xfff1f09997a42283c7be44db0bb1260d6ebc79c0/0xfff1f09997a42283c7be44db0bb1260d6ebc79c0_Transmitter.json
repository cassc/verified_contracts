{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\nabstract contract Ownable {\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    address public owner;\r\n\r\n    constructor() { \r\n        owner = msg.sender; \r\n    }\r\n    \r\n    modifier onlyOwner { \r\n        require(owner == msg.sender, \"onlyOwner not owner!\");\r\n        _; \r\n    }\r\n    \r\n    function transferOwnership(address new_) external onlyOwner {\r\n        address _old = owner;\r\n        owner = new_;\r\n        emit OwnershipTransferred(_old, new_);\r\n    }\r\n}\r\n\r\ninterface IMTM {\r\n    function transpondersUsed(uint256 tokenId_) external view returns (uint256);\r\n    function messageToMartians() external view returns (string memory);\r\n}\r\n\r\ninterface IMartians {\r\n    function ownerOf(uint256 tokenId_) external view returns (address);\r\n}\r\n\r\ninterface ICS {\r\n    struct Character {\r\n        uint8  race_;\r\n        uint8  renderType_;\r\n        uint16 transponderId_;\r\n        uint16 spaceCapsuleId_;\r\n        uint8  augments_;\r\n        uint16 basePoints_;\r\n        uint16 totalEquipmentBonus_;\r\n    }\r\n\r\n    function characters(uint256 tokenId_) external view returns (Character memory);\r\n}\r\n\r\ninterface IERC721 {\r\n    function ownerOf(uint256 tokenId_) external view returns (address);\r\n}\r\n\r\ninterface IERC20 {\r\n    function transferFrom(address from_, address to_, uint256 amount_) external\r\n    returns (bool);\r\n}\r\n\r\nlibrary TransmitterLib {\r\n    function onlyAllowedCharacters(bytes memory stringBytes_) \r\n    internal pure returns (bool) {\r\n        uint _strLen = stringBytes_.length;\r\n\r\n        for (uint i = 0; i < _strLen;) {\r\n            bytes1 _letterBytes1 = stringBytes_[i];\r\n            bytes1 _bottomBytes = 0x20;\r\n            \r\n            // Character Filters\r\n            if ( _letterBytes1 <  _bottomBytes ||\r\n                 _letterBytes1 >  0x7A || \r\n                 _letterBytes1 == 0x26 || \r\n                 _letterBytes1 == 0x22 || \r\n                 _letterBytes1 == 0x3C || \r\n                 _letterBytes1 == 0x3E) {\r\n                return false;\r\n            }\r\n\r\n            unchecked { ++i; }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\ncontract Transmitter is Ownable {\r\n\r\n    /*\r\n        Transmitter:\r\n\r\n        Read from MessageToMartians for the current written messages\r\n        Read from MessageToMartains for the transponder status\r\n\r\n        Read Transponder and Martian->Transponder for transponder writing\r\n\r\n        Mark Transponder / Martian->Transponder as written, and deduct X $MES\r\n    */\r\n\r\n    //////////////////////\r\n    ///// Interfaces /////\r\n    //////////////////////\r\n    IMTM public MTM = IMTM(0x8510b7b968F6664136F557b079CE79F72D5b4AAB);\r\n\r\n    IMartians public Martians = IMartians(0x680903545Eb03aC212910eF558F438DA3b867590);\r\n\r\n    ICS public CS = ICS(0xC7C40032E952F52F1ce7472913CDd8EeC89521c4);\r\n\r\n    IERC721 public Transponders = IERC721(0x9d00D9b009Ab80a18013675011c93796d89de6B4);\r\n\r\n    IERC20 public MES = IERC20(0x3C2Eb40D25a4b2B5A068a959a40d57D63Dc98B95);\r\n\r\n    ///////////////////\r\n    ///// Configs /////\r\n    ///////////////////\r\n    uint256 public costPerCharacter = 1 ether;\r\n\r\n    ////////////////////////////////////\r\n    ///// Administrative Functions /////\r\n    ////////////////////////////////////\r\n    function O_setContracts(address mtm_, address martians_, address cs_,\r\n    address transponders_, address mes_) external onlyOwner {\r\n        if (mtm_ != address(0)) MTM = IMTM(mtm_);\r\n        if (martians_ != address(0)) Martians = IMartians(martians_);\r\n        if (cs_ != address(0)) CS = ICS(cs_);\r\n        if (transponders_ != address(0)) Transponders = IERC721(transponders_);\r\n        if (mes_ != address(0)) MES = IERC20(mes_);\r\n    }\r\n    function O_setCostPerCharacter(uint256 costPerCharacter_) external onlyOwner {\r\n        costPerCharacter = costPerCharacter_;\r\n    }\r\n    \r\n    //////////////////////////////\r\n    ///// Validation Helpers /////\r\n    //////////////////////////////\r\n    function _getTransponderId(uint256 tokenId_) private view returns (uint256) {\r\n        return CS.characters(tokenId_).transponderId_;\r\n    }\r\n\r\n    function _V_transponderIsUsable(uint256 tokenId_) private view returns (bool) {\r\n        // Search local storage first\r\n        if (bytes(transponderToMessage[tokenId_]).length == 0) return true;\r\n        if (MTM.transpondersUsed(tokenId_) == 0) return true;\r\n        return false;\r\n    }\r\n\r\n    //////////////////////////\r\n    ///// Write Messages /////\r\n    //////////////////////////\r\n    uint16[] public messages;\r\n    \r\n    mapping(uint256 => string) public transponderToMessage;\r\n\r\n    event Transmission(address indexed writer, string message);\r\n\r\n    function _writeMessage(uint256 transponderId_, string memory word_) private {\r\n        // The message must be within 32 characters\r\n        bytes memory _wordBytes = bytes(word_); // Transform string to bytes\r\n        require(_wordBytes.length < 33, \r\n                \"Message exceeds 32 characters\");\r\n        \r\n        // The message must not contain illegal characters\r\n        require(TransmitterLib.onlyAllowedCharacters(_wordBytes),\r\n                \"Message contains illegal characters!\");\r\n\r\n        // Deduct $MES from user \r\n        uint256 _totalCost = _wordBytes.length * costPerCharacter;\r\n        \r\n        // NOTE: consider using SafeTransferLib\r\n        require(MES.transferFrom(msg.sender, address(this), _totalCost),\r\n                \"$MES Deduction Failed!\");\r\n\r\n        // Write to transponderToMessage connection\r\n        transponderToMessage[transponderId_] = word_;\r\n\r\n        // Write transponderId to messages -- this is used to reconstruct the message\r\n        // We store in this way to save SSTOREs compared to other methods and retain\r\n        // a mapping / connection between transponder to message AND message order.\r\n        messages.push(uint16(transponderId_)); \r\n\r\n        // Emit the Transmission event\r\n        emit Transmission(msg.sender, word_);\r\n    }\r\n\r\n    function writeWithTransponder(uint256 tokenId_, string calldata word_) external {\r\n        // Validate ownership of Transponder\r\n        require(msg.sender == Transponders.ownerOf(tokenId_), \r\n                \"Not owner!\");\r\n\r\n        // Validate that the Transponder hasn't been used before\r\n        require(_V_transponderIsUsable(tokenId_),\r\n                \"Transponder has been used!\");\r\n\r\n        _writeMessage(tokenId_, word_);\r\n    }\r\n\r\n    function writeWithCharacter(uint256 tokenId_, string calldata word_) external {\r\n        // Validate ownership of Character\r\n        require(msg.sender == Martians.ownerOf(tokenId_),\r\n                \"Not owner!\");\r\n\r\n        // Retrieve the Transponder ID from Character\r\n        uint256 _transponderId = _getTransponderId(tokenId_);\r\n\r\n        // Validate that the Transponder hasn't been used before\r\n        require(_V_transponderIsUsable(_transponderId), \r\n                \"Transponder has been used!\");\r\n\r\n        _writeMessage(_transponderId, word_);\r\n    }\r\n\r\n    /////////////////////////\r\n    ///// Read Messages /////\r\n    /////////////////////////\r\n    function readMessagePaginated(uint256 from_, uint256 to_, \r\n    bool getFirstMessage_) public view returns (string[] memory) {\r\n        \r\n        // Create the length of the message\r\n        uint256 l = to_ - from_ + 1;\r\n        \r\n        // If getFirstMessage_ is TRUE, extend length by 1 and download from MTM\r\n        if (getFirstMessage_) {\r\n            unchecked { \r\n                l++;\r\n            }\r\n        }\r\n\r\n        // Create the loop index\r\n        uint256 _index = getFirstMessage_ ? 1 : 0;\r\n\r\n        // Create the string array\r\n        string[] memory _message = new string[] (l);\r\n\r\n        // Loop through messages and populate the string array\r\n        for (uint256 i = from_; i <= to_;) {\r\n            // Store the string into _message using string encoding\r\n            _message[_index] = \r\n                string(abi.encodePacked(transponderToMessage[messages[i]]));\r\n            unchecked { ++i; ++_index; }\r\n        }\r\n\r\n        // If we have the first message, insert it in the first index\r\n        if (getFirstMessage_) _message[0] = MTM.messageToMartians();\r\n\r\n        // Return the message\r\n        return _message;\r\n    }\r\n\r\n    function readMessageAll() external view returns (string[] memory) {\r\n        return readMessagePaginated(0, (messages.length - 1), true);\r\n    }\r\n\r\n    function getMessageOrder() external view returns (uint16[] memory) {\r\n        return messages;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"writer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Transmission\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CS\",\"outputs\":[{\"internalType\":\"contract ICS\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MES\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MTM\",\"outputs\":[{\"internalType\":\"contract IMTM\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Martians\",\"outputs\":[{\"internalType\":\"contract IMartians\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"mtm_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"martians_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cs_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"transponders_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mes_\",\"type\":\"address\"}],\"name\":\"O_setContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"costPerCharacter_\",\"type\":\"uint256\"}],\"name\":\"O_setCostPerCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Transponders\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costPerCharacter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMessageOrder\",\"outputs\":[{\"internalType\":\"uint16[]\",\"name\":\"\",\"type\":\"uint16[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"messages\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"readMessageAll\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"from_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"getFirstMessage_\",\"type\":\"bool\"}],\"name\":\"readMessagePaginated\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"new_\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transponderToMessage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"word_\",\"type\":\"string\"}],\"name\":\"writeWithCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"word_\",\"type\":\"string\"}],\"name\":\"writeWithTransponder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Transmitter", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9a9a3f1fa3e7611feddc46001c55d2c27b9e02c08d283f1977b542cb461af7f6"}