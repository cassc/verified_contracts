{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/utils/MembershipDescriptor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { Base64 } from \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { IERC20Metadata } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport { IMembership } from \\\"src/types/IMembership.sol\\\";\\nimport { MembershipSVG } from \\\"src/libraries/MembershipSVG.sol\\\";\\n\\ninterface IMembershipDescriptor {\\n    /// @notice Generates the name of the membership.\\n    /// @param metadata Metadata of the membership.\\n    function name(IMembership.Metadata memory metadata) external view returns (string memory);\\n\\n    /// @notice Generates the symbol of the membership.\\n    /// @param metadata Metadata of the membership.\\n    function symbol(IMembership.Metadata memory metadata) external view returns (string memory);\\n\\n    /// @notice Generates encoded JSON metadata.\\n    /// @param start Date of the start.\\n    /// @param usage Usage of the membership.\\n    /// @param metadata Metadata of the membership.\\n    /// @param attributes Attributes of the membership.\\n    /// @return encoded JSON metadata in base64.\\n    function tokenURI(\\n        uint256 start,\\n        IMembership.Usage memory usage,\\n        IMembership.Metadata memory metadata,\\n        IMembership.Attributes memory attributes\\n    ) external view returns (string memory);\\n}\\n\\ncontract MembershipDescriptor is IMembershipDescriptor {\\n    using Strings for address;\\n    using Strings for uint32;\\n    using Strings for uint256;\\n\\n    /// @inheritdoc IMembershipDescriptor\\n    function name(IMembership.Metadata memory metadata) public view returns (string memory) {\\n        string memory name_ = IERC20Metadata(address(metadata.token)).name();\\n\\n        return string.concat(name_, \\\" Vesting\\\");\\n    }\\n\\n    /// @inheritdoc IMembershipDescriptor\\n    function symbol(IMembership.Metadata memory metadata) public view returns (string memory) {\\n        string memory symbol_ = IERC20Metadata(address(metadata.token)).symbol();\\n\\n        return string.concat(\\\"v\\\", symbol_);\\n    }\\n\\n    /// @inheritdoc IMembershipDescriptor\\n    function tokenURI(\\n        uint256 start,\\n        IMembership.Usage memory usage,\\n        IMembership.Metadata memory metadata,\\n        IMembership.Attributes memory attributes\\n    ) public view virtual returns (string memory) {\\n        string memory json = string.concat(\\n            '{\\\"attributes\\\":',\\n            _traits(start, usage, metadata, attributes),\\n            ',\\\"description\\\":\\\"',\\n            metadata.description,\\n            '\\\",\\\"name\\\":\\\"',\\n            _title(metadata),\\n            '\\\",\\\"image\\\":\\\"',\\n            _image(usage, metadata),\\n            '\\\"}'\\n        );\\n\\n        return string.concat(\\\"data:application/json;base64,\\\", Base64.encode(bytes(json)));\\n    }\\n\\n    /// @notice Generates title for given membership.\\n    /// @param metadata Metadata of the membership.\\n    function _title(IMembership.Metadata memory metadata) internal view returns (string memory) {\\n        string memory symbol_ = IERC20Metadata(address(metadata.token)).symbol();\\n\\n        return string.concat(\\\"Vesting of \\\", symbol_);\\n    }\\n\\n    /// @notice Generates encoded image.\\n    /// @param usage Usage of the membership.\\n    /// @param metadata Metadata of the membership.\\n    /// @return encoded image.\\n    function _image(IMembership.Usage memory usage, IMembership.Metadata memory metadata)\\n        internal\\n        view\\n        returns (string memory)\\n    {\\n        uint256 denominator = 10 ** IERC20Metadata(address(metadata.token)).decimals();\\n\\n        string memory svg = MembershipSVG.generate(\\n            MembershipSVG.Params({\\n                color: metadata.color,\\n                title: name(metadata),\\n                max: usage.max / denominator,\\n                current: usage.current / denominator\\n            })\\n        );\\n\\n        return string.concat(\\\"data:image/svg+xml;base64,\\\", Base64.encode(bytes(svg)));\\n    }\\n\\n    /// @notice Generates traits metadata.\\n    /// @param start Date of the start.\\n    /// @param usage Usage of the membership.\\n    /// @param metadata Metadata of the membership.\\n    /// @return encoded image.\\n    function _traits(\\n        uint256 start,\\n        IMembership.Usage memory usage,\\n        IMembership.Metadata memory metadata,\\n        IMembership.Attributes memory attributes\\n    ) internal view returns (string memory) {\\n        uint256 denominator = 10 ** IERC20Metadata(address(metadata.token)).decimals();\\n\\n        string memory traits0 = string.concat(\\n            '[{\\\"trait_type\\\":\\\"Usage\\\",\\\"display_type\\\":\\\"boost_percentage\\\",\\\"value\\\":',\\n            (usage.max > 0 ? usage.current * 100 / usage.max : 0).toString(),\\n            '},{\\\"trait_type\\\":\\\"Vested tokens\\\",\\\"display_type\\\":\\\"number\\\",\\\"value\\\":',\\n            Strings.toString(usage.max / denominator),\\n            '},{\\\"trait_type\\\":\\\"Claimed tokens\\\",\\\"display_type\\\":\\\"number\\\",\\\"value\\\":',\\n            Strings.toString(usage.current / denominator),\\n            '},{\\\"trait_type\\\":\\\"TGE\\\",\\\"display_type\\\":\\\"boost_percentage\\\",\\\"value\\\":',\\n            (attributes.tgeDenominator > 0 ? attributes.tgeNumerator * 100 / attributes.tgeDenominator : 0).toString(),\\n            '},{\\\"trait_type\\\":\\\"Vesting start\\\",\\\"display_type\\\":\\\"date\\\",\\\"value\\\":',\\n            start.toString(),\\n            '},{\\\"trait_type\\\":\\\"Vesting end\\\",\\\"display_type\\\":\\\"date\\\",\\\"value\\\":',\\n            (start + attributes.cliffDuration + (attributes.vestingPeriodCount * attributes.vestingPeriodDuration))\\n                .toString()\\n        );\\n\\n        /// @dev split to avoid the stack too deep error\\n        string memory traits1 = string.concat(\\n            '},{\\\"trait_type\\\":\\\"Cliff duration\\\",\\\"value\\\":\\\"',\\n            _getCliffDurationText(attributes.cliffDuration),\\n            '\\\"},{\\\"trait_type\\\":\\\"Cliff unlock\\\",\\\"display_type\\\":\\\"boost_percentage\\\",\\\"value\\\":',\\n            (attributes.cliffDenominator > 0 ? attributes.cliffNumerator * 100 / attributes.cliffDenominator : 0)\\n                .toString(),\\n            '},{\\\"trait_type\\\":\\\"Unlock frequency\\\",\\\"value\\\":\\\"',\\n            _getUnlockFrequencyText(attributes.vestingPeriodDuration),\\n            '\\\"},{\\\"trait_type\\\":\\\"Vested token name\\\",\\\"value\\\":\\\"',\\n            IERC20Metadata(address(metadata.token)).name(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Vested token symbol\\\",\\\"value\\\":\\\"',\\n            IERC20Metadata(address(metadata.token)).symbol(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Vested token address\\\",\\\"value\\\":\\\"',\\n            Strings.toHexString(uint160(metadata.token), 20),\\n            '\\\"}]'\\n        );\\n\\n        return string.concat(traits0, traits1);\\n    }\\n\\n    /// @notice Convert the cliff duration to human-readable value.\\n    /// @param value Value of the cliff duration.\\n    /// @return Human-readable value.\\n    function _getCliffDurationText(uint256 value) internal pure virtual returns (string memory) {\\n        if (value == 0) return \\\"no cliff\\\";\\n\\n        (uint256 period, string memory label) = _humanize(value);\\n\\n        return string.concat(period.toString(), \\\" \\\", label);\\n    }\\n\\n    /// @notice Convert the unlock frequency to human-readable value.\\n    /// @param value Value of the unlock frequency.\\n    /// @return Human-readable value.\\n    function _getUnlockFrequencyText(uint256 value) internal pure virtual returns (string memory) {\\n        if (value == 0) return \\\"none\\\";\\n\\n        (uint256 period, string memory label) = _humanize(value);\\n\\n        if (period == 1) return string.concat(\\\"every \\\", label);\\n\\n        return string.concat(\\\"every \\\", period.toString(), \\\" \\\", label);\\n    }\\n\\n    /// @notice Convert the period to a human-readable value.\\n    /// @param value Period to humanize.\\n    /// @return Period in as text value.\\n    function _humanize(uint256 value) internal pure virtual returns (uint256, string memory) {\\n        if (value < 1 hours) return _pluralize(value / 1 minutes, \\\"minute\\\", \\\"minutes\\\");\\n\\n        if (value < 1 days) return _pluralize(value / 1 hours, \\\"hour\\\", \\\"hours\\\");\\n\\n        return _pluralize(value / 1 days, \\\"day\\\", \\\"days\\\");\\n    }\\n\\n    /// @notice Returns a label based on the given value.\\n    /// @param value The value on which the selection of the label is based.\\n    /// @param singular Singular label.\\n    /// @param plural Plural label.\\n    /// @return Generated label.\\n    function _pluralize(uint256 value, string memory singular, string memory plural)\\n        internal\\n        pure\\n        virtual\\n        returns (uint256, string memory)\\n    {\\n        return (value, value == 1 ? singular : plural);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/types/IMembership.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { IERC2981 } from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport { IERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\nimport { IMembershipDescriptor } from \\\"src/utils/MembershipDescriptor.sol\\\";\\n\\n/**\\n * @title Membership\\n * @author\\n * @notice\\n */\\ninterface IMembership is IERC2981, IERC721, IERC721Enumerable {\\n    struct Usage {\\n        uint256 max;\\n        uint256 current;\\n    }\\n\\n    struct Metadata {\\n        address token;\\n        string color;\\n        string description;\\n    }\\n\\n    struct Attributes {\\n        uint256 price;\\n        uint256 allocation;\\n        uint256 claimableBackUnit;\\n        uint32 tgeNumerator;\\n        uint32 tgeDenominator;\\n        uint32 cliffDuration;\\n        uint32 cliffNumerator;\\n        uint32 cliffDenominator;\\n        uint32 vestingPeriodCount;\\n        uint32 vestingPeriodDuration;\\n    }\\n\\n    /// @notice Creates new membership and transfers it to given owner.\\n    /// @param owner_ Address of new address owner.\\n    /// @param roundId Id of the assigned round.\\n    /// @param maxUsage Max usage of the new membership.\\n    /// @param attributes Attributes attached to the membership.\\n    function mint(address owner_, uint256 roundId, uint256 currentUsage, uint256 maxUsage, Attributes memory attributes)\\n        external\\n        returns (uint256);\\n\\n    /// @notice Contract state initialization.\\n    /// @param presale_ Address of the presale.\\n    /// @param metadata Metadata of the membership.\\n    /// @param descriptor Address to external descriptor.\\n    function initialize(address presale_, Metadata memory metadata, IMembershipDescriptor descriptor) external;\\n\\n    function extend(uint256 publicId, uint256 amount) external returns (uint256 newId);\\n    function reduce(uint256 publicId, uint256 amount) external returns (uint256 newId);\\n    function consume(uint256 publicId, uint256 amount) external returns (uint256 newId);\\n\\n    /// @notice Returns the start timestamp.\\n    function getStart() external view returns (uint256);\\n\\n    /// @notice Returns the usage by given membership id.\\n    function getUsage(uint256 membershipId) external view returns (Usage memory);\\n\\n    /// @notice Returns the round by given membership id.\\n    function getRoundId(uint256 membershipId) external view returns (uint256);\\n\\n    /// @notice Returns the attributes by given membership id.\\n    function getAttributes(uint256 membershipId) external view returns (Attributes memory);\\n\\n    /// @notice Returns releasable amount in the given timestamp.\\n    /// @param membershipId Id of the membership.\\n    function unlocked(uint256 membershipId) external view returns (uint256);\\n    function unlocked(uint256 start, uint256 allocation, IMembership.Attributes memory attributes)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/libraries/MembershipSVG.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.23;\\n\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/**\\n * @title MembershipSVG\\n * @notice A library for generating the membership SVG.\\n */\\nlibrary MembershipSVG {\\n    using Strings for uint256;\\n\\n    struct Params {\\n        string color;\\n        string title;\\n        uint256 max;\\n        uint256 current;\\n    }\\n\\n    string internal constant ELEMENT_OPENING =\\n        '<svg version=\\\"1.1\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\" x=\\\"0px\\\" y=\\\"0px\\\" viewBox=\\\"0 0 1500 1500\\\" style=\\\"enable-background:new 0 0 1500 1500;\\\" xml:space=\\\"preserve\\\">';\\n\\n    string internal constant ELEMENT_CLOSING = \\\"</svg>\\\";\\n\\n    string internal constant BACKGROUND =\\n        '<rect fill=\\\"#171D24\\\" width=\\\"1500\\\" height=\\\"1500\\\"/><path fill=\\\"#20262F\\\" d=\\\"M479.2,371.4h-51.6v31.2l-31.2-31.2h-31.5l62.7,62.7v547.2L217.1,771v-51.2l203.3,203.3v-31.5l-182-182v-51.2l182,182V809L49.2,437.8v31.6l94.6,94.6v51.2l-94.6-94.6v31.5l94.6,94.6v51.2l-57.7-57.7v31.5l57.7,57.7v51.3L49.2,686v31.5l94.6,94.6v51.2l-94.6-94.6v31.5l323,323.1H321L49.2,851.4v31.5l94.6,94.6v51.2l94.6,94.7v31.5l-94.6-94.6v51.2l-94.6-94.6v31.5l234.4,234.4h31.5l-25.5-25.5h133.9l3.9,3.9l21.7,21.7h31.5l-41.3-41.3l25.6-25.6l66.9,66.9h31.3l-82.6-82.6l25.6-25.6L614.4,1283h31.5l-124-124V776.9l122.8,122.8l66.4-66.4V603.6L479.2,371.4z M282.6,950.8l144.9,144.9v27.5h-23.7L282.6,1002V950.8L282.6,950.8zM427.6,1013.1v51.2L238.4,875v-51.2L427.6,1013.1z M522,611.4l65.5,65.5v51.2L522,662.5V611.4z M552.2,558.8l131,130.8v51.2L552.2,610V558.8z M522,445.9l94.6,94.6v51.2L522,497.1V445.9z M232.6,1282.9L49.2,1099.5v31.5l94.6,94.6l57.3,57.3H232.6zM529.2,1114.7l168,168h14v-17.5l-182-182V1114.7z M711.2,1131.4v-31.5l-182-182v31.5L711.2,1131.4z M659,1161.8v-31.5l-129.7-129.7v31.5L659,1161.8z M529.2,866.6l182,182v-31.5l-182-182V866.6z M65.5,371.4H49.2v15.2l371.2,371.2v-31.6L65.5,371.4z M118.3,1282.9l31.6,0.1L49.2,1182.3v31.5L118.3,1282.9L118.3,1282.9z M711.2,469.7v-31.5l-66.8-66.8H613L711.2,469.7L711.2,469.7z M616.6,426.3l-55-55h-31.5l86.4,86.4l94.6,94.6v-31.5L616.6,426.3z M711.2,371.4h-15.6l15.6,15.6V371.4z M230.9,371.4h-31.5l220.9,220.9v-31.5L230.9,371.4z M313.6,371.4h-31.5l138.3,138.2v-31.5L313.6,371.4z M233.8,488.4L420.4,675v-31.5L265.3,488.4H233.8z\\\"/>';\\n\\n    string internal constant LOGO =\\n        '<polygon style=\\\"fill:none;stroke-miterlimit:10;\\\" points=\\\"194.9,791.3 194.9,990.5 368.1,1088 539.3,990.5 539.3,791.3 368.1,691.8 \\\"/><polyline style=\\\"fill:none;stroke-miterlimit:10;\\\" points=\\\"458.6,1066.1 565.1,1005.5 565.1,776.6 553.6,770 \\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"279.2\\\" y1=\\\"954\\\" x2=\\\"294.4\\\" y2=\\\"938.8\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"257.5\\\" y1=\\\"991.7\\\" x2=\\\"300.3\\\" y2=\\\"948.9\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"235.7\\\" y1=\\\"1029.4\\\" x2=\\\"306.1\\\" y2=\\\"959\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"224\\\" y1=\\\"1057\\\" x2=\\\"311.9\\\" y2=\\\"969.1\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"239.9\\\" y1=\\\"1057\\\" x2=\\\"317.8\\\" y2=\\\"979.2\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"255.9\\\" y1=\\\"1057\\\" x2=\\\"323.6\\\" y2=\\\"989.3\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"271.8\\\" y1=\\\"1057\\\" x2=\\\"329.4\\\" y2=\\\"999.4\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"287.7\\\" y1=\\\"1057\\\" x2=\\\"335.3\\\" y2=\\\"1009.5\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"303.7\\\" y1=\\\"1057\\\" x2=\\\"341.1\\\" y2=\\\"1019.6\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"319.6\\\" y1=\\\"1057\\\" x2=\\\"346.9\\\" y2=\\\"1029.7\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"335.5\\\" y1=\\\"1057\\\" x2=\\\"352.8\\\" y2=\\\"1039.8\\\"/><line style=\\\"fill:none;stroke-miterlimit:10;\\\" x1=\\\"358.6\\\" y1=\\\"1049.9\\\" x2=\\\"351.5\\\" y2=\\\"1057\\\"/>';\\n\\n    string internal constant DECORATORS =\\n        '<path style=\\\"fill:none;stroke:#383838;stroke-width:2;stroke-miterlimit:10;stroke-dasharray:4.0182,10.0455;\\\" d=\\\"M799.2,1357c-13.1-21.2-20.8-47.4-20.8-75.6c0-20.8,4.2-40.4,11.6-57.8\\\"/><polygon style=\\\"fill:#FFFFFF;\\\" points=\\\"92.9,78.2 72.6,97.5 72.6,139.5 81.4,148.2 135.1,148.2 144.8,158 144.8,254.2 138.5,247.8 138.5,173.8 133,179.3 133,246.1 133,261.5 212.7,341.3 267.8,341.3 338,411.7 262.6,411.7 297.7,446.8 278.9,446.8 233.2,401.1 196.1,401.1 62.8,267.8 62.8,211.9 73.4,201.5 115.6,201.5 102,187.9 63.4,187.9 63.4,94.3 81,78.2 \\\"/><polyline style=\\\"fill:none;stroke:#FFFFFF;stroke-miterlimit:10;\\\" points=\\\"280.3,446.3 716.9,446.3 755.4,407.8 973.2,407.8 \\\"/><circle style=\\\"fill:none;stroke:#FFFFFF;stroke-miterlimit:10;\\\" cx=\\\"978\\\" cy=\\\"407.8\\\" r=\\\"4.8\\\"/><circle style=\\\"fill:none;stroke:#FFFFFF;stroke-miterlimit:10;\\\" cx=\\\"674.8\\\" cy=\\\"65.7\\\" r=\\\"4.8\\\"/><polyline style=\\\"fill:none;stroke:#FFFFFF;stroke-miterlimit:10;\\\" points=\\\"69.8,100.3 105.2,66.4 280.3,66.4 305.4,91.5 649,91.5 671.6,69 \\\"/><path style=\\\"fill:#FFFFFF;\\\" d=\\\"M1408.7,290.1L1209.4,90.8l-28.5-0.2L1380.3,290h28.4L1408.7,290.1L1408.7,290.1z M1387.1,299.7h-12.2l-186.8-186.8h-34.7L1110.5,70h-17.7l32.9,32.9h-70.5l65.7,66h51.5l74.7,74.7V258l135.1,135.1h55.5l13.6-13.6V364L1387.1,299.7z\\\"/>';\\n\\n    /// @notice Generate the svg markup.\\n    /// @param params Params with the svg configuration.\\n    function generate(Params memory params) internal pure returns (string memory) {\\n        uint256 percentage = params.max > 0 ? params.current * 100 / params.max : 0;\\n\\n        uint256 progress = 10000 - (percentage * 100);\\n\\n        return string.concat(\\n            ELEMENT_OPENING,\\n            BACKGROUND,\\n            cards(params.color, 100 - percentage),\\n            elements(params.color, progress),\\n            DECORATORS,\\n            labels(params.title, params.max, params.current),\\n            ELEMENT_CLOSING\\n        );\\n    }\\n\\n    /// @notice Generate the cards markup.\\n    /// @param color Color of the elements.\\n    /// @param percentage Percentage value to print.\\n    function cards(string memory color, uint256 percentage) internal pure returns (string memory) {\\n        return string.concat(\\n            string.concat('<g fill=\\\"', color, '\\\">'),\\n            '<path d=\\\"M1343.7,522.3v-10.9l-24.9-24.9h-13.6l-3.3,3.1h-195.7l-18.6,18.6h-12.8l-3.5,3.1h-87.6l-2.9-2.9h-35.9l-2.9,2.9H829l-3.1-3.1h-9.1l-24.2,24.2v11.2l3,3v64.3l-3.1-2.5v4.9l3.1,2.6v6.4l-3.1-2.5v4.9l3.1,2.6v6.4l-3.1-2.5v4.9l3.1,2.6v61l-3.1-5.6V715l24.3,24.3h24.9l-3.3-3.1h175.8l-3.1,3.1h11.1l22.5,22.5h6.5l-3.3-3.1h248.4l9.8-9.8h4.4l13.1-13.1v-78.6l20.2-20.2v-23.9l-3.1-3.3v-84L1343.7,522.3z M1295.2,756.3H1047l-22.5-22.5H819.2l-21-21v-178l21-21h270.7l21.7-21.7h204.7l21.6,21.6v121.1l-20.2,20.2v78.6L1295.2,756.3z\\\"/>',\\n            '<path d=\\\"M1343.7,848.9V838l-24.9-24.9h-13.6l-3.3,3.1h-195.7l-18.6,18.6h-12.8l-3.5,3.1h-87.6l-2.9-2.9h-35.9l-2.9,2.9H829l-3.1-3.1h-9.1L792.6,859v11.2l3,3v64.3l-3.1-2.5v4.9l3.1,2.6v6.4l-3.1-2.5v4.9l3.1,2.6v6.4l-3.1-2.5v4.9l3.1,2.6v61l-3.1-5.6v20.9l24.3,24.3h24.9l-3.3-3.1h175.8l-3.1,3.1h11.1l22.5,22.5h6.5l-3.3-3.1h248.4l9.8-9.8h4.4l13.1-13.1v-78.6l20.2-20.2v-23.9l-3.1-3.3v-84L1343.7,848.9z M1295.2,1082.9H1047l-22.5-22.5H819.2l-21-21v-178l21-21h270.7l21.7-21.7h204.7l21.6,21.6v121.1l-20.2,20.2v78.6L1295.2,1082.9z\\\"/>',\\n            '<path d=\\\"M1337.8,1279.1L1337.8,1279.1c-2,0-3.7-1.6-3.7-3.7l0,0c0-2,1.6-3.7,3.7-3.7l0,0c2,0,3.7,1.6,3.7,3.7l0,0C1341.5,1277.5,1339.8,1279.1,1337.8,1279.1z\\\"/>',\\n            '<text transform=\\\"matrix(1 0 0 1 1066.4193 1071.1001)\\\" style=\\\"font-size:28px; text-transform:uppercase; font-family:Futura,Arial,monospace; font-weight: 900\\\">claimed</text>',\\n            '<text transform=\\\"matrix(1 0 0 1 1057.7942 744.2)\\\" style=\\\"font-size:28px; text-transform:uppercase; font-family:Futura,Arial,monospace; font-weight: 900\\\">purchased</text>',\\n            string.concat(\\n                '<text transform=\\\"matrix(1 0 0 1 1066.1456 1290.5452)\\\" style=\\\"font-size:28px; text-transform:uppercase; font-family:Futura,Arial,monospace; font-weight: 900\\\">',\\n                percentage.toString(),\\n                \\\"% left</text>\\\"\\n            ),\\n            \\\"</g>\\\"\\n        );\\n    }\\n\\n    /// @notice Generate the elements markup.\\n    /// @param color Color of the elements.\\n    /// @param progress Progress value to print.\\n    function elements(string memory color, uint256 progress) internal pure returns (string memory) {\\n        return string.concat(\\n            string.concat('<g stroke=\\\"', color, '\\\">'),\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" d=\\\"M999.4,1354.6c-21.1,25.2-52.8,41.1-88.2,41.1c-63.5,0-115.1-51.6-115.1-115.1s51.6-115.1,115.1-115.1c8,0,15.7,0.8,23.2,2.4\\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" d=\\\"M954.2,1396.8c-57.4,21.3-123.2-2.8-152.5-58.4c-4-7.6-7.1-15.3-9.4-23.2\\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" d=\\\"M991,1186c11.9,10,22,22.4,29.8,36.9c14.7,28,17.7,59.1,10.6,87.7\\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" d=\\\"M1337.8,1285.2L1337.8,1285.2c-5.4,0-9.8-4.4-9.8-9.8l0,0c0-5.4,4.4-9.8,9.8-9.8l0,0c5.4,0,9.8,4.4,9.8,9.8l0,0C1347.6,1280.8,1343.2,1285.2,1337.8,1285.2z\\\"/>',\\n            '<polyline style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;\\\" points=\\\"991,1363.6 1022.7,1395.2 1305.8,1395.2 1337.8,1363.2 1337.8,1275.4 \\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;stroke-dasharray:6.1193,6.1193;\\\" d=\\\"M943.5,1170.1c47.9,13.9,82.9,58.1,82.9,110.5c0,26-8.6,49.9-23.1,69.2\\\"/>',\\n            '<path style=\\\"fill:none;stroke-width:2;stroke-miterlimit:10;stroke-dasharray:6.0368,6.0368;\\\" d=\\\"M861.9,1167.2c22.5-9.8,46.7-12.4,69.6-8.6\\\"/>',\\n            '<circle cx=\\\"911.3\\\" cy=\\\"1280.6\\\" r=\\\"84.8\\\" style=\\\"fill:none;stroke:#393E4A;stroke-width:28;stroke-miterlimit:10;\\\"/>',\\n            string.concat(\\n                '<circle cx=\\\"911.3\\\" cy=\\\"1280.6\\\" r=\\\"84.8\\\" style=\\\"fill:none;stroke-width:28;stroke-miterlimit:10;\\\" pathLength=\\\"10000\\\" stroke-dasharray=\\\"10000\\\" stroke-dashoffset=\\\"',\\n                progress.toString(),\\n                '\\\" transform=\\\"rotate(-90)\\\" transform-origin=\\\"911.3 1280.6\\\"/>'\\n            ),\\n            LOGO,\\n            \\\"</g>\\\"\\n        );\\n    }\\n\\n    /// @notice Generate the labels markup.\\n    /// @param title Label to print.\\n    /// @param max Value to print.\\n    /// @param current Value to print.\\n    function labels(string memory title, uint256 max, uint256 current) internal pure returns (string memory) {\\n        return string.concat(\\n            string.concat(\\n                '<text transform=\\\"matrix(1 0 0 1 259.3455 289.9893)\\\" style=\\\"fill:#FFFFFF; font-family:Futura,Arial,monospace; font-weight: 900;\\\" font-size=\\\"65px\\\">',\\n                title,\\n                \\\"</text>\\\"\\n            ),\\n            string.concat(\\n                '<text transform=\\\"matrix(1 0 0 1 872.9004 644.1)\\\" style=\\\"fill:#FFFFFF; font-family:Futura,Arial,monospace; font-weight: 900;\\\" font-size=\\\"50px\\\">',\\n                max.toString(),\\n                \\\"</text>\\\"\\n            ),\\n            string.concat(\\n                '<text transform=\\\"matrix(1 0 0 1 872.9005 966.0894)\\\" style=\\\"fill:#FFFFFF; font-family:Futura,Arial,monospace; font-weight: 900;\\\" font-size=\\\"50px\\\">',\\n                current.toString(),\\n                \\\"</text>\\\"\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC2981.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"delegatecall/=lib/delegatecall/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"solidity-stringutils/=lib/solidity-stringutils/src/\",\r\n      \"solady/=lib/solady/src/\",\r\n      \"openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IMembership.Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IMembership.Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"internalType\":\"struct IMembership.Usage\",\"name\":\"usage\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"color\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct IMembership.Metadata\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocation\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimableBackUnit\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"tgeNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"tgeDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDuration\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffNumerator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"cliffDenominator\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestingPeriodCount\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"vestingPeriodDuration\",\"type\":\"uint32\"}],\"internalType\":\"struct IMembership.Attributes\",\"name\":\"attributes\",\"type\":\"tuple\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "MembershipDescriptor", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}