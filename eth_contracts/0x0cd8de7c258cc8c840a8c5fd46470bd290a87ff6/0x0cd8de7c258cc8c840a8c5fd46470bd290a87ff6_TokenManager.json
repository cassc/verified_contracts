{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/IERC20Token.sol\\\";\\nimport \\\"./interfaces/ITokenManager.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\nimport \\\"./TokenPairs.sol\\\";\\nimport \\\"./TypeTokens.sol\\\";\\n\\n/**\\n * @title TokenManager\\n * @notice This contract is responsible for managing tokens and pairs,\\n *          and it stores all of the settings related to them.\\n */\\ncontract TokenManager is AccessControl, TypeTokens, TokenPairs, ITokenManager {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    bytes32 public constant GOVERNOR_ROLE = keccak256(\\\"GOVERNOR_ROLE\\\");\\n    bytes32 public constant TIMELOCK_ROLE = keccak256(\\\"TIMELOCK_ROLE\\\");\\n\\n    /**\\n     * @notice The denominator of reserve ratio and threshold that has 18 decimals\\n     */\\n    uint256 public constant RESERVE_RATIO_BASE = 1e18;\\n    /**\\n     * @notice The denominator of swapping fee that has 6 decimals\\n     */\\n    uint256 public constant SWAP_FEE_BASE = 1e6;\\n\\n    /**\\n     * @notice Maximum price tolerances\\n     * @dev Address of the token => max price tolerance\\n     */\\n    mapping(address => uint256) internal _maxPriceTolerance;\\n    /**\\n     * @notice Minimum price tolerances\\n     * @dev Address of the token => min price tolerance\\n     */\\n    mapping(address => uint256) internal _minPriceTolerance;\\n    /**\\n     * @notice Maps the pair hash to `PairConfig` that contains two token addresses, fee numerators and reserve ratio thresholds\\n     */\\n    mapping(bytes32 => PairConfig) internal _pair;\\n\\n    IERC20Token public usd1;\\n\\n    /**\\n     * @notice Emitted when the setting of the pair is updated\\n     */\\n    event PairUpdated(\\n        bytes32 indexed pairHash,\\n        address indexed baseToken,\\n        address indexed quoteToken,\\n        uint24 buyFee,\\n        uint232 buyReserveRatioThreshold,\\n        uint24 sellFee,\\n        uint232 sellReserveRatioThreshold\\n    );\\n\\n    error NotTimelock(address caller);\\n\\n    /**\\n     * @notice Reverts if `msg.sender` does not have `TIMELOCK_ROLE`\\n     */\\n    modifier onlyTimelock() {\\n        if (!hasRole(TIMELOCK_ROLE, msg.sender)) {\\n            revert NotTimelock(msg.sender);\\n        }\\n        _;\\n    }\\n\\n    constructor(\\n        address governor_,\\n        address timelock_,\\n        address usd1_,\\n        TokenConfig[] memory tokens_,\\n        PairConfig[] memory pairs_\\n    ) {\\n        _setRoleAdmin(GOVERNOR_ROLE, GOVERNOR_ROLE);\\n        _setRoleAdmin(TIMELOCK_ROLE, GOVERNOR_ROLE);\\n\\n        _grantRole(GOVERNOR_ROLE, governor_);\\n        _grantRole(TIMELOCK_ROLE, timelock_);\\n\\n        _setUSD1(usd1_);\\n        _addTokensAndPairs(tokens_, pairs_);\\n    }\\n\\n    /**\\n     * @notice Updates the address of `usd1` to `token`, and adds it to the pool with stable type.\\n     *          Before calling this function, the pairs associated with the old token must be removed.\\n     */\\n    function setUSD1(address token) external onlyTimelock {\\n        _setUSD1(token);\\n    }\\n\\n    /**\\n     * @notice Updates the price tolerance range of USD1/`token`\\n     * @param token Address of the quote currency\\n     * @param minPrice Min price tolerance\\n     * @param maxPrice Max price tolerance\\n     */\\n    function setMinMaxPriceTolerance(address token, uint256 minPrice, uint256 maxPrice) external onlyTimelock {\\n        _setMinMaxPriceTolerance(token, minPrice, maxPrice);\\n    }\\n\\n    /**\\n     * @notice Adds the tokens and the pairs to the pool.\\n     *         The input arrays can be empty, and the update is performed only\\n     *         when either `tokens` or `pairs` array has values.\\n     * @param tokens The settings of the tokens to be added\\n     * @param pairs The settings of the pairs to be added\\n     */\\n    function addTokensAndPairs(TokenConfig[] calldata tokens, PairConfig[] calldata pairs) external onlyTimelock {\\n        _addTokensAndPairs(tokens, pairs);\\n    }\\n\\n    /**\\n     * @notice Removes the tokens and the pairs from the pool.\\n     *          The input arrays can be empty, and the update is performed only\\n     *          when either `tokens`, or `pairTokensX` and `pairTokensY` have values.\\n     *          Since `_removeToken` checks there must be no pairs associated with the token,\\n     *          removes the pairs before the tokens.\\n     * @param tokens The addresses of the tokens to be removed\\n     * @param pairTokensX The addresses of the base tokens or quote tokens to be removed\\n     * @param pairTokensY The addresses of the base tokens or quote tokens to be removed.\\n     *         The length of `pairTokensX` and `pairTokensY` must be the same.\\n     */\\n    function removeTokensAndPairs(\\n        address[] calldata tokens,\\n        address[] calldata pairTokensX,\\n        address[] calldata pairTokensY\\n    ) external onlyTimelock {\\n        _require(pairTokensX.length == pairTokensY.length, Errors.ARRAY_LENGTH_MISMATCHED);\\n\\n        uint256 tokenCount = tokens.length;\\n        uint256 pairCount = pairTokensX.length;\\n\\n        for (uint256 i; i < pairCount; i++) {\\n            _removePair(pairTokensX[i], pairTokensY[i]);\\n        }\\n\\n        for (uint256 i; i < tokenCount; i++) {\\n            _removeToken(tokens[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the settings of the pairs,\\n     *          reverts if any pair of the array is invalid or not in the pool.\\n     * @param pairs The settings of the pairs\\n     */\\n    function updatePairs(PairConfig[] calldata pairs) external onlyTimelock {\\n        uint256 pairCount = pairs.length;\\n\\n        for (uint256 i; i < pairCount; i++) {\\n            _updatePair(pairs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Gets an array of pair settings, supporting pagination.\\n     *          Reverts if the index plus the count is out of bounds,\\n     *          or there is an overflow in the sum of index and count.\\n     * @param index The offset of the list\\n     * @param count The number of pairs to retrieve\\n     * @return An array of `PairConfig`\\n     */\\n    function listPairsByIndexAndCount(uint256 index, uint256 count) external view returns (PairConfig[] memory) {\\n        uint256 pairCount = _pairHashes.length();\\n\\n        _require(\\n            (index == 0 || index < pairCount) && index + count <= pairCount,\\n            Errors.INPUT_OUT_OF_BOUNDS\\n        );\\n\\n        PairConfig[] memory pairs = new PairConfig[](count);\\n\\n        for (uint256 i; i < count; i++) {\\n            pairs[i] = _pair[_pairHashes.at(index + i)];\\n        }\\n\\n        return pairs;\\n    }\\n\\n    /**\\n     * @notice Gets the price tolerance of `token`\\n     */\\n    function getPriceTolerance(address token) public view returns (uint256 minPrice, uint256 maxPrice) {\\n        minPrice = _minPriceTolerance[token];\\n        maxPrice = _maxPriceTolerance[token];\\n    }\\n\\n    /**\\n     * @notice Gets the token type of `token`\\n     */\\n    function getTokenType(address token) public view returns (TokenType) {\\n        return TokenType(_tokenType[token]);\\n    }\\n\\n    /**\\n     * @notice Gets the pair setting by two token addresses, reverts if the pair does not exist.\\n     * @param tokenX Address of base currency or quote currency\\n     * @param tokenY Address of base currency or quote currency\\n     * @return pair The setting of the pair\\n     */\\n    function getPair(address tokenX, address tokenY) public view returns (PairConfig memory pair) {\\n        (tokenX, tokenY) = _sortTokens(tokenX, tokenY);\\n\\n        return _pair[_checkPairExists(tokenX, tokenY)];\\n    }\\n\\n    /**\\n     * @notice Gets the pair setting by `index`\\n     */\\n    function pairByIndex(uint256 index) public view returns (PairConfig memory pair) {\\n        return _pair[_pairHashes.at(index)];\\n    }\\n\\n    function _setUSD1(address token) internal {\\n        address oldToken = address(usd1);\\n        if (oldToken != address(0)) {\\n            _removeToken(oldToken);\\n        }\\n\\n        _addToken(token, uint8(TokenType.Stable));\\n        usd1 = IERC20Token(token);\\n    }\\n\\n    function _setMinMaxPriceTolerance(address token, uint256 minPrice, uint256 maxPrice) internal {\\n        _require(maxPrice != 0, Errors.MAX_PRICE_INVALID);\\n        _require(minPrice != 0 && minPrice <= maxPrice, Errors.MIN_PRICE_INVALID);\\n        _maxPriceTolerance[token] = maxPrice;\\n        _minPriceTolerance[token] = minPrice;\\n    }\\n\\n    /**\\n     * @notice Adds the tokens and the pairs to the pool.\\n     *          Since `_addPair` checks whether the token is already in the pool,\\n     *          adds the tokens before the pairs.\\n     */\\n    function _addTokensAndPairs(TokenConfig[] memory tokens, PairConfig[] memory pairs) internal {\\n        uint256 tokenCount = tokens.length;\\n        uint256 pairCount = pairs.length;\\n\\n        for (uint256 i; i < tokenCount; i++) {\\n            TokenConfig memory token = tokens[i];\\n            _addToken(token.token, uint8(token.tokenType));\\n            _setMinMaxPriceTolerance(token.token, token.minPrice, token.maxPrice);\\n        }\\n\\n        for (uint256 i; i < pairCount; i++) {\\n            _addPair(pairs[i]);\\n        }\\n    }\\n\\n    /**\\n     * @notice Removes the token from the pool.\\n     *          The pairs associated with the token must be removed first.\\n     * @param token Address of the token\\n     */\\n    function _removeToken(address token) internal override {\\n        _require(pairTokenLength(token) == 0, Errors.PAIRS_MUST_REMOVED);\\n\\n        super._removeToken(token);\\n\\n        if (token == address(usd1)) {\\n            usd1 = IERC20Token(address(0x0));\\n        }\\n    }\\n\\n    /**\\n     * @notice Adds the pair to the pool.\\n     *          Reverts if the setting is invalid, two tokens are not in the pool,\\n     *          or the pair is already in the pool.\\n     * @param pair The setting of the pair\\n     */\\n    function _addPair(PairConfig memory pair) internal {\\n        _checkPairParameters(pair);\\n\\n        (address tokenX, address tokenY) = _sortTokens(pair.baseToken, pair.quoteToken);\\n        bytes32 pairHash = _addPairByTokens(tokenX, tokenY);\\n\\n        _pair[pairHash] = pair;\\n\\n        emit PairUpdated(\\n            pairHash,\\n            pair.baseToken,\\n            pair.quoteToken,\\n            pair.buyFee,\\n            pair.buyReserveRatioThreshold,\\n            pair.sellFee,\\n            pair.sellReserveRatioThreshold\\n        );\\n    }\\n\\n    /**\\n     * @notice Updates the pair setting.\\n     *          Reverts if the setting is invalid, two tokens are not in the pool,\\n     *          or the pair is not in the pool.\\n     * @param pair The setting of the pair\\n     */\\n    function _updatePair(PairConfig memory pair) internal {\\n        _checkPairParameters(pair);\\n\\n        (address tokenX, address tokenY) = _sortTokens(pair.baseToken, pair.quoteToken);\\n        bytes32 pairHash = _checkPairExists(tokenX, tokenY);\\n\\n        _pair[pairHash] = pair;\\n\\n        emit PairUpdated(\\n            pairHash,\\n            pair.baseToken,\\n            pair.quoteToken,\\n            pair.buyFee,\\n            pair.buyReserveRatioThreshold,\\n            pair.sellFee,\\n            pair.sellReserveRatioThreshold\\n        );\\n    }\\n\\n    /**\\n     * @notice Removes the pair and the setting, reverts if the pair doesn't exist.\\n     * @param tokenX Address of base currency or quote currency\\n     * @param tokenY Address of base currency or quote currency\\n     */\\n    function _removePair(address tokenX, address tokenY) internal {\\n        (tokenX, tokenY) = _sortTokens(tokenX, tokenY);\\n\\n        bytes32 pairHash = _removePairByTokens(tokenX, tokenY);\\n\\n        delete _pair[pairHash];\\n    }\\n\\n    /**\\n     * @notice Checks whether the parameters of `pair` are valid.\\n     *          The two tokens must be added to the pool before adding the pair.\\n     *          It validates the two token addresses are not the same,\\n     *          and one of the tokens must be USD1.\\n     *          It also validates the fee numerators and the reserve ratio thresholds.\\n     */\\n    function _checkPairParameters(PairConfig memory pair)\\n        internal\\n        view\\n        tokenInPool(pair.baseToken)\\n        tokenInPool(pair.quoteToken)\\n    {\\n        _require(pair.baseToken != pair.quoteToken, Errors.PAIR_INVALID);\\n\\n        address usd1Address = address(usd1);\\n        _require(usd1Address != address(0), Errors.USD1_NOT_SET);\\n        _require(pair.baseToken == usd1Address || pair.quoteToken == usd1Address, Errors.PAIR_INVALID);\\n\\n        _checkSwapFeeNumerator(pair.buyFee);\\n        _checkReserveRatioThreshold(pair.buyReserveRatioThreshold);\\n\\n        _checkSwapFeeNumerator(pair.sellFee);\\n        _checkReserveRatioThreshold(pair.sellReserveRatioThreshold);\\n    }\\n\\n    /**\\n     * @notice Checks whether `tokenType` is valid\\n     */\\n    function _isTokenTypeValid(uint8 tokenType) internal pure override returns (bool) {\\n        return tokenType == uint8(TokenType.Asset) || tokenType == uint8(TokenType.Stable);\\n    }\\n\\n    /**\\n     * @notice Checks whether the swapping fee numerator is valid\\n     * @param feeNumerator The fee numerator with 6 decimals. It must be less than the denominator.\\n     */\\n    function _checkSwapFeeNumerator(uint24 feeNumerator) internal pure {\\n        _require(feeNumerator < SWAP_FEE_BASE, Errors.FEE_NUMERATOR_INVALID);\\n    }\\n\\n    /**\\n     * @notice Checks whether the reserve ratio threshold is valid\\n     * @param reserveRatioThreshold The threshold with 18 decimals, zero indicates unlimited.\\n     *                               It must be zero or greater than or equal to 1e18 (100%).\\n     */\\n    function _checkReserveRatioThreshold(uint232 reserveRatioThreshold) internal pure {\\n        _require(\\n            reserveRatioThreshold == 0 || reserveRatioThreshold >= RESERVE_RATIO_BASE,\\n            Errors.RESERVE_RATIO_THRESHOLD_INVALID\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @title Interface of Unitas ERC-20 Token\\n */\\ninterface IERC20Token is IERC20Metadata {\\n    function GOVERNOR_ROLE() external view returns (bytes32);\\n    function GUARDIAN_ROLE() external view returns (bytes32);\\n    function MINTER_ROLE() external view returns (bytes32);\\n    function setGovernor(address newGovernor, address oldGovernor) external;\\n    function revokeGovernor(address oldGovernor) external;\\n    function setGuardian(address newGuardian, address oldGuardian) external;\\n    function revokeGuardian(address oldGuardian) external;\\n    function setMinter(address newMinter, address oldMinter) external;\\n    function revokeMinter(address oldMinter) external;\\n    function pause() external;\\n    function unpause() external;\\n    function mint(address account, uint256 amount) external;\\n    function burn(address burner, uint256 amount) external;\\n    function addBlackList(address evilUser) external;\\n    function removeBlackList(address clearedUser) external;\\n    function getBlacklist(address addr) external view returns (bool);\\n}\"\r\n    },\r\n    \"src/interfaces/ITokenManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IERC20Token.sol\\\";\\nimport \\\"./ITypeTokens.sol\\\";\\nimport \\\"./ITokenPairs.sol\\\";\\n\\ninterface ITokenManager is ITypeTokens, ITokenPairs {\\n    enum TokenType {\\n        Undefined, // 0 indicates not in the pool\\n        Asset, // Asset tokens for reserve, e.g., USDT\\n        Stable // Stable tokens of Unitas protocol, e.g., USD1, USD91\\n    }\\n\\n    struct PairConfig {\\n        address baseToken;\\n        address quoteToken;\\n        /**\\n         * @notice The numerator of swapping fee ratio when buying `baseToken`\\n         */\\n        uint24 buyFee;\\n        uint232 buyReserveRatioThreshold;\\n        /**\\n         * @notice The numerator of swapping fee ratio when selling `baseToken`\\n         */\\n        uint24 sellFee;\\n        uint232 sellReserveRatioThreshold;\\n    }\\n\\n    struct TokenConfig {\\n        address token;\\n        TokenType tokenType;\\n        uint256 minPrice;\\n        uint256 maxPrice;\\n    }\\n\\n    function setUSD1(address token) external;\\n\\n    function setMinMaxPriceTolerance(address token, uint256 minPrice, uint256 maxPrice) external;\\n\\n    function addTokensAndPairs(TokenConfig[] calldata tokens, PairConfig[] calldata pairs) external;\\n\\n    function removeTokensAndPairs(address[] calldata tokens, address[] calldata pairTokensX, address[] calldata pairTokensY) external;\\n\\n    function updatePairs(PairConfig[] calldata pairs) external;\\n\\n    function RESERVE_RATIO_BASE() external view returns (uint256);\\n\\n    function SWAP_FEE_BASE() external view returns (uint256);\\n\\n    function usd1() external view returns (IERC20Token);\\n\\n    function listPairsByIndexAndCount(uint256 index, uint256 count) external view returns (PairConfig[] memory);\\n\\n    function getPriceTolerance(address token) external view returns (uint256 minPrice, uint256 maxPrice);\\n\\n    function getTokenType(address token) external view returns (TokenType);\\n\\n    function getPair(address tokenX, address tokenY) external view returns (PairConfig memory pair);\\n\\n    function pairByIndex(uint256 index) external view returns (PairConfig memory pair);\\n}\\n\"\r\n    },\r\n    \"src/utils/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\n/**\\n * @notice Reverts with `errorCode` when `condition` is true\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) {\\n        _revert(errorCode);\\n    }\\n}\\n\\n/**\\n * @notice Reverts with `errorCode`\\n * @dev The character length is 12, format: \\\"Unitas: `errorCode`\\\"\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    assembly {\\n        // ASCII 48 = 0\\n        // From right to left\\n        let one := add(mod(errorCode, 10), 48)\\n        let two := add(mod(div(errorCode, 10), 10), 48)\\n        let three := add(mod(div(errorCode, 100), 10), 48)\\n        let four := add(mod(div(errorCode, 1000), 10), 48)\\n\\n        let err := shl(\\n            // 256 - 8 * 12\\n            160,\\n            add(\\n                shl(\\n                    // 4 spaces\\n                    32,\\n                    // \\\"Unitas: \\\"\\n                    0x556e697461733a20\\n                ),\\n                add(add(add(\\n                    one,\\n                    shl(8, two)),\\n                    shl(16, three)),\\n                    shl(24, four)\\n                )\\n            )\\n        )\\n\\n        // bytes4(keccak256(\\\"Error(string)\\\"))\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Offset\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // Character length\\n        mstore(0x24, 12)\\n        // Message\\n        mstore(0x44, err)\\n\\n        // 4 + 32 + 32 + 32\\n        revert(0, 100)\\n    }\\n}\\n\\n/**\\n * @notice Error code definition to reduce contract size\\n * @dev Range: 1000 - 9999\\n */\\nlibrary Errors {\\n    // ====================================================\\n    // Common (1000 - 1999)\\n\\n    /**\\n     * @notice The input address is zero\\n     */\\n    uint256 internal constant ADDRESS_ZERO = 1000;\\n    /**\\n     * @notice The account code size of the input address is zero\\n     */\\n    uint256 internal constant ADDRESS_CODE_SIZE_ZERO = 1001;\\n    /**\\n     * @notice The parameters passed during function invocation are invalid\\n     */\\n    uint256 internal constant PARAMETER_INVALID = 1002;\\n    /**\\n     * @notice The input index or index + count is out of bounds of the array to be load\\n     */\\n    uint256 internal constant INPUT_OUT_OF_BOUNDS = 1003;\\n    /**\\n     * @notice There is a mismatch in the lengths of input arrays required by a function\\n     */\\n    uint256 internal constant ARRAY_LENGTH_MISMATCHED = 1004;\\n    /**\\n     * @notice The amount is zero or greater than the available pool balance\\n     */\\n    uint256 internal constant AMOUNT_INVALID = 1005;\\n    /**\\n     * @notice The address of the sender is not allowed to perform the operation\\n     */\\n    uint256 internal constant SENDER_INVALID = 1006;\\n    /**\\n     * @notice The address of the receiver is not allowed to perform the operation\\n     */\\n    uint256 internal constant RECEIVER_INVALID = 1007;\\n    /**\\n     * @notice The balance of the account is insufficient to perform the operation\\n     */\\n    uint256 internal constant BALANCE_INSUFFICIENT = 1008;\\n    /**\\n     * @notice The balance of the pool is insufficient to perform the operation\\n     */\\n    uint256 internal constant POOL_BALANCE_INSUFFICIENT = 1009;\\n\\n    // ====================================================\\n    // Token, pair and related settings (2000 - 2099)\\n\\n    /**\\n     * @notice The token type of the input is invalid\\n     */\\n    uint256 internal constant TOKEN_TYPE_INVALID = 2000;\\n    /**\\n     * @notice The token already exists in the pool\\n     */\\n    uint256 internal constant TOKEN_ALREADY_EXISTS = 2001;\\n    /**\\n     * @notice The token does not exist in the pool\\n     */\\n    uint256 internal constant TOKEN_NOT_EXISTS = 2002;\\n    /**\\n     * @notice The two token addresses passed as parameters are not sorted\\n     */\\n    uint256 internal constant TOKENS_NOT_SORTED = 2003;\\n\\n    /**\\n     * @notice The pair already exists in the pool\\n     */\\n    uint256 internal constant PAIR_ALREADY_EXISTS = 2030;\\n    /**\\n     * @notice The pair does not exist in the pool\\n     */\\n    uint256 internal constant PAIR_NOT_EXISTS = 2031;\\n    /**\\n     * @notice Pairs associated with the token must be removed before removing the token\\n     */\\n    uint256 internal constant PAIRS_MUST_REMOVED = 2032;\\n    /**\\n     * @notice The two token addresses of the input are the same.\\n     *         One of the two token addresses must be USD1.\\n     */\\n    uint256 internal constant PAIR_INVALID = 2033;\\n\\n    /**\\n     * @notice The min price tolerance is zero or greater than the max price tolerance\\n     */\\n    uint256 internal constant MIN_PRICE_INVALID = 2060;\\n    /**\\n     * @notice The max price tolerance is zero\\n     */\\n    uint256 internal constant MAX_PRICE_INVALID = 2061;\\n    /**\\n     * @notice A valid swapping fee numerator must be less than 1e6 (100%)\\n     */\\n    uint256 internal constant FEE_NUMERATOR_INVALID = 2062;\\n    /**\\n     * @notice A valid reserve ratio threshold must be zero or greater than or equal to 1e18 (100%)\\n     */\\n    uint256 internal constant RESERVE_RATIO_THRESHOLD_INVALID = 2063;\\n    /**\\n     * @notice When the address of USD1 is zero\\n     */\\n    uint256 internal constant USD1_NOT_SET = 2064;\\n\\n    // ====================================================\\n    // Unitas & XOracle (2100 - 2199)\\n\\n    /**\\n     * @notice The calculated swap result is invalid and cannot be executed\\n     */\\n    uint256 internal constant SWAP_RESULT_INVALID = 2100;\\n    /**\\n     * @notice The min and max price tolerances are invalid\\n     */\\n    uint256 internal constant PRICE_TOLERANCE_INVALID = 2101;\\n    /**\\n     * @notice The price from the oracle is not within the price tolerance range\\n     */\\n    uint256 internal constant PRICE_INVALID = 2102;\\n    /**\\n     * @notice The reserve ratio must be greater than the threshold when there is a reserve ratio limit for swapping\\n     */\\n    uint256 internal constant RESERVE_RATIO_NOT_GREATER_THAN_THRESHOLD = 2103;\\n    /**\\n     * @notice The numerator of the swapping fee must be less than the denominator when the numerator is greater than zero\\n     */\\n    uint256 internal constant FEE_FRACTION_INVALID = 2104;\\n    /**\\n     * @notice When the timestamp of the price exceeds the staleness threshold\\n     */\\n    uint256 internal constant PRICE_STALE = 2105;\\n}\\n\"\r\n    },\r\n    \"src/TokenPairs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ITokenPairs.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\n/**\\n * @title TokenPairs\\n * @notice The abstract contract is used to manage pairs\\n */\\nabstract contract TokenPairs is ITokenPairs {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n    /**\\n     * @notice Maps the token address to the set of addresses,\\n     *          where the key and each element in the set represents a pair of tokens.\\n     */\\n    mapping(address => EnumerableSet.AddressSet) internal _pairTokens;\\n\\n    /**\\n     * @notice The set of pair hashes that is used to determine whether a pair exists in the pool\\n     */\\n    EnumerableSet.Bytes32Set internal _pairHashes;\\n\\n    /**\\n     * @notice Emitted when the pair is added to the pool\\n     * @param pairHash The hash of the pair\\n     * @param tokenX The smaller token address\\n     * @param tokenY The larger token address\\n     */\\n    event PairAdded(bytes32 indexed pairHash, address indexed tokenX, address indexed tokenY);\\n    /**\\n     * @notice Emitted when the pair is removed from the pool\\n     * @param pairHash The hash of the pair\\n     * @param tokenX The smaller token address\\n     * @param tokenY The larger token address\\n     */\\n    event PairRemoved(bytes32 indexed pairHash, address indexed tokenX, address indexed tokenY);\\n\\n    /**\\n     * @notice Gets an array of token addresses that are paired with the specified token, supporting pagination.\\n     *          Reverts if the index plus the count is out of bounds,\\n     *          or there is an overflow in the sum of index and count.\\n     * @param token The token address\\n     * @param index The offset of the list\\n     * @param count The number of tokens to retrieve\\n     * @return An array of token addresses that are paired with `token`\\n     */\\n    function listPairTokensByIndexAndCount(address token, uint256 index, uint256 count) external view virtual returns (address[] memory) {\\n        EnumerableSet.AddressSet storage tokenSet = _pairTokens[token];\\n        uint256 tokenCount = tokenSet.length();\\n\\n        _require(\\n            (index == 0 || index < tokenCount) && index + count <= tokenCount,\\n            Errors.INPUT_OUT_OF_BOUNDS\\n        );\\n\\n        address[] memory tokens = new address[](count);\\n\\n        for (uint256 i; i < count; i++) {\\n            tokens[i] = tokenSet.at(index + i);\\n        }\\n\\n        return tokens;\\n    }\\n\\n    /**\\n     * @notice Sorts `tokenX` and `tokenY` and returns whether the pair is in the pool\\n     */\\n    function isPairInPool(address tokenX, address tokenY) public view virtual returns (bool) {\\n        return _pairHashes.contains(getPairHash(tokenX, tokenY));\\n    }\\n\\n    /**\\n     * @notice Gets the total number of tokens that are paired with the specified token.\\n     * @param token The token address\\n     */\\n    function pairTokenLength(address token) public view virtual returns (uint256) {\\n        return _pairTokens[token].length();\\n    }\\n\\n    /**\\n     * @notice Gets the paired token address by `token` and `index`\\n     */\\n    function pairTokenByIndex(address token, uint256 index) public view returns (address) {\\n        return _pairTokens[token].at(index);\\n    }\\n\\n    /**\\n     * @notice Gets the total number of all pairs\\n     */\\n    function pairLength() public view virtual returns (uint256) {\\n        return _pairHashes.length();\\n    }\\n\\n    /**\\n     * @notice Sorts `tokenX` and `tokenY` and gets the hash of the pair\\n     */\\n    function getPairHash(address tokenX, address tokenY) public pure virtual returns (bytes32) {\\n        (tokenX, tokenY) = _sortTokens(tokenX, tokenY);\\n\\n        return _getPairHash(tokenX, tokenY);\\n    }\\n\\n    /**\\n     * @notice Adds the pair to the pool, reverts if the pair does already exist.\\n     * @param tokenX The smaller token address\\n     * @param tokenY The larger token address\\n     */\\n    function _addPairByTokens(address tokenX, address tokenY) internal virtual returns (bytes32) {\\n        _require(tokenX < tokenY, Errors.TOKENS_NOT_SORTED);\\n\\n        bytes32 pairHash = _getPairHash(tokenX, tokenY);\\n\\n        _require(_pairHashes.add(pairHash), Errors.PAIR_ALREADY_EXISTS);\\n        _require(\\n            _pairTokens[tokenX].add(tokenY) && _pairTokens[tokenY].add(tokenX),\\n            Errors.PAIR_ALREADY_EXISTS\\n        );\\n\\n        emit PairAdded(pairHash, tokenX, tokenY);\\n\\n        return pairHash;\\n    }\\n\\n    /**\\n     * @notice Removes the pair from the pool, reverts if the pair doesn't exist.\\n     * @param tokenX The smaller token address\\n     * @param tokenY The larger token address\\n     */\\n    function _removePairByTokens(address tokenX, address tokenY) internal virtual returns (bytes32) {\\n        bytes32 pairHash = _getPairHash(tokenX, tokenY);\\n\\n        _require(_pairHashes.remove(pairHash), Errors.PAIR_NOT_EXISTS);\\n        _require(\\n            _pairTokens[tokenX].remove(tokenY) && _pairTokens[tokenY].remove(tokenX),\\n            Errors.PAIR_NOT_EXISTS\\n        );\\n\\n        emit PairRemoved(pairHash, tokenX, tokenY);\\n\\n        return pairHash;\\n    }\\n\\n    /**\\n     * @notice Reverts if the pair does not exist\\n     * @param tokenX The smaller token address\\n     * @param tokenY The larger token address\\n     * @return The hash of the pair\\n     */\\n    function _checkPairExists(address tokenX, address tokenY) internal view virtual returns (bytes32) {\\n        bytes32 pairHash = _getPairHash(tokenX, tokenY);\\n\\n        _require(_pairHashes.contains(pairHash), Errors.PAIR_NOT_EXISTS);\\n\\n        return pairHash;\\n    }\\n\\n    /**\\n     * @notice Encodes the hash by two token addresses in ascending order\\n     * @param tokenX The smaller token address\\n     * @param tokenY The larger token address\\n     * @return The pair of the hash\\n     */\\n    function _getPairHash(address tokenX, address tokenY) internal pure virtual returns (bytes32) {\\n        return keccak256(abi.encode(tokenX, tokenY));\\n    }\\n\\n    /**\\n     * @notice Sorts the two token addresses in ascending order for encoding the hash\\n     * @return The smaller address and the larger address\\n     */\\n    function _sortTokens(address tokenX, address tokenY) internal pure virtual returns (address, address) {\\n        return tokenX < tokenY ? (tokenX, tokenY) : (tokenY, tokenX);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/TypeTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"./interfaces/ITypeTokens.sol\\\";\\nimport \\\"./utils/AddressUtils.sol\\\";\\nimport \\\"./utils/Errors.sol\\\";\\n\\n/**\\n * @title TypeTokens\\n * @notice The abstract contract is used to manage pool tokens and classify them by type.\\n * @dev Token types are stored using uint8.\\n *       By default, a valid token type must be greater than zero to determine whether a token is in the pool.\\n *       Child contracts can define their own enum for token types.\\n */\\nabstract contract TypeTokens is ITypeTokens {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /**\\n     * @notice Maps the token address to the token type\\n     */\\n    mapping(address => uint8) internal _tokenType;\\n    /**\\n     * @notice Maps the token type to the address set of tokens\\n     */\\n    mapping(uint8 => EnumerableSet.AddressSet) internal _typeTokens;\\n\\n    /**\\n     * @notice Emitted when `token` is added to the pool\\n     */\\n    event TokenAdded(address indexed token, uint8 tokenType);\\n    /**\\n     * @notice Emitted when `token` is removed from the pool\\n     */\\n    event TokenRemoved(address indexed token, uint8 tokenType);\\n\\n    // ============================== MODIFIERS ==============================\\n\\n    error TokenNotInPool(address token);\\n    error TokenAlreadyInPool(address token);\\n\\n    /**\\n     * @notice Reverts if `token` is not in the pool\\n     */\\n    modifier tokenInPool(address token) {\\n        if (!isTokenInPool(token))\\n            revert TokenNotInPool(token);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if `token` is in the pool\\n     */\\n    modifier tokenNotInPool(address token) {\\n        if (isTokenInPool(token))\\n            revert TokenAlreadyInPool(token);\\n        _;\\n    }\\n\\n    // ============================== EXTERNAL FUNCTIONS ===========================\\n\\n    /**\\n     * @notice Gets an array of token addresses with the specified token type, supporting pagination.\\n     *          Reverts if the index plus the count is out of bounds,\\n     *          or there is an overflow in the sum of index and count.\\n     * @param tokenType The token type\\n     * @param index The offset of the list\\n     * @param count The number of tokens to retrieve\\n     * @return An array of token addresses belonging to `tokenType`\\n     */\\n    function listTokensByIndexAndCount(uint8 tokenType, uint256 index, uint256 count) external view virtual returns (address[] memory) {\\n        EnumerableSet.AddressSet storage tokenSet = _typeTokens[tokenType];\\n        uint256 tokenCount = tokenSet.length();\\n\\n        _require(\\n            (index == 0 || index < tokenCount) && index + count <= tokenCount,\\n            Errors.INPUT_OUT_OF_BOUNDS\\n        );\\n\\n        address[] memory tokens = new address[](count);\\n\\n        for (uint256 i; i < count; i++) {\\n            tokens[i] = tokenSet.at(index + i);\\n        }\\n\\n        return tokens;\\n    }\\n\\n    // ============================== PUBLIC FUNCTIONS ===========================\\n\\n    /**\\n     * @notice Checks whether `token` is in the pool\\n     */\\n    function isTokenInPool(address token) public view virtual returns (bool) {\\n        return _isTokenTypeValid(_tokenType[token]);\\n    }\\n\\n    /**\\n     * @notice Gets the token count by `tokenType`\\n     */\\n    function tokenLength(uint8 tokenType) public view virtual returns (uint256) {\\n        return _typeTokens[tokenType].length();\\n    }\\n\\n    /**\\n     * @notice Gets the token address by `tokenType` and `index`\\n     */\\n    function tokenByIndex(uint8 tokenType, uint256 index) public view virtual returns (address) {\\n        return _typeTokens[tokenType].at(index);\\n    }\\n\\n    // ============================== INTERNAL FUNCTIONS ===========================\\n\\n    /**\\n     * @notice Adds the token to the pool\\n     * @param token Address of the token\\n     * @param tokenType The value of the token type\\n     */\\n    function _addToken(address token, uint8 tokenType) internal virtual tokenNotInPool(token) {\\n        AddressUtils.checkContract(token);\\n        _require(_isTokenTypeValid(tokenType), Errors.TOKEN_TYPE_INVALID);\\n\\n        _require(_typeTokens[tokenType].add(token), Errors.TOKEN_ALREADY_EXISTS);\\n\\n        _tokenType[token] = tokenType;\\n\\n        emit TokenAdded(token, tokenType);\\n    }\\n\\n    /**\\n     * @notice Removes the token from the pool\\n     * @param token Address of the token\\n     */\\n    function _removeToken(address token) internal virtual tokenInPool(token) {\\n        uint8 tokenType = _tokenType[token];\\n\\n        _require(_typeTokens[tokenType].remove(token), Errors.TOKEN_NOT_EXISTS);\\n\\n        delete (_tokenType[token]);\\n\\n        emit TokenRemoved(token, tokenType);\\n    }\\n\\n    /**\\n     * @notice Checks whether `tokenType` is valid\\n     */\\n    function _isTokenTypeValid(uint8 tokenType) internal pure virtual returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITypeTokens.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"./IERC20Token.sol\\\";\\nimport \\\"./ISwapFunctions.sol\\\";\\n\\ninterface ITypeTokens {\\n    function listTokensByIndexAndCount(uint8 tokenType, uint256 index, uint256 count) external view returns (address[] memory);\\n\\n    function isTokenInPool(address token) external view returns (bool);\\n\\n    function tokenLength(uint8 tokenType) external view returns (uint256);\\n\\n    function tokenByIndex(uint8 tokenType, uint256 index) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ITokenPairs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\ninterface ITokenPairs {\\n    function listPairTokensByIndexAndCount(address token, uint256 index, uint256 count) external view returns (address[] memory);\\n\\n    function isPairInPool(address tokenX, address tokenY) external view returns (bool);\\n\\n    function pairTokenLength(address token) external view returns (uint256);\\n\\n    function pairTokenByIndex(address token, uint256 index) external view returns (address);\\n\\n    function pairLength() external view returns (uint256);\\n\\n    function getPairHash(address tokenX, address tokenY) external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/utils/AddressUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport \\\"./Errors.sol\\\";\\n\\nlibrary AddressUtils {\\n    /**\\n     * @notice Reverts if `account` is zero or the code size is zero\\n     */\\n    function checkContract(address account) internal view {\\n        checkNotZero(account);\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        _require(size > 0, Errors.ADDRESS_CODE_SIZE_ZERO);\\n    }\\n\\n    /**\\n     * @notice Reverts if `account` is zero\\n     */\\n    function checkNotZero(address account) internal pure {\\n        _require(account != address(0), Errors.ADDRESS_ZERO);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISwapFunctions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\ninterface ISwapFunctions {\\n    enum AmountType {\\n        In,\\n        Out\\n    }\\n\\n    struct SwapRequest {\\n        AmountType amountType;\\n        address tokenIn;\\n        address tokenOut;\\n        uint256 amount;\\n        uint256 feeNumerator;\\n        uint256 feeBase;\\n        address feeToken;\\n        uint256 price;\\n        uint256 priceBase;\\n        address quoteToken;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"governor_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"timelock_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"usd1_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum ITokenManager.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenManager.TokenConfig[]\",\"name\":\"tokens_\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"buyFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"buyReserveRatioThreshold\",\"type\":\"uint232\"},{\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"sellReserveRatioThreshold\",\"type\":\"uint232\"}],\"internalType\":\"struct ITokenManager.PairConfig[]\",\"name\":\"pairs_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"NotTimelock\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenAlreadyInPool\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"TokenNotInPool\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"}],\"name\":\"PairAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"}],\"name\":\"PairRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"pairHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"buyFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint232\",\"name\":\"buyReserveRatioThreshold\",\"type\":\"uint232\"},{\"indexed\":false,\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"uint232\",\"name\":\"sellReserveRatioThreshold\",\"type\":\"uint232\"}],\"name\":\"PairUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"TokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"TokenRemoved\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GOVERNOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RESERVE_RATIO_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SWAP_FEE_BASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TIMELOCK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"enum ITokenManager.TokenType\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct ITokenManager.TokenConfig[]\",\"name\":\"tokens\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"buyFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"buyReserveRatioThreshold\",\"type\":\"uint232\"},{\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"sellReserveRatioThreshold\",\"type\":\"uint232\"}],\"internalType\":\"struct ITokenManager.PairConfig[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"addTokensAndPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"}],\"name\":\"getPair\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"buyFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"buyReserveRatioThreshold\",\"type\":\"uint232\"},{\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"sellReserveRatioThreshold\",\"type\":\"uint232\"}],\"internalType\":\"struct ITokenManager.PairConfig\",\"name\":\"pair\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"}],\"name\":\"getPairHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getPriceTolerance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"getTokenType\",\"outputs\":[{\"internalType\":\"enum ITokenManager.TokenType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenY\",\"type\":\"address\"}],\"name\":\"isPairInPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"isTokenInPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"listPairTokensByIndexAndCount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"listPairsByIndexAndCount\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"buyFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"buyReserveRatioThreshold\",\"type\":\"uint232\"},{\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"sellReserveRatioThreshold\",\"type\":\"uint232\"}],\"internalType\":\"struct ITokenManager.PairConfig[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"}],\"name\":\"listTokensByIndexAndCount\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"pairByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"buyFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"buyReserveRatioThreshold\",\"type\":\"uint232\"},{\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"sellReserveRatioThreshold\",\"type\":\"uint232\"}],\"internalType\":\"struct ITokenManager.PairConfig\",\"name\":\"pair\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"pairTokenByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"pairTokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairTokensX\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"pairTokensY\",\"type\":\"address[]\"}],\"name\":\"removeTokensAndPairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPrice\",\"type\":\"uint256\"}],\"name\":\"setMinMaxPriceTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"setUSD1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"tokenType\",\"type\":\"uint8\"}],\"name\":\"tokenLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"buyFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"buyReserveRatioThreshold\",\"type\":\"uint232\"},{\"internalType\":\"uint24\",\"name\":\"sellFee\",\"type\":\"uint24\"},{\"internalType\":\"uint232\",\"name\":\"sellReserveRatioThreshold\",\"type\":\"uint232\"}],\"internalType\":\"struct ITokenManager.PairConfig[]\",\"name\":\"pairs\",\"type\":\"tuple[]\"}],\"name\":\"updatePairs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usd1\",\"outputs\":[{\"internalType\":\"contract IERC20Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TokenManager", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "100000", "ConstructorArguments": "000000000000000000000000abe5389efdbdecda215bc5c343d53a24a0a72a300000000000000000000000007a541048b607f1fe6408d6cb221d0c229f2e7b800000000000000000000000000e1f78ea866f9185ad5b9e8f9fb158430a7c4c6300000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000002c00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec700000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000001e3c26935f7a09f61a5f08c0e50f57bd6ffede1e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000015af1d78b58c40000000000000000000000000000000000000000000000000009c2007651b250000000000000000000000000000096acf52ac3f053158dc5a3d0803a7c232b9b441a000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000014d1120d7b1600000000000000000000000000000000000000000000000000008ac7230489e80000000000000000000000000000f9f7234c2b5e000d38759efbc104f413e1dc17f100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000001969368974c05b000000000000000000000000000000000000000000000000008c9b831ab9396f000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000000e1f78ea866f9185ad5b9e8f9fb158430a7c4c63000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120a871cc00200000000000000000000000000000e1f78ea866f9185ad5b9e8f9fb158430a7c4c630000000000000000000000001e3c26935f7a09f61a5f08c0e50f57bd6ffede1e0000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013880000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000e1f78ea866f9185ad5b9e8f9fb158430a7c4c6300000000000000000000000096acf52ac3f053158dc5a3d0803a7c232b9b441a00000000000000000000000000000000000000000000000000000000000009c4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e80000000000000000000000000000000000000000000000000de0b6b3a76400000000000000000000000000000e1f78ea866f9185ad5b9e8f9fb158430a7c4c63000000000000000000000000f9f7234c2b5e000d38759efbc104f413e1dc17f10000000000000000000000000000000000000000000000000000000000001388000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000013880000000000000000000000000000000000000000000000000de0b6b3a7640000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}