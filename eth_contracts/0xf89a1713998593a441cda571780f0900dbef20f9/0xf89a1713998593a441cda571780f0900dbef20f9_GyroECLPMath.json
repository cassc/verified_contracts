{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/eclp/GyroECLPMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Gyro-1.0\\n// for information on licensing please see the README in the GitHub repository <https://github.com/gyrostable/concentrated-lps>.\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\n\\n// import \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"../../libraries/GyroFixedPoint.sol\\\";\\nimport \\\"../../libraries/GyroErrors.sol\\\";\\nimport \\\"../../libraries/SignedFixedPoint.sol\\\";\\nimport \\\"../../libraries/GyroPoolMath.sol\\\";\\nimport \\\"./GyroECLPPoolErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/SafeCast.sol\\\";\\n\\n// solhint-disable private-vars-leading-underscore\\n\\n/** @dev ECLP math library. Pretty much a direct translation of the python version (see `tests/`).\\n * We use *signed* values here because some of the intermediate results can be negative (e.g. coordinates of points in\\n * the untransformed circle, \\\"prices\\\" in the untransformed circle).\\n */\\nlibrary GyroECLPMath {\\n    uint256 internal constant ONEHALF = 0.5e18;\\n    int256 internal constant ONE = 1e18; // 18 decimal places\\n    int256 internal constant ONE_XP = 1e38; // 38 decimal places\\n\\n    using SignedFixedPoint for int256;\\n    using GyroFixedPoint for uint256;\\n    using SafeCast for uint256;\\n    using SafeCast for int256;\\n\\n    // Anti-overflow limits: Params and DerivedParams (static, only needs to be checked on pool creation)\\n    int256 internal constant _ROTATION_VECTOR_NORM_ACCURACY = 1e3; // 1e-15 in normal precision\\n    int256 internal constant _MAX_STRETCH_FACTOR = 1e26; // 1e8   in normal precision\\n    int256 internal constant _DERIVED_TAU_NORM_ACCURACY_XP = 1e23; // 1e-15 in extra precision\\n    int256 internal constant _MAX_INV_INVARIANT_DENOMINATOR_XP = 1e43; // 1e5   in extra precision\\n    int256 internal constant _DERIVED_DSQ_NORM_ACCURACY_XP = 1e23; // 1e-15 in extra precision\\n\\n    // Anti-overflow limits: Dynamic values (checked before operations that use them)\\n    int256 internal constant _MAX_BALANCES = 1e34; // 1e16 in normal precision\\n    int256 internal constant _MAX_INVARIANT = 3e37; // 3e19 in normal precision\\n\\n    // Note that all t values (not tp or tpp) could consist of uint's, as could all Params. But it's complicated to\\n    // convert all the time, so we make them all signed. We also store all intermediate values signed. An exception are\\n    // the functions that are used by the contract b/c there the values are stored unsigned.\\n    struct Params {\\n        // Price bounds (lower and upper). 0 < alpha < beta\\n        int256 alpha;\\n        int256 beta;\\n        // Rotation vector:\\n        // phi in (-90 degrees, 0] is the implicit rotation vector. It's stored as a point:\\n        int256 c; // c = cos(-phi) >= 0. rounded to 18 decimals\\n        int256 s; //  s = sin(-phi) >= 0. rounded to 18 decimals\\n        // Invariant: c^2 + s^2 == 1, i.e., the point (c, s) is normalized.\\n        // due to rounding, this may not = 1. The term dSq in DerivedParams corrects for this in extra precision\\n\\n        // Stretching factor:\\n        int256 lambda; // lambda >= 1 where lambda == 1 is the circle.\\n    }\\n\\n    // terms in this struct are stored in extra precision (38 decimals) with final decimal rounded down\\n    struct DerivedParams {\\n        Vector2 tauAlpha;\\n        Vector2 tauBeta;\\n        int256 u; // from (A chi)_y = lambda * u + v\\n        int256 v; // from (A chi)_y = lambda * u + v\\n        int256 w; // from (A chi)_x = w / lambda + z\\n        int256 z; // from (A chi)_x = w / lambda + z\\n        int256 dSq; // error in c^2 + s^2 = dSq, used to correct errors in c, s, tau, u,v,w,z calculations\\n        //int256 dAlpha; // normalization constant for tau(alpha)\\n        //int256 dBeta; // normalization constant for tau(beta)\\n    }\\n\\n    struct Vector2 {\\n        int256 x;\\n        int256 y;\\n    }\\n\\n    struct QParams {\\n        int256 a;\\n        int256 b;\\n        int256 c;\\n    }\\n\\n    /** @dev Enforces limits and approximate normalization of the rotation vector. */\\n    function validateParams(Params memory params) internal pure {\\n        _grequire(0 <= params.s && params.s <= ONE, GyroECLPPoolErrors.ROTATION_VECTOR_WRONG);\\n        _grequire(0 <= params.c && params.c <= ONE, GyroECLPPoolErrors.ROTATION_VECTOR_WRONG);\\n\\n        Vector2 memory sc = Vector2(params.s, params.c);\\n        int256 scnorm2 = scalarProd(sc, sc); // squared norm\\n        _grequire(\\n            ONE - _ROTATION_VECTOR_NORM_ACCURACY <= scnorm2 && scnorm2 <= ONE + _ROTATION_VECTOR_NORM_ACCURACY,\\n            GyroECLPPoolErrors.ROTATION_VECTOR_NOT_NORMALIZED\\n        );\\n\\n        _grequire(0 <= params.lambda && params.lambda <= _MAX_STRETCH_FACTOR, GyroECLPPoolErrors.STRETCHING_FACTOR_WRONG);\\n    }\\n\\n    /** @dev Enforces limits and approximate normalization of the derived values.\\n    Does NOT check for internal consistency of 'derived' with 'params'. */\\n    function validateDerivedParamsLimits(Params memory params, DerivedParams memory derived) external pure {\\n        int256 norm2;\\n        norm2 = scalarProdXp(derived.tauAlpha, derived.tauAlpha);\\n        _grequire(\\n            ONE_XP - _DERIVED_TAU_NORM_ACCURACY_XP <= norm2 && norm2 <= ONE_XP + _DERIVED_TAU_NORM_ACCURACY_XP,\\n            GyroECLPPoolErrors.DERIVED_TAU_NOT_NORMALIZED\\n        );\\n        norm2 = scalarProdXp(derived.tauBeta, derived.tauBeta);\\n        _grequire(\\n            ONE_XP - _DERIVED_TAU_NORM_ACCURACY_XP <= norm2 && norm2 <= ONE_XP + _DERIVED_TAU_NORM_ACCURACY_XP,\\n            GyroECLPPoolErrors.DERIVED_TAU_NOT_NORMALIZED\\n        );\\n\\n        _grequire(derived.u <= ONE_XP, GyroECLPPoolErrors.DERIVED_UVWZ_WRONG);\\n        _grequire(derived.v <= ONE_XP, GyroECLPPoolErrors.DERIVED_UVWZ_WRONG);\\n        _grequire(derived.w <= ONE_XP, GyroECLPPoolErrors.DERIVED_UVWZ_WRONG);\\n        _grequire(derived.z <= ONE_XP, GyroECLPPoolErrors.DERIVED_UVWZ_WRONG);\\n\\n        _grequire(\\n            ONE_XP - _DERIVED_DSQ_NORM_ACCURACY_XP <= derived.dSq && derived.dSq <= ONE_XP + _DERIVED_DSQ_NORM_ACCURACY_XP,\\n            GyroECLPPoolErrors.DERIVED_DSQ_WRONG\\n        );\\n\\n        // NB No anti-overflow checks are required given the checks done above and in validateParams().\\n        int256 mulDenominator = ONE_XP.divXpU(calcAChiAChiInXp(params, derived) - ONE_XP);\\n        _grequire(mulDenominator <= _MAX_INV_INVARIANT_DENOMINATOR_XP, GyroECLPPoolErrors.INVARIANT_DENOMINATOR_WRONG);\\n    }\\n\\n    function scalarProd(Vector2 memory t1, Vector2 memory t2) internal pure returns (int256 ret) {\\n        ret = t1.x.mulDownMag(t2.x).add(t1.y.mulDownMag(t2.y));\\n    }\\n\\n    /// @dev scalar product for extra-precision values\\n    function scalarProdXp(Vector2 memory t1, Vector2 memory t2) internal pure returns (int256 ret) {\\n        ret = t1.x.mulXp(t2.x).add(t1.y.mulXp(t2.y));\\n    }\\n\\n    // \\\"Methods\\\" for Params. We could put these into a separate library and import them via 'using' to get method call\\n    // syntax.\\n\\n    /** @dev Calculate A t where A is given in Section 2.2\\n     *  This is reversing rotation and scaling of the ellipse (mapping back to circle) */\\n    function mulA(Params memory params, Vector2 memory tp) internal pure returns (Vector2 memory t) {\\n        // NB: This function is only used inside calculatePrice(). This is why we can make two simplifications:\\n        // 1. We don't correct for precision of s, c using d.dSq because that level of precision is not important in this context.\\n        // 2. We don't need to check for over/underflow b/c these are impossible in that context and given the (checked) assumptions on the various values.\\n        t.x = params.c.mulDownMagU(tp.x).divDownMagU(params.lambda) - params.s.mulDownMagU(tp.y).divDownMagU(params.lambda);\\n        t.y = params.s.mulDownMagU(tp.x) + params.c.mulDownMagU(tp.y);\\n    }\\n\\n    /** @dev Calculate virtual offset a given invariant r.\\n     *  See calculation in Section 2.1.2 Computing reserve offsets\\n     *  Note that, in contrast to virtual reserve offsets in CPMM, these are *subtracted* from the real\\n     *  reserves, moving the curve to the upper-right. They can be positive or negative, but not both can be negative.\\n     *  Calculates a = r*(A^{-1}tau(beta))_x rounding up in signed direction\\n     *  Notice that error in r is scaled by lambda, and so rounding direction is important */\\n    function virtualOffset0(\\n        Params memory p,\\n        DerivedParams memory d,\\n        Vector2 memory r // overestimate in x component, underestimate in y\\n    ) internal pure returns (int256 a) {\\n        // a = r lambda c tau(beta)_x + rs tau(beta)_y\\n        //       account for 1 factors of dSq (2 s,c factors)\\n        int256 termXp = d.tauBeta.x.divXpU(d.dSq);\\n        a = d.tauBeta.x > 0\\n            ? r.x.mulUpMagU(p.lambda).mulUpMagU(p.c).mulUpXpToNpU(termXp)\\n            : r.y.mulDownMagU(p.lambda).mulDownMagU(p.c).mulUpXpToNpU(termXp);\\n\\n        // use fact that tau(beta)_y > 0, so the required rounding direction is clear.\\n        a = a + r.x.mulUpMagU(p.s).mulUpXpToNpU(d.tauBeta.y.divXpU(d.dSq));\\n    }\\n\\n    /** @dev calculate virtual offset b given invariant r.\\n     *  Calculates b = r*(A^{-1}tau(alpha))_y rounding up in signed direction */\\n    function virtualOffset1(\\n        Params memory p,\\n        DerivedParams memory d,\\n        Vector2 memory r // overestimate in x component, underestimate in y\\n    ) internal pure returns (int256 b) {\\n        // b = -r \\\\lambda s tau(alpha)_x + rc tau(alpha)_y\\n        //       account for 1 factors of dSq (2 s,c factors)\\n        int256 termXp = d.tauAlpha.x.divXpU(d.dSq);\\n        b = (d.tauAlpha.x < 0)\\n            ? r.x.mulUpMagU(p.lambda).mulUpMagU(p.s).mulUpXpToNpU(-termXp)\\n            : (-r.y).mulDownMagU(p.lambda).mulDownMagU(p.s).mulUpXpToNpU(termXp);\\n\\n        // use fact that tau(alpha)_y > 0, so the required rounding direction is clear.\\n        b = b + r.x.mulUpMagU(p.c).mulUpXpToNpU(d.tauAlpha.y.divXpU(d.dSq));\\n    }\\n\\n    /** Maximal value for the real reserves x when the respective other balance is 0 for given invariant\\n     *  See calculation in Section 2.1.2. Calculation is ordered here for precision, but error in r is magnified by lambda\\n     *  Rounds down in signed direction */\\n    function maxBalances0(\\n        Params memory p,\\n        DerivedParams memory d,\\n        Vector2 memory r // overestimate in x-component, underestimate in y-component\\n    ) internal pure returns (int256 xp) {\\n        // x^+ = r lambda c (tau(beta)_x - tau(alpha)_x) + rs (tau(beta)_y - tau(alpha)_y)\\n        //      account for 1 factors of dSq (2 s,c factors)\\n        int256 termXp1 = (d.tauBeta.x - d.tauAlpha.x).divXpU(d.dSq); // note tauBeta.x > tauAlpha.x, so this is > 0 and rounding direction is clear\\n        int256 termXp2 = (d.tauBeta.y - d.tauAlpha.y).divXpU(d.dSq); // note this may be negative, but since tauBeta.y, tauAlpha.y >= 0, it is always in [-1, 1].\\n        xp = r.y.mulDownMagU(p.lambda).mulDownMagU(p.c).mulDownXpToNpU(termXp1);\\n        xp = xp + (termXp2 > 0 ? r.y.mulDownMagU(p.s) : r.x.mulUpMagU(p.s)).mulDownXpToNpU(termXp2);\\n    }\\n\\n    /** Maximal value for the real reserves y when the respective other balance is 0 for given invariant\\n     *  See calculation in Section 2.1.2. Calculation is ordered here for precision, but erorr in r is magnified by lambda\\n     *  Rounds down in signed direction */\\n    function maxBalances1(\\n        Params memory p,\\n        DerivedParams memory d,\\n        Vector2 memory r // overestimate in x-component, underestimate in y-component\\n    ) internal pure returns (int256 yp) {\\n        // y^+ = r lambda s (tau(beta)_x - tau(alpha)_x) + rc (tau(alpha)_y - tau(beta)_y)\\n        //      account for 1 factors of dSq (2 s,c factors)\\n        int256 termXp1 = (d.tauBeta.x - d.tauAlpha.x).divXpU(d.dSq); // note tauBeta.x > tauAlpha.x\\n        int256 termXp2 = (d.tauAlpha.y - d.tauBeta.y).divXpU(d.dSq);\\n        yp = r.y.mulDownMagU(p.lambda).mulDownMagU(p.s).mulDownXpToNpU(termXp1);\\n        yp = yp + (termXp2 > 0 ? r.y.mulDownMagU(p.c) : r.x.mulUpMagU(p.c)).mulDownXpToNpU(termXp2);\\n    }\\n\\n    /** @dev Compute the invariant 'r' corresponding to the given values. The invariant can't be negative, but\\n     *  we use a signed value to store it because all the other calculations are happening with signed ints, too.\\n     *  Computes r according to Prop 13 in 2.2.1 Initialization from Real Reserves\\n     *  orders operations to achieve best precision\\n     *  Returns an underestimate and a bound on error size.\\n     *  Enforces anti-overflow limits on balances and the computed invariant in the process. */\\n    function calculateInvariantWithError(\\n        uint256[] memory balances,\\n        Params memory params,\\n        DerivedParams memory derived\\n    ) public pure returns (int256, int256) {\\n        (int256 x, int256 y) = (balances[0].toInt256(), balances[1].toInt256());\\n        _grequire(x.add(y) <= _MAX_BALANCES, GyroECLPPoolErrors.MAX_ASSETS_EXCEEDED);\\n\\n        int256 AtAChi = calcAtAChi(x, y, params, derived);\\n        (int256 sqrt, int256 err) = calcInvariantSqrt(x, y, params, derived);\\n        // calculate the error in the square root term, separates cases based on sqrt >= 1/2\\n        // somedayTODO: can this be improved for cases of large balances (when xp error magnifies to np)\\n        // Note: the minimum non-zero value of sqrt is 1e-9 since the minimum argument is 1e-18\\n        if (sqrt > 0) {\\n            // err + 1 to account for O(eps_np) term ignored before\\n            err = (err + 1).divUpMagU(2 * sqrt);\\n        } else {\\n            // in the false case here, the extra precision error does not magnify, and so the error inside the sqrt is O(1e-18)\\n            // somedayTODO: The true case will almost surely never happen (can it be removed)\\n            err = err > 0 ? GyroPoolMath._sqrt(err.toUint256(), 5).toInt256() : 1e9;\\n        }\\n        // calculate the error in the numerator, scale the error by 20 to be sure all possible terms accounted for\\n        err = ((params.lambda.mulUpMagU(x + y) / ONE_XP) + err + 1) * 20;\\n\\n        // A chi \\\\cdot A chi > 1, so round it up to round denominator up\\n        // denominator uses extra precision, so we do * 1/denominator so we are sure the calculation doesn't overflow\\n        int256 mulDenominator = ONE_XP.divXpU(calcAChiAChiInXp(params, derived) - ONE_XP);\\n        // NOTE: Anti-overflow limits on mulDenominator are checked on contract creation.\\n\\n        // as alternative, could do, but could overflow: invariant = (AtAChi.add(sqrt) - err).divXp(denominator);\\n        int256 invariant = (AtAChi + sqrt - err).mulDownXpToNpU(mulDenominator);\\n        // error scales if denominator is small\\n        // NB: This error calculation computes the error in the expression \\\"numerator / denominator\\\", but in this code\\n        // we actually use the formula \\\"numerator * (1 / denominator)\\\" to compute the invariant. This affects this line\\n        // and the one below.\\n        err = err.mulUpXpToNpU(mulDenominator);\\n        // account for relative error due to error in the denominator\\n        // error in denominator is O(epsilon) if lambda<1e11, scale up by 10 to be sure we catch it, and add O(eps)\\n        // error in denominator is lambda^2 * 2e-37 and scales relative to the result / denominator\\n        // Scale by a constant to account for errors in the scaling factor itself and limited compounding.\\n        // calculating lambda^2 w/o decimals so that the calculation will never overflow, the lost precision isn't important\\n        err = err + ((invariant.mulUpXpToNpU(mulDenominator) * ((params.lambda * params.lambda) / 1e36)) * 40) / ONE_XP + 1;\\n\\n        _grequire(invariant.add(err) <= _MAX_INVARIANT, GyroECLPPoolErrors.MAX_INVARIANT_EXCEEDED);\\n\\n        return (invariant, err);\\n    }\\n\\n    function calculateInvariant(\\n        uint256[] memory balances,\\n        Params memory params,\\n        DerivedParams memory derived\\n    ) external pure returns (uint256 uinvariant) {\\n        (int256 invariant, ) = calculateInvariantWithError(balances, params, derived);\\n        uinvariant = invariant.toUint256();\\n    }\\n\\n    /// @dev calculate At \\\\cdot A chi, ignores rounding direction. We will later compensate for the rounding error.\\n    function calcAtAChi(\\n        int256 x,\\n        int256 y,\\n        Params memory p,\\n        DerivedParams memory d\\n    ) internal pure returns (int256 val) {\\n        // to save gas, pre-compute dSq^2 as it will be used 3 times\\n        int256 dSq2 = d.dSq.mulXpU(d.dSq);\\n\\n        // (cx - sy) * (w/lambda + z) / lambda\\n        //      account for 2 factors of dSq (4 s,c factors)\\n        int256 termXp = (d.w.divDownMagU(p.lambda) + d.z).divDownMagU(p.lambda).divXpU(dSq2);\\n        val = (x.mulDownMagU(p.c) - y.mulDownMagU(p.s)).mulDownXpToNpU(termXp);\\n\\n        // (x lambda s + y lambda c) * u, note u > 0\\n        int256 termNp = x.mulDownMagU(p.lambda).mulDownMagU(p.s) + y.mulDownMagU(p.lambda).mulDownMagU(p.c);\\n        val = val + termNp.mulDownXpToNpU(d.u.divXpU(dSq2));\\n\\n        // (sx+cy) * v, note v > 0\\n        termNp = x.mulDownMagU(p.s) + y.mulDownMagU(p.c);\\n        val = val + termNp.mulDownXpToNpU(d.v.divXpU(dSq2));\\n    }\\n\\n    /// @dev calculates A chi \\\\cdot A chi in extra precision\\n    /// Note: this can be >1 (and involves factor of lambda^2). We can compute it in extra precision w/o overflowing b/c it will be\\n    /// at most 38 + 16 digits (38 from decimals, 2*8 from lambda^2 if lambda=1e8)\\n    /// Since we will only divide by this later, we will not need to worry about overflow in that operation if done in the right way\\n    /// TODO: is rounding direction ok?\\n    function calcAChiAChiInXp(Params memory p, DerivedParams memory d) internal pure returns (int256 val) {\\n        // to save gas, pre-compute dSq^3 as it will be used 4 times\\n        int256 dSq3 = d.dSq.mulXpU(d.dSq).mulXpU(d.dSq);\\n\\n        // (A chi)_y^2 = lambda^2 u^2 + lambda 2 u v + v^2\\n        //      account for 3 factors of dSq (6 s,c factors)\\n        // SOMEDAY: In these calcs, a calculated value is multiplied by lambda and lambda^2, resp, which implies some\\n        // error amplification. It's fine b/c we're doing it in extra precision here, but would still be nice if it\\n        // could be avoided, perhaps by splitting up the numbers into a high and low part.\\n        val = p.lambda.mulUpMagU((2 * d.u).mulXpU(d.v).divXpU(dSq3));\\n        // for lambda^2 u^2 factor in rounding error in u since lambda could be big\\n        // Note: lambda^2 is multiplied at the end to be sure the calculation doesn't overflow, but this can lose some precision\\n        val = val + ((d.u + 1).mulXpU(d.u + 1).divXpU(dSq3)).mulUpMagU(p.lambda).mulUpMagU(p.lambda);\\n        // the next line converts from extre precision to normal precision post-computation while rounding up\\n        val = val + (d.v).mulXpU(d.v).divXpU(dSq3);\\n\\n        // (A chi)_x^2 = (w/lambda + z)^2\\n        //      account for 3 factors of dSq (6 s,c factors)\\n        int256 termXp = d.w.divUpMagU(p.lambda) + d.z;\\n        val = val + termXp.mulXpU(termXp).divXpU(dSq3);\\n    }\\n\\n    /// @dev calculate -(At)_x ^2 (A chi)_y ^2 + (At)_x ^2, rounding down in signed direction\\n    function calcMinAtxAChiySqPlusAtxSq(\\n        int256 x,\\n        int256 y,\\n        Params memory p,\\n        DerivedParams memory d\\n    ) internal pure returns (int256 val) {\\n        ////////////////////////////////////////////////////////////////////////////////////\\n        // (At)_x^2 (A chi)_y^2 = (x^2 c^2 - xy2sc + y^2 s^2) (u^2 + 2uv/lambda + v^2/lambda^2)\\n        //      account for 4 factors of dSq (8 s,c factors)\\n        //\\n        // (At)_x^2 = (x^2 c^2 - xy2sc + y^2 s^2)/lambda^2\\n        //      account for 1 factor of dSq (2 s,c factors)\\n        ////////////////////////////////////////////////////////////////////////////////////\\n        int256 termNp = x.mulUpMagU(x).mulUpMagU(p.c).mulUpMagU(p.c) + y.mulUpMagU(y).mulUpMagU(p.s).mulUpMagU(p.s);\\n        termNp = termNp - x.mulDownMagU(y).mulDownMagU(p.c * 2).mulDownMagU(p.s);\\n\\n        int256 termXp = d.u.mulXpU(d.u) + (2 * d.u).mulXpU(d.v).divDownMagU(p.lambda) + d.v.mulXpU(d.v).divDownMagU(p.lambda).divDownMagU(p.lambda);\\n        termXp = termXp.divXpU(d.dSq.mulXpU(d.dSq).mulXpU(d.dSq).mulXpU(d.dSq));\\n        val = (-termNp).mulDownXpToNpU(termXp);\\n\\n        // now calculate (At)_x^2 accounting for possible rounding error to round down\\n        // need to do 1/dSq in a way so that there is no overflow for large balances\\n        val = val + (termNp - 9).divDownMagU(p.lambda).divDownMagU(p.lambda).mulDownXpToNpU(SignedFixedPoint.ONE_XP.divXpU(d.dSq));\\n    }\\n\\n    /// @dev calculate 2(At)_x * (At)_y * (A chi)_x * (A chi)_y, ignores rounding direction\\n    //  Note: this ignores rounding direction and is corrected for later\\n    function calc2AtxAtyAChixAChiy(\\n        int256 x,\\n        int256 y,\\n        Params memory p,\\n        DerivedParams memory d\\n    ) internal pure returns (int256 val) {\\n        ////////////////////////////////////////////////////////////////////////////////////\\n        // = ((x^2 - y^2)sc + yx(c^2-s^2)) * 2 * (zu + (wu + zv)/lambda + wv/lambda^2)\\n        //      account for 4 factors of dSq (8 s,c factors)\\n        ////////////////////////////////////////////////////////////////////////////////////\\n        int256 termNp = (x.mulDownMagU(x) - y.mulUpMagU(y)).mulDownMagU(2 * p.c).mulDownMagU(p.s);\\n        int256 xy = y.mulDownMagU(2 * x);\\n        termNp = termNp + xy.mulDownMagU(p.c).mulDownMagU(p.c) - xy.mulDownMagU(p.s).mulDownMagU(p.s);\\n\\n        int256 termXp = d.z.mulXpU(d.u) + d.w.mulXpU(d.v).divDownMagU(p.lambda).divDownMagU(p.lambda);\\n        termXp = termXp + (d.w.mulXpU(d.u) + d.z.mulXpU(d.v)).divDownMagU(p.lambda);\\n        termXp = termXp.divXpU(d.dSq.mulXpU(d.dSq).mulXpU(d.dSq).mulXpU(d.dSq));\\n\\n        val = termNp.mulDownXpToNpU(termXp);\\n    }\\n\\n    /// @dev calculate -(At)_y ^2 (A chi)_x ^2 + (At)_y ^2, rounding down in signed direction\\n    function calcMinAtyAChixSqPlusAtySq(\\n        int256 x,\\n        int256 y,\\n        Params memory p,\\n        DerivedParams memory d\\n    ) internal pure returns (int256 val) {\\n        ////////////////////////////////////////////////////////////////////////////////////\\n        // (At)_y^2 (A chi)_x^2 = (x^2 s^2 + xy2sc + y^2 c^2) * (z^2 + 2zw/lambda + w^2/lambda^2)\\n        //      account for 4 factors of dSq (8 s,c factors)\\n        // (At)_y^2 = (x^2 s^2 + xy2sc + y^2 c^2)\\n        //      account for 1 factor of dSq (2 s,c factors)\\n        ////////////////////////////////////////////////////////////////////////////////////\\n        int256 termNp = x.mulUpMagU(x).mulUpMagU(p.s).mulUpMagU(p.s) + y.mulUpMagU(y).mulUpMagU(p.c).mulUpMagU(p.c);\\n        termNp = termNp + x.mulUpMagU(y).mulUpMagU(p.s * 2).mulUpMagU(p.c);\\n\\n        int256 termXp = d.z.mulXpU(d.z) + d.w.mulXpU(d.w).divDownMagU(p.lambda).divDownMagU(p.lambda);\\n        termXp = termXp + (2 * d.z).mulXpU(d.w).divDownMagU(p.lambda);\\n        termXp = termXp.divXpU(d.dSq.mulXpU(d.dSq).mulXpU(d.dSq).mulXpU(d.dSq));\\n        val = (-termNp).mulDownXpToNpU(termXp);\\n\\n        // now calculate (At)_y^2 accounting for possible rounding error to round down\\n        // need to do 1/dSq in a way so that there is no overflow for large balances\\n        val = val + (termNp - 9).mulDownXpToNpU(SignedFixedPoint.ONE_XP.divXpU(d.dSq));\\n    }\\n\\n    /// @dev Rounds down. Also returns an estimate for the error of the term under the sqrt (!) and without the regular\\n    /// normal-precision error of O(1e-18).\\n    function calcInvariantSqrt(\\n        int256 x,\\n        int256 y,\\n        Params memory p,\\n        DerivedParams memory d\\n    ) internal pure returns (int256 val, int256 err) {\\n        val = calcMinAtxAChiySqPlusAtxSq(x, y, p, d) + calc2AtxAtyAChixAChiy(x, y, p, d);\\n        val = val + calcMinAtyAChixSqPlusAtySq(x, y, p, d);\\n        // error inside the square root is O((x^2 + y^2) * eps_xp) + O(eps_np), where eps_xp=1e-38, eps_np=1e-18\\n        // note that in terms of rounding down, error corrects for calc2AtxAtyAChixAChiy()\\n        // however, we also use this error to correct the invariant for an overestimate in swaps, it is all the same order though\\n        // Note the O(eps_np) term will be dealt with later, so not included yet\\n        // Note that the extra precision term doesn't propagate unless balances are > 100b\\n        err = (x.mulUpMagU(x) + y.mulUpMagU(y)) / 1e38;\\n        // we will account for the error later after the square root\\n        // mathematically, terms in square root > 0, so treat as 0 if it is < 0 b/c of rounding error\\n        val = val > 0 ? GyroPoolMath._sqrt(val.toUint256(), 5).toInt256() : 0;\\n    }\\n\\n    /** @dev Spot price of token 0 in units of token 1.\\n     *  See Prop. 12 in 2.1.6 Computing Prices */\\n    function calcSpotPrice0in1(\\n        uint256[] memory balances,\\n        Params memory params,\\n        DerivedParams memory derived,\\n        int256 invariant\\n    ) external pure returns (uint256 px) {\\n        // shift by virtual offsets to get v(t)\\n        Vector2 memory r = Vector2(invariant, invariant); // ignore r rounding for spot price, precision will be lost in TWAP anyway\\n        Vector2 memory ab = Vector2(virtualOffset0(params, derived, r), virtualOffset1(params, derived, r));\\n        Vector2 memory vec = Vector2(balances[0].toInt256() - ab.x, balances[1].toInt256() - ab.y);\\n\\n        // transform to circle to get Av(t)\\n        vec = mulA(params, vec);\\n        // compute prices on circle\\n        Vector2 memory pc = Vector2(vec.x.divDownMagU(vec.y), ONE);\\n\\n        // Convert prices back to ellipse\\n        // NB: These operations check for overflow because the price pc[0] might be large when vex.y is small.\\n        // SOMEDAY I think this probably can't actually happen due to our bounds on the different values. In this case we could do this unchecked as well.\\n        int256 pgx = scalarProd(pc, mulA(params, Vector2(ONE, 0)));\\n        px = pgx.divDownMag(scalarProd(pc, mulA(params, Vector2(0, ONE)))).toUint256();\\n    }\\n\\n    /** @dev Check that post-swap balances obey maximal asset bounds\\n     *  newBalance = post-swap balance of one asset\\n     *  assetIndex gives the index of the provided asset (0 = X, 1 = Y) */\\n    function checkAssetBounds(\\n        Params memory params,\\n        DerivedParams memory derived,\\n        Vector2 memory invariant,\\n        int256 newBal,\\n        uint8 assetIndex\\n    ) internal pure {\\n        if (assetIndex == 0) {\\n            int256 xPlus = maxBalances0(params, derived, invariant);\\n            if (!(newBal <= _MAX_BALANCES && newBal <= xPlus)) _grequire(false, GyroECLPPoolErrors.ASSET_BOUNDS_EXCEEDED);\\n            return;\\n        }\\n        {\\n            int256 yPlus = maxBalances1(params, derived, invariant);\\n            if (!(newBal <= _MAX_BALANCES && newBal <= yPlus)) _grequire(false, GyroECLPPoolErrors.ASSET_BOUNDS_EXCEEDED);\\n        }\\n    }\\n\\n    function calcOutGivenIn(\\n        uint256[] memory balances,\\n        uint256 amountIn,\\n        bool tokenInIsToken0,\\n        Params memory params,\\n        DerivedParams memory derived,\\n        Vector2 memory invariant\\n    ) external pure returns (uint256 amountOut) {\\n        function(int256, Params memory, DerivedParams memory, Vector2 memory) pure returns (int256) calcGiven;\\n        uint8 ixIn;\\n        uint8 ixOut;\\n        if (tokenInIsToken0) {\\n            ixIn = 0;\\n            ixOut = 1;\\n            calcGiven = calcYGivenX;\\n        } else {\\n            ixIn = 1;\\n            ixOut = 0;\\n            calcGiven = calcXGivenY;\\n        }\\n\\n        int256 balInNew = balances[ixIn].add(amountIn).toInt256(); // checked because amountIn is given by the user.\\n        checkAssetBounds(params, derived, invariant, balInNew, ixIn);\\n        int256 balOutNew = calcGiven(balInNew, params, derived, invariant);\\n        // Make sub checked as an extra check against numerical error; but this really should never happen\\n        amountOut = balances[ixOut].sub(balOutNew.toUint256());\\n        // The above line guarantees that amountOut <= balances[ixOut].\\n    }\\n\\n    function calcInGivenOut(\\n        uint256[] memory balances,\\n        uint256 amountOut,\\n        bool tokenInIsToken0,\\n        Params memory params,\\n        DerivedParams memory derived,\\n        Vector2 memory invariant\\n    ) external pure returns (uint256 amountIn) {\\n        function(int256, Params memory, DerivedParams memory, Vector2 memory) pure returns (int256) calcGiven;\\n        uint8 ixIn;\\n        uint8 ixOut;\\n        if (tokenInIsToken0) {\\n            ixIn = 0;\\n            ixOut = 1;\\n            calcGiven = calcXGivenY; // this reverses compared to calcOutGivenIn\\n        } else {\\n            ixIn = 1;\\n            ixOut = 0;\\n            calcGiven = calcYGivenX; // this reverses compared to calcOutGivenIn\\n        }\\n\\n        if (!(amountOut <= balances[ixOut])) _grequire(false, GyroECLPPoolErrors.ASSET_BOUNDS_EXCEEDED);\\n        int256 balOutNew = (balances[ixOut] - amountOut).toInt256();\\n        int256 balInNew = calcGiven(balOutNew, params, derived, invariant);\\n        // The checks in the following two lines should really always succeed; we keep them as extra safety against numerical error.\\n        checkAssetBounds(params, derived, invariant, balInNew, ixIn);\\n        amountIn = balInNew.toUint256().sub(balances[ixIn]);\\n    }\\n\\n    /** @dev Variables are named for calculating y given x\\n     *  to calculate x given y, change x->y, s->c, c->s, a_>b, b->a, tauBeta.x -> -tauAlpha.x, tauBeta.y -> tauAlpha.y\\n     *  calculates an overestimate of calculated reserve post-swap */\\n    function solveQuadraticSwap(\\n        int256 lambda,\\n        int256 x,\\n        int256 s,\\n        int256 c,\\n        Vector2 memory r, // overestimate in x component, underestimate in y\\n        Vector2 memory ab,\\n        Vector2 memory tauBeta,\\n        int256 dSq\\n    ) internal pure returns (int256) {\\n        // x component will round up, y will round down, use extra precision\\n        Vector2 memory lamBar;\\n        lamBar.x = SignedFixedPoint.ONE_XP - SignedFixedPoint.ONE_XP.divDownMagU(lambda).divDownMagU(lambda);\\n        // Note: The following cannot become negative even with errors because we require lambda >= 1 and\\n        // divUpMag returns the exact result if the quotient is representable in 18 decimals.\\n        lamBar.y = SignedFixedPoint.ONE_XP - SignedFixedPoint.ONE_XP.divUpMagU(lambda).divUpMagU(lambda);\\n        // using qparams struct to avoid \\\"stack too deep\\\"\\n        QParams memory q;\\n        // shift by the virtual offsets\\n        // note that we want an overestimate of offset here so that -x'*lambar*s*c is overestimated in signed direction\\n        // account for 1 factor of dSq (2 s,c factors)\\n        int256 xp = x - ab.x;\\n        if (xp > 0) {\\n            q.b = (-xp).mulDownMagU(s).mulDownMagU(c).mulUpXpToNpU(lamBar.y.divXpU(dSq));\\n        } else {\\n            q.b = (-xp).mulUpMagU(s).mulUpMagU(c).mulUpXpToNpU(lamBar.x.divXpU(dSq) + 1);\\n        }\\n\\n        // x component will round up, y will round down, use extra precision\\n        // account for 1 factor of dSq (2 s,c factors)\\n        Vector2 memory sTerm;\\n        // we wil take sTerm = 1 - sTerm below, using multiple lines to avoid \\\"stack too deep\\\"\\n        sTerm.x = lamBar.y.mulDownMagU(s).mulDownMagU(s).divXpU(dSq);\\n        sTerm.y = lamBar.x.mulUpMagU(s);\\n        sTerm.y = sTerm.y.mulUpMagU(s).divXpU(dSq + 1) + 1; // account for rounding error in dSq, divXp\\n        sTerm = Vector2(SignedFixedPoint.ONE_XP - sTerm.x, SignedFixedPoint.ONE_XP - sTerm.y);\\n        // ^^ NB: The components of sTerm are non-negative: We only need to worry about sTerm.y. This is non-negative b/c, because of bounds on lambda lamBar <= 1 - 1e-16, and division by dSq ensures we have enough precision so that rounding errors are never magnitude 1e-16.\\n\\n        // now compute the argument of the square root\\n        q.c = -calcXpXpDivLambdaLambda(x, r, lambda, s, c, tauBeta, dSq);\\n        q.c = q.c + r.y.mulDownMagU(r.y).mulDownXpToNpU(sTerm.y);\\n        // the square root is always being subtracted, so round it down to overestimate the end balance\\n        // mathematically, terms in square root > 0, so treat as 0 if it is < 0 b/c of rounding error\\n        q.c = q.c > 0 ? GyroPoolMath._sqrt(q.c.toUint256(), 5).toInt256() : 0;\\n\\n        // calculate the result in q.a\\n        if (q.b - q.c > 0) {\\n            q.a = (q.b - q.c).mulUpXpToNpU(SignedFixedPoint.ONE_XP.divXpU(sTerm.y) + 1);\\n        } else {\\n            q.a = (q.b - q.c).mulUpXpToNpU(SignedFixedPoint.ONE_XP.divXpU(sTerm.x));\\n        }\\n\\n        // lastly, add the offset, note that we want an overestimate of offset here\\n        return q.a + ab.y;\\n    }\\n\\n    /** @dev Calculates x'x'/\u03bb^2 where x' = x - b = x - r (A^{-1}tau(beta))_x\\n     *  calculates an overestimate\\n     *  to calculate y'y', change x->y, s->c, c->s, tauBeta.x -> -tauAlpha.x, tauBeta.y -> tauAlpha.y  */\\n    function calcXpXpDivLambdaLambda(\\n        int256 x,\\n        Vector2 memory r, // overestimate in x component, underestimate in y\\n        int256 lambda,\\n        int256 s,\\n        int256 c,\\n        Vector2 memory tauBeta,\\n        int256 dSq\\n    ) internal pure returns (int256) {\\n        //////////////////////////////////////////////////////////////////////////////////\\n        // x'x'/lambda^2 = r^2 c^2 tau(beta)_x^2\\n        //      + ( r^2 2s c tau(beta)_x tau(beta)_y - rx 2c tau(beta)_x ) / lambda\\n        //      + ( r^2 s^2 tau(beta)_y^2 - rx 2s tau(beta)_y + x^2 ) / lambda^2\\n        //////////////////////////////////////////////////////////////////////////////////\\n        // to save gas, pre-compute dSq^2 as it will be used 3 times, and r.x^2 as it will be used 2-3 times\\n        // sqVars = (dSq^2, r.x^2)\\n        Vector2 memory sqVars = Vector2(dSq.mulXpU(dSq), r.x.mulUpMagU(r.x));\\n\\n        QParams memory q; // for working terms\\n        // q.a = r^2 s 2c tau(beta)_x tau(beta)_y\\n        //      account for 2 factors of dSq (4 s,c factors)\\n        int256 termXp = tauBeta.x.mulXpU(tauBeta.y).divXpU(sqVars.x);\\n        if (termXp > 0) {\\n            q.a = sqVars.y.mulUpMagU(2 * s);\\n            q.a = q.a.mulUpMagU(c).mulUpXpToNpU(termXp + 7); // +7 account for rounding in termXp\\n        } else {\\n            q.a = r.y.mulDownMagU(r.y).mulDownMagU(2 * s);\\n            q.a = q.a.mulDownMagU(c).mulUpXpToNpU(termXp);\\n        }\\n\\n        // -rx 2c tau(beta)_x\\n        //      account for 1 factor of dSq (2 s,c factors)\\n        if (tauBeta.x < 0) {\\n            // +3 account for rounding in extra precision terms\\n            q.b = r.x.mulUpMagU(x).mulUpMagU(2 * c).mulUpXpToNpU(-tauBeta.x.divXpU(dSq) + 3);\\n        } else {\\n            q.b = (-r.y).mulDownMagU(x).mulDownMagU(2 * c).mulUpXpToNpU(tauBeta.x.divXpU(dSq));\\n        }\\n        // q.a later needs to be divided by lambda\\n        q.a = q.a + q.b;\\n\\n        // q.b = r^2 s^2 tau(beta)_y^2\\n        //      account for 2 factors of dSq (4 s,c factors)\\n        termXp = tauBeta.y.mulXpU(tauBeta.y).divXpU(sqVars.x) + 7; // +7 account for rounding in termXp\\n        q.b = sqVars.y.mulUpMagU(s);\\n        q.b = q.b.mulUpMagU(s).mulUpXpToNpU(termXp);\\n\\n        // q.c = -rx 2s tau(beta)_y, recall that tauBeta.y > 0 so round lower in magnitude\\n        //      account for 1 factor of dSq (2 s,c factors)\\n        q.c = (-r.y).mulDownMagU(x).mulDownMagU(2 * s).mulUpXpToNpU(tauBeta.y.divXpU(dSq));\\n\\n        // (q.b + q.c + x^2) / lambda\\n        q.b = q.b + q.c + x.mulUpMagU(x);\\n        q.b = q.b > 0 ? q.b.divUpMagU(lambda) : q.b.divDownMagU(lambda);\\n\\n        // remaining calculation is (q.a + q.b) / lambda\\n        q.a = q.a + q.b;\\n        q.a = q.a > 0 ? q.a.divUpMagU(lambda) : q.a.divDownMagU(lambda);\\n\\n        // + r^2 c^2 tau(beta)_x^2\\n        //      account for 2 factors of dSq (4 s,c factors)\\n        termXp = tauBeta.x.mulXpU(tauBeta.x).divXpU(sqVars.x) + 7; // +7 account for rounding in termXp\\n        int256 val = sqVars.y.mulUpMagU(c).mulUpMagU(c);\\n        return (val.mulUpXpToNpU(termXp)) + q.a;\\n    }\\n\\n    /** @dev compute y such that (x, y) satisfy the invariant at the given parameters.\\n     *  Note that we calculate an overestimate of y\\n     *   See Prop 14 in section 2.2.2 Trade Execution */\\n    function calcYGivenX(\\n        int256 x,\\n        Params memory params,\\n        DerivedParams memory d,\\n        Vector2 memory r // overestimate in x component, underestimate in y\\n    ) internal pure returns (int256 y) {\\n        // want to overestimate the virtual offsets except in a particular setting that will be corrected for later\\n        // note that the error correction in the invariant should more than make up for uncaught rounding directions (in 38 decimals) in virtual offsets\\n        Vector2 memory ab = Vector2(virtualOffset0(params, d, r), virtualOffset1(params, d, r));\\n        y = solveQuadraticSwap(params.lambda, x, params.s, params.c, r, ab, d.tauBeta, d.dSq);\\n    }\\n\\n    function calcXGivenY(\\n        int256 y,\\n        Params memory params,\\n        DerivedParams memory d,\\n        Vector2 memory r // overestimate in x component, underestimate in y\\n    ) internal pure returns (int256 x) {\\n        // want to overestimate the virtual offsets except in a particular setting that will be corrected for later\\n        // note that the error correction in the invariant should more than make up for uncaught rounding directions (in 38 decimals) in virtual offsets\\n        Vector2 memory ba = Vector2(virtualOffset1(params, d, r), virtualOffset0(params, d, r));\\n        // change x->y, s->c, c->s, b->a, a->b, tauBeta.x -> -tauAlpha.x, tauBeta.y -> tauAlpha.y vs calcYGivenX\\n        x = solveQuadraticSwap(params.lambda, y, params.c, params.s, r, ba, Vector2(-d.tauAlpha.x, d.tauAlpha.y), d.dSq);\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/GyroFixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Gyro-1.0\\n// for information on licensing please see the README in the GitHub repository <https://github.com/gyrostable/concentrated-lps>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\n// Gyroscope: Copied from Balancer's FixedPoint library. We added a few additional functions and made _require()s more\\n// gas-efficient.\\n// We renamed this to `GyroFixedPoint` to avoid name clashes with functions used in other Balancer libraries we use.\\n\\nlibrary GyroFixedPoint {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    uint256 internal constant MIDDECIMAL = 1e9; // splits the fixed point decimals into two equal parts.\\n\\n    uint256 internal constant MAX_POW_RELATIVE_ERROR = 10000; // 10^(-14)\\n\\n    // Minimum base for the power function when the exponent is 'free' (larger than ONE).\\n    uint256 internal constant MIN_POW_BASE_FREE_EXPONENT = 0.7e18;\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        uint256 c = a + b;\\n        if (!(c >= a)) {\\n            _require(false, Errors.ADD_OVERFLOW);\\n        }\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        if (!(b <= a)) {\\n            _require(false, Errors.SUB_OVERFLOW);\\n        }\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        if (!(a == 0 || product / a == b)) {\\n            _require(false, Errors.MUL_OVERFLOW);\\n        }\\n\\n        return product / ONE;\\n    }\\n\\n    /// @dev \\\"U\\\" denotes version of the math function that does not check for overflows in order to save gas\\n    function mulDownU(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        if (!(a == 0 || product / a == b)) {\\n            _require(false, Errors.MUL_OVERFLOW);\\n        }\\n\\n        if (product == 0) {\\n            return 0;\\n        }\\n\\n        // The traditional divUp formula is:\\n        // divUp(x, y) := (x + y - 1) / y\\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\\n        // divUp(x, y) := (x - 1) / y + 1\\n        // Note that this requires x != 0, which we already tested for.\\n\\n        return ((product - 1) / ONE) + 1;\\n    }\\n\\n    function mulUpU(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n\\n        if (product == 0) {\\n            return 0;\\n        }\\n        // The traditional divUp formula is:\\n        // divUp(x, y) := (x + y - 1) / y\\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\\n        // divUp(x, y) := (x - 1) / y + 1\\n        // Note that this requires x != 0, which we already tested for.\\n\\n        return ((product - 1) / ONE) + 1;\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            _require(false, Errors.ZERO_DIVISION);\\n        }\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 aInflated = a * ONE;\\n        if (!(aInflated / a == ONE)) {\\n            _require(false, Errors.DIV_INTERNAL); // mul overflow\\n        }\\n\\n        return aInflated / b;\\n    }\\n\\n    function divDownU(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            _require(false, Errors.ZERO_DIVISION);\\n        }\\n\\n        return (a * ONE) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            _require(false, Errors.ZERO_DIVISION);\\n        }\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 aInflated = a * ONE;\\n        if (!(aInflated / a == ONE)) {\\n            _require(aInflated / a == ONE, Errors.DIV_INTERNAL); // mul overflow\\n        }\\n\\n        // The traditional divUp formula is:\\n        // divUp(x, y) := (x + y - 1) / y\\n        // To avoid intermediate overflow in the addition, we distribute the division and get:\\n        // divUp(x, y) := (x - 1) / y + 1\\n        // Note that this requires x != 0, which we already tested for.\\n\\n        return ((aInflated - 1) / b) + 1;\\n    }\\n\\n    function divUpU(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            _require(false, Errors.ZERO_DIVISION);\\n        }\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n        return ((a * ONE - 1) / b) + 1;\\n    }\\n\\n    /**\\n     * @dev Like mulDown(), but it also works in some situations where mulDown(a, b) would overflow because a * b is too\\n     * large. We achieve this by splitting up `a` into its integer and its fractional part. `a` should be the bigger of\\n     * the two numbers to achieve the best overflow guarantees.\\n     * This won't overflow if both of\\n     *   - a * b \u2264 1.15e95 (raw values, i.e., a * b \u2264 1.15e59 with respect to the fixed-point values that they describe)\\n     *   - b \u2264 1.15e59 (raw values, i.e., a \u2264 1.15e41 with respect to the values that a describes)\\n     * hold. That's better than mulDown(), where we would need a * b \u2264 1.15e77 approximately.\\n     */\\n    function mulDownLargeSmall(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return add(Math.mul(a / ONE, b), mulDown(a % ONE, b));\\n    }\\n\\n    function mulDownLargeSmallU(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a / ONE) * b + mulDownU(a % ONE, b);\\n    }\\n\\n    /**\\n     * @dev Like divDown(), but it also works when `a` would overflow in `divDown`. This is safe if both of\\n     * - a \u2264 1.15e68 (raw, i.e., a \u2264 1.15e50 with respect to the value that is represented)\\n     * - b \u2265 1e9 (raw, i.e., b \u2265 1e-9 with respect to the value represented)\\n     * hold. For `divDown` it's 1.15e59 and 1.15e41, respectively.\\n     * Introduces some rounding error that is relevant iff b is small.\\n     */\\n    function divDownLarge(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divDownLarge(a, b, MIDDECIMAL, MIDDECIMAL);\\n    }\\n\\n    function divDownLargeU(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return divDownLargeU(a, b, MIDDECIMAL, MIDDECIMAL);\\n    }\\n\\n    /**\\n     * @dev Like divDown(), but it also works when `a` would overflow in `divDown`. d and e must be chosen such that\\n     * d * e = 1e18 (raw numbers, or d * e = 1e-18 with respect to the numbers they represent in fixed point). Note that\\n     * this requires d, e \u2264 1e18 (raw, or d, e \u2264 1 with respect to the numbers represented).\\n     * This operation is safe if both of\\n     * - a * d \u2264 1.15e77 (raw, i.e., a * d \u2264 1.15e41 with respect to the value that is represented)\\n     * - b \u2265 e (with respect to raw or represented numbers)\\n     * hold.\\n     * Introduces some rounding error that is relevant iff b is small and is proportional to e.\\n     */\\n    function divDownLarge(\\n        uint256 a,\\n        uint256 b,\\n        uint256 d,\\n        uint256 e\\n    ) internal pure returns (uint256) {\\n        return Math.divDown(Math.mul(a, d), Math.divUp(b, e));\\n    }\\n\\n    /// @dev e is assumed to be non-zero, and so division by zero is not checked for it\\n    function divDownLargeU(\\n        uint256 a,\\n        uint256 b,\\n        uint256 d,\\n        uint256 e\\n    ) internal pure returns (uint256) {\\n        // (a * d) / (b / e)\\n\\n        if (b == 0) {\\n            // In this case only, the denominator of the outer division is zero, and we revert\\n            _require(false, Errors.ZERO_DIVISION);\\n        }\\n\\n        uint256 denom = 1 + (b - 1) / e;\\n\\n        return (a * d) / denom;\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding down. The result is guaranteed to not be above\\n     * the true value (that is, the error function expected - actual is always positive).\\n     */\\n    function powDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        if (raw < maxError) {\\n            return 0;\\n        }\\n        return sub(raw, maxError);\\n    }\\n\\n    /**\\n     * @dev Returns x^y, assuming both are fixed point numbers, rounding up. The result is guaranteed to not be below\\n     * the true value (that is, the error function expected - actual is always negative).\\n     */\\n    function powUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        uint256 raw = LogExpMath.pow(x, y);\\n        uint256 maxError = add(mulUp(raw, MAX_POW_RELATIVE_ERROR), 1);\\n\\n        return add(raw, maxError);\\n    }\\n\\n    /**\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\n     *\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\n     * prevents intermediate negative values.\\n     */\\n    function complement(uint256 x) internal pure returns (uint256) {\\n        return (x < ONE) ? (ONE - x) : 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/GyroErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Gyro-1.0\\n// for information on licensing please see the README in the GitHub repository <https://github.com/gyrostable/concentrated-lps>.\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _grequire(bool condition, uint256 errorCode) pure {\\n    if (!condition) _grevert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _grequire(\\n    bool condition,\\n    uint256 errorCode,\\n    bytes3 prefix\\n) pure {\\n    if (!condition) _grevert(errorCode, prefix);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n * Uses the default 'BAL' prefix for the error code\\n */\\nfunction _grevert(uint256 errorCode) pure {\\n    _grevert(errorCode, 0x475952); // This is the raw byte representation of \\\"GYR\\\"\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _grevert(uint256 errorCode, bytes3 prefix) pure {\\n    uint256 prefixUint = uint256(uint24(prefix));\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string.\\n        // We first append the '#' character (0x23) to the prefix. In the case of 'BAL', it results in 0x42414c23 ('BAL#')\\n        // Then, we shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n        let formattedPrefix := shl(24, add(0x23, shl(8, prefixUint)))\\n\\n        let revertReason := shl(200, add(formattedPrefix, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary GyroErrors {\\n    uint256 internal constant ZERO_ADDRESS = 105;\\n}\\n\"\r\n    },\r\n    \"libraries/SignedFixedPoint.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Gyro-1.0\\n// for information on licensing please see the README in the GitHub repository <https://github.com/gyrostable/concentrated-lps>.\\n\\npragma solidity 0.7.6;\\n\\n// import \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"./GyroFixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol\\\";\\n\\n/* solhint-disable private-vars-leading-underscore */\\n\\n/// @dev Signed fixed point operations based on Balancer's FixedPoint library.\\n/// Note: The `{mul,div}{UpMag,DownMag}()` functions do *not* round up or down, respectively,\\n/// in a signed fashion (like ceil and floor operations), but *in absolute value* (or *magnitude*), i.e.,\\n/// towards 0. This is useful in some applications.\\nlibrary SignedFixedPoint {\\n    int256 internal constant ONE = 1e18; // 18 decimal places\\n    // setting extra precision at 38 decimals, which is the most we can get w/o overflowing on normal multiplication\\n    // this allows 20 extra digits to absorb error when multiplying by large numbers\\n    int256 internal constant ONE_XP = 1e38; // 38 decimal places\\n\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        // Fixed Point addition is the same as regular checked addition\\n\\n        int256 c = a + b;\\n        if (!(b >= 0 ? c >= a : c < a)) _require(false, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    function addMag(int256 a, int256 b) internal pure returns (int256 c) {\\n        // add b in the same signed direction as a, i.e. increase the magnitude of a by b\\n        c = a > 0 ? add(a, b) : sub(a, b);\\n    }\\n\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        // Fixed Point subtraction is the same as regular checked subtraction\\n\\n        int256 c = a - b;\\n        if (!(b <= 0 ? c >= a : c < a)) _require(false, Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /// @dev This rounds towards 0, i.e., down *in absolute value*!\\n    function mulDownMag(int256 a, int256 b) internal pure returns (int256) {\\n        int256 product = a * b;\\n        if (!(a == 0 || product / a == b)) _require(false, Errors.MUL_OVERFLOW);\\n\\n        return product / ONE;\\n    }\\n\\n    /// @dev this implements mulDownMag w/o checking for over/under-flows, which saves significantly on gas if these aren't needed\\n    function mulDownMagU(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    /// @dev This rounds away from 0, i.e., up *in absolute value*!\\n    function mulUpMag(int256 a, int256 b) internal pure returns (int256) {\\n        int256 product = a * b;\\n        if (!(a == 0 || product / a == b)) _require(false, Errors.MUL_OVERFLOW);\\n\\n        // If product > 0, the result should be ceil(p/ONE) = floor((p-1)/ONE) + 1, where floor() is implicit. If\\n        // product < 0, the result should be floor(p/ONE) = ceil((p+1)/ONE) - 1, where ceil() is implicit.\\n        // Addition for signed numbers: Case selection so we round away from 0, not always up.\\n        if (product > 0) return ((product - 1) / ONE) + 1;\\n        else if (product < 0) return ((product + 1) / ONE) - 1;\\n        // product == 0\\n        return 0;\\n    }\\n\\n    /// @dev this implements mulUpMag w/o checking for over/under-flows, which saves significantly on gas if these aren't needed\\n    function mulUpMagU(int256 a, int256 b) internal pure returns (int256) {\\n        int256 product = a * b;\\n\\n        // If product > 0, the result should be ceil(p/ONE) = floor((p-1)/ONE) + 1, where floor() is implicit. If\\n        // product < 0, the result should be floor(p/ONE) = ceil((p+1)/ONE) - 1, where ceil() is implicit.\\n        // Addition for signed numbers: Case selection so we round away from 0, not always up.\\n        if (product > 0) return ((product - 1) / ONE) + 1;\\n        else if (product < 0) return ((product + 1) / ONE) - 1;\\n        // product == 0\\n        return 0;\\n    }\\n\\n    /// @dev Rounds towards 0, i.e., down in absolute value.\\n    function divDownMag(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) _require(false, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        int256 aInflated = a * ONE;\\n        if (aInflated / a != ONE) _require(false, Errors.DIV_INTERNAL);\\n\\n        return aInflated / b;\\n    }\\n\\n    /// @dev this implements divDownMag w/o checking for over/under-flows, which saves significantly on gas if these aren't needed\\n    function divDownMagU(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) _require(false, Errors.ZERO_DIVISION);\\n        return (a * ONE) / b;\\n    }\\n\\n    /// @dev Rounds away from 0, i.e., up in absolute value.\\n    function divUpMag(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) _require(false, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        if (b < 0) {\\n            // Required so the below is correct.\\n            b = -b;\\n            a = -a;\\n        }\\n\\n        int256 aInflated = a * ONE;\\n        if (aInflated / a != ONE) _require(false, Errors.DIV_INTERNAL);\\n\\n        if (aInflated > 0) return ((aInflated - 1) / b) + 1;\\n        return ((aInflated + 1) / b) - 1;\\n    }\\n\\n    /// @dev this implements divUpMag w/o checking for over/under-flows, which saves significantly on gas if these aren't needed\\n    function divUpMagU(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) _require(false, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // SOMEDAY check if we can shave off some gas by logically refactoring this vs the below case distinction into one (on a * b or so).\\n        if (b < 0) {\\n            // Ensure b > 0 so the below is correct.\\n            b = -b;\\n            a = -a;\\n        }\\n\\n        if (a > 0) return ((a * ONE - 1) / b) + 1;\\n        return ((a * ONE + 1) / b) - 1;\\n    }\\n\\n    /// @dev multiplies two extra precision numbers (with 38 decimals)\\n    /// rounds down in magnitude but this shouldn't matter\\n    /// multiplication can overflow if a,b are > 2 in magnitude\\n    function mulXp(int256 a, int256 b) internal pure returns (int256) {\\n        int256 product = a * b;\\n        if (!(a == 0 || product / a == b)) _require(false, Errors.MUL_OVERFLOW);\\n\\n        return product / ONE_XP;\\n    }\\n\\n    /// @dev multiplies two extra precision numbers (with 38 decimals)\\n    /// rounds down in magnitude but this shouldn't matter\\n    /// multiplication can overflow if a,b are > 2 in magnitude\\n    /// this implements mulXp w/o checking for over/under-flows, which saves significantly on gas if these aren't needed\\n    function mulXpU(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / ONE_XP;\\n    }\\n\\n    /// @dev divides two extra precision numbers (with 38 decimals)\\n    /// rounds down in magnitude but this shouldn't matter\\n    /// can overflow if a > 2 or b << 1 in magnitude\\n    function divXp(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) _require(false, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        int256 aInflated = a * ONE_XP;\\n        if (aInflated / a != ONE_XP) _require(false, Errors.DIV_INTERNAL);\\n\\n        return aInflated / b;\\n    }\\n\\n    /// @dev divides two extra precision numbers (with 38 decimals)\\n    /// rounds down in magnitude but this shouldn't matter\\n    /// can overflow if a > 2 or b << 1 in magnitude\\n    /// this implements divXp w/o checking for over/under-flows, which saves significantly on gas if these aren't needed\\n    function divXpU(int256 a, int256 b) internal pure returns (int256) {\\n        if (b == 0) _require(false, Errors.ZERO_DIVISION);\\n\\n        return (a * ONE_XP) / b;\\n    }\\n\\n    /// @dev multiplies normal precision a with extra precision b (with 38 decimals)\\n    /// Rounds down in signed direction\\n    /// returns normal precision of the product\\n    function mulDownXpToNp(int256 a, int256 b) internal pure returns (int256) {\\n        int256 b1 = b / 1e19;\\n        int256 prod1 = a * b1;\\n        if (!(a == 0 || prod1 / a == b1)) _require(false, Errors.MUL_OVERFLOW);\\n        int256 b2 = b % 1e19;\\n        int256 prod2 = a * b2;\\n        if (!(a == 0 || prod2 / a == b2)) _require(false, Errors.MUL_OVERFLOW);\\n        return prod1 >= 0 && prod2 >= 0 ? (prod1 + prod2 / 1e19) / 1e19 : (prod1 + prod2 / 1e19 + 1) / 1e19 - 1;\\n    }\\n\\n    /// @dev multiplies normal precision a with extra precision b (with 38 decimals)\\n    /// Rounds down in signed direction\\n    /// returns normal precision of the product\\n    /// this implements mulDownXpToNp w/o checking for over/under-flows, which saves significantly on gas if these aren't needed\\n    function mulDownXpToNpU(int256 a, int256 b) internal pure returns (int256) {\\n        int256 b1 = b / 1e19;\\n        int256 b2 = b % 1e19;\\n        // SOMEDAY check if we eliminate these vars and save some gas (by only checking the sign of prod1, say)\\n        int256 prod1 = a * b1;\\n        int256 prod2 = a * b2;\\n        return prod1 >= 0 && prod2 >= 0 ? (prod1 + prod2 / 1e19) / 1e19 : (prod1 + prod2 / 1e19 + 1) / 1e19 - 1;\\n    }\\n\\n    /// @dev multiplies normal precision a with extra precision b (with 38 decimals)\\n    /// Rounds up in signed direction\\n    /// returns normal precision of the product\\n    function mulUpXpToNp(int256 a, int256 b) internal pure returns (int256) {\\n        int256 b1 = b / 1e19;\\n        int256 prod1 = a * b1;\\n        if (!(a == 0 || prod1 / a == b1)) _require(false, Errors.MUL_OVERFLOW);\\n        int256 b2 = b % 1e19;\\n        int256 prod2 = a * b2;\\n        if (!(a == 0 || prod2 / a == b2)) _require(false, Errors.MUL_OVERFLOW);\\n        return prod1 <= 0 && prod2 <= 0 ? (prod1 + prod2 / 1e19) / 1e19 : (prod1 + prod2 / 1e19 - 1) / 1e19 + 1;\\n    }\\n\\n    /// @dev multiplies normal precision a with extra precision b (with 38 decimals)\\n    /// Rounds up in signed direction\\n    /// returns normal precision of the product\\n    /// this implements mulUpXpToNp w/o checking for over/under-flows, which saves significantly on gas if these aren't needed\\n    function mulUpXpToNpU(int256 a, int256 b) internal pure returns (int256) {\\n        int256 b1 = b / 1e19;\\n        int256 b2 = b % 1e19;\\n        // SOMEDAY check if we eliminate these vars and save some gas (by only checking the sign of prod1, say)\\n        int256 prod1 = a * b1;\\n        int256 prod2 = a * b2;\\n        return prod1 <= 0 && prod2 <= 0 ? (prod1 + prod2 / 1e19) / 1e19 : (prod1 + prod2 / 1e19 - 1) / 1e19 + 1;\\n    }\\n\\n    // not implementing the pow functions right now b/c it's annoying and slightly ill-defined, and we don't use them.\\n\\n    /**\\n     * @dev Returns the complement of a value (1 - x), capped to 0 if x is larger than 1.\\n     *\\n     * Useful when computing the complement for values with some level of relative error, as it strips this error and\\n     * prevents intermediate negative values.\\n     */\\n    function complement(int256 x) internal pure returns (int256) {\\n        if (x >= ONE || x <= 0) return 0;\\n        return ONE - x;\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/GyroPoolMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Gyro-1.0\\n// for information on licensing please see the README in the GitHub repository <https://github.com/gyrostable/concentrated-lps>.\\n\\npragma solidity 0.7.6;\\n\\n// import \\\"@balancer-labs/v2-solidity-utils/contracts/math/FixedPoint.sol\\\";\\nimport \\\"./GyroFixedPoint.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\\\";\\nimport \\\"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\\\";\\n\\nlibrary GyroPoolMath {\\n    using GyroFixedPoint for uint256;\\n\\n    uint256 private constant SQRT_1E_NEG_1 = 316227766016837933;\\n    uint256 private constant SQRT_1E_NEG_3 = 31622776601683793;\\n    uint256 private constant SQRT_1E_NEG_5 = 3162277660168379;\\n    uint256 private constant SQRT_1E_NEG_7 = 316227766016837;\\n    uint256 private constant SQRT_1E_NEG_9 = 31622776601683;\\n    uint256 private constant SQRT_1E_NEG_11 = 3162277660168;\\n    uint256 private constant SQRT_1E_NEG_13 = 316227766016;\\n    uint256 private constant SQRT_1E_NEG_15 = 31622776601;\\n    uint256 private constant SQRT_1E_NEG_17 = 3162277660;\\n\\n    // Note: this function is identical to that in WeightedMath.sol audited by Balancer\\n    function _calcAllTokensInGivenExactBptOut(\\n        uint256[] memory balances,\\n        uint256 bptOut,\\n        uint256 totalBPT\\n    ) internal pure returns (uint256[] memory amountsIn) {\\n        /************************************************************************************\\n        // tokensInForExactBptOut                                                          //\\n        //                              /   bptOut   \\\\                                     //\\n        // amountsIn[i] = balances[i] * | ------------ |                                   //\\n        //                              \\\\  totalBPT  /                                     //\\n        ************************************************************************************/\\n        // We adjust the order of operations to minimize error amplification, assuming that\\n        // balances[i], totalBPT > 1 (which is usually the case).\\n        // Tokens in, so we round up overall.\\n\\n        amountsIn = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsIn[i] = balances[i].mulUp(bptOut).divUp(totalBPT);\\n        }\\n\\n        return amountsIn;\\n    }\\n\\n    // Note: this function is identical to that in WeightedMath.sol audited by Balancer\\n    function _calcTokensOutGivenExactBptIn(\\n        uint256[] memory balances,\\n        uint256 bptIn,\\n        uint256 totalBPT\\n    ) internal pure returns (uint256[] memory amountsOut) {\\n        /**********************************************************************************************\\n        // exactBPTInForTokensOut                                                                    //\\n        // (per token)                                                                               //\\n        //                                /        bptIn         \\\\                                   //\\n        // amountsOut[i] = balances[i] * | ---------------------  |                                  //\\n        //                                \\\\       totalBPT       /                                   //\\n        **********************************************************************************************/\\n        // We adjust the order of operations to minimize error amplification, assuming that\\n        // balances[i], totalBPT > 1 (which is usually the case).\\n        // Since we're computing an amount out, we round down overall. This means rounding down on both the\\n        // multiplication and division.\\n\\n        amountsOut = new uint256[](balances.length);\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            amountsOut[i] = balances[i].mulDown(bptIn).divDown(totalBPT);\\n        }\\n\\n        return amountsOut;\\n    }\\n\\n    /** @dev Calculates protocol fees due to Gyro and Balancer\\n     *   Note: we do this differently than normal Balancer pools by paying fees in BPT tokens\\n     *   b/c this is much more gas efficient than doing many transfers of underlying assets\\n     *   This function gets protocol fee parameters from GyroConfig\\n     */\\n    function _calcProtocolFees(\\n        uint256 previousInvariant,\\n        uint256 currentInvariant,\\n        uint256 currentBptSupply,\\n        uint256 protocolSwapFeePerc,\\n        uint256 protocolFeeGyroPortion\\n    ) internal pure returns (uint256, uint256) {\\n        /*********************************************************************************\\n        /*  Protocol fee collection should decrease the invariant L by\\n        *        Delta L = protocolSwapFeePerc * (currentInvariant - previousInvariant)\\n        *   To take these fees in BPT LP shares, the protocol mints Delta S new LP shares where\\n        *        Delta S = S * Delta L / ( currentInvariant - Delta L )\\n        *   where S = current BPT supply\\n        *   The protocol then splits the fees (in BPT) considering protocolFeeGyroPortion\\n        *   See also the write-up, Proposition 7.\\n        *********************************************************************************/\\n\\n        if (currentInvariant <= previousInvariant) {\\n            // This shouldn't happen outside of rounding errors, but have this safeguard nonetheless to prevent the Pool\\n            // from entering a locked state in which joins and exits revert while computing accumulated swap fees.\\n            // NB: This condition is also used by the pools to indicate that _lastInvariant is invalid and should be ignored.\\n            return (0, 0);\\n        }\\n\\n        // Calculate due protocol fees in BPT terms\\n        // We round down to prevent issues in the Pool's accounting, even if it means paying slightly less in protocol\\n        // fees to the Vault.\\n        // For the numerator, we need to round down delta L. Also for the denominator b/c subtracted\\n        // Ordering multiplications for best fixed point precision considering that S and currentInvariant-previousInvariant could be large\\n        uint256 numerator = (currentBptSupply.mulDown(currentInvariant.sub(previousInvariant))).mulDown(protocolSwapFeePerc);\\n        uint256 diffInvariant = protocolSwapFeePerc.mulDown(currentInvariant.sub(previousInvariant));\\n        uint256 denominator = currentInvariant.sub(diffInvariant);\\n        uint256 deltaS = numerator.divDown(denominator);\\n\\n        // Split fees between Gyro and Balancer\\n        uint256 gyroFees = protocolFeeGyroPortion.mulDown(deltaS);\\n        uint256 balancerFees = deltaS.sub(gyroFees);\\n\\n        return (gyroFees, balancerFees);\\n    }\\n\\n    /** @dev Implements square root algorithm using Newton's method and a first-guess optimisation **/\\n    function _sqrt(uint256 input, uint256 tolerance) internal pure returns (uint256) {\\n        if (input == 0) {\\n            return 0;\\n        }\\n\\n        uint256 guess = _makeInitialGuess(input);\\n\\n        // 7 iterations\\n        guess = (guess + ((input * GyroFixedPoint.ONE) / guess)) / 2;\\n        guess = (guess + ((input * GyroFixedPoint.ONE) / guess)) / 2;\\n        guess = (guess + ((input * GyroFixedPoint.ONE) / guess)) / 2;\\n        guess = (guess + ((input * GyroFixedPoint.ONE) / guess)) / 2;\\n        guess = (guess + ((input * GyroFixedPoint.ONE) / guess)) / 2;\\n        guess = (guess + ((input * GyroFixedPoint.ONE) / guess)) / 2;\\n        guess = (guess + ((input * GyroFixedPoint.ONE) / guess)) / 2;\\n\\n        // Check in some epsilon range\\n        // Check square is more or less correct\\n        uint256 guessSquared = guess.mulDown(guess);\\n        require(guessSquared <= input.add(guess.mulUp(tolerance)) && guessSquared >= input.sub(guess.mulUp(tolerance)), \\\"_sqrt FAILED\\\");\\n\\n        return guess;\\n    }\\n\\n    // function _makeInitialGuess10(uint256 input) internal pure returns (uint256) {\\n    //     uint256 orderUpperBound = 72;\\n    //     uint256 orderLowerBound = 0;\\n    //     uint256 orderMiddle;\\n\\n    //     orderMiddle = (orderUpperBound + orderLowerBound) / 2;\\n\\n    //     while (orderUpperBound - orderLowerBound != 1) {\\n    //         if (10**orderMiddle > input) {\\n    //             orderUpperBound = orderMiddle;\\n    //         } else {\\n    //             orderLowerBound = orderMiddle;\\n    //         }\\n    //     }\\n\\n    //     return 10**(orderUpperBound / 2);\\n    // }\\n\\n    function _makeInitialGuess(uint256 input) internal pure returns (uint256) {\\n        if (input >= GyroFixedPoint.ONE) {\\n            return (1 << (_intLog2Halved(input / GyroFixedPoint.ONE))) * GyroFixedPoint.ONE;\\n        } else {\\n            if (input <= 10) {\\n                return SQRT_1E_NEG_17;\\n            }\\n            if (input <= 1e2) {\\n                return 1e10;\\n            }\\n            if (input <= 1e3) {\\n                return SQRT_1E_NEG_15;\\n            }\\n            if (input <= 1e4) {\\n                return 1e11;\\n            }\\n            if (input <= 1e5) {\\n                return SQRT_1E_NEG_13;\\n            }\\n            if (input <= 1e6) {\\n                return 1e12;\\n            }\\n            if (input <= 1e7) {\\n                return SQRT_1E_NEG_11;\\n            }\\n            if (input <= 1e8) {\\n                return 1e13;\\n            }\\n            if (input <= 1e9) {\\n                return SQRT_1E_NEG_9;\\n            }\\n            if (input <= 1e10) {\\n                return 1e14;\\n            }\\n            if (input <= 1e11) {\\n                return SQRT_1E_NEG_7;\\n            }\\n            if (input <= 1e12) {\\n                return 1e15;\\n            }\\n            if (input <= 1e13) {\\n                return SQRT_1E_NEG_5;\\n            }\\n            if (input <= 1e14) {\\n                return 1e16;\\n            }\\n            if (input <= 1e15) {\\n                return SQRT_1E_NEG_3;\\n            }\\n            if (input <= 1e16) {\\n                return 1e17;\\n            }\\n            if (input <= 1e17) {\\n                return SQRT_1E_NEG_1;\\n            }\\n            return input;\\n        }\\n    }\\n\\n    function _intLog2Halved(uint256 x) public pure returns (uint256 n) {\\n        if (x >= 1 << 128) {\\n            x >>= 128;\\n            n += 64;\\n        }\\n        if (x >= 1 << 64) {\\n            x >>= 64;\\n            n += 32;\\n        }\\n        if (x >= 1 << 32) {\\n            x >>= 32;\\n            n += 16;\\n        }\\n        if (x >= 1 << 16) {\\n            x >>= 16;\\n            n += 8;\\n        }\\n        if (x >= 1 << 8) {\\n            x >>= 8;\\n            n += 4;\\n        }\\n        if (x >= 1 << 4) {\\n            x >>= 4;\\n            n += 2;\\n        }\\n        if (x >= 1 << 2) {\\n            x >>= 2;\\n            n += 1;\\n        }\\n    }\\n\\n    /** @dev If liquidity update is proportional so that price stays the same (\\\"balanced liquidity update\\\"), then this\\n     *  returns the invariant after that change. This is more efficient than calling `calculateInvariant()` on the updated balances.\\n     *  `isIncreaseLiq` denotes the sign of the update. See the writeup, Corollary 3 in Section 3.1.3. */\\n    function liquidityInvariantUpdate(\\n        uint256 uinvariant,\\n        uint256 changeBptSupply,\\n        uint256 currentBptSupply,\\n        bool isIncreaseLiq\\n    ) internal pure returns (uint256 unewInvariant) {\\n        //  change in invariant\\n        if (isIncreaseLiq) {\\n            // round new invariant up so that protocol fees not triggered\\n            uint256 dL = uinvariant.mulUp(changeBptSupply).divUp(currentBptSupply);\\n            unewInvariant = uinvariant.add(dL);\\n        } else {\\n            // round new invariant up (and so round dL down) so that protocol fees not triggered\\n            uint256 dL = uinvariant.mulDown(changeBptSupply).divDown(currentBptSupply);\\n            unewInvariant = uinvariant.sub(dL);\\n        }\\n    }\\n\\n    /** @dev If `deltaBalances` are such that, when changing `balances` by it, the price stays the same (\\\"balanced\\n     * liquidity update\\\"), then this returns the invariant after that change. This is more efficient than calling\\n     * `calculateInvariant()` on the updated balances. `isIncreaseLiq` denotes the sign of the update.\\n     * See the writeup, Corollary 3 in Section 3.1.3.\\n     *\\n     * DEPRECATED and will go out of use and be removed once pending changes to the ECLP are merged. Use the other liquidityInvariantUpdate() function instead!\\n     */\\n    function liquidityInvariantUpdate(\\n        uint256[] memory balances,\\n        uint256 uinvariant,\\n        uint256[] memory deltaBalances,\\n        bool isIncreaseLiq\\n    ) internal pure returns (uint256 unewInvariant) {\\n        uint256 largestBalanceIndex;\\n        uint256 largestBalance;\\n        for (uint256 i = 0; i < balances.length; i++) {\\n            if (balances[i] > largestBalance) {\\n                largestBalance = balances[i];\\n                largestBalanceIndex = i;\\n            }\\n        }\\n\\n        uint256 deltaInvariant = uinvariant.mulDown(deltaBalances[largestBalanceIndex]).divDown(balances[largestBalanceIndex]);\\n        unewInvariant = isIncreaseLiq ? uinvariant.add(deltaInvariant) : uinvariant.sub(deltaInvariant);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/eclp/GyroECLPPoolErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LicenseRef-Gyro-1.0\\n// for information on licensing please see the README in the GitHub repository <https://github.com/gyrostable/concentrated-lps>.\\n\\npragma solidity 0.7.6;\\n\\n// solhint-disable\\n\\nlibrary GyroECLPPoolErrors {\\n    // Input\\n    uint256 internal constant ADDRESS_IS_ZERO_ADDRESS = 120;\\n    uint256 internal constant TOKEN_IN_IS_NOT_TOKEN_0 = 121;\\n\\n    // Math\\n    uint256 internal constant PRICE_BOUNDS_WRONG = 354;\\n    uint256 internal constant ROTATION_VECTOR_WRONG = 355;\\n    uint256 internal constant ROTATION_VECTOR_NOT_NORMALIZED = 356;\\n    uint256 internal constant ASSET_BOUNDS_EXCEEDED = 357;\\n    uint256 internal constant DERIVED_TAU_NOT_NORMALIZED = 358;\\n    uint256 internal constant DERIVED_ZETA_WRONG = 359;\\n    uint256 internal constant STRETCHING_FACTOR_WRONG = 360;\\n    uint256 internal constant DERIVED_UVWZ_WRONG = 361;\\n    uint256 internal constant INVARIANT_DENOMINATOR_WRONG = 362;\\n    uint256 internal constant MAX_ASSETS_EXCEEDED = 363;\\n    uint256 internal constant MAX_INVARIANT_EXCEEDED = 363;\\n    uint256 internal constant DERIVED_DSQ_WRONG = 364;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow checks.\\n * Adapted from OpenZeppelin's SafeMath library\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the addition of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        _require(c >= a, Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        _require((b >= 0 && c >= a) || (b < 0 && c < a), Errors.ADD_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers of 256 bits, reverting on overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b <= a, Errors.SUB_OVERFLOW);\\n        uint256 c = a - b;\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        _require((b >= 0 && c <= a) || (b < 0 && c > a), Errors.SUB_OVERFLOW);\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers of 256 bits.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers of 256 bits.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a * b;\\n        _require(a == 0 || c / a == b, Errors.MUL_OVERFLOW);\\n        return c;\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        bool roundUp\\n    ) internal pure returns (uint256) {\\n        return roundUp ? divUp(a, b) : divDown(a, b);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n        return a / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        _require(b != 0, Errors.ZERO_DIVISION);\\n\\n        if (a == 0) {\\n            return 0;\\n        } else {\\n            return 1 + (a - 1) / b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/InputHelpers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./BalancerErrors.sol\\\";\\n\\nlibrary InputHelpers {\\n    function ensureInputLengthMatch(uint256 a, uint256 b) internal pure {\\n        _require(a == b, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureInputLengthMatch(\\n        uint256 a,\\n        uint256 b,\\n        uint256 c\\n    ) internal pure {\\n        _require(a == b && b == c, Errors.INPUT_LENGTH_MISMATCH);\\n    }\\n\\n    function ensureArrayIsSorted(IERC20[] memory array) internal pure {\\n        address[] memory addressArray;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            addressArray := array\\n        }\\n        ensureArrayIsSorted(addressArray);\\n    }\\n\\n    function ensureArrayIsSorted(address[] memory array) internal pure {\\n        if (array.length < 2) {\\n            return;\\n        }\\n\\n        address previous = array[0];\\n        for (uint256 i = 1; i < array.length; ++i) {\\n            address current = array[i];\\n            _require(previous < current, Errors.UNSORTED_ARRAY);\\n            previous = current;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/math/LogExpMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../helpers/BalancerErrors.sol\\\";\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2**254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\u02c6(x11)\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        if (y == 0) {\\n            // We solve the 0^0 indetermination by making it equal one.\\n            return uint256(ONE_18);\\n        }\\n\\n        if (x == 0) {\\n            return 0;\\n        }\\n\\n        // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n        // arrive at that result. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n        // x^y = exp(y * ln(x)).\\n\\n        // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n        _require(x < 2**255, Errors.X_OUT_OF_BOUNDS);\\n        int256 x_int256 = int256(x);\\n\\n        // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n        // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n        // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n        _require(y < MILD_EXPONENT_BOUND, Errors.Y_OUT_OF_BOUNDS);\\n        int256 y_int256 = int256(y);\\n\\n        int256 logx_times_y;\\n        if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n            int256 ln_36_x = _ln_36(x_int256);\\n\\n            // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n            // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n            // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n            // (downscaled) last 18 decimals.\\n            logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n        } else {\\n            logx_times_y = _ln(x_int256) * y_int256;\\n        }\\n        logx_times_y /= ONE_18;\\n\\n        // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n        _require(\\n            MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n            Errors.PRODUCT_OUT_OF_BOUNDS\\n        );\\n\\n        return uint256(exp(logx_times_y));\\n    }\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        _require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, Errors.INVALID_EXPONENT);\\n\\n        if (x < 0) {\\n            // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n            // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n            // Fixed point division requires multiplying by ONE_18.\\n            return ((ONE_18 * ONE_18) / exp(-x));\\n        }\\n\\n        // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n        // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n        // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n        // decomposition.\\n        // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest x_n.\\n        // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n        // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n        // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n        // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n        // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n        // decomposition.\\n\\n        // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n        // it and compute the accumulated product.\\n\\n        int256 firstAN;\\n        if (x >= x0) {\\n            x -= x0;\\n            firstAN = a0;\\n        } else if (x >= x1) {\\n            x -= x1;\\n            firstAN = a1;\\n        } else {\\n            firstAN = 1; // One with no decimal places\\n        }\\n\\n        // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n        // smaller terms.\\n        x *= 100;\\n\\n        // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n        // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n        int256 product = ONE_20;\\n\\n        if (x >= x2) {\\n            x -= x2;\\n            product = (product * a2) / ONE_20;\\n        }\\n        if (x >= x3) {\\n            x -= x3;\\n            product = (product * a3) / ONE_20;\\n        }\\n        if (x >= x4) {\\n            x -= x4;\\n            product = (product * a4) / ONE_20;\\n        }\\n        if (x >= x5) {\\n            x -= x5;\\n            product = (product * a5) / ONE_20;\\n        }\\n        if (x >= x6) {\\n            x -= x6;\\n            product = (product * a6) / ONE_20;\\n        }\\n        if (x >= x7) {\\n            x -= x7;\\n            product = (product * a7) / ONE_20;\\n        }\\n        if (x >= x8) {\\n            x -= x8;\\n            product = (product * a8) / ONE_20;\\n        }\\n        if (x >= x9) {\\n            x -= x9;\\n            product = (product * a9) / ONE_20;\\n        }\\n\\n        // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n        // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n        // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n        int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n        int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n        // The first term is simply x.\\n        term = x;\\n        seriesSum += term;\\n\\n        // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n        // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n        term = ((term * x) / ONE_20) / 2;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 3;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 4;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 5;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 6;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 7;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 8;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 9;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 10;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 11;\\n        seriesSum += term;\\n\\n        term = ((term * x) / ONE_20) / 12;\\n        seriesSum += term;\\n\\n        // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n        // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n        // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n        // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n        // and then drop two digits to return an 18 decimal value.\\n\\n        return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n    }\\n\\n    /**\\n     * @dev Logarithm (log(arg, base), with signed 18 decimal fixed point base and argument.\\n     */\\n    function log(int256 arg, int256 base) internal pure returns (int256) {\\n        // This performs a simple base change: log(arg, base) = ln(arg) / ln(base).\\n\\n        // Both logBase and logArg are computed as 36 decimal fixed point numbers, either by using ln_36, or by\\n        // upscaling.\\n\\n        int256 logBase;\\n        if (LN_36_LOWER_BOUND < base && base < LN_36_UPPER_BOUND) {\\n            logBase = _ln_36(base);\\n        } else {\\n            logBase = _ln(base) * ONE_18;\\n        }\\n\\n        int256 logArg;\\n        if (LN_36_LOWER_BOUND < arg && arg < LN_36_UPPER_BOUND) {\\n            logArg = _ln_36(arg);\\n        } else {\\n            logArg = _ln(arg) * ONE_18;\\n        }\\n\\n        // When dividing, we multiply by ONE_18 to arrive at a result with 18 decimal places\\n        return (logArg * ONE_18) / logBase;\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        // The real natural logarithm is not defined for negative numbers or zero.\\n        _require(a > 0, Errors.OUT_OF_BOUNDS);\\n        if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n            return _ln_36(a) / ONE_18;\\n        } else {\\n            return _ln(a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        if (a < ONE_18) {\\n            // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n            // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n            // Fixed point division requires multiplying by ONE_18.\\n            return (-_ln((ONE_18 * ONE_18) / a));\\n        }\\n\\n        // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n        // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n        // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n        // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n        // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n        // decomposition, which will be lower than the smallest a_n.\\n        // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n        // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n        // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n        // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n        // ONE_18 to convert them to fixed point.\\n        // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n        // by it and compute the accumulated sum.\\n\\n        int256 sum = 0;\\n        if (a >= a0 * ONE_18) {\\n            a /= a0; // Integer, not fixed point division\\n            sum += x0;\\n        }\\n\\n        if (a >= a1 * ONE_18) {\\n            a /= a1; // Integer, not fixed point division\\n            sum += x1;\\n        }\\n\\n        // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n        sum *= 100;\\n        a *= 100;\\n\\n        // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n        if (a >= a2) {\\n            a = (a * ONE_20) / a2;\\n            sum += x2;\\n        }\\n\\n        if (a >= a3) {\\n            a = (a * ONE_20) / a3;\\n            sum += x3;\\n        }\\n\\n        if (a >= a4) {\\n            a = (a * ONE_20) / a4;\\n            sum += x4;\\n        }\\n\\n        if (a >= a5) {\\n            a = (a * ONE_20) / a5;\\n            sum += x5;\\n        }\\n\\n        if (a >= a6) {\\n            a = (a * ONE_20) / a6;\\n            sum += x6;\\n        }\\n\\n        if (a >= a7) {\\n            a = (a * ONE_20) / a7;\\n            sum += x7;\\n        }\\n\\n        if (a >= a8) {\\n            a = (a * ONE_20) / a8;\\n            sum += x8;\\n        }\\n\\n        if (a >= a9) {\\n            a = (a * ONE_20) / a9;\\n            sum += x9;\\n        }\\n\\n        if (a >= a10) {\\n            a = (a * ONE_20) / a10;\\n            sum += x10;\\n        }\\n\\n        if (a >= a11) {\\n            a = (a * ONE_20) / a11;\\n            sum += x11;\\n        }\\n\\n        // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n        // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n        // Let z = (a - 1) / (a + 1).\\n        // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n        // division by ONE_20.\\n        int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n        int256 z_squared = (z * z) / ONE_20;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_20;\\n        seriesSum += num / 11;\\n\\n        // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n        seriesSum *= 2;\\n\\n        // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n        // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n        // value.\\n\\n        return (sum + seriesSum) / 100;\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n        // worthwhile.\\n\\n        // First, we transform x to a 36 digit fixed point value.\\n        x *= ONE_18;\\n\\n        // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n        // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n        // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n        // division by ONE_36.\\n        int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n        int256 z_squared = (z * z) / ONE_36;\\n\\n        // num is the numerator of the series: the z^(2 * n + 1) term\\n        int256 num = z;\\n\\n        // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n        int256 seriesSum = num;\\n\\n        // In each step, the numerator is multiplied by z^2\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 3;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 5;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 7;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 9;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 11;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 13;\\n\\n        num = (num * z_squared) / ONE_36;\\n        seriesSum += num / 15;\\n\\n        // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n        // All that remains is multiplying by 2 (non fixed point).\\n        return seriesSum * 2;\\n    }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/helpers/BalancerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.7.0;\\n\\n// solhint-disable\\n\\n/**\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAL#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAL#\\\" part is a known constant\\n        // (0x42414c23): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414c23000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Math\\n    uint256 internal constant ADD_OVERFLOW = 0;\\n    uint256 internal constant SUB_OVERFLOW = 1;\\n    uint256 internal constant SUB_UNDERFLOW = 2;\\n    uint256 internal constant MUL_OVERFLOW = 3;\\n    uint256 internal constant ZERO_DIVISION = 4;\\n    uint256 internal constant DIV_INTERNAL = 5;\\n    uint256 internal constant X_OUT_OF_BOUNDS = 6;\\n    uint256 internal constant Y_OUT_OF_BOUNDS = 7;\\n    uint256 internal constant PRODUCT_OUT_OF_BOUNDS = 8;\\n    uint256 internal constant INVALID_EXPONENT = 9;\\n\\n    // Input\\n    uint256 internal constant OUT_OF_BOUNDS = 100;\\n    uint256 internal constant UNSORTED_ARRAY = 101;\\n    uint256 internal constant UNSORTED_TOKENS = 102;\\n    uint256 internal constant INPUT_LENGTH_MISMATCH = 103;\\n    uint256 internal constant ZERO_TOKEN = 104;\\n\\n    // Shared pools\\n    uint256 internal constant MIN_TOKENS = 200;\\n    uint256 internal constant MAX_TOKENS = 201;\\n    uint256 internal constant MAX_SWAP_FEE_PERCENTAGE = 202;\\n    uint256 internal constant MIN_SWAP_FEE_PERCENTAGE = 203;\\n    uint256 internal constant MINIMUM_BPT = 204;\\n    uint256 internal constant CALLER_NOT_VAULT = 205;\\n    uint256 internal constant UNINITIALIZED = 206;\\n    uint256 internal constant BPT_IN_MAX_AMOUNT = 207;\\n    uint256 internal constant BPT_OUT_MIN_AMOUNT = 208;\\n    uint256 internal constant EXPIRED_PERMIT = 209;\\n    uint256 internal constant NOT_TWO_TOKENS = 210;\\n\\n    // Pools\\n    uint256 internal constant MIN_AMP = 300;\\n    uint256 internal constant MAX_AMP = 301;\\n    uint256 internal constant MIN_WEIGHT = 302;\\n    uint256 internal constant MAX_STABLE_TOKENS = 303;\\n    uint256 internal constant MAX_IN_RATIO = 304;\\n    uint256 internal constant MAX_OUT_RATIO = 305;\\n    uint256 internal constant MIN_BPT_IN_FOR_TOKEN_OUT = 306;\\n    uint256 internal constant MAX_OUT_BPT_FOR_TOKEN_IN = 307;\\n    uint256 internal constant NORMALIZED_WEIGHT_INVARIANT = 308;\\n    uint256 internal constant INVALID_TOKEN = 309;\\n    uint256 internal constant UNHANDLED_JOIN_KIND = 310;\\n    uint256 internal constant ZERO_INVARIANT = 311;\\n    uint256 internal constant ORACLE_INVALID_SECONDS_QUERY = 312;\\n    uint256 internal constant ORACLE_NOT_INITIALIZED = 313;\\n    uint256 internal constant ORACLE_QUERY_TOO_OLD = 314;\\n    uint256 internal constant ORACLE_INVALID_INDEX = 315;\\n    uint256 internal constant ORACLE_BAD_SECS = 316;\\n    uint256 internal constant AMP_END_TIME_TOO_CLOSE = 317;\\n    uint256 internal constant AMP_ONGOING_UPDATE = 318;\\n    uint256 internal constant AMP_RATE_TOO_HIGH = 319;\\n    uint256 internal constant AMP_NO_ONGOING_UPDATE = 320;\\n    uint256 internal constant STABLE_INVARIANT_DIDNT_CONVERGE = 321;\\n    uint256 internal constant STABLE_GET_BALANCE_DIDNT_CONVERGE = 322;\\n    uint256 internal constant RELAYER_NOT_CONTRACT = 323;\\n    uint256 internal constant BASE_POOL_RELAYER_NOT_CALLED = 324;\\n    uint256 internal constant REBALANCING_RELAYER_REENTERED = 325;\\n    uint256 internal constant GRADUAL_UPDATE_TIME_TRAVEL = 326;\\n    uint256 internal constant SWAPS_DISABLED = 327;\\n    uint256 internal constant CALLER_IS_NOT_LBP_OWNER = 328;\\n    uint256 internal constant PRICE_RATE_OVERFLOW = 329;\\n    uint256 internal constant INVALID_JOIN_EXIT_KIND_WHILE_SWAPS_DISABLED = 330;\\n    uint256 internal constant WEIGHT_CHANGE_TOO_FAST = 331;\\n    uint256 internal constant LOWER_GREATER_THAN_UPPER_TARGET = 332;\\n    uint256 internal constant UPPER_TARGET_TOO_HIGH = 333;\\n    uint256 internal constant UNHANDLED_BY_LINEAR_POOL = 334;\\n    uint256 internal constant OUT_OF_TARGET_RANGE = 335;\\n    uint256 internal constant UNHANDLED_EXIT_KIND = 336;\\n    uint256 internal constant UNAUTHORIZED_EXIT = 337;\\n    uint256 internal constant MAX_MANAGEMENT_SWAP_FEE_PERCENTAGE = 338;\\n    uint256 internal constant UNHANDLED_BY_INVESTMENT_POOL = 339;\\n    uint256 internal constant UNHANDLED_BY_PHANTOM_POOL = 340;\\n    uint256 internal constant TOKEN_DOES_NOT_HAVE_RATE_PROVIDER = 341;\\n    uint256 internal constant INVALID_INITIALIZATION = 342;\\n\\n    // Lib\\n    uint256 internal constant REENTRANCY = 400;\\n    uint256 internal constant SENDER_NOT_ALLOWED = 401;\\n    uint256 internal constant PAUSED = 402;\\n    uint256 internal constant PAUSE_WINDOW_EXPIRED = 403;\\n    uint256 internal constant MAX_PAUSE_WINDOW_DURATION = 404;\\n    uint256 internal constant MAX_BUFFER_PERIOD_DURATION = 405;\\n    uint256 internal constant INSUFFICIENT_BALANCE = 406;\\n    uint256 internal constant INSUFFICIENT_ALLOWANCE = 407;\\n    uint256 internal constant ERC20_TRANSFER_FROM_ZERO_ADDRESS = 408;\\n    uint256 internal constant ERC20_TRANSFER_TO_ZERO_ADDRESS = 409;\\n    uint256 internal constant ERC20_MINT_TO_ZERO_ADDRESS = 410;\\n    uint256 internal constant ERC20_BURN_FROM_ZERO_ADDRESS = 411;\\n    uint256 internal constant ERC20_APPROVE_FROM_ZERO_ADDRESS = 412;\\n    uint256 internal constant ERC20_APPROVE_TO_ZERO_ADDRESS = 413;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_ALLOWANCE = 414;\\n    uint256 internal constant ERC20_DECREASED_ALLOWANCE_BELOW_ZERO = 415;\\n    uint256 internal constant ERC20_TRANSFER_EXCEEDS_BALANCE = 416;\\n    uint256 internal constant ERC20_BURN_EXCEEDS_ALLOWANCE = 417;\\n    uint256 internal constant SAFE_ERC20_CALL_FAILED = 418;\\n    uint256 internal constant ADDRESS_INSUFFICIENT_BALANCE = 419;\\n    uint256 internal constant ADDRESS_CANNOT_SEND_VALUE = 420;\\n    uint256 internal constant SAFE_CAST_VALUE_CANT_FIT_INT256 = 421;\\n    uint256 internal constant GRANT_SENDER_NOT_ADMIN = 422;\\n    uint256 internal constant REVOKE_SENDER_NOT_ADMIN = 423;\\n    uint256 internal constant RENOUNCE_SENDER_NOT_ALLOWED = 424;\\n    uint256 internal constant BUFFER_PERIOD_EXPIRED = 425;\\n    uint256 internal constant CALLER_IS_NOT_OWNER = 426;\\n    uint256 internal constant NEW_OWNER_IS_ZERO = 427;\\n    uint256 internal constant CODE_DEPLOYMENT_FAILED = 428;\\n    uint256 internal constant CALL_TO_NON_CONTRACT = 429;\\n    uint256 internal constant LOW_LEVEL_CALL_FAILED = 430;\\n\\n    // Vault\\n    uint256 internal constant INVALID_POOL_ID = 500;\\n    uint256 internal constant CALLER_NOT_POOL = 501;\\n    uint256 internal constant SENDER_NOT_ASSET_MANAGER = 502;\\n    uint256 internal constant USER_DOESNT_ALLOW_RELAYER = 503;\\n    uint256 internal constant INVALID_SIGNATURE = 504;\\n    uint256 internal constant EXIT_BELOW_MIN = 505;\\n    uint256 internal constant JOIN_ABOVE_MAX = 506;\\n    uint256 internal constant SWAP_LIMIT = 507;\\n    uint256 internal constant SWAP_DEADLINE = 508;\\n    uint256 internal constant CANNOT_SWAP_SAME_TOKEN = 509;\\n    uint256 internal constant UNKNOWN_AMOUNT_IN_FIRST_SWAP = 510;\\n    uint256 internal constant MALCONSTRUCTED_MULTIHOP_SWAP = 511;\\n    uint256 internal constant INTERNAL_BALANCE_OVERFLOW = 512;\\n    uint256 internal constant INSUFFICIENT_INTERNAL_BALANCE = 513;\\n    uint256 internal constant INVALID_ETH_INTERNAL_BALANCE = 514;\\n    uint256 internal constant INVALID_POST_LOAN_BALANCE = 515;\\n    uint256 internal constant INSUFFICIENT_ETH = 516;\\n    uint256 internal constant UNALLOCATED_ETH = 517;\\n    uint256 internal constant ETH_TRANSFER = 518;\\n    uint256 internal constant CANNOT_USE_ETH_SENTINEL = 519;\\n    uint256 internal constant TOKENS_MISMATCH = 520;\\n    uint256 internal constant TOKEN_NOT_REGISTERED = 521;\\n    uint256 internal constant TOKEN_ALREADY_REGISTERED = 522;\\n    uint256 internal constant TOKENS_ALREADY_SET = 523;\\n    uint256 internal constant TOKENS_LENGTH_MUST_BE_2 = 524;\\n    uint256 internal constant NONZERO_TOKEN_BALANCE = 525;\\n    uint256 internal constant BALANCE_TOTAL_OVERFLOW = 526;\\n    uint256 internal constant POOL_NO_TOKENS = 527;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_BALANCE = 528;\\n\\n    // Fees\\n    uint256 internal constant SWAP_FEE_PERCENTAGE_TOO_HIGH = 600;\\n    uint256 internal constant FLASH_LOAN_FEE_PERCENTAGE_TOO_HIGH = 601;\\n    uint256 internal constant INSUFFICIENT_FLASH_LOAN_FEE_AMOUNT = 602;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-solidity-utils/contracts/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"berlin\",\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tokenInIsToken0\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"alpha\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"c\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"s\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lambda\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauAlpha\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauBeta\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"u\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"v\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"w\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dSq\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.DerivedParams\",\"name\":\"derived\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"invariant\",\"type\":\"tuple\"}],\"name\":\"calcInGivenOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"tokenInIsToken0\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"alpha\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"c\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"s\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lambda\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauAlpha\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauBeta\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"u\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"v\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"w\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dSq\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.DerivedParams\",\"name\":\"derived\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"invariant\",\"type\":\"tuple\"}],\"name\":\"calcOutGivenIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"alpha\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"c\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"s\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lambda\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauAlpha\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauBeta\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"u\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"v\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"w\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dSq\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.DerivedParams\",\"name\":\"derived\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"invariant\",\"type\":\"int256\"}],\"name\":\"calcSpotPrice0in1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"px\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"alpha\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"c\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"s\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lambda\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauAlpha\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauBeta\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"u\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"v\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"w\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dSq\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.DerivedParams\",\"name\":\"derived\",\"type\":\"tuple\"}],\"name\":\"calculateInvariant\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"uinvariant\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"alpha\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"c\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"s\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lambda\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauAlpha\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauBeta\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"u\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"v\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"w\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dSq\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.DerivedParams\",\"name\":\"derived\",\"type\":\"tuple\"}],\"name\":\"calculateInvariantWithError\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"alpha\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"beta\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"c\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"s\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"lambda\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Params\",\"name\":\"params\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauAlpha\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int256\",\"name\":\"x\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"y\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.Vector2\",\"name\":\"tauBeta\",\"type\":\"tuple\"},{\"internalType\":\"int256\",\"name\":\"u\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"v\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"w\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"z\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"dSq\",\"type\":\"int256\"}],\"internalType\":\"struct GyroECLPMath.DerivedParams\",\"name\":\"derived\",\"type\":\"tuple\"}],\"name\":\"validateDerivedParamsLimits\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "GyroECLPMath", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}