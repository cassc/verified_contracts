{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DynamicDescriptions.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\n/// @title BLONKS Dynamic Description Contract v3.0.0\\r\\n/// @author Matto AKA MonkMatto\\r\\n/// @notice This contract creates dynamic token descriptions for BLONKS.\\r\\n/// @dev For flexibility, the descriptions are stored in an array of strings that are assembled with dynamic data.\\r\\n/// An external contract is added for additional flexibility.\\r\\n/// @custom:experimental This is an experimental contract.\\r\\n/// @custom:security-contact monkmatto@protonmail.com\\r\\n\\r\\ninterface iEE {\\r\\n    function assembleBasicData(\\r\\n        address _account\\r\\n    ) external view returns (string[] memory);\\r\\n\\r\\n    function isComposable(address _account) external view returns (bool);\\r\\n}\\r\\n\\r\\ncontract DynamicDescriptions is Ownable {\\r\\n    using Strings for string;\\r\\n\\r\\n    address public EEcontract;\\r\\n    bool public EEcontractActive;\\r\\n\\r\\n    string private EElinkBase;\\r\\n    string[] private descText;\\r\\n\\r\\n    function setDescriptionText(string[] memory _text) external onlyOwner {\\r\\n        for (uint256 i = 0; i < _text.length; i++) {\\r\\n            descText.push(_text[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getDescriptionText() external view returns (string[] memory) {\\r\\n        return descText;\\r\\n    }\\r\\n\\r\\n    function setEEcontract(address _EEcontract) external onlyOwner {\\r\\n        EEcontract = _EEcontract;\\r\\n    }\\r\\n\\r\\n    function setEElinkBase(string memory _EElinkBase) external onlyOwner {\\r\\n        EElinkBase = _EElinkBase;\\r\\n    }\\r\\n\\r\\n    function toggleEEcontractActive() external onlyOwner {\\r\\n        EEcontractActive = !EEcontractActive;\\r\\n    }\\r\\n\\r\\n    function updateDescriptionTextIndex(\\r\\n        uint256 _index,\\r\\n        string memory _text\\r\\n    ) external onlyOwner {\\r\\n        descText[_index] = _text;\\r\\n    }\\r\\n\\r\\n    function buildDynamicDescription(\\r\\n        address _ownerAddy,\\r\\n        uint256 _shapeshiftCount,\\r\\n        string memory _collectionDescription,\\r\\n        string memory _shifterName,\\r\\n        uint256 _shifterActive,\\r\\n        uint256 _shifterMax\\r\\n    ) external view returns (string memory) {\\r\\n        string memory shapeshiftDetail = _shapeshiftCount > 0\\r\\n            ? string(\\r\\n                abi.encodePacked(descText[9], Strings.toString(_shapeshiftCount), descText[10])\\r\\n            )\\r\\n            : \\\"\\\";\\r\\n        string memory dynamicText = EEcontractActive && iEE(EEcontract).isComposable(_ownerAddy)\\r\\n            ? _incorporateEE(_ownerAddy)\\r\\n            : descText[0];\\r\\n        dynamicText = string(\\r\\n            abi.encodePacked(\\r\\n                dynamicText,\\r\\n                descText[11],\\r\\n                descText[12],\\r\\n                _shifterName\\r\\n            )\\r\\n        );\\r\\n        dynamicText = string(\\r\\n            abi.encodePacked(\\r\\n                dynamicText,\\r\\n                shapeshiftDetail,\\r\\n                descText[13],\\r\\n                Strings.toHexString(uint160(_ownerAddy), 20),\\r\\n                descText[14]\\r\\n            )\\r\\n        );\\r\\n        dynamicText = string(\\r\\n            abi.encodePacked(\\r\\n                dynamicText,\\r\\n                _shifterName,\\r\\n                descText[15],\\r\\n                Strings.toString(_shifterActive),\\r\\n                descText[16],\\r\\n                Strings.toString(_shifterMax),\\r\\n                descText[8]\\r\\n            )\\r\\n        );\\r\\n        dynamicText = string(\\r\\n            abi.encodePacked(\\r\\n                dynamicText,\\r\\n                descText[17],\\r\\n                _collectionDescription,\\r\\n                descText[18]\\r\\n            )\\r\\n        );\\r\\n        return dynamicText;\\r\\n    }\\r\\n\\r\\n    function _incorporateEE(\\r\\n        address _ownerAddy\\r\\n    ) internal view returns (string memory) {\\r\\n        string[] memory EEbasicData = iEE(EEcontract).assembleBasicData(\\r\\n            _ownerAddy\\r\\n        );\\r\\n        string memory EEdynamicText;\\r\\n        if (\\r\\n            bytes(EEbasicData[0]).length +\\r\\n                bytes(EEbasicData[1]).length +\\r\\n                bytes(EEbasicData[2]).length >\\r\\n            0\\r\\n        ) {\\r\\n            EEdynamicText = descText[1];\\r\\n        }\\r\\n        if (bytes(EEbasicData[0]).length > 0) {\\r\\n            EEdynamicText = string(\\r\\n                abi.encodePacked(EEdynamicText, descText[2], EEbasicData[0])\\r\\n            );\\r\\n        }\\r\\n        if (bytes(EEbasicData[1]).length > 0) {\\r\\n            EEdynamicText = string(\\r\\n                abi.encodePacked(EEdynamicText, descText[3], EEbasicData[1])\\r\\n            );\\r\\n        }\\r\\n        uint256 priorityLink = uint256(uint8(bytes(EEbasicData[5])[0])) - 48;\\r\\n        if (bytes(EEbasicData[priorityLink + 2]).length > 0) {\\r\\n          EEdynamicText = string(abi.encodePacked(EEdynamicText, descText[priorityLink + 4], EEbasicData[priorityLink + 2]));\\r\\n        }\\r\\n        EEdynamicText = string(\\r\\n            abi.encodePacked(\\r\\n                EEdynamicText,\\r\\n                descText[7],\\r\\n                EElinkBase,\\r\\n                Strings.toHexString(uint160(_ownerAddy), 20),\\r\\n                descText[8]\\r\\n            )\\r\\n        );\\r\\n        return EEdynamicText;\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EEcontract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EEcontractActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ownerAddy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_shapeshiftCount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_collectionDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_shifterName\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_shifterActive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_shifterMax\",\"type\":\"uint256\"}],\"name\":\"buildDynamicDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDescriptionText\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_text\",\"type\":\"string[]\"}],\"name\":\"setDescriptionText\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_EEcontract\",\"type\":\"address\"}],\"name\":\"setEEcontract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_EElinkBase\",\"type\":\"string\"}],\"name\":\"setEElinkBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleEEcontractActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_text\",\"type\":\"string\"}],\"name\":\"updateDescriptionTextIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DynamicDescriptions", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}