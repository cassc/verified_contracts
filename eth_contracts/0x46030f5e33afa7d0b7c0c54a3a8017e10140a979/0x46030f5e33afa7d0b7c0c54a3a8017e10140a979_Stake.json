{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Stake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\nimport { IStake } from \\\"src/interfaces/IStake.sol\\\";\\nimport { IPonzioTheCat } from \\\"src/interfaces/IPonzioTheCat.sol\\\";\\nimport { IWrappedPonzioTheCat } from \\\"src/interfaces/IWrappedPonzioTheCat.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IUniswapV2Router02 } from \\\"src/interfaces/UniswapV2/IUniswapV2Router02.sol\\\";\\n\\n/**\\n * @title Stake\\n * @notice This contract allows users to stake LP tokens and earn rewards.\\n */\\ncontract Stake is IStake, ReentrancyGuard {\\n    using Math for uint256;\\n    using SafeERC20 for IPonzioTheCat;\\n    using SafeERC20 for IERC20;\\n\\n    /// @inheritdoc IStake\\n    IERC20 public immutable LP_TOKEN;\\n    /// @inheritdoc IStake\\n    IPonzioTheCat public immutable PONZIO;\\n    /// @inheritdoc IStake\\n    IWrappedPonzioTheCat public immutable WRAPPED_PONZIO;\\n    /// @inheritdoc IStake\\n    uint256 public constant PRECISION_FACTOR = 1e18;\\n\\n    /// @notice the address of the Uniswap V2 Router\\n    address internal constant UNISWAPV2_ROUTER_ADDR = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    /// @notice Mapping from user address to UserInfo\\n    mapping(address => UserInfo) internal _userInfo;\\n    ///@notice internal data used to compute the number of rewards to distribute to each staker.\\n    uint256 internal _accRewardPerShare;\\n    /// @notice the last reward amount\\n    uint256 internal _lastRewardAmount;\\n    /// @notice the LP_TOKEN balance\\n    uint256 internal _lpBalance;\\n\\n    constructor(address lpToken, address wrappedPonzioTheCatAddress) {\\n        LP_TOKEN = IERC20(lpToken);\\n        WRAPPED_PONZIO = IWrappedPonzioTheCat(wrappedPonzioTheCatAddress);\\n        PONZIO = IWrappedPonzioTheCat(wrappedPonzioTheCatAddress).asset();\\n    }\\n\\n    receive() external payable { }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                             external functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /// @inheritdoc IStake\\n    function userInfo(address userAddr) external view returns (UserInfo memory) {\\n        return _userInfo[userAddr];\\n    }\\n\\n    /// @inheritdoc IStake\\n    function reinvest(uint256 amountPonzioMin, uint256 amountEthMin) external payable nonReentrant {\\n        if (msg.value == 0) {\\n            revert Stake_valueNeeded();\\n        }\\n\\n        uint256 balanceBefore = PONZIO.balanceOf(address(this));\\n        // first harvest the user rewards\\n        _harvest(_userInfo[msg.sender], msg.sender, address(this));\\n        uint256 amountPonzio = PONZIO.balanceOf(address(this)) - balanceBefore;\\n\\n        // slither-disable-next-line incorrect-equality\\n        if (amountPonzio == 0) {\\n            revert Stake_noPendingRewards();\\n        }\\n\\n        if (PONZIO.allowance(address(this), UNISWAPV2_ROUTER_ADDR) < amountPonzio) {\\n            PONZIO.forceApprove(UNISWAPV2_ROUTER_ADDR, type(uint256).max);\\n        }\\n\\n        (uint256 amountPonzioDeposited, uint256 amountETHDeposited, uint256 liquidity) = IUniswapV2Router02(\\n            UNISWAPV2_ROUTER_ADDR\\n        ).addLiquidityETH{ value: msg.value }(\\n            address(PONZIO), amountPonzio, amountPonzioMin, amountEthMin, address(this), block.timestamp\\n        );\\n\\n        // stake the LP\\n        _deposit(liquidity, msg.sender, address(this));\\n\\n        if (amountPonzioDeposited < amountPonzio) {\\n            PONZIO.safeTransfer(msg.sender, amountPonzio - amountPonzioDeposited);\\n        }\\n\\n        if (amountETHDeposited < msg.value) {\\n            (bool success,) = msg.sender.call{ value: msg.value - amountETHDeposited }(\\\"\\\");\\n            if (!success) {\\n                revert Stake_refundFailed();\\n            }\\n        }\\n    }\\n\\n    /// @inheritdoc IStake\\n    function pendingRewards(address userAddr) external view returns (uint256 pendingRewards_) {\\n        UserInfo memory userInfoMem = _userInfo[userAddr];\\n        // slither-disable-next-line incorrect-equality\\n        if (userInfoMem.amount == 0) {\\n            return 0;\\n        }\\n\\n        (uint256 newTotalShares, uint256 newTotalSupply, uint256 fees) = PONZIO.computeNewState();\\n\\n        uint256 wrappedRewards = 0;\\n        if (PONZIO.feesCollector() == address(this) && fees != 0) {\\n            wrappedRewards = WRAPPED_PONZIO.previewWrap(fees, newTotalShares, newTotalSupply);\\n        }\\n\\n        (uint256 accRewardPerShare,) = _getUpdatedRewardPerShare(wrappedRewards);\\n        uint256 pendingRewardsShares_ = _pendingRewards(userInfoMem, accRewardPerShare);\\n        pendingRewards_ = WRAPPED_PONZIO.previewUnwrap(pendingRewardsShares_, newTotalShares, newTotalSupply);\\n    }\\n\\n    /// @inheritdoc IStake\\n    function deposit(uint256 amount, address recipient) external nonReentrant {\\n        _deposit(amount, recipient, msg.sender);\\n    }\\n\\n    /// @inheritdoc IStake\\n    function withdraw(uint256 amount, address recipient) external nonReentrant {\\n        _withdraw(amount, recipient);\\n    }\\n\\n    /// @inheritdoc IStake\\n    function harvest(address recipient) external nonReentrant {\\n        _harvest(_userInfo[msg.sender], msg.sender, recipient);\\n    }\\n\\n    /// @inheritdoc IStake\\n    function sync() external {\\n        uint256 rewardBalance = PONZIO.balanceOf(address(this));\\n\\n        if (rewardBalance != 0) {\\n            if (PONZIO.allowance(address(this), address(WRAPPED_PONZIO)) < rewardBalance) {\\n                PONZIO.forceApprove(address(WRAPPED_PONZIO), type(uint256).max);\\n            }\\n            // slither-disable-next-line unused-return\\n            WRAPPED_PONZIO.wrap(rewardBalance, address(this));\\n        }\\n    }\\n\\n    /// @inheritdoc IStake\\n    function emergencyWithdraw() external nonReentrant {\\n        UserInfo storage user = _userInfo[msg.sender];\\n        uint256 amount = user.amount;\\n        if (amount > 0) {\\n            user.amount = 0;\\n            user.rewardDebt = 0;\\n            _lpBalance -= amount;\\n            LP_TOKEN.safeTransfer(msg.sender, amount);\\n            emit EmergencyWithdraw(msg.sender, amount);\\n        }\\n    }\\n\\n    /// @inheritdoc IStake\\n    function skim() external nonReentrant {\\n        uint256 lpBalance = _lpBalance;\\n        uint256 balance = LP_TOKEN.balanceOf(address(this));\\n        if (balance > lpBalance) {\\n            LP_TOKEN.safeTransfer(msg.sender, balance - lpBalance);\\n            emit Skim(msg.sender, balance - lpBalance);\\n        }\\n    }\\n\\n    /* -------------------------------------------------------------------------- */\\n    /*                             internal functions                             */\\n    /* -------------------------------------------------------------------------- */\\n\\n    /**\\n     * @notice returns the pending rewards of a user.\\n     * @param user information of the user\\n     * @param accRewardPerShare the accumulated reward per share\\n     * @return pendingRewards_ amount of rewards pending to claim\\n     * @dev Used when userInfo where already loaded to memory, to avoid multiple SLOAD operations.\\n     */\\n    function _pendingRewards(UserInfo memory user, uint256 accRewardPerShare)\\n        internal\\n        pure\\n        returns (uint256 pendingRewards_)\\n    {\\n        pendingRewards_ = user.amount.mulDiv(accRewardPerShare, PRECISION_FACTOR) - user.rewardDebt;\\n    }\\n\\n    /**\\n     * @notice Deposits staking tokens to the contract.\\n     * @param amount amount of staking tokens to deposit\\n     * @param recipient address of the recipient\\n     * @param from address of the sender\\n     */\\n    function _deposit(uint256 amount, address recipient, address from) internal {\\n        // slither-disable-next-line incorrect-equality\\n        if (amount == 0) {\\n            revert Stake_depositZeroAmount();\\n        }\\n        UserInfo memory user = _userInfo[recipient];\\n\\n        // slither-disable-next-line reentrancy-no-eth\\n        uint256 accRewardPerShare = _harvest(user, recipient, recipient);\\n\\n        user.amount += amount;\\n        user.rewardDebt = user.amount.mulDiv(accRewardPerShare, PRECISION_FACTOR);\\n        _userInfo[recipient] = user;\\n\\n        _lpBalance += amount;\\n        if (from != address(this)) {\\n            LP_TOKEN.safeTransferFrom(from, address(this), amount);\\n        }\\n\\n        emit Deposit(recipient, from, amount);\\n    }\\n\\n    /**\\n     * @notice Withdraws staking tokens from the contract.\\n     * @param amount amount of staking tokens to withdraw\\n     * @param recipient address of the recipient\\n     */\\n    function _withdraw(uint256 amount, address recipient) internal {\\n        UserInfo memory user = _userInfo[msg.sender];\\n\\n        if (amount > user.amount) {\\n            revert Stake_withdrawTooHigh(amount, user.amount);\\n        } else if (amount == 0) {\\n            revert Stake_withdrawZeroAmount();\\n        }\\n\\n        // slither-disable-next-line reentrancy-no-eth\\n        uint256 accRewardPerShare = _harvest(user, msg.sender, recipient);\\n\\n        unchecked {\\n            user.amount -= amount;\\n        }\\n        user.rewardDebt = user.amount.mulDiv(accRewardPerShare, PRECISION_FACTOR);\\n        _userInfo[msg.sender] = user;\\n\\n        _lpBalance -= amount;\\n        LP_TOKEN.safeTransfer(recipient, amount);\\n        emit Withdraw(msg.sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @notice Harvests the pending rewards of a user and transfers them to the user.\\n     * @param user information of the user\\n     * @param userAddr address of the user\\n     * @param recipient address of the receiver of the rewards\\n     * @return accRewardPerShare_ The updated reward per share.\\n     * @dev Used when userInfo where already loaded to memory, to avoid multiple SLOAD operations.\\n     */\\n    function _harvest(UserInfo memory user, address userAddr, address recipient)\\n        internal\\n        returns (uint256 accRewardPerShare_)\\n    {\\n        // slither-disable-next-line reentrancy-no-eth\\n        (accRewardPerShare_,) = _updatePool();\\n\\n        if (user.amount > 0) {\\n            uint256 pendingReward = _pendingRewards(user, accRewardPerShare_);\\n\\n            if (pendingReward > 0) {\\n                uint256 lastRewardAmountMem = _lastRewardAmount;\\n                if (pendingReward > lastRewardAmountMem) {\\n                    pendingReward = lastRewardAmountMem;\\n                }\\n\\n                _lastRewardAmount -= pendingReward;\\n                _userInfo[userAddr].rewardDebt = user.amount.mulDiv(accRewardPerShare_, PRECISION_FACTOR);\\n\\n                uint256 rewards = WRAPPED_PONZIO.unwrap(pendingReward, recipient);\\n                emit ClaimReward(userAddr, recipient, rewards);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Updates the pool and returns the updated reward per share and the last reward amount.\\n     * @return accRewardPerShare_ The updated reward per share.\\n     * @return newLastRewardAmount_ The last reward amount.\\n     */\\n    function _updatePool() internal returns (uint256 accRewardPerShare_, uint256 newLastRewardAmount_) {\\n        PONZIO.updateTotalSupply();\\n        (accRewardPerShare_, newLastRewardAmount_) = _getUpdatedRewardPerShare(0);\\n\\n        _accRewardPerShare = accRewardPerShare_;\\n        _lastRewardAmount = newLastRewardAmount_;\\n    }\\n\\n    /**\\n     * @notice Returns the updated reward per share and the last reward amount.\\n     * @param newRewards The new rewards to distribute.\\n     * @return accRewardPerShare_ The updated reward per share.\\n     * @return newLastRewardAmount_ The last reward amount.\\n     */\\n    function _getUpdatedRewardPerShare(uint256 newRewards)\\n        internal\\n        view\\n        returns (uint256 accRewardPerShare_, uint256 newLastRewardAmount_)\\n    {\\n        uint256 lpBalance = _lpBalance;\\n        // slither-disable-next-line incorrect-equality\\n        if (lpBalance == 0) {\\n            return (_accRewardPerShare, _lastRewardAmount);\\n        }\\n\\n        uint256 currentRewardAmount = WRAPPED_PONZIO.balanceOf(address(this));\\n\\n        currentRewardAmount += newRewards;\\n\\n        newLastRewardAmount_ = currentRewardAmount;\\n        accRewardPerShare_ =\\n            _accRewardPerShare + (currentRewardAmount - _lastRewardAmount).mulDiv(PRECISION_FACTOR, lpBalance);\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IStake.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport { IPonzioTheCat } from \\\"src/interfaces/IPonzioTheCat.sol\\\";\\nimport { IWrappedPonzioTheCat } from \\\"src/interfaces/IWrappedPonzioTheCat.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStake {\\n    /**\\n     * @notice Information about each staker's balance and reward debt.\\n     * @param amount staked amount\\n     * @param rewardDebt reward debt of the user used to calculate the pending rewards\\n     */\\n    struct UserInfo {\\n        uint256 amount;\\n        uint256 rewardDebt;\\n    }\\n\\n    /**\\n     * @notice Emitted when a user deposits LP tokens to the contract.\\n     * @param recipient address of the recipient\\n     * @param depositBy address of the msg.sender\\n     * @param amount amount of deposited tokens\\n     */\\n    event Deposit(address indexed recipient, address depositBy, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when a user withdraws LP tokens from the contract.\\n     * @param user address of the user\\n     * @param recipient address of the recipient\\n     * @param amount amount of withdrawn tokens\\n     */\\n    event Withdraw(address indexed user, address recipient, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when a user claims rewards from the contract.\\n     * @param user address of the user\\n     * @param recipient address of the recipient\\n     * @param reward amount of claimed tokens\\n     */\\n    event ClaimReward(address indexed user, address recipient, uint256 reward);\\n\\n    /**\\n     * @notice Emitted when a user forces the withdrawal of LP tokens from the contract.\\n     * @param user address of the user\\n     * @param amount amount of withdrawn LP tokens\\n     */\\n    event EmergencyWithdraw(address indexed user, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when the contract is skimmed.\\n     * @param user address of the user\\n     * @param amount amount of skimmed lp tokens\\n     */\\n    event Skim(address indexed user, uint256 amount);\\n\\n    /// @notice Reverted when the user tries to deposit an amount of 0 tokens.\\n    error Stake_depositZeroAmount();\\n\\n    /// @notice Reverted when the user tries to withdraw an amount of 0 tokens.\\n    error Stake_withdrawZeroAmount();\\n\\n    /// @notice Revert when the refund fails.\\n    error Stake_refundFailed();\\n\\n    /// @notice Revert when the refund fails.\\n    error Stake_noPendingRewards();\\n\\n    /// @notice Revert when no value was added to the transaction but it was needed\\n    error Stake_valueNeeded();\\n\\n    /**\\n     * @notice Revert when the user tries to withdraw an amount higher than the staked amount.\\n     * @param withdrawAmount amount the user tries to withdraw\\n     * @param stakedAmount amount the user has staked\\n     */\\n    error Stake_withdrawTooHigh(uint256 withdrawAmount, uint256 stakedAmount);\\n\\n    /**\\n     * @notice Returns the address of the staking token.\\n     * @return IERC20 address of the staking token\\n     */\\n    function LP_TOKEN() external view returns (IERC20);\\n\\n    /**\\n     * @notice Returns the address of the Ponzio.\\n     * @return IPonzioTheCat address of the Ponzio\\n     */\\n    function PONZIO() external view returns (IPonzioTheCat);\\n\\n    /**\\n     * @notice Returns the address of the Ponzio token vault.\\n     * @return IWrappedPonzioTheCat address of the Ponzio token vault\\n     */\\n    function WRAPPED_PONZIO() external view returns (IWrappedPonzioTheCat);\\n\\n    /**\\n     * @notice Returns the staked amount and the reward debt of a user.\\n     * @param user address of the user\\n     * @return struct containing the user's staked amount and reward debt\\n     */\\n    function userInfo(address user) external view returns (UserInfo memory);\\n\\n    /**\\n     * @notice Returns the precision factor used to compute the reward per share.\\n     * @return The precision factor.\\n     */\\n    function PRECISION_FACTOR() external view returns (uint256);\\n\\n    /**\\n     * @notice Reinvests the user's rewards by adding liquidity to the Uniswap pair and staking the LP tokens.\\n     * @param amountPonzioMin The minimum amount of Ponzio tokens the user wants to add as liquidity.\\n     * @param amountEthMin The minimum amount of ETH the user wants to add as liquidity.\\n     *\\n     * This function first harvests the user's rewards.\\n     *\\n     * It then adds liquidity to the Uniswap pair with the harvested rewards and the ETH sent by the user. The LP\\n     * tokens received from adding liquidity are then staked.\\n     *\\n     * If there are any ETH or Ponzio tokens left in the contract, they are sent back to the user.\\n     *\\n     * Requirement:\\n     * - The `msg.value` (amount of ETH sent) must not be zero.\\n     */\\n    function reinvest(uint256 amountPonzioMin, uint256 amountEthMin) external payable;\\n\\n    /**\\n     * @notice Returns the reward amount that a user has pending to claim.\\n     * @param userAddr address of the user\\n     * @return rewards_ amount of pending rewards\\n     */\\n    function pendingRewards(address userAddr) external view returns (uint256 rewards_);\\n\\n    /**\\n     * @notice Deposits staking tokens to the contract.\\n     * @param amount amount of staking tokens to deposit\\n     * @param recipient address of the recipient\\n     */\\n    function deposit(uint256 amount, address recipient) external;\\n\\n    /**\\n     * @notice Withdraws staking tokens from the contract.\\n     * @param amount amount of staking tokens to withdraw\\n     * @param recipient address of the recipient\\n     */\\n    function withdraw(uint256 amount, address recipient) external;\\n\\n    /**\\n     * @notice Updates the pool and sends the pending reward amount of msg.sender.\\n     * @param recipient address of the recipient\\n     */\\n    function harvest(address recipient) external;\\n\\n    /**\\n     * @notice Convert all rewards to vault tokens\\n     * @dev Only call the vault if the balance is not zero\\n     */\\n    function sync() external;\\n\\n    /**\\n     * @notice Function to force the withdrawal of LP tokens from the contract.\\n     * @dev This function is used to withdraw the LP tokens in case of emergency.\\n     * It will send the LP tokens to the user without claiming the rewards.\\n     */\\n    function emergencyWithdraw() external;\\n\\n    /**\\n     * @notice Function to skim any excess lp tokens sent to the contract.\\n     * @dev Receiver is msg.sender\\n     */\\n    function skim() external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IPonzioTheCat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport { IERC20Rebasable } from \\\"src/interfaces/IERC20Rebasable.sol\\\";\\nimport { IUniswapV2Pair } from \\\"src/interfaces/UniswapV2/IUniswapV2Pair.sol\\\";\\n\\ninterface IPonzioTheCat is IERC20Rebasable {\\n    /// @notice Error code is thrown when the contract is being initialized a 2nd time.\\n    error PONZIO_alreadyInitialized();\\n\\n    /// @notice Error code thrown in setFeesCollector when the contract has not been initialized yet.\\n    error PONZIO_notInitialized();\\n\\n    /// @notice Error code thrown in setFeesCollector when the new feesCollector is the zero address.\\n    error PONZIO_feeCollectorZeroAddress();\\n\\n    /**\\n     * @notice Emitted when the max shares are reached.\\n     * @param timestamp The timestamp at which the maximum is reached.\\n     */\\n    event MaxSharesReached(uint256 timestamp);\\n\\n    /**\\n     * @notice Emitted FeesCollector changes.\\n     * @param feesCollector The new feesCollector.\\n     * It's ok to set the feesCollector to the zero address, in which case no fees will be collected.\\n     */\\n    event FeesCollectorSet(address indexed feesCollector);\\n\\n    /**\\n     * @notice Emitted when the Uniswap V2 pair address is set.\\n     * @param uniV2PoolPair The new uniV2PoolPair.\\n     */\\n    event UniV2PoolPairSet(address indexed uniV2PoolPair);\\n\\n    /**\\n     * @notice Emitted when an account is blacklisted for UpdateTotalSupply.\\n     * @param account The account that is blacklisted.\\n     * @param value The new value of the blacklist.\\n     */\\n    event BlacklistForUpdateSupplySet(address indexed account, bool indexed value);\\n\\n    /**\\n     * @notice Emitted when the total supply is updated.\\n     * @param oldTotalSupply The old total supply.\\n     * @param newTotalSupply The new total supply.\\n     * @param oldTotalShare The old total share.\\n     * @param newTotalShare The new total share.\\n     * @param fees The fees collected.\\n     */\\n    event TotalSupplyUpdated(\\n        uint256 oldTotalSupply, uint256 newTotalSupply, uint256 oldTotalShare, uint256 newTotalShare, uint256 fees\\n    );\\n\\n    /**\\n     * @notice Initial supply of the token.\\n     * @return The initial supply of the token.\\n     */\\n    function INITIAL_SUPPLY() external view returns (uint256);\\n\\n    /**\\n     * @notice Time between each halving.\\n     * @return The time between each halving.\\n     */\\n    function HALVING_EVERY() external view returns (uint256);\\n\\n    /**\\n     * @notice Time between each debasing.\\n     * @return The time between each debasing.\\n     */\\n    function DEBASE_EVERY() external view returns (uint256);\\n\\n    /**\\n     * @notice Number of debasing per halving.\\n     * @return The number of debasing per halving.\\n     */\\n    function NB_DEBASE_PER_HALVING() external view returns (uint256);\\n\\n    /**\\n     * @notice Minimum total supply. When the total supply reaches this value, it can't go lower.\\n     * @return The minimum total supply.\\n     */\\n    function MINIMUM_TOTAL_SUPPLY() external view returns (uint256);\\n\\n    /**\\n     * @notice The time at which the contract was deployed.\\n     * @return The time at which the contract was deployed.\\n     */\\n    function DEPLOYED_TIME() external view returns (uint256);\\n\\n    /**\\n     * @notice Fees collected on each debasing, in FEES_BASE percent.\\n     * @return The fees collected on each debasing.\\n     */\\n    function FEES_STAKING() external view returns (uint256);\\n\\n    /**\\n     * @notice The fee base used for FEES_STAKING\\n     * @return The fee base\\n     */\\n    function FEES_BASE() external view returns (uint256);\\n\\n    /**\\n     * @notice The address that collects the fees (the staking contract)\\n     * @return The address that collects the fees\\n     */\\n    function feesCollector() external view returns (address);\\n\\n    /**\\n     * @notice returns if the max shares are reached.\\n     * @return True if the max shares are reached, false otherwise.\\n     * @dev The max shares are reached when the total of shares is about to overflow.\\n     * When reached, fees are not collected anymore.\\n     */\\n    function maxSharesReached() external view returns (bool);\\n\\n    /**\\n     * @notice The Uniswap V2 pair to sync when debasing.\\n     * @return The Uniswap V2 pair.\\n     */\\n    function uniswapV2Pair() external view returns (IUniswapV2Pair);\\n\\n    /**\\n     * @notice Changes the Uniswap V2 pair address.\\n     * @param uniV2PoolAddr_ The new Uniswap V2 pair address.\\n     * @dev Set the Uniswap V2 pair address to zero address to disable syncing.\\n     */\\n    function setUniswapV2Pair(address uniV2PoolAddr_) external;\\n\\n    /**\\n     * @notice Changes the fees collector.\\n     * @param feesCollector_ The new fees collector.\\n     */\\n    function setFeesCollector(address feesCollector_) external;\\n\\n    /**\\n     * @notice Blacklist an address for UpdateTotalSupply.\\n     * @param addrToBlacklist The address to blacklist.\\n     * @param value The new value of the blacklist.\\n     */\\n    function setBlacklistForUpdateSupply(address addrToBlacklist, bool value) external;\\n\\n    /**\\n     * @notice Initialize the contract by setting the fees collector and staking the first amount of tokens.\\n     * @param feesCollector_ The address that will collect the fees.\\n     * @param uniV2PoolAddr_ The address of the uniswap V2 pool.\\n     */\\n    function initialize(address feesCollector_, address uniV2PoolAddr_) external;\\n\\n    /**\\n     * @notice Return the real-time balance of an account after an UpdateTotalSupply() call.\\n     * @param account_ The account to check the balance of.\\n     * @return balance_ The real-time balance of the account.\\n     * @dev This function will only return the right balance if the feesCollector is set.\\n     */\\n    function realBalanceOf(address account_) external view returns (uint256 balance_);\\n\\n    /**\\n     * @notice Compute the total supply and the fees to collect.\\n     * @return totalSupply_ The new total supply.\\n     * @return fees_ The fees to collect.\\n     */\\n    function computeSupply() external view returns (uint256 totalSupply_, uint256 fees_);\\n\\n    /**\\n     * @notice Compute the total shares, supply and the fees to collect.\\n     * @return totalShares_ The new total shares.\\n     * @return totalSupply_ The new total supply.\\n     * @return fees_ The fees to collect.\\n     */\\n    function computeNewState() external view returns (uint256 totalShares_, uint256 totalSupply_, uint256 fees_);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IWrappedPonzioTheCat.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport { IPonzioTheCat } from \\\"src/interfaces/IPonzioTheCat.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWrappedPonzioTheCat is IERC20 {\\n    /// @notice Returns the underlying asset of the wrapped token.\\n    function asset() external view returns (IPonzioTheCat);\\n\\n    /**\\n     * @notice Returns the amount of wrapped tokens that will be minted when wrapping the underlying assets given the\\n     * new total shares and total supply.\\n     * @param assets The amount of underlying assets to be wrapped.\\n     * @param newTotalShares The new total shares of the wrapped token.\\n     * @param newTotalSupply The new total supply of the wrapped token.\\n     * @return amount_ The amount of wrapped tokens that will be minted.\\n     */\\n    function previewWrap(uint256 assets, uint256 newTotalShares, uint256 newTotalSupply)\\n        external\\n        view\\n        returns (uint256 amount_);\\n\\n    /**\\n     * @notice Wraps the underlying assets into the wrapped token.\\n     * @param assets The amount of underlying assets to be wrapped.\\n     * @return amount_ The amount of wrapped tokens minted.\\n     */\\n    function wrap(uint256 assets) external returns (uint256 amount_);\\n\\n    /**\\n     * @notice Wraps the underlying assets into the wrapped token and mints them to the receiver.\\n     * @param assets The amount of underlying assets to be wrapped.\\n     * @param receiver The address to which the wrapped tokens are minted.\\n     * @return amount_ The amount of wrapped tokens minted.\\n     */\\n    function wrap(uint256 assets, address receiver) external returns (uint256 amount_);\\n\\n    /**\\n     * @notice Wraps the underlying shares into the wrapped token and mints them to the receiver.\\n     * @param shares The amount of underlying shares to be wrapped.\\n     * @param receiver The address to which the wrapped tokens are minted.\\n     * @return amount_ The amount of wrapped tokens minted.\\n     */\\n    function wrapShares(uint256 shares, address receiver) external returns (uint256 amount_);\\n\\n    /**\\n     * @notice Returns the amount of underlying assets that will be received when unwrapping the wrapped tokens.\\n     * @param amount The amount of wrapped tokens to be unwrapped.\\n     * @return assets_ The amount of underlying assets that will be received.\\n     */\\n    function previewUnwrap(uint256 amount) external view returns (uint256 assets_);\\n\\n    /**\\n     * @notice Returns the amount of underlying assets that will be received when unwrapping the wrapped tokens given\\n     * the new total shares and total supply.\\n     * @param amount The amount of wrapped tokens to be unwrapped.\\n     * @param newTotalShares The new total shares of the wrapped token.\\n     * @param newTotalSupply The new total supply of the wrapped token.\\n     * @return assets_ The amount of underlying assets that will be received.\\n     */\\n    function previewUnwrap(uint256 amount, uint256 newTotalShares, uint256 newTotalSupply)\\n        external\\n        view\\n        returns (uint256 assets_);\\n\\n    /**\\n     * @notice Unwraps the wrapped tokens into the underlying assets.\\n     * @param amount The amount of wrapped tokens to be unwrapped.\\n     * @return assets_ The amount of underlying assets received.\\n     */\\n    function unwrap(uint256 amount) external returns (uint256 assets_);\\n\\n    /**\\n     * @notice Unwraps the wrapped tokens into the underlying assets and sends them to the receiver.\\n     * @param amount The amount of wrapped tokens to be unwrapped.\\n     * @param receiver The address to which the underlying assets are sent.\\n     * @return assets_ The amount of underlying assets received.\\n     */\\n    function unwrap(uint256 amount, address receiver) external returns (uint256 assets_);\\n\\n    /**\\n     * @notice Returns the amount of wrapped tokens that will be minted when wrapping the underlying assets.\\n     * @param assets The amount of underlying assets to be wrapped.\\n     * @return amount_ The amount of wrapped tokens that will be minted.\\n     */\\n    function previewWrap(uint256 assets) external view returns (uint256 amount_);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/UniswapV2/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.2;\\n\\nimport \\\"src/interfaces/UniswapV2/IUniswapV2Router01.sol\\\";\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IERC20Rebasable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.25;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\n\\ninterface IERC20Rebasable is IERC20, IERC20Permit {\\n    /**\\n     * @notice returns the precision factor for shares.\\n     * @return The precision factor for shares.\\n     */\\n    function SHARES_PRECISION_FACTOR() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the total shares.\\n     * @return The total shares.\\n     */\\n    function totalShares() external view returns (uint256);\\n\\n    /**\\n     * @notice returns the share of the user.\\n     * @param user The address of the user to get the share of.\\n     * @return The share of the user.\\n     */\\n    function sharesOf(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Transfer tokens to a specified address by specifying the share amount.\\n     * @param to The address to transfer the tokens to.\\n     * @param shares The amount of shares to be transferred.\\n     * @return True if the transfer was successful, revert otherwise.\\n     */\\n    function transferShares(address to, uint256 shares) external returns (bool);\\n\\n    /**\\n     * @notice Transfer shares from a specified address to another specified address.\\n     * @param from The address to transfer the shares from.\\n     * @param to The address to transfer the shares to.\\n     * @param shares The amount of shares to be transferred.\\n     * @return True if the transfer was successful, revert otherwise.\\n     * @dev This function tries to update the total supply by calling `updateTotalSupply()`\\n     */\\n    function transferSharesFrom(address from, address to, uint256 shares) external returns (bool);\\n\\n    /**\\n     * @notice update the total supply, compute the debase accordingly and transfer the fees to the feesCollector.\\n     * @dev This function is already called at each approval and transfer. It needs to be implemented by a child\\n     * contract\\n     */\\n    function updateTotalSupply() external;\\n\\n    /**\\n     * @notice Convert tokens to shares.\\n     * @param amount The amount of tokens to convert to shares.\\n     * @return shares_ The number of shares corresponding to the tokens.\\n     */\\n    function tokenToShares(uint256 amount) external view returns (uint256 shares_);\\n\\n    /**\\n     * @notice Convert tokens to shares given the new total shares and total supply.\\n     * @param amount The amount of tokens to convert to shares.\\n     * @param newTotalShares The new total shares.\\n     * @param newTotalSupply The new total supply.\\n     * @return shares_ The number of shares corresponding to the tokens.\\n     */\\n    function tokenToShares(uint256 amount, uint256 newTotalShares, uint256 newTotalSupply)\\n        external\\n        view\\n        returns (uint256 shares_);\\n\\n    /**\\n     * @notice Convert shares to tokens.\\n     * @param shares The amount of shares to convert to tokens.\\n     * @return tokenAmount_ The amount of tokens corresponding to the shares.\\n     */\\n    function sharesToToken(uint256 shares) external view returns (uint256 tokenAmount_);\\n\\n    /**\\n     * @notice Convert shares to tokens given the new total shares and total supply.\\n     * @param shares The amount of shares to convert to tokens.\\n     * @param newTotalShares The new total shares.\\n     * @param newTotalSupply The new total supply.\\n     * @return tokenAmount_ The amount of tokens corresponding to the shares.\\n     */\\n    function sharesToToken(uint256 shares, uint256 newTotalShares, uint256 newTotalSupply)\\n        external\\n        view\\n        returns (uint256 tokenAmount_);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/UniswapV2/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address owner) external view returns (uint256);\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n    function transfer(address to, uint256 value) external returns (bool);\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s)\\n        external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint256);\\n    function price1CumulativeLast() external view returns (uint256);\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/UniswapV2/IUniswapV2Router01.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Unlicense\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactETHForTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n    function swapETHForExactTokens(uint256 amountOut, address[] calldata path, address to, uint256 deadline)\\n        external\\n        payable\\n        returns (uint256[] memory amounts);\\n\\n    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\\n    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut)\\n        external\\n        pure\\n        returns (uint256 amountOut);\\n    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut)\\n        external\\n        pure\\n        returns (uint256 amountIn);\\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\\n        external\\n        view\\n        returns (uint256[] memory amounts);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrappedPonzioTheCatAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stake_depositZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stake_noPendingRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stake_refundFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stake_valueNeeded\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakedAmount\",\"type\":\"uint256\"}],\"name\":\"Stake_withdrawTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Stake_withdrawZeroAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"ClaimReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositBy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Skim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LP_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PONZIO\",\"outputs\":[{\"internalType\":\"contract IPonzioTheCat\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRECISION_FACTOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_PONZIO\",\"outputs\":[{\"internalType\":\"contract IWrappedPonzioTheCat\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"pendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pendingRewards_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountPonzioMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountEthMin\",\"type\":\"uint256\"}],\"name\":\"reinvest\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"skim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sync\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddr\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"}],\"internalType\":\"struct IStake.UserInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Stake", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "00000000000000000000000090908e414d3525e33733d320798b5681508255ea00000000000000000000000080b5340c2cf4a5fc9c5c3ec3cb54921e3d49535b", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}