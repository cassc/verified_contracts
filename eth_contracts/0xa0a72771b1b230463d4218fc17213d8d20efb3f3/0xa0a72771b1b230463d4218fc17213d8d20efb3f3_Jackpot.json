{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/VARK/Jackpot.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Jackpot {\\r\\n    /**\\r\\n     * @dev Write to log info about the new game.\\r\\n     *\\r\\n     * @param _game Game number.\\r\\n     * @param _time Time when game stated.\\r\\n     \\r\\n     */\\r\\n    event Game(uint _game, uint indexed _time);\\r\\n\\r\\n    struct Bet {\\r\\n        address addr;\\r\\n        uint256 ticketstart;\\r\\n        uint256 ticketend;\\r\\n    }\\r\\n    struct StakingInfo {\\r\\n        uint depositTime;\\r\\n        uint balance;\\r\\n    }\\r\\n\\r\\n    mapping(uint256 => mapping(uint256 => Bet)) public bets;\\r\\n    mapping(address => StakingInfo) public stakeInfo;\\r\\n    mapping(uint256 => uint256) public totalBets;\\r\\n\\r\\n    //winning tickets history\\r\\n    mapping(uint256 => uint256) public ticketHistory;\\r\\n\\r\\n    //winning address history\\r\\n    mapping(uint256 => address) public winnerHistory;\\r\\n\\r\\n    IERC20 public token;\\r\\n\\r\\n    // Game fee.\\r\\n    uint8 public fee = 10;\\r\\n    // Current game number.\\r\\n    uint public game;\\r\\n    // Min eth deposit jackpot\\r\\n    uint public constant minethjoin = 100 * 10 ** 9;\\r\\n\\r\\n    // Game status\\r\\n    // 0 = running\\r\\n    // 1 = stop to show winners animation\\r\\n\\r\\n    uint public gamestatus = 0;\\r\\n\\r\\n    // All-time game jackpot.\\r\\n    uint public allTimeJackpot = 0;\\r\\n    // All-time game players count\\r\\n    uint public allTimePlayers = 0;\\r\\n\\r\\n    // Game status.\\r\\n    bool public isActive = true;\\r\\n    // The variable that indicates game status switching.\\r\\n    bool public toogleStatus = false;\\r\\n    // The array of all games\\r\\n    uint[] public games;\\r\\n\\r\\n    // Store game jackpot.\\r\\n    mapping(uint => uint) jackpot;\\r\\n    // Store game players.\\r\\n    mapping(uint => address[]) players;\\r\\n    // Store total tickets for each game\\r\\n    mapping(uint => uint) tickets;\\r\\n    // Store bonus pool jackpot.\\r\\n    mapping(uint => uint) bonuspool;\\r\\n    // Store game start block number.\\r\\n    mapping(uint => uint) gamestartblock;\\r\\n\\r\\n    address payable public owner;\\r\\n\\r\\n    uint counter = 1;\\r\\n\\r\\n    /**\\r\\n     * @dev Check sender address and compare it to an owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner, \\\"Only owner can call this function.\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initialize game.\\r\\n     * @dev Create ownable and stats aggregator instances,\\r\\n     * @dev set funds distributor contract address.\\r\\n     *\\r\\n     */\\r\\n\\r\\n    constructor() {\\r\\n        owner = payable(msg.sender);\\r\\n        startGame();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The method that allows buying tickets by directly sending ether to the contract.\\r\\n     */\\r\\n\\r\\n    function setToken(address _address) external onlyOwner {\\r\\n        require(address(token) == address(0));\\r\\n        token = IERC20(_address);\\r\\n    }\\r\\n\\r\\n    function addBonus() public payable {\\r\\n        bonuspool[game] += msg.value;\\r\\n    }\\r\\n\\r\\n    function playerticketstart(\\r\\n        uint _gameid,\\r\\n        uint _pid\\r\\n    ) public view returns (uint256) {\\r\\n        return bets[_gameid][_pid].ticketstart;\\r\\n    }\\r\\n\\r\\n    function playerticketend(\\r\\n        uint _gameid,\\r\\n        uint _pid\\r\\n    ) public view returns (uint256) {\\r\\n        return bets[_gameid][_pid].ticketend;\\r\\n    }\\r\\n\\r\\n    function totaltickets(uint _uint) public view returns (uint256) {\\r\\n        return tickets[_uint];\\r\\n    }\\r\\n\\r\\n    function playeraddr(uint _gameid, uint _pid) public view returns (address) {\\r\\n        return bets[_gameid][_pid].addr;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns current game players.\\r\\n     */\\r\\n    function getPlayedGamePlayers() public view returns (uint) {\\r\\n        return getPlayersInGame(game);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get players by game.\\r\\n     *\\r\\n     * @param playedGame Game number.\\r\\n     */\\r\\n    function getPlayersInGame(uint playedGame) public view returns (uint) {\\r\\n        return players[playedGame].length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns current game jackpot.\\r\\n     */\\r\\n    function getPlayedGameJackpot() public view returns (uint) {\\r\\n        return getGameJackpot(game);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get jackpot by game number.\\r\\n     *\\r\\n     * @param playedGame The number of the played game.\\r\\n     */\\r\\n    function getGameJackpot(uint playedGame) public view returns (uint) {\\r\\n        return jackpot[playedGame] + bonuspool[playedGame];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get bonus pool by game number.\\r\\n     *\\r\\n     * @param playedGame The number of the played game.\\r\\n     */\\r\\n    function getBonusPool(uint playedGame) public view returns (uint) {\\r\\n        return bonuspool[playedGame];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get game start block by game number.\\r\\n     *\\r\\n     * @param playedGame The number of the played game.\\r\\n     */\\r\\n    function getGamestartblock(uint playedGame) public view returns (uint) {\\r\\n        return gamestartblock[playedGame];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get total ticket for game\\r\\n     */\\r\\n    function getGameTotalTickets(uint playedGame) public view returns (uint) {\\r\\n        return tickets[playedGame];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Start the new game.\\r\\n     */\\r\\n    function start() public onlyOwner {\\r\\n        if (players[game].length > 0) {\\r\\n            pickTheWinner();\\r\\n        } else {\\r\\n            bonuspool[game + 1] = bonuspool[game];\\r\\n        }\\r\\n        startGame();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Start the new game.\\r\\n     */\\r\\n    function setGamestatusZero() public onlyOwner {\\r\\n        gamestatus = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get random number. It cant be influenced by anyone\\r\\n     * @dev Random number calculation depends on block timestamp,\\r\\n     * @dev difficulty, counter and jackpot players length.\\r\\n     *\\r\\n     */\\r\\n    function randomNumber(uint number) internal returns (uint) {\\r\\n        counter++;\\r\\n        uint random = uint(\\r\\n            keccak256(\\r\\n                abi.encodePacked(\\r\\n                    block.timestamp,\\r\\n                    counter,\\r\\n                    players[game].length,\\r\\n                    gasleft()\\r\\n                )\\r\\n            )\\r\\n        ) % number;\\r\\n        return random + 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev adds the player to the jackpot game.\\r\\n     */\\r\\n\\r\\n    function deposit(address from, uint amount) public {\\r\\n        require(\\r\\n            msg.sender == address(token),\\r\\n            \\\"Stake by sending token to this contract\\\"\\r\\n        );\\r\\n        require(isActive);\\r\\n        require(gamestatus == 0);\\r\\n        require(amount >= minethjoin, \\\"Amount must be greater than 100 token\\\");\\r\\n\\r\\n        stakeInfo[from].depositTime = block.timestamp;\\r\\n        stakeInfo[from].balance += amount;\\r\\n\\r\\n        uint newtotalstr = totalBets[game];\\r\\n        bets[game][newtotalstr].addr = address(from);\\r\\n        bets[game][newtotalstr].ticketstart = tickets[game] + 1;\\r\\n        bets[game][newtotalstr].ticketend =\\r\\n            ((tickets[game] + 1) + (amount / (100 * 10 ** 9))) -\\r\\n            1;\\r\\n\\r\\n        totalBets[game] += 1;\\r\\n        jackpot[game] += amount;\\r\\n        tickets[game] += (amount / (100 * 10 ** 9));\\r\\n\\r\\n        players[game].push(from);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Withdraw token\\r\\n     */\\r\\n    function withdraw() public {\\r\\n        require(stakeInfo[msg.sender].balance > 0, \\\"Your balance is zero\\\");\\r\\n        require(\\r\\n            block.timestamp > stakeInfo[msg.sender].depositTime + 1 days,\\r\\n            \\\"Withdraw is not available\\\"\\r\\n        );\\r\\n        token.transfer(msg.sender, stakeInfo[msg.sender].balance);\\r\\n        stakeInfo[msg.sender].balance = 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Start the new game.\\r\\n     * @dev Checks game status changes, if exists request for changing game status game status\\r\\n     * @dev will be changed.\\r\\n     */\\r\\n    function startGame() internal {\\r\\n        require(isActive);\\r\\n\\r\\n        game += 1;\\r\\n        if (toogleStatus) {\\r\\n            isActive = !isActive;\\r\\n            toogleStatus = false;\\r\\n        }\\r\\n        gamestartblock[game] = block.timestamp;\\r\\n        emit Game(game, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Pick the winner using random number provably fair function.\\r\\n     */\\r\\n    function pickTheWinner() internal {\\r\\n        uint winner;\\r\\n        uint toPlayer = address(this).balance;\\r\\n        if (players[game].length == 1) {\\r\\n            payable(players[game][0]).transfer(toPlayer);\\r\\n            winner = 0;\\r\\n            ticketHistory[game] = 1;\\r\\n            winnerHistory[game] = players[game][0];\\r\\n        } else {\\r\\n            winner = randomNumber(tickets[game]); //winning ticket\\r\\n            uint256 lookingforticket = winner;\\r\\n            address ticketwinner;\\r\\n            for (uint8 i = 0; i <= totalBets[game]; i++) {\\r\\n                address addr = bets[game][i].addr;\\r\\n                uint256 ticketstart = bets[game][i].ticketstart;\\r\\n                uint256 ticketend = bets[game][i].ticketend;\\r\\n                if (\\r\\n                    lookingforticket >= ticketstart &&\\r\\n                    lookingforticket <= ticketend\\r\\n                ) {\\r\\n                    ticketwinner = addr; //finding winner address\\r\\n                }\\r\\n            }\\r\\n\\r\\n            ticketHistory[game] = lookingforticket;\\r\\n            winnerHistory[game] = ticketwinner;\\r\\n\\r\\n            payable(ticketwinner).transfer(toPlayer); //send prize to winner\\r\\n        }\\r\\n\\r\\n        allTimeJackpot += toPlayer;\\r\\n        allTimePlayers += players[game].length;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"lib/forge-std:ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"lib/openzeppelin-contracts:ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/\",\r\n      \"lib/openzeppelin-contracts:erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"lib/openzeppelin-contracts:forge-std/=lib/openzeppelin-contracts/lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_game\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"Game\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addBonus\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTimeJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allTimePlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ticketstart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ticketend\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gamestatus\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getBonusPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getGameJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getGameTotalTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getGamestartblock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayedGameJackpot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayedGamePlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"playedGame\",\"type\":\"uint256\"}],\"name\":\"getPlayersInGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minethjoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"playeraddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"playerticketend\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gameid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"playerticketstart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGamestatusZero\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"depositTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"start\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"ticketHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toogleStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_uint\",\"type\":\"uint256\"}],\"name\":\"totaltickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"winnerHistory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Jackpot", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}