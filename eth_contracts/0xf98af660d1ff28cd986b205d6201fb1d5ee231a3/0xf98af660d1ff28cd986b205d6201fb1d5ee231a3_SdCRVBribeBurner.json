{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/concentrator/stakedao/SdCRVBribeBurner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./StakeDAOVaultBase.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n\\ncontract SdCRVBribeBurner is Ownable {\\n  using SafeERC20 for IERC20;\\n\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the zap logic contract is updated.\\n  /// @param _oldLogic The old logic address.\\n  /// @param _newLogic The new logic address.\\n  event UpdateLogic(address _oldLogic, address _newLogic);\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The address of CRV Token.\\n  address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\\n\\n  /// @dev The address of Stake DAO: SDT Token.\\n  address private constant SDT = 0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F;\\n\\n  /// @dev The address of StakeDAOCRVVault contract.\\n  address private constant vault = 0x2b3e72f568F96d7209E20C8B8f4F2A363ee1E3F6;\\n\\n  /// @dev The address of VeSDTDelegation contract.\\n  address private constant delegator = 0x6037Bb1BBa598bf88D816cAD90A28cC00fE3ff64;\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice Check whether an account is whitelisted.\\n  mapping(address => bool) public isWhitelist;\\n\\n  /// @notice The address of TokenZapLogic contract.\\n  address public logic;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n  constructor(address _logic) {\\n    logic = _logic;\\n\\n    IERC20(CRV).safeApprove(vault, uint256(-1));\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Burn token and send to StakeDAOCRVVault and VeSDTDelegation contract.\\n  /// @param token The amount of token to burn.\\n  /// @param routeSDT The route to convert token as SDT.\\n  /// @param routeCRV The route to convert token as CRV.\\n  function burn(\\n    address token,\\n    uint256[] memory routeSDT,\\n    uint256 minSDT,\\n    uint256[] memory routeCRV,\\n    uint256 minCRV\\n  ) external {\\n    require(isWhitelist[msg.sender], \\\"only whitelist\\\");\\n\\n    uint256 _balance = IERC20(token).balanceOf(address(this));\\n    (address _platform, uint256 _platformFee, , uint256 _boostFee, ) = StakeDAOVaultBase(vault).feeInfo();\\n\\n    if (_platformFee > 0) {\\n      _platformFee = (_platformFee * _balance) / 1e7;\\n\\n      IERC20(token).safeTransfer(_platform, _platformFee);\\n    }\\n\\n    if (_boostFee > 0) {\\n      _boostFee = (_boostFee * _balance) / 1e7;\\n      _boostFee = _convert(_boostFee, routeSDT);\\n      require(_boostFee >= minSDT, \\\"insufficient SDT\\\");\\n\\n      IERC20(SDT).safeTransfer(delegator, _boostFee);\\n    }\\n\\n    _balance -= _platformFee + _boostFee;\\n    if (_balance > 0) {\\n      _balance = _convert(_balance, routeCRV);\\n      require(_balance >= minCRV, \\\"insufficient CRV\\\");\\n\\n      uint256[] memory _amounts = new uint256[](1);\\n      address[] memory _tokens = new address[](1);\\n      _amounts[0] = _balance;\\n      _tokens[0] = CRV;\\n      StakeDAOVaultBase(vault).donate(_tokens, _amounts);\\n    }\\n  }\\n\\n  // solhint-disable-next-line no-empty-blocks\\n  receive() external payable {}\\n\\n  /*******************************\\n   * Public Restricted Functions *\\n   *******************************/\\n\\n  /// @notice Update the whitelist status of account.\\n  /// @param _account The address to update.\\n  /// @param _status The status to update.\\n  function updateWhitelist(address _account, bool _status) external onlyOwner {\\n    isWhitelist[_account] = _status;\\n  }\\n\\n  /// @notice Update zap logic contract.\\n  /// @param _newLogic The address to update.\\n  function updateLogic(address _newLogic) external onlyOwner {\\n    address _oldLogic = logic;\\n    logic = _newLogic;\\n\\n    emit UpdateLogic(_oldLogic, _newLogic);\\n  }\\n\\n  /// @notice Emergency function\\n  function execute(\\n    address _to,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external payable onlyOwner returns (bool, bytes memory) {\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n    return (success, result);\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to convert token with routes.\\n  /// @param _amount The amount of input token.\\n  /// @param _routes The routes to do zap. See comments in `TokenZapLogic` for more details.\\n  function _convert(uint256 _amount, uint256[] memory _routes) internal returns (uint256) {\\n    if (_routes.length == 0) return _amount;\\n\\n    address _logic = logic;\\n    for (uint256 i = 0; i < _routes.length; i++) {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (bool _success, bytes memory _result) = _logic.delegatecall(\\n        abi.encodeWithSignature(\\\"swap(uint256,uint256)\\\", _routes[i], _amount)\\n      );\\n      // below lines will propagate inner error up\\n      if (!_success) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n          let ptr := mload(0x40)\\n          let size := returndatasize()\\n          returndatacopy(ptr, 0, size)\\n          revert(ptr, size)\\n        }\\n      }\\n      _amount = abi.decode(_result, (uint256));\\n    }\\n    return _amount;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/stakedao/StakeDAOVaultBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\n\\nimport \\\"./interfaces/IStakeDAOGauge.sol\\\";\\nimport \\\"./interfaces/IStakeDAOLockerProxy.sol\\\";\\nimport \\\"./interfaces/IStakeDAOVault.sol\\\";\\n\\nimport \\\"../../common/FeeCustomization.sol\\\";\\n\\n// solhint-disable not-rely-on-time\\n\\nabstract contract StakeDAOVaultBase is OwnableUpgradeable, FeeCustomization, IStakeDAOVault {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using SafeMathUpgradeable for uint256;\\n\\n  /// @notice Emitted when the fee information is updated.\\n  /// @param _platform The address of platform contract.\\n  /// @param _platformPercentage The new platform fee percentage.\\n  /// @param _bountyPercentage The new harvest bounty fee percentage.\\n  /// @param _boostPercentage The new veSDT boost fee percentage.\\n  /// @param _withdrawPercentage The new withdraw fee percentage.\\n  event UpdateFeeInfo(\\n    address indexed _platform,\\n    uint32 _platformPercentage,\\n    uint32 _bountyPercentage,\\n    uint32 _boostPercentage,\\n    uint32 _withdrawPercentage\\n  );\\n\\n  /// @notice Emitted when the length of reward period is updated.\\n  /// @param _token The address of token updated.\\n  /// @param _period The new reward period.\\n  event UpdateRewardPeriod(address indexed _token, uint32 _period);\\n\\n  /// @notice Emitted when owner take withdraw fee from contract.\\n  /// @param _amount The amount of fee withdrawn.\\n  event TakeWithdrawFee(uint256 _amount);\\n\\n  /// @dev Compiler will pack this into two `uint256`.\\n  struct RewardData {\\n    // The current reward rate per second.\\n    uint128 rate;\\n    // The length of reward period in seconds.\\n    // If the value is zero, the reward will be distributed immediately.\\n    uint32 periodLength;\\n    // The timesamp in seconds when reward is updated.\\n    uint48 lastUpdate;\\n    // The finish timestamp in seconds of current reward period.\\n    uint48 finishAt;\\n    // The accumulated acrv reward per share, with 1e9 precision.\\n    uint256 accRewardPerShare;\\n  }\\n\\n  /// @dev Compiler will pack this into single `uint256`.\\n  struct FeeInfo {\\n    // The address of recipient of platform fee\\n    address platform;\\n    // The percentage of rewards to take for platform on harvest, multipled by 1e7.\\n    uint24 platformPercentage;\\n    // The percentage of rewards to take for caller on harvest, multipled by 1e7.\\n    uint24 bountyPercentage;\\n    // The percentage of rewards to take for veSDT boost on harvest, multipled by 1e7.\\n    uint24 boostPercentage;\\n    // The percentage of staked token to take on withdraw, multipled by 1e7.\\n    uint24 withdrawPercentage;\\n  }\\n\\n  struct UserInfo {\\n    // The total amount of staking token deposited.\\n    uint256 balance;\\n    // Mapping from reward token address to pending rewards.\\n    mapping(address => uint256) rewards;\\n    // Mapping from reward token address to reward per share paid.\\n    mapping(address => uint256) rewardPerSharePaid;\\n  }\\n\\n  /// @dev The type for withdraw fee, used in FeeCustomization.\\n  bytes32 internal constant WITHDRAW_FEE_TYPE = keccak256(\\\"StakeDAOVaultBase.WithdrawFee\\\");\\n\\n  /// @dev The denominator used for reward calculation.\\n  uint256 private constant REWARD_PRECISION = 1e18;\\n\\n  /// @dev The maximum value of repay fee percentage.\\n  uint256 private constant MAX_WITHDRAW_FEE = 1e6; // 10%\\n\\n  /// @dev The maximum value of veSDT boost fee percentage.\\n  uint256 private constant MAX_BOOST_FEE = 2e6; // 20%\\n\\n  /// @dev The maximum value of platform fee percentage.\\n  uint256 private constant MAX_PLATFORM_FEE = 2e6; // 20%\\n\\n  /// @dev The maximum value of harvest bounty percentage.\\n  uint256 private constant MAX_HARVEST_BOUNTY = 1e6; // 10%\\n\\n  /// @dev The number of seconds in one week.\\n  uint256 internal constant WEEK = 86400 * 7;\\n\\n  /// @dev The address of Stake DAO: SDT Token.\\n  address internal constant SDT = 0x73968b9a57c6E53d41345FD57a6E6ae27d6CDB2F;\\n\\n  /// @notice The address of StakeDaoLockerProxy contract.\\n  address public immutable stakeDAOProxy;\\n\\n  /// @notice The address of VeSDTDelegation contract.\\n  address public immutable delegation;\\n\\n  /// @notice The address of StakeDAO gauge.\\n  address public gauge;\\n\\n  /// @notice The address of staking token.\\n  address public stakingToken;\\n\\n  /// @notice The list of reward tokens from StakeDAO gauge.\\n  address[] public rewardTokens;\\n\\n  /// @notice Mapping from reward token to reward information.\\n  mapping(address => RewardData) public rewardInfo;\\n\\n  /// @inheritdoc IStakeDAOVault\\n  uint256 public override totalSupply;\\n\\n  /// @dev Mapping from user address to user information.\\n  mapping(address => UserInfo) internal userInfo;\\n\\n  /// @notice The accumulated amount of unclaimed withdraw fee.\\n  uint256 public withdrawFeeAccumulated;\\n\\n  /// @notice The fee information, including platform fee, bounty fee and withdraw fee.\\n  FeeInfo public feeInfo;\\n\\n  /********************************** Constructor **********************************/\\n\\n  constructor(address _stakeDAOProxy, address _delegation) {\\n    stakeDAOProxy = _stakeDAOProxy;\\n    delegation = _delegation;\\n  }\\n\\n  function _initialize(address _gauge) internal {\\n    OwnableUpgradeable.__Ownable_init();\\n\\n    gauge = _gauge;\\n    stakingToken = IStakeDAOGauge(_gauge).staking_token();\\n\\n    uint256 _count = IStakeDAOGauge(_gauge).reward_count();\\n    for (uint256 i = 0; i < _count; i++) {\\n      rewardTokens.push(IStakeDAOGauge(_gauge).reward_tokens(i));\\n    }\\n  }\\n\\n  /********************************** View Functions **********************************/\\n\\n  struct UserRewards {\\n    // The total amount of staking token deposited.\\n    uint256 balance;\\n    // The list of reward tokens\\n    address[] tokens;\\n    // The list of pending reward amounts.\\n    uint256[] rewards;\\n  }\\n\\n  /// @notice Return aggregated user information for single user.\\n  /// @param _user The address of user to query.\\n  /// @return _info The aggregated user information to return.\\n  function getUserInfo(address _user) external view returns (UserRewards memory _info) {\\n    _info.balance = userInfo[_user].balance;\\n\\n    uint256 _count = rewardTokens.length;\\n    _info.tokens = rewardTokens;\\n    _info.rewards = new uint256[](_count);\\n    for (uint256 i = 0; i < _count; i++) {\\n      _info.rewards[i] = userInfo[_user].rewards[_info.tokens[i]];\\n    }\\n  }\\n\\n  /// @inheritdoc IStakeDAOVault\\n  function balanceOf(address _user) external view override returns (uint256) {\\n    return userInfo[_user].balance;\\n  }\\n\\n  /********************************** Mutated Functions **********************************/\\n\\n  /// @inheritdoc IStakeDAOVault\\n  function deposit(uint256 _amount, address _recipient) external virtual override {\\n    address _token = stakingToken;\\n    if (_amount == uint256(-1)) {\\n      _amount = IERC20Upgradeable(_token).balanceOf(msg.sender);\\n    }\\n    require(_amount > 0, \\\"deposit zero amount\\\");\\n\\n    IERC20Upgradeable(_token).safeTransferFrom(msg.sender, stakeDAOProxy, _amount);\\n    _deposit(_amount, _recipient);\\n  }\\n\\n  /// @inheritdoc IStakeDAOVault\\n  function withdraw(uint256 _amount, address _recipient) external virtual override {\\n    _checkpoint(msg.sender);\\n\\n    uint256 _balance = userInfo[_recipient].balance;\\n    if (_amount == uint256(-1)) {\\n      _amount = _balance;\\n    }\\n    require(_amount <= _balance, \\\"insufficient staked token\\\");\\n    require(_amount > 0, \\\"withdraw zero amount\\\");\\n\\n    userInfo[_recipient].balance = _balance - _amount;\\n    totalSupply -= _amount;\\n\\n    uint256 _withdrawFee = getFeeRate(WITHDRAW_FEE_TYPE, msg.sender);\\n    if (_withdrawFee > 0) {\\n      _withdrawFee = (_amount * _withdrawFee) / FEE_PRECISION;\\n      withdrawFeeAccumulated += _withdrawFee;\\n      _amount -= _withdrawFee;\\n    }\\n\\n    IStakeDAOLockerProxy(stakeDAOProxy).withdraw(gauge, stakingToken, _amount, _recipient);\\n\\n    emit Withdraw(msg.sender, _recipient, _amount, _withdrawFee);\\n  }\\n\\n  /// @inheritdoc IStakeDAOVault\\n  function claim(address _user, address _recipient) external override returns (uint256[] memory _amounts) {\\n    if (_user != msg.sender) {\\n      require(_recipient == _user, \\\"claim from others to others\\\");\\n    }\\n\\n    _checkpoint(_user);\\n\\n    UserInfo storage _info = userInfo[_user];\\n    uint256 _count = rewardTokens.length;\\n    _amounts = new uint256[](_count);\\n    for (uint256 i = 0; i < _count; i++) {\\n      address _token = rewardTokens[i];\\n      _amounts[i] = _info.rewards[_token];\\n      if (_amounts[i] > 0) {\\n        IERC20Upgradeable(_token).safeTransfer(_recipient, _amounts[i]);\\n        _info.rewards[_token] = 0;\\n      }\\n    }\\n\\n    emit Claim(_user, _recipient, _amounts);\\n  }\\n\\n  /// @inheritdoc IStakeDAOVault\\n  function harvest(address _recipient) external override {\\n    // 1. checkpoint pending rewards\\n    _checkpoint(address(0));\\n\\n    // 2. claim rewards from gauge\\n    address[] memory _tokens = rewardTokens;\\n    uint256[] memory _amounts = IStakeDAOLockerProxy(stakeDAOProxy).claimRewards(gauge, _tokens);\\n\\n    // 3. distribute platform fee, harvest bounty and boost fee\\n    uint256[] memory _platformFees = new uint256[](_tokens.length);\\n    uint256[] memory _harvestBounties = new uint256[](_tokens.length);\\n    uint256 _boostFee;\\n    FeeInfo memory _fee = feeInfo;\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      address _token = _tokens[i];\\n      if (_fee.platformPercentage > 0) {\\n        _platformFees[i] = (_amounts[i] * uint256(_fee.platformPercentage) * 100) / FEE_PRECISION;\\n        IERC20Upgradeable(_token).safeTransfer(_fee.platform, _platformFees[i]);\\n      }\\n      if (_fee.bountyPercentage > 0) {\\n        _harvestBounties[i] = (_amounts[i] * uint256(_fee.bountyPercentage) * 100) / FEE_PRECISION;\\n        IERC20Upgradeable(_token).safeTransfer(_recipient, _harvestBounties[i]);\\n      }\\n      if (_tokens[i] == SDT && _fee.boostPercentage > 0) {\\n        _boostFee = (_amounts[i] * uint256(_fee.boostPercentage) * 100) / FEE_PRECISION;\\n        IERC20Upgradeable(_token).safeTransfer(delegation, _boostFee);\\n      }\\n      _amounts[i] -= _platformFees[i] + _harvestBounties[i];\\n      if (_tokens[i] == SDT) {\\n        _amounts[i] -= _boostFee;\\n      }\\n    }\\n\\n    emit Harvest(msg.sender, _amounts, _harvestBounties, _platformFees, _boostFee);\\n\\n    // 4. distribute remaining rewards to users\\n    _distribute(_tokens, _amounts);\\n  }\\n\\n  /// @inheritdoc IStakeDAOVault\\n  function checkpoint(address _user) external override {\\n    _checkpoint(_user);\\n  }\\n\\n  /// @notice Helper function to reset reward tokens according to StakeDAO gauge.\\n  function resetRewardTokens() external {\\n    delete rewardTokens;\\n\\n    address _gauge = gauge;\\n    uint256 _count = IStakeDAOGauge(_gauge).reward_count();\\n    for (uint256 i = 0; i < _count; i++) {\\n      rewardTokens.push(IStakeDAOGauge(_gauge).reward_tokens(i));\\n    }\\n  }\\n\\n  /// @inheritdoc IStakeDAOVault\\n  function donate(address[] memory _tokens, uint256[] memory _amounts) external override {\\n    require(_tokens.length == _amounts.length, \\\"length mismatch\\\");\\n\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      if (_amounts[i] > 0) {\\n        IERC20Upgradeable(_tokens[i]).safeTransferFrom(msg.sender, address(this), _amounts[i]);\\n      }\\n    }\\n    _distribute(_tokens, _amounts);\\n  }\\n\\n  /********************************** Restricted Functions **********************************/\\n\\n  /// @notice Withdraw and reset all pending withdraw fee from the contract.\\n  /// @param _recipient The address of recipient who will receive the withdraw fee.\\n  function takeWithdrawFee(address _recipient) external onlyOwner {\\n    uint256 _amount = withdrawFeeAccumulated;\\n    if (_amount > 0) {\\n      IStakeDAOLockerProxy(stakeDAOProxy).withdraw(gauge, stakingToken, _amount, _recipient);\\n      withdrawFeeAccumulated = 0;\\n\\n      emit TakeWithdrawFee(_amount);\\n    }\\n  }\\n\\n  /// @notice Update the fee information.\\n  /// @param _platform The platform address to be updated.\\n  /// @param _platformPercentage The platform fee percentage to be updated, multipled by 1e7.\\n  /// @param _bountyPercentage The harvest bounty percentage to be updated, multipled by 1e7.\\n  /// @param _boostPercentage The new veSDT boost fee percentage, multipled by 1e7.\\n  /// @param _withdrawPercentage The withdraw fee percentage to be updated, multipled by 1e7.\\n  function updateFeeInfo(\\n    address _platform,\\n    uint24 _platformPercentage,\\n    uint24 _bountyPercentage,\\n    uint24 _boostPercentage,\\n    uint24 _withdrawPercentage\\n  ) external onlyOwner {\\n    require(_platform != address(0), \\\"zero address\\\");\\n    require(_platformPercentage <= MAX_PLATFORM_FEE, \\\"platform fee too large\\\");\\n    require(_bountyPercentage <= MAX_HARVEST_BOUNTY, \\\"bounty fee too large\\\");\\n    require(_boostPercentage <= MAX_BOOST_FEE, \\\"boost fee too large\\\");\\n    require(_withdrawPercentage <= MAX_WITHDRAW_FEE, \\\"withdraw fee too large\\\");\\n\\n    feeInfo = FeeInfo(_platform, _platformPercentage, _bountyPercentage, _boostPercentage, _withdrawPercentage);\\n\\n    emit UpdateFeeInfo(_platform, _platformPercentage, _bountyPercentage, _boostPercentage, _withdrawPercentage);\\n  }\\n\\n  /// @notice Update reward period length for some token.\\n  /// @param _token The address of token to update.\\n  /// @param _period The length of the period\\n  function updateRewardPeriod(address _token, uint32 _period) external onlyOwner {\\n    require(_period <= WEEK, \\\"reward period too long\\\");\\n\\n    rewardInfo[_token].periodLength = _period;\\n\\n    emit UpdateRewardPeriod(_token, _period);\\n  }\\n\\n  /// @notice Update withdraw fee for certain user.\\n  /// @param _user The address of user to update.\\n  /// @param _percentage The withdraw fee percentage to be updated, multipled by 1e9.\\n  function setWithdrawFeeForUser(address _user, uint32 _percentage) external onlyOwner {\\n    require(_percentage <= MAX_WITHDRAW_FEE * 100, \\\"withdraw fee too large\\\");\\n\\n    _setFeeCustomization(WITHDRAW_FEE_TYPE, _user, _percentage);\\n  }\\n\\n  /********************************** Internal Functions **********************************/\\n\\n  /// @dev Internal function to update the user information.\\n  /// @param _user The address of user to update.\\n  /// @return _hasSDT Whether the reward tokens contain SDT.\\n  function _checkpoint(address _user) internal virtual returns (bool _hasSDT) {\\n    UserInfo storage _userInfo = userInfo[_user];\\n    uint256 _balance = _userInfo.balance;\\n\\n    uint256 _count = rewardTokens.length;\\n    for (uint256 i = 0; i < _count; i++) {\\n      address _token = rewardTokens[i];\\n      _checkpoint(_token, _userInfo, _balance);\\n\\n      if (_token == SDT) _hasSDT = true;\\n    }\\n  }\\n\\n  /// @dev Internal function to update the user information for specific token.\\n  /// @param _token The address of token to update.\\n  /// @param _userInfo The UserInfor struct to update.\\n  /// @param _balance The total amount of staking token staked for the user.\\n  function _checkpoint(\\n    address _token,\\n    UserInfo storage _userInfo,\\n    uint256 _balance\\n  ) internal {\\n    RewardData memory _rewardInfo = rewardInfo[_token];\\n    if (_rewardInfo.periodLength > 0) {\\n      uint256 _currentTime = _rewardInfo.finishAt;\\n      if (_currentTime > block.timestamp) {\\n        _currentTime = block.timestamp;\\n      }\\n      uint256 _duration = _currentTime >= _rewardInfo.lastUpdate ? _currentTime - _rewardInfo.lastUpdate : 0;\\n      if (_duration > 0) {\\n        _rewardInfo.lastUpdate = uint48(block.timestamp);\\n        _rewardInfo.accRewardPerShare = _rewardInfo.accRewardPerShare.add(\\n          _duration.mul(_rewardInfo.rate).mul(REWARD_PRECISION) / totalSupply\\n        );\\n\\n        rewardInfo[_token] = _rewardInfo;\\n      }\\n    }\\n\\n    // update user information\\n    if (_balance > 0) {\\n      _userInfo.rewards[_token] = uint256(_userInfo.rewards[_token]).add(\\n        _rewardInfo.accRewardPerShare.sub(_userInfo.rewardPerSharePaid[_token]).mul(_balance) / REWARD_PRECISION\\n      );\\n      _userInfo.rewardPerSharePaid[_token] = _rewardInfo.accRewardPerShare;\\n    }\\n  }\\n\\n  /// @dev Internal function to deposit staking token to proxy.\\n  /// @param _amount The amount of staking token to deposit.\\n  /// @param _recipient The address of recipient who will receive the deposited staking token.\\n  function _deposit(uint256 _amount, address _recipient) internal {\\n    _checkpoint(_recipient);\\n\\n    uint256 _staked = IStakeDAOLockerProxy(stakeDAOProxy).deposit(gauge, stakingToken);\\n    require(_staked >= _amount, \\\"staked amount mismatch\\\");\\n\\n    userInfo[_recipient].balance += _amount;\\n    totalSupply += _amount;\\n\\n    emit Deposit(msg.sender, _recipient, _amount);\\n  }\\n\\n  /// @dev Internal function to distribute new harvested rewards.\\n  /// @param _tokens The list of reward tokens to update.\\n  /// @param _amounts The list of corresponding reward token amounts.\\n  function _distribute(address[] memory _tokens, uint256[] memory _amounts) internal {\\n    uint256 _totalSupply = totalSupply;\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      if (_amounts[i] == 0) continue;\\n      RewardData memory _info = rewardInfo[_tokens[i]];\\n\\n      if (_info.periodLength == 0) {\\n        // distribute intermediately\\n        _info.accRewardPerShare = _info.accRewardPerShare.add(_amounts[i].mul(REWARD_PRECISION) / _totalSupply);\\n      } else {\\n        // distribute linearly\\n        if (block.timestamp >= _info.finishAt) {\\n          _info.rate = uint128(_amounts[i] / _info.periodLength);\\n        } else {\\n          uint256 _remaining = _info.finishAt - block.timestamp;\\n          uint256 _leftover = _remaining * _info.rate;\\n          _info.rate = uint128((_amounts[i] + _leftover) / _info.periodLength);\\n        }\\n\\n        _info.lastUpdate = uint48(block.timestamp);\\n        _info.finishAt = uint48(block.timestamp + _info.periodLength);\\n      }\\n\\n      rewardInfo[_tokens[i]] = _info;\\n    }\\n  }\\n\\n  /// @inheritdoc FeeCustomization\\n  function _defaultFeeRate(bytes32) internal view override returns (uint256) {\\n    return uint256(feeInfo.withdrawPercentage) * 100;\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/FeeCustomization.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable no-inline-assembly\\n\\nabstract contract FeeCustomization {\\n  /// @notice Emitted when a fee customization is set.\\n  /// @param _feeType The type of fee to set.\\n  /// @param _user The address of user to set.\\n  /// @param _rate The fee rate for the user.\\n  event CustomizeFee(bytes32 _feeType, address _user, uint256 _rate);\\n\\n  /// @notice Emitted when a fee customization is cancled.\\n  /// @param _feeType The type of fee to cancle.\\n  /// @param _user The address of user to cancle.\\n  event CancleCustomizeFee(bytes32 _feeType, address _user);\\n\\n  /// @dev The fee denominator used for rate calculation.\\n  uint256 internal constant FEE_PRECISION = 1e9;\\n\\n  /// @dev The salt used to compute storage slot.\\n  bytes32 private constant SALT = keccak256(\\\"FeeCustomization\\\");\\n\\n  /// @notice Return the fee rate for the user\\n  /// @param _feeType The type of fee to query.\\n  /// @param _user The address of user to query.\\n  /// @return rate The rate of fee for the user, multiplied by 1e9\\n  function getFeeRate(bytes32 _feeType, address _user) public view returns (uint256 rate) {\\n    rate = _defaultFeeRate(_feeType);\\n\\n    (uint8 _customized, uint32 _rate) = _loadFeeCustomization(_feeType, _user);\\n    if (_customized == 1) {\\n      rate = _rate;\\n    }\\n  }\\n\\n  /// @dev Internal function to set customized fee for user.\\n  /// @param _feeType The type of fee to update.\\n  /// @param _user The address of user to update.\\n  /// @param _rate The fee rate to update.\\n  function _setFeeCustomization(\\n    bytes32 _feeType,\\n    address _user,\\n    uint32 _rate\\n  ) internal {\\n    require(_rate <= FEE_PRECISION, \\\"rate too large\\\");\\n\\n    uint256 _slot = _computeStorageSlot(_feeType, _user);\\n    uint256 _encoded = _encode(1, _rate);\\n    assembly {\\n      sstore(_slot, _encoded)\\n    }\\n\\n    emit CustomizeFee(_feeType, _user, _rate);\\n  }\\n\\n  /// @dev Internal function to cancel fee customization.\\n  /// @param _feeType The type of fee to update.\\n  /// @param _user The address of user to update.\\n  function _cancleFeeCustomization(bytes32 _feeType, address _user) internal {\\n    uint256 _slot = _computeStorageSlot(_feeType, _user);\\n    assembly {\\n      sstore(_slot, 0)\\n    }\\n\\n    emit CancleCustomizeFee(_feeType, _user);\\n  }\\n\\n  /// @dev Return the default fee rate for certain type.\\n  /// @param _feeType The type of fee to query.\\n  /// @return rate The default rate of fee, multiplied by 1e9\\n  function _defaultFeeRate(bytes32 _feeType) internal view virtual returns (uint256 rate);\\n\\n  /// @dev Internal function to load fee customization from storage.\\n  /// @param _feeType The type of fee to query.\\n  /// @param _user The address of user to query.\\n  /// @return customized Whether there is a customization.\\n  /// @return rate The customized fee rate, multiplied by 1e9.\\n  function _loadFeeCustomization(bytes32 _feeType, address _user) private view returns (uint8 customized, uint32 rate) {\\n    uint256 _slot = _computeStorageSlot(_feeType, _user);\\n    uint256 _encoded;\\n    assembly {\\n      _encoded := sload(_slot)\\n    }\\n    (customized, rate) = _decode(_encoded);\\n  }\\n\\n  /// @dev Internal function to compute storage slot for fee storage.\\n  /// @param _feeType The type of fee.\\n  /// @param _user The address of user.\\n  /// @return slot The destination storage slot.\\n  function _computeStorageSlot(bytes32 _feeType, address _user) private pure returns (uint256 slot) {\\n    bytes32 salt = SALT;\\n    assembly {\\n      mstore(0x00, _feeType)\\n      mstore(0x20, xor(_user, salt))\\n      slot := keccak256(0x00, 0x40)\\n    }\\n  }\\n\\n  /// @dev Internal function to encode customized fee data. The encoding is\\n  /// low ---------------------> high\\n  /// |   8 bits   | 32 bits | 216 bits |\\n  /// | customized |   rate  | reserved |\\n  ///\\n  /// @param customized If it is 0, there is no customization; if it is 1, there is customization.\\n  /// @param rate The customized fee rate, multiplied by 1e9.\\n  function _encode(uint8 customized, uint32 rate) private pure returns (uint256 encoded) {\\n    encoded = (uint256(rate) << 8) | uint256(customized);\\n  }\\n\\n  /// @dev Internal function to decode data.\\n  /// @param _encoded The data to decode.\\n  /// @return customized Whether there is a customization.\\n  /// @return rate The customized fee rate, multiplied by 1e9.\\n  function _decode(uint256 _encoded) private pure returns (uint8 customized, uint32 rate) {\\n    customized = uint8(_encoded & 0xff);\\n    rate = uint32((_encoded >> 8) & 0xffffffff);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/stakedao/interfaces/IStakeDAOLockerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IStakeDAOMultiMerkleStash.sol\\\";\\n\\ninterface IStakeDAOLockerProxy {\\n  /// @notice Deposit staked token to StakeDAO gauge.\\n  /// @dev The caller should make sure the token is already transfered to the contract.\\n  /// @param _gauge The address of gauge.\\n  /// @param _token The address token to deposit.\\n  /// @return _amount The amount of token deposited. This can be used for cross validation.\\n  function deposit(address _gauge, address _token) external returns (uint256 _amount);\\n\\n  /// @notice Withdraw staked token from StakeDAO gauge.\\n  /// @param _gauge The address of gauge.\\n  /// @param _token The address token to withdraw.\\n  /// @param _amount The amount of token to withdraw.\\n  /// @param _recipient The address of recipient who will receive the staked token.\\n  function withdraw(\\n    address _gauge,\\n    address _token,\\n    uint256 _amount,\\n    address _recipient\\n  ) external;\\n\\n  /// @notice Claim pending rewards from StakeDAO gauge.\\n  /// @dev Be careful that the StakeDAO gauge supports `claim_rewards_for`. Currently,\\n  /// it is fine since only owner can call the function through `ClaimRewards` contract.\\n  /// @param _gauge The address of gauge to claim.\\n  /// @param _tokens The list of reward tokens to claim.\\n  /// @return _amounts The list of amount of rewards claim for corresponding tokens.\\n  function claimRewards(address _gauge, address[] calldata _tokens) external returns (uint256[] memory _amounts);\\n\\n  /// @notice Claim bribe rewards for sdCRV.\\n  /// @param _claims The claim parameters passing to StakeDAOMultiMerkleStash contract.\\n  /// @param _recipient The address of recipient who will receive the bribe rewards.\\n  function claimBribeRewards(IStakeDAOMultiMerkleStash.claimParam[] memory _claims, address _recipient) external;\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/stakedao/interfaces/IStakeDAOGauge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface IStakeDAOGauge {\\n  function deposit(uint256) external;\\n\\n  function balanceOf(address) external view returns (uint256);\\n\\n  function withdraw(uint256) external;\\n\\n  function claim_rewards() external;\\n\\n  function reward_tokens(uint256) external view returns (address); //v2\\n\\n  function rewarded_token() external view returns (address); //v1\\n\\n  function reward_count() external view returns (uint256);\\n\\n  function staking_token() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/stakedao/interfaces/IStakeDAOVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IStakeDAOVault {\\n  /// @notice Emitted when user deposit staking token to the contract.\\n  /// @param _owner The address of the owner of the staking token.\\n  /// @param _recipient The address of the recipient of the staking token.\\n  /// @param _amount The amount of staking token deposited.\\n  event Deposit(address indexed _owner, address indexed _recipient, uint256 _amount);\\n\\n  /// @notice Emitted when user withdraw staking token from the contract.\\n  /// @param _owner The address of the owner of the staking token.\\n  /// @param _recipient The address of the recipient of the staking token.\\n  /// @param _amount The amount of staking token withdrawn.\\n  /// @param _fee The amount of withdraw fee.\\n  event Withdraw(address indexed _owner, address indexed _recipient, uint256 _amount, uint256 _fee);\\n\\n  /// @notice Emitted when user claim pending rewards from the contract.\\n  /// @param _owner The address of the owner of the staking token.\\n  /// @param _recipient The address of the recipient of the pending rewards.\\n  /// @param _amounts The list of pending reward amounts.\\n  event Claim(address indexed _owner, address indexed _recipient, uint256[] _amounts);\\n\\n  /// @notice Emitted when someone harvest pending rewards.\\n  /// @param _caller The address of the caller.\\n  /// @param _rewards The list of harvested rewards.\\n  /// @param _bounties The list of harvest bounty given to caller.\\n  /// @param _platformFees The list of platform fee taken.\\n  /// @param _boostFee The amount SDT for veSDT boost delegation fee.\\n  event Harvest(\\n    address indexed _caller,\\n    uint256[] _rewards,\\n    uint256[] _bounties,\\n    uint256[] _platformFees,\\n    uint256 _boostFee\\n  );\\n\\n  /// @notice Return the amount of staking token staked in the contract.\\n  function totalSupply() external view returns (uint256);\\n\\n  /// @notice Return the amount of staking token staked in the contract for some user.\\n  /// @param _user The address of user to query.\\n  function balanceOf(address _user) external view returns (uint256);\\n\\n  /// @notice Deposit some staking token to the contract.\\n  /// @dev use `_amount=-1` to deposit all tokens.\\n  /// @param _amount The amount of staking token to deposit.\\n  /// @param _recipient The address of recipient who will receive the deposited staking token.\\n  function deposit(uint256 _amount, address _recipient) external;\\n\\n  /// @notice Withdraw some staking token from the contract.\\n  /// @dev use `_amount=-1` to withdraw all tokens.\\n  /// @param _amount The amount of staking token to withdraw.\\n  /// @param _recipient The address of recipient who will receive the withdrawn staking token.\\n  function withdraw(uint256 _amount, address _recipient) external;\\n\\n  /// @notice Claim all pending rewards from some user.\\n  /// @param _user The address of user to claim.\\n  /// @param _recipient The address of recipient who will receive the rewards.\\n  /// @return _amounts The list of amount of rewards claimed.\\n  function claim(address _user, address _recipient) external returns (uint256[] memory _amounts);\\n\\n  /// @notice Harvest pending reward from the contract.\\n  /// @param _recipient The address of recipient who will receive the harvest bounty.\\n  function harvest(address _recipient) external;\\n\\n  /// @notice Update the user information.\\n  /// @param _user The address of user to update.\\n  function checkpoint(address _user) external;\\n\\n  /// @notice Donate some token to this contract.\\n  /// @param _tokens The list of tokens to donate.\\n  /// @param _amounts The corresponding amounts to donate.\\n  function donate(address[] memory _tokens, uint256[] memory _amounts) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/stakedao/interfaces/IStakeDAOMultiMerkleStash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IStakeDAOMultiMerkleStash {\\n  // solhint-disable-next-line contract-name-camelcase\\n  struct claimParam {\\n    address token;\\n    uint256 index;\\n    uint256 amount;\\n    bytes32[] merkleProof;\\n  }\\n\\n  function isClaimed(address token, uint256 index) external view returns (bool);\\n\\n  function merkleRoot(address token) external returns (bytes32);\\n\\n  function claim(\\n    address token,\\n    uint256 index,\\n    address account,\\n    uint256 amount,\\n    bytes32[] calldata merkleProof\\n  ) external;\\n\\n  function claimMulti(address account, claimParam[] calldata claims) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_oldLogic\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newLogic\",\"type\":\"address\"}],\"name\":\"UpdateLogic\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"routeSDT\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minSDT\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"routeCRV\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"minCRV\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newLogic\",\"type\":\"address\"}],\"name\":\"updateLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SdCRVBribeBurner", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000858d62ce483b8ab538d1f9254c3fd3efe1c5346f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}