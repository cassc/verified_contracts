{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/presets/ChainlinkPushOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"../OnDemandOracle.sol\\\";\\r\\nimport \\\"../interfaces/AggregatorInterface.sol\\\";\\r\\n\\r\\n/// @notice Chainlink oracle extension for OnDemand oracles compatibility\\r\\n/// For 8 decimals USD data feeds\\r\\ncontract ChainlinkPushOracle is OnDemandOracle {\\r\\n  address public immutable feed;\\r\\n\\r\\n  constructor(address _feed){\\r\\n    require(_feed != address(0), \\\"Invalid Feed\\\");\\r\\n    feed = _feed;\\r\\n  }\\r\\n  \\r\\n  /// @notice Returns the latest price answer \\r\\n  function latestAnswer() public override virtual view returns (int256) {\\r\\n    return AggregatorInterface(feed).latestAnswer();\\r\\n  }\\r\\n  \\r\\n  /// @notice Returns the latest price answer \\r\\n  function lastUpdate() public override virtual view returns (uint256) {\\r\\n    (,,, uint256 updatedAt,) = AggregatorInterface(feed).latestRoundData();\\r\\n    return updatedAt;\\r\\n  }\\r\\n  \\r\\n  function description() public override view returns (string memory) {\\r\\n    return AggregatorInterface(feed).description();\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/OnDemandOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./IOnDemandOracle.sol\\\";\\r\\n\\r\\n\\r\\n/// @notice On-demand oracle structure, can be extended for various use cases\\r\\nabstract contract OnDemandOracle is IOnDemandOracle {\\r\\n  int256 internal _latestAnswer;\\r\\n  uint internal _lastUpdate;\\r\\n  // Default staleness infinite: cant become stale\\r\\n  uint public maxStaleness = type(uint).max;\\r\\n  uint public constant decimals = 8;\\r\\n  \\r\\n  /// @notice Update and get latest oracle answer based on signed offchain data\\r\\n  /// @dev Should be overriden with particular price update logic, \\r\\n  function updateAnswer(bytes calldata priceUpdateData) external payable virtual returns (int256){\\r\\n    _updateAnswer(priceUpdateData);\\r\\n    require(!isStale(), \\\"Oracle is Stale\\\");\\r\\n    return latestAnswer();\\r\\n  }\\r\\n  \\r\\n  /// @notice Price update logic\\r\\n  function _updateAnswer(bytes calldata priceUpdateData) internal virtual {}\\r\\n  \\r\\n  /// @notice Is price old and needs to be updated\\r\\n  function isStale() public view returns (bool) {\\r\\n    return (block.timestamp - lastUpdate() > maxStaleness);\\r\\n  }\\r\\n  \\r\\n  /// @notice Returns the latest price answer \\r\\n  function latestAnswer() public virtual view returns (int256) {\\r\\n    return _latestAnswer;\\r\\n  }\\r\\n  \\r\\n  /// @notice Get lats update time\\r\\n  function lastUpdate() public virtual view returns (uint256) {\\r\\n    return _lastUpdate;\\r\\n  }\\r\\n  \\r\\n  /// @notice Oracle description\\r\\n  function description() public virtual view returns (string memory){\\r\\n    return \\\"OnDemandOracle\\\";\\r\\n  }\\r\\n}\\r\\n\"\r\n    },\r\n    \"src/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface AggregatorInterface {\\r\\n  function latestAnswer() external view returns (int256);\\r\\n  function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n  function decimals() external view returns (uint8);\\r\\n  function description() external view returns (string memory);\\r\\n}\"\r\n    },\r\n    \"src/IOnDemandOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @notice IOnDemandOracle used for oracles that get their value from offchain signed data\\r\\ninterface IOnDemandOracle {\\r\\n  /// @notice Get latest oracle answer (may be stale)\\r\\n  function latestAnswer() external view returns (int256);\\r\\n  \\r\\n  /// @notice Update and get latest oracle answer based on signed offchain data\\r\\n  /// Reverts on bad priceUpdateData\\r\\n  function updateAnswer(bytes calldata priceUpdateData) external payable returns (int256);\\r\\n  \\r\\n  function decimals() external view returns (uint256);\\r\\n  \\r\\n  function lastUpdate() external view returns (uint256);\\r\\n  \\r\\n  function isStale() external view returns (bool);\\r\\n  \\r\\n  function description() external view returns (string memory);\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@redstone-finance/evm-connector/=node_modules/@redstone-finance/evm-connector/\",\r\n      \"@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\r\n      \"@pythnetwork/pyth-sdk-solidity/=node_modules/@pythnetwork/pyth-sdk-solidity/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feed\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxStaleness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"priceUpdateData\",\"type\":\"bytes\"}],\"name\":\"updateAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "ChainlinkPushOracle", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000ddb6f90ffb4d3257dd666b69178e5b3c5bf41136", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}