{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/TLStacks1155.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {Ownable} from \\\"openzeppelin/access/Ownable.sol\\\";\\nimport {Pausable} from \\\"openzeppelin/utils/Pausable.sol\\\";\\nimport {ReentrancyGuard} from \\\"openzeppelin/utils/ReentrancyGuard.sol\\\";\\nimport {MerkleProof} from \\\"openzeppelin/utils/cryptography/MerkleProof.sol\\\";\\nimport {IERC1155TL} from \\\"tl-creator-contracts/erc-1155/IERC1155TL.sol\\\";\\nimport {TransferHelper} from \\\"tl-sol-tools/payments/TransferHelper.sol\\\";\\nimport {SanctionsCompliance} from \\\"tl-sol-tools/payments/SanctionsCompliance.sol\\\";\\nimport {OwnableAccessControl} from \\\"tl-sol-tools/access/OwnableAccessControl.sol\\\";\\nimport {DropPhase, DropType, DropErrors} from \\\"./utils/CommonUtils.sol\\\";\\nimport {Drop, ITLStacks1155Events} from \\\"./utils/TLStacks1155Utils.sol\\\";\\n\\n/*//////////////////////////////////////////////////////////////////////////\\n                            TL Stacks 1155\\n//////////////////////////////////////////////////////////////////////////*/\\n\\n/// @title TLStacks1155\\n/// @notice Transient Labs Stacks mint contract for ERC1155TL contracts\\n/// @author transientlabs.xyz\\n/// @custom:version-last-updated 2.3.1\\ncontract TLStacks1155 is\\n    Ownable,\\n    Pausable,\\n    ReentrancyGuard,\\n    TransferHelper,\\n    SanctionsCompliance,\\n    ITLStacks1155Events,\\n    DropErrors\\n{\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                  Constants\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    string public constant VERSION = \\\"2.3.1\\\";\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n    bytes32 public constant APPROVED_MINT_CONTRACT = keccak256(\\\"APPROVED_MINT_CONTRACT\\\");\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    address public protocolFeeReceiver; // the payout receiver for the protocol fee\\n    uint256 public protocolFee; // the protocol fee, in eth, to charge the buyer\\n    address public weth; // weth address\\n    mapping(address => mapping(uint256 => Drop)) internal _drops; // nft address -> token id -> Drop\\n    mapping(address => mapping(uint256 => mapping(uint256 => mapping(address => uint256)))) internal _numberMinted; // nft address -> token id -> round -> user -> number minted\\n    mapping(address => mapping(uint256 => uint256)) internal _rounds; // nft address -> token id -> round\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Constructor\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        address initOwner,\\n        address initSanctionsOracle,\\n        address initWethAddress,\\n        address initProtocolFeeReceiver,\\n        uint256 initProtocolFee\\n    ) Ownable(initOwner) Pausable() ReentrancyGuard() SanctionsCompliance(initSanctionsOracle) {\\n        _setWethAddress(initWethAddress);\\n        _setProtocolFeeSettings(initProtocolFeeReceiver, initProtocolFee);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Owner Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to set a new weth address\\n    /// @dev Requires owner\\n    /// @param newWethAddress The new weth address\\n    function setWethAddress(address newWethAddress) external onlyOwner {\\n        _setWethAddress(newWethAddress);\\n    }\\n\\n    /// @notice Function to set the protocol fee settings\\n    /// @dev Requires owner\\n    /// @param newProtocolFeeReceiver The new protocol fee receiver\\n    /// @param newProtocolFee The new protocol fee in ETH\\n    function setProtocolFeeSettings(address newProtocolFeeReceiver, uint256 newProtocolFee) external onlyOwner {\\n        _setProtocolFeeSettings(newProtocolFeeReceiver, newProtocolFee);\\n    }\\n\\n    /// @notice Function to pause the contract\\n    /// @dev Requires owner\\n    /// @param status The boolean to set the internal pause variable\\n    function pause(bool status) external onlyOwner {\\n        if (status) {\\n            _pause();\\n        } else {\\n            _unpause();\\n        }\\n    }\\n\\n    /// @notice Function to set the sanctions oracle\\n    /// @dev Requires owner\\n    /// @param newOracle The new oracle address\\n    function setSanctionsOracle(address newOracle) external onlyOwner {\\n        _updateSanctionsOracle(newOracle);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            Drop Configuration Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to configure a drop\\n    /// @dev Caller must be the nft contract owner or an admin on the contract\\n    /// @dev Reverts if\\n    ///     - the payout receiver is the zero address\\n    ///     - a drop is already configured and live\\n    ///     - the `intiialSupply` does not equal the `supply`\\n    ///     - the `decayRate` is non-zero and there is a presale configured\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The token id of the ERC-1155 token\\n    /// @param drop The drop to configure\\n    function configureDrop(address nftAddress, uint256 tokenId, Drop calldata drop)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        // sanctions\\n        _isSanctioned(msg.sender, true);\\n        _isSanctioned(drop.payoutReceiver, true);\\n\\n        // check pre-conditions\\n        if (!_isDropAdmin(nftAddress)) revert NotDropAdmin();\\n        if (!_checkPayoutReceiver(drop.payoutReceiver)) revert InvalidPayoutReceiver();\\n        if (!_isApprovedMintContract(nftAddress)) revert NotApprovedMintContract();\\n        if (drop.initialSupply != drop.supply) revert InvalidDropSupply();\\n        if (drop.decayRate != 0 && drop.dropType != DropType.VELOCITY) revert InvalidDropType();\\n        if (drop.dropType == DropType.VELOCITY && drop.presaleDuration != 0) revert NotAllowedForVelocityDrops();\\n\\n        // check if drop is already configured and live\\n        Drop memory mDrop = _drops[nftAddress][tokenId];\\n        DropPhase mPhase = _getDropPhase(mDrop);\\n        if (mDrop.dropType != DropType.NOT_CONFIGURED && mPhase != DropPhase.ENDED) {\\n            revert DropAlreadyConfigured();\\n        }\\n\\n        // store drop\\n        _drops[nftAddress][tokenId] = drop;\\n\\n        // increment drop round if drop was previously set\\n        if (mDrop.dropType != DropType.NOT_CONFIGURED) {\\n            _rounds[nftAddress][tokenId] += 1;\\n        }\\n\\n        emit DropConfigured(nftAddress, tokenId, drop);\\n    }\\n\\n    /// @notice Function to update the payout receiver of a drop\\n    /// @dev Caller must be the nft contract owner or an admin on the contract\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The token id of the ERC-1155 token\\n    /// @param payoutReceiver The recipient of the funds from the mint\\n    function updateDropPayoutReceiver(address nftAddress, uint256 tokenId, address payoutReceiver)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        // sanctions\\n        _isSanctioned(payoutReceiver, true);\\n\\n        // check pre-conditions\\n        if (!_isDropAdmin(nftAddress)) revert NotDropAdmin();\\n        Drop memory drop = _drops[nftAddress][tokenId];\\n        DropPhase mPhase = _getDropPhase(drop);\\n        if (mPhase == DropPhase.NOT_CONFIGURED || mPhase == DropPhase.ENDED) revert DropUpdateNotAllowed();\\n        if (!_checkPayoutReceiver(payoutReceiver)) revert InvalidPayoutReceiver();\\n\\n        // set new payout receiver\\n        drop.payoutReceiver = payoutReceiver;\\n        _drops[nftAddress][tokenId].payoutReceiver = drop.payoutReceiver;\\n\\n        emit DropUpdated(nftAddress, tokenId, drop);\\n    }\\n\\n    /// @notice Function to update the drop public allowance\\n    /// @dev Caller must be the nft contract owner or an admin on the contract\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The token id of the ERC-1155 token\\n    /// @param allowance The number of tokens allowed to be minted per wallet during the public phase of the drop\\n    function updateDropAllowance(address nftAddress, uint256 tokenId, uint256 allowance)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        // check pre-conditions\\n        if (!_isDropAdmin(nftAddress)) revert NotDropAdmin();\\n        Drop memory drop = _drops[nftAddress][tokenId];\\n        DropPhase mPhase = _getDropPhase(drop);\\n        if (mPhase == DropPhase.NOT_CONFIGURED || mPhase == DropPhase.ENDED) revert DropUpdateNotAllowed();\\n\\n        // set new allowance\\n        drop.allowance = allowance;\\n        _drops[nftAddress][tokenId].allowance = drop.allowance;\\n\\n        emit DropUpdated(nftAddress, tokenId, drop);\\n    }\\n\\n    /// @notice Function to update the drop prices and currency\\n    /// @dev Caller must be the nft contract owner or an admin on the contract\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The token id of the ERC-1155 token\\n    /// @param currencyAddress The currency address (zero address represents ETH)\\n    /// @param presaleCost The cost of each token during the presale phase\\n    /// @param publicCost The cost of each token during the presale phase\\n    function updateDropPrices(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address currencyAddress,\\n        uint256 presaleCost,\\n        uint256 publicCost\\n    ) external whenNotPaused nonReentrant {\\n        // check pre-conditions\\n        if (!_isDropAdmin(nftAddress)) revert NotDropAdmin();\\n        Drop memory drop = _drops[nftAddress][tokenId];\\n        DropPhase mPhase = _getDropPhase(drop);\\n        if (mPhase == DropPhase.NOT_CONFIGURED || mPhase == DropPhase.ENDED) revert DropUpdateNotAllowed();\\n\\n        // set currency address and prices\\n        drop.currencyAddress = currencyAddress;\\n        drop.presaleCost = presaleCost;\\n        drop.publicCost = publicCost;\\n        _drops[nftAddress][tokenId].currencyAddress = drop.currencyAddress;\\n        _drops[nftAddress][tokenId].presaleCost = drop.presaleCost;\\n        _drops[nftAddress][tokenId].publicCost = drop.publicCost;\\n\\n        emit DropUpdated(nftAddress, tokenId, drop);\\n    }\\n\\n    /// @notice Function to adjust drop durations\\n    /// @dev Caller must be the nft contract owner or an admin on the contract\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The token id of the ERC-1155 token\\n    /// @param startTime The timestamp at which the drop starts\\n    /// @param presaleDuration The duration of the presale phase of the drop, in seconds\\n    /// @param publicDuration The duration of the public phase\\n    function updateDropDuration(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 startTime,\\n        uint256 presaleDuration,\\n        uint256 publicDuration\\n    ) external whenNotPaused nonReentrant {\\n        // check pre-conditions\\n        if (!_isDropAdmin(nftAddress)) revert NotDropAdmin();\\n        Drop memory drop = _drops[nftAddress][tokenId];\\n        DropPhase mPhase = _getDropPhase(drop);\\n        if (mPhase == DropPhase.NOT_CONFIGURED || mPhase == DropPhase.ENDED) revert DropUpdateNotAllowed();\\n        if (drop.dropType == DropType.VELOCITY && presaleDuration != 0) revert NotAllowedForVelocityDrops();\\n\\n        // update durations\\n        drop.startTime = startTime;\\n        drop.presaleDuration = presaleDuration;\\n        drop.publicDuration = publicDuration;\\n        _drops[nftAddress][tokenId].startTime = drop.startTime;\\n        _drops[nftAddress][tokenId].presaleDuration = drop.presaleDuration;\\n        _drops[nftAddress][tokenId].publicDuration = drop.publicDuration;\\n\\n        emit DropUpdated(nftAddress, tokenId, drop);\\n    }\\n\\n    /// @notice Function to adjust the drop merkle root\\n    /// @dev Caller must be the nft contract owner or an admin on the contract\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The token id of the ERC-1155 token\\n    /// @param presaleMerkleRoot The merkle root for the presale phase (each leaf is abi encoded with the recipient and number they can mint during presale)\\n    function updateDropPresaleMerkleRoot(address nftAddress, uint256 tokenId, bytes32 presaleMerkleRoot)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        // check pre-conditions\\n        if (!_isDropAdmin(nftAddress)) revert NotDropAdmin();\\n        Drop memory drop = _drops[nftAddress][tokenId];\\n        DropPhase mPhase = _getDropPhase(drop);\\n        if (mPhase == DropPhase.NOT_CONFIGURED || mPhase == DropPhase.ENDED) revert DropUpdateNotAllowed();\\n        if (drop.dropType == DropType.VELOCITY) revert NotAllowedForVelocityDrops();\\n\\n        // update merkle root\\n        drop.presaleMerkleRoot = presaleMerkleRoot;\\n        _drops[nftAddress][tokenId].presaleMerkleRoot = drop.presaleMerkleRoot;\\n\\n        emit DropUpdated(nftAddress, tokenId, drop);\\n    }\\n\\n    /// @notice Function to adjust the drop decay rate\\n    /// @dev Caller must be the nft contract owner or an admin on the contract\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The token id of the ERC-1155 token\\n    /// @param decayRate The merkle root for the presale phase (each leaf is abi encoded with the recipient and number they can mint during presale)\\n    function updateDropDecayRate(address nftAddress, uint256 tokenId, int256 decayRate)\\n        external\\n        whenNotPaused\\n        nonReentrant\\n    {\\n        // check pre-conditions\\n        if (!_isDropAdmin(nftAddress)) revert NotDropAdmin();\\n        Drop memory drop = _drops[nftAddress][tokenId];\\n        DropPhase mPhase = _getDropPhase(drop);\\n        if (mPhase == DropPhase.NOT_CONFIGURED || mPhase == DropPhase.ENDED) revert DropUpdateNotAllowed();\\n        if (drop.dropType != DropType.VELOCITY) revert NotAllowedForVelocityDrops();\\n\\n        // update decay rate\\n        drop.decayRate = decayRate;\\n        _drops[nftAddress][tokenId].decayRate = drop.decayRate;\\n\\n        emit DropUpdated(nftAddress, tokenId, drop);\\n    }\\n\\n    function closeDrop(address nftAddress, uint256 tokenId) external nonReentrant {\\n        if (!_isDropAdmin(nftAddress)) revert NotDropAdmin();\\n\\n        // delete the drop\\n        delete _drops[nftAddress][tokenId];\\n\\n        // clear the number minted round\\n        _rounds[nftAddress][tokenId]++;\\n\\n        emit DropClosed(nftAddress, tokenId);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Purchase Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to purchase a single token via a drop\\n    /// @dev Reverts on any of the following conditions\\n    ///     - Drop isn't active or configured\\n    ///     - numberToMint is 0\\n    ///     - Invalid merkle proof during the presale phase\\n    ///     - Insufficent protocol fee\\n    ///     - Insufficient funds\\n    ///     - Already minted the allowance for the recipient\\n    ///     - Receiver is a contract that doesn't implement proper ERC-1155 receiving functions\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @param recipient The receiver of the nft (msg.sender is the payer but this allows delegation)\\n    /// @param numberToMint The number of tokens to mint\\n    /// @param presaleNumberCanMint The number of tokens the recipient can mint during presale\\n    /// @param proof The merkle proof for the presale page\\n    /// @return refundAmount The amount of eth refunded bqck to the caller\\n    function purchase(\\n        address nftAddress,\\n        uint256 tokenId,\\n        address recipient,\\n        uint256 numberToMint,\\n        uint256 presaleNumberCanMint,\\n        bytes32[] calldata proof\\n    ) external payable whenNotPaused nonReentrant returns (uint256 refundAmount) {\\n        _isSanctioned(msg.sender, true);\\n        _isSanctioned(recipient, true);\\n\\n        // cache drop\\n        Drop memory drop = _drops[nftAddress][tokenId];\\n        DropPhase dropPhase = _getDropPhase(drop);\\n        uint256 round = _rounds[nftAddress][tokenId];\\n        uint256 numberMinted = _numberMinted[nftAddress][tokenId][round][recipient];\\n        uint256 numberCanMint = numberToMint; // cache and then update depending on phase\\n        uint256 cost = drop.presaleCost;\\n\\n        // pre-conditions - revert for safety and expected behavior from users - UX for batch purchases needs to be smart in order to avoid reverting conditions\\n        if (numberToMint == 0) revert MintZeroTokens();\\n        if (dropPhase == DropPhase.PRESALE) {\\n            bytes32 hashedRecipient = keccak256(abi.encode(recipient));\\n            bytes32 leaf = keccak256(bytes.concat(keccak256(abi.encode(hashedRecipient, presaleNumberCanMint)))); // double hash to prevent second preimage attack: https://github.com/OpenZeppelin/openzeppelin-contracts/issues/3091\\n            if (!MerkleProof.verify(proof, drop.presaleMerkleRoot, leaf)) revert NotOnAllowlist();\\n            numberCanMint = _getNumberCanMint(presaleNumberCanMint, numberMinted, drop.supply);\\n        } else if (dropPhase == DropPhase.PUBLIC_SALE) {\\n            numberCanMint = _getNumberCanMint(drop.allowance, numberMinted, drop.supply);\\n            cost = drop.publicCost;\\n        } else {\\n            revert YouShallNotMint();\\n        }\\n        if (numberCanMint == 0) revert AlreadyReachedMintAllowance();\\n\\n        // limit numberToMint to numberCanMint\\n        if (numberToMint > numberCanMint) {\\n            numberToMint = numberCanMint;\\n        }\\n\\n        // adjust drop state\\n        _updateDropState(nftAddress, tokenId, round, recipient, numberToMint, drop);\\n\\n        // settle funds\\n        refundAmount = _settleUp(numberToMint, cost, drop);\\n\\n        // mint\\n        _mintToken(nftAddress, tokenId, recipient, numberToMint);\\n\\n        emit Purchase(\\n            nftAddress,\\n            tokenId,\\n            recipient,\\n            drop.currencyAddress,\\n            numberToMint,\\n            cost,\\n            drop.decayRate,\\n            dropPhase == DropPhase.PRESALE\\n        );\\n\\n        return refundAmount;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            External View Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to get a drop\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @return Drop The drop for the nft contract and token id\\n    function getDrop(address nftAddress, uint256 tokenId) external view returns (Drop memory) {\\n        return _drops[nftAddress][tokenId];\\n    }\\n\\n    /// @notice Function to get a number of drops for a contract\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenIds The nft token ids\\n    /// @return drops An array of Drops\\n    function getDrops(address nftAddress, uint256[] calldata tokenIds) external view returns (Drop[] memory drops) {\\n        drops = new Drop[](tokenIds.length);\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            drops[i] = _drops[nftAddress][tokenIds[i]];\\n        }\\n    }\\n\\n    /// @notice Function to get number minted on a drop for an address\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @param recipient The recipient of the nft\\n    /// @return uint256 The number of tokens minted\\n    function getNumberMinted(address nftAddress, uint256 tokenId, address recipient) external view returns (uint256) {\\n        uint256 round = _rounds[nftAddress][tokenId];\\n        return _numberMinted[nftAddress][tokenId][round][recipient];\\n    }\\n\\n    /// @notice Function to get the drop phase\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @return DropPhase The drop phase\\n    function getDropPhase(address nftAddress, uint256 tokenId) external view returns (DropPhase) {\\n        Drop memory drop = _drops[nftAddress][tokenId];\\n        return _getDropPhase(drop);\\n    }\\n\\n    /// @notice Function to get the drop round\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @return uint256 The round for the drop based on the nft contract and token id\\n    function getDropRound(address nftAddress, uint256 tokenId) external view returns (uint256) {\\n        return _rounds[nftAddress][tokenId];\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            Internal Helper Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Internal function to set the weth address\\n    /// @param newWethAddress The new weth address\\n    function _setWethAddress(address newWethAddress) internal {\\n        address prevWethAddress = weth;\\n        weth = newWethAddress;\\n\\n        emit WethUpdated(prevWethAddress, newWethAddress);\\n    }\\n\\n    /// @notice Internal function to set the protocol fee settings\\n    /// @param newProtocolFeeReceiver The new protocol fee receiver\\n    /// @param newProtocolFee The new protocol fee in ETH\\n    function _setProtocolFeeSettings(address newProtocolFeeReceiver, uint256 newProtocolFee) internal {\\n        protocolFeeReceiver = newProtocolFeeReceiver;\\n        protocolFee = newProtocolFee;\\n\\n        emit ProtocolFeeUpdated(newProtocolFeeReceiver, newProtocolFee);\\n    }\\n\\n    /// @notice Internal function to check if msg.sender is the owner or an admin on the contract\\n    /// @param nftAddress The nft contract address\\n    /// @return bool Boolean indicating if msg.sender is the owner or an admin on the nft contract\\n    function _isDropAdmin(address nftAddress) internal view returns (bool) {\\n        return (\\n            msg.sender == OwnableAccessControl(nftAddress).owner()\\n                || OwnableAccessControl(nftAddress).hasRole(ADMIN_ROLE, msg.sender)\\n        );\\n    }\\n\\n    /// @notice Intenral function to check if this contract is an approved mint contract\\n    /// @param nftAddress The nft contract address\\n    /// @return bool Boolean indicating if this contract is approved or not\\n    function _isApprovedMintContract(address nftAddress) internal view returns (bool) {\\n        return OwnableAccessControl(nftAddress).hasRole(APPROVED_MINT_CONTRACT, address(this));\\n    }\\n\\n    /// @notice Internal function to check if a payout address is a valid address\\n    /// @param payoutReceiver The payout address to check\\n    /// @return bool Indication of if the payout address is not the zero address\\n    function _checkPayoutReceiver(address payoutReceiver) internal pure returns (bool) {\\n        return payoutReceiver != address(0);\\n    }\\n\\n    /// @notice Internal function to get the drop phase\\n    /// @param drop The drop in question\\n    /// @return DropPhase The drop phase enum value\\n    function _getDropPhase(Drop memory drop) internal view returns (DropPhase) {\\n        if (drop.payoutReceiver == address(0)) return DropPhase.NOT_CONFIGURED;\\n        if (drop.supply == 0) return DropPhase.ENDED;\\n        if (block.timestamp < drop.startTime) return DropPhase.NOT_STARTED;\\n        if (block.timestamp >= drop.startTime && block.timestamp < drop.startTime + drop.presaleDuration) {\\n            return DropPhase.PRESALE;\\n        }\\n        if (\\n            block.timestamp >= drop.startTime + drop.presaleDuration\\n                && block.timestamp < drop.startTime + drop.presaleDuration + drop.publicDuration\\n        ) return DropPhase.PUBLIC_SALE;\\n        return DropPhase.ENDED;\\n    }\\n\\n    /// @notice Internal function to determine how many tokens can be minted by an address\\n    /// @param allowance The amount allowed to mint\\n    /// @param numberMinted The amount already minted\\n    /// @param supply The drop supply\\n    /// @return numberCanMint The number of tokens allowed to mint\\n    function _getNumberCanMint(uint256 allowance, uint256 numberMinted, uint256 supply)\\n        internal\\n        pure\\n        returns (uint256 numberCanMint)\\n    {\\n        if (numberMinted < allowance) {\\n            numberCanMint = allowance - numberMinted;\\n            if (numberCanMint > supply) {\\n                numberCanMint = supply;\\n            }\\n        } else {\\n            numberCanMint = 0;\\n        }\\n    }\\n\\n    /// @notice Function to update the state of the drop\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @param round The drop round for number minted\\n    /// @param recipient The receiver of the nft (msg.sender is the payer but this allows delegation)\\n    /// @param numberToMint The number of tokens to mint\\n    /// @param drop The Drop cached in memory\\n    function _updateDropState(\\n        address nftAddress,\\n        uint256 tokenId,\\n        uint256 round,\\n        address recipient,\\n        uint256 numberToMint,\\n        Drop memory drop\\n    ) internal {\\n        // velocity mint\\n        if (drop.dropType == DropType.VELOCITY) {\\n            uint256 durationAdjust = drop.decayRate < 0\\n                ? uint256(-1 * drop.decayRate) * numberToMint\\n                : uint256(drop.decayRate) * numberToMint;\\n            if (drop.decayRate < 0) {\\n                if (durationAdjust > drop.publicDuration) {\\n                    _drops[nftAddress][tokenId].publicDuration = 0;\\n                } else {\\n                    _drops[nftAddress][tokenId].publicDuration -= durationAdjust;\\n                }\\n            } else {\\n                _drops[nftAddress][tokenId].publicDuration += durationAdjust;\\n            }\\n        }\\n\\n        // regular state (applicable to all types of drops)\\n        _drops[nftAddress][tokenId].supply -= numberToMint;\\n        _numberMinted[nftAddress][tokenId][round][recipient] += numberToMint;\\n    }\\n\\n    /// @notice Internal function to distribute funds for a _purchase\\n    /// @param numberToMint The number of tokens that can be minted\\n    /// @param cost The cost per token\\n    /// @param drop The drop\\n    /// @return refundAmount The amount of eth refunded to msg.sender\\n    function _settleUp(uint256 numberToMint, uint256 cost, Drop memory drop) internal returns (uint256 refundAmount) {\\n        uint256 totalProtocolFee = numberToMint * protocolFee;\\n        uint256 totalSale = numberToMint * cost;\\n        if (drop.currencyAddress == address(0)) {\\n            uint256 totalCost = totalSale + totalProtocolFee;\\n            if (msg.value < totalCost) revert InsufficientFunds();\\n            _safeTransferETH(drop.payoutReceiver, totalSale, weth);\\n            refundAmount = msg.value - totalCost;\\n        } else {\\n            if (msg.value < totalProtocolFee) revert InsufficientFunds();\\n            _safeTransferFromERC20(msg.sender, drop.payoutReceiver, drop.currencyAddress, totalSale);\\n            refundAmount = msg.value - totalProtocolFee;\\n        }\\n        _safeTransferETH(protocolFeeReceiver, totalProtocolFee, weth);\\n        if (refundAmount > 0) {\\n            _safeTransferETH(msg.sender, refundAmount, weth);\\n        }\\n        return refundAmount;\\n    }\\n\\n    /// @notice Internal function to mint the token\\n    /// @param nftAddress The nft contract address\\n    /// @param tokenId The nft token id\\n    /// @param recipient The receiver of the nft (msg.sender is the payer but this allows delegation)\\n    /// @param numberToMint The number of tokens to mint\\n    function _mintToken(address nftAddress, uint256 tokenId, address recipient, uint256 numberToMint) internal {\\n        address[] memory recipients = new address[](1);\\n        recipients[0] = recipient;\\n        uint256[] memory amounts = new uint256[](1);\\n        amounts[0] = numberToMint;\\n        IERC1155TL(nftAddress).externalMint(tokenId, recipients, amounts);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/utils/cryptography/MerkleProof.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the Merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates Merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     *@dev The multiproof provided is not valid.\\n     */\\n    error MerkleProofInvalidMultiproof();\\n\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     */\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a Merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all Merkle trees admit multiproofs. See {processMultiProof} for details.\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuilds the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the Merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 proofLen = proof.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        if (leavesLen + proofLen != totalHashes + 1) {\\n            revert MerkleProofInvalidMultiproof();\\n        }\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value from the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i]\\n                ? (leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++])\\n                : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            if (proofPos != proofLen) {\\n                revert MerkleProofInvalidMultiproof();\\n            }\\n            unchecked {\\n                return hashes[totalHashes - 1];\\n            }\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Sorts the pair (a, b) and hashes the result.\\n     */\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    /**\\n     * @dev Implementation of keccak256(abi.encode(a, b)) that doesn't allocate or expand memory.\\n     */\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/src/erc-1155/IERC1155TL.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n/// @title IERC1155TL.sol\\n/// @notice Interface for ERC1155TL\\n/// @dev Interface id = 0x452d5a4a\\n/// @author transientlabs.xyz\\n/// @custom:version 3.0.0\\ninterface IERC1155TL {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Types\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Struct defining a token\\n    struct Token {\\n        bool created;\\n        string uri;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to get token creation details\\n    /// @param tokenId The token to lookup\\n    function getTokenDetails(uint256 tokenId) external view returns (Token memory);\\n\\n    /// @notice Function to create a token that can be minted to creator or airdropped\\n    /// @dev Requires owner or admin\\n    /// @param newUri The uri for the token to create\\n    /// @param addresses The addresses to mint the new token to\\n    /// @param amounts The amount of the new token to mint to each address\\n    function createToken(string calldata newUri, address[] calldata addresses, uint256[] calldata amounts) external;\\n\\n    /// @notice Function to create a token that can be minted to creator or airdropped\\n    /// @dev Overloaded function where you can set the token royalty config in this tx\\n    /// @dev Requires owner or admin\\n    /// @param newUri The uri for the token to create\\n    /// @param addresses The addresses to mint the new token to\\n    /// @param amounts The amount of the new token to mint to each address\\n    /// @param royaltyAddress Royalty payout address for the created token\\n    /// @param royaltyPercent Royalty percentage for this token\\n    function createToken(\\n        string calldata newUri,\\n        address[] calldata addresses,\\n        uint256[] calldata amounts,\\n        address royaltyAddress,\\n        uint256 royaltyPercent\\n    ) external;\\n\\n    /// @notice function to batch create tokens that can be minted to creator or airdropped\\n    /// @dev requires owner or admin\\n    /// @param newUris the uris for the tokens to create\\n    /// @param addresses 2d dynamic array holding the addresses to mint the new tokens to\\n    /// @param amounts 2d dynamic array holding the amounts of the new tokens to mint to each address\\n    function batchCreateToken(string[] calldata newUris, address[][] calldata addresses, uint256[][] calldata amounts)\\n        external;\\n\\n    /// @notice Function to batch create tokens that can be minted to creator or airdropped\\n    /// @dev Overloaded function where you can set the token royalty config in this tx\\n    /// @dev Requires owner or admin\\n    /// @param newUris Rhe uris for the tokens to create\\n    /// @param addresses 2d dynamic array holding the addresses to mint the new tokens to\\n    /// @param amounts 2d dynamic array holding the amounts of the new tokens to mint to each address\\n    /// @param royaltyAddresses Royalty payout addresses for the tokens\\n    /// @param royaltyPercents Royalty payout percents for the tokens\\n    function batchCreateToken(\\n        string[] calldata newUris,\\n        address[][] calldata addresses,\\n        uint256[][] calldata amounts,\\n        address[] calldata royaltyAddresses,\\n        uint256[] calldata royaltyPercents\\n    ) external;\\n\\n    /// @notice Function to mint existing token to recipients\\n    /// @dev Requires owner or admin\\n    /// @param tokenId The token to mint\\n    /// @param addresses The addresses to mint to\\n    /// @param amounts Amounts of the token to mint to each address\\n    function mintToken(uint256 tokenId, address[] calldata addresses, uint256[] calldata amounts) external;\\n\\n    /// @notice External mint function\\n    /// @dev Requires caller to be an approved mint contract\\n    /// @param tokenId The token to mint\\n    /// @param addresses The addresses to mint to\\n    /// @param amounts Amounts of the token to mint to each address\\n    function externalMint(uint256 tokenId, address[] calldata addresses, uint256[] calldata amounts) external;\\n\\n    /// @notice Function to burn tokens from an account\\n    /// @dev Msg.sender must be token owner or operator\\n    /// @dev If this function is called from another contract as part of a burn/redeem, the contract must ensure that no amount is '0' or if it is, that it isn't a vulnerability.\\n    /// @param from Address to burn from\\n    /// @param tokenIds Array of tokens to burn\\n    /// @param amounts Amount of each token to burn\\n    function burn(address from, uint256[] calldata tokenIds, uint256[] calldata amounts) external;\\n\\n    /// @notice Function to set a token uri\\n    /// @dev Requires owner or admin\\n    /// @param tokenId The token to mint\\n    /// @param newUri The new token uri\\n    function setTokenUri(uint256 tokenId, string calldata newUri) external;\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/src/payments/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {SafeERC20} from \\\"openzeppelin/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IWETH, IERC20} from \\\"./IWETH.sol\\\";\\n\\n/// @title Transfer Helper\\n/// @notice Abstract contract that has helper function for sending ETH and ERC20's safely\\n/// @author transientlabs.xyz\\n/// @custom:version 3.0.0\\nabstract contract TransferHelper {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Types\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IWETH;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Errors\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev ETH transfer failed\\n    error ETHTransferFailed();\\n\\n    /// @dev Transferred too few ERC-20 tokens\\n    error InsufficentERC20Transfer();\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                   ETH Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to force transfer ETH, defaulting to forwarding 100k gas\\n    /// @dev On failure to send the ETH, the ETH is converted to WETH and sent\\n    /// @dev Care should be taken to always pass the proper WETH address that adheres to IWETH\\n    /// @param recipient The recipient of the ETH\\n    /// @param amount The amount of ETH to send\\n    /// @param weth The WETH token address\\n    function _safeTransferETH(address recipient, uint256 amount, address weth) internal {\\n        _safeTransferETH(recipient, amount, weth, 1e5);\\n    }\\n\\n    /// @notice Function to force transfer ETH, with a gas limit\\n    /// @dev On failure to send the ETH, the ETH is converted to WETH and sent\\n    /// @dev Care should be taken to always pass the proper WETH address that adheres to IWETH\\n    /// @dev If the `amount` is zero, the function returns in order to save gas\\n    /// @param recipient The recipient of the ETH\\n    /// @param amount The amount of ETH to send\\n    /// @param weth The WETH token address\\n    /// @param gasLimit The gas to forward\\n    function _safeTransferETH(address recipient, uint256 amount, address weth, uint256 gasLimit) internal {\\n        if (amount == 0) return;\\n        (bool success,) = recipient.call{value: amount, gas: gasLimit}(\\\"\\\");\\n        if (!success) {\\n            IWETH token = IWETH(weth);\\n            token.deposit{value: amount}();\\n            token.safeTransfer(recipient, amount);\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                  ERC-20 Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to safely transfer ERC-20 tokens from the contract, without checking for token tax\\n    /// @dev Does not check if the sender has enough balance as that is handled by the token contract\\n    /// @dev Does not check for token tax as that could lock up funds in the contract\\n    /// @dev Reverts on failure to transfer\\n    /// @dev If the `amount` is zero, the function returns in order to save gas\\n    /// @param recipient The recipient of the ERC-20 token\\n    /// @param currency The address of the ERC-20 token\\n    /// @param amount The amount of ERC-20 to send\\n    function _safeTransferERC20(address recipient, address currency, uint256 amount) internal {\\n        if (amount == 0) return;\\n        IERC20(currency).safeTransfer(recipient, amount);\\n    }\\n\\n    /// @notice Function to safely transfer ERC-20 tokens from another address to a recipient\\n    /// @dev Does not check if the sender has enough balance or allowance for this contract as that is handled by the token contract\\n    /// @dev Reverts on failure to transfer\\n    /// @dev Reverts if there is a token tax taken out\\n    /// @dev Returns and doesn't do anything if the sender and recipient are the same address\\n    /// @dev If the `amount` is zero, the function returns in order to save gas\\n    /// @param sender The sender of the tokens\\n    /// @param recipient The recipient of the ERC-20 token\\n    /// @param currency The address of the ERC-20 token\\n    /// @param amount The amount of ERC-20 to send\\n    function _safeTransferFromERC20(address sender, address recipient, address currency, uint256 amount) internal {\\n        if (amount == 0) return;\\n        if (sender == recipient) return;\\n        IERC20 token = IERC20(currency);\\n        uint256 intialBalance = token.balanceOf(recipient);\\n        token.safeTransferFrom(sender, recipient, amount);\\n        uint256 finalBalance = token.balanceOf(recipient);\\n        if (finalBalance - intialBalance < amount) revert InsufficentERC20Transfer();\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/src/payments/SanctionsCompliance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IChainalysisSanctionsOracle} from \\\"./IChainalysisSanctionsOracle.sol\\\";\\n\\n/// @title Sanctions Compliance\\n/// @notice Abstract contract to comply with U.S. sanctioned addresses\\n/// @dev Uses the Chainalysis Sanctions Oracle for checking sanctions\\n/// @author transientlabs.xyz\\n/// @custom:version 3.0.0\\ncontract SanctionsCompliance {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    IChainalysisSanctionsOracle public oracle;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Errors\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Sanctioned address by OFAC\\n    error SanctionedAddress();\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    event SanctionsOracleUpdated(address indexed prevOracle, address indexed newOracle);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Constructor\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    constructor(address initOracle) {\\n        _updateSanctionsOracle(initOracle);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Internal Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Internal function to change the sanctions oracle\\n    /// @param newOracle The new sanctions oracle address\\n    function _updateSanctionsOracle(address newOracle) internal {\\n        address prevOracle = address(oracle);\\n        oracle = IChainalysisSanctionsOracle(newOracle);\\n\\n        emit SanctionsOracleUpdated(prevOracle, newOracle);\\n    }\\n\\n    /// @notice Internal function to check the sanctions oracle for an address\\n    /// @dev Disable sanction checking by setting the oracle to the zero address\\n    /// @param sender The address that is trying to send money\\n    /// @param shouldRevertIfSanctioned A flag indicating if the call should revert if the sender is sanctioned. Set to false if wanting to get a result.\\n    /// @return isSanctioned Boolean indicating if the sender is sanctioned\\n    function _isSanctioned(address sender, bool shouldRevertIfSanctioned) internal view returns (bool isSanctioned) {\\n        if (address(oracle) == address(0)) {\\n            return false;\\n        }\\n        isSanctioned = oracle.isSanctioned(sender);\\n        if (shouldRevertIfSanctioned && isSanctioned) revert SanctionedAddress();\\n        return isSanctioned;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/src/access/OwnableAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"openzeppelin/access/Ownable.sol\\\";\\nimport {EnumerableSet} from \\\"openzeppelin/utils/structs/EnumerableSet.sol\\\";\\n\\n/// @title OwnableAccessControl.sol\\n/// @notice Single owner, flexible access control mechanics\\n/// @dev Can easily be extended by inheriting and applying additional roles\\n/// @dev By default, only the owner can grant roles but by inheriting, but you\\n///      may allow other roles to grant roles by using the internal helper.\\n/// @author transientlabs.xyz\\n/// @custom:version 3.0.0\\nabstract contract OwnableAccessControl is Ownable {\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                State Variables\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    uint256 private _c; // counter to be able to revoke all priviledges\\n    mapping(uint256 => mapping(bytes32 => mapping(address => bool))) private _roleStatus;\\n    mapping(uint256 => mapping(bytes32 => EnumerableSet.AddressSet)) private _roleMembers;\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Events\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @param from Address that authorized the role change\\n    /// @param user The address who's role has been changed\\n    /// @param approved Boolean indicating the user's status in role\\n    /// @param role The bytes32 role created in the inheriting contract\\n    event RoleChange(address indexed from, address indexed user, bool indexed approved, bytes32 role);\\n\\n    /// @param from Address that authorized the revoke\\n    event AllRolesRevoked(address indexed from);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Errors\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @dev Does not have specified role\\n    error NotSpecifiedRole(bytes32 role);\\n\\n    /// @dev Is not specified role or owner\\n    error NotRoleOrOwner(bytes32 role);\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                    Modifiers\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    modifier onlyRole(bytes32 role) {\\n        if (!hasRole(role, msg.sender)) {\\n            revert NotSpecifiedRole(role);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyRoleOrOwner(bytes32 role) {\\n        if (!hasRole(role, msg.sender) && owner() != msg.sender) {\\n            revert NotRoleOrOwner(role);\\n        }\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Constructor\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                            External Role Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to revoke all roles currently present\\n    /// @dev Increments the `_c` variables\\n    /// @dev Requires owner privileges\\n    function revokeAllRoles() external onlyOwner {\\n        _c++;\\n        emit AllRolesRevoked(msg.sender);\\n    }\\n\\n    /// @notice Function to renounce role\\n    /// @param role Bytes32 role created in inheriting contracts\\n    function renounceRole(bytes32 role) external {\\n        address[] memory members = new address[](1);\\n        members[0] = msg.sender;\\n        _setRole(role, members, false);\\n    }\\n\\n    /// @notice Function to grant/revoke a role to an address\\n    /// @dev Requires owner to call this function but this may be further\\n    ///      extended using the internal helper function in inheriting contracts\\n    /// @param role Bytes32 role created in inheriting contracts\\n    /// @param roleMembers List of addresses that should have roles attached to them based on `status`\\n    /// @param status Bool whether to remove or add `roleMembers` to the `role`\\n    function setRole(bytes32 role, address[] memory roleMembers, bool status) external onlyOwner {\\n        _setRole(role, roleMembers, status);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                External View Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Function to see if an address is the owner\\n    /// @param role Bytes32 role created in inheriting contracts\\n    /// @param potentialRoleMember Address to check for role membership\\n    function hasRole(bytes32 role, address potentialRoleMember) public view returns (bool) {\\n        return _roleStatus[_c][role][potentialRoleMember];\\n    }\\n\\n    /// @notice Function to get role members\\n    /// @param role Bytes32 role created in inheriting contracts\\n    function getRoleMembers(bytes32 role) public view returns (address[] memory) {\\n        return _roleMembers[_c][role].values();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////////////////\\n                                Internal Helper Functions\\n    //////////////////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Helper function to set addresses for a role\\n    /// @param role Bytes32 role created in inheriting contracts\\n    /// @param roleMembers List of addresses that should have roles attached to them based on `status`\\n    /// @param status Bool whether to remove or add `roleMembers` to the `role`\\n    function _setRole(bytes32 role, address[] memory roleMembers, bool status) internal {\\n        for (uint256 i = 0; i < roleMembers.length; i++) {\\n            _roleStatus[_c][role][roleMembers[i]] = status;\\n            if (status) {\\n                _roleMembers[_c][role].add(roleMembers[i]);\\n            } else {\\n                _roleMembers[_c][role].remove(roleMembers[i]);\\n            }\\n            emit RoleChange(msg.sender, roleMembers[i], status, role);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/CommonUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n/// @dev Enum to encapsulate drop phases\\nenum DropPhase {\\n    NOT_CONFIGURED,\\n    NOT_STARTED,\\n    PRESALE,\\n    PUBLIC_SALE,\\n    ENDED\\n}\\n\\n/// @dev Enum to encapsulate drop types\\nenum DropType {\\n    NOT_CONFIGURED,\\n    REGULAR,\\n    VELOCITY\\n}\\n\\n/// @dev Errors for Drops\\ninterface DropErrors {\\n    error NotDropAdmin();\\n    error NotApprovedMintContract();\\n    error InvalidPayoutReceiver();\\n    error InvalidDropSupply();\\n    error DropAlreadyConfigured();\\n    error DropUpdateNotAllowed();\\n    error InvalidDropType();\\n    error NotAllowedForVelocityDrops();\\n    error MintZeroTokens();\\n    error NotOnAllowlist();\\n    error YouShallNotMint();\\n    error AlreadyReachedMintAllowance();\\n    error InvalidBatchArguments();\\n    error InsufficientFunds();\\n}\\n\\n/// @dev Errors for the Auction House\\ninterface AuctionHouseErrors {\\n    error PercentageTooLarge();\\n    error CallerNotTokenOwner();\\n    error AuctionHouseNotApproved();\\n    error PayoutToZeroAddress();\\n    error NftNotOwnedBySeller();\\n    error NftNotTransferred();\\n    error AuctionNotConfigured();\\n    error AuctionNotStarted();\\n    error AuctionStarted();\\n    error AuctionNotOpen();\\n    error BidTooLow();\\n    error AuctionEnded();\\n    error AuctionNotEnded();\\n    error InsufficientMsgValue();\\n    error SaleNotConfigured();\\n    error SaleNotOpen();\\n}\\n\"\r\n    },\r\n    \"src/utils/TLStacks1155Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {DropType} from \\\"./CommonUtils.sol\\\";\\n\\n/// @dev stacks drop struct\\n/// @param initialSupply The initial supply of the drop\\n/// @param supply The current supply left in the drop\\n/// @param allowance The allowance to mint per wallet during public mint\\n/// @param currencyAddress The currency address\\n/// @param payoutReceiver The address that receives the payout of the mint\\n/// @param startTime The time at which the drop opens\\n/// @param presaleDuration The duration for the presale phase of the drop\\n/// @param presaleCost The cost for each token in the presale phase\\n/// @param presaleMerkleRoot The merkle root for the presale phase of the drop\\n/// @param publicDuration The duration of the public sale phase\\n/// @param publicCost The cost of each token during the public sale phase\\nstruct Drop {\\n    DropType dropType;\\n    address payoutReceiver;\\n    uint256 initialSupply;\\n    uint256 supply;\\n    uint256 allowance;\\n    address currencyAddress;\\n    uint256 startTime;\\n    uint256 presaleDuration;\\n    uint256 presaleCost;\\n    bytes32 presaleMerkleRoot;\\n    uint256 publicDuration;\\n    uint256 publicCost;\\n    int256 decayRate;\\n}\\n\\ninterface ITLStacks1155Events {\\n    event WethUpdated(address indexed prevWeth, address indexed newWeth);\\n    event ProtocolFeeUpdated(address indexed newProtocolFeeReceiver, uint256 indexed newProtocolFee);\\n\\n    event DropConfigured(address indexed nftAddress, uint256 indexed tokenId, Drop drop);\\n    event DropUpdated(address indexed nftAddress, uint256 indexed tokenId, Drop drop);\\n    event DropClosed(address indexed nftAddress, uint256 indexed tokenId);\\n\\n    event Purchase(\\n        address indexed nftAddress,\\n        uint256 indexed tokenId,\\n        address nftReceiver,\\n        address currencyAddress,\\n        uint256 amount,\\n        uint256 price,\\n        int256 decayRate,\\n        bool isPresale\\n    );\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/src/payments/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"openzeppelin/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/src/payments/IChainalysisSanctionsOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IChainalysisSanctionsOracle {\\n    function isSanctioned(address addr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@manifoldxyz/libraries-solidity/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/royalty-registry-solidity/lib/libraries-solidity/\",\r\n      \"@openzeppelin/contracts-upgradeable/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/\",\r\n      \"create2-helpers/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/royalty-registry-solidity/lib/create2-helpers/\",\r\n      \"create2-scripts/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/royalty-registry-solidity/lib/create2-helpers/script/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"libraries-solidity/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/royalty-registry-solidity/lib/libraries-solidity/contracts/\",\r\n      \"murky/=lib/murky/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/murky/lib/openzeppelin-contracts/\",\r\n      \"openzeppelin-upgradeable/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"openzeppelin/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/openzeppelin-contracts/contracts/\",\r\n      \"royalty-registry-solidity/=lib/tl-creator-contracts/lib/tl-sol-tools/lib/royalty-registry-solidity/contracts/\",\r\n      \"tl-creator-contracts/=lib/tl-creator-contracts/src/\",\r\n      \"tl-sol-tools/=lib/tl-creator-contracts/lib/tl-sol-tools/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initSanctionsOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initWethAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initProtocolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initProtocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyReachedMintAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DropAlreadyConfigured\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DropUpdateNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ETHTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficentERC20Transfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientFunds\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBatchArguments\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDropSupply\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidDropType\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPayoutReceiver\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintZeroTokens\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAllowedForVelocityDrops\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedMintContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotDropAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOnAllowlist\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SanctionedAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"YouShallNotMint\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"DropClosed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum DropType\",\"name\":\"dropType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicCost\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"decayRate\",\"type\":\"int256\"}],\"indexed\":false,\"internalType\":\"struct Drop\",\"name\":\"drop\",\"type\":\"tuple\"}],\"name\":\"DropConfigured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum DropType\",\"name\":\"dropType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicCost\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"decayRate\",\"type\":\"int256\"}],\"indexed\":false,\"internalType\":\"struct Drop\",\"name\":\"drop\",\"type\":\"tuple\"}],\"name\":\"DropUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newProtocolFeeReceiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"}],\"name\":\"ProtocolFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"decayRate\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isPresale\",\"type\":\"bool\"}],\"name\":\"Purchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevOracle\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"SanctionsOracleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevWeth\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newWeth\",\"type\":\"address\"}],\"name\":\"WethUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"APPROVED_MINT_CONTRACT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"closeDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"enum DropType\",\"name\":\"dropType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicCost\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"decayRate\",\"type\":\"int256\"}],\"internalType\":\"struct Drop\",\"name\":\"drop\",\"type\":\"tuple\"}],\"name\":\"configureDrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDrop\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DropType\",\"name\":\"dropType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicCost\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"decayRate\",\"type\":\"int256\"}],\"internalType\":\"struct Drop\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDropPhase\",\"outputs\":[{\"internalType\":\"enum DropPhase\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDropRound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"getDrops\",\"outputs\":[{\"components\":[{\"internalType\":\"enum DropType\",\"name\":\"dropType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleCost\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"publicDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicCost\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"decayRate\",\"type\":\"int256\"}],\"internalType\":\"struct Drop[]\",\"name\":\"drops\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"getNumberMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IChainalysisSanctionsOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberToMint\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleNumberCanMint\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"purchase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"refundAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProtocolFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"newProtocolFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolFeeSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOracle\",\"type\":\"address\"}],\"name\":\"setSanctionsOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newWethAddress\",\"type\":\"address\"}],\"name\":\"setWethAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"}],\"name\":\"updateDropAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"decayRate\",\"type\":\"int256\"}],\"name\":\"updateDropDecayRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"presaleDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicDuration\",\"type\":\"uint256\"}],\"name\":\"updateDropDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payoutReceiver\",\"type\":\"address\"}],\"name\":\"updateDropPayoutReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"presaleMerkleRoot\",\"type\":\"bytes32\"}],\"name\":\"updateDropPresaleMerkleRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"nftAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currencyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"presaleCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"publicCost\",\"type\":\"uint256\"}],\"name\":\"updateDropPrices\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "TLStacks1155", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "00000000000000000000000077b35947d508012589a91ca4c9d168824376cc7d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003328b944c4000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}