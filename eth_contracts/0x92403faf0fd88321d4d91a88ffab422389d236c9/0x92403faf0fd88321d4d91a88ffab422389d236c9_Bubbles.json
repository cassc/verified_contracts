{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BubblesToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\n// Bubbles \\r\\n//  Built with the latest next-gen, dynamic reflection tokenomics combining gambling and ultra addictive features.\\r\\n// Twitter: https://twitter.com/bubbles_erc\\r\\n// Website: https://bubbles.run/\\r\\n\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport \\\"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\ncontract Bubbles is IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   events                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    event EventStart(string evt);\\r\\n    event EventFinish(string evt, uint256 amountReflectionAccumulated);\\r\\n    event ReflectAccumulated(\\r\\n        uint256 amountAdded,\\r\\n        uint256 totalAmountAccumulated\\r\\n    );\\r\\n    event ReflectDistributed(uint256 amountDistributer);\\r\\n    event ReflectNotification(string message);\\r\\n    event ModeChanged(string mode);\\r\\n    event HolderMinimumChanged(uint256 newMinimum);\\r\\n    event LogInfo(string info);\\r\\n    event LogError(string error);\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                  constants                                 */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    address constant DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n    address constant ZERO = 0x0000000000000000000000000000000000000000;\\r\\n\\r\\n    uint256 constant MAX_FEE = 10;\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   states                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    IUniswapV2Router02 public constant UNISWAP_V2_ROUTER =\\r\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n    address public immutable UNISWAP_V2_PAIR;\\r\\n\\r\\n    struct Fee {\\r\\n        uint8 reflection;\\r\\n        uint8 teamOracle;\\r\\n        uint8 lp;\\r\\n        uint8 burn;\\r\\n        uint128 total;\\r\\n    }\\r\\n\\r\\n    struct HolderInfo {\\r\\n        uint256 balance;\\r\\n        uint256 eventReflection;\\r\\n        uint256 baseReflection;\\r\\n        uint256 holdingTime;\\r\\n        uint256 lastBuy;\\r\\n        uint256 lastSell;\\r\\n        uint256 keyIndex;\\r\\n        bool isHolder;\\r\\n    }\\r\\n\\r\\n    string _name = \\\"Bubbles\\\";\\r\\n    string _symbol = \\\"Bubbles\\\";\\r\\n\\r\\n    uint256 _totalSupply = 100_000_000 ether;\\r\\n\\r\\n    uint256 public _swapThreshold = (_totalSupply * 2) / 10000;\\r\\n\\r\\n    uint256 public _minSupplyHolding = 100_000 ether;\\r\\n\\r\\n    mapping(address => uint256) public _balances;\\r\\n    mapping(address => uint256) public _baseReflection;\\r\\n    mapping(address => uint256) public _eventReflection;\\r\\n    mapping(address => uint256) public _historyReflectionTransfered;\\r\\n    mapping(address => uint256) public _holdingTime;\\r\\n    mapping(address => uint256) public _lastBuy;\\r\\n    mapping(address => uint256) public _lastSell;\\r\\n    mapping(address => uint256) public _keyIndex;\\r\\n    mapping(address => bool) public _isHolder;\\r\\n\\r\\n    address[] public addressesParticipantEvent;\\r\\n    address[] public holderAddresses;\\r\\n\\r\\n    uint256 public totalReflections = 0;\\r\\n    uint256 public eventReflectedToken = 0;\\r\\n    uint256 public normalReflectedToken = 0;\\r\\n    uint256 public totalRemainder = 0;\\r\\n\\r\\n    string public currentTokenMode = \\\"chill\\\";\\r\\n    string public nextTokenMode = \\\"ngmi\\\";\\r\\n    uint256 public lastTimeMode = 0;\\r\\n    uint256 public lastTimeGenesis = 0;\\r\\n    string public eventNameInProgress = \\\"\\\";\\r\\n    bool public eventInProgress = false;\\r\\n    string[] public eventHistory;\\r\\n    string[] public modeHistory;\\r\\n    uint256 public eventTokenAmountDistributedBatching;\\r\\n    uint256 public timeEventStart = 0;\\r\\n    uint256 public timeEventStop = 0;\\r\\n    uint256 public highestReflectionEventValue = 0;\\r\\n    uint256 public highestReflectionEventTime = 0;\\r\\n    string public highestReflectionEventName = \\\"\\\";\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) _allowances;\\r\\n\\r\\n    bool public enableTrading = false;\\r\\n    bool public enableAutoAdjust = false;\\r\\n    mapping(address => bool) public isFeeExempt;\\r\\n    mapping(address => bool) public isReflectionExempt;\\r\\n\\r\\n    Fee public chill =\\r\\n        Fee({reflection: 1, teamOracle: 3, lp: 1, burn: 0, total: 5});\\r\\n\\r\\n    Fee public ngmiBuy =\\r\\n        Fee({reflection: 2, teamOracle: 0, lp: 0, burn: 2, total: 4});\\r\\n    Fee public ngmiSell =\\r\\n        Fee({reflection: 3, teamOracle: 7, lp: 0, burn: 0, total: 10});\\r\\n\\r\\n    Fee public apeBuy =\\r\\n        Fee({reflection: 0, teamOracle: 0, lp: 0, burn: 0, total: 0});\\r\\n    Fee public apeSell =\\r\\n        Fee({reflection: 1, teamOracle: 3, lp: 0, burn: 1, total: 5});\\r\\n\\r\\n    Fee public buyFee;\\r\\n    Fee public sellFee;\\r\\n\\r\\n    address private teamOracleFeeReceiver;\\r\\n    address private lpFeeReceiver;\\r\\n    address private airDropAddress;\\r\\n\\r\\n    address private msAddress;\\r\\n\\r\\n    bool public claimingFees = true;\\r\\n    bool inSwap;\\r\\n    mapping(address => bool) public blacklists;\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                  modifiers                                 */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    modifier swapping() {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                 constructor                                */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    constructor() {\\r\\n        // create uniswap pair\\r\\n        address _uniswapPair = IUniswapV2Factory(UNISWAP_V2_ROUTER.factory())\\r\\n            .createPair(address(this), UNISWAP_V2_ROUTER.WETH());\\r\\n        UNISWAP_V2_PAIR = _uniswapPair;\\r\\n\\r\\n        _allowances[address(this)][address(UNISWAP_V2_ROUTER)] = type(uint256)\\r\\n            .max;\\r\\n        _allowances[address(this)][msg.sender] = type(uint256).max;\\r\\n\\r\\n        teamOracleFeeReceiver = address(\\r\\n            0x57458ac14b039cFa4F80740591A0DFe527D0260a\\r\\n        ); // 0x57458ac14b039cFa4F80740591A0DFe527D0260a\\r\\n        lpFeeReceiver = address(0xCF035a92cB2A8e115D59D01b66FEBb6c4F35ABA9); // 0xCF035a92cB2A8e115D59D01b66FEBb6c4F35ABA9\\r\\n        airDropAddress = address(0xD73D1BF6131f0E9b01fCd31FF0aB4F81029d026E); // 0xD73D1BF6131f0E9b01fCd31FF0aB4F81029d026E\\r\\n\\r\\n        isFeeExempt[msg.sender] = true;\\r\\n        isFeeExempt[teamOracleFeeReceiver] = true;\\r\\n        isFeeExempt[lpFeeReceiver] = true;\\r\\n        isFeeExempt[airDropAddress] = true;\\r\\n        isFeeExempt[ZERO] = true;\\r\\n        isFeeExempt[DEAD] = true;\\r\\n\\r\\n        isReflectionExempt[address(this)] = true;\\r\\n        isReflectionExempt[address(UNISWAP_V2_ROUTER)] = true;\\r\\n        isReflectionExempt[_uniswapPair] = true;\\r\\n        isReflectionExempt[msg.sender] = true;\\r\\n        isReflectionExempt[teamOracleFeeReceiver] = true;\\r\\n        isReflectionExempt[lpFeeReceiver] = true;\\r\\n        isReflectionExempt[airDropAddress] = true;\\r\\n        isReflectionExempt[ZERO] = true;\\r\\n        isReflectionExempt[DEAD] = true;\\r\\n\\r\\n        buyFee = chill;\\r\\n        sellFee = chill;\\r\\n\\r\\n        uint256 distribute = (_totalSupply * 45) / 100;\\r\\n        _balances[msg.sender] = distribute;\\r\\n        emit Transfer(address(0), msg.sender, distribute);\\r\\n\\r\\n        distribute = (_totalSupply * 0) / 100;\\r\\n        _balances[teamOracleFeeReceiver] = distribute;\\r\\n        emit Transfer(address(0), teamOracleFeeReceiver, distribute);\\r\\n\\r\\n        distribute = (_totalSupply * 55) / 100;\\r\\n        _balances[airDropAddress] = distribute;\\r\\n        emit Transfer(address(0), airDropAddress, distribute);\\r\\n\\r\\n        lastTimeMode = block.timestamp;\\r\\n        emit ModeChanged(currentTokenMode);\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                    ERC20                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveMax(address spender) external returns (bool) {\\r\\n        return approve(spender, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override returns (bool) {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external override returns (bool) {\\r\\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\\r\\n            require(\\r\\n                _allowances[sender][msg.sender] >= amount,\\r\\n                \\\"ERC20: insufficient allowance\\\"\\r\\n            );\\r\\n            _allowances[sender][msg.sender] =\\r\\n                _allowances[sender][msg.sender] -\\r\\n                amount;\\r\\n        }\\r\\n\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                    views                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function decimals() external pure returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function name() external view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() external view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        uint256 balanceNormalReflection = 0;\\r\\n        if (isHolder(account)) {\\r\\n            if (holderAddresses.length > 0 && normalReflectedToken > 0) {\\r\\n                uint256 baseReflection = 0;\\r\\n                if (_baseReflection[account] > 0) {\\r\\n                    baseReflection = _baseReflection[account];\\r\\n                }\\r\\n                uint256 calculatePersonnalReflection = normalReflectedToken /\\r\\n                    holderAddresses.length;\\r\\n                if (calculatePersonnalReflection > baseReflection) {\\r\\n                    balanceNormalReflection =\\r\\n                        calculatePersonnalReflection -\\r\\n                        baseReflection;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 totalBalance = _balances[account];\\r\\n        if (balanceNormalReflection > 0) {\\r\\n            totalBalance += balanceNormalReflection;\\r\\n        }\\r\\n        uint256 eventBalance = _eventReflection[account];\\r\\n        if (eventBalance > 0) {\\r\\n            totalBalance += eventBalance;\\r\\n        }\\r\\n\\r\\n        return totalBalance;\\r\\n    }\\r\\n\\r\\n    function getHolderNormalReflection(\\r\\n        address account\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 balanceNormalReflection = 0;\\r\\n        if (isHolder(account)) {\\r\\n            if (holderAddresses.length > 0 && normalReflectedToken > 0) {\\r\\n                uint256 baseReflection = 0;\\r\\n                if (_baseReflection[account] > 0) {\\r\\n                    baseReflection = _baseReflection[account];\\r\\n                }\\r\\n                uint256 calculatePersonnalReflection = normalReflectedToken /\\r\\n                    holderAddresses.length;\\r\\n                if (calculatePersonnalReflection > baseReflection) {\\r\\n                    balanceNormalReflection =\\r\\n                        calculatePersonnalReflection -\\r\\n                        baseReflection;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n        return balanceNormalReflection;\\r\\n    }\\r\\n\\r\\n    function getHolderEventReflection(\\r\\n        address account\\r\\n    ) public view returns (uint256) {\\r\\n        return _eventReflection[account];\\r\\n    }\\r\\n\\r\\n    function getHolderHistoryReflectionTransfered(\\r\\n        address account\\r\\n    ) public view returns (uint256) {\\r\\n        return _historyReflectionTransfered[account];\\r\\n    }\\r\\n\\r\\n    function allowance(\\r\\n        address holder,\\r\\n        address spender\\r\\n    ) external view override returns (uint256) {\\r\\n        return _allowances[holder][spender];\\r\\n    }\\r\\n\\r\\n    function getCirculatingSupply() public view returns (uint256) {\\r\\n        return _totalSupply - balanceOf(DEAD) - balanceOf(ZERO);\\r\\n    }\\r\\n\\r\\n    function isHolder(address holderAddress) public view returns (bool) {\\r\\n        if (isReflectionExempt[holderAddress] || blacklists[holderAddress]) {\\r\\n            return false;\\r\\n        }\\r\\n        return _balances[holderAddress] >= _minSupplyHolding;\\r\\n    }\\r\\n\\r\\n    function isHolderInArray(address holderAddress) public view returns (bool) {\\r\\n        return _isHolder[holderAddress];\\r\\n    }\\r\\n\\r\\n    function addressToString(\\r\\n        address _address\\r\\n    ) internal pure returns (string memory) {\\r\\n        bytes32 value = bytes32(uint256(uint160(_address)));\\r\\n        bytes memory alphabet = \\\"0123456789abcdef\\\";\\r\\n        bytes memory str = new bytes(42);\\r\\n        str[0] = \\\"0\\\";\\r\\n        str[1] = \\\"x\\\";\\r\\n        for (uint256 i = 0; i < 20; i++) {\\r\\n            str[2 + i * 2] = alphabet[uint8(value[i + 12] >> 4)];\\r\\n            str[3 + i * 2] = alphabet[uint8(value[i + 12] & 0x0f)];\\r\\n        }\\r\\n        return string(str);\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   owners                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    function setMode(\\r\\n        string calldata modeName,\\r\\n        string calldata nextMode\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == teamOracleFeeReceiver,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n\\r\\n        if (compareStrings(modeName, \\\"chill\\\")) {\\r\\n            buyFee = chill;\\r\\n            sellFee = chill;\\r\\n        } else if (compareStrings(modeName, \\\"ngmi\\\")) {\\r\\n            buyFee = ngmiBuy;\\r\\n            sellFee = ngmiSell;\\r\\n        } else if (compareStrings(modeName, \\\"ape\\\")) {\\r\\n            buyFee = apeBuy;\\r\\n            sellFee = apeSell;\\r\\n        }\\r\\n\\r\\n        currentTokenMode = modeName;\\r\\n        nextTokenMode = nextMode;\\r\\n\\r\\n        modeHistory.push(modeName);\\r\\n        if (modeHistory.length > 10) {\\r\\n            delete modeHistory[0];\\r\\n            for (uint i = 0; i < modeHistory.length - 1; i++) {\\r\\n                modeHistory[i] = modeHistory[i + 1];\\r\\n            }\\r\\n            modeHistory.pop();\\r\\n        }\\r\\n        lastTimeMode = block.timestamp;\\r\\n        emit ModeChanged(modeName);\\r\\n    }\\r\\n\\r\\n    function switchNextMode() external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == teamOracleFeeReceiver,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n\\r\\n        string memory modeName = nextTokenMode;\\r\\n        string memory nextMode = \\\"\\\";\\r\\n        if (compareStrings(nextTokenMode, \\\"chill\\\")) {\\r\\n            if (compareStrings(currentTokenMode, \\\"ngmi\\\")) {\\r\\n                nextMode = \\\"ape\\\";\\r\\n            } else {\\r\\n                nextMode = \\\"ngmi\\\";\\r\\n            }\\r\\n        } else {\\r\\n            nextMode = \\\"chill\\\";\\r\\n        }\\r\\n\\r\\n        if (compareStrings(modeName, \\\"chill\\\")) {\\r\\n            buyFee = chill;\\r\\n            sellFee = chill;\\r\\n        } else if (compareStrings(modeName, \\\"ngmi\\\")) {\\r\\n            buyFee = ngmiBuy;\\r\\n            sellFee = ngmiSell;\\r\\n        } else if (compareStrings(modeName, \\\"ape\\\")) {\\r\\n            buyFee = apeBuy;\\r\\n            sellFee = apeSell;\\r\\n        }\\r\\n\\r\\n        currentTokenMode = modeName;\\r\\n        nextTokenMode = nextMode;\\r\\n\\r\\n        modeHistory.push(modeName);\\r\\n        if (modeHistory.length > 10) {\\r\\n            delete modeHistory[0];\\r\\n            for (uint i = 0; i < modeHistory.length - 1; i++) {\\r\\n                modeHistory[i] = modeHistory[i + 1];\\r\\n            }\\r\\n            modeHistory.pop();\\r\\n        }\\r\\n        lastTimeMode = block.timestamp;\\r\\n        emit ModeChanged(modeName);\\r\\n    }\\r\\n\\r\\n    function getModeHistoryList() external view returns (string[] memory) {\\r\\n        return modeHistory;\\r\\n    }\\r\\n\\r\\n    function getCurrentMode() external view returns (string memory) {\\r\\n        return currentTokenMode;\\r\\n    }\\r\\n\\r\\n    function getNextMode() external view returns (string memory) {\\r\\n        return nextTokenMode;\\r\\n    }\\r\\n\\r\\n    function getLastTimeMode() external view returns (uint256) {\\r\\n        return lastTimeMode;\\r\\n    }\\r\\n\\r\\n    function getHighestReflectionEventValue() external view returns (uint256) {\\r\\n        return highestReflectionEventValue;\\r\\n    }\\r\\n\\r\\n    function getHighestReflectionEventName()\\r\\n        external\\r\\n        view\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return highestReflectionEventName;\\r\\n    }\\r\\n\\r\\n    function getHighestReflectionEventTime() external view returns (uint256) {\\r\\n        return highestReflectionEventTime;\\r\\n    }\\r\\n\\r\\n    function getHolder(\\r\\n        address holderAddress\\r\\n    ) external view returns (HolderInfo memory) {\\r\\n        HolderInfo memory holder;\\r\\n        holder.balance = _balances[holderAddress];\\r\\n        holder.baseReflection = _baseReflection[holderAddress];\\r\\n        holder.eventReflection = _eventReflection[holderAddress];\\r\\n        holder.holdingTime = _holdingTime[holderAddress];\\r\\n        holder.lastBuy = _lastBuy[holderAddress];\\r\\n        holder.lastSell = _lastSell[holderAddress];\\r\\n        holder.keyIndex = _keyIndex[holderAddress];\\r\\n        holder.isHolder = _isHolder[holderAddress];\\r\\n        return holder;\\r\\n    }\\r\\n\\r\\n    function getArrayHolder() external view returns (address[] memory) {\\r\\n        return holderAddresses;\\r\\n    }\\r\\n\\r\\n    function getArrayParticipant() external view returns (address[] memory) {\\r\\n        return addressesParticipantEvent;\\r\\n    }\\r\\n\\r\\n    function stopEvent() external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == teamOracleFeeReceiver,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n        require(\\r\\n            eventInProgress == true,\\r\\n            \\\"There is not event started actually.\\\"\\r\\n        );\\r\\n        if (eventReflectedToken > highestReflectionEventValue) {\\r\\n            highestReflectionEventValue = eventReflectedToken;\\r\\n            highestReflectionEventTime = block.timestamp;\\r\\n            highestReflectionEventName = eventNameInProgress;\\r\\n        }\\r\\n        emit EventFinish(eventNameInProgress, eventReflectedToken);\\r\\n        eventNameInProgress = \\\"\\\";\\r\\n        eventInProgress = false;\\r\\n        eventTokenAmountDistributedBatching = 0;\\r\\n        timeEventStop = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function startEventName(\\r\\n        string calldata eventName,\\r\\n        address[] calldata selectedAddresses\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == teamOracleFeeReceiver,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n        require(\\r\\n            eventInProgress == false,\\r\\n            \\\"Please finish the event before start another one.\\\"\\r\\n        );\\r\\n        delete addressesParticipantEvent;\\r\\n        addressesParticipantEvent = selectedAddresses;\\r\\n        eventNameInProgress = eventName;\\r\\n        eventInProgress = true;\\r\\n        eventHistory.push(eventName);\\r\\n        if (eventHistory.length > 10) {\\r\\n            delete eventHistory[0];\\r\\n            for (uint i = 0; i < eventHistory.length - 1; i++) {\\r\\n                eventHistory[i] = eventHistory[i + 1];\\r\\n            }\\r\\n            eventHistory.pop();\\r\\n        }\\r\\n        timeEventStart = block.timestamp;\\r\\n        if (compareStrings(eventName, \\\"genesis\\\")) {\\r\\n            lastTimeGenesis = block.timestamp;\\r\\n        }\\r\\n        emit EventStart(eventName);\\r\\n    }\\r\\n\\r\\n    function getEventHistoryList() external view returns (string[] memory) {\\r\\n        return eventHistory;\\r\\n    }\\r\\n\\r\\n    function getEventTimeStart() external view returns (uint256) {\\r\\n        return timeEventStart;\\r\\n    }\\r\\n\\r\\n    function getEventTimeStop() external view returns (uint256) {\\r\\n        return timeEventStop;\\r\\n    }\\r\\n\\r\\n    function getLastTimeGenesis() external view returns (uint256) {\\r\\n        return lastTimeGenesis;\\r\\n    }\\r\\n\\r\\n    function shouldDistributeEventReflections(\\r\\n        address[] calldata batchingParticipants,\\r\\n        bool isLastCall\\r\\n    ) external returns (bool) {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == teamOracleFeeReceiver,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n        require(\\r\\n            eventInProgress == false,\\r\\n            \\\"Please finish the event before distribute.\\\"\\r\\n        );\\r\\n\\r\\n        uint256 totalParticipantsEvent = addressesParticipantEvent.length;\\r\\n\\r\\n        if (eventReflectedToken < totalParticipantsEvent) {\\r\\n            totalRemainder = totalRemainder + eventReflectedToken;\\r\\n            eventReflectedToken = 0;\\r\\n            emit ReflectNotification(\\r\\n                \\\"[NOT_ENOUGH_TOKENS] Not enough tokens to distribute to every participant, tokens will be send randomly in a special event.\\\"\\r\\n            );\\r\\n            return false;\\r\\n        }\\r\\n\\r\\n        uint256 reflectionsPerHolder = eventReflectedToken.div(\\r\\n            totalParticipantsEvent\\r\\n        );\\r\\n        for (uint i = 0; i < batchingParticipants.length; i++) {\\r\\n            address participant = batchingParticipants[i];\\r\\n            if (isHolder(participant)) {\\r\\n                _eventReflection[participant] = _eventReflection[participant]\\r\\n                    .add(reflectionsPerHolder);\\r\\n            } else {\\r\\n                totalRemainder = totalRemainder + reflectionsPerHolder;\\r\\n            }\\r\\n\\r\\n            eventTokenAmountDistributedBatching =\\r\\n                eventTokenAmountDistributedBatching +\\r\\n                reflectionsPerHolder;\\r\\n            if (eventTokenAmountDistributedBatching >= eventReflectedToken) {\\r\\n                emit ReflectDistributed(eventReflectedToken);\\r\\n                eventReflectedToken = 0;\\r\\n                eventTokenAmountDistributedBatching = 0;\\r\\n                emit ReflectNotification(\\r\\n                    \\\"[NOT_ENOUGH_TOKENS] Not enough tokens to distribute to every participant, tokens will be send randomly in a special event.\\\"\\r\\n                );\\r\\n                return false;\\r\\n            }\\r\\n        }\\r\\n        if (isLastCall) {\\r\\n            uint256 remainder = eventReflectedToken % totalParticipantsEvent;\\r\\n            if (remainder > 0) {\\r\\n                totalRemainder = totalRemainder + remainder;\\r\\n            }\\r\\n            if (eventReflectedToken > eventTokenAmountDistributedBatching) {\\r\\n                uint256 remainder2 = eventReflectedToken -\\r\\n                    eventTokenAmountDistributedBatching;\\r\\n                if (remainder2 > 0) {\\r\\n                    totalRemainder = totalRemainder + remainder2;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            emit ReflectDistributed(eventReflectedToken);\\r\\n            eventReflectedToken = 0;\\r\\n            eventTokenAmountDistributedBatching = 0;\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function sendRemainderTokens(address winner, uint256 amount) external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == teamOracleFeeReceiver,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n        _basicTransfer(address(this), winner, amount);\\r\\n    }\\r\\n\\r\\n    function clearStuckBalance() external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == teamOracleFeeReceiver,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n        (bool success, ) = payable(msg.sender).call{\\r\\n            value: address(this).balance\\r\\n        }(\\\"\\\");\\r\\n        require(success);\\r\\n    }\\r\\n\\r\\n    function clearStuckToken() external {\\r\\n        require(\\r\\n            msg.sender == owner() || msg.sender == teamOracleFeeReceiver,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n        _transferFrom(address(this), msg.sender, balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function setSwapBackSettings(\\r\\n        bool _enabled,\\r\\n        uint256 _pt\\r\\n    ) external onlyOwner {\\r\\n        claimingFees = _enabled;\\r\\n        _swapThreshold = (_totalSupply * _pt) / 10000;\\r\\n    }\\r\\n\\r\\n    function manualSwapBack() external onlyOwner {\\r\\n        if (_shouldSwapBack()) {\\r\\n            _swapBack();\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function startTrading() external onlyOwner {\\r\\n        enableTrading = true;\\r\\n    }\\r\\n\\r\\n    function setMSAddress(address ad) external onlyOwner {\\r\\n        msAddress = ad;\\r\\n    }\\r\\n\\r\\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\\r\\n        isFeeExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function setIsReflectionExempt(\\r\\n        address holder,\\r\\n        bool exempt\\r\\n    ) external onlyOwner {\\r\\n        isReflectionExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function setFeeReceivers(address ot_, address lp_) external onlyOwner {\\r\\n        teamOracleFeeReceiver = ot_;\\r\\n        lpFeeReceiver = lp_;\\r\\n    }\\r\\n\\r\\n    function setMinSupplyHolding(uint256 h_) external onlyOwner {\\r\\n        _minSupplyHolding = (_totalSupply * h_) / 10000;\\r\\n        emit HolderMinimumChanged(_minSupplyHolding);\\r\\n    }\\r\\n\\r\\n    function setEnableAutoAdjust(bool e_) external onlyOwner {\\r\\n        enableAutoAdjust = e_;\\r\\n    }\\r\\n\\r\\n    function blacklist(\\r\\n        address _address,\\r\\n        bool _isBlacklisting\\r\\n    ) external onlyOwner {\\r\\n        blacklists[_address] = _isBlacklisting;\\r\\n    }\\r\\n\\r\\n    function airdrop(address recipient, uint256 amount) external {\\r\\n        require(\\r\\n            msg.sender == owner() ||\\r\\n                msg.sender == teamOracleFeeReceiver ||\\r\\n                msg.sender == airDropAddress,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n        require(_balances[msg.sender] >= amount, \\\"Insufficient Balance\\\");\\r\\n        _balances[msg.sender] = _balances[msg.sender] - amount;\\r\\n        _balances[recipient] = _balances[recipient] + amount;\\r\\n        updateStateHolder(recipient);\\r\\n        _lastBuy[recipient] = block.timestamp;\\r\\n        emit Transfer(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function airdropMultiple(\\r\\n        address[] calldata recipients,\\r\\n        uint256[] calldata amounts\\r\\n    ) external {\\r\\n        require(\\r\\n            msg.sender == owner() ||\\r\\n                msg.sender == teamOracleFeeReceiver ||\\r\\n                msg.sender == airDropAddress,\\r\\n            \\\"Forbidden\\\"\\r\\n        );\\r\\n        require(recipients.length == amounts.length, \\\"Invalid input\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < recipients.length; i++) {\\r\\n            address recipient = recipients[i];\\r\\n            uint256 amount = amounts[i];\\r\\n\\r\\n            require(_balances[msg.sender] >= amount, \\\"Insufficient Balance\\\");\\r\\n\\r\\n            _balances[msg.sender] -= amount;\\r\\n            _balances[recipient] += amount;\\r\\n            updateStateHolder(recipient);\\r\\n            _lastBuy[recipient] = block.timestamp;\\r\\n            emit Transfer(msg.sender, recipient, amount);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sendAutoAjustHolding() external onlyOwner {\\r\\n        adjustMinimumHolding();\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   private                                  */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    function adjustMinimumHolding() internal {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = UNISWAP_V2_ROUTER.WETH();\\r\\n        path[1] = address(this);\\r\\n\\r\\n        uint256[] memory amounts = UNISWAP_V2_ROUTER.getAmountsOut(\\r\\n            0.05 ether,\\r\\n            path\\r\\n        );\\r\\n\\r\\n        uint256 amountAdjusted = amounts[1];\\r\\n\\r\\n        _minSupplyHolding = amountAdjusted;\\r\\n    }\\r\\n\\r\\n    function _claim(address holder) internal {\\r\\n        uint256 balanceNormalReflection = 0;\\r\\n        if (isHolder(holder)) {\\r\\n            if (holderAddresses.length > 0 && normalReflectedToken > 0) {\\r\\n                uint256 baseReflection = 0;\\r\\n                if (_baseReflection[holder] > 0) {\\r\\n                    baseReflection = _baseReflection[holder];\\r\\n                }\\r\\n                uint256 calculatePersonnalReflection = normalReflectedToken /\\r\\n                    holderAddresses.length;\\r\\n                if (calculatePersonnalReflection > baseReflection) {\\r\\n                    balanceNormalReflection =\\r\\n                        calculatePersonnalReflection -\\r\\n                        baseReflection;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 totalBalance = _balances[holder];\\r\\n        if (balanceNormalReflection > 0) {\\r\\n            totalBalance += balanceNormalReflection;\\r\\n        }\\r\\n        uint256 eventBalance = _eventReflection[holder];\\r\\n        if (eventBalance > 0) {\\r\\n            totalBalance += eventBalance;\\r\\n        }\\r\\n\\r\\n        uint256 amountReflection = balanceNormalReflection + eventBalance;\\r\\n        if (amountReflection > 0) {\\r\\n            _basicTransfer(address(this), holder, amountReflection);\\r\\n            _historyReflectionTransfered[holder] =\\r\\n                _historyReflectionTransfered[holder] +\\r\\n                amountReflection;\\r\\n            if (balanceNormalReflection > 0) {\\r\\n                _baseReflection[holder] =\\r\\n                    _baseReflection[holder] +\\r\\n                    balanceNormalReflection;\\r\\n                normalReflectedToken -= balanceNormalReflection;\\r\\n            }\\r\\n            _eventReflection[holder] = 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        require(!blacklists[recipient] && !blacklists[sender], \\\"Blacklisted\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        require(sender != DEAD && sender != ZERO, \\\"Please use a good address\\\");\\r\\n\\r\\n        if (inSwap) {\\r\\n            return _basicTransfer(sender, recipient, amount);\\r\\n        }\\r\\n\\r\\n        if (!enableTrading) {\\r\\n            if (\\r\\n                sender == owner() ||\\r\\n                sender == teamOracleFeeReceiver ||\\r\\n                sender == airDropAddress ||\\r\\n                sender == msAddress\\r\\n            ) {\\r\\n                emit LogInfo(\\\"bypass enableTrading\\\");\\r\\n                return _basicTransfer(sender, recipient, amount);\\r\\n            } else {\\r\\n                revert(\\r\\n                    string(\\r\\n                        abi.encodePacked(\\r\\n                            \\\"Trading not enabled yet, please wait. Sender: \\\",\\r\\n                            addressToString(sender),\\r\\n                            \\\" Recipient: \\\",\\r\\n                            addressToString(recipient)\\r\\n                        )\\r\\n                    )\\r\\n                );\\r\\n            }\\r\\n        } else {\\r\\n            if (\\r\\n                sender == owner() ||\\r\\n                sender == teamOracleFeeReceiver ||\\r\\n                sender == airDropAddress ||\\r\\n                sender == msAddress\\r\\n            ) {\\r\\n                return _basicTransfer(sender, recipient, amount);\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (_shouldSwapBack()) {\\r\\n            _swapBack();\\r\\n        }\\r\\n\\r\\n        if (!isReflectionExempt[sender]) {\\r\\n            _claim(sender);\\r\\n        }\\r\\n\\r\\n        require(_balances[sender] >= amount, \\\"Insufficient Real Balance\\\");\\r\\n        _balances[sender] = _balances[sender] - amount;\\r\\n\\r\\n        updateStateHolder(sender);\\r\\n\\r\\n        if (sender != UNISWAP_V2_PAIR) {\\r\\n            // WHEN SELL\\r\\n            _lastSell[sender] = block.timestamp;\\r\\n        }\\r\\n\\r\\n        uint256 fees = _takeFees(sender, recipient, amount);\\r\\n        uint256 amountWithoutFees = amount;\\r\\n        if (fees > 0) {\\r\\n            amountWithoutFees -= fees;\\r\\n            _balances[address(this)] = _balances[address(this)] + fees;\\r\\n            emit Transfer(sender, address(this), fees);\\r\\n        }\\r\\n\\r\\n        _balances[recipient] = _balances[recipient] + amountWithoutFees;\\r\\n\\r\\n        updateStateHolder(recipient);\\r\\n\\r\\n        if (sender == UNISWAP_V2_PAIR) {\\r\\n            // WHEN BUY\\r\\n            _lastBuy[recipient] = block.timestamp;\\r\\n        }\\r\\n\\r\\n        emit Transfer(sender, recipient, amountWithoutFees);\\r\\n        if (sender == UNISWAP_V2_PAIR || recipient == UNISWAP_V2_PAIR) {\\r\\n            if (enableAutoAdjust) {\\r\\n                adjustMinimumHolding();\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _basicTransfer(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (bool) {\\r\\n        require(_balances[sender] >= amount, \\\"Insufficient Balance\\\");\\r\\n        _balances[sender] = _balances[sender] - amount;\\r\\n        updateStateHolder(sender);\\r\\n        _balances[recipient] = _balances[recipient] + amount;\\r\\n        updateStateHolder(recipient);\\r\\n        _lastBuy[recipient] = block.timestamp;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        if (sender == UNISWAP_V2_PAIR || recipient == UNISWAP_V2_PAIR) {\\r\\n            if (enableAutoAdjust) {\\r\\n                adjustMinimumHolding();\\r\\n            }\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _takeFees(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) internal returns (uint256) {\\r\\n        uint256 fees = 0;\\r\\n        Fee memory __buyFee = buyFee;\\r\\n        Fee memory __sellFee = sellFee;\\r\\n        if (_shouldTakeFee(sender, recipient)) {\\r\\n            uint256 proportionReflected = 0;\\r\\n            if (sender == UNISWAP_V2_PAIR) {\\r\\n                fees = amount.mul(__buyFee.total).div(100);\\r\\n                proportionReflected = fees.mul(__buyFee.reflection).div(\\r\\n                    __buyFee.total\\r\\n                );\\r\\n            } else {\\r\\n                fees = amount.mul(__sellFee.total).div(100);\\r\\n                proportionReflected = fees.mul(__sellFee.reflection).div(\\r\\n                    __sellFee.total\\r\\n                );\\r\\n            }\\r\\n\\r\\n            if (proportionReflected > 0) {\\r\\n                totalReflections += proportionReflected;\\r\\n                if (eventInProgress) {\\r\\n                    eventReflectedToken += proportionReflected;\\r\\n                } else {\\r\\n                    normalReflectedToken += proportionReflected;\\r\\n                }\\r\\n                emit ReflectAccumulated(proportionReflected, totalReflections);\\r\\n            }\\r\\n        }\\r\\n        return fees;\\r\\n    }\\r\\n\\r\\n    function _checkBalanceForSwapping() internal view returns (bool) {\\r\\n        uint256 totalBalance = _balances[address(this)];\\r\\n        uint256 totatToSub = eventReflectedToken +\\r\\n            normalReflectedToken +\\r\\n            totalRemainder;\\r\\n        if (totatToSub > totalBalance) {\\r\\n            return false;\\r\\n        }\\r\\n        totalBalance -= totatToSub;\\r\\n        return totalBalance >= _swapThreshold;\\r\\n    }\\r\\n\\r\\n    function _shouldSwapBack() internal view returns (bool) {\\r\\n        return\\r\\n            msg.sender != UNISWAP_V2_PAIR &&\\r\\n            !inSwap &&\\r\\n            claimingFees &&\\r\\n            _checkBalanceForSwapping();\\r\\n    }\\r\\n\\r\\n    function _swapBack() internal swapping {\\r\\n        Fee memory __sellFee = sellFee;\\r\\n\\r\\n        uint256 __swapThreshold = _swapThreshold;\\r\\n        uint256 amountToBurn = (__swapThreshold * __sellFee.burn) /\\r\\n            __sellFee.total;\\r\\n        uint256 amountToSwap = __swapThreshold - amountToBurn;\\r\\n        approve(address(UNISWAP_V2_ROUTER), amountToSwap);\\r\\n\\r\\n        // burn\\r\\n        if (amountToBurn > 0) {\\r\\n            _basicTransfer(address(this), DEAD, amountToBurn);\\r\\n        }\\r\\n\\r\\n        // swap\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = UNISWAP_V2_ROUTER.WETH();\\r\\n\\r\\n        UNISWAP_V2_ROUTER.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            amountToSwap,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        uint256 amountETH = address(this).balance;\\r\\n\\r\\n        uint256 totalSwapFee = __sellFee.total -\\r\\n            __sellFee.reflection -\\r\\n            __sellFee.burn;\\r\\n        uint256 amountETHTeamOracle = (amountETH * __sellFee.teamOracle) /\\r\\n            totalSwapFee;\\r\\n        uint256 amountETHLP = (amountETH * __sellFee.lp) / totalSwapFee;\\r\\n\\r\\n        // send\\r\\n        if (amountETHTeamOracle > 0) {\\r\\n            (bool tmpSuccess, ) = payable(teamOracleFeeReceiver).call{\\r\\n                value: amountETHTeamOracle\\r\\n            }(\\\"\\\");\\r\\n        }\\r\\n        if (amountETHLP > 0) {\\r\\n            (bool tmpSuccess, ) = payable(lpFeeReceiver).call{\\r\\n                value: amountETHLP\\r\\n            }(\\\"\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _shouldTakeFee(\\r\\n        address sender,\\r\\n        address recipient\\r\\n    ) internal view returns (bool) {\\r\\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\\r\\n    }\\r\\n\\r\\n    function compareStrings(\\r\\n        string memory a,\\r\\n        string memory b\\r\\n    ) internal pure returns (bool) {\\r\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\r\\n    }\\r\\n\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n    /*                                   public                                   */\\r\\n    /* -------------------------------------------------------------------------- */\\r\\n\\r\\n    function updateStateHolder(address holder) public {\\r\\n        if (!isReflectionExempt[holder]) {\\r\\n            if (isHolder(holder)) {\\r\\n                if (_isHolder[holder] == false) {\\r\\n                    _isHolder[holder] = true;\\r\\n                    _holdingTime[holder] = block.timestamp;\\r\\n                    holderAddresses.push(holder);\\r\\n                    _keyIndex[holder] = holderAddresses.length - 1;\\r\\n                }\\r\\n            } else {\\r\\n                if (_isHolder[holder] == true) {\\r\\n                    _isHolder[holder] = false;\\r\\n                    _holdingTime[holder] = 0;\\r\\n                    _keyIndex[\\r\\n                        holderAddresses[holderAddresses.length - 1]\\r\\n                    ] = _keyIndex[holder];\\r\\n                    holderAddresses[_keyIndex[holder]] = holderAddresses[\\r\\n                        holderAddresses.length - 1\\r\\n                    ];\\r\\n                    holderAddresses.pop();\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\": {\r\n      \"content\": \"pragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 50\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evt\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReflectionAccumulated\",\"type\":\"uint256\"}],\"name\":\"EventFinish\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"evt\",\"type\":\"string\"}],\"name\":\"EventStart\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinimum\",\"type\":\"uint256\"}],\"name\":\"HolderMinimumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"error\",\"type\":\"string\"}],\"name\":\"LogError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"info\",\"type\":\"string\"}],\"name\":\"LogInfo\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"mode\",\"type\":\"string\"}],\"name\":\"ModeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountAdded\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalAmountAccumulated\",\"type\":\"uint256\"}],\"name\":\"ReflectAccumulated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountDistributer\",\"type\":\"uint256\"}],\"name\":\"ReflectDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"ReflectNotification\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_PAIR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNISWAP_V2_ROUTER\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_baseReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_eventReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_historyReflectionTransfered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_holdingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_keyIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_lastSell\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_minSupplyHolding\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_swapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"addressesParticipantEvent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdropMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeBuy\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"apeSell\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isBlacklisting\",\"type\":\"bool\"}],\"name\":\"blacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"blacklists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chill\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clearStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTokenMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableAutoAdjust\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"eventHistory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventNameInProgress\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventReflectedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eventTokenAmountDistributedBatching\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayHolder\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getArrayParticipant\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventHistoryList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventTimeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEventTimeStop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestReflectionEventName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestReflectionEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHighestReflectionEventValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"getHolder\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eventReflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseReflection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"holdingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBuy\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"keyIndex\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isHolder\",\"type\":\"bool\"}],\"internalType\":\"struct Bubbles.HolderInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHolderEventReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHolderHistoryReflectionTransfered\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getHolderNormalReflection\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getModeHistoryList\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNextMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestReflectionEventName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestReflectionEventTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highestReflectionEventValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"holderAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isFeeExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"isHolder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holderAddress\",\"type\":\"address\"}],\"name\":\"isHolderInArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isReflectionExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeGenesis\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeMode\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwapBack\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"modeHistory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenMode\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ngmiBuy\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ngmiSell\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalReflectedToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellFee\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"reflection\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"teamOracle\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"lp\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"burn\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"total\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendAutoAjustHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"sendRemainderTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"e_\",\"type\":\"bool\"}],\"name\":\"setEnableAutoAdjust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ot_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lp_\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsReflectionExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ad\",\"type\":\"address\"}],\"name\":\"setMSAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"h_\",\"type\":\"uint256\"}],\"name\":\"setMinSupplyHolding\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"modeName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nextMode\",\"type\":\"string\"}],\"name\":\"setMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_pt\",\"type\":\"uint256\"}],\"name\":\"setSwapBackSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"batchingParticipants\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"isLastCall\",\"type\":\"bool\"}],\"name\":\"shouldDistributeEventReflections\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"eventName\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"selectedAddresses\",\"type\":\"address[]\"}],\"name\":\"startEventName\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopEvent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchNextMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeEventStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeEventStop\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReflections\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalRemainder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"updateStateHolder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Bubbles", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "50", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}