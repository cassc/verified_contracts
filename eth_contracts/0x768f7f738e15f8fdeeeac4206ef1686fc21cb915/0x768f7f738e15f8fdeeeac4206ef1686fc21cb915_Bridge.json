{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.17; \r\n\r\ninterface ERC20Essential \r\n{\r\n\r\n    function balanceOf(address user) external view returns(uint256);\r\n    function transfer(address _to, uint256 _amount) external returns (bool);\r\n    function transferFrom(address _from, address _to, uint256 _amount) external returns (bool);\r\n    function mint(address account, uint256 value) external;\r\n    function burn(address account, uint256 value) external;\r\n    function transferOwnership(address newOwner) external;\r\n    function owner() external returns(address);\r\n\r\n}\r\n\r\n\r\n//USDT contract in Ethereum does not follow ERC20 standard so it needs different interface\r\ninterface usdtContract\r\n{\r\n    function transferFrom(address _from, address _to, uint256 _amount) external;\r\n    function transfer(address _to, uint256 _amount) external;\r\n    function mint(address account, uint256 value) external;\r\n    function burn(address account, uint256 value) external;\r\n    function balanceOf(address user) external view returns(uint256);\r\n}\r\n\r\n\r\n\r\n\r\n//*******************************************************************//\r\n//------------------ Contract to Manage Ownership -------------------//\r\n//*******************************************************************//\r\ncontract owned\r\n{\r\n    address public owner;\r\n    address internal newOwner;\r\n    mapping(address => bool) public signer;\r\n\r\n    event OwnershipTransferred(address indexed _from, address indexed _to);\r\n    event SignerUpdated(address indexed signer, bool indexed status);\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        //owner does not become signer automatically.\r\n    }\r\n\r\n    modifier onlyOwner {\r\n        require(msg.sender == owner);\r\n        _;\r\n    }\r\n\r\n\r\n    modifier onlySigner {\r\n        require(signer[msg.sender], 'caller must be signer');\r\n        _;\r\n    }\r\n\r\n\r\n    function changeSigner(address _signer, bool _status) public onlyOwner {\r\n        signer[_signer] = _status;\r\n        emit SignerUpdated(_signer, _status);\r\n    }\r\n\r\n    function transferOwnership(address _newOwner) public onlyOwner {\r\n        newOwner = _newOwner;\r\n    }\r\n\r\n    //the reason for this flow is to protect owners from sending ownership to unintended address due to human error\r\n    function acceptOwnership() public {\r\n        require(msg.sender == newOwner);\r\n        emit OwnershipTransferred(owner, newOwner);\r\n        owner = newOwner;\r\n        newOwner = address(0);\r\n    }\r\n}\r\n\r\n\r\n\r\n    \r\n//****************************************************************************//\r\n//---------------------        MAIN CODE STARTS HERE     ---------------------//\r\n//****************************************************************************//\r\n    \r\ncontract Bridge is owned {\r\n    \r\n    uint256 public orderID;\r\n    uint256 public exraCoinRewards;   // if we give users extra coins to cover gas cost of some initial transactions.\r\n\r\n    address public feeWallet;\r\n    address public reserveWallet;\r\n    address public usdtAddress = 0xb5b5158B0A8AAe70D3c0cF091a91faFFB808CBE0; //custom chain USDT address\r\n    uint256 public reserveFundThreshold = 10e18;\r\n    uint256 private transferTax = 1;\r\n    uint256 private minTx = 1000000000000000;\r\n    uint256 private maxTx = 5_000_000 * 1e18;\r\n\r\n    /* This mapping contains the status of tokenAddresses who are not under our control like those which we cannot burn or mint*/\r\n    mapping(address=>bool) public noControl;\r\n    mapping(address=>uint256) public tokenFundThreshold;\r\n    \r\n\r\n    // This generates a public event of coin received by contract\r\n    event CoinIn(uint256 indexed orderID, address indexed user, uint256 value, address outputCurrency);\r\n    event CoinOut(uint256 indexed orderID, address indexed user, uint256 value);\r\n    event CoinOutFailed(uint256 indexed orderID, address indexed user, uint256 value);\r\n    event TokenIn(uint256 indexed orderID, address indexed tokenAddress, address indexed user, uint256 value, uint256 chainID, address outputCurrency);\r\n    event TokenOut(uint256 indexed orderID, address indexed tokenAddress, address indexed user, uint256 value, uint256 chainID);\r\n    event TokenOutFailed(uint256 indexed orderID, address indexed tokenAddress, address indexed user, uint256 value, uint256 chainID);\r\n    event minMaxTxUpdated(uint256 minTx, uint256 maxTx);\r\n    event transferTaxUpdated(uint256 transferTax);\r\n\r\n   \r\n\r\n    \r\n    receive () external payable {\r\n        //nothing happens for incoming fund\r\n    }\r\n\r\n    constructor(){\r\n        noControl[0xdAC17F958D2ee523a2206206994597C13D831ec7] = true; /*USDT Ethereum*/\r\n        noControl[0x55d398326f99059fF775485246999027B3197955] = true; /*USDT Binance*/\r\n        noControl[0xc2132D05D31c914a87C6611C10748AEb04B58e8F] = true; /*USDT Matic*/\r\n\r\n        tokenFundThreshold[0xdAC17F958D2ee523a2206206994597C13D831ec7] = 100e6; /*USDT Ethereum*/\r\n        tokenFundThreshold[0x55d398326f99059fF775485246999027B3197955] = 100e18; /*USDT Binance*/\r\n        tokenFundThreshold[0xc2132D05D31c914a87C6611C10748AEb04B58e8F] = 100e6; /*USDT Matic*/\r\n    }\r\n    \r\n    function coinIn(address outputCurrency) external payable returns(bool){\r\n        orderID++;\r\n        uint256 amount = msg.value;\r\n        uint256 afterTax;\r\n        uint256 tax;\r\n\r\n        (afterTax,tax) = processTax(amount);\r\n        payable(feeWallet).transfer(tax);\r\n\r\n        if(address(this).balance >= reserveFundThreshold){\r\n            payable(reserveWallet).transfer(afterTax);\r\n        }\r\n\r\n        emit CoinIn(orderID, msg.sender, afterTax, outputCurrency);\r\n        return true;\r\n    }\r\n    \r\n    function coinOut(address user, uint256 amount, uint256 _orderID) external onlySigner returns(bool){\r\n            payable(user).transfer(amount);\r\n            emit CoinOut(_orderID, user, amount);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function tokenIn(address tokenAddress, uint256 tokenAmount, uint256 chainID, address outputCurrency) external returns(bool){\r\n        orderID++;\r\n        uint256 burnt;\r\n        uint256 tax;\r\n        uint256 afterTax;\r\n        (afterTax, tax) = processTax(tokenAmount);\r\n\r\n        if(noControl[tokenAddress]){\r\n            if(tokenAddress == usdtAddress){\r\n                usdtContract(tokenAddress).transferFrom(msg.sender, address(this), tokenAmount);\r\n                usdtContract(tokenAddress).transfer(feeWallet, tax);\r\n                if(usdtContract(tokenAddress).balanceOf(address(this)) >= tokenFundThreshold[tokenAddress]){\r\n                    usdtContract(tokenAddress).transfer(owner, afterTax);\r\n                }\r\n                \r\n            }else{\r\n                ERC20Essential(tokenAddress).transferFrom(msg.sender, address(this), tokenAmount);\r\n                ERC20Essential(tokenAddress).transfer(feeWallet, tax);\r\n                if(usdtContract(tokenAddress).balanceOf(address(this)) >= tokenFundThreshold[tokenAddress]){\r\n                    ERC20Essential(tokenAddress).transfer(owner, afterTax);\r\n                }\r\n            }\r\n        }else{\r\n            require(afterTax >= minTx, \"Minimum amount is required\");\r\n            require(afterTax <= maxTx, \"Exceeds max amount\");\r\n            ERC20Essential(tokenAddress).transferFrom(msg.sender, address(this), tokenAmount);\r\n            ERC20Essential(tokenAddress).transfer(feeWallet, tax);\r\n            burnt = burnTokens(tokenAddress, afterTax);\r\n        }\r\n\r\n        emit TokenIn(orderID, tokenAddress, msg.sender, afterTax, chainID, outputCurrency);\r\n        return true;\r\n    }\r\n    \r\n    \r\n    function tokenOut(address tokenAddress, address user, uint256 tokenAmount, uint256 _orderID, uint256 chainID) external onlySigner returns(bool){\r\n        uint256 minted = tokenAmount;\r\n            if(noControl[tokenAddress]){\r\n                if(tokenAddress == usdtAddress){\r\n                    usdtContract(tokenAddress).transfer(user, tokenAmount);\r\n                }else{\r\n                    ERC20Essential(tokenAddress).transfer(user, tokenAmount);\r\n                }\r\n                \r\n            }else{\r\n                (minted,) = mintTokens(tokenAddress, user, tokenAmount);\r\n            }\r\n            \r\n            emit TokenOut(_orderID, tokenAddress, user, minted, chainID);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /* Process Tax*/\r\n    function processTax(uint256 amount) public view returns(uint256 afterTax, uint256 deductedTax){\r\n        deductedTax = (transferTax * amount)/1e4;   /* 0% of amount*/\r\n        afterTax = amount - deductedTax;\r\n    }\r\n\r\n    /*\r\n    * Mint tokens\r\n    */\r\n    function mintTokens(address tokenAddress, address userAddress, uint256 amountToMint) internal returns(uint256 minted, address toAddress){\r\n        ERC20Essential(tokenAddress).mint(userAddress, amountToMint);\r\n\r\n        minted = amountToMint;\r\n        toAddress = userAddress;\r\n    }\r\n\r\n    /*\r\n    * Burn Tokens\r\n    */\r\n    function burnTokens(address tokenAddress, uint256 amount) internal returns(uint256 burnt){\r\n        ERC20Essential(tokenAddress).burn(address(this), amount);\r\n        burnt = amount;\r\n    }\r\n\r\n    /*Change feeWallet*/\r\n    function setFeeWallet(address _feeWallet) external onlyOwner returns(address oldWallet, address newWallet){\r\n        oldWallet = feeWallet;\r\n        feeWallet = _feeWallet;\r\n        newWallet = feeWallet;\r\n    }\r\n\r\n    /*Change reserveWallet*/\r\n    function setReserveWallet(address _reserveWallet) external onlyOwner returns(address oldWallet, address newWallet){\r\n        oldWallet = reserveWallet;\r\n        reserveWallet = _reserveWallet;\r\n        newWallet = reserveWallet;\r\n    }\r\n\r\n    /* set usdt token address*/\r\n    function setUSDTAddress(address _tokenAddress) external onlyOwner returns(address newAddress){\r\n        require(_tokenAddress != address(0), \"zero address not allowed\");\r\n        require(_tokenAddress != usdtAddress, \"same as old address\");\r\n        usdtAddress = _tokenAddress;\r\n        newAddress = usdtAddress;\r\n    }\r\n\r\n    /* set Threshold*/\r\n    function setFundThreshold(uint256 _amount) external onlyOwner returns(uint256 oldAmount, uint256 newAmount){\r\n        oldAmount = reserveFundThreshold;\r\n        reserveFundThreshold = _amount;\r\n        newAmount = _amount;\r\n    }\r\n\r\n    /* Change owner of the given token contract*/\r\n    function transferTokenOwnership(address ofTokenAddress, address toAddress) external onlyOwner returns(address oldOwner, address newOwner){\r\n        require(ofTokenAddress != address(0) && toAddress != address(0), \"zero address not allowed\");\r\n        oldOwner = ERC20Essential(ofTokenAddress).owner();\r\n        ERC20Essential(ofTokenAddress).transferOwnership(toAddress);\r\n        newOwner = ERC20Essential(ofTokenAddress).owner();\r\n    }\r\n\r\n    /*Add noControl tokens i.e, the token on which you dont have burning and minting capabilities\r\n    * Set the status to true if you cannot mint or burn \r\n    * Set the status to false if you can mint or burn*/\r\n    function setNoControl(address tokenAddress, bool status) external onlyOwner{\r\n        require(tokenAddress != address(0), \"cannot set zero address\");\r\n        noControl[tokenAddress] = status;\r\n    }\r\n\r\n    /* Modify the token reserve threshold values\r\n    */\r\n    function setTokenReserveThreshold(address forToken, uint256 threshold) external onlyOwner{\r\n        tokenFundThreshold[forToken] = threshold;\r\n    }\r\n\r\n     /* Modify the transfer tax\r\n    */\r\n    function setTransferTax(uint256 _transferTax) external onlyOwner{\r\n        require(_transferTax < 1000, \"Cannot set transfer tax to 100%\");\r\n        transferTax = _transferTax;\r\n        emit transferTaxUpdated(transferTax);\r\n    }\r\n\r\n    /**\r\n     * @notice Changes the minimum and maximum amount of tokens that can be bridge in a single transaction\r\n     * @dev onlyOwner.\r\n     * Emits an {minMaxTxUpdated} event\r\n     * @param newMinTx, newMaxTx Base 1000, so 1% = 1\r\n     */\r\n    function updateMinMaxTx(uint256 newMinTx, uint256 newMaxTx) external onlyOwner {\r\n        minTx = newMinTx;\r\n        maxTx = newMaxTx;\r\n        emit minMaxTxUpdated(minTx, maxTx);\r\n    }\r\n\r\n    /**\r\n     * @notice  Information about the minimun and maximum transaction values\r\n     * @return  _minTx  The minimum amount of tokens that can be bridge\r\n     * @return  _maxTx  The maximum amount of tokens that can be bridge\r\n     */\r\n    function getMinMaxTxValues()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _minTx,\r\n            uint256 _maxTx\r\n        )\r\n    {\r\n        _minTx = minTx;\r\n        _maxTx = maxTx;\r\n    }\r\n\r\n    /**\r\n     * @notice  Information about the transfer tax\r\n     * @return  _transferTax  The transfer tax\r\n     */\r\n    function getTransferTax()\r\n        external\r\n        view\r\n        returns (\r\n            uint256 _transferTax\r\n        )\r\n    {\r\n        _transferTax = transferTax;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"CoinIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CoinOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"CoinOutFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"SignerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"TokenIn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"TokenOut\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"orderID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"TokenOutFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minTx\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"maxTx\",\"type\":\"uint256\"}],\"name\":\"minMaxTxUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"transferTax\",\"type\":\"uint256\"}],\"name\":\"transferTaxUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signer\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"changeSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"coinIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"}],\"name\":\"coinOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exraCoinRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinMaxTxValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTx\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTransferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"noControl\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"orderID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"processTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"afterTax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deductedTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFundThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeWallet\",\"type\":\"address\"}],\"name\":\"setFeeWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setFundThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"oldAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setNoControl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveWallet\",\"type\":\"address\"}],\"name\":\"setReserveWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setTokenReserveThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferTax\",\"type\":\"uint256\"}],\"name\":\"setTransferTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"setUSDTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"signer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenFundThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"outputCurrency\",\"type\":\"address\"}],\"name\":\"tokenIn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_orderID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"}],\"name\":\"tokenOut\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ofTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"}],\"name\":\"transferTokenOwnership\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"oldOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinTx\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newMaxTx\",\"type\":\"uint256\"}],\"name\":\"updateMinMaxTx\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdtAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Bridge", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://909d54c5e3111cdad8d6eab2cf5dd502e561ad445b3bea116511094adfb1d560"}