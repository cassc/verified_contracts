{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/storage/IStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IStorage\\n * @notice Interface for Storage\\n */\\ninterface IStorage {\\n\\n    /**\\n     * @notice Sets lock for a vault contract.\\n     * @param _vault - The target vault.\\n     */\\n    function lock(address _vault) external;\\n\\n    /**\\n     * @notice Unlocks a vault contract.\\n     * @param _vault - The target vault.\\n     */\\n    function unlock(address _vault) external;\\n\\n    /**\\n     * @notice Lets an authorised module add a guardian to a vault.\\n     * @param _vault - The target vault.\\n     * @param _guardian - The guardian to add.\\n     */\\n    function setHumanGuardian(address _vault, address _guardian) external;\\n\\n    /**\\n     * @notice Sets a new time delay for a vault contract.\\n     * @param _vault - The target vault.\\n     * @param _newTimeDelay - The new time delay.\\n     */\\n    function setTimeDelay(address _vault, uint256 _newTimeDelay) external;\\n\\n    /**\\n     * @notice Function to be used to add trustee address to bequeath vault ownership.\\n     * @param _vault - The target vault.\\n     * @param _newTrustee - New address for trustee.\\n     */\\n    function setTrustee(address _vault, address _newTrustee) external;\\n\\n    /**\\n     * @notice Function to set the kbg for a vault.\\n     * @param _vault - The target vault.\\n     * @param _kbg - Address of kbg.\\n     */\\n    function setKbg(address _vault, address _kbg) external;\\n\\n    /**\\n     * @notice Function to enable or disable a vault.\\n     * @param _vault - The target vault.\\n     */\\n    function enable(address _vault, address _kbg) external;\\n\\n    /**\\n     * @notice Function to disable a vault.\\n     * @param _vault - The target vault.\\n     */\\n    function disable(address _vault) external;\\n\\n    /**\\n     * @notice Function to reset the vault.\\n     * @param _vault - The target vault.\\n     */\\n    function reset(address _vault) external;\\n\\n    /**\\n     * @notice Returns boolean indicating state of the vault.\\n     * @param _vault - The target vault.\\n     * @return true if the vault is locked, else returns false.\\n     */\\n    function isLocked(address _vault) external view returns(bool);\\n\\n    /**\\n     * @notice Returns kbg address of the vault.\\n     * @param _vault - The target vault.\\n     * @return kbg address of the vault.\\n     */\\n    function getKbg(address _vault) external view returns(address);\\n\\n    /**\\n     * @notice Returns human guardian address of the vault.\\n     * @param _vault - The target vault.\\n     */\\n    function getHumanGuardian(address _vault) external view returns(address);\\n\\n    /**\\n     * @notice Returns the trustee address for a vault.\\n     * @param _vault - The target vault.\\n     */\\n    function getTrustee(address _vault) external view returns(address);\\n\\n    /**\\n     * @notice Checks if an address is kbg for a vault.\\n     * @param _vault - The target vault.\\n     * @param _kbg - The account address to be checked.\\n     * @return true if `_kbg` is kbg for `_vault`.\\n     */\\n    function isKbg(address _vault, address _kbg) external view returns(bool);\\n\\n    /**\\n     * @notice Checks if an address is a guardian for a vault.\\n     * @param _vault - The target vault.\\n     * @param _guardian - The account address to be checked.\\n     * @return true if `_guardian` is human guardian for `_vault`.\\n     */\\n    function isHumanGuardian(address _vault, address _guardian) external view returns(bool);\\n\\n    /**\\n     * @notice Checks if an address is an trustee for a vault.\\n     * @param _vault - The target vault.\\n     * @param _trustee - The account address to be checked.\\n     * return true if `_trustee` is the trustee for `_vault`.\\n     */\\n    function isTrustee(address _vault, address _trustee) external view returns(bool);\\n\\n    /**\\n     * @notice Returns if a vault is disabled.\\n     * @param _vault - The target vault.\\n     * return true if the vault is disabled else return false.\\n     */\\n    function isDisabled(address _vault) external view returns(bool);\\n\\n    /**\\n     * @notice Returns uint256 time delay in seconds for a vault\\n     * @param _vault - The target vault.\\n     * @return uint256 time delay in seconds for a vault.\\n     */\\n    function getTimeDelay(address _vault) external view returns(uint256);\\n\\n    /**\\n     * @notice Returns if a vault has human guardian.\\n     * @param _vault - The target vault.\\n     * @return true if `_vault` has human guardian else false.\\n     */\\n    function hasHumanGuardian(address _vault) external view returns(bool);\\n}\"\r\n    },\r\n    \"contracts/storage/Storage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {IVault} from \\\"../vault/IVault.sol\\\";\\nimport {IStorage} from \\\"./IStorage.sol\\\";\\n\\n/**\\n * @title Storage\\n * @notice Base contract for the storage of a vault.\\n */\\ncontract Storage is IStorage{\\n\\n    address constant ZERO_ADDRESS = address(0);\\n    uint256 constant DEFAULT_TD = 8 hours;\\n\\n    struct StorageConfig {\\n        uint256 timeDelay; // time delay in seconds which has to be expired to executed queued requests.\\n        address trustee; // address of the trustee to bequeath.\\n        address kbg; // address of the default guardian (vault owner and kresus bootstrap guardian).\\n        address humanGuardian; // group address for all the human guardians.\\n        bool locked; // true if vault is locked else false.\\n        bool disabled; // true if vault is disabled, else false.\\n    }\\n    \\n    // Vault specific storage\\n    mapping (address => StorageConfig) private vaultStorage;\\n\\n    /**\\n     * @notice Throws if the caller is not an authorised module.\\n     */\\n    modifier onlyModule(address _vault) {\\n        require(\\n            IVault(_vault).authorised(msg.sender),\\n            \\\"S: must be an authorized module to call this method\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function lock(\\n        address _vault\\n    ) external onlyModule(_vault) {\\n        vaultStorage[_vault].locked = true;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function unlock(\\n        address _vault\\n    ) external onlyModule(_vault) {\\n        _reset(_vault);\\n        vaultStorage[_vault].locked = false;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function setHumanGuardian(\\n        address _vault,\\n        address _guardian\\n    )\\n        external\\n        onlyModule(_vault)\\n    {\\n        vaultStorage[_vault].humanGuardian = _guardian;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function setTimeDelay(\\n        address _vault,\\n        uint256 _newTimeDelay\\n    )\\n        external\\n        onlyModule(_vault)\\n    {\\n        vaultStorage[_vault].timeDelay = _newTimeDelay;\\n    }\\n    \\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function setTrustee(\\n        address _vault,\\n        address _trustee\\n    )\\n        external\\n        onlyModule(_vault)\\n    {\\n        vaultStorage[_vault].trustee = _trustee;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function setKbg(\\n        address _vault,\\n        address _kbg\\n    )\\n        external\\n        onlyModule(_vault)\\n    {\\n        vaultStorage[_vault].kbg = _kbg;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function enable(address _vault, address _kbg) external onlyModule(_vault) {\\n        StorageConfig storage s = vaultStorage[_vault];\\n        s.disabled = false;\\n        s.kbg = _kbg;\\n        s.timeDelay = DEFAULT_TD;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function disable(address _vault) external onlyModule(_vault) {\\n        StorageConfig storage s = vaultStorage[_vault];\\n        s.locked = false;\\n        s.disabled = true;\\n        s.humanGuardian = ZERO_ADDRESS;\\n        s.timeDelay = 0;\\n        s.kbg = IVault(_vault).owner();\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function reset(\\n        address _vault\\n    )\\n        external\\n        onlyModule(_vault)\\n    {\\n        _reset(_vault);\\n    }\\n\\n    /**\\n     * @notice Function which sets the time dealy, human guardian and trustee to default vaules.\\n     * @param _vault - Target vault.\\n     */\\n    function _reset(\\n        address _vault\\n    )\\n        internal\\n    {\\n        StorageConfig storage s = vaultStorage[_vault];\\n        s.trustee = ZERO_ADDRESS;\\n        s.humanGuardian = ZERO_ADDRESS;\\n        s.timeDelay = DEFAULT_TD;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function isLocked(\\n        address _vault\\n    ) \\n        external\\n        view\\n        returns (bool)\\n    {\\n        return vaultStorage[_vault].locked;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function getKbg(\\n        address _vault\\n    )\\n        external\\n        view\\n        returns (address)\\n    {\\n        return vaultStorage[_vault].kbg;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function getHumanGuardian(\\n        address _vault\\n    )\\n        external\\n        view\\n        returns (address)\\n    {\\n        return vaultStorage[_vault].humanGuardian;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function getTrustee(\\n        address _vault\\n    )\\n        external\\n        view\\n        returns(address)\\n    {\\n        return vaultStorage[_vault].trustee;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function isKbg(\\n        address _vault,\\n        address _guardian\\n    )\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return (vaultStorage[_vault].kbg == _guardian);\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function isHumanGuardian(\\n        address _vault,\\n        address _guardian\\n    )\\n        external\\n        view\\n        returns(bool)\\n    {\\n        return vaultStorage[_vault].humanGuardian == _guardian;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function isTrustee(\\n        address _vault,\\n        address _trustee\\n    )\\n        external\\n        view\\n        returns(bool)\\n    {\\n        return vaultStorage[_vault].trustee == _trustee;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function isDisabled(\\n        address _vault\\n    )\\n        external\\n        view\\n        returns(bool)\\n    {\\n        return vaultStorage[_vault].disabled;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function getTimeDelay(\\n        address _vault\\n    )\\n        external\\n        view\\n        returns(uint256)\\n    {\\n        return vaultStorage[_vault].timeDelay;\\n    }\\n\\n    /**\\n     * @inheritdoc IStorage\\n     */\\n    function hasHumanGuardian(address _vault) external view returns(bool) {\\n        return vaultStorage[_vault].humanGuardian != ZERO_ADDRESS;\\n    }\\n}\"\r\n    },\r\n    \"contracts/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\n/**\\n * @title IVault\\n * @notice Interface for the BaseVault\\n */\\ninterface IVault {\\n\\n    /**\\n     * @notice Enables/Disables a module.\\n     * @param _module The target module.\\n     * @param _value Set to `true` to authorise the module.\\n     */\\n    function authoriseModule(address _module, bool _value, bytes memory _initData) external;\\n\\n    /**\\n     * @notice Enables a static method by specifying the target module to which the call must be delegated.\\n     * @param _module The target module.\\n     */\\n    function enableStaticCall(address _module) external;\\n\\n\\n    /**\\n     * @notice Inits the vault by setting the owner and authorising a list of modules.\\n     * @param _owner The owner.\\n     * @param _initData bytes32 initialization data specific to the module.\\n     * @param _modules The modules to authorise.\\n     */\\n    function init(address _owner, address[] calldata _modules, bytes[] calldata _initData) external;\\n\\n    /**\\n     * @notice Sets a new owner for the vault.\\n     * @param _newOwner The new owner.\\n     */\\n    function setOwner(address _newOwner) external;\\n\\n    /**\\n     * @notice Returns the vault owner.\\n     * @return The vault owner address.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @notice Returns the number of authorised modules.\\n     * @return The number of authorised modules.\\n     */\\n    function modules() external view returns (uint256);\\n\\n    /**\\n     * @notice Checks if a module is authorised on the vault.\\n     * @param _module The module address to check.\\n     * @return `true` if the module is authorised, otherwise `false`.\\n     */\\n    function authorised(address _module) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the module responsible, if static call is enabled for `_sig`, otherwise return zero address.\\n     * @param _sig The signature of the static call.\\n     * @return the module doing the redirection or zero address\\n     */\\n    function enabled(bytes4 _sig) external view returns (address);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kbg\",\"type\":\"address\"}],\"name\":\"enable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getHumanGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getKbg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTimeDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getTrustee\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"hasHumanGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"isDisabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"isHumanGuardian\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"isKbg\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"isTrustee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setHumanGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_kbg\",\"type\":\"address\"}],\"name\":\"setKbg\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_newTimeDelay\",\"type\":\"uint256\"}],\"name\":\"setTimeDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"setTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Storage", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}