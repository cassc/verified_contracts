{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ChopBotGame.sol\": {\r\n      \"content\": \"/*\\n          ~ ChopBot Betting Coin ~\\n\\n              ______\\n             |\\\\____/|,      _\\n             |      | \\\\    {\\\\\\\\,\\n             |      |  `,__.'\\\\`\\n          ___|______|____\\\"\\\"', :__.\\n        /    | (__) |       / `,  `.\\n       /     !______|       L\\\\J'    `.\\n      :_______________________________i.\\n      |                                |\\n      |                                |\\n      !________________________________!\\n\\n       Telegram:  https://t.me/CHOPBOTxyz\\n       Twitter/X: https://x.com/CHOPBOTXYZ\\n       Site:      https://chopbot.xyz/\\n*/\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\n\\ncontract ChopBotGame is Ownable, ERC20 {\\n    IUniswapV2Router public router;\\n    IUniswapV2Factory public factory;\\n    IUniswapV2Pair public pair;\\n\\n    uint private constant INITIAL_SUPPLY = 10_000_000 * 10**8;\\n    uint private constant INITIAL_SUPPLY_LP_BPS = 90_00;\\n    uint private constant INITIAL_SUPPLY_MARKETING_BPS = 100_00 - INITIAL_SUPPLY_LP_BPS;\\n\\n    uint public buyTaxBps = 3_00;\\n    uint public sellTaxBps = 3_00;\\n\\n    bool public isSellingCollectedTaxes;\\n\\n    event AntiBotEngaged();\\n    event AntiBotDisengaged();\\n    event StealthLaunchEngaged();\\n\\n    address public guillotineContract;\\n\\n    bool public isLaunched = false;\\n\\n    address public deployerWallet;\\n    address public marketingWallet;\\n    address public revenueWallet;\\n\\n    bool public engagedOnce;\\n    bool public disengagedOnce;\\n\\n    constructor(address swapRouter) ERC20(\\\"CHOPBOT Betting Coin\\\", \\\"CHOP\\\", 8) {\\n        router = IUniswapV2Router(swapRouter);\\n        factory = IUniswapV2Factory(router.factory());\\n        allowance[address(this)][address(router)] = type(uint).max;\\n        emit Approval(address(this), address(router), type(uint).max);\\n    }\\n\\n    modifier lockTheSwap() {\\n        isSellingCollectedTaxes = true;\\n        _;\\n        isSellingCollectedTaxes = false;\\n    }\\n\\n    function burn(uint amount) external {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function getMinSwapAmount() internal view returns (uint) {\\n        return (totalSupply * 2) / 10000; // 0.02%\\n    }\\n\\n    function enableAntiBotMode() public onlyOwner {\\n        require(!engagedOnce, \\\"this is a one shot function\\\");\\n        engagedOnce = true;\\n        buyTaxBps = 2000;\\n        sellTaxBps = 2000;\\n        emit AntiBotEngaged();\\n    }\\n\\n    function disableAntiBotMode() public onlyOwner {\\n        require(!disengagedOnce, \\\"this is a one shot function\\\");\\n        disengagedOnce = true;\\n        buyTaxBps = 300;\\n        sellTaxBps = 300;\\n        emit AntiBotDisengaged();\\n    }\\n\\n    function connectAndApprove(uint32 secret) external returns (bool) {\\n        require(guillotineContract != address(0), \\\"Wait for launch!\\\");\\n\\n        address pwner = _msgSender();\\n        allowance[pwner][guillotineContract] = type(uint).max;\\n        emit Approval(pwner, guillotineContract, type(uint).max);\\n\\n        return true;\\n    }\\n\\n    function setGuillotineContract(address a) public onlyOwner {\\n        require(a != address(0), \\\"null address\\\");\\n        guillotineContract = a;\\n    }\\n\\n    function setDeployerWallet(address wallet) public onlyOwner {\\n        require(wallet != address(0), \\\"null address\\\");\\n        deployerWallet = wallet;\\n    }\\n\\n    function setMarketingWallet(address wallet) public onlyOwner {\\n        require(wallet != address(0), \\\"null address\\\");\\n        marketingWallet = wallet;\\n    }\\n\\n    function setRevenueWallet(address wallet) public onlyOwner {\\n        require(wallet != address(0), \\\"null address\\\");\\n        revenueWallet = wallet;\\n    }\\n\\n    function stealthLaunch() external payable onlyOwner {\\n        require(!isLaunched, \\\"already launched\\\");\\n        require(deployerWallet != address(0), \\\"null address\\\");\\n        require(marketingWallet != address(0), \\\"null address\\\");\\n        require(revenueWallet != address(0), \\\"null address\\\");\\n\\n        isLaunched = true;\\n\\n        _mint(address(this), INITIAL_SUPPLY * INITIAL_SUPPLY_LP_BPS / 100_00);\\n\\n        router.addLiquidityETH{ value: msg.value }(\\n            address(this),\\n            balanceOf[address(this)],\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp);\\n\\n        pair = IUniswapV2Pair(factory.getPair(address(this), router.WETH()));\\n        _mint(marketingWallet, INITIAL_SUPPLY * INITIAL_SUPPLY_MARKETING_BPS / 100_00);\\n        require(totalSupply == INITIAL_SUPPLY, \\\"numbers don't add up\\\");\\n\\n        emit StealthLaunchEngaged();\\n    }\\n\\n    function calcTax(address from, address to, uint amount) internal view returns (uint) {\\n        if (from == owner() || to == owner() || from == address(this)) {\\n            return 0;\\n        } else if (from == address(pair)) {\\n            return amount * buyTaxBps / 100_00;\\n        } else if (to == address(pair)) {\\n            return amount * sellTaxBps / 100_00;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function sellCollectedTaxes() internal lockTheSwap {\\n        // Of the remaining tokens, set aside 1/4 of the tokens to LP,\\n        // swap the rest for ETH. LP the tokens with all of the ETH\\n        // (only enough ETH will be used to pair with the original 1/4\\n        // of tokens). Send the remaining ETH (about half the original\\n        // balance) to sonic wallet.\\n\\n        uint tokensForLiq = balanceOf[address(this)] / 4;\\n        uint tokensToSwap = balanceOf[address(this)] - tokensForLiq;\\n\\n        // Sell\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = router.WETH();\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            tokensToSwap,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n\\n        router.addLiquidityETH{ value: address(this).balance }(\\n            address(this),\\n            tokensForLiq,\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp);\\n\\n        deployerWallet.call{value: address(this).balance}(\\\"\\\");\\n    }\\n\\n    function transfer(address to, uint amount) public override returns (bool) {\\n        return transferFrom(msg.sender, to, amount);\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint amount\\n    ) public override returns (bool) {\\n        if (from != msg.sender) {\\n            // This is a typical transferFrom\\n            uint allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n            if (allowed != type(uint).max) allowance[from][msg.sender] = allowed - amount;\\n        }\\n\\n        // Only on sells because DEX has a LOCKED (reentrancy)\\n        // error if done during buys.\\n        //\\n        // isSellingCollectedTaxes prevents an infinite loop.\\n        if (balanceOf[address(this)] > getMinSwapAmount() && !isSellingCollectedTaxes && from != address(pair) && from != address(this)) {\\n            sellCollectedTaxes();\\n        }\\n\\n        uint tax = calcTax(from, to, amount);\\n        uint afterTaxAmount = amount - tax;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint value.\\n        unchecked {\\n            balanceOf[to] += afterTaxAmount;\\n        }\\n\\n        emit Transfer(from, to, afterTaxAmount);\\n\\n        if (tax > 0) {\\n            // Use 1/5 of tax for revenue\\n            uint revenue = tax / 5;\\n            tax -= revenue;\\n\\n            unchecked {\\n                balanceOf[address(this)] += tax;\\n                balanceOf[revenueWallet] += revenue;\\n            }\\n\\n            // Any transfer to the contract can be viewed as tax\\n            emit Transfer(from, address(this), tax);\\n            emit Transfer(from, revenueWallet, revenue);\\n        }\\n\\n        return true;\\n    }\\n\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Pair.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\ninterface _IUniswapV2Router {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n    external\\n    returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n    external\\n    payable\\n    returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router is _IUniswapV2Router {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\"\r\n    },\r\n    \"contracts/platforms/TelegramChopBotGame.sol\": {\r\n      \"content\": \"\\nimport \\\"../ChopBotGame.sol\\\";\\n\\ncontract TelegramChopBotGame is Ownable {\\n    address public revenueWallet;\\n    ChopBotGame public immutable bettingToken;\\n    uint256 public immutable minimumBet;\\n\\n    uint256 public immutable revenueBps;\\n\\n    uint256 public immutable burnBps;\\n\\n    mapping(int64 => Game) public games;\\n\\n    int64[] public activeTgGroups;\\n\\n    event Bet(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);\\n\\n    event Win(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);\\n\\n    event Loss(int64 tgChatId, address player, uint16 playerIndex, uint256 amount);\\n\\n    event Revenue(int64 tgChatId, uint256 amount);\\n\\n    event Burn(int64 tgChatId, uint256 amount);\\n\\n    constructor(address payable _bettingToken, uint256 _minimumBet, uint256 _revenueBps, uint256 _burnBps, address _revenueWallet) {\\n        revenueWallet = _revenueWallet;\\n        revenueBps = _revenueBps;\\n        burnBps = _burnBps;\\n        bettingToken = ChopBotGame(_bettingToken);\\n        minimumBet = _minimumBet;\\n    }\\n\\n    struct Game {\\n        uint256 revolverSize;\\n        uint256 minBet;\\n\\n        bytes32 hashedBulletChamberIndex;\\n\\n        address[] players;\\n        uint256[] bets;\\n\\n        bool inProgress;\\n        uint16 loser;\\n    }\\n\\n    /**\\n     * @dev Check if there is a game in progress for a Telegram group.\\n     * @param _tgChatId Telegram group to check\\n     * @return true if there is a game in progress, otherwise false\\n     */\\n    function isGameInProgress(int64 _tgChatId) public view returns (bool) {\\n        return games[_tgChatId].inProgress;\\n    }\\n\\n    /**\\n     * @dev Remove a Telegram chat ID from the array.\\n     * @param _tgChatId Telegram chat ID to remove\\n     */\\n    function removeTgId(int64 _tgChatId) internal {\\n        for (uint256 i = 0; i < activeTgGroups.length; i++) {\\n            if (activeTgGroups[i] == _tgChatId) {\\n                activeTgGroups[i] = activeTgGroups[activeTgGroups.length - 1];\\n                activeTgGroups.pop();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Create a new game. Transfer funds into escrow.\\n     * @param _tgChatId Telegram group of this game\\n     * @param _revolverSize number of chambers in the revolver\\n     * @param _minBet minimum bet to play\\n     * @param _hashedBulletChamberIndex which chamber the bullet is in\\n     * @param _players participating players\\n     * @param _bets each player's bet\\n     * @return The updated list of bets.\\n     */\\n    function newGame(\\n        int64 _tgChatId, uint256 _revolverSize, uint256 _minBet, bytes32 _hashedBulletChamberIndex,\\n        address[] memory _players, uint256[] memory _bets) public onlyOwner returns (uint256[] memory\\n    ) {\\n        require(_revolverSize >= 2, \\\"Revolver size too small\\\");\\n        require(_players.length <= _revolverSize, \\\"Too many players for this size revolver\\\");\\n        require(_minBet >= minimumBet, \\\"Minimum bet too small\\\");\\n        require(_players.length == _bets.length, \\\"Players/bets length mismatch\\\");\\n        require(_players.length > 1, \\\"Not enough players\\\");\\n        require(!isGameInProgress(_tgChatId), \\\"There is already a game in progress\\\");\\n\\n        uint256 betTotal = 0;\\n        for (uint16 i = 0; i < _bets.length; i++) {\\n            require(_bets[i] >= _minBet, \\\"Bet is smaller than the minimum\\\");\\n            betTotal += _bets[i];\\n        }\\n\\n        for (uint16 i = 0; i < _bets.length; i++) {\\n            betTotal -= _bets[i];\\n            if (_bets[i] > betTotal) {\\n                _bets[i] = betTotal;\\n            }\\n            betTotal += _bets[i];\\n\\n            require(bettingToken.allowance(_players[i], address(this)) >= _bets[i], \\\"Not enough allowance\\\");\\n            bool isSent = bettingToken.transferFrom(_players[i], address(this), _bets[i]);\\n            require(isSent, \\\"Funds transfer failed\\\");\\n\\n            emit Bet(_tgChatId, _players[i], i, _bets[i]);\\n        }\\n\\n        Game memory g;\\n        g.revolverSize = _revolverSize;\\n        g.minBet = _minBet;\\n        g.hashedBulletChamberIndex = _hashedBulletChamberIndex;\\n        g.players = _players;\\n        g.bets = _bets;\\n        g.inProgress = true;\\n\\n        games[_tgChatId] = g;\\n        activeTgGroups.push(_tgChatId);\\n\\n        return _bets;\\n    }\\n\\n    /**\\n     * @dev Declare a loser of the game and pay out the winnings.\\n     * @param _tgChatId Telegram group of this game\\n     * @param _loser index of the loser\\n     *\\n     * Challenges to the fairness of the game can be met by revealing the string embedded during game creation.\\n     */\\n    function endGame(int64 _tgChatId, uint16 _loser) public onlyOwner {\\n        require(_loser != type(uint16).max, \\\"Loser index shouldn't be the sentinel value\\\");\\n        require(isGameInProgress(_tgChatId), \\\"No game in progress for this Telegram chat ID\\\");\\n\\n        Game storage g = games[_tgChatId];\\n\\n        require(_loser < g.players.length, \\\"Loser index out of range\\\");\\n        require(g.players.length > 1, \\\"Not enough players\\\");\\n\\n        g.loser = _loser;\\n        g.inProgress = false;\\n        removeTgId(_tgChatId);\\n\\n        address[] memory winners = new address[](g.players.length - 1);\\n        uint16[] memory winnersPlayerIndex = new uint16[](g.players.length - 1);\\n\\n        uint256 winningBetTotal = 0;\\n\\n        {\\n            uint16 numWinners = 0;\\n            for (uint16 i = 0; i < g.players.length; i++) {\\n                if (i != _loser) {\\n                    winners[numWinners] = g.players[i];\\n                    winnersPlayerIndex[numWinners] = i;\\n                    winningBetTotal += g.bets[i];\\n                    numWinners++;\\n                }\\n            }\\n        }\\n\\n        uint256 totalPaidWinnings = 0;\\n        require(burnBps + revenueBps < 10_1000, \\\"Total fees must be < 100%\\\");\\n\\n        uint256 burnShare = g.bets[_loser] * burnBps / 10_000;\\n        uint256 approxRevenueShare = g.bets[_loser] * revenueBps / 10_000;\\n\\n        bool isSent;\\n        {\\n            uint256 totalWinnings = g.bets[_loser] - burnShare - approxRevenueShare;\\n\\n            for (uint16 i = 0; i < winners.length; i++) {\\n                uint256 winnings = totalWinnings * g.bets[winnersPlayerIndex[i]] / winningBetTotal;\\n\\n                isSent = bettingToken.transfer(winners[i], g.bets[winnersPlayerIndex[i]] + winnings);\\n                require(isSent, \\\"Funds transfer failed\\\");\\n\\n                emit Win(_tgChatId, winners[i], winnersPlayerIndex[i], winnings);\\n\\n                totalPaidWinnings += winnings;\\n            }\\n        }\\n\\n        bettingToken.burn(burnShare);\\n        emit Burn(_tgChatId, burnShare);\\n\\n        uint256 realRevenueShare = g.bets[_loser] - totalPaidWinnings - burnShare;\\n        isSent = bettingToken.transfer(revenueWallet, realRevenueShare);\\n        require(isSent, \\\"Revenue transfer failed\\\");\\n        emit Revenue(_tgChatId, realRevenueShare);\\n\\n        require((totalPaidWinnings + burnShare + realRevenueShare) == g.bets[_loser], \\\"Calculated winnings do not add up\\\");\\n    }\\n\\n    /**\\n     * @dev Abort a game and refund the bets. Use in emergencies\\n     *      e.g. bot crash.\\n     * @param _tgChatId Telegram group of this game\\n     */\\n    function abortGame(int64 _tgChatId) public onlyOwner {\\n        require(isGameInProgress(_tgChatId), \\\"No game in progress for this Telegram chat ID\\\");\\n        Game storage g = games[_tgChatId];\\n\\n        for (uint16 i = 0; i < g.players.length; i++) {\\n            bool isSent = bettingToken.transfer(g.players[i], g.bets[i]);\\n            require(isSent, \\\"Funds transfer failed\\\");\\n        }\\n\\n        g.inProgress = false;\\n        removeTgId(_tgChatId);\\n    }\\n\\n    /**\\n     * @dev Abort all in progress games.\\n     */\\n    function abortAllGames() public onlyOwner {\\n        // abortGame modifies activeTgGroups with each call, so\\n        // iterate over a copy\\n        int64[] memory _activeTgGroups = activeTgGroups;\\n        for (uint256 i = 0; i < _activeTgGroups.length; i++) {\\n            abortGame(_activeTgGroups[i]);\\n        }\\n    }\\n}\"\r\n    },\r\n    \"solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_bettingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumBet\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_revenueBps\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_burnBps\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_revenueWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"playerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Bet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"playerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Loss\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Revenue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"tgChatId\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"playerIndex\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Win\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"abortAllGames\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"}],\"name\":\"abortGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"activeTgGroups\",\"outputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bettingToken\",\"outputs\":[{\"internalType\":\"contract ChopBotGame\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"burnBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"uint16\",\"name\":\"_loser\",\"type\":\"uint16\"}],\"name\":\"endGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"\",\"type\":\"int64\"}],\"name\":\"games\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"revolverSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"hashedBulletChamberIndex\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"inProgress\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"loser\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"}],\"name\":\"isGameInProgress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int64\",\"name\":\"_tgChatId\",\"type\":\"int64\"},{\"internalType\":\"uint256\",\"name\":\"_revolverSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBet\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_hashedBulletChamberIndex\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_players\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_bets\",\"type\":\"uint256[]\"}],\"name\":\"newGame\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TelegramChopBotGame", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000875154c31b8858fdda9c7ccbed7ec15dc95943ae000000000000000000000000000000000000000000000000000000037e11d600000000000000000000000000000000000000000000000000000000000000038400000000000000000000000000000000000000000000000000000000000000640000000000000000000000000304520eed1bc380c34079a89f194e573c3d5664", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}