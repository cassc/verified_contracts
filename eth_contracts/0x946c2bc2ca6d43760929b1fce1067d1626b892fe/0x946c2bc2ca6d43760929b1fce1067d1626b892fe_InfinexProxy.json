{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"node_modules/@synthetixio/core-contracts/contracts/errors/AddressError.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\n/**\\n * @title Library for address related errors.\\n */\\nlibrary AddressError {\\n    /**\\n     * @dev Thrown when a zero address was passed as a function parameter (0x0000000000000000000000000000000000000000).\\n     */\\n    error ZeroAddress();\\n\\n    /**\\n     * @dev Thrown when an address representing a contract is expected, but no code is found at the address.\\n     * @param contr The address that was expected to be a contract.\\n     */\\n    error NotAContract(address contr);\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/proxy/AbstractProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nabstract contract AbstractProxy {\\n    fallback() external payable {\\n        _forward();\\n    }\\n\\n    receive() external payable {\\n        _forward();\\n    }\\n\\n    function _forward() internal {\\n        address implementation = _getImplementation();\\n\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    function _getImplementation() internal view virtual returns (address);\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/proxy/ProxyStorage.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\ncontract ProxyStorage {\\n    bytes32 private constant _SLOT_PROXY_STORAGE =\\n        keccak256(abi.encode(\\\"io.synthetix.core-contracts.Proxy\\\"));\\n\\n    struct ProxyStore {\\n        address implementation;\\n        bool simulatingUpgrade;\\n    }\\n\\n    function _proxyStore() internal pure returns (ProxyStore storage store) {\\n        bytes32 s = _SLOT_PROXY_STORAGE;\\n        assembly {\\n            store.slot := s\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/proxy/UUPSProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nimport \\\"./AbstractProxy.sol\\\";\\nimport \\\"./ProxyStorage.sol\\\";\\nimport \\\"../errors/AddressError.sol\\\";\\nimport \\\"../utils/AddressUtil.sol\\\";\\n\\ncontract UUPSProxy is AbstractProxy, ProxyStorage {\\n    constructor(address firstImplementation) {\\n        if (firstImplementation == address(0)) {\\n            revert AddressError.ZeroAddress();\\n        }\\n\\n        if (!AddressUtil.isContract(firstImplementation)) {\\n            revert AddressError.NotAContract(firstImplementation);\\n        }\\n\\n        _proxyStore().implementation = firstImplementation;\\n    }\\n\\n    function _getImplementation() internal view virtual override returns (address) {\\n        return _proxyStore().implementation;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@synthetixio/core-contracts/contracts/utils/AddressUtil.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity >=0.8.11 <0.9.0;\\n\\nlibrary AddressUtil {\\n    function isContract(address account) internal view returns (bool) {\\n        uint256 size;\\n\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n\\n        return size > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/proxy/InfinexProxy.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport { UUPSProxy } from \\\"@synthetixio/core-contracts/contracts/proxy/UUPSProxy.sol\\\";\\n\\n/**\\n * Synthetix V3 Core Proxy Contract\\n */\\ncontract InfinexProxy is UUPSProxy {\\n    // solhint-disable-next-line no-empty-blocks\\n    constructor(address firstImplementation) UUPSProxy(firstImplementation) { }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"@pythnetwork/entropy-sdk-solidity/=node_modules/@pythnetwork/entropy-sdk-solidity/\",\r\n      \"@synthetixio/core-contracts/=node_modules/@synthetixio/core-contracts/\",\r\n      \"@synthetixio/core-modules/=node_modules/@synthetixio/core-modules/\",\r\n      \"@synthetixio/main/=node_modules/@synthetixio/main/\",\r\n      \"@synthetixio/oracle-manager/=node_modules/@synthetixio/oracle-manager/\",\r\n      \"@synthetixio/perps-market/=node_modules/@synthetixio/perps-market/\",\r\n      \"@synthetixio/spot-market/=node_modules/@synthetixio/spot-market/\",\r\n      \"cannon-std/=lib/cannon-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"src/=src/\",\r\n      \"test/=test/\",\r\n      \"wormhole-circle-integration/=lib/wormhole-circle-integration/evm/src/\",\r\n      \"wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/src/\",\r\n      \"wormhole/=lib/wormhole-circle-integration/evm/src/\"\r\n    ],\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"firstImplementation\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"NotAContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddress\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "InfinexProxy", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000094097fbab10ed54bfcc42b8db2c88f958a453c84", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "1", "Implementation": "0xfeaba14957bec3d832dfc0bc9df13122c527ac0b", "SwarmSource": ""}