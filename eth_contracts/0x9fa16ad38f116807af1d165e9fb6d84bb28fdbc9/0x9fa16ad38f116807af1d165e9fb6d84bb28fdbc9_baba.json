{"SourceCode": "//SPDX-License-Identifier: MIT\r\n\r\n// WEB: https://www.babaerc.com\r\n// X: https://twitter.com/babacoineth\r\n// TELEGRAM: https://t.me/BabaErc\r\n\r\n\r\npragma solidity 0.8.20;\r\n\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\ninterface IERC20 {\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) external returns (bool);\r\n\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract ERC20 is Context, IERC20, IERC20Metadata {\r\n\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n\r\n    string private _symbol;\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n\r\n        _name = name_;\r\n\r\n        _symbol = symbol_;\r\n\r\n    }\r\n\r\n    function name() public view virtual override returns (string memory) {\r\n\r\n        return _name;\r\n\r\n    }\r\n\r\n    function symbol() public view virtual override returns (string memory) {\r\n\r\n        return _symbol;\r\n\r\n    }\r\n\r\n    function decimals() public view virtual override returns (uint8) {\r\n\r\n        return 18;\r\n\r\n    }\r\n\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n\r\n        return _totalSupply;\r\n\r\n    }\r\n\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n\r\n        return _balances[account];\r\n\r\n    }\r\n\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        _transfer(owner, to, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n\r\n        return _allowances[owner][spender];\r\n\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        _approve(owner, spender, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function transferFrom(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) public virtual override returns (bool) {\r\n\r\n        address spender = _msgSender();\r\n\r\n        _spendAllowance(from, spender, amount);\r\n\r\n        _transfer(from, to, amount);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n\r\n        address owner = _msgSender();\r\n\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\r\n        unchecked {\r\n\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n\r\n        }\r\n\r\n        return true;\r\n\r\n    }\r\n\r\n    function _transfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n\r\n        unchecked {\r\n\r\n            _balances[from] = fromBalance - amount;\r\n\r\n            _balances[to] += amount;\r\n\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n\r\n        unchecked {\r\n\r\n            _balances[account] += amount;\r\n\r\n        }\r\n\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n\r\n    }\r\n    function _approve(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n\r\n        emit Approval(owner, spender, amount);\r\n\r\n    }\r\n    function _spendAllowance(\r\n\r\n        address owner,\r\n\r\n        address spender,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {\r\n\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n\r\n        if (currentAllowance != type(uint256).max) {\r\n\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n\r\n            unchecked {\r\n\r\n                _approve(owner, spender, currentAllowance - amount);\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n    function _beforeTokenTransfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {}\r\n    function _afterTokenTransfer(\r\n\r\n        address from,\r\n\r\n        address to,\r\n\r\n        uint256 amount\r\n\r\n    ) internal virtual {}\r\n\r\n}\r\n\r\ninterface DexFactory {\r\n    function createPair(\r\n        address tokenA,\r\n        address tokenB\r\n    ) external returns (address pair);\r\n}\r\n\r\ninterface DexRouter {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n}\r\n\r\n\r\n\r\ncontract baba is ERC20, Ownable {\r\n    \r\n    mapping(address => bool) private excluded;\r\n\r\n    address treasuryWallet = 0x362c074fba4475571a71907bCafb5D2a7110bBF7;\r\n    address public devWallet = 0x5c55C8B8442102fd533ED047122Ce37eA47418B5;\r\n    DexRouter public immutable uniswapRouter;\r\n    address public immutable pairAddress;\r\n\r\n    bool public tradingEnabled = false;\r\n    bool public swapAndLiquifyEnabled = true;\r\n    bool public isSwapping = false;\r\n\r\n    uint256 public constant _totalSupply = 1000000 * 1e18;\r\n\r\n    struct taxes {\r\n    uint256 marketingTax;\r\n    }\r\n\r\n    taxes public transferTax = taxes(0);\r\n    taxes public buyTax = taxes(15);\r\n    taxes public sellTax = taxes(15);\r\n\r\n    uint256 public maxWallet = 2;\r\n    uint256 public swapTokensAtAmount = (_totalSupply * 5) / 1000;\r\n\r\n\r\n    event BuyFeesUpdated(uint256 indexed _trFee);\r\n    event SellFeesUpdated(uint256 indexed _trFee);\r\n    event devWalletChanged(address indexed _trWallet);\r\n    event SwapThresholdUpdated(uint256 indexed _newThreshold);\r\n    event InternalSwapStatusUpdated(bool indexed _status);\r\n    event Exclude(address indexed _target, bool indexed _status);\r\n    event MaxWalletChanged(uint256 percentage);\r\n\r\n    constructor() ERC20(\"baba\", \"BABA\") {\r\n\r\n\r\n       uniswapRouter = DexRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        pairAddress = DexFactory(uniswapRouter.factory()).createPair(\r\n            address(this),\r\n            uniswapRouter.WETH()\r\n        );\r\n\r\n        excluded[msg.sender] = true;\r\n        excluded[address(this)] = true; \r\n        excluded[address(treasuryWallet)] = true;\r\n        excluded[address(devWallet)] = true;\r\n        excluded[address(uniswapRouter)] = true;      \r\n        \r\n        _mint(msg.sender, _totalSupply);\r\n \r\n    }\r\n\r\n    function tradeEnable() external onlyOwner {\r\n        require(!tradingEnabled, \"Trading is already enabled\");\r\n        tradingEnabled = true;\r\n    }\r\n\r\n    function handleTaxes(\r\n        address _from,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        if (excluded[_from] || excluded[_to]) {\r\n            return _amount;\r\n        }\r\n\r\n        uint256 totalTax = transferTax.marketingTax;\r\n\r\n        if (_to == pairAddress) {\r\n            totalTax = sellTax.marketingTax;\r\n        } else if (_from == pairAddress) {\r\n            totalTax = buyTax.marketingTax;\r\n        }\r\n\r\n\r\n        uint256 tax = 0;\r\n        if (totalTax > 0) {\r\n            tax = (_amount * totalTax) / 100;\r\n            super._transfer(_from, address(this), tax);\r\n        }\r\n        return (_amount - tax);\r\n    }\r\n\r\n\r\n    function internalSwap() internal {\r\n        isSwapping = true;\r\n        uint256 taxAmount = balanceOf(address(this)); \r\n        if (taxAmount == 0) {\r\n            return;\r\n        }\r\n        swapToETH(balanceOf(address(this)));\r\n        uint256 marketingSwapAmount = (address(this).balance)/2;\r\n        uint256 treasurySwapAmount = (address(this).balance)/2;\r\n       payable(devWallet).transfer(marketingSwapAmount);\r\n       payable(treasuryWallet).transfer(treasurySwapAmount);\r\n        isSwapping = false;\r\n    }\r\n\r\n\r\n    function swapToETH(uint256 _amount) internal {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapRouter.WETH();\r\n        _approve(address(this), address(uniswapRouter), _amount);\r\n        uniswapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            _amount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function _transfer(\r\n    address _from,\r\n    address _to,\r\n    uint256 _amount\r\n) internal virtual override {\r\n    require(_from != address(0), \"transfer from address zero\");\r\n    require(_to != address(0), \"transfer to address zero\");\r\n    require(_amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n    // Calculate the maximum wallet amount based on the total supply and the maximum wallet percentage\r\n    uint256 maxWalletAmount = _totalSupply * maxWallet / 100;\r\n\r\n    // Check if the transaction is within the maximum wallet limit\r\n    if (!excluded[_from] && !excluded[_to] && _to != address(0) && _to != address(this) && _to != pairAddress) {\r\n        require(balanceOf(_to) + _amount <= maxWalletAmount, \"Exceeds maximum wallet amount\");\r\n    }\r\n\r\n    uint256 toTransfer = handleTaxes(_from, _to, _amount);\r\n\r\n    bool canSwap = balanceOf(address(this)) >= swapTokensAtAmount;\r\n    if (!excluded[_from] && !excluded[_to]) {\r\n        require(tradingEnabled, \"Trading not active\");\r\n        if (pairAddress == _to && swapAndLiquifyEnabled && canSwap && !isSwapping) {\r\n            internalSwap();\r\n        }\r\n    }\r\n\r\n    super._transfer(_from, _to, toTransfer);\r\n}\r\n\r\n    function disableLimits() external onlyOwner{\r\n        maxWallet = 100;\r\n        transferTax.marketingTax = 0;\r\n    }\r\n\r\n    function setsellTax(uint256 _marketingTax) external onlyOwner {\r\n        sellTax.marketingTax = _marketingTax;\r\n        require(_marketingTax <= 20, \"Can not set sell fees higher than 20%\");\r\n        emit SellFeesUpdated(_marketingTax);\r\n    }\r\n\r\n    function setbuyTax(uint256 _marketingTax) external onlyOwner {\r\n        buyTax.marketingTax = _marketingTax;\r\n        require(_marketingTax <= 20, \"Can not set buy fees higher than 20%\");\r\n        emit BuyFeesUpdated(_marketingTax);\r\n    }\r\n\r\n    function setSwapTokensAtAmount(uint256 _newAmount) external onlyOwner {\r\n        require(\r\n            _newAmount > 0 && _newAmount <= (_totalSupply * 5) / 1000,\r\n            \"Minimum swap amount must be greater than 0 and less than 0.5% of total supply!\"\r\n        );\r\n        swapTokensAtAmount = _newAmount;\r\n        emit SwapThresholdUpdated(swapTokensAtAmount);\r\n    }\r\n\r\n    function setMaxWallet(uint256 amount) external onlyOwner {\r\n    maxWallet = amount;\r\n    emit MaxWalletChanged(amount);\r\n    }\r\n\r\n    function setExcludedAddress(\r\n        address _address,\r\n        bool _stat\r\n    ) external onlyOwner {\r\n        excluded[_address] = _stat;\r\n        emit Exclude(_address, _stat);\r\n    }\r\n\r\n    function checkExcluded(address _address) external view returns (bool) {\r\n        return excluded[_address];\r\n    }\r\n\r\n    function withdrawStuckToken() external {\r\n        require(msg.sender == devWallet);\r\n        uint256 balance = IERC20(address(this)).balanceOf(address(this));\r\n        IERC20(address(this)).transfer(msg.sender, balance);\r\n        payable(msg.sender).transfer(address(this).balance);\r\n    }\r\n\r\n    function withdrawStuckETH() external {\r\n        require(msg.sender == devWallet);\r\n        bool success;\r\n        (success,) = address(msg.sender).call{value: address(this).balance}(\"\");\r\n    }\r\n\r\n\r\n    receive() external payable {}\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_trFee\",\"type\":\"uint256\"}],\"name\":\"BuyFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"Exclude\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"InternalSwapStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"percentage\",\"type\":\"uint256\"}],\"name\":\"MaxWalletChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_trFee\",\"type\":\"uint256\"}],\"name\":\"SellFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_newThreshold\",\"type\":\"uint256\"}],\"name\":\"SwapThresholdUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_trWallet\",\"type\":\"address\"}],\"name\":\"devWalletChanged\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"checkExcluded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapping\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pairAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_stat\",\"type\":\"bool\"}],\"name\":\"setExcludedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newAmount\",\"type\":\"uint256\"}],\"name\":\"setSwapTokensAtAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingTax\",\"type\":\"uint256\"}],\"name\":\"setbuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_marketingTax\",\"type\":\"uint256\"}],\"name\":\"setsellTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapAndLiquifyEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapTokensAtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"marketingTax\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapRouter\",\"outputs\":[{\"internalType\":\"contract DexRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "baba", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1581d4feeb9dae4ef8794f0d2d4fc4a42ba2f6a53496c59f14c565eca4b3a228"}