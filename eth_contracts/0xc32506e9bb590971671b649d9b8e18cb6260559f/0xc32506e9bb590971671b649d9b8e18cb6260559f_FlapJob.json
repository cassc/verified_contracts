{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-or-later\r\n// Copyright (C) 2021 Dai Foundation\r\n//\r\n// This program is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU Affero General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// This program is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU Affero General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU Affero General Public License\r\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\npragma solidity 0.8.13;\r\n\r\n/// @title Maker Keeper Network Job\r\n/// @notice A job represents an independant unit of work that can be done by a keeper\r\ninterface IJob {\r\n\r\n    /// @notice Executes this unit of work\r\n    /// @dev Should revert iff workable() returns canWork of false\r\n    /// @param network The name of the external keeper network\r\n    /// @param args Custom arguments supplied to the job, should be copied from workable response\r\n    function work(bytes32 network, bytes calldata args) external;\r\n\r\n    /// @notice Ask this job if it has a unit of work available\r\n    /// @dev This should never revert, only return false if nothing is available\r\n    /// @dev This should normally be a view, but sometimes that's not possible\r\n    /// @param network The name of the external keeper network\r\n    /// @return canWork Returns true if a unit of work is available\r\n    /// @return args The custom arguments to be provided to work() or an error string if canWork is false\r\n    function workable(bytes32 network) external returns (bool canWork, bytes memory args);\r\n\r\n}\r\n\r\ninterface SequencerLike {\r\n    function isMaster(bytes32 network) external view returns (bool);\r\n}\r\n\r\ninterface VatLike {\r\n    function sin(address) external view returns (uint256);\r\n}\r\n\r\ninterface VowLike {\r\n    function Sin() external view returns (uint256);\r\n    function Ash() external view returns (uint256);\r\n    function heal(uint256) external;\r\n    function flap() external;\r\n}\r\n\r\n/// @title Call flap when possible\r\ncontract FlapJob is IJob {\r\n\r\n    SequencerLike public immutable sequencer;\r\n    VatLike       public immutable vat;\r\n    VowLike       public immutable vow;\r\n    uint256       public immutable maxGasPrice;\r\n\r\n    // --- Errors ---\r\n    error NotMaster(bytes32 network);\r\n    error GasPriceTooHigh(uint256 gasPrice, uint256 maxGasPrice);\r\n\r\n    // --- Events ---\r\n    event Work(bytes32 indexed network);\r\n\r\n    constructor(address _sequencer, address _vat, address _vow, uint256 _maxGasPrice) {\r\n        sequencer   = SequencerLike(_sequencer);\r\n        vat         = VatLike(_vat);\r\n        vow         = VowLike(_vow);\r\n        maxGasPrice = _maxGasPrice;\r\n    }\r\n\r\n    function work(bytes32 network, bytes calldata args) public {\r\n        if (!sequencer.isMaster(network)) revert NotMaster(network);\r\n        if (tx.gasprice > maxGasPrice)    revert GasPriceTooHigh(tx.gasprice, maxGasPrice);\r\n\r\n        uint256 toHeal = abi.decode(args, (uint256));\r\n        if (toHeal > 0) vow.heal(toHeal);\r\n        vow.flap();\r\n\r\n        emit Work(network);\r\n    }\r\n\r\n    function workable(bytes32 network) external override returns (bool, bytes memory) {\r\n        if (!sequencer.isMaster(network)) return (false, bytes(\"Network is not master\"));\r\n\r\n        bytes memory args;\r\n        uint256 unbackedTotal = vat.sin(address(vow));\r\n        uint256 unbackedVow   = vow.Sin() + vow.Ash();\r\n\r\n        // Check if need to cancel out free unbacked debt with system surplus\r\n        uint256 toHeal = unbackedTotal > unbackedVow ? unbackedTotal - unbackedVow : 0;\r\n        args = abi.encode(toHeal);\r\n\r\n        try this.work(network, args) {\r\n            // Flap succeeds\r\n            return (true, args);\r\n        } catch {\r\n            // Can not flap -- carry on\r\n        }\r\n        return (false, bytes(\"Flap not possible\"));\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sequencer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vat\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxGasPrice\",\"type\":\"uint256\"}],\"name\":\"GasPriceTooHigh\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"}],\"name\":\"NotMaster\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"}],\"name\":\"Work\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"maxGasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencer\",\"outputs\":[{\"internalType\":\"contract SequencerLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vat\",\"outputs\":[{\"internalType\":\"contract VatLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vow\",\"outputs\":[{\"internalType\":\"contract VowLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"args\",\"type\":\"bytes\"}],\"name\":\"work\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"network\",\"type\":\"bytes32\"}],\"name\":\"workable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "FlapJob", "CompilerVersion": "v0.8.13+commit.abaa5c0e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000238b4e35daed6100c6162fae4510261f88996ec900000000000000000000000035d1b3f3d7966a1dfe207aa4514c12a259a0492b000000000000000000000000a950524441892a31ebddf91d3ceefa04bf454466000000000000000000000000000000000000000000000000000000202170e400", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ef2a32e16084e88872728ff3d43923cfa3205d50fdcfe4a8785d7b18d17a9cc"}