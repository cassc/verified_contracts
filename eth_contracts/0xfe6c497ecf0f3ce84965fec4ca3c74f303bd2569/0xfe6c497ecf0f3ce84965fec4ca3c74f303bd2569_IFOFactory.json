{"SourceCode": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/access/Ownable.sol\r\n\r\n\r\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.0;\r\n\r\n// CAUTION\r\n// This version of SafeMath should only be used with Solidity 0.8 or later,\r\n// because it relies on the compiler's built in overflow checks.\r\n\r\n/**\r\n * @dev Wrappers over Solidity's arithmetic operations.\r\n *\r\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\r\n * now has built in overflow checking.\r\n */\r\nlibrary SafeMath {\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `+` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Addition cannot overflow.\r\n     */\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a - b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, reverting on\r\n     * overflow.\r\n     *\r\n     * Counterpart to Solidity's `*` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Multiplication cannot overflow.\r\n     */\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a * b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a / b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting when dividing by zero.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a % b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\r\n     * overflow (when the result is negative).\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {trySub}.\r\n     *\r\n     * Counterpart to Solidity's `-` operator.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - Subtraction cannot overflow.\r\n     */\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b <= a, errorMessage);\r\n            return a - b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\r\n     * division by zero. The result is rounded towards zero.\r\n     *\r\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\r\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\r\n     * uses an invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a / b;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\r\n     * reverting with custom message when dividing by zero.\r\n     *\r\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\r\n     * message unnecessarily. For custom revert reasons use {tryMod}.\r\n     *\r\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\r\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\r\n     * invalid opcode to revert (consuming all remaining gas).\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The divisor cannot be zero.\r\n     */\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        unchecked {\r\n            require(b > 0, errorMessage);\r\n            return a % b;\r\n        }\r\n    }\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuard {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    constructor() {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n}\r\n\r\n// File: bsc-library/contracts/IBEP20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IBEP20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the token decimals.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n\r\n    /**\r\n     * @dev Returns the token symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the bep token owner.\r\n     */\r\n    function getOwner() external view returns (address);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// File: @openzeppelin/contracts/utils/Address.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(isContract(target), \"Address: delegate call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) private pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\r\nlibrary TransferHelper {\r\n  \r\n    function safeTransferETH(address to, uint value) internal {\r\n        (bool success,) = to.call{value:value}(new bytes(0));\r\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\r\n    }\r\n}\r\n\r\n// File: bsc-library/contracts/SafeBEP20.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title SafeBEP20\r\n * @dev Wrappers around BEP20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeBEP20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IBEP20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IBEP20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IBEP20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeBEP20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IBEP20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance =\r\n            token.allowance(address(this), spender).sub(value, \"SafeBEP20: decreased allowance below zero\");\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IBEP20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\");\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n// File: contracts/interfaces/IIFOV2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/** @title IIFOV2.\r\n * @notice It is an interface for IFOV2.sol\r\n */\r\ninterface IIFOV2 {\r\n    /**\r\n     * @notice It allows users to deposit LP tokens to pool\r\n     * @param _pid: poolId\r\n     */\r\n    function depositPool(uint8 _pid) external payable;\r\n\r\n    /**\r\n     * @notice It allows users to harvest from pool\r\n     * @param _pid: poolId\r\n     */\r\n    function harvestPool(uint8 _pid) external;\r\n\r\n    /**\r\n     * @notice It sets parameters for pool\r\n     * @param _offeringAmountPool: offering amount (in tokens)\r\n     * @param _raisingAmountPool: raising amount (in LP tokens)\r\n     * @param _limitPerUserInLP: limit per user (in LP tokens)\r\n     * @param _hasTax: if the pool has a tax\r\n     * @param _pid: poolId\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function setPool(\r\n        uint256 _offeringAmountPool,\r\n        uint256 _raisingAmountPool,\r\n        uint256 _limitPerUserInLP,\r\n        bool _hasTax,\r\n        uint8 _pid\r\n    ) external;\r\n\r\n \r\n    /**\r\n     * @notice It returns the pool information\r\n     * @param _pid: poolId\r\n     */\r\n    function viewPoolInformation(uint256 _pid)\r\n        external\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        );\r\n\r\n    /**\r\n     * @notice It returns the tax overflow rate calculated for a pool\r\n     * @dev 100,000 means 0.1(10%)/ 1 means 0.000001(0.0001%)/ 1,000,000 means 1(100%)\r\n     * @param _pid: poolId\r\n     * @return It returns the tax percentage\r\n     */\r\n    function viewPoolTaxRateOverflow(uint256 _pid) external view returns (uint256);\r\n\r\n    /**\r\n     * @notice External view function to see user information\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     */\r\n    function viewUserInfo(address _user, uint8[] calldata _pids)\r\n        external\r\n        view\r\n        returns (uint256[] memory, bool[] memory);\r\n\r\n    /**\r\n     * @notice External view function to see user allocations for both pools\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     */\r\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids) external view returns (uint256[] memory);\r\n\r\n    /**\r\n     * @notice External view function to see user offering and refunding amounts for both pools\r\n     * @param _user: user address\r\n     * @param _pids: array of pids\r\n     */\r\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\r\n        external\r\n        view\r\n        returns (uint256[3][] memory);\r\n}\r\n\r\ninterface IFactory {\r\n    function treasury() external view returns (address treasury);\r\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IIFOFactory {\r\n    function controller() external view returns (address);\r\n}\r\n\r\ninterface IRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n// File: contracts/IFOV2.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @title IFOV2\r\n * @notice It is an upgrade of the original IFO model with 2 pools\r\n */\r\ncontract TokenSale is IIFOV2, ReentrancyGuard, Ownable {\r\n    using SafeMath for uint256;\r\n    using SafeBEP20 for IBEP20;\r\n\r\n    address public treasury;\r\n\r\n    // The offering token\r\n    IBEP20 public offeringToken;\r\n\r\n    // Has been Finalized\r\n    bool public finalized;\r\n\r\n    // Token owner wallet \r\n    address public devWallet;\r\n    \r\n    // Number of pools\r\n    uint8 public constant numberPools = 2;\r\n\r\n    // The block number when IFO starts\r\n    uint256 public startBlock;\r\n\r\n    // The block number when IFO ends\r\n    uint256 public endBlock;\r\n\r\n    // Soft and Hard Caps\r\n    uint256 public HardCap;\r\n    uint256 public SoftCap;\r\n    uint256 public toLiquify;\r\n    uint256 public listingPrice;\r\n    uint256 public lockDays;\r\n    bool public isLocked = false;\r\n    uint256 public initialLockEpoch = 0;\r\n    IRouter public router;\r\n    address public pair;\r\n\r\n    string public logoURI;\r\n    string public websiteURI;\r\n    string public bannerURI;\r\n\r\n    uint256 public userCount;\r\n    uint256 public claimCount;\r\n    uint256 tokensForLiquidity;\r\n    \r\n    // settings\r\n    uint256 public marsFee; // 50 = 5%\r\n\r\n    // Array of PoolCharacteristics of size numberPools\r\n    PoolCharacteristics[numberPools] private _poolInformation;\r\n\r\n\r\n    // It maps the address to pool id to UserInfo\r\n    mapping(address => mapping(uint8 => UserInfo)) private _userInfo;\r\n\r\n    // Struct that contains each pool characteristics\r\n    struct PoolCharacteristics {\r\n        uint256 raisingAmountPool; // amount of tokens raised for the pool (in LP tokens)\r\n        uint256 offeringAmountPool; // amount of tokens offered for the pool (in offeringTokens)\r\n        uint256 limitPerUserInLP; // limit of tokens per user (if 0, it is ignored)\r\n        bool hasTax; // tax on the overflow (if any, it works with _calculateTaxOverflow)\r\n        uint256 totalAmountPool; // total amount pool deposited (in LP tokens)\r\n        uint256 sumTaxesOverflow; // total taxes collected (starts at 0, increases with each harvest if overflow)\r\n    }\r\n\r\n    // Struct that contains each user information for both pools\r\n    struct UserInfo {\r\n        uint256 amountPool; // How many tokens the user has provided for pool\r\n        bool claimedPool; // Whether the user has claimed (default: false) for pool\r\n    }\r\n\r\n    // Admin withdraw events\r\n    event AdminWithdraw(uint256 amountLP, uint256 amountOfferingToken);\r\n\r\n    // Admin recovers token\r\n    event AdminTokenRecovery(address tokenAddress, uint256 amountTokens);\r\n\r\n    // Deposit event\r\n    event Deposit(address indexed user, uint256 amount, uint8 indexed pid);\r\n\r\n    // Harvest event\r\n    event Harvest(address indexed user, uint256 offeringAmount, uint256 excessAmount, uint8 indexed pid);\r\n\r\n    // Event for new start & end blocks\r\n    event NewStartAndEndBlocks(uint256 startBlock, uint256 endBlock);\r\n\r\n    // Event when parameters are set for one of the pools\r\n    event PoolParametersSet(uint256 offeringAmountPool, uint256 raisingAmountPool, uint8 pid);\r\n\r\n    // Modifier to prevent contracts to participate\r\n    modifier notContract() {\r\n        require(!_isContract(msg.sender), \"contract not allowed\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        IBEP20 _offeringToken,\r\n        address _devWallet,\r\n        uint256 _startEpoch,\r\n        uint256 _endEpoch,\r\n        uint256 _softCap,\r\n        address _treasury,\r\n        uint256 _marsFee,\r\n        address _router\r\n    )  {\r\n        require(_offeringToken.totalSupply() >= 0);\r\n\r\n        offeringToken = _offeringToken;\r\n        devWallet = _devWallet;\r\n        startBlock = _startEpoch;\r\n        endBlock = _endEpoch;\r\n        SoftCap = _softCap;\r\n        treasury = _treasury;\r\n        marsFee = _marsFee;\r\n        router = IRouter(_router);\r\n    }\r\n\r\n    function changeDevWallet(address _newDevWallet) external onlyOwner {\r\n        devWallet = _newDevWallet;\r\n    }\r\n\r\n    function editSoftCap(uint256 _newSoftCap) external onlyOwner {\r\n        require(block.timestamp < endBlock, \"Cannot change after pools end\");\r\n        SoftCap = _newSoftCap;\r\n    }\r\n\r\n    function setHardCap() external onlyOwner {\r\n        require(block.timestamp < endBlock, \"Cannot change after pools end\");\r\n        HardCap = _poolInformation[0].raisingAmountPool + _poolInformation[1].raisingAmountPool;\r\n    }\r\n\r\n    function changemarsFee(uint256 _newmarsFee) external onlyOwner {\r\n        require(block.timestamp < endBlock, \"Cannot change after pools end\");\r\n        marsFee = _newmarsFee;\r\n        require(_newmarsFee <= 20, \"Fee to High\");\r\n    }\r\n\r\n    function addLogoAndWebsite(string memory _logo, string memory _website, string memory _bannerURI) external {\r\n        require(msg.sender == devWallet || msg.sender == owner(), \"Must have access\");\r\n        logoURI = _logo;\r\n        websiteURI = _website;\r\n        bannerURI = _bannerURI;\r\n    }\r\n\r\n    /**\r\n     * @notice It allows users to deposit LP tokens to pool\r\n     * @param _pid: pool id\r\n     */\r\n    function depositPool(uint8 _pid) external payable override nonReentrant notContract {\r\n        uint256 _amount = msg.value;\r\n        // Checks whether the pool id is valid\r\n        require(_pid < numberPools, \"Non valid pool id\");\r\n\r\n        // Checks that pool was set\r\n        require(\r\n            _poolInformation[_pid].offeringAmountPool > 0 && _poolInformation[_pid].raisingAmountPool > 0,\r\n            \"Pool not set\"\r\n        );\r\n\r\n        // Checks whether the block number is not too early\r\n        require(block.timestamp > startBlock, \"Too early\");\r\n\r\n        // Checks whether the block number is not too late\r\n        require(block.timestamp < endBlock, \"Too late\");\r\n\r\n        // Checks that the amount deposited is not inferior to 0\r\n        require(_amount > 0, \"Amount must be > 0\");\r\n\r\n        // set count up if not already committed\r\n        if(_userInfo[msg.sender][_pid].amountPool == 0) userCount ++;\r\n        // Update the user status\r\n        _userInfo[msg.sender][_pid].amountPool = _userInfo[msg.sender][_pid].amountPool.add(_amount);\r\n\r\n        // Check if the pool has a limit per user\r\n        if (_poolInformation[_pid].limitPerUserInLP > 0) {\r\n            // Checks whether the limit has been reached\r\n            require(\r\n                _userInfo[msg.sender][_pid].amountPool <= _poolInformation[_pid].limitPerUserInLP,\r\n                \"New amount above user limit\"\r\n            );\r\n        }\r\n\r\n        // Updates the totalAmount for pool\r\n        _poolInformation[_pid].totalAmountPool = _poolInformation[_pid].totalAmountPool.add(_amount);\r\n\r\n         // balance of staked in this pool must not exceed raising amount entered.\r\n         require(_poolInformation[_pid].totalAmountPool <= _poolInformation[_pid].raisingAmountPool, \"This will Exceed Pool Cap\");\r\n\r\n        emit Deposit(msg.sender, _amount, _pid);\r\n    }\r\n\r\n    function ReclaimFunds(uint8 _pid) external nonReentrant notContract {\r\n        // total staked must be less than softCap\r\n        uint256 totalStaked = _poolInformation[0].totalAmountPool + _poolInformation[1].totalAmountPool;\r\n        require(totalStaked < SoftCap, \"Soft Cap Was met, use Harvest\");\r\n        // Checks whether it is too early to harvest\r\n        require(block.timestamp > endBlock, \"Too early to harvest\");\r\n        \r\n        // Checks whether pool id is valid\r\n        require(_pid < numberPools, \"Non valid pool id\");\r\n\r\n        // Checks whether the user has participated\r\n        require(_userInfo[msg.sender][_pid].amountPool > 0, \"Did not participate\");\r\n\r\n        // Checks whether the user has already harvested\r\n        require(!_userInfo[msg.sender][_pid].claimedPool, \"Has harvested\");\r\n\r\n        // Updates the harvest status\r\n        _userInfo[msg.sender][_pid].claimedPool = true;\r\n        claimCount ++;\r\n        // Checks users Staked amount, adjusts values and withdrawls tokens\r\n        uint256 refundingTokenAmount = _userInfo[msg.sender][_pid].amountPool;\r\n            \r\n        if (refundingTokenAmount > 0) {\r\n            TransferHelper.safeTransferETH(msg.sender,refundingTokenAmount);\r\n        }\r\n\r\n        emit Harvest(msg.sender, 0, refundingTokenAmount, _pid);\r\n    }\r\n \r\n    /**\r\n     * @notice It allows users to harvest from pool\r\n     * @param _pid: pool id\r\n     */\r\n    function harvestPool(uint8 _pid) external override nonReentrant notContract {\r\n        // total staked must be over softcap\r\n        uint256 totalStaked = _poolInformation[0].totalAmountPool + _poolInformation[1].totalAmountPool;\r\n        require(totalStaked >= SoftCap, \"Soft Cap Not Met, use Reclaim\");\r\n        // Checks whether it is too early to harvest\r\n        require(block.timestamp > endBlock, \"Too early to harvest\");\r\n\r\n        // Checks whether pool id is valid\r\n        require(_pid < numberPools, \"Non valid pool id\");\r\n\r\n        // Checks whether the user has participated\r\n        require(_userInfo[msg.sender][_pid].amountPool > 0, \"Did not participate\");\r\n\r\n        // Checks whether the user has already harvested\r\n        require(!_userInfo[msg.sender][_pid].claimedPool, \"Has harvested\");\r\n\r\n        // Updates the harvest status\r\n        _userInfo[msg.sender][_pid].claimedPool = true;\r\n        claimCount ++;\r\n\r\n        // Initialize the variables for offering, refunding user amounts, and tax amount\r\n        uint256 offeringTokenAmount;\r\n        uint256 refundingTokenAmount;\r\n        uint256 userTaxOverflow;\r\n\r\n        (offeringTokenAmount, refundingTokenAmount, userTaxOverflow) = _calculateOfferingAndRefundingAmountsPool(\r\n            msg.sender,\r\n            _pid\r\n        );\r\n\r\n        // Increment the sumTaxesOverflow\r\n        if (userTaxOverflow > 0) {\r\n            _poolInformation[_pid].sumTaxesOverflow = _poolInformation[_pid].sumTaxesOverflow.add(userTaxOverflow);\r\n        }\r\n\r\n        // Transfer these tokens back to the user if quantity > 0\r\n        if (offeringTokenAmount > 0) {\r\n            offeringToken.safeTransfer(address(msg.sender), offeringTokenAmount);\r\n        }\r\n\r\n        if (refundingTokenAmount > 0) {\r\n            TransferHelper.safeTransferETH(msg.sender,refundingTokenAmount);\r\n        }\r\n\r\n        emit Harvest(msg.sender, offeringTokenAmount, refundingTokenAmount, _pid);\r\n    }\r\n\r\n     function emergentWithdrawal(uint8 _pid) external payable nonReentrant notContract {\r\n        uint256 _amountWithdrawal = _userInfo[msg.sender][_pid].amountPool;\r\n        // Checks whether the pool id is valid\r\n        require(_pid < numberPools, \"Non valid pool id\");\r\n\r\n        // Checks that pool was set\r\n        require(\r\n            _poolInformation[_pid].offeringAmountPool > 0 && _poolInformation[_pid].raisingAmountPool > 0,\r\n            \"Pool not set\"\r\n        );\r\n\r\n        // Checks whether the block number is not too early\r\n        require(block.timestamp > startBlock, \"Too early\");\r\n\r\n        // Checks whether the block number is not too late\r\n        require(block.timestamp < endBlock, \"Too late\");\r\n\r\n        // Checks that the amount user has deposited is not inferior to 0\r\n        require(_amountWithdrawal > 0, \"Amount must be > 0\");\r\n        require(address(this).balance >= _amountWithdrawal, \"Contract does not have enough Balance\");\r\n\r\n        // Update the user status\r\n        _userInfo[msg.sender][_pid].amountPool = 0;\r\n        userCount --;\r\n        // Updates the totalAmount for pool\r\n        _poolInformation[_pid].totalAmountPool -= _amountWithdrawal;\r\n\r\n         uint256 fee = (_amountWithdrawal * marsFee) / 1000;\r\n         TransferHelper.safeTransferETH(treasury,fee);\r\n         uint256 amountToSendBack = _amountWithdrawal - fee;\r\n         TransferHelper.safeTransferETH(msg.sender, amountToSendBack);        \r\n  \r\n    }\r\n\r\n   function liquifyLockAndSend() internal returns (uint256 leftovers) {\r\n        uint256 bnbToLiquify = (address(this).balance * toLiquify) / 100;\r\n        uint256 dec = offeringToken.decimals();\r\n        uint256 tokensToLiquify = (bnbToLiquify * listingPrice) / 10**dec;\r\n        // Make liquidity and set lock\r\n        offeringToken.approve(address(router),tokensToLiquify);\r\n        address lpReceiver = lockDays > 0 ? address(this) : devWallet;\r\n        router.addLiquidityETH{value: bnbToLiquify}(address(offeringToken), tokensToLiquify, 0, 0, lpReceiver, block.timestamp);\r\n        initialLockEpoch = block.timestamp;\r\n        isLocked = lockDays > 0;\r\n        uint256 returnLiquidityTokens = tokensForLiquidity - tokensToLiquify;\r\n        return returnLiquidityTokens;\r\n    }\r\n\r\n    function RecoverLockedLP() external {\r\n        require(block.timestamp > initialLockEpoch + (lockDays*86400),\"Not Unlocked Yet\");\r\n        require(msg.sender == devWallet, \"Not Project Owner\");\r\n        address bnbPair = IFactory(router.factory())\r\n            .getPair(address(offeringToken), router.WETH());\r\n        uint256 balanceOfLP = IBEP20(bnbPair).balanceOf(address(this));\r\n        IBEP20(bnbPair).safeTransfer(devWallet, balanceOfLP);\r\n        isLocked = false;\r\n    }\r\n   \r\n    function FinalizeRound() external {\r\n        require(msg.sender == devWallet || msg.sender == owner(), \"Must be Dev Wallet or Controller\");\r\n        require(block.timestamp > endBlock, \"not Over\");\r\n        require(!finalized,\"Already finalized\");\r\n        uint256 totalStaked = _poolInformation[0].totalAmountPool;\r\n        uint256 offerBalance = offeringToken.balanceOf(address(this));\r\n        uint256 lpBalance = address(this).balance;\r\n\r\n        // take marsFee and send raised to dev wallet.  calculate and send remaining Offering tokens to Dev team\r\n        if(totalStaked > SoftCap) {\r\n                     \r\n            uint256 tokensSold0 = (_poolInformation[0].offeringAmountPool * _poolInformation[0].totalAmountPool) / _poolInformation[0].raisingAmountPool;\r\n           \r\n            // take marsFee and send rest to dev wallet\r\n            uint256 fee = (lpBalance * marsFee) / 1000;\r\n            TransferHelper.safeTransferETH(treasury,fee);\r\n            uint256 leftOvers = 0;\r\n             // if autoLiquify make LP and Lock\r\n             if(toLiquify > 0){\r\n                leftOvers = liquifyLockAndSend();\r\n            }\r\n            // find leftOver Tokens keep the sold. and send rest back\r\n            uint256 tokensLeftOver = tokensSold0 < _poolInformation[0].offeringAmountPool ? _poolInformation[0].offeringAmountPool - tokensSold0 : 0;\r\n            tokensLeftOver += leftOvers;\r\n            if(tokensLeftOver > 0) offeringToken.safeTransfer(devWallet, tokensLeftOver);\r\n            if(address(this).balance > 0) TransferHelper.safeTransferETH(devWallet,address(this).balance);\r\n        } else {\r\n            // No Soft Cap -- Offering tokens back to dev team\r\n            offeringToken.safeTransfer(devWallet, offerBalance);\r\n        }\r\n        \r\n        finalized = true;\r\n        \r\n        \r\n    }\r\n\r\n    /**\r\n     * @notice It allows the admin to recover wrong tokens sent to the contract\r\n     * @param _tokenAddress: the address of the token to withdraw (18 decimals)\r\n     * @param _tokenAmount: the number of token amount to withdraw\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function recoverWrongTokens(address _tokenAddress, uint256 _tokenAmount) external onlyOwner {\r\n        IBEP20(_tokenAddress).safeTransfer(address(msg.sender), _tokenAmount);\r\n        emit AdminTokenRecovery(_tokenAddress, _tokenAmount);\r\n    }\r\n\r\n    function withdawlBNB() external onlyOwner {\r\n            TransferHelper.safeTransferETH(msg.sender, address(this).balance);\r\n        }\r\n\r\n    function setPoolsAfterSendingTokens(uint256 offering1_Amount, uint256 _raiseBasic_Goal, uint256 _basicUserLimit1, uint256 _percentToLiquify, uint256 _listingPrice, uint256 _lockDays) external onlyOwner {\r\n        require(_raiseBasic_Goal > SoftCap, \"combined raise limits must be more than softcap\");\r\n        require(_percentToLiquify == 0 || _percentToLiquify >= 51,\"If over 0, must be more than 51%\");\r\n        toLiquify = _percentToLiquify;\r\n        listingPrice = _listingPrice;\r\n        lockDays = _lockDays;\r\n\r\n        setPool(offering1_Amount, _raiseBasic_Goal, _basicUserLimit1, false, 0);\r\n        HardCap = _raiseBasic_Goal;\r\n         tokensForLiquidity = IBEP20(offeringToken).balanceOf(address(this)) - offering1_Amount;\r\n    }\r\n\r\n  \r\n    /**\r\n     * @notice It sets parameters for pool\r\n     * @param _offeringAmountPool: offering amount (in tokens)\r\n     * @param _raisingAmountPool: raising amount (in LP tokens)\r\n     * @param _limitPerUserInLP: limit per user (in LP tokens)\r\n     * @param _hasTax: if the pool has a tax\r\n     * @param _pid: pool id\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function setPool(\r\n        uint256 _offeringAmountPool,\r\n        uint256 _raisingAmountPool,\r\n        uint256 _limitPerUserInLP,\r\n        bool _hasTax,\r\n        uint8 _pid\r\n    ) public override onlyOwner {\r\n        require(block.timestamp < startBlock, \"IFO has started\");\r\n        require(_pid < numberPools, \"Pool does not exist\");\r\n\r\n        _poolInformation[_pid].offeringAmountPool = _offeringAmountPool;\r\n        _poolInformation[_pid].raisingAmountPool = _raisingAmountPool;\r\n        _poolInformation[_pid].limitPerUserInLP = _limitPerUserInLP;\r\n        _poolInformation[_pid].hasTax = _hasTax;\r\n\r\n        emit PoolParametersSet(_offeringAmountPool, _raisingAmountPool, _pid);\r\n    }\r\n\r\n    function endEarly() external {\r\n        require(msg.sender == devWallet || msg.sender == owner(), \"Must be Dev Wallet or Controller\");\r\n        require(block.timestamp > startBlock, \"not started yet\");\r\n        require(block.timestamp < endBlock, \"already ended\");\r\n        endBlock = block.timestamp;    \r\n    }\r\n\r\n  \r\n\r\n    /**\r\n     * @notice It allows the admin to update start and end blocks\r\n     * @param _startBlock: the new start block\r\n     * @param _endBlock: the new end block\r\n     * @dev This function is only callable by admin.\r\n     */\r\n    function updateStartAndEndBlocks(uint256 _startBlock, uint256 _endBlock) external onlyOwner {\r\n        require(block.timestamp < startBlock, \"IFO has started\");\r\n        require(_startBlock < _endBlock, \"New startBlock must be lower than new endBlock\");\r\n        require(block.timestamp < _startBlock, \"New startBlock must be higher than current block\");\r\n\r\n        startBlock = _startBlock;\r\n        endBlock = _endBlock;\r\n\r\n        emit NewStartAndEndBlocks(_startBlock, _endBlock);\r\n    }\r\n\r\n    /**\r\n     * @notice It returns the pool information\r\n     * @param _pid: poolId\r\n     * @return raisingAmountPool: amount of LP tokens raised (in LP tokens)\r\n     * @return offeringAmountPool: amount of tokens offered for the pool (in offeringTokens)\r\n     * @return limitPerUserInLP; // limit of tokens per user (if 0, it is ignored)\r\n     * @return hasTax: tax on the overflow (if any, it works with _calculateTaxOverflow)\r\n     * @return totalAmountPool: total amount pool deposited (in LP tokens)\r\n     * @return sumTaxesOverflow: total taxes collected (starts at 0, increases with each harvest if overflow)\r\n     */\r\n    function viewPoolInformation(uint256 _pid)\r\n        external\r\n        view\r\n        override\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256,\r\n            bool,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        return (\r\n            _poolInformation[_pid].raisingAmountPool,\r\n            _poolInformation[_pid].offeringAmountPool,\r\n            _poolInformation[_pid].limitPerUserInLP,\r\n            _poolInformation[_pid].hasTax,\r\n            _poolInformation[_pid].totalAmountPool,\r\n            _poolInformation[_pid].sumTaxesOverflow\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice It returns the tax overflow rate calculated for a pool\r\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\r\n     * @param _pid: poolId\r\n     * @return It returns the tax percentage\r\n     */\r\n    function viewPoolTaxRateOverflow(uint256 _pid) external view override returns (uint256) {\r\n        if (!_poolInformation[_pid].hasTax) {\r\n            return 0;\r\n        } else {\r\n            return\r\n                _calculateTaxOverflow(_poolInformation[_pid].totalAmountPool, _poolInformation[_pid].raisingAmountPool);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to see user allocations for both pools\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     * @return\r\n     */\r\n    function viewUserAllocationPools(address _user, uint8[] calldata _pids)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory)\r\n    {\r\n        uint256[] memory allocationPools = new uint256[](_pids.length);\r\n        for (uint8 i = 0; i < _pids.length; i++) {\r\n            allocationPools[i] = _getUserAllocationPool(_user, _pids[i]);\r\n        }\r\n        return allocationPools;\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to see user information\r\n     * @param _user: user address\r\n     * @param _pids[]: array of pids\r\n     */\r\n    function viewUserInfo(address _user, uint8[] calldata _pids)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[] memory, bool[] memory)\r\n    {\r\n        uint256[] memory amountPools = new uint256[](_pids.length);\r\n        bool[] memory statusPools = new bool[](_pids.length);\r\n\r\n        for (uint8 i = 0; i < numberPools; i++) {\r\n            amountPools[i] = _userInfo[_user][i].amountPool;\r\n            statusPools[i] = _userInfo[_user][i].claimedPool;\r\n        }\r\n        return (amountPools, statusPools);\r\n    }\r\n\r\n    /**\r\n     * @notice External view function to see user offering and refunding amounts for both pools\r\n     * @param _user: user address\r\n     * @param _pids: array of pids\r\n     */\r\n    function viewUserOfferingAndRefundingAmountsForPools(address _user, uint8[] calldata _pids)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256[3][] memory)\r\n    {\r\n        uint256[3][] memory amountPools = new uint256[3][](_pids.length);\r\n\r\n        for (uint8 i = 0; i < _pids.length; i++) {\r\n            uint256 userOfferingAmountPool;\r\n            uint256 userRefundingAmountPool;\r\n            uint256 userTaxAmountPool;\r\n\r\n            if (_poolInformation[_pids[i]].raisingAmountPool > 0) {\r\n                (\r\n                    userOfferingAmountPool,\r\n                    userRefundingAmountPool,\r\n                    userTaxAmountPool\r\n                ) = _calculateOfferingAndRefundingAmountsPool(_user, _pids[i]);\r\n            }\r\n\r\n            amountPools[i] = [userOfferingAmountPool, userRefundingAmountPool, userTaxAmountPool];\r\n        }\r\n        return amountPools;\r\n    }\r\n\r\n  \r\n\r\n    /**\r\n     * @notice It calculates the tax overflow given the raisingAmountPool and the totalAmountPool.\r\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\r\n     * @return It returns the tax percentage\r\n     */\r\n    function _calculateTaxOverflow(uint256 _totalAmountPool, uint256 _raisingAmountPool)\r\n        internal\r\n        pure\r\n        returns (uint256)\r\n    {\r\n        uint256 ratioOverflow = _totalAmountPool.div(_raisingAmountPool);\r\n\r\n        if (ratioOverflow >= 500) {\r\n            return 2000000000; // 0.2%\r\n        } else if (ratioOverflow >= 250) {\r\n            return 2500000000; // 0.25%\r\n        } else if (ratioOverflow >= 100) {\r\n            return 3000000000; // 0.3%\r\n        } else if (ratioOverflow >= 50) {\r\n            return 5000000000; // 0.5%\r\n        } else {\r\n            return 10000000000; // 1%\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice It calculates the offering amount for a user and the number of LP tokens to transfer back.\r\n     * @param _user: user address\r\n     * @param _pid: pool id\r\n     * @return {uint256, uint256, uint256} It returns the offering amount, the refunding amount (in LP tokens),\r\n     * and the tax (if any, else 0)\r\n     */\r\n    function _calculateOfferingAndRefundingAmountsPool(address _user, uint8 _pid)\r\n        internal\r\n        view\r\n        returns (\r\n            uint256,\r\n            uint256,\r\n            uint256\r\n        )\r\n    {\r\n        uint256 userOfferingAmount;\r\n        uint256 userRefundingAmount;\r\n        uint256 taxAmount;\r\n\r\n        if (_poolInformation[_pid].totalAmountPool > _poolInformation[_pid].raisingAmountPool) {\r\n            // Calculate allocation for the user\r\n            uint256 allocation = _getUserAllocationPool(_user, _pid);\r\n\r\n            // Calculate the offering amount for the user based on the offeringAmount for the pool\r\n            userOfferingAmount = _poolInformation[_pid].offeringAmountPool.mul(allocation).div(1e12);\r\n\r\n            // Calculate the payAmount\r\n            uint256 payAmount = _poolInformation[_pid].raisingAmountPool.mul(allocation).div(1e12);\r\n\r\n            // Calculate the pre-tax refunding amount\r\n            userRefundingAmount = _userInfo[_user][_pid].amountPool.sub(payAmount);\r\n\r\n            // Retrieve the tax rate\r\n            if (_poolInformation[_pid].hasTax) {\r\n                uint256 taxOverflow =\r\n                    _calculateTaxOverflow(\r\n                        _poolInformation[_pid].totalAmountPool,\r\n                        _poolInformation[_pid].raisingAmountPool\r\n                    );\r\n\r\n                // Calculate the final taxAmount\r\n                taxAmount = userRefundingAmount.mul(taxOverflow).div(1e12);\r\n\r\n                // Adjust the refunding amount\r\n                userRefundingAmount = userRefundingAmount.sub(taxAmount);\r\n            }\r\n        } else {\r\n            userRefundingAmount = 0;\r\n            taxAmount = 0;\r\n            // _userInfo[_user] / (raisingAmount / offeringAmount)\r\n            userOfferingAmount = _userInfo[_user][_pid].amountPool.mul(_poolInformation[_pid].offeringAmountPool).div(\r\n                _poolInformation[_pid].raisingAmountPool\r\n            );\r\n        }\r\n        return (userOfferingAmount, userRefundingAmount, taxAmount);\r\n    }\r\n\r\n    /**\r\n     * @notice It returns the user allocation for pool\r\n     * @dev 100,000,000,000 means 0.1 (10%) / 1 means 0.0000000000001 (0.0000001%) / 1,000,000,000,000 means 1 (100%)\r\n     * @param _user: user address\r\n     * @param _pid: pool id\r\n     * @return it returns the user's share of pool\r\n     */\r\n    function _getUserAllocationPool(address _user, uint8 _pid) internal view returns (uint256) {\r\n        if (_poolInformation[_pid].totalAmountPool > 0) {\r\n            return _userInfo[_user][_pid].amountPool.mul(1e18).div(_poolInformation[_pid].totalAmountPool.mul(1e6));\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n      receive() external payable {}\r\n\r\n    /**\r\n     * @notice Check if an address is a contract\r\n     */\r\n    function _isContract(address _addr) internal view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(_addr)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function viewData() external view returns (\r\n        uint256 StartBlock, \r\n        uint256 EndBlock,\r\n        uint256 softCap,\r\n        uint256 hardCap,\r\n        uint256 MarsFee,\r\n        bool Finalized,\r\n        address DevWallet,\r\n        uint256 ToLiquify,\r\n        uint256 ListingPrice,\r\n        uint256 LockDays,\r\n        bool IsLocked,\r\n        uint256 InitialLockEpoch\r\n        ) {\r\n            return (\r\n                startBlock,\r\n                endBlock,\r\n                SoftCap,\r\n                HardCap,\r\n                marsFee,\r\n                finalized,\r\n                devWallet,\r\n                toLiquify,\r\n                listingPrice,\r\n                lockDays,\r\n                isLocked,\r\n                initialLockEpoch\r\n            );\r\n        }\r\n}\r\n\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract IFOFactory is Ownable {\r\n\r\n    constructor(address _treasury, uint256 _subFee) {\r\n        Controller = msg.sender;\r\n        treasury = _treasury;\r\n        subFee = _subFee;\r\n    }\r\n    \r\n    event createdPartnerPool(address Pool);\r\n\r\n\r\n    TokenSale[] private _tokenSales;\r\n    address public Controller;\r\n    address public treasury;\r\n    uint256 public subFee;\r\n    uint256 public marsFee = 30;\r\n\r\n\r\n   function getTokensforLiquidity( uint256 basicRaise, uint256 _listingPrice, uint256 _percentToLiquidity, uint256 dec) public  view returns (uint256) {\r\n            \r\n            uint256 feeToTake = (basicRaise * marsFee) / 1000;\r\n            uint256 bnbForLiquidity = ((basicRaise - feeToTake) * _percentToLiquidity) / 100;\r\n            uint256 tokensForLiquidity = _listingPrice * bnbForLiquidity;\r\n            return tokensForLiquidity / 10**dec;\r\n        \r\n    }\r\n\r\n    function createSale(\r\n        IBEP20 _offeringToken,\r\n        uint256 basicOffering,\r\n        uint256 basicRaise,\r\n        uint256 basicLimit,\r\n        address _devWallet,\r\n        uint256 _startEpoch,\r\n        uint256 _endEpoch,\r\n        uint256 _softCap,\r\n        uint256 _percentToLiquidity,\r\n        uint256 _listingPrice,\r\n        uint256 _lockDays,\r\n        address _router\r\n    ) external payable {\r\n        require(msg.value >= subFee, \"Not enough Fee Paid\");\r\n        TransferHelper.safeTransferETH(treasury,address(this).balance);\r\n         uint256 TokensForSale = basicOffering;\r\n         require(_percentToLiquidity < 100 && (_percentToLiquidity == 0 || _percentToLiquidity >= 51),\"If over 0, must be more than 51%\");\r\n        // if set autoLiquify check to ensure listing price is lower than sale price\r\n       if(_percentToLiquidity > 0){\r\n            uint256 dec = _offeringToken.decimals();\r\n            TokensForSale += getTokensforLiquidity( basicRaise, _listingPrice, _percentToLiquidity, dec);\r\n\r\n       }\r\n\r\n        // create Sale\r\n         TokenSale sale = new TokenSale(_offeringToken, _devWallet, _startEpoch, _endEpoch, _softCap, treasury, marsFee, _router);\r\n        _tokenSales.push(sale);\r\n        // send tokens for sale\r\n       \r\n        _offeringToken.transferFrom(msg.sender, address(sale), TokensForSale);\r\n        // setup single pool\r\n        sale.setPoolsAfterSendingTokens(basicOffering, basicRaise, basicLimit, _percentToLiquidity, _listingPrice, _lockDays );\r\n        sale.transferOwnership(Controller);\r\n    }\r\n    \r\n    \r\n    function getSale(uint256 number) public view returns (TokenSale){\r\n        return _tokenSales[number];\r\n    }\r\n    function removeSale(TokenSale saleAddress) external onlyOwner  {\r\n        for(uint32 i = 0; i < _tokenSales.length; i++) {\r\n            if(_tokenSales[i] == saleAddress){\r\n                _tokenSales[i] = _tokenSales[_tokenSales.length - 1];\r\n                _tokenSales.pop();\r\n            }\r\n        }\r\n    }\r\n    function addSale(TokenSale saleAddress) external onlyOwner {\r\n        _tokenSales.push(saleAddress);\r\n    }\r\n\r\n    function howManySales() public view returns (uint256 PoolCount) {\r\n        return _tokenSales.length;\r\n    }\r\n    function changeSaleFee(uint256 newFee) external {\r\n        require(newFee < 100, \"No more than 100 ( 10%)\");\r\n        marsFee = newFee;\r\n    }\r\n\r\n    function changeController(address newController) external {\r\n        require(msg.sender == Controller,\"Must be changed by current controler\");\r\n        Controller = newController;\r\n    }\r\n\r\n    function changeSubFee(uint256 _newSubFee) external onlyOwner {\r\n        subFee = _newSubFee;\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_subFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"Pool\",\"type\":\"address\"}],\"name\":\"createdPartnerPool\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"Controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TokenSale\",\"name\":\"saleAddress\",\"type\":\"address\"}],\"name\":\"addSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newController\",\"type\":\"address\"}],\"name\":\"changeController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeSaleFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newSubFee\",\"type\":\"uint256\"}],\"name\":\"changeSubFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBEP20\",\"name\":\"_offeringToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"basicOffering\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basicRaise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"basicLimit\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endEpoch\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_softCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentToLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lockDays\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"}],\"name\":\"createSale\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"number\",\"type\":\"uint256\"}],\"name\":\"getSale\",\"outputs\":[{\"internalType\":\"contract TokenSale\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"basicRaise\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_listingPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percentToLiquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dec\",\"type\":\"uint256\"}],\"name\":\"getTokensforLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"howManySales\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"PoolCount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marsFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TokenSale\",\"name\":\"saleAddress\",\"type\":\"address\"}],\"name\":\"removeSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "IFOFactory", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000449183e39d76fa4c1f516d3ea2feed3e8c99e8f100000000000000000000000000000000000000000000000000354a6ba7a18000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0afcb2d5e4d66f77c070dfbab0be637aa2065ee27e01068d14296a629cbdae14"}