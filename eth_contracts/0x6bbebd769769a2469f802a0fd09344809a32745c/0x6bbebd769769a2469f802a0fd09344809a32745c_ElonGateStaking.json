{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"ElonGateStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    function transfer(\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 value\\r\\n    );\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    event OwnershipTransferred(\\r\\n        address indexed previousOwner,\\r\\n        address indexed newOwner\\r\\n    );\\r\\n\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract ElonGateStaking is Ownable {\\r\\n    IERC20 public elonGate = IERC20(0xcC6c4F450f1d4aeC71C46f240a6bD50c4E556B8A);\\r\\n    uint256 public totalStaked;\\r\\n\\r\\n    struct UserStake {\\r\\n        uint256 totalAmount;\\r\\n        uint256 lastClaimTime;\\r\\n        uint256 stakingTime;\\r\\n    }\\r\\n\\r\\n    mapping(address => UserStake) public userStakes;\\r\\n\\r\\n    uint256 public constant APY = 5000;\\r\\n    uint256 public constant lockupPeriod = 3 days;\\r\\n\\r\\n    constructor() {\\r\\n    }\\r\\n\\r\\n    function stake(uint256 _amount) external {\\r\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\r\\n\\r\\n        UserStake storage user = userStakes[msg.sender];\\r\\n\\r\\n        if (user.stakingTime == 0) {\\r\\n            user.stakingTime = block.timestamp;\\r\\n        } else {\\r\\n            uint256 rewards = calculateRewards(user);\\r\\n            if (rewards > 0) {\\r\\n                elonGate.transfer(msg.sender, rewards);\\r\\n            }\\r\\n        }\\r\\n        \\r\\n        elonGate.transferFrom(msg.sender, address(this), _amount);\\r\\n        user.totalAmount += _amount;\\r\\n        user.lastClaimTime = block.timestamp;\\r\\n        totalStaked += _amount;\\r\\n    }\\r\\n\\r\\n    function harvest() external {\\r\\n        UserStake storage user = userStakes[msg.sender];\\r\\n        require(user.stakingTime > 0, \\\"You have not staked yet\\\");\\r\\n\\r\\n        uint256 rewards = calculateRewards(user);\\r\\n\\r\\n        user.lastClaimTime = block.timestamp;\\r\\n        \\r\\n        elonGate.transfer(msg.sender, rewards);\\r\\n    }\\r\\n\\r\\n    function withdraw() external {\\r\\n        UserStake storage user = userStakes[msg.sender];\\r\\n        require(user.stakingTime > 0, \\\"You have not staked yet\\\");\\r\\n        require(\\r\\n            block.timestamp >= user.stakingTime + lockupPeriod,\\r\\n            \\\"Lockup period has not ended yet\\\"\\r\\n        );\\r\\n\\r\\n        uint256 amountToWithdraw = user.totalAmount + calculateRewards(user);\\r\\n        elonGate.transfer(msg.sender, amountToWithdraw);\\r\\n        \\r\\n        delete userStakes[msg.sender];\\r\\n    }\\r\\n\\r\\n    function getReward(address _user) external view returns (uint256) {\\r\\n        UserStake storage user = userStakes[_user];\\r\\n\\r\\n        if (user.stakingTime == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 rewards = calculateRewards(user);\\r\\n\\r\\n        return rewards;\\r\\n    }\\r\\n\\r\\n    function calculateRewards(\\r\\n        UserStake storage user\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 currentTime = block.timestamp;\\r\\n        uint256 lastClaimTime = user.lastClaimTime;\\r\\n\\r\\n        if (currentTime <= lastClaimTime) {\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        uint256 timeDiff = currentTime - lastClaimTime;\\r\\n        uint256 rewards = (user.totalAmount * APY * timeDiff) / (100 * 365 days);\\r\\n\\r\\n        return rewards;\\r\\n    }\\r\\n\\r\\n    function emergencyWithdraw() external onlyOwner {\\r\\n        elonGate.transfer(msg.sender, elonGate.balanceOf(address(this)));\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"elonGate\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockupPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastClaimTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakingTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ElonGateStaking", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}