// SPDX-License-Identifier: GPL-3.0
// solhint-disable-next-line
pragma solidity >=0.8.7;
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol";
import "@openzeppelin/contracts/access/AccessControlEnumerable.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/utils/structs/EnumerableSet.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - a commit role that injects random into the process
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the commit
 * role, as well as the default admin role, which will let it grant commit 
 * roles to other accounts.
 */
contract Raffle is Context, AccessControlEnumerable, ERC721Enumerable, Pausable {
    using Counters for Counters.Counter;
    bytes32 public constant GUARDIAN_ROLE = keccak256("GUARDIAN_ROLE");
    using EnumerableSet for EnumerableSet.UintSet;

    Counters.Counter private _tokenIdTracker;

    string private _baseTokenURI;

    bool public uriUnlocked = true;

    ERC721 public holdingTokenContract;

    ERC721 public prizeNftContract;

    mapping(uint256 => bool) public mintedIds;

    struct Roll
    {
        bytes32 commit;
        uint256 blockNumber;
    }

    struct Winner
    {
        uint256 tokenId;
        uint256 prizeTokenId;
        address winnerAddress;
        bool claimed;
    }

    mapping(bytes32 => uint256) public unfinishedRollHashToTimestamp;
    mapping (address => EnumerableSet.UintSet) private userWins;
    Winner[] public winners;

    EnumerableSet.UintSet private prizeTokenIds;

    event RollStarted(bytes32 indexed rollHash, Roll roll);
    event WinnerPicked(uint256 indexed tokenId, uint256 prizeTokenId, address winnerAddress);
    event PrizeClaimed(uint256 indexed tokenId, uint256 prizeTokenId, address winnerAddress);
    event PrizedLoaded(uint256[] tokenIds);

    modifier isGuardian() {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) || hasRole(GUARDIAN_ROLE, _msgSender()), "Must be guardian role");
        _;
    }

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE` and`GUARDIAN_ROLE to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(string memory name, string memory symbol, string memory baseTokenURI, ERC721 holdingTokenContractAddress, ERC721 prizeNftContractAddress) ERC721(name, symbol) {
        _baseTokenURI = baseTokenURI;

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(GUARDIAN_ROLE, _msgSender());

        prizeNftContract = prizeNftContractAddress;
        
        holdingTokenContract = holdingTokenContractAddress;
    }

    function _baseURI() internal view virtual override returns (string memory) {
        return _baseTokenURI;
    }

    function setBaseURI(string memory baseTokenURI) public isGuardian {
        require(uriUnlocked, "Not happening.");
        _baseTokenURI = baseTokenURI;
    }

    function updatePrizeContract(ERC721 prizeNftContractAddress) public isGuardian {
        require(prizeTokenIds.length() == 0, "Still holding NFTs");
        prizeNftContract = prizeNftContractAddress;
    }

    function lockURI() public isGuardian {
        uriUnlocked = false;
    }

    function togglePause() external isGuardian {
        if (paused()) _unpause();
        else _pause();
    }

    function loadPrizes(uint256[] calldata tokenIds) public {
        uint256 length = tokenIds.length;
        for (uint256 i = 0; i < length; i++) {
            prizeTokenIds.add(tokenIds[i]);
            prizeNftContract.transferFrom(msg.sender, address(this), tokenIds[i]);
        }
        emit PrizedLoaded(tokenIds);
    }

    /**
     * @dev Creates a new token for `msg.sender`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the tokenId of the holdingTokenContract
     */
    function mint(uint256 tokenId) public virtual whenNotPaused {
        require(!mintedIds[tokenId], "Already minted");
        require(holdingTokenContract.ownerOf(tokenId) == msg.sender, "Doesn't hold token");

        _mint(msg.sender, _tokenIdTracker.current());
        _tokenIdTracker.increment();
        mintedIds[tokenId] = true;
    }

    function commitSeed(bytes32 commit) public isGuardian  {
        Roll memory roll = createRoll(commit, block.number);
        bytes32 rollHash = calculateRollHash(roll);

        require(unfinishedRollHashToTimestamp[rollHash] == 0, "Bet hash already exists");

        unfinishedRollHashToTimestamp[rollHash] = block.timestamp;

        emit RollStarted(rollHash, roll);
    }

    function revealResult(bytes32 reveal, uint256 blockNumber) public {
        require(prizeTokenIds.length() > 0, "Not enough prizes");
        bytes32 commit = hashBytes(reveal);
        Roll memory roll = createRoll(commit, blockNumber);
        bytes32 rollHash = calculateRollHash(roll);

        uint256 rollTimestamp = unfinishedRollHashToTimestamp[rollHash];
        require(rollTimestamp != 0, "Roll not found");
        unfinishedRollHashToTimestamp[rollHash] = 0;
        
        bytes32 seed = keccak256(abi.encodePacked(reveal, rollHash, blockhash(blockNumber))); 
        uint256 winnerTokenId = _roll(seed, _tokenIdTracker.current());
        uint256 prizeTokenIndex = _roll(seed, prizeTokenIds.length());
        address winner = ownerOf(winnerTokenId);

        userWins[winner].add(winners.length);
        winners.push(Winner({
            winnerAddress: winner,
            tokenId: winnerTokenId,
            prizeTokenId: prizeTokenIds.at(prizeTokenIndex),
            claimed: false
        }));
        emit WinnerPicked(winnerTokenId, prizeTokenIds.at(prizeTokenIndex), winner);
        prizeTokenIds.remove(prizeTokenIds.at(prizeTokenIndex));
    }

    function claim(uint256 winnerIndex) public {
        require(winners[winnerIndex].claimed == false, "Already claimed");
        require(winners[winnerIndex].winnerAddress != address(0), "Winner does not exist");
        // require(winners[winnerIndex].winnerAddress == msg.sender, "Not winner address");
        winners[winnerIndex].claimed = true;
        prizeNftContract.safeTransferFrom(address(this), winners[winnerIndex].winnerAddress, winners[winnerIndex].prizeTokenId);
        emit PrizeClaimed(winners[winnerIndex].tokenId, winners[winnerIndex].prizeTokenId, winners[winnerIndex].winnerAddress);
    }

    function getUserWins(address _user) external view returns (Winner[] memory, uint256[] memory) {
        uint256 len = userWins[_user].length();
        Winner[] memory winArray = new Winner[](len);
        uint256[] memory idArray = new uint256[](len);
        for (uint256 i = 0; i < len; i++) {
            idArray[i] = userWins[_user].at(i);
            winArray[i] = winners[userWins[_user].at(i)];
        }
        return (winArray, idArray);
    }

    function getUserWinIndexes(address _user) external view returns (uint256[] memory) {
        uint256 len = userWins[_user].length();
        uint256[] memory idArray = new uint256[](len);
        for (uint256 i = 0; i < len; i++) {
            idArray[i] = userWins[_user].at(i);
        }
        return idArray;
    }

    function emergencyWithdraw(uint256[] memory tokenIds) external {
        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "Must have admin role");
        uint256 length = tokenIds.length;
        for (uint256 i = 0; i < length; i++) {
            prizeNftContract.safeTransferFrom(address(this), msg.sender, tokenIds[i]);
            prizeTokenIds.remove(tokenIds[i]);
        }
    }

    function createRoll(
        bytes32 commit,
        uint256 blockNumber) private pure returns (Roll memory roll)
    {
        return Roll({
            commit: commit,
            blockNumber: blockNumber
        });
    }

    function calculateRollHash(Roll memory roll) public pure returns (bytes32)
    {
        return keccak256(abi.encode(roll));
    }

    function hashBytes(bytes32 _toHash) public pure returns (bytes32)
    {
        return keccak256(abi.encode(_toHash));
    }

    function getPrizeTokenIds() public view returns (uint256[] memory) {
        return prizeTokenIds.values();
    }

    function _roll(bytes32 seed, uint256 modulo) internal pure returns (uint256) {
        uint256 random = uint256(keccak256(abi.encodePacked(seed)));
        return random % modulo;
    }

    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override(ERC721Enumerable) {
        super._beforeTokenTransfer(from, to, tokenId);
    }

    /**
     * @dev See {IERC165-supportsInterface}.
     */
    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerable, ERC721Enumerable) returns (bool) {
        return super.supportsInterface(interfaceId);
    }
}