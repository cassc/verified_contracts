{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\n/**\r\n *\r\n *  @title: Prospectree Certificate Contract\r\n *  @date: 25-August-2023 \r\n *  @version: 1.0\r\n *  @author: Prospectree Dev Team\r\n */\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\npragma solidity ^0.8.19;\r\n\r\ncontract prospecTreeCertificate is Ownable {\r\n\r\n    // Declare Variables\r\n\r\n    uint256 public certificateIdCounter;\r\n\r\n    // Declare Struct\r\n\r\n    struct certificate {\r\n        uint256 certificateId;\r\n        bytes32 certificateHash;\r\n        address certificateOwner;\r\n        uint256 noOfTrees;\r\n        bool certificateStatus;\r\n    }\r\n\r\n    // Declare mappings\r\n\r\n    mapping (address => uint256[]) public certificatesBy;\r\n    mapping (address => bool) public adminPermissions;\r\n    mapping (uint256 => certificate) public certificateRecords;\r\n\r\n    // Add modifier\r\n\r\n    modifier AdminRequired {\r\n      require((adminPermissions[msg.sender] == true) || (_msgSender()== owner()), \"Not allowed\");\r\n      _;\r\n   }\r\n\r\n    // Constructor\r\n\r\n    constructor() public {\r\n        certificateIdCounter=10000000;\r\n    }\r\n\r\n    // SETTER FUNCTIONS\r\n\r\n    // Register a certificate\r\n\r\n    function registerCertificate(bytes32 certificateHash, address certificateOwner, uint256 _noOfTrees) public AdminRequired {\r\n        certificate memory newCertificate = certificate(certificateIdCounter, certificateHash, certificateOwner, _noOfTrees, true);\r\n        certificateRecords[certificateIdCounter] = (newCertificate);\r\n\t    certificatesBy[certificateOwner].push(certificateIdCounter);\r\n        certificateIdCounter = certificateIdCounter + 1;\r\n    }\r\n\r\n    // Revoke a certificate\r\n\r\n    function revokeCertificate(uint256 _certificateID) public AdminRequired{\r\n        certificateRecords[_certificateID].certificateStatus = false;\r\n    }\r\n\r\n    // Add Admins\r\n\r\n    function addAdmins(address _admin, bool _status) public {\r\n        require (_msgSender()== owner(), \"Only Owner\");\r\n        adminPermissions[_admin] = _status;\r\n\r\n    }\r\n\r\n    // RETRIEVE FUNCTIONS\r\n\r\n    // Retrieve certificate\r\n\r\n    function retrieveCertificate(uint256 _certificateID) public view returns (uint256, bytes32, address, uint256, bool) {\r\n        return (certificateRecords[_certificateID].certificateId, certificateRecords[_certificateID].certificateHash, certificateRecords[_certificateID].certificateOwner, certificateRecords[_certificateID].noOfTrees, certificateRecords[_certificateID].certificateStatus);\r\n    }\r\n\r\n    // Retrieve certificate owned by an address\r\n\r\n    function retrieveCertificatesOwnedBy(address _certificateOwner) public view returns (uint256[] memory) {\r\n        return (certificatesBy[_certificateOwner]);\r\n    }\r\n\r\n    // Retrieve Certificate Status\r\n\r\n    function retrieveCertificateStatus(uint256 _certificateID) public view returns (bool) {\r\n        return (certificateRecords[_certificateID].certificateStatus);\r\n    }\r\n\r\n    // Retrieve Certificate Owner\r\n\r\n    function retrieveCertificateOwner(uint256 _certificateID) public view returns (address) {\r\n        return (certificateRecords[_certificateID].certificateOwner);\r\n    }\r\n\r\n    // Retrieve Certificate NoofTrees\r\n\r\n    function retrieveCertificateNoTrees(uint256 _certificateID) public view returns (uint256) {\r\n        return (certificateRecords[_certificateID].noOfTrees);\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"addAdmins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"adminPermissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"certificateIdCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"certificateRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"certificateHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"certificateOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"noOfTrees\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"certificateStatus\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"certificatesBy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"certificateHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"certificateOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_noOfTrees\",\"type\":\"uint256\"}],\"name\":\"registerCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateID\",\"type\":\"uint256\"}],\"name\":\"retrieveCertificate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateID\",\"type\":\"uint256\"}],\"name\":\"retrieveCertificateNoTrees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateID\",\"type\":\"uint256\"}],\"name\":\"retrieveCertificateOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateID\",\"type\":\"uint256\"}],\"name\":\"retrieveCertificateStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_certificateOwner\",\"type\":\"address\"}],\"name\":\"retrieveCertificatesOwnedBy\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_certificateID\",\"type\":\"uint256\"}],\"name\":\"revokeCertificate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "prospecTreeCertificate", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://175e1ceea60e60f6818c449a48d10e60c740ca02ec90f985878bf1668e6a3c19"}