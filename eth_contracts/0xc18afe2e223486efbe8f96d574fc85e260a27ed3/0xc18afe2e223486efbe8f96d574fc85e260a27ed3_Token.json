{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@semaphore-protocol/contracts/base/Pairing.sol\": {\r\n      \"content\": \"// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \\\"Software\\\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n//\\n// The following Pairing library is a modified version adapted to Semaphore.\\n//\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary Pairing {\\n    error InvalidProof();\\n\\n    // The prime q in the base field F_q for G1\\n    uint256 constant BASE_MODULUS = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // The prime modulus of the scalar field of G1.\\n    uint256 constant SCALAR_MODULUS = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /// @return the generator of G1\\n    function P1() public pure returns (G1Point memory) {\\n        return G1Point(1, 2);\\n    }\\n\\n    /// @return the generator of G2\\n    function P2() public pure returns (G2Point memory) {\\n        return\\n            G2Point(\\n                [\\n                    11559732032986387107991004021392285783925812861821192530917403151452391805634,\\n                    10857046999023057135944570762232829481370756359578518086990519993285655852781\\n                ],\\n                [\\n                    4082367875863433681332203403145435568316851327593401208105741076214120093531,\\n                    8495653923123431417604973247489272438418190587263600148770280649306958101930\\n                ]\\n            );\\n    }\\n\\n    /// @return r the negation of p, i.e. p.addition(p.negate()) should be zero.\\n    function negate(G1Point memory p) public pure returns (G1Point memory r) {\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        }\\n\\n        // Validate input or revert\\n        if (p.X >= BASE_MODULUS || p.Y >= BASE_MODULUS) {\\n            revert InvalidProof();\\n        }\\n\\n        // We know p.Y > 0 and p.Y < BASE_MODULUS.\\n        return G1Point(p.X, BASE_MODULUS - p.Y);\\n    }\\n\\n    /// @return r the sum of two points of G1\\n    function addition(G1Point memory p1, G1Point memory p2) public view returns (G1Point memory r) {\\n        // By EIP-196 all input is validated to be less than the BASE_MODULUS and form points\\n        // on the curve.\\n        uint256[4] memory input;\\n\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n        }\\n\\n        if (!success) {\\n            revert InvalidProof();\\n        }\\n    }\\n\\n    /// @return r the product of a point on G1 and a scalar, i.e.\\n    /// p == p.scalar_mul(1) and p.addition(p) == p.scalar_mul(2) for all points p.\\n    function scalar_mul(G1Point memory p, uint256 s) public view returns (G1Point memory r) {\\n        // By EIP-196 the values p.X and p.Y are verified to be less than the BASE_MODULUS and\\n        // form a valid point on the curve. But the scalar is not verified, so we do that explicitly.\\n        if (s >= SCALAR_MODULUS) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256[3] memory input;\\n\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n        }\\n\\n        if (!success) {\\n            revert InvalidProof();\\n        }\\n    }\\n\\n    /// Asserts the pairing check\\n    /// e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n    /// For example pairing([P1(), P1().negate()], [P2(), P2()]) should succeed\\n    function pairingCheck(G1Point[] memory p1, G2Point[] memory p2) public view {\\n        // By EIP-197 all input is verified to be less than the BASE_MODULUS and form elements in their\\n        // respective groups of the right order.\\n        if (p1.length != p2.length) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256 elements = p1.length;\\n        uint256 inputSize = elements * 6;\\n        uint256[] memory input = new uint256[](inputSize);\\n\\n        for (uint256 i = 0; i < elements; i++) {\\n            input[i * 6 + 0] = p1[i].X;\\n            input[i * 6 + 1] = p1[i].Y;\\n            input[i * 6 + 2] = p2[i].X[0];\\n            input[i * 6 + 3] = p2[i].X[1];\\n            input[i * 6 + 4] = p2[i].Y[0];\\n            input[i * 6 + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n        }\\n\\n        if (!success || out[0] != 1) {\\n            revert InvalidProof();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@semaphore-protocol/contracts/base/SemaphoreGroups.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../interfaces/ISemaphoreGroups.sol\\\";\\nimport \\\"@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Semaphore groups contract.\\n/// @dev This contract allows you to create groups, add, remove and update members.\\n/// You can use getters to obtain informations about groups (root, depth, number of leaves).\\nabstract contract SemaphoreGroups is Context, ISemaphoreGroups {\\n    using IncrementalBinaryTree for IncrementalTreeData;\\n\\n    /// @dev Gets a group id and returns the tree data.\\n    mapping(uint256 => IncrementalTreeData) internal merkleTrees;\\n\\n    /// @dev Creates a new group by initializing the associated tree.\\n    /// @param groupId: Id of the group.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    function _createGroup(uint256 groupId, uint256 merkleTreeDepth) internal virtual {\\n        if (getMerkleTreeDepth(groupId) != 0) {\\n            revert Semaphore__GroupAlreadyExists();\\n        }\\n\\n        // The zeroValue is an implicit member of the group, or an implicit leaf of the Merkle tree.\\n        // Although there is a remote possibility that the preimage of\\n        // the hash may be calculated, using this value we aim to minimize the risk.\\n        uint256 zeroValue = uint256(keccak256(abi.encodePacked(groupId))) >> 8;\\n\\n        merkleTrees[groupId].init(merkleTreeDepth, zeroValue);\\n\\n        emit GroupCreated(groupId, merkleTreeDepth, zeroValue);\\n    }\\n\\n    /// @dev Adds an identity commitment to an existing group.\\n    /// @param groupId: Id of the group.\\n    /// @param identityCommitment: New identity commitment.\\n    function _addMember(uint256 groupId, uint256 identityCommitment) internal virtual {\\n        if (getMerkleTreeDepth(groupId) == 0) {\\n            revert Semaphore__GroupDoesNotExist();\\n        }\\n\\n        merkleTrees[groupId].insert(identityCommitment);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(groupId);\\n        uint256 index = getNumberOfMerkleTreeLeaves(groupId) - 1;\\n\\n        emit MemberAdded(groupId, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Updates an identity commitment of an existing group. A proof of membership is\\n    /// needed to check if the node to be updated is part of the tree.\\n    /// @param groupId: Id of the group.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _updateMember(\\n        uint256 groupId,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeDepth(groupId) == 0) {\\n            revert Semaphore__GroupDoesNotExist();\\n        }\\n\\n        merkleTrees[groupId].update(identityCommitment, newIdentityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(groupId);\\n        uint256 index = proofPathIndicesToMemberIndex(proofPathIndices);\\n\\n        emit MemberUpdated(groupId, index, identityCommitment, newIdentityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev Removes an identity commitment from an existing group. A proof of membership is\\n    /// needed to check if the node to be deleted is part of the tree.\\n    /// @param groupId: Id of the group.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function _removeMember(\\n        uint256 groupId,\\n        uint256 identityCommitment,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) internal virtual {\\n        if (getMerkleTreeDepth(groupId) == 0) {\\n            revert Semaphore__GroupDoesNotExist();\\n        }\\n\\n        merkleTrees[groupId].remove(identityCommitment, proofSiblings, proofPathIndices);\\n\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(groupId);\\n        uint256 index = proofPathIndicesToMemberIndex(proofPathIndices);\\n\\n        emit MemberRemoved(groupId, index, identityCommitment, merkleTreeRoot);\\n    }\\n\\n    /// @dev See {ISemaphoreGroups-getMerkleTreeRoot}.\\n    function getMerkleTreeRoot(uint256 groupId) public view virtual override returns (uint256) {\\n        return merkleTrees[groupId].root;\\n    }\\n\\n    /// @dev See {ISemaphoreGroups-getMerkleTreeDepth}.\\n    function getMerkleTreeDepth(uint256 groupId) public view virtual override returns (uint256) {\\n        return merkleTrees[groupId].depth;\\n    }\\n\\n    /// @dev See {ISemaphoreGroups-getNumberOfMerkleTreeLeaves}.\\n    function getNumberOfMerkleTreeLeaves(uint256 groupId) public view virtual override returns (uint256) {\\n        return merkleTrees[groupId].numberOfLeaves;\\n    }\\n\\n    /// @dev Converts the path indices of a Merkle proof to the identity commitment index in the tree.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return Index of a group member.\\n    function proofPathIndicesToMemberIndex(uint8[] calldata proofPathIndices) private pure returns (uint256) {\\n        uint256 memberIndex = 0;\\n\\n        for (uint8 i = uint8(proofPathIndices.length); i > 0; ) {\\n            if (memberIndex > 0 || proofPathIndices[i - 1] != 0) {\\n                memberIndex *= 2;\\n\\n                if (proofPathIndices[i - 1] == 1) {\\n                    memberIndex += 1;\\n                }\\n            }\\n\\n            unchecked {\\n                --i;\\n            }\\n        }\\n\\n        return memberIndex;\\n    }\\n}\\n\"\r\n    },\r\n    \"@semaphore-protocol/contracts/interfaces/ISemaphoreGroups.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\n/// @title SemaphoreGroups contract interface.\\ninterface ISemaphoreGroups {\\n    error Semaphore__GroupDoesNotExist();\\n    error Semaphore__GroupAlreadyExists();\\n\\n    /// @dev Emitted when a new group is created.\\n    /// @param groupId: Id of the group.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    /// @param zeroValue: Zero value of the tree.\\n    event GroupCreated(uint256 indexed groupId, uint256 merkleTreeDepth, uint256 zeroValue);\\n\\n    /// @dev Emitted when a new identity commitment is added.\\n    /// @param groupId: Group id of the group.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event MemberAdded(uint256 indexed groupId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Emitted when an identity commitment is updated.\\n    /// @param groupId: Group id of the group.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be updated.\\n    /// @param newIdentityCommitment: New identity commitment.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event MemberUpdated(\\n        uint256 indexed groupId,\\n        uint256 index,\\n        uint256 identityCommitment,\\n        uint256 newIdentityCommitment,\\n        uint256 merkleTreeRoot\\n    );\\n\\n    /// @dev Emitted when a new identity commitment is removed.\\n    /// @param groupId: Group id of the group.\\n    /// @param index: Identity commitment index.\\n    /// @param identityCommitment: Existing identity commitment to be removed.\\n    /// @param merkleTreeRoot: New root hash of the tree.\\n    event MemberRemoved(uint256 indexed groupId, uint256 index, uint256 identityCommitment, uint256 merkleTreeRoot);\\n\\n    /// @dev Returns the last root hash of a group.\\n    /// @param groupId: Id of the group.\\n    /// @return Root hash of the group.\\n    function getMerkleTreeRoot(uint256 groupId) external view returns (uint256);\\n\\n    /// @dev Returns the depth of the tree of a group.\\n    /// @param groupId: Id of the group.\\n    /// @return Depth of the group tree.\\n    function getMerkleTreeDepth(uint256 groupId) external view returns (uint256);\\n\\n    /// @dev Returns the number of tree leaves of a group.\\n    /// @param groupId: Id of the group.\\n    /// @return Number of tree leaves.\\n    function getNumberOfMerkleTreeLeaves(uint256 groupId) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@semaphore-protocol/contracts/interfaces/ISemaphoreVerifier.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"../base/Pairing.sol\\\";\\n\\n/// @title SemaphoreVerifier contract interface.\\ninterface ISemaphoreVerifier {\\n    struct VerificationKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        Pairing.G1Point[] IC;\\n    }\\n\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n    }\\n\\n    /// @dev Verifies whether a Semaphore proof is valid.\\n    /// @param merkleTreeRoot: Root of the Merkle tree.\\n    /// @param nullifierHash: Nullifier hash.\\n    /// @param signal: Semaphore signal.\\n    /// @param externalNullifier: External nullifier.\\n    /// @param proof: Zero-knowledge proof.\\n    /// @param merkleTreeDepth: Depth of the tree.\\n    function verifyProof(\\n        uint256 merkleTreeRoot,\\n        uint256 nullifierHash,\\n        uint256 signal,\\n        uint256 externalNullifier,\\n        uint256[8] calldata proof,\\n        uint256 merkleTreeDepth\\n    ) external view;\\n}\\n\"\r\n    },\r\n    \"@zk-kit/incremental-merkle-tree.sol/Hashes.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nlibrary PoseidonT3 {\\n    function poseidon(uint256[2] memory) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonT6 {\\n    function poseidon(uint256[5] memory) public pure returns (uint256) {}\\n}\\n\"\r\n    },\r\n    \"@zk-kit/incremental-merkle-tree.sol/IncrementalBinaryTree.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {PoseidonT3} from \\\"./Hashes.sol\\\";\\n\\n// Each incremental tree has certain properties and data that will\\n// be used to add new leaves.\\nstruct IncrementalTreeData {\\n    uint256 depth; // Depth of the tree (levels - 1).\\n    uint256 root; // Root hash of the tree.\\n    uint256 numberOfLeaves; // Number of leaves of the tree.\\n    mapping(uint256 => uint256) zeroes; // Zero hashes used for empty nodes (level -> zero hash).\\n    // The nodes of the subtrees used in the last addition of a leaf (level -> [left node, right node]).\\n    mapping(uint256 => uint256[2]) lastSubtrees; // Caching these values is essential to efficient appends.\\n}\\n\\n/// @title Incremental binary Merkle tree.\\n/// @dev The incremental tree allows to calculate the root hash each time a leaf is added, ensuring\\n/// the integrity of the tree.\\nlibrary IncrementalBinaryTree {\\n    uint8 internal constant MAX_DEPTH = 32;\\n    uint256 internal constant SNARK_SCALAR_FIELD =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    /// @dev Initializes a tree.\\n    /// @param self: Tree data.\\n    /// @param depth: Depth of the tree.\\n    /// @param zero: Zero value to be used.\\n    function init(\\n        IncrementalTreeData storage self,\\n        uint256 depth,\\n        uint256 zero\\n    ) public {\\n        require(zero < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(depth > 0 && depth <= MAX_DEPTH, \\\"IncrementalBinaryTree: tree depth must be between 1 and 32\\\");\\n\\n        self.depth = depth;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            self.zeroes[i] = zero;\\n            zero = PoseidonT3.poseidon([zero, zero]);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = zero;\\n    }\\n\\n    /// @dev Inserts a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be inserted.\\n    function insert(IncrementalTreeData storage self, uint256 leaf) public {\\n        uint256 depth = self.depth;\\n\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(self.numberOfLeaves < 2**depth, \\\"IncrementalBinaryTree: tree is full\\\");\\n\\n        uint256 index = self.numberOfLeaves;\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            if (index & 1 == 0) {\\n                self.lastSubtrees[i] = [hash, self.zeroes[i]];\\n            } else {\\n                self.lastSubtrees[i][1] = hash;\\n            }\\n\\n            hash = PoseidonT3.poseidon(self.lastSubtrees[i]);\\n            index >>= 1;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        self.root = hash;\\n        self.numberOfLeaves += 1;\\n    }\\n\\n    /// @dev Updates a leaf in the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be updated.\\n    /// @param newLeaf: New leaf.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function update(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256 newLeaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        require(newLeaf != leaf, \\\"IncrementalBinaryTree: new leaf cannot be the same as the old one\\\");\\n        require(newLeaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: new leaf must be < SNARK_SCALAR_FIELD\\\");\\n        require(\\n            verify(self, leaf, proofSiblings, proofPathIndices),\\n            \\\"IncrementalBinaryTree: leaf is not part of the tree\\\"\\n        );\\n\\n        uint256 depth = self.depth;\\n        uint256 hash = newLeaf;\\n        uint256 updateIndex;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            updateIndex |= uint256(proofPathIndices[i]) << uint256(i);\\n\\n            if (proofPathIndices[i] == 0) {\\n                if (proofSiblings[i] == self.lastSubtrees[i][1]) {\\n                    self.lastSubtrees[i][0] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                if (proofSiblings[i] == self.lastSubtrees[i][0]) {\\n                    self.lastSubtrees[i][1] = hash;\\n                }\\n\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        require(updateIndex < self.numberOfLeaves, \\\"IncrementalBinaryTree: leaf index out of range\\\");\\n\\n        self.root = hash;\\n    }\\n\\n    /// @dev Removes a leaf from the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    function remove(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) public {\\n        update(self, leaf, self.zeroes[0], proofSiblings, proofPathIndices);\\n    }\\n\\n    /// @dev Verify if the path is correct and the leaf is part of the tree.\\n    /// @param self: Tree data.\\n    /// @param leaf: Leaf to be removed.\\n    /// @param proofSiblings: Array of the sibling nodes of the proof of membership.\\n    /// @param proofPathIndices: Path of the proof of membership.\\n    /// @return True or false.\\n    function verify(\\n        IncrementalTreeData storage self,\\n        uint256 leaf,\\n        uint256[] calldata proofSiblings,\\n        uint8[] calldata proofPathIndices\\n    ) private view returns (bool) {\\n        require(leaf < SNARK_SCALAR_FIELD, \\\"IncrementalBinaryTree: leaf must be < SNARK_SCALAR_FIELD\\\");\\n        uint256 depth = self.depth;\\n        require(\\n            proofPathIndices.length == depth && proofSiblings.length == depth,\\n            \\\"IncrementalBinaryTree: length of path is not correct\\\"\\n        );\\n\\n        uint256 hash = leaf;\\n\\n        for (uint8 i = 0; i < depth; ) {\\n            require(\\n                proofSiblings[i] < SNARK_SCALAR_FIELD,\\n                \\\"IncrementalBinaryTree: sibling node must be < SNARK_SCALAR_FIELD\\\"\\n            );\\n\\n            require(\\n                proofPathIndices[i] == 1 || proofPathIndices[i] == 0,\\n                \\\"IncrementalBinaryTree: path index is neither 0 nor 1\\\"\\n            );\\n\\n            if (proofPathIndices[i] == 0) {\\n                hash = PoseidonT3.poseidon([hash, proofSiblings[i]]);\\n            } else {\\n                hash = PoseidonT3.poseidon([proofSiblings[i], hash]);\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        return hash == self.root;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Interfaces/iMixer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @title Semaphore contract interface.\\r\\ninterface IMixer {\\r\\n    error Semaphore__MerkleTreeDepthIsNotSupported();\\r\\n    error Semaphore__MerkleTreeRootIsExpired();\\r\\n    error Semaphore__MerkleTreeRootIsNotPartOfTheGroup();\\r\\n    error Semaphore__YouAreUsingTheSameNillifierTwice();\\r\\n\\r\\n    struct Group {\\r\\n        uint256 denomination;\\r\\n        mapping(uint256 => uint256) merkleRootCreationDates;\\r\\n        mapping(uint256 => bool) nullifierHashes;\\r\\n        uint256 totalDeposits;\\r\\n        uint256 relayerFeeNum;\\r\\n        uint256 relayerFeeDen;\\r\\n        uint256 taxFeeNum;\\r\\n        uint256 taxFeeDen;\\r\\n    }\\r\\n\\r\\n    event deposited(\\r\\n        address indexed depositor,\\r\\n        uint256 indexed amount,\\r\\n        uint256 indexed poolId,\\r\\n        uint256 timeStamp\\r\\n    );\\r\\n\\r\\n    event depositedReferral(\\r\\n        address indexed referralAddress,\\r\\n        uint256 indexed amount,\\r\\n        uint256 indexed poolId,\\r\\n        uint256 referralFee,\\r\\n        address depositor,\\r\\n        uint256 timeStamp\\r\\n\\r\\n    );\\r\\n\\r\\n    event claimed(\\r\\n        address indexed sendTo,\\r\\n        uint256 indexed amount,\\r\\n        uint256 indexed poolId,\\r\\n        uint256 timeStamp\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when the Merkle tree duration of a group is updated.\\r\\n    /// @param groupId: Id of the group.\\r\\n    /// @param oldMerkleTreeDuration: Old Merkle tree duration of the group.\\r\\n    /// @param newMerkleTreeDuration: New Merkle tree duration of the group.\\r\\n    event GroupMerkleTreeDurationUpdated(\\r\\n        uint256 indexed groupId,\\r\\n        uint256 oldMerkleTreeDuration,\\r\\n        uint256 newMerkleTreeDuration\\r\\n    );\\r\\n\\r\\n    /// @dev Emitted when a Semaphore proof is verified.\\r\\n    /// @param groupId: Id of the group.\\r\\n    /// @param merkleTreeRoot: Root of the Merkle tree.\\r\\n    /// @param nullifierHash: Nullifier hash.\\r\\n    /// @param externalNullifier: External nullifier.\\r\\n    /// @param signal: Semaphore signal.\\r\\n    event ProofVerified(\\r\\n        uint256 indexed groupId,\\r\\n        uint256 indexed merkleTreeRoot,\\r\\n        uint256 nullifierHash,\\r\\n        uint256 indexed externalNullifier,\\r\\n        uint256 signal\\r\\n    );\\r\\n\\r\\n    /// @dev Saves the nullifier hash to avoid double signaling and emits an event\\r\\n    /// if the zero-knowledge proof is valid.\\r\\n    /// @param groupId: Id of the group.\\r\\n    /// @param merkleTreeRoot: Root of the Merkle tree.\\r\\n    /// @param signal: Semaphore signal.\\r\\n    /// @param nullifierHash: Nullifier hash.\\r\\n    /// @param externalNullifier: External nullifier.\\r\\n    /// @param proof: Zero-knowledge proof.\\r\\n    function verifyProof(\\r\\n        uint256 groupId,\\r\\n        uint256 merkleTreeRoot,\\r\\n        uint256 signal,\\r\\n        uint256 nullifierHash,\\r\\n        uint256 externalNullifier,\\r\\n        uint256[8] calldata proof,\\r\\n        bool calledByRelayer\\r\\n    ) external;\\r\\n\\r\\n    // /// @dev Creates a new group.\\r\\n    // /// @param groupId: Id of the group.\\r\\n    // /// @param depth: Depth of the tree.\\r\\n    // function createGroup(uint256 groupId, uint256 depth) external;\\r\\n\\r\\n    /// @dev Creates a new group.\\r\\n    /// @param groupId: Id of the group.\\r\\n    /// @param depth: Depth of the tree.\\r\\n    /// @param denomination: Denomination of the tree.\\r\\n    function createGroup(\\r\\n        uint256 groupId,\\r\\n        uint256 depth,\\r\\n        uint256 denomination\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Updates the Merkle tree duration.\\r\\n    /// @param newMerkleTreeDuration: New Merkle tree duration.\\r\\n    function updateMerkleTreeDuration(uint256 newMerkleTreeDuration) external;\\r\\n\\r\\n    /// @dev Adds a new member to an existing group.\\r\\n    /// @param groupId: Id of the group.\\r\\n    /// @param identityCommitment: New identity commitment.\\r\\n    /// @param referralAddress: referral address.\\r\\n\\r\\n    function addMember(\\r\\n        uint256 groupId,\\r\\n        uint256 identityCommitment,\\r\\n        address referralAddress\\r\\n    ) external payable;\\r\\n\\r\\n    // /// @dev Adds new members to an existing group.\\r\\n    // /// @param groupId: Id of the group.\\r\\n    // /// @param identityCommitments: New identity commitments.\\r\\n    // /// @param referralAddress: referral address.\\r\\n\\r\\n    // function addMembers(\\r\\n    //     uint256 groupId,\\r\\n    //     uint256[] calldata identityCommitments,\\r\\n    //     address referralAddress\\r\\n\\r\\n    // ) external payable;\\r\\n\\r\\n    /// @dev Update relayer fee.\\r\\n    /// @param _relayerFeeNum: relayer fee numerator.\\r\\n    /// @param _relayerFeeDen: relayer fee denominator.\\r\\n    /// @param _groupId: group id.\\r\\n\\r\\n    function updateRelayerFee(\\r\\n        uint256 _relayerFeeNum,\\r\\n        uint256 _relayerFeeDen,\\r\\n        uint256 _groupId\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Update tax fee.\\r\\n    /// @param _taxFeeNum: tax fee numerator.\\r\\n    /// @param _taxFeeDen: tax fee denominator.\\r\\n    /// @param _groupId: group id.\\r\\n\\r\\n    function updateTaxFee(\\r\\n        uint256 _taxFeeNum,\\r\\n        uint256 _taxFeeDen,\\r\\n        uint256 _groupId\\r\\n    ) external;\\r\\n\\r\\n       /// @dev Update referral fee.\\r\\n    /// @param _referralFeeNum: referral fee numerator.\\r\\n    /// @param _referralFeeDen: referral fee denominator.\\r\\n\\r\\n    function updateReferralFee(\\r\\n        uint256 _referralFeeNum,\\r\\n        uint256 _referralFeeDen\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Mixer.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\nimport \\\"@semaphore-protocol/contracts/interfaces/ISemaphoreVerifier.sol\\\";\\r\\nimport \\\"@semaphore-protocol/contracts/base/SemaphoreGroups.sol\\\";\\r\\nimport \\\"./Interfaces/iMixer.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./staking.sol\\\";\\r\\n\\r\\ncontract Mixer is IMixer, SemaphoreGroups, Ownable {\\r\\n    ISemaphoreVerifier public verifier;\\r\\n    // uint256[30] public merkleTreeRootHistory;\\r\\n    uint256 merkleTreeHistoryDuration = 1 hours;\\r\\n\\r\\n    // uint256 relayerFeeNum = 100;\\r\\n    // uint256 relayerFeeDen = 1000;\\r\\n\\r\\n    // uint256 taxFeeNum = 100;\\r\\n    // uint256 taxFeeDen = 1000;\\r\\n\\r\\n    uint256 referralFeeNum = 200;\\r\\n    uint256 referralFeeDen = 1000;\\r\\n\\r\\n    mapping(uint256 => Group) public groups;\\r\\n\\r\\n    mapping(uint256 => bool) public commitmentUsed;\\r\\n\\r\\n    address public stakingContract;\\r\\n\\r\\n    uint256 public totalDeposits;\\r\\n\\r\\n    mapping(uint256 => uint256) public commitmentDate;\\r\\n    mapping(uint256 => uint256) public nullifierDate;\\r\\n    mapping(uint256 => uint256) public commitmentGroup;\\r\\n\\r\\n    modifier onlySupportedMerkleTreeDepth(uint256 merkleTreeDepth) {\\r\\n        if (merkleTreeDepth < 16 || merkleTreeDepth > 32) {\\r\\n            revert Semaphore__MerkleTreeDepthIsNotSupported();\\r\\n        }\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        ISemaphoreVerifier _verifier,\\r\\n        uint256 merkleTreeDepth,\\r\\n        address _stakingContract\\r\\n    ) onlySupportedMerkleTreeDepth(merkleTreeDepth) {\\r\\n        verifier = _verifier;\\r\\n        _createGroup(1, merkleTreeDepth);\\r\\n\\r\\n        groups[1].denomination = 10000000 wei;\\r\\n        groups[1].relayerFeeNum = 100;\\r\\n        groups[1].relayerFeeDen = 1000;\\r\\n        groups[1].taxFeeNum = 100;\\r\\n        groups[1].taxFeeDen = 1000;\\r\\n\\r\\n        _createGroup(2, merkleTreeDepth);\\r\\n        groups[2].denomination = 10000000000 wei;\\r\\n        groups[2].relayerFeeNum = 100;\\r\\n        groups[2].relayerFeeDen = 1000;\\r\\n        groups[2].taxFeeNum = 100;\\r\\n        groups[2].taxFeeDen = 1000;\\r\\n\\r\\n        _createGroup(3, merkleTreeDepth);\\r\\n        groups[3].denomination = 100000000000 wei;\\r\\n        groups[3].relayerFeeNum = 100;\\r\\n        groups[3].relayerFeeDen = 1000;\\r\\n        groups[3].taxFeeNum = 100;\\r\\n        groups[3].taxFeeDen = 1000;\\r\\n\\r\\n        _createGroup(4, merkleTreeDepth);\\r\\n        groups[4].denomination = 1000000000000 wei;\\r\\n        groups[4].relayerFeeNum = 100;\\r\\n        groups[4].relayerFeeDen = 1000;\\r\\n        groups[4].taxFeeNum = 100;\\r\\n        groups[4].taxFeeDen = 1000;\\r\\n\\r\\n        stakingContract = _stakingContract;\\r\\n    }\\r\\n\\r\\n    function getRelayerFee(\\r\\n        uint256 groupId\\r\\n    ) public view returns (uint256 relayerFee) {\\r\\n        relayerFee =\\r\\n            (groups[groupId].relayerFeeNum * groups[groupId].denomination) /\\r\\n            groups[groupId].relayerFeeDen;\\r\\n    }\\r\\n\\r\\n    function getTaxFee(uint256 groupId) public view returns (uint256 taxFee) {\\r\\n        taxFee =\\r\\n            (groups[groupId].taxFeeNum * groups[groupId].denomination) /\\r\\n            groups[groupId].taxFeeDen;\\r\\n    }\\r\\n\\r\\n    function getReferralFee(uint256 groupId) public view returns (uint256 referralFee) {\\r\\n        uint256 taxFee = getTaxFee(groupId);\\r\\n\\r\\n        referralFee = (referralFeeNum* taxFee) / referralFeeDen;\\r\\n\\r\\n    }\\r\\n\\r\\n    function updateMerkleTreeDuration(\\r\\n        uint256 newMerkleTreeDuration\\r\\n    ) external override onlyOwner {\\r\\n        merkleTreeHistoryDuration = newMerkleTreeDuration;\\r\\n    }\\r\\n\\r\\n    function createGroup(\\r\\n        uint256 groupId,\\r\\n        uint256 merkleTreeDepth,\\r\\n        uint256 denomination\\r\\n    )\\r\\n        external\\r\\n        override\\r\\n        onlySupportedMerkleTreeDepth(merkleTreeDepth)\\r\\n        onlyOwner\\r\\n    {\\r\\n        require(denomination > 0, \\\"Invalid denomination\\\");\\r\\n        require(groupId != 0, \\\"group id cannot be 0\\\");\\r\\n\\r\\n        _createGroup(groupId, merkleTreeDepth);\\r\\n\\r\\n        groups[groupId].denomination = denomination;\\r\\n    }\\r\\n\\r\\n    function addMember(\\r\\n        uint256 groupId,\\r\\n        uint256 identityCommitment,\\r\\n        address referralAddress\\r\\n    ) external payable override {\\r\\n        require(\\r\\n            msg.value == groups[groupId].denomination,\\r\\n            \\\"Invalid value submitted\\\"\\r\\n        );\\r\\n        require(\\r\\n            commitmentUsed[identityCommitment] == false,\\r\\n            \\\"This commitment has already been used\\\"\\r\\n        );\\r\\n\\r\\n        _addMember(groupId, identityCommitment);\\r\\n        uint256 merkleTreeRoot = getMerkleTreeRoot(groupId);\\r\\n\\r\\n        groups[groupId].merkleRootCreationDates[merkleTreeRoot] = block\\r\\n            .timestamp;\\r\\n        commitmentUsed[identityCommitment] = true;\\r\\n        commitmentDate[identityCommitment] = block.timestamp;\\r\\n        commitmentGroup[identityCommitment] = groupId;\\r\\n\\r\\n        uint256 tax =0;\\r\\n\\r\\n        if (referralAddress != address(0)){\\r\\n\\r\\n          uint256 taxFee = getTaxFee(groupId);\\r\\n          uint256 referralFee = getReferralFee(groupId);\\r\\n\\r\\n          tax = taxFee - referralFee;\\r\\n\\r\\n         (bool os, ) = payable(referralAddress).call{value: referralFee}(\\\"\\\");\\r\\n            require(os);\\r\\n\\r\\n        emit depositedReferral(\\r\\n            referralAddress,\\r\\n            groups[groupId].denomination,\\r\\n            groupId,\\r\\n            referralFee,\\r\\n            msg.sender,\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n\\r\\n        }\\r\\n        else {\\r\\n\\r\\n          tax = getTaxFee(groupId);\\r\\n\\r\\n        }\\r\\n\\r\\n        uint256 totalStaked = Staking(payable(stakingContract)).totalStaked();\\r\\n\\r\\n        if (totalStaked == 0) {\\r\\n            (bool os, ) = payable(owner()).call{value: tax}(\\\"\\\");\\r\\n\\r\\n            require(os);\\r\\n        } else {\\r\\n            (bool os, ) = payable(stakingContract).call{value: tax}(\\\"\\\");\\r\\n\\r\\n            require(os);\\r\\n        }\\r\\n\\r\\n        groups[groupId].totalDeposits++;\\r\\n        totalDeposits++;\\r\\n\\r\\n        emit deposited(\\r\\n            msg.sender,\\r\\n            groups[groupId].denomination,\\r\\n            groupId,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateRelayerFee(\\r\\n        uint256 _relayerFeeNum,\\r\\n        uint256 _relayerFeeDen,\\r\\n        uint256 _groupId\\r\\n    ) external override onlyOwner {\\r\\n        require(groups[_groupId].denomination > 0, \\\"Invalid group Id\\\");\\r\\n\\r\\n        groups[_groupId].relayerFeeDen = _relayerFeeDen;\\r\\n        groups[_groupId].relayerFeeNum = _relayerFeeNum;\\r\\n    }\\r\\n\\r\\n    function updateTaxFee(\\r\\n        uint256 _taxFeeNum,\\r\\n        uint256 _taxFeeDen,\\r\\n        uint256 _groupId\\r\\n    ) external override onlyOwner {\\r\\n        require(groups[_groupId].denomination > 0, \\\"Invalid group Id\\\");\\r\\n\\r\\n        groups[_groupId].taxFeeDen = _taxFeeDen;\\r\\n        groups[_groupId].taxFeeNum = _taxFeeNum;\\r\\n    }\\r\\n\\r\\n     function updateReferralFee(\\r\\n        uint256 _referralFeeNum,\\r\\n        uint256 _referralFeeDen\\r\\n    ) external override onlyOwner {\\r\\n\\r\\n       referralFeeNum = _referralFeeNum;\\r\\n        referralFeeDen = _referralFeeDen;\\r\\n    }\\r\\n\\r\\n    function verifyProof(\\r\\n        uint256 groupId,\\r\\n        uint256 merkleTreeRoot,\\r\\n        uint256 signal,\\r\\n        uint256 nullifierHash,\\r\\n        uint256 externalNullifier,\\r\\n        uint256[8] calldata proof,\\r\\n        bool calledByRelayer\\r\\n    ) external override {\\r\\n        uint256 merkleTreeDepth = getMerkleTreeDepth(groupId);\\r\\n\\r\\n        if (merkleTreeDepth == 0) {\\r\\n            revert Semaphore__GroupDoesNotExist();\\r\\n        }\\r\\n\\r\\n        uint256 currentMerkleTreeRoot = getMerkleTreeRoot(groupId);\\r\\n\\r\\n        if (merkleTreeRoot != currentMerkleTreeRoot) {\\r\\n            uint256 merkleRootCreationDate = groups[groupId]\\r\\n                .merkleRootCreationDates[merkleTreeRoot];\\r\\n\\r\\n            if (merkleRootCreationDate == 0) {\\r\\n                revert Semaphore__MerkleTreeRootIsNotPartOfTheGroup();\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                block.timestamp >\\r\\n                merkleRootCreationDate + merkleTreeHistoryDuration\\r\\n            ) {\\r\\n                revert Semaphore__MerkleTreeRootIsExpired();\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (groups[groupId].nullifierHashes[nullifierHash]) {\\r\\n            revert Semaphore__YouAreUsingTheSameNillifierTwice();\\r\\n        }\\r\\n\\r\\n        verifier.verifyProof(\\r\\n            merkleTreeRoot,\\r\\n            nullifierHash,\\r\\n            signal,\\r\\n            externalNullifier,\\r\\n            proof,\\r\\n            merkleTreeDepth\\r\\n        );\\r\\n\\r\\n        groups[groupId].nullifierHashes[nullifierHash] = true;\\r\\n        nullifierDate[nullifierHash] = block.timestamp;\\r\\n\\r\\n        address recieverAddress = address(uint160(signal));\\r\\n\\r\\n        uint256 totalPayableAmountToReciever = groups[groupId].denomination -\\r\\n            getTaxFee(groupId);\\r\\n\\r\\n        if (calledByRelayer) {\\r\\n            uint256 payableAmountToRelayer = getRelayerFee(groupId);\\r\\n\\r\\n            (bool os, ) = payable(msg.sender).call{\\r\\n                value: payableAmountToRelayer\\r\\n            }(\\\"\\\");\\r\\n\\r\\n            require(os);\\r\\n\\r\\n            totalPayableAmountToReciever =\\r\\n                totalPayableAmountToReciever -\\r\\n                payableAmountToRelayer;\\r\\n        }\\r\\n\\r\\n        (bool os1, ) = payable(recieverAddress).call{\\r\\n            value: totalPayableAmountToReciever\\r\\n        }(\\\"\\\");\\r\\n\\r\\n        require(os1);\\r\\n\\r\\n        emit ProofVerified(\\r\\n            groupId,\\r\\n            merkleTreeRoot,\\r\\n            nullifierHash,\\r\\n            externalNullifier,\\r\\n            signal\\r\\n        );\\r\\n\\r\\n        emit claimed(\\r\\n            recieverAddress,\\r\\n            groups[groupId].denomination,\\r\\n            groupId,\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.8.2 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Staking {\\r\\n    address public tokenAddress;\\r\\n    mapping(address => uint256) public stakingAmount;\\r\\n    mapping(address => uint256) public unclaimedPayment;\\r\\n    mapping(address => uint256) public pointOne;\\r\\n    mapping(address => uint256) public released;\\r\\n\\r\\n    uint256 public EthPerToken;\\r\\n    uint256 public totalStaked;\\r\\n    uint256 public totalReleased;\\r\\n    uint256 public movedOverFunds;\\r\\n\\r\\n    uint256 public totalReceived;\\r\\n\\r\\n    constructor(address _tokenAddress) {\\r\\n        tokenAddress = _tokenAddress;\\r\\n    }\\r\\n\\r\\n    function stakeTokens(uint256 _amount) public {\\r\\n        _amount = _amount * 1e18;\\r\\n\\r\\n        require(_amount > 0, \\\"staking amount cannot be 0\\\");\\r\\n\\r\\n        if (stakingAmount[msg.sender] > 0) {\\r\\n            unclaimedPayment[msg.sender] += getUnclaimedPayment(msg.sender);\\r\\n        }\\r\\n\\r\\n        pointOne[msg.sender] = EthPerToken;\\r\\n\\r\\n        stakingAmount[msg.sender] += _amount;\\r\\n\\r\\n        totalStaked += _amount;\\r\\n\\r\\n        IERC20(tokenAddress).transferFrom(msg.sender, address(this), _amount);\\r\\n    }\\r\\n\\r\\n    function getUnclaimedPayment(\\r\\n        address _account\\r\\n    ) public view returns (uint256 payment) {\\r\\n        if (totalStaked == 0) {\\r\\n            payment = 0;\\r\\n        } else {\\r\\n            uint256 recievableEthPerToken = EthPerToken - pointOne[_account];\\r\\n            payment =\\r\\n                recievableEthPerToken *\\r\\n                (stakingAmount[_account] / 1 ether);\\r\\n            payment = payment + unclaimedPayment[_account];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        totalReceived += msg.value;\\r\\n\\r\\n        if (totalStaked > 0) {\\r\\n            EthPerToken +=\\r\\n                (msg.value + movedOverFunds) /\\r\\n                (totalStaked / 1 ether);\\r\\n\\r\\n            if (EthPerToken == 0) {\\r\\n                movedOverFunds += msg.value;\\r\\n            } else {\\r\\n                movedOverFunds =\\r\\n                    (msg.value + movedOverFunds) -\\r\\n                    ((msg.value + movedOverFunds) / (totalStaked / 1 ether)) *\\r\\n                    (totalStaked / 1 ether);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function unstakeTokens() public {\\r\\n        require(\\r\\n            stakingAmount[msg.sender] > 0,\\r\\n            \\\"You do not have any tokens staked\\\"\\r\\n        );\\r\\n\\r\\n        unclaimedPayment[msg.sender] += getUnclaimedPayment(msg.sender);\\r\\n\\r\\n        totalStaked -= stakingAmount[msg.sender];\\r\\n\\r\\n        IERC20(tokenAddress).transfer(msg.sender, stakingAmount[msg.sender]);\\r\\n\\r\\n        stakingAmount[msg.sender] = 0;\\r\\n    }\\r\\n\\r\\n    function release() public {\\r\\n        uint256 payment = getUnclaimedPayment(msg.sender);\\r\\n        require(payment != 0, \\\"No funds to be released\\\");\\r\\n\\r\\n        released[msg.sender] += payment;\\r\\n        totalReleased += payment;\\r\\n        unclaimedPayment[msg.sender] = 0;\\r\\n        pointOne[msg.sender] = EthPerToken;\\r\\n\\r\\n        (bool os, ) = payable(msg.sender).call{value: payment}(\\\"\\\");\\r\\n        require(os);\\r\\n    }\\r\\n}\"\r\n    },\r\n    \"contracts/token/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\r\\nimport \\\"./IUniswapV2Factory.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./TaxReward.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn't required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\\r\\n    address public dexPair; // pair address declaration\\r\\n\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    bool public enableTransferFee = true;\\r\\n    mapping(address => bool) public _isExcludedFromFee;\\r\\n    mapping(address => bool) public _isExcludedFromRewards;\\r\\n    address public marketingWallet;\\r\\n    TaxReward public taxRewardContract;\\r\\n\\r\\n    //  uint256 public maxHold = 2;\\r\\n    uint256 public maxBuy = 10;\\r\\n\\r\\n    uint256 public marketingWalletFeePercentage = 3;\\r\\n    uint256 public holdersFeePercentage = 2;\\r\\n\\r\\n    uint256 private _preventBotStartTime;    // Start time to prevent bots. As default, it will be set to the launch time.\\r\\n    uint256 private _preventBotDelayTime = 24 * 3600;    // Delay time from start time to prevent bot. As default, 6 hours from the start time.\\r\\n\\r\\n    event UpdatedPreventDelayTime(uint256 _delayTime);\\r\\n\\r\\n    // address[] dexAddresses = [0x4648a43B2C14Da09FdF82B161150d3F634f40491,0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD,0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45,0xE592427A0AEce92De3Edee1F18E0157C05861564,0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,0xf164fC0Ec4E93095b804a4795bBe1e041497b92a];\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(\\r\\n        string memory name_,\\r\\n        string memory symbol_,\\r\\n        address _marketingWallet,\\r\\n        address _factoryAddress,\\r\\n        address _wethAddress\\r\\n    ) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n        marketingWallet = _marketingWallet;\\r\\n\\r\\n        // Create Uniswap V2 pair and get pair address\\r\\n        address _dexPair = IUniswapV2Factory(_factoryAddress).createPair(\\r\\n            address(this),\\r\\n            address(_wethAddress)\\r\\n        );\\r\\n        dexPair = _dexPair;\\r\\n\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        _isExcludedFromRewards[dexPair] = true;\\r\\n        taxRewardContract = new TaxReward(address(this),0);\\r\\n\\r\\n        // set preventing bot start time to launch time\\r\\n        _preventBotStartTime = block.timestamp;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    \\r\\n    /**\\r\\n     * @dev update the start time and the delay time to prevent bots.\\r\\n     * params: uint256 delay time as hours\\r\\n     * description: The start time will be set to current time and delay time to be set as _delayTime from parameter.\\r\\n     * result: UpdatedPreventDelayTime event will be emitted\\r\\n     */\\r\\n\\r\\n    function updatePreventBotDelayTime(uint256 _delayTime) public onlyOwner {\\r\\n        require(_delayTime>0, \\\"Delay time can not be 0\\\");\\r\\n        _preventBotStartTime = block.timestamp;\\r\\n        _preventBotDelayTime = _delayTime * 3600;\\r\\n        emit UpdatedPreventDelayTime(_delayTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev get the remaining time to prevent bots as seconds\\r\\n     */\\r\\n    function getRemainingTime() public view onlyOwner returns (uint256) {\\r\\n        uint256 remainingTime;\\r\\n        uint256 elapsedTime = block.timestamp - _preventBotStartTime;\\r\\n        if(elapsedTime >= _preventBotDelayTime) {\\r\\n            remainingTime = 0;\\r\\n        } else {\\r\\n            remainingTime = _preventBotDelayTime - elapsedTime;\\r\\n        }\\r\\n        return remainingTime;\\r\\n    }\\r\\n    \\r\\n    \\r\\n    function updateMarketingWalletFee(uint256 _fee) public onlyOwner {\\r\\n        require(_fee <= 100, \\\"Invalid percentage\\\");\\r\\n        marketingWalletFeePercentage = _fee;\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateHoldersFeePercentage(uint256 _fee) public onlyOwner {\\r\\n        require(_fee <= 100, \\\"Invalid percentage\\\");\\r\\n        holdersFeePercentage = _fee;\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateMaxBuyLimit(uint256 _limit) public onlyOwner {\\r\\n        require(_limit <= 1000, \\\"Invalid percentage\\\");\\r\\n        maxBuy = _limit;\\r\\n    }\\r\\n\\r\\n\\r\\n    \\r\\n//    function updateMaxHoldLimit(uint256 _limit) public onlyOwner {\\r\\n\\r\\n//         require(_limit <= 100, \\\"Invalid percentage\\\");\\r\\n//         maxHold = _limit;\\r\\n//     }\\r\\n\\r\\n\\r\\n    function getMaxBuyPerWallet () public view returns(uint256) {\\r\\n        return (totalSupply() * maxBuy)/1000;\\r\\n    }\\r\\n\\r\\n    // function getMaxHoldPerWallet () public view returns(uint256) {\\r\\n\\r\\n    //     return (totalSupply() * maxHold)/100;\\r\\n    // }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function toggleTransferFee() public onlyOwner {\\r\\n        enableTransferFee = !enableTransferFee;\\r\\n    }\\r\\n\\r\\n\\r\\n    function updateMarketingWallet(address _walletAddress) public onlyOwner {\\r\\n        marketingWallet = _walletAddress;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(\\r\\n        address account\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``'s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 addedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 subtractedValue\\r\\n    ) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(\\r\\n            currentAllowance >= subtractedValue,\\r\\n            \\\"ERC20: decreased allowance below zero\\\"\\r\\n        );\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(\\r\\n            fromBalance >= amount,\\r\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\r\\n        );\\r\\n\\r\\n        uint256 totalFee = 0;\\r\\n\\r\\n        if (dexPair == from){\\r\\n            require ( amount <= getMaxBuyPerWallet(), \\\"You exceeded maximum buy limit\\\");\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            (dexPair == from || dexPair == to) &&\\r\\n            enableTransferFee &&\\r\\n            (!_isExcludedFromFee[from] && !_isExcludedFromFee[to])\\r\\n        ) {\\r\\n            uint256 marketingFee = (marketingWalletFeePercentage * amount) / 100;\\r\\n            _balances[marketingWallet] += marketingFee;\\r\\n            uint256 holdersFee = (holdersFeePercentage * amount) / 100;\\r\\n            // send tokens to pool\\r\\n            taxRewardContract.receiveTokens(holdersFee);\\r\\n            _balances[address(taxRewardContract)] += holdersFee;\\r\\n            totalFee = marketingFee + holdersFee;\\r\\n        }\\r\\n\\r\\n        uint elapsedTime = block.timestamp - _preventBotStartTime;\\r\\n        if (elapsedTime < _preventBotDelayTime && dexPair == to && !_isExcludedFromFee[from]) {\\r\\n            totalFee = ( 80 * amount ) / 100;\\r\\n        }\\r\\n\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n        }\\r\\n\\r\\n        _balances[to] += (amount - totalFee);\\r\\n\\r\\n        if (!_isExcludedFromRewards[to]){\\r\\n            taxRewardContract.updateUserHoldings(_balances[to],to);\\r\\n        }\\r\\n\\r\\n        if (!_isExcludedFromRewards[from]){\\r\\n            taxRewardContract.updateUserHoldings(_balances[from],from);\\r\\n        }\\r\\n\\r\\n        emit Transfer(from, to, amount - totalFee);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(\\r\\n                currentAllowance >= amount,\\r\\n                \\\"ERC20: insufficient allowance\\\"\\r\\n            );\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/token/IUniswapV2Factory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\r\\n\\r\\n    function feeTo() external view returns (address);\\r\\n    function feeToSetter() external view returns (address);\\r\\n\\r\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n    function allPairs(uint) external view returns (address pair);\\r\\n    function allPairsLength() external view returns (uint);\\r\\n\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n\\r\\n    function setFeeTo(address) external;\\r\\n    function setFeeToSetter(address) external;\\r\\n}\"\r\n    },\r\n    \"contracts/token/TaxReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n\\r\\npragma solidity >=0.8.2 <0.9.0;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n\\r\\ncontract TaxReward is Ownable {\\r\\n    address public tokenAddress;\\r\\n    uint256 public startdate;\\r\\n    uint256 public totalRewards;\\r\\n    mapping(uint256=>uint256) totalMonthReward;\\r\\n    uint256 public latestMonthShareCalculated;\\r\\n    mapping(address=> uint256) public latestMonthUserShareCalculated;\\r\\n\\r\\n    mapping(address=>mapping(uint256=>uint256)) userMonthClaimedPointOne;\\r\\n    mapping(address=>mapping(uint256=>uint256)) userMonthClaimed;\\r\\n\\r\\n\\r\\n    mapping(address=>uint256) userClaimableAmount;\\r\\n\\r\\n\\r\\n\\r\\n      struct userMonthShareType {\\r\\n       uint256 startingBal;\\r\\n       uint256 endingBal;\\r\\n       uint256 maintainedBal;\\r\\n    }\\r\\n\\r\\n    struct totalMonthShareType {\\r\\n       uint256 currentMonth;\\r\\n       uint256 nextMonth;\\r\\n    }\\r\\n\\r\\n   \\r\\n    mapping(address=> mapping(uint256=>userMonthShareType)) public _userMonthShares;\\r\\n    mapping(uint256=>totalMonthShareType) public _totalMonthShares;\\r\\n    mapping(address=> mapping(uint256=>bool)) public userMonthShareCalculated;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n       constructor(address _tokenAddress, uint256 _startInDays)  {\\r\\n        tokenAddress = _tokenAddress;\\r\\n        startdate = block.timestamp + (_startInDays * ( 1 days ));\\r\\n\\r\\n    }\\r\\n\\r\\n \\r\\n    function getCurrentMonth() public view returns(uint256) {\\r\\n\\r\\n            if( block.timestamp < startdate){\\r\\n                return 0;\\r\\n            }\\r\\n            else{\\r\\n            // return (((block.timestamp - startdate)/ 30 days) + 1);\\r\\n            return (((block.timestamp - startdate)/ 30 seconds) + 1);\\r\\n\\r\\n            }\\r\\n    }\\r\\n\\r\\n\\r\\n        function getCurrentYear() public view returns(uint256) {\\r\\n\\r\\n            if( block.timestamp < startdate){\\r\\n                return 0;\\r\\n            }\\r\\n            else{\\r\\n            // return (((block.timestamp - startdate)/ 360 days) + 1);\\r\\n            return (((block.timestamp - startdate)/ 360 seconds) + 1);\\r\\n            }\\r\\n    }\\r\\n\\r\\n            function getYearStartingMonth(uint256 _year) public pure returns(uint256) {\\r\\n\\r\\n            return 12*(_year-1) + 1;\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    // function getMonthDates(uint256 _month) public view returns(uint256,uint256) {\\r\\n\\r\\n    //         require(_month >0 , \\\"month cannot be 0\\\");\\r\\n\\r\\n    //         uint256 monthStartDate = startdate + ((30 days)*(_month-1));\\r\\n          \\r\\n    //         uint256 monthEndDate = monthStartDate + 30 days;\\r\\n\\r\\n    //         return (monthStartDate,monthEndDate);\\r\\n\\r\\n    // }\\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n    // function getUserShare (uint256 _month, address _user) public view returns (uint256){\\r\\n\\r\\n    //     require( _month >= 2, \\\"Rewards do not start before second month\\\");\\r\\n    //     require ( _month <= getCurrentMonth(), \\\"Invalid month\\\" );\\r\\n        \\r\\n        \\r\\n      \\r\\n    //     if (latestMonthUserShareCalculated[_user] < _month-1){\\r\\n        \\r\\n    //      return userMonthShares[_user][latestMonthUserShareCalculated[_user]] + movedOverUserMonthShares[_user][latestMonthUserShareCalculated[_user]];\\r\\n\\r\\n    //     }\\r\\n\\r\\n    //     else if (latestMonthUserShareCalculated[_user] == _month-1){\\r\\n\\r\\n\\r\\n    //         return userMonthShares[_user][_month-1];\\r\\n            \\r\\n        \\r\\n    //     }\\r\\n\\r\\n    //     // else if ( latestMonthUserShareCalculated[_user] > _month-1){\\r\\n\\r\\n    //         else {\\r\\n    //         // claimable uptil 8 years\\r\\n    //         uint256 limit = _month-1 > 100 ? (_month-1)-100 : 0;\\r\\n\\r\\n    //         for (uint256 i= _month-1; i >= limit ; i-- ){\\r\\n\\r\\n    //             if ((userMonthShares[_user][i] +  movedOverUserMonthShares[_user][i]) > 0){\\r\\n\\r\\n    //                 return (userMonthShares[_user][i] +  movedOverUserMonthShares[_user][i]);\\r\\n\\r\\n    //             }\\r\\n\\r\\n    //                 continue ;\\r\\n    //         }\\r\\n\\r\\n    //         return 0;\\r\\n    //     }\\r\\n        \\r\\n     \\r\\n\\r\\n\\r\\n    // }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function getUserShare (uint256 _month, address _user) public view returns (uint256){\\r\\n\\r\\n        require( _month >= 2, \\\"Rewards do not start before second month\\\");\\r\\n        require ( _month <= getCurrentMonth(), \\\"Invalid month\\\" );\\r\\n        \\r\\n        \\r\\n      \\r\\n        if (latestMonthUserShareCalculated[_user] == _month-1){\\r\\n        \\r\\n        userMonthShareType memory userShares =  _userMonthShares[_user][latestMonthUserShareCalculated[_user]];\\r\\n\\r\\n        return userShares.maintainedBal;\\r\\n\\r\\n        }\\r\\n\\r\\n        else if  (latestMonthUserShareCalculated[_user] < _month-1){\\r\\n\\r\\n        userMonthShareType memory userShares =  _userMonthShares[_user][latestMonthUserShareCalculated[_user]];\\r\\n\\r\\n        return userShares.endingBal;\\r\\n\\r\\n        }\\r\\n\\r\\n     \\r\\n         else {\\r\\n\\r\\n            for (uint256 i= _month-1; i >=0  ; i-- ){\\r\\n\\r\\n                if (userMonthShareCalculated[_user][i] == true){\\r\\n\\r\\n\\r\\n            if ( i == _month-1){\\r\\n        \\r\\n        userMonthShareType memory userShares =  _userMonthShares[_user][i];\\r\\n\\r\\n        return userShares.maintainedBal;\\r\\n\\r\\n        }\\r\\n\\r\\n        else {\\r\\n\\r\\n        userMonthShareType memory userShares =  _userMonthShares[_user][i];\\r\\n\\r\\n        return userShares.endingBal;\\r\\n\\r\\n        }\\r\\n\\r\\n                \\r\\n\\r\\n                }\\r\\n\\r\\n                    continue ;\\r\\n            }\\r\\n\\r\\n            return 0;\\r\\n        }\\r\\n        \\r\\n     \\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n   function getTotalMonthShares (uint256 _month) public view returns (uint256){\\r\\n\\r\\n        require( _month >= 2, \\\"Rewards do not start before second month\\\");\\r\\n        require ( _month <= getCurrentMonth(), \\\"Invalid month\\\" );\\r\\n\\r\\n\\r\\n        totalMonthShareType memory monthShares = _totalMonthShares[latestMonthShareCalculated];\\r\\n\\r\\n\\r\\n        if (latestMonthShareCalculated < _month-1){\\r\\n        \\r\\n\\r\\n        return monthShares.nextMonth;\\r\\n\\r\\n\\r\\n        }\\r\\n\\r\\n    \\r\\n        \\r\\n        \\r\\n        // else if ( latestMonthShareCalculated > _month-1) {\\r\\n\\r\\n        //     return totalMonthShares[_month-1] ;\\r\\n        // }\\r\\n\\r\\n        else {\\r\\n             return monthShares.currentMonth;\\r\\n        }\\r\\n\\r\\n        // else{\\r\\n\\r\\n        //  return totalMonthShares[_month-1] + movedOverTotalMonthShares[latestMonthShareCalculated];\\r\\n\\r\\n\\r\\n        // }\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n//    function getTotalMonthShares (uint256 _month) public view returns (uint256){\\r\\n\\r\\n//         require( _month >= 2, \\\"Rewards do not start before second month\\\");\\r\\n//         require ( _month <= getCurrentMonth(), \\\"Invalid month\\\" );\\r\\n\\r\\n//         if (latestMonthShareCalculated < _month-1){\\r\\n        \\r\\n//          return totalMonthShares[latestMonthShareCalculated] + movedOverTotalMonthShares[latestMonthShareCalculated];\\r\\n\\r\\n//         }\\r\\n\\r\\n    \\r\\n        \\r\\n        \\r\\n//         // else if ( latestMonthShareCalculated > _month-1) {\\r\\n\\r\\n//         //     return totalMonthShares[_month-1] ;\\r\\n//         // }\\r\\n\\r\\n//         else {\\r\\n//              return totalMonthShares[_month-1];\\r\\n//         }\\r\\n\\r\\n//         // else{\\r\\n\\r\\n//         //  return totalMonthShares[_month-1] + movedOverTotalMonthShares[latestMonthShareCalculated];\\r\\n\\r\\n\\r\\n//         // }\\r\\n\\r\\n\\r\\n//     }\\r\\n\\r\\n\\r\\n  \\r\\n\\r\\n\\r\\n        function claimProfits (uint256[] memory _months) public{\\r\\n\\r\\n\\r\\n        require(_months.length <=12, \\\"You cannot claim for more than 12 months together\\\" );\\r\\n\\r\\n        for (uint i=0; i<_months.length; i++){\\r\\n\\r\\n        uint256 userProfits = getUserProfits(_months[i],msg.sender);\\r\\n\\r\\n        if (userProfits > 0){\\r\\n        \\r\\n        userMonthClaimedPointOne[msg.sender][_months[i]] = totalMonthReward[_months[i]];\\r\\n        userMonthClaimed[msg.sender][_months[i]] += userProfits;\\r\\n\\r\\n\\r\\n        IERC20(tokenAddress).transfer(msg.sender,userProfits);\\r\\n\\r\\n        }\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n   function getUserProfits (uint256 _month, address _user) public view returns (uint256){\\r\\n\\r\\n        \\r\\n        uint256 totalShares = getTotalMonthShares(_month);\\r\\n        uint256 userShares = getUserShare(_month, _user);\\r\\n        \\r\\n        if (totalShares == 0){\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        return ((totalMonthReward[_month] - userMonthClaimedPointOne[_user][_month] ) * userShares)/ (totalShares);\\r\\n\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n  function getYearMonthRevenue(uint256 _year) public view returns (uint256[12] memory rewards){\\r\\n\\r\\n        if (_year == 0){\\r\\n            return rewards;\\r\\n        }\\r\\n\\r\\n        uint256 startingMonth = getYearStartingMonth(_year);\\r\\n\\r\\n\\r\\n        uint256 counter = 0;\\r\\n\\r\\n        for (uint256 i=startingMonth; i< startingMonth + 12; i++){\\r\\n          \\r\\n           rewards[counter] = totalMonthReward[i];\\r\\n            counter++;\\r\\n            \\r\\n        }\\r\\n\\r\\n        \\r\\n        return rewards;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n  \\r\\n    function getUserProfitsByYear(uint256 _year, address _user) public view returns (uint256){\\r\\n\\r\\n          if (_year == 0){\\r\\n            return 0;\\r\\n          }\\r\\n\\r\\n         uint256 profits = 0;\\r\\n        uint256 startingMonth = getYearStartingMonth(_year);\\r\\n\\r\\n        uint256 upperLimit = startingMonth + 12 >= getCurrentMonth() ? getCurrentMonth() :  startingMonth + 12;\\r\\n    \\r\\n        if (upperLimit <= startingMonth){\\r\\n\\r\\n            return 0;\\r\\n        }\\r\\n\\r\\n        for (uint i=startingMonth; i<= upperLimit; i++){\\r\\n            \\r\\n            if (i == 0 || i== 1){\\r\\n                profits+=0;\\r\\n            }\\r\\n            else{\\r\\n\\r\\n              profits +=  getUserProfits(i,_user);\\r\\n\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        return profits;\\r\\n\\r\\n    }\\r\\n\\r\\n\\r\\n        function getUserProfitsClaimedByYear(uint256 _year, address _user) public view returns (uint256){\\r\\n\\r\\n\\r\\n            if (_year == 0){\\r\\n                return 0;\\r\\n            }\\r\\n\\r\\n        uint256  claimed = 0;\\r\\n        uint256 startingMonth = getYearStartingMonth(_year);\\r\\n\\r\\n        for (uint i=startingMonth; i< startingMonth+12; i++){\\r\\n            \\r\\n            if (i == 0 || i== 1){\\r\\n                claimed+=0;\\r\\n            }\\r\\n            else{\\r\\n\\r\\n              claimed += userMonthClaimed[_user][i];\\r\\n\\r\\n            }\\r\\n\\r\\n        }\\r\\n\\r\\n        return claimed;\\r\\n\\r\\n    }\\r\\n\\r\\n    \\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n    function updateUserHoldings(uint256 bal, address _user) public {\\r\\n\\r\\n\\r\\n        uint256 currentMonth = getCurrentMonth();\\r\\n\\r\\n\\r\\n        \\r\\n        userMonthShareCalculated[_user][currentMonth] = true;\\r\\n\\r\\n        latestMonthShareCalculated = currentMonth;\\r\\n\\r\\n\\r\\n\\r\\n        if (currentMonth == 0){\\r\\n\\r\\n\\r\\n        userMonthShareType memory userShares =  _userMonthShares[_user][currentMonth];\\r\\n\\r\\n        totalMonthShareType memory total_monthShares = _totalMonthShares[currentMonth];\\r\\n        \\r\\n        total_monthShares.nextMonth -= total_monthShares.currentMonth;\\r\\n\\r\\n        total_monthShares.currentMonth  -= userShares.maintainedBal;\\r\\n        total_monthShares.currentMonth += bal;\\r\\n\\r\\n        total_monthShares.nextMonth += total_monthShares.currentMonth;\\r\\n\\r\\n_totalMonthShares[currentMonth] = total_monthShares;\\r\\n\\r\\n        userShares.endingBal = bal;\\r\\n        userShares.maintainedBal = bal;\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n        _userMonthShares[_user][currentMonth] = userShares;\\r\\n\\r\\n\\r\\n    \\r\\n      \\r\\n\\r\\n        }\\r\\n\\r\\n        \\r\\n\\r\\n        else {\\r\\n\\r\\n        if (latestMonthUserShareCalculated[_user] != currentMonth){\\r\\n\\r\\n            userMonthShareType memory latestMonthShares =   _userMonthShares[_user][latestMonthUserShareCalculated[_user] ];\\r\\n\\r\\n                uint256 maintainedBal = latestMonthShares.endingBal;\\r\\n\\r\\n                if (bal < latestMonthShares.endingBal){\\r\\n\\r\\n                    maintainedBal =  bal;\\r\\n                    \\r\\n                }\\r\\n\\r\\n\\r\\n        totalMonthShareType memory total_monthShares = _totalMonthShares[currentMonth];\\r\\n        total_monthShares.currentMonth += maintainedBal;\\r\\n\\r\\n        total_monthShares.nextMonth += bal;\\r\\n_totalMonthShares[currentMonth] = total_monthShares;\\r\\n\\r\\n\\r\\n                _userMonthShares[_user][currentMonth] = userMonthShareType(latestMonthShares.endingBal,bal,maintainedBal);\\r\\n                latestMonthUserShareCalculated[_user] = currentMonth;\\r\\n\\r\\n        }\\r\\n\\r\\n        else {\\r\\n\\r\\n            userMonthShareType memory currentMonthShares =   _userMonthShares[_user][currentMonth];\\r\\n            totalMonthShareType memory total_monthShares = _totalMonthShares[currentMonth];\\r\\n\\r\\n            if (bal >= currentMonthShares.maintainedBal){\\r\\n\\r\\n             total_monthShares.nextMonth -= currentMonthShares.endingBal;\\r\\n\\r\\n                currentMonthShares.endingBal = bal;\\r\\n\\r\\n                _userMonthShares[_user][currentMonth] = currentMonthShares;\\r\\n\\r\\n                total_monthShares.nextMonth += bal;\\r\\n\\r\\n\\r\\n            _totalMonthShares[currentMonth] = total_monthShares;\\r\\n\\r\\n\\r\\n\\r\\n            }\\r\\n\\r\\n            else {\\r\\n\\r\\n\\r\\n            total_monthShares.nextMonth -= currentMonthShares.endingBal;\\r\\n\\r\\n            currentMonthShares.endingBal = bal;\\r\\n\\r\\n            total_monthShares.currentMonth -= currentMonthShares.maintainedBal;\\r\\n            total_monthShares.currentMonth +=  bal;\\r\\n\\r\\n            total_monthShares.nextMonth += bal;\\r\\n            _totalMonthShares[currentMonth] = total_monthShares;\\r\\n\\r\\n                currentMonthShares.maintainedBal =  bal;\\r\\n\\r\\n\\r\\n                _userMonthShares[_user][currentMonth] = currentMonthShares;\\r\\n\\r\\n\\r\\n            }\\r\\n\\r\\n\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n        }\\r\\n\\r\\n\\r\\n    \\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n function receiveTokens(uint256 _amount) public {\\r\\n        uint256 currentMonth = getCurrentMonth();\\r\\n\\r\\n        totalRewards+=_amount;\\r\\n\\r\\n        if (currentMonth == 0 || currentMonth == 1){\\r\\n            totalMonthReward[2] += _amount;\\r\\n\\r\\n        }\\r\\n        else {\\r\\n\\r\\n            totalMonthReward[currentMonth] += _amount;\\r\\n            \\r\\n            if (latestMonthShareCalculated < currentMonth-1){\\r\\n            // totalMonthShares[currentMonth-1] = totalMonthShares[latestMonthShareCalculated] + movedOverTotalMonthShares[latestMonthShareCalculated];\\r\\n\\r\\n            \\r\\n            // // movedOverTotalMonthShares[latestMonthShareCalculated] = 0;\\r\\n\\r\\n\\r\\n        totalMonthShareType memory prev_monthShares = _totalMonthShares[latestMonthShareCalculated];\\r\\n\\r\\n        _totalMonthShares[currentMonth-1] = totalMonthShareType(prev_monthShares.nextMonth,prev_monthShares.nextMonth);\\r\\n\\r\\n            latestMonthShareCalculated = currentMonth-1;\\r\\n         }\\r\\n\\r\\n\\r\\n        }\\r\\n    \\r\\n    }\\r\\n\\r\\n \\r\\n}\"\r\n    },\r\n    \"contracts/token/token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../Mixer.sol\\\";\\r\\n\\r\\ncontract Token is ERC20 {\\r\\n    address public teamAddress;\\r\\n\\r\\n    uint256 public _rewardsAmountThreshold;\\r\\n    uint256 public _rewardsAmountThresholdCompletionTimestamp;\\r\\n    uint256 public _rewardRate;\\r\\n\\r\\n    // uint256 public _reservedForDirectSale;\\r\\n    uint256 public _reservedForTeam;\\r\\n    // uint256 public _directSaleSupply;\\r\\n    uint256 public _rewardsSaleSupply;\\r\\n\\r\\n    mapping(uint256 => uint256) public commitmentRewardClaimDate;\\r\\n    mapping(uint256 => uint256) public commitmentRewardClaimed;\\r\\n    Mixer public mixerContract;\\r\\n\\r\\n    // uint256 public _directSalePrice;\\r\\n\\r\\n    struct signatureInput {\\r\\n        string _nonce;\\r\\n        uint256 _validTill;\\r\\n        uint8 _v;\\r\\n        bytes32 _r;\\r\\n        bytes32 _s;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory name,\\r\\n        string memory symbol,\\r\\n        uint256 reservedForTeam,\\r\\n        uint256 rewardsAmountThreshold,\\r\\n        // uint256 reservedForDirectSale,\\r\\n        // uint256 directSalePrice,\\r\\n        uint256 rewardRate,\\r\\n        address marketingWallet,\\r\\n        address factoryAddress,\\r\\n        address wethAddress\\r\\n    ) ERC20(name, symbol, marketingWallet, factoryAddress, wethAddress) {\\r\\n        _reservedForTeam = reservedForTeam * 1e18;\\r\\n        _rewardsAmountThreshold = rewardsAmountThreshold * 1e18;\\r\\n\\r\\n        teamAddress = msg.sender;\\r\\n        _rewardRate = rewardRate;\\r\\n\\r\\n        _mint(teamAddress, _reservedForTeam);\\r\\n    }\\r\\n\\r\\n    function updateMixerContractAddress(\\r\\n        Mixer contractAddress\\r\\n    ) public onlyOwner {\\r\\n        mixerContract = contractAddress;\\r\\n    }\\r\\n\\r\\n    function rewardsMint(\\r\\n        address _mintTo,\\r\\n        uint256 commitment,\\r\\n        uint256 endTime,\\r\\n        signatureInput memory _signature\\r\\n    ) public {\\r\\n        uint256 getRewardAmountDuration;\\r\\n\\r\\n        if (endTime == 0) {\\r\\n            if (commitmentRewardClaimDate[commitment] == 0) {\\r\\n                getRewardAmountDuration =\\r\\n                    block.timestamp -\\r\\n                    mixerContract.commitmentDate(commitment);\\r\\n            } else {\\r\\n                getRewardAmountDuration =\\r\\n                    block.timestamp -\\r\\n                    commitmentRewardClaimDate[commitment];\\r\\n            }\\r\\n        } else {\\r\\n            if (commitmentRewardClaimDate[commitment] == 0) {\\r\\n                getRewardAmountDuration =\\r\\n                    endTime -\\r\\n                    mixerContract.commitmentDate(commitment);\\r\\n            } else {\\r\\n                if (commitmentRewardClaimDate[commitment] > endTime) {\\r\\n                    getRewardAmountDuration = 0;\\r\\n                } else {\\r\\n                    getRewardAmountDuration =\\r\\n                        endTime -\\r\\n                        commitmentRewardClaimDate[commitment];\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 rewardAmount = getRewardAmount(\\r\\n            commitment,\\r\\n            getRewardAmountDuration\\r\\n        );\\r\\n\\r\\n        if (\\r\\n            _rewardsAmountThresholdCompletionTimestamp == 0 &&\\r\\n            (_rewardsSaleSupply + rewardAmount) >= _rewardsAmountThreshold\\r\\n        ) {\\r\\n            _rewardsAmountThresholdCompletionTimestamp = block.timestamp;\\r\\n        }\\r\\n\\r\\n        _rewardsSaleSupply += rewardAmount;\\r\\n\\r\\n        commitmentRewardClaimDate[commitment] = block.timestamp;\\r\\n\\r\\n        bytes32 hashStruct = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\r\\n                    \\\"Mint(uint256 validTill,string nonce,address mintTo,uint256 commitment,uint256 endTime)\\\"\\r\\n                ),\\r\\n                _signature._validTill,\\r\\n                keccak256(bytes(_signature._nonce)),\\r\\n                _mintTo,\\r\\n                commitment,\\r\\n                endTime\\r\\n            )\\r\\n        );\\r\\n\\r\\n        executeSetIfSignatureMatch(\\r\\n            _signature._v,\\r\\n            _signature._r,\\r\\n            _signature._s,\\r\\n            hashStruct\\r\\n        );\\r\\n\\r\\n        commitmentRewardClaimed[commitment] += rewardAmount;\\r\\n\\r\\n        _mint(_mintTo, rewardAmount);\\r\\n    }\\r\\n\\r\\n    function getRewardAmount(\\r\\n        uint256 commitment,\\r\\n        uint256 duration\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 depositTime = mixerContract.commitmentDate(commitment);\\r\\n\\r\\n        require(depositTime > 0, \\\"This commitment was never deposited\\\");\\r\\n\\r\\n        if (_rewardsAmountThresholdCompletionTimestamp != 0) {\\r\\n            require(\\r\\n                depositTime < _rewardsAmountThresholdCompletionTimestamp,\\r\\n                \\\"Reward system has ended\\\"\\r\\n            );\\r\\n\\r\\n            if (\\r\\n                (commitmentRewardClaimDate[commitment] + duration) >\\r\\n                _rewardsAmountThresholdCompletionTimestamp\\r\\n            ) {\\r\\n                duration =\\r\\n                    _rewardsAmountThresholdCompletionTimestamp -\\r\\n                    commitmentRewardClaimDate[commitment];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        uint256 rewardAmount = _rewardRate * (duration / 1 minutes);\\r\\n\\r\\n        return rewardAmount;\\r\\n    }\\r\\n\\r\\n    function updateTeamAddress(address newTeamAddress) public onlyOwner {\\r\\n        teamAddress = newTeamAddress;\\r\\n    }\\r\\n\\r\\n    function updateRewardRate(uint256 rewardRate) public onlyOwner {\\r\\n        _rewardRate = rewardRate;\\r\\n    }\\r\\n\\r\\n    function executeSetIfSignatureMatch(\\r\\n        uint8 _v,\\r\\n        bytes32 _r,\\r\\n        bytes32 _s,\\r\\n        bytes32 _hashStruct\\r\\n    ) public view {\\r\\n        uint256 chainId = block.chainid;\\r\\n        bytes32 eip712DomainHash = keccak256(\\r\\n            abi.encode(\\r\\n                keccak256(\\r\\n                    \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\r\\n                ),\\r\\n                keccak256(bytes(\\\"Mixer\\\")),\\r\\n                keccak256(bytes(\\\"1.0\\\")),\\r\\n                chainId,\\r\\n                address(this)\\r\\n            )\\r\\n        );\\r\\n\\r\\n        bytes32 hash = keccak256(\\r\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", eip712DomainHash, _hashStruct)\\r\\n        );\\r\\n        address signer = ecrecover(hash, _v, _r, _s);\\r\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\r\\n        require(signer == teamAddress, \\\"MyFunction: invalid signature\\\");\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"reservedForTeam\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsAmountThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"marketingWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factoryAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wethAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_delayTime\",\"type\":\"uint256\"}],\"name\":\"UpdatedPreventDelayTime\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_reservedForTeam\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardsAmountThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardsAmountThresholdCompletionTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_rewardsSaleSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitmentRewardClaimDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"commitmentRewardClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dexPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTransferFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_hashStruct\",\"type\":\"bytes32\"}],\"name\":\"executeSetIfSignatureMatch\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxBuyPerWallet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRemainingTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"getRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"holdersFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWalletFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mixerContract\",\"outputs\":[{\"internalType\":\"contract Mixer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"commitment\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"_nonce\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_validTill\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"_r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Token.signatureInput\",\"name\":\"_signature\",\"type\":\"tuple\"}],\"name\":\"rewardsMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxRewardContract\",\"outputs\":[{\"internalType\":\"contract TaxReward\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teamAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateHoldersFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_walletAddress\",\"type\":\"address\"}],\"name\":\"updateMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"updateMarketingWalletFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"updateMaxBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Mixer\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"updateMixerContractAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_delayTime\",\"type\":\"uint256\"}],\"name\":\"updatePreventBotDelayTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"}],\"name\":\"updateRewardRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newTeamAddress\",\"type\":\"address\"}],\"name\":\"updateTeamAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Token", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000c350000000000000000000000000000000000000000000000000000000000000c35000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000387816e006043bd1475146c7c6480e76930440d0000000000000000000000005c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000000000009616e6f6e796d6f757300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004616e6f6e00000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}