{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/CurveRegistryCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"../libraries/CurvePoolUtils.sol\\\";\\n\\nimport \\\"../interfaces/ICurveRegistryCache.sol\\\";\\nimport \\\"../interfaces/vendor/ICurveMetaRegistry.sol\\\";\\nimport \\\"../interfaces/vendor/ICurvePoolV1.sol\\\";\\n\\ncontract CurveRegistryCache is ICurveRegistryCache {\\n    ICurveMetaRegistry internal constant _CURVE_REGISTRY =\\n            ICurveMetaRegistry(0xF98B45FA17DE75FB1aD0e7aFD971b0ca00e379fC);\\n\\n    IBooster public constant BOOSTER = IBooster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\\n\\n    modifier onlyInitialized(address pool) {\\n        require(_isRegistered[pool], \\\"CurveRegistryCache: pool not initialized\\\");\\n        _;\\n    }\\n\\n    mapping(address => bool) internal _isRegistered;\\n    mapping(address => address) internal _lpToken;\\n    mapping(address => mapping(address => bool)) internal _hasCoinDirectly;\\n    mapping(address => mapping(address => bool)) internal _hasCoinAnywhere;\\n    mapping(address => address) internal _basePool;\\n    mapping(address => mapping(address => int128)) internal _coinIndex;\\n    mapping(address => uint256) internal _nCoins;\\n    mapping(address => address[]) internal _coins;\\n    mapping(address => uint256[]) internal _decimals;\\n    mapping(address => address) internal _poolFromLpToken;\\n    mapping(address => CurvePoolUtils.AssetType) internal _assetType;\\n    mapping(address => uint256) internal _interfaceVersion;\\n\\n    /// Information needed for staking Curve LP tokens on Convex\\n    mapping(address => uint256) internal _convexPid;\\n    mapping(address => address) internal _convexRewardPool; // curve pool => CRV rewards pool (convex)\\n\\n    function initPool(address pool_) external override {\\n        _initPool(pool_, false, 0);\\n    }\\n\\n    function initPool(address pool_, uint256 pid_) external override {\\n        _initPool(pool_, true, pid_);\\n    }\\n\\n    function _initPool(\\n        address pool_,\\n        bool setPid_,\\n        uint256 pid_\\n    ) internal {\\n        if (_isRegistered[pool_]) return;\\n        require(_isCurvePool(pool_), \\\"CurveRegistryCache: invalid curve pool\\\");\\n\\n        _isRegistered[pool_] = true;\\n        address curveLpToken_ = _CURVE_REGISTRY.get_lp_token(pool_);\\n        _lpToken[pool_] = curveLpToken_;\\n        if (setPid_) {\\n            _setConvexPid(pool_, curveLpToken_, pid_);\\n        } else {\\n            _setConvexPid(pool_, curveLpToken_);\\n        }\\n        _poolFromLpToken[curveLpToken_] = pool_;\\n        address basePool_ = _CURVE_REGISTRY.get_base_pool(pool_);\\n        _basePool[pool_] = basePool_;\\n        if (basePool_ != address(0)) {\\n            _initPool(basePool_, false, 0);\\n            address[] memory basePoolCoins_ = _coins[basePool_];\\n            for (uint256 i; i < basePoolCoins_.length; i++) {\\n                address coin_ = basePoolCoins_[i];\\n                _hasCoinAnywhere[pool_][coin_] = true;\\n            }\\n        }\\n        _assetType[pool_] = CurvePoolUtils.AssetType(_CURVE_REGISTRY.get_pool_asset_type(pool_));\\n        uint256 nCoins_ = _CURVE_REGISTRY.get_n_coins(pool_);\\n        address[8] memory staticCoins_ = _CURVE_REGISTRY.get_coins(pool_);\\n        uint256[8] memory staticDecimals_ = _CURVE_REGISTRY.get_decimals(pool_);\\n        address[] memory coins_ = new address[](nCoins_);\\n        for (uint256 i; i < nCoins_; i++) {\\n            address coin_ = staticCoins_[i];\\n            require(coin_ != address(0), \\\"CurveRegistryCache: invalid coin\\\");\\n            coins_[i] = coin_;\\n            _hasCoinDirectly[pool_][coin_] = true;\\n            _hasCoinAnywhere[pool_][coin_] = true;\\n            _coinIndex[pool_][coin_] = int128(uint128(i));\\n            _decimals[pool_].push(staticDecimals_[i]);\\n        }\\n        _nCoins[pool_] = nCoins_;\\n        _coins[pool_] = coins_;\\n        _interfaceVersion[pool_] = _getInterfaceVersion(pool_);\\n    }\\n\\n    function _setConvexPid(address pool_, address lpToken_) internal {\\n        uint256 length = BOOSTER.poolLength();\\n        address rewardPool;\\n        for (uint256 i; i < length; i++) {\\n            (address curveToken, , , address rewardPool_, , bool _isShutdown) = BOOSTER.poolInfo(i);\\n            if (lpToken_ != curveToken || _isShutdown) continue;\\n            rewardPool = rewardPool_;\\n            _convexPid[pool_] = i;\\n            break;\\n        }\\n        /// Only Curve pools that have a valid Convex PID can be added to the cache\\n        require(rewardPool != address(0), \\\"no convex pid found\\\");\\n        _convexRewardPool[pool_] = rewardPool;\\n    }\\n\\n    function _setConvexPid(\\n        address pool_,\\n        address lpToken_,\\n        uint256 pid_\\n    ) internal {\\n        (address curveToken, , , address rewardPool_, , bool _isShutdown) = BOOSTER.poolInfo(pid_);\\n        require(lpToken_ == curveToken, \\\"invalid lp token for curve pool\\\");\\n        require(!_isShutdown, \\\"convex pool is shutdown\\\");\\n        require(rewardPool_ != address(0), \\\"no convex pid found\\\");\\n        _convexRewardPool[pool_] = rewardPool_;\\n        _convexPid[pool_] = pid_;\\n    }\\n\\n    function isRegistered(address pool_) external view override returns (bool) {\\n        return _isRegistered[pool_];\\n    }\\n\\n    function lpToken(address pool_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (address)\\n    {\\n        return _lpToken[pool_];\\n    }\\n\\n    function assetType(address pool_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (CurvePoolUtils.AssetType)\\n    {\\n        return _assetType[pool_];\\n    }\\n\\n    function hasCoinDirectly(address pool_, address coin_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (bool)\\n    {\\n        return _hasCoinDirectly[pool_][coin_];\\n    }\\n\\n    function hasCoinAnywhere(address pool_, address coin_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (bool)\\n    {\\n        return _hasCoinAnywhere[pool_][coin_];\\n    }\\n\\n    function basePool(address pool_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (address)\\n    {\\n        return _basePool[pool_];\\n    }\\n\\n    function coinIndex(address pool_, address coin_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (int128)\\n    {\\n        return _coinIndex[pool_][coin_];\\n    }\\n\\n    function nCoins(address pool_) external view override onlyInitialized(pool_) returns (uint256) {\\n        return _nCoins[pool_];\\n    }\\n\\n    function coinIndices(\\n        address pool_,\\n        address from_,\\n        address to_\\n    )\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        )\\n    {\\n        return (\\n            _coinIndex[pool_][from_],\\n            _coinIndex[pool_][to_],\\n            _hasCoinDirectly[pool_][from_] && _hasCoinDirectly[pool_][to_]\\n        );\\n    }\\n\\n    function decimals(address pool_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (uint256[] memory)\\n    {\\n        return _decimals[pool_];\\n    }\\n\\n    /// @notice Returns the Curve interface version for a given pool\\n    /// @dev Version 0 uses `int128` for `coins` and `balances`, and `int128` for `get_dy`\\n    /// Version 1 uses `uint256` for `coins` and `balances`, and `int128` for `get_dy`\\n    /// Version 2 uses `uint256` for `coins` and `balances`, and `uint256` for `get_dy`\\n    /// They correspond with which interface the pool implements: ICurvePoolV0, ICurvePoolV1, ICurvePoolV2\\n    function interfaceVersion(address pool_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (uint256)\\n    {\\n        return _interfaceVersion[pool_];\\n    }\\n\\n    function poolFromLpToken(address lpToken_) external view override returns (address) {\\n        return _poolFromLpToken[lpToken_];\\n    }\\n\\n    function coins(address pool_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (address[] memory)\\n    {\\n        return _coins[pool_];\\n    }\\n\\n    function getPid(address pool_) external view override onlyInitialized(pool_) returns (uint256) {\\n        require(_convexRewardPool[pool_] != address(0), \\\"pid not found\\\");\\n        return _convexPid[pool_];\\n    }\\n\\n    function getRewardPool(address pool_)\\n        external\\n        view\\n        override\\n        onlyInitialized(pool_)\\n        returns (address)\\n    {\\n        return _convexRewardPool[pool_];\\n    }\\n\\n    function isShutdownPid(uint256 pid_) external view override returns (bool) {\\n        (, , , , , bool _isShutdown) = BOOSTER.poolInfo(pid_);\\n        return _isShutdown;\\n    }\\n\\n    function _isCurvePool(address pool_) internal view returns (bool) {\\n        try _CURVE_REGISTRY.is_registered(pool_) returns (bool registered_) {\\n            return registered_;\\n        } catch {\\n            return false;\\n        }\\n    }\\n\\n    function _getInterfaceVersion(address pool_) internal view returns (uint256) {\\n        if (_assetType[pool_] == CurvePoolUtils.AssetType.CRYPTO) return 2;\\n        try ICurvePoolV1(pool_).balances(uint256(0)) returns (uint256) {\\n            return 1;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"libraries/CurvePoolUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"../interfaces/vendor/ICurvePoolV2.sol\\\";\\nimport \\\"../interfaces/vendor/ICurvePoolV1.sol\\\";\\nimport \\\"./ScaledMath.sol\\\";\\n\\nlibrary CurvePoolUtils {\\n    using ScaledMath for uint256;\\n\\n    uint256 internal constant _DEFAULT_IMBALANCE_THRESHOLD = 0.02e18;\\n\\n    enum AssetType {\\n        USD,\\n        ETH,\\n        BTC,\\n        OTHER,\\n        CRYPTO\\n    }\\n\\n    struct PoolMeta {\\n        address pool;\\n        uint256 numberOfCoins;\\n        AssetType assetType;\\n        uint256[] decimals;\\n        uint256[] prices;\\n        uint256[] thresholds;\\n    }\\n\\n    function ensurePoolBalanced(PoolMeta memory poolMeta) internal view {\\n        uint256 fromDecimals = poolMeta.decimals[0];\\n        uint256 fromBalance = 10**fromDecimals;\\n        uint256 fromPrice = poolMeta.prices[0];\\n        for (uint256 i = 1; i < poolMeta.numberOfCoins; i++) {\\n            uint256 toDecimals = poolMeta.decimals[i];\\n            uint256 toPrice = poolMeta.prices[i];\\n            uint256 toExpectedUnscaled = (fromBalance * fromPrice) / toPrice;\\n            uint256 toExpected = toExpectedUnscaled.convertScale(\\n                uint8(fromDecimals),\\n                uint8(toDecimals)\\n            );\\n\\n            uint256 toActual;\\n\\n            if (poolMeta.assetType == AssetType.CRYPTO) {\\n                // Handling crypto pools\\n                toActual = ICurvePoolV2(poolMeta.pool).get_dy(0, i, fromBalance);\\n            } else {\\n                // Handling other pools\\n                toActual = ICurvePoolV1(poolMeta.pool).get_dy(0, int128(uint128(i)), fromBalance);\\n            }\\n\\n            require(\\n                _isWithinThreshold(toExpected, toActual, poolMeta.thresholds[i]),\\n                \\\"pool is not balanced\\\"\\n            );\\n        }\\n    }\\n\\n    function _isWithinThreshold(\\n        uint256 a,\\n        uint256 b,\\n        uint256 imbalanceTreshold\\n    ) internal pure returns (bool) {\\n        if (imbalanceTreshold == 0) imbalanceTreshold = _DEFAULT_IMBALANCE_THRESHOLD;\\n        if (a > b) return (a - b).divDown(a) <= imbalanceTreshold;\\n        return (b - a).divDown(b) <= imbalanceTreshold;\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/ICurveRegistryCache.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nimport \\\"./vendor/IBooster.sol\\\";\\nimport \\\"../libraries/CurvePoolUtils.sol\\\";\\n\\ninterface ICurveRegistryCache {\\n    function BOOSTER() external view returns (IBooster);\\n\\n    function initPool(address pool_) external;\\n\\n    function initPool(address pool_, uint256 pid_) external;\\n\\n    function lpToken(address pool_) external view returns (address);\\n\\n    function assetType(address pool_) external view returns (CurvePoolUtils.AssetType);\\n\\n    function isRegistered(address pool_) external view returns (bool);\\n\\n    function hasCoinDirectly(address pool_, address coin_) external view returns (bool);\\n\\n    function hasCoinAnywhere(address pool_, address coin_) external view returns (bool);\\n\\n    function basePool(address pool_) external view returns (address);\\n\\n    function coinIndex(address pool_, address coin_) external view returns (int128);\\n\\n    function nCoins(address pool_) external view returns (uint256);\\n\\n    function coinIndices(\\n        address pool_,\\n        address from_,\\n        address to_\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function decimals(address pool_) external view returns (uint256[] memory);\\n\\n    function interfaceVersion(address pool_) external view returns (uint256);\\n\\n    function poolFromLpToken(address lpToken_) external view returns (address);\\n\\n    function coins(address pool_) external view returns (address[] memory);\\n\\n    function getPid(address _pool) external view returns (uint256);\\n\\n    function getRewardPool(address _pool) external view returns (address);\\n\\n    function isShutdownPid(uint256 pid_) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurveMetaRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurveMetaRegistry {\\n    event CommitNewAdmin(uint256 indexed deadline, address indexed admin);\\n    event NewAdmin(address indexed admin);\\n\\n    function add_registry_handler(address _registry_handler) external;\\n\\n    function update_registry_handler(uint256 _index, address _registry_handler)\\n        external;\\n\\n    function get_registry_handlers_from_pool(address _pool)\\n        external\\n        view\\n        returns (address[10] memory);\\n\\n    function get_base_registry(address registry_handler)\\n        external\\n        view\\n        returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to)\\n        external\\n        view\\n        returns (address);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 i\\n    ) external view returns (address);\\n\\n    function find_pools_for_coins(address _from, address _to)\\n        external\\n        view\\n        returns (address[] memory);\\n\\n    function get_admin_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_admin_balances(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_balances(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_base_pool(address _pool) external view returns (address);\\n\\n    function get_base_pool(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to,\\n        uint256 _handler_id\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n\\n    function get_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_coins(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_decimals(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_fees(address _pool) external view returns (uint256[10] memory);\\n\\n    function get_fees(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[10] memory);\\n\\n    function get_gauge(address _pool) external view returns (address);\\n\\n    function get_gauge(address _pool, uint256 gauge_idx)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_gauge(\\n        address _pool,\\n        uint256 gauge_idx,\\n        uint256 _handler_id\\n    ) external view returns (address);\\n\\n    function get_gauge_type(address _pool) external view returns (int128);\\n\\n    function get_gauge_type(address _pool, uint256 gauge_idx)\\n        external\\n        view\\n        returns (int128);\\n\\n    function get_gauge_type(\\n        address _pool,\\n        uint256 gauge_idx,\\n        uint256 _handler_id\\n    ) external view returns (int128);\\n\\n    function get_lp_token(address _pool) external view returns (address);\\n\\n    function get_lp_token(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_n_coins(address _pool) external view returns (uint256);\\n\\n    function get_n_coins(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_n_underlying_coins(address _pool)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_n_underlying_coins(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_pool_asset_type(address _pool) external view returns (uint256);\\n\\n    function get_pool_asset_type(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_pool_from_lp_token(address _token)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_pool_from_lp_token(address _token, uint256 _handler_id)\\n        external\\n        view\\n        returns (address);\\n\\n    function get_pool_params(address _pool)\\n        external\\n        view\\n        returns (uint256[20] memory);\\n\\n    function get_pool_params(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[20] memory);\\n\\n    function get_pool_name(address _pool) external view returns (string memory);\\n\\n    function get_pool_name(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (string memory);\\n\\n    function get_underlying_balances(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_balances(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_coins(address _pool)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_underlying_coins(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (address[8] memory);\\n\\n    function get_underlying_decimals(address _pool)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_underlying_decimals(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (uint256[8] memory);\\n\\n    function get_virtual_price_from_lp_token(address _token)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_virtual_price_from_lp_token(\\n        address _token,\\n        uint256 _handler_id\\n    ) external view returns (uint256);\\n\\n    function is_meta(address _pool) external view returns (bool);\\n\\n    function is_meta(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (bool);\\n\\n    function is_registered(address _pool) external view returns (bool);\\n\\n    function is_registered(address _pool, uint256 _handler_id)\\n        external\\n        view\\n        returns (bool);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 _index) external view returns (address);\\n\\n    function address_provider() external view returns (address);\\n\\n    function owner() external view returns (address);\\n\\n    function get_registry(uint256 arg0) external view returns (address);\\n\\n    function registry_length() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurvePoolV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurvePoolV1 {\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function add_liquidity(uint256[8] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[7] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[6] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[5] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[4] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[3] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\\n\\n    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount)\\n        external;\\n\\n    function lp_token() external view returns (address);\\n\\n    function A_PRECISION() external view returns (uint256);\\n\\n    function A_precise() external view returns (uint256);\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] calldata min_amounts) external;\\n\\n    function exchange(\\n        int128 from,\\n        int128 to,\\n        uint256 _from_amount,\\n        uint256 _min_to_amount\\n    ) external;\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function balances(uint256 i) external view returns (uint256);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 _dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[4] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[3] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_token_amount(uint256[2] calldata amounts, bool deposit)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 _token_amount, int128 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function remove_liquidity_one_coin(\\n        uint256 _token_amount,\\n        int128 i,\\n        uint256 min_amount\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/ICurvePoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface ICurvePoolV2 {\\n    function token() external view returns (address);\\n\\n    function coins(uint256 i) external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function exchange(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[2] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function add_liquidity(\\n        uint256[3] memory amounts,\\n        uint256 min_mint_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount)\\n        external\\n        returns (uint256);\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[2] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[2] memory min_amounts)\\n        external;\\n\\n    function remove_liquidity(\\n        uint256 _amount,\\n        uint256[3] memory min_amounts,\\n        bool use_eth,\\n        address receiver\\n    ) external;\\n\\n    function remove_liquidity(uint256 _amount, uint256[3] memory min_amounts)\\n        external;\\n\\n    function remove_liquidity_one_coin(\\n        uint256 token_amount,\\n        uint256 i,\\n        uint256 min_amount,\\n        bool use_eth,\\n        address receiver\\n    ) external returns (uint256);\\n\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 dx\\n    ) external view returns (uint256);\\n\\n    function calc_token_amount(uint256[] memory amounts)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function calc_withdraw_one_coin(uint256 token_amount, uint256 i)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"libraries/ScaledMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.20;\\n\\nlibrary ScaledMath {\\n    uint256 internal constant DECIMALS = 18;\\n    uint256 internal constant ONE = 10**DECIMALS;\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * b) / ONE;\\n    }\\n\\n    function mulDown(\\n        uint256 a,\\n        uint256 b,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (a * b) / (10**decimals);\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a * ONE) / b;\\n    }\\n\\n    function divDown(\\n        uint256 a,\\n        uint256 b,\\n        uint256 decimals\\n    ) internal pure returns (uint256) {\\n        return (a * 10**decimals) / b;\\n    }\\n\\n    function divUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        return ((a * ONE) - 1) / b + 1;\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * b) / int256(ONE);\\n    }\\n\\n    function mulDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * b) / uint128(ONE);\\n    }\\n\\n    function mulDown(\\n        int256 a,\\n        int256 b,\\n        uint256 decimals\\n    ) internal pure returns (int256) {\\n        return (a * b) / int256(10**decimals);\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        return (a * int256(ONE)) / b;\\n    }\\n\\n    function divDownUint128(uint128 a, uint128 b) internal pure returns (uint128) {\\n        return (a * uint128(ONE)) / b;\\n    }\\n\\n    function divDown(\\n        int256 a,\\n        int256 b,\\n        uint256 decimals\\n    ) internal pure returns (int256) {\\n        return (a * int256(10**decimals)) / b;\\n    }\\n\\n    function convertScale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function convertScale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        if (fromDecimals == toDecimals) return a;\\n        if (fromDecimals > toDecimals) return downscale(a, fromDecimals, toDecimals);\\n        return upscale(a, fromDecimals, toDecimals);\\n    }\\n\\n    function upscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a * (10**(toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        uint256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (uint256) {\\n        return a / (10**(fromDecimals - toDecimals));\\n    }\\n\\n    function upscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a * int256(10**(toDecimals - fromDecimals));\\n    }\\n\\n    function downscale(\\n        int256 a,\\n        uint8 fromDecimals,\\n        uint8 toDecimals\\n    ) internal pure returns (int256) {\\n        return a / int256(10**(fromDecimals - toDecimals));\\n    }\\n\\n    function intPow(uint256 a, uint256 n) internal pure returns (uint256) {\\n        uint256 result = ONE;\\n        for (uint256 i; i < n; ) {\\n            result = mulDown(result, a);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function absSub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return a >= b ? a - b : b - a;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"interfaces/vendor/IBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.20;\\n\\ninterface IBooster {\\n    function poolInfo(uint256 pid)\\n        external\\n        view\\n        returns (\\n            address lpToken,\\n            address token,\\n            address gauge,\\n            address crvRewards,\\n            address stash,\\n            bool shutdown\\n        );\\n\\n    function poolLength() external view returns (uint256);\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function earmarkRewards(uint256 _pid) external returns (bool);\\n\\n    function isShutdown() external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@chainlink/contracts/=node_modules/@chainlink/contracts/src/v0.8/\",\r\n      \"@openzeppelin/=node_modules/@openzeppelin/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"BOOSTER\",\"outputs\":[{\"internalType\":\"contract IBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"assetType\",\"outputs\":[{\"internalType\":\"enum CurvePoolUtils.AssetType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"basePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coin_\",\"type\":\"address\"}],\"name\":\"coinIndex\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"}],\"name\":\"coinIndices\",\"outputs\":[{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"\",\"type\":\"int128\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"coins\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getRewardPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coin_\",\"type\":\"address\"}],\"name\":\"hasCoinAnywhere\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"coin_\",\"type\":\"address\"}],\"name\":\"hasCoinDirectly\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"pid_\",\"type\":\"uint256\"}],\"name\":\"initPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"initPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"interfaceVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid_\",\"type\":\"uint256\"}],\"name\":\"isShutdownPid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"nCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lpToken_\",\"type\":\"address\"}],\"name\":\"poolFromLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CurveRegistryCache", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}