{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BaseERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ncontract  BaseERC20  {\\r\\n    uint public constant  MAX_INT = 2**256 - 1;\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint public  decimals = 18;\\r\\n    uint public _totalSupply;\\r\\n    mapping(address => uint256) public  _balanceOf;\\r\\n    mapping(address => mapping(address => uint256)) public _allowance;\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    constructor(string memory _name){\\r\\n        name = _name;\\r\\n        symbol = _name;\\r\\n        \\r\\n    }\\r\\n    \\r\\n    function _mint(address to, uint256 value) internal {\\r\\n        _totalSupply +=  value;\\r\\n        _balanceOf[to] +=  value;\\r\\n        emit Transfer(address(0), to, value);\\r\\n    }\\r\\n\\r\\n    function _burn(address from, uint256 value) internal {\\r\\n        _balanceOf[from] -=  value;\\r\\n        _totalSupply -=  value;\\r\\n        emit Transfer(from, address(0), value);\\r\\n    }\\r\\n\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _balanceOf[from] -= value;\\r\\n        _balanceOf[to] += value;\\r\\n        emit Transfer(from, to, value);\\r\\n    }\\r\\n\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _allowance[owner][spender] = value;\\r\\n        emit Approval(owner, spender, value);\\r\\n    }\\r\\n    function balanceOf(address account) public virtual view returns (uint256){\\r\\n        return _balanceOf[account];\\r\\n    }\\r\\n    function totalSupply() public virtual view returns (uint256){\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    function allowance(address owner, address spender) public virtual view returns (uint256){\\r\\n        return _allowance[owner][spender];\\r\\n    }\\r\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\r\\n        _approve(msg.sender, spender, value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.16;\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.16;\\r\\n\\r\\ninterface IManagement {\\r\\n    \\r\\n    function platformFeeAddress() external view returns (address);\\r\\n\\r\\n    function isContractManager(address manager) external view returns (bool);\\r\\n\\r\\n    function isWhiteInvestor(address investor) external view returns (bool);\\r\\n\\r\\n    function isRestrictInvestor(address investor) external view returns (bool);\\r\\n\\r\\n    function isWhiteContract(address contractAddress) external view returns (bool);\\r\\n    \\r\\n    function isBlockInvestor(address investor) external view returns (bool);\\r\\n\\r\\n    \\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/interfaces/IUpgradedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.16;\\r\\n\\r\\n\\r\\ninterface IUpgradedToken{\\r\\n    \\r\\n    function transferByLegacy (address sender,address to,uint256 value) external returns (bool) ;\\r\\n    \\r\\n    function transferFromByLegacy (address sender,address from,address to,uint256 value) external returns (bool);\\r\\n\\r\\n    function balanceOf(address account) external view returns (uint);\\r\\n\\r\\n    function approveByLegacy (address sender,address to,uint256 value) external returns (bool);\\r\\n\\r\\n    function allowance(address owner, address spender) external view returns (uint);\\r\\n\\r\\n    function totalSupply() external view returns (uint);\\r\\n    \\r\\n} \\r\\n\\r\\n   \\r\\n    \\r\\n  \\r\\n\\r\\n\"\r\n    },\r\n    \"contracts/SecurityToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity 0.8.16;\\r\\n\\r\\nimport './interfaces/IERC20.sol';\\r\\nimport './interfaces/IManagement.sol';\\r\\nimport './BaseERC20.sol';\\r\\nimport './interfaces/IUpgradedToken.sol';\\r\\n\\r\\ncontract SecurityToken  is BaseERC20 {\\r\\n    uint8 public transferFlag = 1;\\r\\n    bool public upgraded;\\r\\n    address public upgradedAddress;\\r\\n    address public management;\\r\\n    bool public paused;\\r\\n    address public issuer;\\r\\n    \\r\\n    event SetSTManagement(address indexed from, address indexed newManagement);\\r\\n    event Issue(address indexed from, address indexed to, uint256 value);\\r\\n    event Redeem(address indexed from, address indexed to, uint256 value);\\r\\n    event Paused(bool paused);\\r\\n    event Flag(uint8 transferFlag);\\r\\n    event Upgrade(address newAddress);\\r\\n\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused,\\\"Paused\\\");\\r\\n        _;\\r\\n    } \\r\\n\\r\\n    modifier onlyManagement() {\\r\\n        require(msg.sender == management,\\\"Caller is not management\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier onlyContractManager() {\\r\\n        require(IManagement(management).isContractManager(msg.sender),\\\"Caller is not contract manager\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(\\r\\n        string memory _name, \\r\\n        address _issuer,\\r\\n        uint _amount,\\r\\n        address _management\\r\\n    ) BaseERC20(_name) {\\r\\n        require(_management!= address(0));\\r\\n        management = _management;\\r\\n        issuer = _issuer;\\r\\n        decimals = _amount;\\r\\n    }\\r\\n\\r\\n\\r\\n    function transfer(\\r\\n        address to, \\r\\n        uint value\\r\\n    )external whenNotPaused returns (bool) {\\r\\n         if(upgraded){\\r\\n            return IUpgradedToken(upgradedAddress).transferByLegacy(msg.sender, to, value);\\r\\n        }\\r\\n        if(transferFlag == 1){\\r\\n            require(IManagement(management).isWhiteContract(msg.sender)&&//\u53d1\u8d77\u8005\u767d\u540d\u5355\u5408\u7ea6\\t\\t\\r\\n                (IManagement(management).isWhiteInvestor(to) || IManagement(management).isRestrictInvestor(to)),'Forbid transfer');\\r\\n        }else if(transferFlag == 2){\\r\\n            require((IManagement(management).isWhiteContract(msg.sender)||IManagement(management).isWhiteInvestor(msg.sender) || IManagement(management).isRestrictInvestor(msg.sender)) &&\\r\\n                (IManagement(management).isWhiteInvestor(to) || IManagement(management).isRestrictInvestor(to)),'Forbid transfer');//\u53d1\u8d77\u8005\u5e73\u53f0\u7528\u6237\\r\\n        }else{\\t\\r\\n            require(!IManagement(management).isBlockInvestor(msg.sender),'Block');//\u4efb\u4f55\u5730\u5740\uff08\u975eblock\u5730\u5740\uff09\\r\\n        }\\r\\n        _transfer(msg.sender, to, value);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint value\\r\\n    )external whenNotPaused  returns (bool) {\\r\\n        if(upgraded){\\r\\n            return IUpgradedToken(upgradedAddress).transferFromByLegacy(msg.sender, from ,to, value);\\r\\n        }\\r\\n        if(transferFlag == 1){\\r\\n            require(IManagement(management).isWhiteContract(msg.sender)&&//\u53d1\u8d77\u8005\u767d\u540d\u5355\u5408\u7ea6\\r\\n                (IManagement(management).isWhiteInvestor(from) || IManagement(management).isRestrictInvestor(from))&&\\r\\n                (IManagement(management).isWhiteContract(to)||IManagement(management).isWhiteInvestor(to) || IManagement(management).isRestrictInvestor(to)),'Forbid transferFrom');\\r\\n        }else if(transferFlag == 2){\\r\\n            require((IManagement(management).isWhiteContract(msg.sender)||IManagement(management).isWhiteInvestor(msg.sender) || IManagement(management).isRestrictInvestor(msg.sender))&& //\u53d1\u8d77\u8005\u5e73\u53f0\u7528\u6237\\r\\n                (IManagement(management).isWhiteInvestor(from) || IManagement(management).isRestrictInvestor(from))&&\\r\\n                (IManagement(management).isWhiteContract(to)||IManagement(management).isWhiteInvestor(to) || IManagement(management).isRestrictInvestor(to)),'Forbid transferFrom');\\r\\n        }else{\\t\\r\\n            require(!IManagement(management).isBlockInvestor(from),'Block'); //\u4efb\u4f55\u5730\u5740\uff08\u975eblock\u5730\u5740\uff09\\r\\n        }\\r\\n        if (_allowance[from][msg.sender] != MAX_INT) {\\r\\n            _allowance[from][msg.sender] -=  value;\\r\\n        }\\r\\n        _transfer(from, to, value);\\r\\n        return true;\\r\\n    }\\r\\n    function totalSupply() override public view returns (uint) {\\r\\n        if (upgraded) {\\r\\n            return IUpgradedToken(upgradedAddress).totalSupply();\\r\\n        } else {\\r\\n            return super.totalSupply();\\r\\n        }\\r\\n    }\\r\\n    function approve(address _spender, uint _value) public override returns(bool) {\\r\\n        if (upgraded) {\\r\\n            return IUpgradedToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);\\r\\n        } else {\\r\\n            return super.approve(_spender, _value);\\r\\n        }\\r\\n    }\\r\\n    function balanceOf(address who) public view override returns (uint) {\\r\\n        if (upgraded) {\\r\\n            return IUpgradedToken(upgradedAddress).balanceOf(who);\\r\\n        } else {\\r\\n            return super.balanceOf(who);\\r\\n        }\\r\\n    }\\r\\n    function allowance(address _owner, address _spender) public view override returns (uint remaining) {\\r\\n        if (upgraded) {\\r\\n            return IUpgradedToken(upgradedAddress).allowance(_owner, _spender);\\r\\n        } else {\\r\\n            return super.allowance(_owner, _spender);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function setManagement(address _management) external onlyManagement  {\\r\\n        require(_management!= address(0));\\r\\n        management = _management;\\r\\n        emit SetSTManagement(address(this),_management);\\r\\n    }\\r\\n\\r\\n    function setTransferFlag(uint8 _transferFlag) external onlyContractManager {\\r\\n        transferFlag = _transferFlag;\\r\\n        emit Flag(_transferFlag);\\r\\n    }\\r\\n\\r\\n    function setPause(bool _paused) external onlyContractManager {\\r\\n        paused = _paused;\\r\\n        emit Paused(_paused);\\r\\n    }\\r\\n\\r\\n    function issue(\\r\\n        address investor,\\r\\n        uint256 value\\r\\n    ) external onlyContractManager  {\\r\\n        if (transferFlag == 1 || transferFlag == 2){\\r\\n            require(IManagement(management).isWhiteInvestor(investor) || IManagement(management).isWhiteContract(investor),\\\"Forbid issue\\\");\\r\\n        }else{\\r\\n            require(!IManagement(management).isBlockInvestor(investor),\\\"Block\\\"); //\u4efb\u4f55\u5730\u5740\uff08\u975eblocklist\u5730\u5740\uff09\\r\\n        }\\r\\n        _mint(investor,value);\\r\\n        emit Issue(address(this),investor,value);\\r\\n    }\\r\\n\\r\\n    function redeem(\\r\\n        address investor,\\r\\n        uint256 value\\r\\n    ) external onlyContractManager {\\r\\n        _burn(investor,value);\\r\\n        emit Redeem(address(this),investor,value);\\r\\n    }\\r\\n\\r\\n    function upgrade(address _upgradedAddress) external onlyContractManager {\\r\\n        require(_upgradedAddress!= address(0));\\r\\n        upgraded = true;\\r\\n        upgradedAddress = _upgradedAddress;\\r\\n        emit Upgrade(_upgradedAddress);\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"transferFlag\",\"type\":\"uint8\"}],\"name\":\"Flag\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Issue\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"paused\",\"type\":\"bool\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManagement\",\"type\":\"address\"}],\"name\":\"SetSTManagement\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_INT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"remaining\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"management\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"investor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_management\",\"type\":\"address\"}],\"name\":\"setManagement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_transferFlag\",\"type\":\"uint8\"}],\"name\":\"setTransferFlag\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFlag\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_upgradedAddress\",\"type\":\"address\"}],\"name\":\"upgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgraded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upgradedAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SecurityToken", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000003b3404d712d088bae9c803982f8e8c21cfc18aca0000000000000000000000000000000000000000000000000000000000000006474d4d4630310000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}