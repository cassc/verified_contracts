{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.18;\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _owner = msg.sender;\r\n        emit OwnershipTransferred(address(0), _owner);\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\ninterface AggregatorV3Interface {\r\n\r\n  function decimals()\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description()\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version()\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  function getRoundData(\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function latestRoundData()\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n}\r\ncontract presale is Ownable {\r\n    AggregatorV3Interface internal priceFeed;\r\n\r\n    uint256[] public pricesUSDT = [\r\n        43478000000000000000000,\r\n        39526000000000000000000,\r\n        35932000000000000000000,\r\n        32666000000000000000000,\r\n        29696000000000000000000,\r\n        26997000000000000000000,\r\n        24542000000000000000000,\r\n        22311000000000000000000,\r\n        20283000000000000000000,\r\n        18439000000000000000000 \r\n    ]; // Amount of token user will get per 1 USDT in stage Wise\r\n    uint256 public constant totalTokenAmount = 500000000000000000000000000000; // Total Amount Allocated for Presale\r\n                                                \r\n     uint256 public constant stages = 10; // Number Of Stages\r\n    uint256 public tokenAmountPerStage;\r\n    uint256 public lastStagetime ;\r\n    uint256 public stage = 0;\r\n    uint256 public tokenSold = 0;\r\n    IERC20 public token = IERC20(0xb042FB97DCeF012c3F0F544e38F734c7F1902E1F);\r\n    IERC20 public usdt = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\r\n    mapping(address => Purchase[]) public purchases;\r\n\r\n    struct Purchase {\r\n        uint256 stage;\r\n        uint256 amount;\r\n        bool claimed;\r\n    }\r\n    bool public isPresaleOpen = true;\r\n        bool public isClaimable = false;\r\n\r\n\r\n    constructor() {\r\n        tokenAmountPerStage = totalTokenAmount / stages;\r\n        lastStagetime = block.timestamp;\r\n       priceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\r\n\r\n    }\r\n\r\n    function buyTokensUSDT(uint256 usdtAmount) public {\r\n        require(isPresaleOpen, \"Presale has ended\");\r\n        \r\n        uint256 tokensToBuy = usdtAmount * pricesUSDT[stage];\r\n        uint256 usdtAmountFortransfer = usdtAmount / 1000000000000;\r\n        usdt.transferFrom(msg.sender, address(this), usdtAmountFortransfer);\r\n        \r\n        tokenSold += (tokensToBuy / 1000000000000000000);\r\n        purchases[msg.sender].push(Purchase(stage, tokensToBuy / 1000000000000000000, false));\r\n\r\n        if (tokenSold >= tokenAmountPerStage) {\r\n            stage++;\r\n            tokenSold = 0;\r\n            lastStagetime = block.timestamp;\r\n        }\r\n    }\r\n function getLatestPriceETH() public view returns (int) {\r\n        (\r\n            uint80 roundID, \r\n            int price,\r\n            uint startedAt,\r\n            uint timeStamp,\r\n            uint80 answeredInRound\r\n        ) = priceFeed.latestRoundData();\r\n        return price / 100000000;\r\n    }\r\n    function buyTokensNative() public payable {\r\n        \r\n       int256 latestPrice = getLatestPriceETH();\r\n       uint256 nativeprice = uint256(latestPrice) ;\r\n       require(isPresaleOpen, \"Presale has ended\");\r\n\r\n        uint256 tokensToBuy = msg.value * (pricesUSDT[stage] * nativeprice);\r\n\r\n        tokenSold += (tokensToBuy / 1000000000000000000);\r\n        purchases[msg.sender].push(Purchase(stage, tokensToBuy / 1000000000000000000 , false));\r\n\r\n        if (tokenSold >= tokenAmountPerStage) {\r\n            stage++;\r\n            tokenSold = 0;\r\n            lastStagetime = block.timestamp;\r\n        }\r\n\r\n        address payable contractOwner = payable(owner());\r\n        contractOwner.transfer(msg.value);\r\n    }\r\n   \r\n   \r\n    function claimTokens() public {\r\n           require(isClaimable, \"Claim Not allowed at this moment\");\r\n        require(purchases[msg.sender].length > 0, \"No purchases found\");\r\n\r\n        uint256 totalTokensToClaim = 0;\r\n        for (uint256 i = 0; i < purchases[msg.sender].length; i++) {\r\n            Purchase storage purchase = purchases[msg.sender][i];\r\n            require(!purchase.claimed, \"Tokens already claimed\");\r\n\r\n            totalTokensToClaim += purchase.amount;\r\n            purchase.claimed = true;\r\n  }\r\n\r\n        require(\r\n            token.balanceOf(address(this)) >= totalTokensToClaim,\r\n            \"Not enough tokens available\"\r\n        );\r\n\r\n        require(\r\n            token.transfer(msg.sender, totalTokensToClaim),\r\n            \"Token transfer failed\"\r\n        );\r\n    }\r\n  function Claimable(bool status) public onlyOwner {\r\n        isClaimable = status;\r\n    }\r\n    function getPurchaseInfo(address walletAddress)\r\n        public\r\n        view\r\n        returns (Purchase[] memory)\r\n    {\r\n        return purchases[walletAddress];\r\n    }\r\n\r\n    function EndPresale(bool status) public onlyOwner {\r\n        isPresaleOpen = status;\r\n    }\r\n    \r\n\r\n    function withdrawStablecoins() external onlyOwner {\r\n        uint256 balance = usdt.balanceOf(address(this));\r\n        require(balance > 0, \"Presale: No stablecoins to withdraw\");\r\n\r\n        usdt.transfer(owner(), balance);\r\n    }\r\n\r\n    function withdrawTokens() external onlyOwner {\r\n        uint256 balance = token.balanceOf(address(this));\r\n        require(balance > 0, \"Presale: No tokens to withdraw\");\r\n\r\n        token.transfer(owner(), balance);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Claimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"EndPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTokensNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"usdtAmount\",\"type\":\"uint256\"}],\"name\":\"buyTokensUSDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPriceETH\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"walletAddress\",\"type\":\"address\"}],\"name\":\"getPurchaseInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"internalType\":\"struct presale.Purchase[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isClaimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isPresaleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastStagetime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pricesUSDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"purchases\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"claimed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAmountPerStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdt\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStablecoins\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "presale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c6fa28df8e702b7be2f33442e9d4005a53cee66c7df604657178ce57ab5e6617"}