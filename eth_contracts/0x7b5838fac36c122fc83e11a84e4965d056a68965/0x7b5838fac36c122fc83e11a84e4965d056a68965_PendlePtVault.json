{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/vaults/presets/PendlePtVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\r\\nimport \\\"contracts/interfaces/AggregatorInterface.sol\\\";\\r\\nimport \\\"contracts/interfaces/IPPYLpOracle.sol\\\";\\r\\nimport \\\"contracts/interfaces/IPMarket.sol\\\";\\r\\nimport \\\"contracts/vaults/BaseVault.sol\\\";\\r\\nimport \\\"forge-std/console.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Pendle PT vault\\r\\n * Generic contract initialized from the pendle market address\\r\\n * Pendle PT tokens have no income. \\r\\n * Their value increase as the discount to underlying decreases over time\\r\\n * PT to asset rate is given by the Pendle Oracle, asset rate is given by Chainlink\\r\\n */\\r\\ncontract PendlePtVault is BaseVault, IOnDemandOracle {\\r\\n  address private _collateralAsset;\\r\\n  IPMarket private pendleMarket; \\r\\n  IPPYLpOracle private pendleOracle;\\r\\n  AggregatorInterface private chainlinkOracle;\\r\\n  \\r\\n  \\r\\n  /// @notice collateral address getter\\r\\n  function collateralAsset() public view override returns (address) {\\r\\n    return _collateralAsset;\\r\\n  }  \\r\\n  \\r\\n  /// @notice Initialize parameters\\r\\n  /// @dev The PT pricing is based on the yield token underlying\\r\\n  /// e.g. for PT-sUSDe, the underlying asset is USDe and the chainlink feed should reference that (not sUSDe)\\r\\n  constructor(address _synth, address _pendleMarket, address _pendleOracle, address _chainlinkOracle) \\r\\n    BaseVault(_synth, address(this), _getCollateralAsset(_pendleMarket))\\r\\n  {\\r\\n    require(_chainlinkOracle != address(0), \\\"Invalid oracle\\\");\\r\\n    require(IPPYLpOracle(_pendleOracle).getPtToAssetRate(_pendleMarket, 3600) > 0, \\\"Invalid oracle\\\");\\r\\n    _collateralAsset = _getCollateralAsset(_pendleMarket);\\r\\n    pendleOracle = IPPYLpOracle(_pendleOracle);\\r\\n    chainlinkOracle = AggregatorInterface(_chainlinkOracle);\\r\\n    pendleMarket = IPMarket(_pendleMarket);\\r\\n  }\\r\\n  \\r\\n  function _getCollateralAsset(address _pendleMarket) internal view returns (address PT) {\\r\\n    (, PT,) = IPMarket(_pendleMarket).readTokens();\\r\\n  }\\r\\n\\r\\n\\r\\n  function emergencyLiquidate(address user, uint debtAmount, bytes calldata priceUpdateData) external override payable {\\r\\n    revert(\\\"Disabled on this vault\\\");\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /////// Oracle functions\\r\\n\\r\\n  function latestAnswer() public view returns (int256){\\r\\n    uint ptToAssetRate = pendleOracle.getPtToAssetRate(address(pendleMarket), 3600);\\r\\n    int assetPrice = chainlinkOracle.latestAnswer();\\r\\n    return assetPrice * int(ptToAssetRate) / 1e18;\\r\\n  }\\r\\n\\r\\n  function updateAnswer(bytes calldata priceUpdateData) external payable returns (int256){\\r\\n    return latestAnswer();\\r\\n  }\\r\\n  \\r\\n  function decimals() external view returns (uint256){\\r\\n    return 8;\\r\\n  }\\r\\n  \\r\\n  function lastUpdate() external view returns (uint256){\\r\\n    return block.timestamp;\\r\\n  }\\r\\n  \\r\\n  function isStale() external view returns (bool) {\\r\\n    return false;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/interfaces/IERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed sender,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface AggregatorInterface {\\r\\n  function latestAnswer() external view returns (int256);\\r\\n  function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\r\\n  function decimals() external view returns (uint8);\\r\\n  function description() external view returns (string memory);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IPPYLpOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPPYLpOracle {\\n    event SetBlockCycleNumerator(uint16 newBlockCycleNumerator);\\n\\n    function getPtToAssetRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getYtToAssetRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getLpToAssetRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getPtToSyRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getYtToSyRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getLpToSyRate(address market, uint32 duration) external view returns (uint256);\\n\\n    function getOracleState(\\n        address market,\\n        uint32 duration\\n    )\\n        external\\n        view\\n        returns (bool increaseCardinalityRequired, uint16 cardinalityRequired, bool oldestObservationSatisfied);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n\\ninterface IPMarket {\\n    function readTokens() external view returns (address _SY, address _PT, address _YT);\\n\\n    function isExpired() external view returns (bool);\\n\\n    function expiry() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/vaults/BaseVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"../pools/SafetyPool.sol\\\";\\r\\nimport \\\"../interfaces/ISynth.sol\\\";\\r\\nimport \\\"../interfaces/IOnDemandOracle.sol\\\";\\r\\nimport \\\"../interfaces/IBaseVault.sol\\\";\\r\\n\\r\\n/**\\r\\n * \\r\\n */ \\r\\ncontract BaseVault is IBaseVault, Ownable {\\r\\n  using SafeERC20 for ERC20;\\r\\n  \\r\\n  /// Events\\r\\n  event DepositAndMint(address indexed onBehalfOf, address collateral, uint256 collateralAmount,  uint mintAmount);\\r\\n  event WithdrawAndBurn(address indexed onBehalfOf, address collateral, uint256 collateralAmount,  uint burnAmount);\\r\\n  event RepayDebt(address indexed onBehalfOf, uint repaidAmount);\\r\\n  event Liquidate(address indexed onBehalfOf, uint256 debtAmount, uint256 collateralAmount);\\r\\n  event EmergencyLiquidate(address indexed onBehalfOf, uint256 debtAmount, uint256 collateralAmount);\\r\\n  event RepayEmergencyDebt(uint debtAmount, uint clawedAmount);\\r\\n  event RigidRedemption(address indexed liquidator, uint redeemedAmount, uint clawedAmount);\\r\\n  event CollectIncome(uint amount);\\r\\n  \\r\\n  /// @notice Synth token minted by this vault\\r\\n  address public synth;\\r\\n  /// @notice Safety pool able to receive liquidated debt\\r\\n  address public safetyPool;\\r\\n  /// @notice Oracle address\\r\\n  address public oracle;\\r\\n  \\r\\n  /// @notice Users collateral and debt balances\\r\\n  mapping(address => uint) public collateralBalances;\\r\\n  mapping(address => uint) public debtBalances;\\r\\n  /// @notice Total collateral deposited, useful for tracking when rebases happen\\r\\n  uint internal _totalDepositedCollateral;\\r\\n  uint internal constant LIQUIDITY_INDEX_BASE = 1e27;\\r\\n  /// @notice Base index used to accumulate rewards\\r\\n  uint public liquidityIndex;\\r\\n  /// @notice Total debt issued\\r\\n  uint public totalDebt;\\r\\n  \\r\\n  /// @notice Redemption fee per 10_000\\r\\n  uint public constant redemptionFee = 50;\\r\\n  /// vault size limit, default: no limit\\r\\n  uint public collateralLimit = type(uint).max;\\r\\n\\r\\n  \\r\\n  /// @notice Initialize parameters\\r\\n  constructor(address _synth, address _oracle, address _collateralAsset) {\\r\\n    require(_oracle != address(0), \\\"BV: Invalid Oracle\\\");\\r\\n    synth = _synth;\\r\\n    oracle = _oracle;\\r\\n    // Create safety pool contract\\r\\n    string memory symbol = ERC20(_collateralAsset).symbol();\\r\\n    string memory _name = string(abi.encodePacked(\\\"Monroe \\\", symbol, \\\" Safety Pool\\\"));\\r\\n    string memory _symbol = string(abi.encodePacked(\\\"mon\\\", symbol, \\\"-SfP\\\"));\\r\\n    safetyPool = address(new SafetyPool(_collateralAsset, _name, _symbol));\\r\\n    liquidityIndex = LIQUIDITY_INDEX_BASE;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Set the vault collateral limit\\r\\n  /// @dev Set to 0 to disable mint+deposits\\r\\n  function setCollateralLimit(uint _limit) public onlyOwner {\\r\\n    collateralLimit = _limit;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Update the collateral price from offchain data in case of on-demand data feed \\r\\n  /// @param priceUpdateData Data needed to update the oracle in case of pull oracle\\r\\n  /// @dev Oracle is expected to revert if wrong updata data or if the price is still stale\\r\\n  function updatePrice(bytes calldata priceUpdateData) public payable virtual returns (uint price) {\\r\\n    price = uint(IOnDemandOracle(oracle).updateAnswer{value: msg.value}(priceUpdateData));\\r\\n  }\\r\\n  \\r\\n  fallback() external payable { revert(); }\\r\\n  receive() external payable { revert(); }\\r\\n\\r\\n  \\r\\n  /// @notice Get collateral price without updating or checking staleness\\r\\n  function latestPrice() public view virtual returns (uint price) {\\r\\n    price = uint(IOnDemandOracle(oracle).latestAnswer());\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Get balance of user based on liquidity index\\r\\n  function balanceOf(address user) public view returns (uint){\\r\\n    return collateralBalances[user] * liquidityIndex / LIQUIDITY_INDEX_BASE;\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice collateral address getter\\r\\n  function collateralAsset() public view virtual returns (address) {}\\r\\n  \\r\\n  \\r\\n  /// @notice Deposit collateral and/or mint synth\\r\\n  /// @dev Mint is only allowed if it leaves the position in a healthy state\\r\\n  function depositAndMint(uint256 collateralAmount, uint256 mintAmount, bytes calldata priceUpdateData) external payable {\\r\\n    if (msg.sender == safetyPool) require(debtBalances[safetyPool] == 0, \\\"BV: SP outstanding debt\\\");\\r\\n    updatePrice(priceUpdateData);\\r\\n    checkIncome();\\r\\n    if (collateralAmount > 0){\\r\\n      require(ERC20(collateralAsset()).balanceOf(address(this)) + collateralAmount <= collateralLimit, \\\"BV: Max TVL Reached\\\");\\r\\n      ERC20(collateralAsset()).safeTransferFrom(msg.sender, address(this), collateralAmount);\\r\\n      _totalDepositedCollateral += collateralAmount;\\r\\n      increaseCollateral(msg.sender, collateralAmount);\\r\\n    }\\r\\n    if(mintAmount > 0) {\\r\\n      ISynth(synth).mint(msg.sender, mintAmount);\\r\\n      increaseDebt(msg.sender, mintAmount);\\r\\n    }\\r\\n    \\r\\n    // if minted tokens, vault health must be above threshold\\r\\n    if(mintAmount > 0) _checkHealth(msg.sender);\\r\\n    emit DepositAndMint(msg.sender, collateralAsset(), collateralAmount, mintAmount);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Withdraw and/or burn\\r\\n  /// @dev Withdraw is only allowed if it leaves the position in a healthy state\\r\\n  function withdrawAndBurn(uint256 collateralAmount, uint256 burnAmount, bytes calldata priceUpdateData) external payable {\\r\\n    if (msg.sender == safetyPool) require(debtBalances[safetyPool] == 0, \\\"BV: SP outstanding debt\\\");\\r\\n    updatePrice(priceUpdateData);\\r\\n    checkIncome();\\r\\n    require(balanceOf(msg.sender) >= collateralAmount, \\\"BV: Insufficient Balance\\\");\\r\\n    repay(msg.sender, burnAmount);\\r\\n    uint adjAmount;\\r\\n    if (collateralAmount > 0){\\r\\n      _totalDepositedCollateral -= collateralAmount;\\r\\n      adjAmount = collateralAmount;\\r\\n      decreaseCollateral(msg.sender,  collateralAmount);\\r\\n      ERC20(collateralAsset()).safeTransfer(msg.sender, adjAmount);\\r\\n    }\\r\\n    // if withdrew collateral, vault health must be above threshold\\r\\n    if(collateralAmount > 0) _checkHealth(msg.sender);\\r\\n    emit WithdrawAndBurn(msg.sender, collateralAsset(), adjAmount,  burnAmount);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Repay some debt\\r\\n  function repay(address owner, uint256 amount) public {\\r\\n    if (amount > debtBalances[owner]) amount = debtBalances[owner];\\r\\n    if (amount > 0) {\\r\\n      ISynth(synth).burn(msg.sender, amount);\\r\\n      decreaseDebt(owner, amount);\\r\\n      emit RepayDebt(owner, amount);\\r\\n    }\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Liquidate a unhealthy position by repaying some debt and getting collateral back\\r\\n  /// @dev Liquidation fee and thresholds are linear, as flat 10% liquidation fee is usually too much\\r\\n  /// Parameters: \\r\\n  ///   - liquidation fee linear from 2% @ liq.threshold to 10% @ hard.threshold\\r\\n  ///   - 1% fixed going to treasury\\r\\n  ///   - hard.threshold also allows sending debt to safety pool\\r\\n  function liquidate(address user, uint debtAmount, bytes calldata priceUpdateData) external payable {\\r\\n    updatePrice(priceUpdateData);\\r\\n    if (debtAmount > debtBalances[user]) debtAmount = debtBalances[user];\\r\\n    uint liquidatedAmount = _liquidateCollateral(user, debtAmount, false);\\r\\n    \\r\\n    // Burn debt and synth\\r\\n    ISynth(synth).burn(msg.sender,  debtAmount);\\r\\n    decreaseDebt(user, debtAmount);\\r\\n    emit Liquidate(user, debtAmount,  liquidatedAmount);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Emergency liquidation only transfers debt to the safety pool\\r\\n  /// @dev In case no synth available for liquidations or gas too high\\r\\n  /// @dev Liquidator only gets a small fee to pay for gas\\r\\n  function emergencyLiquidate(address user, uint debtAmount, bytes calldata priceUpdateData) external virtual payable {\\r\\n    updatePrice(priceUpdateData);\\r\\n    if (debtAmount > debtBalances[user]) debtAmount = debtBalances[user];\\r\\n    uint liquidatedAmount = _liquidateCollateral(user, debtAmount, true);\\r\\n\\r\\n    // Move debt to safety pool\\r\\n    decreaseDebt(user, debtAmount);\\r\\n    increaseDebt(safetyPool, debtAmount);\\r\\n    // Check health: the safety pool HF should be more conservative when hard liquidations happen\\r\\n    (uint16 liquidationThreshold,) = ISynth(synth).getLiquidationThresholds(collateralAsset());\\r\\n    require(getHealthFactor(safetyPool) >= liquidationThreshold + 100, \\\"BV: Unhealthy position\\\");\\r\\n    emit EmergencyLiquidate(user, debtAmount, liquidatedAmount);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Calculate liquidation amounts and send treasury fee\\r\\n  function _liquidateCollateral(address user, uint debtAmount, bool isHardLiq) internal returns (uint liquidatedAmount){\\r\\n    (uint16 liquidationThreshold, uint16 hardLiquidationThreshold) = ISynth(synth).getLiquidationThresholds(collateralAsset());\\r\\n    checkIncome();\\r\\n    uint userHF = getHealthFactor(user);\\r\\n    require(userHF <= (isHardLiq ? hardLiquidationThreshold : liquidationThreshold), \\\"BV: HF Too High\\\");\\r\\n    \\r\\n    uint collateralPrice = latestPrice();\\r\\n    uint repaidValue = debtAmount * ISynth(synth).getPrice();\\r\\n    uint userCollateralLiquidated = 110;\\r\\n    // Liquidation fee linear from 2% @ liq.threshold to 10% @ hard.threshold\\r\\n    if (userHF > hardLiquidationThreshold) \\r\\n      userCollateralLiquidated = 102 + 8 * (liquidationThreshold - userHF) / (liquidationThreshold - hardLiquidationThreshold);\\r\\n    else if (userHF < 110) {\\r\\n      userCollateralLiquidated = userHF > 101 ? userHF : 101;\\r\\n    }\\r\\n\\r\\n    liquidatedAmount = repaidValue * userCollateralLiquidated * 10**ERC20(collateralAsset()).decimals() / 1e18 / 100 / collateralPrice;\\r\\n    // Fixed treasury 1% fee\\r\\n    uint treasuryAmount = repaidValue / 100 / collateralPrice;\\r\\n    // User gets 1% for hard liq or (penalty - 1)% for regular liquidation\\r\\n    uint liquidatorAmount = isHardLiq ? treasuryAmount : liquidatedAmount - treasuryAmount;\\r\\n    uint safetyPoolAmount = liquidatedAmount - liquidatorAmount - treasuryAmount;\\r\\n\\r\\n    // move collateral\\r\\n    _totalDepositedCollateral -= (liquidatorAmount + treasuryAmount);\\r\\n    ERC20(collateralAsset()).safeTransfer(msg.sender,  liquidatorAmount);\\r\\n    ERC20(collateralAsset()).safeTransfer(ISynth(synth).treasury(),  treasuryAmount);\\r\\n    if (safetyPoolAmount > 0) increaseCollateral(safetyPool, safetyPoolAmount);\\r\\n    decreaseCollateral(user, liquidatedAmount);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Repay safety pool debt any time\\r\\n  function safetyRepay(uint debtAmount, bytes calldata priceUpdateData) external payable {\\r\\n    updatePrice(priceUpdateData);\\r\\n    checkIncome();\\r\\n    uint repaidValue = debtAmount * ISynth(synth).getPrice();\\r\\n    uint clawedAmount = repaidValue * 108 * 10**ERC20(collateralAsset()).decimals() / 1e18 / 100 / latestPrice();\\r\\n    ISynth(synth).burn(msg.sender,  debtAmount);\\r\\n    decreaseDebt(safetyPool, debtAmount);\\r\\n    ERC20(collateralAsset()).safeTransfer(msg.sender,  clawedAmount);\\r\\n    decreaseCollateral(safetyPool, clawedAmount);\\r\\n    _totalDepositedCollateral -= clawedAmount;\\r\\n    \\r\\n    emit RepayEmergencyDebt(debtAmount,  clawedAmount);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Rigid redemption: redeem synth at face value minus redemption fee\\r\\n  /// @dev The redemption fee is redemptionFee if the target vault is below 200% HF, and 2*redemptionFee above\\r\\n  /// This makes it possible but penalized to redeem against higher HF ones\\r\\n  function rigidRedemption(address user, uint redeemedAmount, bytes calldata priceUpdateData) external payable {\\r\\n    updatePrice(priceUpdateData);\\r\\n    checkIncome();\\r\\n    require(redeemedAmount <= debtBalances[user], \\\"BV: Not Enough Debt Avail\\\");\\r\\n    uint repaidValue = redeemedAmount * ISynth(synth).getPrice();\\r\\n    uint userHF = getHealthFactor(user);\\r\\n    uint _redemptionFee = redemptionFee;\\r\\n    if(userHF >= 250) _redemptionFee = 2 * _redemptionFee;\\r\\n    uint clawedAmount = repaidValue * (10_000 - _redemptionFee) * 10**ERC20(collateralAsset()).decimals() / 1e18 / latestPrice() / 10_000;\\r\\n\\r\\n    ISynth(synth).burn(msg.sender, redeemedAmount);\\r\\n    _totalDepositedCollateral -= clawedAmount;\\r\\n    decreaseCollateral(user,  clawedAmount);\\r\\n    decreaseDebt(user, redeemedAmount);\\r\\n\\r\\n    ERC20(collateralAsset()).safeTransfer(msg.sender, clawedAmount);\\r\\n\\r\\n    emit RigidRedemption(msg.sender, redeemedAmount, clawedAmount);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Get the health factor of a position\\r\\n  /// HF = collateral value / debt value, in percent\\r\\n  function getHealthFactor(address user) public view returns (uint hf){\\r\\n    uint _debtBalance = debtBalances[user];\\r\\n    if (_debtBalance > 0)\\r\\n      hf = 1e20 * balanceOf(user) * latestPrice() / _debtBalance / ISynth(synth).getPrice() / 10**ERC20(collateralAsset()).decimals();\\r\\n    else hf = type(uint).max;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Get total vault health factor\\r\\n  function getVaultHealthFactor() public view returns (uint hf){\\r\\n    if (totalDebt == 0) hf = type(uint).max;\\r\\n    else hf = 1e20 * _totalDepositedCollateral * latestPrice() / totalDebt / ISynth(synth).getPrice() / 10**ERC20(collateralAsset()).decimals();\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Check user position health\\r\\n  function _checkHealth(address user) internal view {\\r\\n    uint hf = getHealthFactor(user);\\r\\n    // healthy is liquidationThreshold + 10, e.g if a position is liquidated at 120%, user cannot mint below 130%\\r\\n    (uint16 liquidationThreshold,) = ISynth(synth).getLiquidationThresholds(collateralAsset());\\r\\n    require(hf >= liquidationThreshold + 10, \\\"BV: Unhealthy position\\\");\\r\\n  }\\r\\n  \\r\\n  \\r\\n  // Helpers to increase/reduce a user collateral balance\\r\\n  function increaseCollateral(address user,  uint amount) internal {\\r\\n    collateralBalances[user] += amount * LIQUIDITY_INDEX_BASE / liquidityIndex;\\r\\n  }\\r\\n  function decreaseCollateral(address user,  uint amount) internal {\\r\\n    collateralBalances[user] -= amount * LIQUIDITY_INDEX_BASE / liquidityIndex;\\r\\n  }\\r\\n  // Helpers to increase/reduce a user debt balance\\r\\n  function increaseDebt(address user, uint amount) internal {\\r\\n    totalDebt += amount;\\r\\n    debtBalances[user] += amount;\\r\\n  }\\r\\n  function decreaseDebt(address user, uint amount) internal {\\r\\n    totalDebt -= amount;\\r\\n    debtBalances[user] -= amount;\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Stub to handle income, e.g stETH rebases\\r\\n  function checkIncome() public virtual returns (uint income){}\\r\\n  \\r\\n  \\r\\n  /**\\r\\n   * @notice Distribute income to treasury and savings\\r\\n   * @param amount Amount of tokens to distribute\\r\\n   * @return distributed Amount distributed out of the total income\\r\\n   */\\r\\n  function _distributeIncome(uint amount) internal returns (uint distributed) {\\r\\n    uint treasuryAmount = amount * ISynth(synth).treasuryFee() / 10_000;\\r\\n    if (treasuryAmount > 0) ERC20(collateralAsset()).safeTransfer(ISynth(synth).treasury(), treasuryAmount);\\r\\n    \\r\\n    // After fees, split the income between depositors and savings\\r\\n    uint savingsAmount = (amount - treasuryAmount) * ISynth(synth).getSavingsYield() / 10_000;\\r\\n    if(ERC20(collateralAsset()).allowance(address(this), synth) < savingsAmount) \\r\\n      ERC20(collateralAsset()).safeApprove(synth, savingsAmount);\\r\\n    ISynth(synth).collectSavingsIncome(collateralAsset(), savingsAmount); \\r\\n    \\r\\n    distributed = treasuryAmount + savingsAmount;\\r\\n  }\\r\\n}\"\r\n    },\r\n    \"lib/forge-std/src/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.4.22 <0.9.0;\\r\\n\\r\\nlibrary console {\\r\\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\r\\n\\r\\n    function _sendLogPayload(bytes memory payload) private view {\\r\\n        uint256 payloadLength = payload.length;\\r\\n        address consoleAddress = CONSOLE_ADDRESS;\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let payloadStart := add(payload, 32)\\r\\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function log() internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\r\\n    }\\r\\n\\r\\n    function logInt(int p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logUint(uint p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logString(string memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBool(bool p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logAddress(address p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes(bytes memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes1(bytes1 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes2(bytes2 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes3(bytes3 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes4(bytes4 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes5(bytes5 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes6(bytes6 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes7(bytes7 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes8(bytes8 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes9(bytes9 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes10(bytes10 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes11(bytes11 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes12(bytes12 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes13(bytes13 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes14(bytes14 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes15(bytes15 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes16(bytes16 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes17(bytes17 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes18(bytes18 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes19(bytes19 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes20(bytes20 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes21(bytes21 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes22(bytes22 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes23(bytes23 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes24(bytes24 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes25(bytes25 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes26(bytes26 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes27(bytes27 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes28(bytes28 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes29(bytes29 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes30(bytes30 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes31(bytes31 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function logBytes32(bytes32 p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(uint p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(bool p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(address p0) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(uint p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(string memory p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(bool p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, uint p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, string memory p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, bool p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, uint p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, string memory p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, bool p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, uint p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, string memory p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, bool p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n    function log(address p0, address p1, address p2, address p3) internal view {\\r\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\r\\n    }\\r\\n\\r\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/pools/SafetyPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\\\";\\r\\nimport \\\"../interfaces/IBaseVault.sol\\\";\\r\\n\\r\\n/**\\r\\n * Safety Pool\\r\\n * No need to prevent inflation attack on first deposit since the balanceOf underlying asset isnt manipulable by donation\\r\\n */ \\r\\ncontract SafetyPool is ERC4626 {\\r\\n  using SafeERC20 for IERC20;\\r\\n  /// @notice collateralVault address\\r\\n  address internal immutable collateralVault;\\r\\n  /// @notice User deposit time\\r\\n  mapping(address => uint) public depositTime;\\r\\n\\r\\n  modifier updatePrice(bytes calldata priceUpdateData){\\r\\n    IBaseVault(collateralVault).updatePrice(priceUpdateData);\\r\\n    IBaseVault(collateralVault).checkIncome();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address underlying, string memory name_, string memory symbol_) ERC4626(IERC20(underlying)) ERC20(name_, symbol_) {\\r\\n    collateralVault = msg.sender;\\r\\n  }\\r\\n\\r\\n\\r\\n  /// @notice Returns the underlying assets\\r\\n  function totalAssets() public view override returns (uint256){\\r\\n    return IBaseVault(collateralVault).balanceOf(address(this));\\r\\n  }\\r\\n  \\r\\n  \\r\\n  \\r\\n  ///@notice Update price before withdrawing\\r\\n  function withdraw(uint256 assets, address receiver, address owner) public override returns (uint256) \\r\\n  {\\r\\n    IBaseVault(collateralVault).checkIncome();\\r\\n    return super.withdraw(assets, receiver, owner);\\r\\n  }  \\r\\n  ///@notice Update price before withdrawing\\r\\n  function withdraw(uint256 assets, address receiver, address owner, bytes calldata priceUpdateData) \\r\\n    public updatePrice(priceUpdateData) returns (uint256) \\r\\n  {\\r\\n    return super.withdraw(assets, receiver, owner);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  ///@notice Update price before redeeming\\r\\n  function redeem(uint256 shares, address receiver, address owner) public override returns (uint256) \\r\\n  {\\r\\n    IBaseVault(collateralVault).checkIncome();\\r\\n    return super.redeem(shares, receiver, owner);\\r\\n  }\\r\\n  ///@notice Update price before redeeming\\r\\n  function redeem(uint256 shares, address receiver, address owner, bytes calldata priceUpdateData) \\r\\n    public updatePrice(priceUpdateData) returns (uint256) \\r\\n  {\\r\\n    return super.redeem(shares, receiver, owner);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  ///@notice Update price before depositing\\r\\n  function mint(uint256 shares, address receiver) public override returns (uint256) \\r\\n  {\\r\\n    IBaseVault(collateralVault).checkIncome();\\r\\n    return super.deposit(shares, receiver);\\r\\n  }\\r\\n  ///@notice Update price before depositing\\r\\n  function mint(uint256 shares, address receiver, bytes calldata priceUpdateData) \\r\\n    public updatePrice(priceUpdateData) returns (uint256) \\r\\n  {\\r\\n    return super.deposit(shares, receiver);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  ///@notice Update price before depositing\\r\\n  function deposit(uint256 assets, address receiver) public override returns (uint256) \\r\\n  {\\r\\n    IBaseVault(collateralVault).checkIncome();\\r\\n    return super.deposit(assets, receiver);\\r\\n  }\\r\\n  ///@notice Update price before depositing\\r\\n  function deposit(uint256 assets, address receiver, bytes calldata priceUpdateData) \\r\\n    public updatePrice(priceUpdateData) returns (uint256) \\r\\n  {\\r\\n    return super.deposit(assets, receiver);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Withdraw assets from collateral vault before transfer and apply 0.1% sniping penalty\\r\\n  function _withdraw(address caller, address receiver, address owner, uint256 assets, uint256 shares) internal override {\\r\\n    if (block.timestamp < depositTime[owner] + 1 days) assets = assets * 999 / 1000;\\r\\n    bytes memory priceUpdateData;\\r\\n    IBaseVault(collateralVault).withdrawAndBurn(assets, 0, priceUpdateData);\\r\\n    super._withdraw(caller, receiver, owner, assets, shares);\\r\\n  }\\r\\n  \\r\\n\\r\\n  /// @notice Forward assets to collateral vault after deposit\\r\\n  /// @dev to prevent griefing, the minimal deposit to update the deposit time is the penalty \\r\\n  /// a user would incur, making such an attack useless\\r\\n  function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal override {\\r\\n    bytes memory priceUpdateData;\\r\\n    super._deposit(caller, receiver, assets, shares);\\r\\n    if (shares >= balanceOf(receiver) / 1000) depositTime[receiver] = block.timestamp;\\r\\n    IERC20(asset()).safeApprove(collateralVault, assets);\\r\\n    IBaseVault(collateralVault).depositAndMint(assets, 0, priceUpdateData);\\r\\n  }\\r\\n  \\r\\n  \\r\\n  /// @notice Before transferring tokens, check deposit time and penalize\\r\\n  function _transfer(address from, address to, uint256 amount) internal override {\\r\\n    if (block.timestamp < depositTime[from] + 1 days) {\\r\\n      _burn(from, amount / 1000);\\r\\n      amount = amount * 999 / 1000;\\r\\n    }\\r\\n    super._transfer(from, to, amount);\\r\\n  }\\r\\n  \\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/ISynth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./IConfigurator.sol\\\";\\r\\n\\r\\ninterface ISynth is IConfigurator {\\r\\n  function transferOwnership(address newOwner) external;\\r\\n  function mint(address _recipient, uint256 _amount) external;\\r\\n  function burn(address _recipient, uint256 _amount) external;\\r\\n  function getPrice() external view returns (uint);\\r\\n  function getSavingsYield() external returns (uint);\\r\\n  function collectSavingsIncome(address asset, uint amount) external;\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IOnDemandOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n/// @notice IOnDemandOracle used for oracles that get their value from offchain signed data\\r\\n/// https://github.com/MonroeProtocol/OnDemandOracle\\r\\ninterface IOnDemandOracle {\\r\\n  /// @notice Get latest oracle answer (may be stale)\\r\\n  function latestAnswer() external view returns (int256);\\r\\n  \\r\\n  /// @notice Update and get latest oracle answer based on signed offchain data\\r\\n  /// Reverts on bad priceUpdateData\\r\\n  function updateAnswer(bytes calldata priceUpdateData) external payable returns (int256);\\r\\n  \\r\\n  function decimals() external view returns (uint256);\\r\\n  \\r\\n  function lastUpdate() external view returns (uint256);\\r\\n  \\r\\n  function isStale() external view returns (bool);\\r\\n}\"\r\n    },\r\n    \"contracts/interfaces/IBaseVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\n\\r\\ninterface IBaseVault {\\r\\n  function depositAndMint(uint256 collateralAmount, uint256 burnAmount, bytes calldata priceUpdateData) external payable;\\r\\n  function withdrawAndBurn(uint256 collateralAmount, uint256 burnAmount, bytes calldata priceUpdateData) external payable;\\r\\n  function balanceOf(address owner) external view returns (uint);\\r\\n  function collateralAsset() external view returns (address);\\r\\n  function oracle() external view returns (address);\\r\\n  function updatePrice(bytes calldata priceUpdateData) external payable returns (uint price);\\r\\n  function latestPrice() external view returns (uint price);\\r\\n  function checkIncome() external returns (uint income);\\r\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/token/ERC20/extensions/ERC4626.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../utils/SafeERC20.sol\\\";\\nimport \\\"../../../interfaces/IERC4626.sol\\\";\\nimport \\\"../../../utils/math/Math.sol\\\";\\n\\n/**\\n * @dev Implementation of the ERC4626 \\\"Tokenized Vault Standard\\\" as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[EIP-4626].\\n *\\n * This extension allows the minting and burning of \\\"shares\\\" (represented using the ERC20 inheritance) in exchange for\\n * underlying \\\"assets\\\" through standardized {deposit}, {mint}, {redeem} and {burn} workflows. This contract extends\\n * the ERC20 standard. Any additional extensions included along it would affect the \\\"shares\\\" token represented by this\\n * contract and not the \\\"assets\\\" token which is an independent contract.\\n *\\n * [CAUTION]\\n * ====\\n * In empty (or nearly empty) ERC-4626 vaults, deposits are at high risk of being stolen through frontrunning\\n * with a \\\"donation\\\" to the vault that inflates the price of a share. This is variously known as a donation or inflation\\n * attack and is essentially a problem of slippage. Vault deployers can protect against this attack by making an initial\\n * deposit of a non-trivial amount of the asset, such that price manipulation becomes infeasible. Withdrawals may\\n * similarly be affected by slippage. Users can protect against this attack as well as unexpected slippage in general by\\n * verifying the amount received is as expected, using a wrapper that performs these checks such as\\n * https://github.com/fei-protocol/ERC4626#erc4626router-and-base[ERC4626Router].\\n *\\n * Since v4.9, this implementation uses virtual assets and shares to mitigate that risk. The `_decimalsOffset()`\\n * corresponds to an offset in the decimal representation between the underlying asset's decimals and the vault\\n * decimals. This offset also determines the rate of virtual shares to virtual assets in the vault, which itself\\n * determines the initial exchange rate. While not fully preventing the attack, analysis shows that the default offset\\n * (0) makes it non-profitable, as a result of the value being captured by the virtual shares (out of the attacker's\\n * donation) matching the attacker's expected gains. With a larger offset, the attack becomes orders of magnitude more\\n * expensive than it is profitable. More details about the underlying math can be found\\n * xref:erc4626.adoc#inflation-attack[here].\\n *\\n * The drawback of this approach is that the virtual shares do capture (a very small) part of the value being accrued\\n * to the vault. Also, if the vault experiences losses, the users try to exit the vault, the virtual shares and assets\\n * will cause the first user to exit to experience reduced losses in detriment to the last users that will experience\\n * bigger losses. Developers willing to revert back to the pre-v4.9 behavior just need to override the\\n * `_convertToShares` and `_convertToAssets` functions.\\n *\\n * To learn more, check out our xref:ROOT:erc4626.adoc[ERC-4626 guide].\\n * ====\\n *\\n * _Available since v4.7._\\n */\\nabstract contract ERC4626 is ERC20, IERC4626 {\\n    using Math for uint256;\\n\\n    IERC20 private immutable _asset;\\n    uint8 private immutable _underlyingDecimals;\\n\\n    /**\\n     * @dev Set the underlying asset contract. This must be an ERC20-compatible contract (ERC20 or ERC777).\\n     */\\n    constructor(IERC20 asset_) {\\n        (bool success, uint8 assetDecimals) = _tryGetAssetDecimals(asset_);\\n        _underlyingDecimals = success ? assetDecimals : 18;\\n        _asset = asset_;\\n    }\\n\\n    /**\\n     * @dev Attempts to fetch the asset decimals. A return value of false indicates that the attempt failed in some way.\\n     */\\n    function _tryGetAssetDecimals(IERC20 asset_) private view returns (bool, uint8) {\\n        (bool success, bytes memory encodedDecimals) = address(asset_).staticcall(\\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\\n        );\\n        if (success && encodedDecimals.length >= 32) {\\n            uint256 returnedDecimals = abi.decode(encodedDecimals, (uint256));\\n            if (returnedDecimals <= type(uint8).max) {\\n                return (true, uint8(returnedDecimals));\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Decimals are computed by adding the decimal offset on top of the underlying asset's decimals. This\\n     * \\\"original\\\" value is cached during construction of the vault contract. If this read operation fails (e.g., the\\n     * asset has not been created yet), a default of 18 is used to represent the underlying asset's decimals.\\n     *\\n     * See {IERC20Metadata-decimals}.\\n     */\\n    function decimals() public view virtual override(IERC20Metadata, ERC20) returns (uint8) {\\n        return _underlyingDecimals + _decimalsOffset();\\n    }\\n\\n    /** @dev See {IERC4626-asset}. */\\n    function asset() public view virtual override returns (address) {\\n        return address(_asset);\\n    }\\n\\n    /** @dev See {IERC4626-totalAssets}. */\\n    function totalAssets() public view virtual override returns (uint256) {\\n        return _asset.balanceOf(address(this));\\n    }\\n\\n    /** @dev See {IERC4626-convertToShares}. */\\n    function convertToShares(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-convertToAssets}. */\\n    function convertToAssets(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxDeposit}. */\\n    function maxDeposit(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxMint}. */\\n    function maxMint(address) public view virtual override returns (uint256) {\\n        return type(uint256).max;\\n    }\\n\\n    /** @dev See {IERC4626-maxWithdraw}. */\\n    function maxWithdraw(address owner) public view virtual override returns (uint256) {\\n        return _convertToAssets(balanceOf(owner), Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-maxRedeem}. */\\n    function maxRedeem(address owner) public view virtual override returns (uint256) {\\n        return balanceOf(owner);\\n    }\\n\\n    /** @dev See {IERC4626-previewDeposit}. */\\n    function previewDeposit(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-previewMint}. */\\n    function previewMint(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewWithdraw}. */\\n    function previewWithdraw(uint256 assets) public view virtual override returns (uint256) {\\n        return _convertToShares(assets, Math.Rounding.Up);\\n    }\\n\\n    /** @dev See {IERC4626-previewRedeem}. */\\n    function previewRedeem(uint256 shares) public view virtual override returns (uint256) {\\n        return _convertToAssets(shares, Math.Rounding.Down);\\n    }\\n\\n    /** @dev See {IERC4626-deposit}. */\\n    function deposit(uint256 assets, address receiver) public virtual override returns (uint256) {\\n        require(assets <= maxDeposit(receiver), \\\"ERC4626: deposit more than max\\\");\\n\\n        uint256 shares = previewDeposit(assets);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-mint}.\\n     *\\n     * As opposed to {deposit}, minting is allowed even if the vault is in a state where the price of a share is zero.\\n     * In this case, the shares will be minted without requiring any assets to be deposited.\\n     */\\n    function mint(uint256 shares, address receiver) public virtual override returns (uint256) {\\n        require(shares <= maxMint(receiver), \\\"ERC4626: mint more than max\\\");\\n\\n        uint256 assets = previewMint(shares);\\n        _deposit(_msgSender(), receiver, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /** @dev See {IERC4626-withdraw}. */\\n    function withdraw(uint256 assets, address receiver, address owner) public virtual override returns (uint256) {\\n        require(assets <= maxWithdraw(owner), \\\"ERC4626: withdraw more than max\\\");\\n\\n        uint256 shares = previewWithdraw(assets);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return shares;\\n    }\\n\\n    /** @dev See {IERC4626-redeem}. */\\n    function redeem(uint256 shares, address receiver, address owner) public virtual override returns (uint256) {\\n        require(shares <= maxRedeem(owner), \\\"ERC4626: redeem more than max\\\");\\n\\n        uint256 assets = previewRedeem(shares);\\n        _withdraw(_msgSender(), receiver, owner, assets, shares);\\n\\n        return assets;\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from assets to shares) with support for rounding direction.\\n     */\\n    function _convertToShares(uint256 assets, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return assets.mulDiv(totalSupply() + 10 ** _decimalsOffset(), totalAssets() + 1, rounding);\\n    }\\n\\n    /**\\n     * @dev Internal conversion function (from shares to assets) with support for rounding direction.\\n     */\\n    function _convertToAssets(uint256 shares, Math.Rounding rounding) internal view virtual returns (uint256) {\\n        return shares.mulDiv(totalAssets() + 1, totalSupply() + 10 ** _decimalsOffset(), rounding);\\n    }\\n\\n    /**\\n     * @dev Deposit/mint common workflow.\\n     */\\n    function _deposit(address caller, address receiver, uint256 assets, uint256 shares) internal virtual {\\n        // If _asset is ERC777, `transferFrom` can trigger a reentrancy BEFORE the transfer happens through the\\n        // `tokensToSend` hook. On the other hand, the `tokenReceived` hook, that is triggered after the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer before we mint so that any reentrancy would happen before the\\n        // assets are transferred and before the shares are minted, which is a valid state.\\n        // slither-disable-next-line reentrancy-no-eth\\n        SafeERC20.safeTransferFrom(_asset, caller, address(this), assets);\\n        _mint(receiver, shares);\\n\\n        emit Deposit(caller, receiver, assets, shares);\\n    }\\n\\n    /**\\n     * @dev Withdraw/redeem common workflow.\\n     */\\n    function _withdraw(\\n        address caller,\\n        address receiver,\\n        address owner,\\n        uint256 assets,\\n        uint256 shares\\n    ) internal virtual {\\n        if (caller != owner) {\\n            _spendAllowance(owner, caller, shares);\\n        }\\n\\n        // If _asset is ERC777, `transfer` can trigger a reentrancy AFTER the transfer happens through the\\n        // `tokensReceived` hook. On the other hand, the `tokensToSend` hook, that is triggered before the transfer,\\n        // calls the vault, which is assumed not malicious.\\n        //\\n        // Conclusion: we need to do the transfer after the burn so that any reentrancy would happen after the\\n        // shares are burned and after the assets are transferred, which is a valid state.\\n        _burn(owner, shares);\\n        SafeERC20.safeTransfer(_asset, receiver, assets);\\n\\n        emit Withdraw(caller, receiver, owner, assets, shares);\\n    }\\n\\n    function _decimalsOffset() internal view virtual returns (uint8) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IConfigurator {\\r\\n  function treasury() external view returns (address);\\r\\n  function treasuryFee() external view returns (uint16);\\r\\n  function safetyPoolShare() external view returns (uint16);\\r\\n  function setTreasury(address _treasury, uint16 _treasuryFee) external;\\r\\n  function setSafetyPoolShare(uint16 _safetyPoolShare) external;\\r\\n  function setSavingsYieldContract(address _savingsYieldContract) external;\\r\\n  \\r\\n  function getLiquidationThresholds(address collateral) external view returns (uint16 liquidationThreshold, uint16 hardLiquidationThreshold);\\r\\n  function setLiquidationThresholds(address collateral, uint16 _liquidationThreshold, uint16 _hardLiquidationThreshold) external;\\r\\n}\"\r\n    },\r\n    \"node_modules/@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=node_modules/@openzeppelin/contracts/\",\r\n      \"@openzeppelin/contracts-upgradeable/=node_modules/@openzeppelin/contracts-upgradeable/\",\r\n      \"@uniswap/v3-periphery/=node_modules/@uniswap/v3-periphery/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"layerzero/=contracts/lib/layerzero/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"none\",\r\n      \"appendCBOR\": false\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_synth\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pendleOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_chainlinkOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"CollectIncome\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"}],\"name\":\"DepositAndMint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"EmergencyLiquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repaidAmount\",\"type\":\"uint256\"}],\"name\":\"RepayDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clawedAmount\",\"type\":\"uint256\"}],\"name\":\"RepayEmergencyDebt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"clawedAmount\",\"type\":\"uint256\"}],\"name\":\"RigidRedemption\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"}],\"name\":\"WithdrawAndBurn\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"income\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"collateralBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"debtBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"priceUpdateData\",\"type\":\"bytes\"}],\"name\":\"depositAndMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"priceUpdateData\",\"type\":\"bytes\"}],\"name\":\"emergencyLiquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultHealthFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hf\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStale\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"priceUpdateData\",\"type\":\"bytes\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redemptionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"redeemedAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"priceUpdateData\",\"type\":\"bytes\"}],\"name\":\"rigidRedemption\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safetyPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"debtAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"priceUpdateData\",\"type\":\"bytes\"}],\"name\":\"safetyRepay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"setCollateralLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"synth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"priceUpdateData\",\"type\":\"bytes\"}],\"name\":\"updateAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"priceUpdateData\",\"type\":\"bytes\"}],\"name\":\"updatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"priceUpdateData\",\"type\":\"bytes\"}],\"name\":\"withdrawAndBurn\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PendlePtVault", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000087196db491ee1c77b91853cb79c118a322d6a9c0000000000000000000000000bbf399db59a845066aafce9ae55e68c505fa97b70000000000000000000000009a9fa8338dd5e5b2188006f1cd2ef26d921650c2000000000000000000000000a569d910839ae8865da8f8e70fffb0cba869f961", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}