{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/BalanceManagement.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { ITokenBalance } from './interfaces/ITokenBalance.sol';\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\nimport './helpers/TransferHelper.sol' as TransferHelper;\\nimport './Constants.sol' as Constants;\\n\\n/**\\n * @title BalanceManagement\\n * @notice Base contract for the withdrawal of tokens, except for reserved ones\\n */\\nabstract contract BalanceManagement is ManagerRole {\\n    /**\\n     * @notice Emitted when the specified token is reserved\\n     */\\n    error ReservedTokenError();\\n\\n    /**\\n     * @notice Performs the withdrawal of tokens, except for reserved ones\\n     * @dev Use the \\\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\\" address for the native token\\n     * @param _tokenAddress The address of the token\\n     * @param _tokenAmount The amount of the token\\n     */\\n    function cleanup(address _tokenAddress, uint256 _tokenAmount) external onlyManager {\\n        if (isReservedToken(_tokenAddress)) {\\n            revert ReservedTokenError();\\n        }\\n\\n        if (_tokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            TransferHelper.safeTransferNative(msg.sender, _tokenAmount);\\n        } else {\\n            TransferHelper.safeTransfer(_tokenAddress, msg.sender, _tokenAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the token balance of the current contract\\n     * @dev Use the \\\"0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\\\" address for the native token\\n     * @param _tokenAddress The address of the token\\n     * @return The token balance of the current contract\\n     */\\n    function tokenBalance(address _tokenAddress) public view returns (uint256) {\\n        if (_tokenAddress == Constants.NATIVE_TOKEN_ADDRESS) {\\n            return address(this).balance;\\n        } else {\\n            return ITokenBalance(_tokenAddress).balanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n     * @notice Getter of the reserved token flag\\n     * @dev Override to add reserved token addresses\\n     * @param _tokenAddress The address of the token\\n     * @return The reserved token flag\\n     */\\n    function isReservedToken(address _tokenAddress) public view virtual returns (bool) {\\n        // The function returns false by default.\\n        // The explicit return statement is omitted to avoid the unused parameter warning.\\n        // See https://github.com/ethereum/solidity/issues/5295\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @dev The default token decimals value\\n */\\nuint256 constant DECIMALS_DEFAULT = 18;\\n\\n/**\\n * @dev The maximum uint256 value for swap amount limit settings\\n */\\nuint256 constant INFINITY = type(uint256).max;\\n\\n/**\\n * @dev The default limit of account list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_DEFAULT = 100;\\n\\n/**\\n * @dev The limit of swap router list size\\n */\\nuint256 constant LIST_SIZE_LIMIT_ROUTERS = 200;\\n\\n/**\\n * @dev The factor for percentage settings. Example: 100 is 0.1%\\n */\\nuint256 constant MILLIPERCENT_FACTOR = 100_000;\\n\\n/**\\n * @dev The de facto standard address to denote the native token\\n */\\naddress constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\"\r\n    },\r\n    \"contracts/DataStructures.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Optional value structure\\n * @dev Is used in mappings to allow zero values\\n * @param isSet Value presence flag\\n * @param value Numeric value\\n */\\nstruct OptionalValue {\\n    bool isSet;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure\\n * @dev Is used as an array parameter item to perform multiple key-value settings\\n * @param key Numeric key\\n * @param value Numeric value\\n */\\nstruct KeyToValue {\\n    uint256 key;\\n    uint256 value;\\n}\\n\\n/**\\n * @notice Key-to-value structure for address values\\n * @dev Is used as an array parameter item to perform multiple key-value settings with address values\\n * @param key Numeric key\\n * @param value Address value\\n */\\nstruct KeyToAddressValue {\\n    uint256 key;\\n    address value;\\n}\\n\\n/**\\n * @notice Address-to-flag structure\\n * @dev Is used as an array parameter item to perform multiple settings\\n * @param account Account address\\n * @param flag Flag value\\n */\\nstruct AccountToFlag {\\n    address account;\\n    bool flag;\\n}\\n\\n/**\\n * @notice Emitted when a list exceeds the size limit\\n */\\nerror ListSizeLimitError();\\n\\n/**\\n * @notice Sets or updates a value in a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @param _value The address value\\n * @param _sizeLimit The map and list size limit\\n * @return isNewKey True if the key was just added, otherwise false\\n */\\nfunction combinedMapSet(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isNewKey) {\\n    isNewKey = !_keyIndexMap[_key].isSet;\\n\\n    if (isNewKey) {\\n        uniqueListAdd(_keyList, _keyIndexMap, _key, _sizeLimit);\\n    }\\n\\n    _map[_key] = _value;\\n}\\n\\n/**\\n * @notice Removes a value from a combined map (a mapping with a key list and key index mapping)\\n * @param _map The mapping reference\\n * @param _keyList The key list reference\\n * @param _keyIndexMap The key list index mapping reference\\n * @param _key The numeric key\\n * @return isChanged True if the combined map was changed, otherwise false\\n */\\nfunction combinedMapRemove(\\n    mapping(uint256 => address) storage _map,\\n    uint256[] storage _keyList,\\n    mapping(uint256 => OptionalValue) storage _keyIndexMap,\\n    uint256 _key\\n) returns (bool isChanged) {\\n    isChanged = _keyIndexMap[_key].isSet;\\n\\n    if (isChanged) {\\n        delete _map[_key];\\n        uniqueListRemove(_keyList, _keyIndexMap, _key);\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListAdd(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The numeric value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueListRemove(\\n    uint256[] storage _list,\\n    mapping(uint256 => OptionalValue) storage _indexMap,\\n    uint256 _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            uint256 lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds a value to a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListAdd(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    isChanged = !_indexMap[_value].isSet;\\n\\n    if (isChanged) {\\n        if (_list.length >= _sizeLimit) {\\n            revert ListSizeLimitError();\\n        }\\n\\n        _indexMap[_value] = OptionalValue(true, _list.length);\\n        _list.push(_value);\\n    }\\n}\\n\\n/**\\n * @notice Removes a value from a unique address value list (a list with value index mapping)\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListRemove(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value\\n) returns (bool isChanged) {\\n    OptionalValue storage indexItem = _indexMap[_value];\\n\\n    isChanged = indexItem.isSet;\\n\\n    if (isChanged) {\\n        uint256 itemIndex = indexItem.value;\\n        uint256 lastIndex = _list.length - 1;\\n\\n        if (itemIndex != lastIndex) {\\n            address lastValue = _list[lastIndex];\\n            _list[itemIndex] = lastValue;\\n            _indexMap[lastValue].value = itemIndex;\\n        }\\n\\n        _list.pop();\\n        delete _indexMap[_value];\\n    }\\n}\\n\\n/**\\n * @notice Adds or removes a value to/from a unique address value list (a list with value index mapping)\\n * @dev The list size limit is checked on items adding only\\n * @param _list The list reference\\n * @param _indexMap The value index mapping reference\\n * @param _value The address value\\n * @param _flag The value inclusion flag\\n * @param _sizeLimit The list size limit\\n * @return isChanged True if the list was changed, otherwise false\\n */\\nfunction uniqueAddressListUpdate(\\n    address[] storage _list,\\n    mapping(address => OptionalValue) storage _indexMap,\\n    address _value,\\n    bool _flag,\\n    uint256 _sizeLimit\\n) returns (bool isChanged) {\\n    return\\n        _flag\\n            ? uniqueAddressListAdd(_list, _indexMap, _value, _sizeLimit)\\n            : uniqueAddressListRemove(_list, _indexMap, _value);\\n}\\n\"\r\n    },\r\n    \"contracts/farm/StablecoinFarm.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport { Pausable } from '../Pausable.sol';\\nimport { BalanceManagement } from '../BalanceManagement.sol';\\nimport { IRevenueShare } from '../interfaces/IRevenueShare.sol';\\n\\ncontract StablecoinFarm is Pausable, BalanceManagement {\\n    using SafeERC20 for IERC20;\\n\\n    struct VestedBalance {\\n        uint256 amount;\\n        uint256 unlockTime;\\n    }\\n\\n    // Info of each user.\\n    struct UserInfo {\\n        uint256 amount; // How many tokens the user has provided.\\n        uint256 rewardDebt; // Reward debt. See the explanation below.\\n        uint256 remainingRewardTokenAmount; // Tokens that weren't distributed for a user per pool.\\n\\n        // Any point in time, the amount of reward tokens entitled to a user but pending to be distributed is:\\n        // pending reward = (user.amount * pool.accumulatedRewardTokenPerShare) - user.rewardDebt\\n        //\\n        // Whenever a user deposits or withdraws Staked tokens to a pool. Here's what happens:\\n        //   1. The pool's `accumulatedRewardTokenPerShare` (and `lastRewardTime`) gets updated.\\n        //   2. A user receives the pending reward sent to his/her address.\\n        //   3. The user's `amount` gets updated.\\n        //   4. The user's `rewardDebt` gets updated.\\n    }\\n\\n    // Info of each pool.\\n    struct PoolInfo {\\n        address stakingToken; // Contract address of staked token\\n        uint256 stakingTokenTotalAmount; //Total amount of deposited tokens\\n        uint256 accumulatedRewardTokenPerShare; // Accumulated reward token per share, times 1e12. See below.\\n        uint32 lastRewardTime; // Last timestamp number that reward token distribution occurs.\\n        uint16 allocationPoint; // How many allocation points are assigned to this pool.\\n    }\\n\\n    address public immutable rewardToken; // The reward token.\\n\\n    address public treasury; // The penalty address of the treasury.\\n    address public LPRevenueShare; // The penalty address of the fee LPRevenueShare contract.\\n\\n    uint256 public rewardTokenPerSecond; // Reward tokens vested per second.\\n    PoolInfo[] public poolInfo; // Info of each pool.\\n\\n    mapping(address => bool) public isStakingTokenSet;\\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo; // Info of each user that stakes tokens.\\n    mapping(uint256 => mapping(address => VestedBalance[])) public userVested; // vested tokens\\n\\n    uint256 public totalAllocationPoint = 0; // the sum of all allocation points in all pools.\\n    uint32 public immutable startTime; // the timestamp when reward token farming starts.\\n    uint32 public endTime; // time on which the reward calculation should end.\\n    uint256 public immutable vestingDuration;\\n    uint256 public exitEarlyUserShare = 500; // 50%\\n    uint256 public exitEarlyTreasuryShare = 200; // 20%\\n    uint256 public exitEarlyLPShare = 300; // 30%\\n\\n    // Factor to perform multiplication and division operations.\\n    uint256 private constant SHARE_PRECISION = 1e18;\\n\\n    event Staked(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\\n    event WithdrawVesting(address indexed user, uint256 amount);\\n    event Vested(address indexed user, uint256 indexed pid, uint256 amount);\\n    event Locked(address indexed user, uint256 indexed pid, uint256 amount);\\n    event ExitEarly(address indexed user, uint256 amount);\\n\\n    constructor(\\n        address _rewardToken,\\n        uint256 _rewardTokenPerSecond,\\n        uint32 _startTime,\\n        uint256 _vestingDuration\\n    ) {\\n        rewardToken = _rewardToken;\\n        rewardTokenPerSecond = _rewardTokenPerSecond;\\n        startTime = _startTime;\\n        endTime = startTime + 90 days;\\n        vestingDuration = _vestingDuration;\\n    }\\n\\n    /**\\n     * @dev Sets a new treasury\\n     * @param _newTreasury is a new treasury address\\n     */\\n    function setTreasury(address _newTreasury) external onlyOwner {\\n        require(_newTreasury != address(0), 'Zero address error');\\n        treasury = _newTreasury;\\n    }\\n\\n    /**\\n     * @dev Sets a new LP revenue share\\n     * @param _newRevenueShare is a new LP revenue share address\\n     */\\n    function setLPRevenueShare(address _newRevenueShare) external onlyOwner {\\n        require(_newRevenueShare != address(0), 'Zero address error');\\n        LPRevenueShare = _newRevenueShare;\\n    }\\n\\n    /**\\n     * @dev Sets portions for exit early. If it needs to set 33.3%, just provide a 333 value.\\n     * Pay attention, the sum of all values must be 1000, which means 100%\\n     * @param _userPercent is a user percent\\n     * @param _treasuryPercent is a treasury percent\\n     * @param _lpPercent is an LP share percent\\n     */\\n    function setPercentsShare(\\n        uint256 _userPercent,\\n        uint256 _treasuryPercent,\\n        uint256 _lpPercent\\n    ) external onlyOwner {\\n        require(\\n            _userPercent + _treasuryPercent + _lpPercent == 1000,\\n            'Total percentage should be 100% in total'\\n        );\\n        exitEarlyUserShare = _userPercent;\\n        exitEarlyTreasuryShare = _treasuryPercent;\\n        exitEarlyLPShare = _lpPercent;\\n    }\\n\\n    /**\\n     * @dev Deposit staking tokens for reward token allocation.\\n     * @param _pid is a pool id\\n     * @param _amount is a number of deposit tokens\\n     */\\n    function stake(uint256 _pid, uint256 _amount) external whenNotPaused {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        _updatePool(_pid);\\n        IERC20(pool.stakingToken).safeTransferFrom(msg.sender, address(this), _amount);\\n        user.remainingRewardTokenAmount = pendingRewardToken(_pid, msg.sender);\\n        user.amount += _amount;\\n        pool.stakingTokenTotalAmount += _amount;\\n        user.rewardDebt = (user.amount * pool.accumulatedRewardTokenPerShare) / SHARE_PRECISION;\\n        emit Staked(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw only staked iUSDC/iUSDT tokens\\n     * @param _pid is a pool id\\n     * @param _amount is an amount of withdrawn tokens\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) external whenNotPaused {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        if (user.amount < _amount) {\\n            revert('Can not withdraw this amount');\\n        }\\n\\n        _updatePool(_pid);\\n\\n        user.remainingRewardTokenAmount = pendingRewardToken(_pid, msg.sender);\\n        user.amount -= _amount;\\n        pool.stakingTokenTotalAmount -= _amount;\\n        user.rewardDebt = (user.amount * pool.accumulatedRewardTokenPerShare) / SHARE_PRECISION;\\n\\n        IERC20(pool.stakingToken).safeTransfer(msg.sender, _amount);\\n\\n        emit Withdraw(msg.sender, _pid, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraw without caring about rewards. EMERGENCY ONLY.\\n     * @param _pid is a pool id\\n     */\\n    function emergencyWithdraw(uint256 _pid) external {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n\\n        uint256 userAmount = user.amount;\\n\\n        pool.stakingTokenTotalAmount -= userAmount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n        user.remainingRewardTokenAmount = 0;\\n        IERC20(pool.stakingToken).safeTransfer(msg.sender, userAmount);\\n        emit EmergencyWithdraw(msg.sender, _pid, userAmount);\\n    }\\n\\n    /**\\n     * @dev Add seconds to endTime parameter\\n     * @param _addSeconds is an additional seconds value\\n     */\\n    function changeEndTime(uint32 _addSeconds) external onlyManager {\\n        endTime += _addSeconds;\\n    }\\n\\n    /**\\n     * @dev Changes reward token amount per second. Use this function to moderate the `lockup amount`.\\n     * Essentially this function changes the amount of the reward which is entitled to the user\\n     * for his token staking by the time the `endTime` is passed.\\n     * Good practice to update pools without messing up the contract.\\n     * @param _rewardTokenPerSecond is a new value for reward token per second\\n     * @param _withUpdate if set in true all pools will be updated,\\n     * otherwise only new rewardTokenPerSecond will be set\\n     */\\n    function setRewardTokenPerSecond(\\n        uint256 _rewardTokenPerSecond,\\n        bool _withUpdate\\n    ) external onlyManager {\\n        if (_withUpdate) {\\n            _massUpdatePools();\\n        }\\n\\n        rewardTokenPerSecond = _rewardTokenPerSecond;\\n    }\\n\\n    /**\\n     * @dev Add a new staking token to the pool. Can only be called by managers.\\n     * @param _allocPoint is an allocation point\\n     * @param _stakingToken is a staked token address that will be used for the new pool\\n     * @param _withUpdate if set in true all pools will be updated,\\n     * otherwise only the new pool will be added\\n     */\\n    function add(uint16 _allocPoint, address _stakingToken, bool _withUpdate) external onlyManager {\\n        require(!isStakingTokenSet[_stakingToken], 'Staking token was already set');\\n        require(poolInfo.length < 5, 'No more then 5 pools can be added');\\n\\n        if (_withUpdate) {\\n            _massUpdatePools();\\n        }\\n\\n        uint256 lastRewardTime = block.timestamp > startTime ? block.timestamp : startTime;\\n        totalAllocationPoint += _allocPoint;\\n        poolInfo.push(\\n            PoolInfo({\\n                stakingToken: _stakingToken,\\n                stakingTokenTotalAmount: 0,\\n                allocationPoint: _allocPoint,\\n                lastRewardTime: uint32(lastRewardTime),\\n                accumulatedRewardTokenPerShare: 0\\n            })\\n        );\\n        isStakingTokenSet[_stakingToken] = true;\\n    }\\n\\n    /**\\n     * @dev Update the given pool's reward token allocation point. Can only be called by managers.\\n     * @param _pid is a pool id that exists in the list\\n     * @param _allocPoint is an allocation point\\n     * @param _withUpdate if set in true all pools will be updated,\\n     * otherwise only allocation data will be updated\\n     */\\n    function set(uint256 _pid, uint16 _allocPoint, bool _withUpdate) external onlyManager {\\n        if (_withUpdate) {\\n            _massUpdatePools();\\n        }\\n        totalAllocationPoint = totalAllocationPoint - poolInfo[_pid].allocationPoint + _allocPoint;\\n        poolInfo[_pid].allocationPoint = _allocPoint;\\n    }\\n\\n    /**\\n     * @dev Update reward variables for all pools.\\n     */\\n    function massUpdatePools() external whenNotPaused {\\n        _massUpdatePools();\\n    }\\n\\n    /**\\n     * @dev Update reward variables of the given pool to be up-to-date.\\n     */\\n    function updatePool(uint256 _pid) external whenNotPaused {\\n        _updatePool(_pid);\\n    }\\n\\n    /**\\n     * @dev How many pools are in the contract\\n     */\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /**\\n     * @dev Vest all pending rewards. Vest tokens means that they will be locked for the\\n     * vestingDuration time\\n     * @param _pid is a pool id\\n     */\\n    function vest(uint256 _pid) external whenNotPaused {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][msg.sender];\\n        _updatePool(_pid);\\n        uint256 pending = pendingRewardToken(_pid, msg.sender);\\n        require(pending > 0, 'Amount of tokens can not be zero value');\\n        uint256 unlockTime = block.timestamp + vestingDuration;\\n        VestedBalance[] storage vestings = userVested[_pid][msg.sender];\\n        require(vestings.length <= 100, 'User can not execute vest function more than 100 times');\\n        vestings.push(VestedBalance({ amount: pending, unlockTime: unlockTime }));\\n\\n        user.remainingRewardTokenAmount = 0;\\n        user.rewardDebt = (user.amount * pool.accumulatedRewardTokenPerShare) / SHARE_PRECISION;\\n        emit Vested(msg.sender, _pid, pending);\\n    }\\n\\n    /**\\n     * @dev user can get his rewards for staked iUSDC/iUSDT if locked time has already occurred\\n     * @param _pid is a pool id\\n     */\\n    function withdrawVestedRewards(uint256 _pid) external {\\n        // withdraw only `vestedTotal` amount\\n        _updatePool(_pid);\\n        (uint256 vested, , ) = checkVestingBalances(_pid, msg.sender);\\n\\n        uint256 amount;\\n        if (vested > 0) {\\n            uint256 length = userVested[_pid][msg.sender].length;\\n            for (uint256 i = 0; i < length; i++) {\\n                uint256 vestAmount = userVested[_pid][msg.sender][i].amount;\\n                if (userVested[_pid][msg.sender][i].unlockTime > block.timestamp) {\\n                    break;\\n                }\\n                amount = amount + vestAmount;\\n                delete userVested[_pid][msg.sender][i];\\n            }\\n        }\\n\\n        if (amount > 0) {\\n            safeRewardTransfer(msg.sender, amount);\\n        } else {\\n            revert('Tokens are not available for now');\\n        }\\n\\n        emit WithdrawVesting(msg.sender, amount);\\n    }\\n\\n    /**\\n     * @dev The user receives only `exitEarlyUserShare` - 50% tokens by default\\n     * `exitEarlyTreasuryShare` - 20% tokens by default transfers to the treasury account\\n     * `exitEarlyLPShare` - 30% tokens by default transfers to the LP revenue share contract\\n     * @param _pid is a pool id\\n     */\\n    function exitEarly(uint256 _pid) external {\\n        _updatePool(_pid);\\n        // can withdraw 50% immediately\\n\\n        (, uint256 vesting, ) = checkVestingBalances(_pid, msg.sender);\\n        require(vesting > 0, 'Total vesting tokens can not be zero');\\n\\n        uint256 amountUser = (vesting * exitEarlyUserShare) / 1000;\\n        uint256 amountTreasury = (vesting * exitEarlyTreasuryShare) / 1000;\\n        uint256 amountLP = (vesting * exitEarlyLPShare) / 1000;\\n\\n        safeRewardTransfer(msg.sender, amountUser);\\n\\n        // transfer penalties\\n        IERC20(rewardToken).safeTransfer(treasury, amountTreasury);\\n        IERC20(rewardToken).safeTransfer(LPRevenueShare, amountLP);\\n\\n        _cleanVestingBalances(_pid, msg.sender);\\n        emit ExitEarly(msg.sender, amountUser);\\n    }\\n\\n    /**\\n     * @dev Unsupported operation\\n     * @param _pid is a pool id\\n     */\\n    function lockVesting(uint256 _pid) external {\\n        revert('Unsupported operation');\\n    }\\n\\n    /**\\n     * @dev Unsupported operation\\n     * @param _pid is a pool id\\n     */\\n    function lockPending(uint256 _pid) external {\\n        revert('Unsupported operation');\\n    }\\n\\n    /**\\n     * @dev Return reward multiplier over the given _from to _to time.\\n     * @param _from is a from datetime in seconds\\n     * @param _to is a to datetime in seconds\\n     * @return multiplier\\n     */\\n    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\\n        _from = _from > startTime ? _from : startTime;\\n\\n        if (_from > endTime || _to < startTime) {\\n            return 0;\\n        } else if (_to > endTime) {\\n            return endTime - _from;\\n        } else return _to - _from;\\n    }\\n\\n    /**\\n     * @dev Check if provided token is staked token in the pool\\n     * @param _tokenAddress is a checked token\\n     * @return result true if provided token is staked token in the pool, otherwise false\\n     */\\n    function isReservedToken(address _tokenAddress) public view override returns (bool) {\\n        uint256 length = poolInfo.length;\\n\\n        for (uint256 pid; pid < length; ++pid) {\\n            if (_tokenAddress == poolInfo[pid].stakingToken) {\\n                return true;\\n            }\\n        }\\n\\n        return false;\\n    }\\n\\n    /**\\n     * @dev View function to see pending reward tokens on the frontend.\\n     * @param _pid is a pool id\\n     * @param _user is a user address to check rewards\\n     * @return pending reward token amount\\n     */\\n    function pendingRewardToken(uint256 _pid, address _user) public view returns (uint256 pending) {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n\\n        uint256 acc = pool.accumulatedRewardTokenPerShare;\\n\\n        if (block.timestamp > pool.lastRewardTime && pool.stakingTokenTotalAmount != 0) {\\n            uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\n\\n            uint256 tokenReward = (multiplier * rewardTokenPerSecond * pool.allocationPoint) /\\n                totalAllocationPoint;\\n            acc += (tokenReward * SHARE_PRECISION) / pool.stakingTokenTotalAmount;\\n        }\\n\\n        pending =\\n            (user.amount * acc) /\\n            SHARE_PRECISION -\\n            user.rewardDebt +\\n            user.remainingRewardTokenAmount;\\n    }\\n\\n    /**\\n     * @dev Information on a user's total/vestedTotal/vestingTotal balances\\n     * @param _pid is a pool id\\n     * @param _user is a user address to check rewards\\n     * @return vestedTotal is the number of vested tokens (that are available to withdraw)\\n     * @return vestingTotal is the number of vesting tokens (that are not available to withdraw yet)\\n     * @return vestData is the list with the number of tokens and their unlock time\\n     */\\n    function checkVestingBalances(\\n        uint256 _pid,\\n        address _user\\n    )\\n        public\\n        view\\n        returns (\\n            uint256 vestedTotal, // available to withdraw\\n            uint256 vestingTotal,\\n            VestedBalance[] memory vestData\\n        )\\n    {\\n        VestedBalance[] storage vests = userVested[_pid][_user];\\n        uint256 index;\\n\\n        for (uint256 i = 0; i < vests.length; i++) {\\n            if (vests[i].unlockTime > block.timestamp) {\\n                if (index == 0) {\\n                    vestData = new VestedBalance[](vests.length - i);\\n                }\\n\\n                vestData[index] = vests[i];\\n                index++;\\n                vestingTotal += vests[i].amount;\\n            } else {\\n                vestedTotal = vestedTotal + vests[i].amount;\\n            }\\n        }\\n    }\\n\\n    function _cleanVestingBalances(uint256 _pid, address _user) internal {\\n        VestedBalance[] storage vests = userVested[_pid][_user];\\n        for (uint256 i = 0; i < vests.length; i++) {\\n            if (vests[i].unlockTime > block.timestamp) {\\n                delete vests[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Safe reward token transfer function.\\n     * Revert error if not enough tokens on the smart contract\\n     * Just in case the pool does not have enough reward tokens.\\n     * @param _to is an address to transfer rewards\\n     * @param _amount is a number of reward tokens that will be transferred to the user\\n     */\\n    function safeRewardTransfer(address _to, uint256 _amount) private {\\n        uint256 rewardTokenBalance = IERC20(rewardToken).balanceOf(address(this));\\n\\n        if (_amount > rewardTokenBalance) {\\n            revert('Not enough tokens on the smart contract');\\n        } else {\\n            IERC20(rewardToken).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Update reward variables for all pools\\n     */\\n    function _massUpdatePools() private {\\n        uint256 length = poolInfo.length;\\n\\n        for (uint256 pid; pid < length; ++pid) {\\n            _updatePool(pid);\\n        }\\n    }\\n\\n    /**\\n     * @dev Update reward variables of the given pool to be up-to-date.\\n     * @param _pid is a pool id\\n     */\\n    function _updatePool(uint256 _pid) private {\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        if (block.timestamp <= pool.lastRewardTime) {\\n            return;\\n        }\\n\\n        if (pool.stakingTokenTotalAmount == 0) {\\n            pool.lastRewardTime = uint32(block.timestamp);\\n            return;\\n        }\\n\\n        uint256 multiplier = getMultiplier(pool.lastRewardTime, block.timestamp);\\n        uint256 rewardTokenAmount = (multiplier * rewardTokenPerSecond * pool.allocationPoint) /\\n            totalAllocationPoint;\\n\\n        pool.accumulatedRewardTokenPerShare +=\\n            (rewardTokenAmount * SHARE_PRECISION) /\\n            pool.stakingTokenTotalAmount;\\n        pool.lastRewardTime = uint32(block.timestamp);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/helpers/TransferHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @notice Emitted when an approval action fails\\n */\\nerror SafeApproveError();\\n\\n/**\\n * @notice Emitted when a transfer action fails\\n */\\nerror SafeTransferError();\\n\\n/**\\n * @notice Emitted when a transferFrom action fails\\n */\\nerror SafeTransferFromError();\\n\\n/**\\n * @notice Emitted when a transfer of the native token fails\\n */\\nerror SafeTransferNativeError();\\n\\n/**\\n * @notice Safely approve the token to the account\\n * @param _token The token address\\n * @param _to The token approval recipient address\\n * @param _value The token approval amount\\n */\\nfunction safeApprove(address _token, address _to, uint256 _value) {\\n    // 0x095ea7b3 is the selector for \\\"approve(address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0x095ea7b3, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeApproveError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the token to the account\\n * @param _token The token address\\n * @param _to The token transfer recipient address\\n * @param _value The token transfer amount\\n */\\nfunction safeTransfer(address _token, address _to, uint256 _value) {\\n    // 0xa9059cbb is the selector for \\\"transfer(address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0xa9059cbb, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeTransferError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the token between the accounts\\n * @param _token The token address\\n * @param _from The token transfer source address\\n * @param _to The token transfer recipient address\\n * @param _value The token transfer amount\\n */\\nfunction safeTransferFrom(address _token, address _from, address _to, uint256 _value) {\\n    // 0x23b872dd is the selector for \\\"transferFrom(address,address,uint256)\\\"\\n    (bool success, bytes memory data) = _token.call(\\n        abi.encodeWithSelector(0x23b872dd, _from, _to, _value)\\n    );\\n\\n    bool condition = success && (data.length == 0 || abi.decode(data, (bool)));\\n\\n    if (!condition) {\\n        revert SafeTransferFromError();\\n    }\\n}\\n\\n/**\\n * @notice Safely transfer the native token to the account\\n * @param _to The native token transfer recipient address\\n * @param _value The native token transfer amount\\n */\\nfunction safeTransferNative(address _to, uint256 _value) {\\n    (bool success, ) = _to.call{ value: _value }(new bytes(0));\\n\\n    if (!success) {\\n        revert SafeTransferNativeError();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRevenueShare.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title IRevenueShare\\n * @notice Revenue share interface\\n */\\ninterface IRevenueShare {\\n    /**\\n     * @notice Withdraws tokens\\n     */\\n    function withdraw() external;\\n\\n    /**\\n     * @notice Locks tokens\\n     * @param _amount The number of tokens to lock\\n     */\\n    function lock(uint256 _amount) external;\\n\\n    /**\\n     * @notice Locks tokens on behalf of the user\\n     * @param _amount The number of tokens to lock\\n     * @param _user The address of the user\\n     */\\n    function lock(uint256 _amount, address _user) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenBalance.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\n/**\\n * @title ITokenBalance\\n * @notice Token balance interface\\n */\\ninterface ITokenBalance {\\n    /**\\n     * @notice Getter of the token balance by the account\\n     * @param _account The account address\\n     * @return Token balance\\n     */\\n    function balanceOf(address _account) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Pausable as PausableBase } from '@openzeppelin/contracts/security/Pausable.sol';\\nimport { ManagerRole } from './roles/ManagerRole.sol';\\n\\n/**\\n * @title Pausable\\n * @notice Base contract that implements the emergency pause mechanism\\n */\\nabstract contract Pausable is PausableBase, ManagerRole {\\n    /**\\n     * @notice Enter pause state\\n     */\\n    function pause() external onlyManager whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @notice Exit pause state\\n     */\\n    function unpause() external onlyManager whenPaused {\\n        _unpause();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/ManagerRole.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport { Ownable } from '@openzeppelin/contracts/access/Ownable.sol';\\nimport { RoleBearers } from './RoleBearers.sol';\\n\\n/**\\n * @title ManagerRole\\n * @notice Base contract that implements the Manager role.\\n * The manager role is a high-permission role for core team members only.\\n * Managers can set vaults and routers addresses, fees, cross-chain protocols,\\n * and other parameters for Interchain (cross-chain) swaps and single-network swaps.\\n * Please note, the manager role is unique for every contract,\\n * hence different addresses may be assigned as managers for different contracts.\\n */\\nabstract contract ManagerRole is Ownable, RoleBearers {\\n    bytes32 private constant ROLE_KEY = keccak256('Manager');\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is updated\\n     * @param account The account address\\n     * @param value The Manager role status flag\\n     */\\n    event SetManager(address indexed account, bool indexed value);\\n\\n    /**\\n     * @notice Emitted when the Manager role status for the account is renounced\\n     * @param account The account address\\n     */\\n    event RenounceManagerRole(address indexed account);\\n\\n    /**\\n     * @notice Emitted when the caller is not a Manager role bearer\\n     */\\n    error OnlyManagerError();\\n\\n    /**\\n     * @dev Modifier to check if the caller is a Manager role bearer\\n     */\\n    modifier onlyManager() {\\n        if (!isManager(msg.sender)) {\\n            revert OnlyManagerError();\\n        }\\n\\n        _;\\n    }\\n\\n    /**\\n     * @notice Updates the Manager role status for the account\\n     * @param _account The account address\\n     * @param _value The Manager role status flag\\n     */\\n    function setManager(address _account, bool _value) public onlyOwner {\\n        _setRoleBearer(ROLE_KEY, _account, _value);\\n\\n        emit SetManager(_account, _value);\\n    }\\n\\n    /**\\n     * @notice Renounces the Manager role\\n     */\\n    function renounceManagerRole() external onlyManager {\\n        _setRoleBearer(ROLE_KEY, msg.sender, false);\\n\\n        emit RenounceManagerRole(msg.sender);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer count\\n     * @return The Manager role bearer count\\n     */\\n    function managerCount() external view returns (uint256) {\\n        return _roleBearerCount(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the complete list of the Manager role bearers\\n     * @return The complete list of the Manager role bearers\\n     */\\n    function fullManagerList() external view returns (address[] memory) {\\n        return _fullRoleBearerList(ROLE_KEY);\\n    }\\n\\n    /**\\n     * @notice Getter of the Manager role bearer status\\n     * @param _account The account address\\n     */\\n    function isManager(address _account) public view returns (bool) {\\n        return _isRoleBearer(ROLE_KEY, _account);\\n    }\\n\\n    function _initRoles(\\n        address _owner,\\n        address[] memory _managers,\\n        bool _addOwnerToManagers\\n    ) internal {\\n        address ownerAddress = _owner == address(0) ? msg.sender : _owner;\\n\\n        for (uint256 index; index < _managers.length; index++) {\\n            setManager(_managers[index], true);\\n        }\\n\\n        if (_addOwnerToManagers && !isManager(ownerAddress)) {\\n            setManager(ownerAddress, true);\\n        }\\n\\n        if (ownerAddress != msg.sender) {\\n            transferOwnership(ownerAddress);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/roles/RoleBearers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity 0.8.19;\\n\\nimport '../Constants.sol' as Constants;\\nimport '../DataStructures.sol' as DataStructures;\\n\\n/**\\n * @title RoleBearers\\n * @notice Base contract that implements role-based access control\\n * @dev A custom implementation providing full role bearer lists\\n */\\nabstract contract RoleBearers {\\n    mapping(bytes32 /*roleKey*/ => address[] /*roleBearers*/) private roleBearerTable;\\n    mapping(bytes32 /*roleKey*/ => mapping(address /*account*/ => DataStructures.OptionalValue /*status*/))\\n        private roleBearerIndexTable;\\n\\n    function _setRoleBearer(bytes32 _roleKey, address _account, bool _value) internal {\\n        DataStructures.uniqueAddressListUpdate(\\n            roleBearerTable[_roleKey],\\n            roleBearerIndexTable[_roleKey],\\n            _account,\\n            _value,\\n            Constants.LIST_SIZE_LIMIT_DEFAULT\\n        );\\n    }\\n\\n    function _isRoleBearer(bytes32 _roleKey, address _account) internal view returns (bool) {\\n        return roleBearerIndexTable[_roleKey][_account].isSet;\\n    }\\n\\n    function _roleBearerCount(bytes32 _roleKey) internal view returns (uint256) {\\n        return roleBearerTable[_roleKey].length;\\n    }\\n\\n    function _fullRoleBearerList(bytes32 _roleKey) internal view returns (address[] memory) {\\n        return roleBearerTable[_roleKey];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_rewardTokenPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_vestingDuration\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ListSizeLimitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyManagerError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReservedTokenError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTransferNativeError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExitEarly\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"RenounceManagerRole\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"SetManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawVesting\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LPRevenueShare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_allocPoint\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_addSeconds\",\"type\":\"uint32\"}],\"name\":\"changeEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"checkVestingBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vestedTotal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingTotal\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"internalType\":\"struct StablecoinFarm.VestedBalance[]\",\"name\":\"vestData\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"cleanup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"exitEarly\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitEarlyLPShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitEarlyTreasuryShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exitEarlyUserShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fullManagerList\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getMultiplier\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"isReservedToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isStakingTokenSet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"lockPending\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"lockVesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingRewardToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"stakingToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"stakingTokenTotalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatedRewardTokenPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastRewardTime\",\"type\":\"uint32\"},{\"internalType\":\"uint16\",\"name\":\"allocationPoint\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardTokenPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_allocPoint\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newRevenueShare\",\"type\":\"address\"}],\"name\":\"setLPRevenueShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_value\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_userPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_treasuryPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpPercent\",\"type\":\"uint256\"}],\"name\":\"setPercentsShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardTokenPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withUpdate\",\"type\":\"bool\"}],\"name\":\"setRewardTokenPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newTreasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocationPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainingRewardTokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"vest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawVestedRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StablecoinFarm", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002b1d36f5b61addaf7da7ebbd11b35fd8cfb0de31000000000000000000000000000000000000000000000000003211b70ff5ff000000000000000000000000000000000000000000000000000000000064e74483000000000000000000000000000000000000000000000000000000000076a700", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}