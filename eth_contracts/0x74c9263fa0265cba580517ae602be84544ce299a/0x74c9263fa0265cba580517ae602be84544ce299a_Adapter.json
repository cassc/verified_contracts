{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Adapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {IERC20} from \\\"openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20, Address} from \\\"openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {OwnableUpgradeable} from \\\"openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\\\";\\nimport {UUPSUpgradeable} from \\\"openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport {IAdapter} from \\\"./interfaces/IAdapter.sol\\\";\\nimport {IAdapterOwner} from \\\"./interfaces/IAdapterOwner.sol\\\";\\nimport {IController} from \\\"./interfaces/IController.sol\\\";\\nimport {IBasicRandcastConsumerBase} from \\\"./interfaces/IBasicRandcastConsumerBase.sol\\\";\\nimport {RequestIdBase} from \\\"./utils/RequestIdBase.sol\\\";\\nimport {BLS} from \\\"./libraries/BLS.sol\\\";\\n// solhint-disable-next-line no-global-import\\nimport \\\"./utils/Utils.sol\\\" as Utils;\\nimport {ChainHelper} from \\\"./libraries/ChainHelper.sol\\\";\\n\\ncontract Adapter is UUPSUpgradeable, IAdapter, IAdapterOwner, RequestIdBase, OwnableUpgradeable {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n\\n    // *Constants*\\n    uint16 public constant MAX_CONSUMERS = 100;\\n    uint16 public constant MAX_REQUEST_CONFIRMATIONS = 200;\\n    uint32 public constant RANDOMNESS_REWARD_GAS = 9000;\\n    uint32 public constant VERIFICATION_GAS_OVER_MINIMUM_THRESHOLD = 50000;\\n    uint32 public constant DEFAULT_MINIMUM_THRESHOLD = 3;\\n\\n    // *State Variables*\\n    IController internal _controller;\\n    uint256 internal _cumulativeFlatFee;\\n    uint256 internal _cumulativeCommitterReward;\\n    uint256 internal _cumulativePartialSignatureReward;\\n\\n    // Randomness Task State\\n    uint32 internal _lastAssignedGroupIndex;\\n    uint256 internal _lastRandomness;\\n    uint256 internal _randomnessCount;\\n\\n    AdapterConfig internal _config;\\n    mapping(bytes32 => bytes32) internal _requestCommitments;\\n    /* consumerAddress - consumer */\\n    mapping(address => Consumer) internal _consumers;\\n    /* subId - subscription */\\n    mapping(uint64 => Subscription) internal _subscriptions;\\n    uint64 internal _currentSubId;\\n\\n    // Referral Promotion\\n    ReferralConfig internal _referralConfig;\\n\\n    // Flat Fee Promotion\\n    FlatFeeConfig internal _flatFeeConfig;\\n\\n    // *Structs*\\n    // Note a nonce of 0 indicates an the consumer is not assigned to that subscription.\\n    struct Consumer {\\n        /* subId - nonce */\\n        mapping(uint64 => uint64) nonces;\\n        uint64 lastSubscription;\\n    }\\n\\n    struct Subscription {\\n        address owner; // Owner can fund/withdraw/cancel the sub.\\n        address requestedOwner; // For safely transferring sub ownership.\\n        address[] consumers;\\n        uint256 balance; // Token balance used for all consumer requests.\\n        uint256 inflightCost; // Upper cost for pending requests(except drastic exchange rate changes).\\n        mapping(bytes32 => uint256) inflightPayments;\\n        uint64 reqCount; // For fee tiers\\n        uint64 freeRequestCount; // Number of free requests(flat fee) for this sub.\\n        uint64 referralSubId; //\\n        uint64 reqCountInCurrentPeriod;\\n        // Number of requests in the current period.\\n        uint256 lastRequestTimestamp; // Timestamp of the last request.\\n    }\\n\\n    // *Events*\\n    event AdapterConfigSet(\\n        uint16 minimumRequestConfirmations,\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        uint32 gasExceptCallback,\\n        uint256 signatureTaskExclusiveWindow,\\n        uint256 rewardPerSignature,\\n        uint256 committerRewardPerSignature\\n    );\\n    event FlatFeeConfigSet(\\n        FeeConfig flatFeeConfig,\\n        uint16 flatFeePromotionGlobalPercentage,\\n        bool isFlatFeePromotionEnabledPermanently,\\n        uint256 flatFeePromotionStartTimestamp,\\n        uint256 flatFeePromotionEndTimestamp\\n    );\\n    event ReferralConfigSet(\\n        bool isReferralEnabled, uint16 freeRequestCountForReferrer, uint16 freeRequestCountForReferee\\n    );\\n    event SubscriptionCreated(uint64 indexed subId, address indexed owner);\\n    event SubscriptionFunded(uint64 indexed subId, uint256 oldBalance, uint256 newBalance);\\n    event SubscriptionConsumerAdded(uint64 indexed subId, address consumer);\\n    event SubscriptionReferralSet(uint64 indexed subId, uint64 indexed referralSubId);\\n    event SubscriptionCanceled(uint64 indexed subId, address to, uint256 amount);\\n    event SubscriptionConsumerRemoved(uint64 indexed subId, address consumer);\\n    event RandomnessRequest(\\n        bytes32 indexed requestId,\\n        uint64 indexed subId,\\n        uint32 indexed groupIndex,\\n        RequestType requestType,\\n        bytes params,\\n        address sender,\\n        uint256 seed,\\n        uint16 requestConfirmations,\\n        uint32 callbackGasLimit,\\n        uint256 callbackMaxGasPrice,\\n        uint256 estimatedPayment\\n    );\\n    event RandomnessRequestResult(\\n        bytes32 indexed requestId,\\n        uint32 indexed groupIndex,\\n        address indexed committer,\\n        address[] participantMembers,\\n        uint256 randommness,\\n        uint256 payment,\\n        uint256 flatFee,\\n        bool success\\n    );\\n    event OvertimeRequestCanceled(bytes32 indexed requestId, uint64 indexed subId);\\n\\n    // *Errors*\\n    error Reentrant();\\n    error InvalidRequestConfirmations(uint16 have, uint16 min, uint16 max);\\n    error TooManyConsumers();\\n    error InsufficientBalanceWhenRequest();\\n    error InsufficientBalanceWhenFulfill();\\n    error InvalidConsumer(uint64 subId, address consumer);\\n    error InvalidSubscription();\\n    error ReferralPromotionDisabled();\\n    error SubscriptionAlreadyHasReferral();\\n    error IdenticalSubscription();\\n    error AtLeastOneRequestIsRequired();\\n    error MustBeSubOwner(address owner);\\n    error NoAvailableGroups();\\n    error NoCorrespondingRequest();\\n    error IncorrectCommitment();\\n    error InvalidRequestByEOA();\\n    error TaskStillExclusive();\\n    error TaskStillWithinRequestConfirmations();\\n    error NotFromCommitter();\\n    error GroupNotExist(uint256 groupIndex);\\n    error SenderNotController();\\n    error PendingRequestExists();\\n    error InvalidZeroAddress();\\n    error GasLimitTooBig(uint32 have, uint32 want);\\n    error RequestNotExpired();\\n\\n    // *Modifiers*\\n    modifier onlySubOwner(uint64 subId) {\\n        address owner = _subscriptions[subId].owner;\\n        if (owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        if (msg.sender != owner) {\\n            revert MustBeSubOwner(owner);\\n        }\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        if (_config.reentrancyLock) {\\n            revert Reentrant();\\n        }\\n        _;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(address controller) public initializer {\\n        _controller = IController(controller);\\n\\n        __Ownable_init();\\n    }\\n\\n    // solhint-disable-next-line no-empty-blocks\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    // =============\\n    // IAdapterOwner\\n    // =============\\n    function setAdapterConfig(\\n        uint16 minimumRequestConfirmations,\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        uint32 gasExceptCallback,\\n        uint256 signatureTaskExclusiveWindow,\\n        uint256 rewardPerSignature,\\n        uint256 committerRewardPerSignature\\n    ) external override(IAdapterOwner) onlyOwner {\\n        if (minimumRequestConfirmations > MAX_REQUEST_CONFIRMATIONS) {\\n            revert InvalidRequestConfirmations(\\n                minimumRequestConfirmations, minimumRequestConfirmations, MAX_REQUEST_CONFIRMATIONS\\n            );\\n        }\\n        _config = AdapterConfig({\\n            minimumRequestConfirmations: minimumRequestConfirmations,\\n            maxGasLimit: maxGasLimit,\\n            gasAfterPaymentCalculation: gasAfterPaymentCalculation,\\n            gasExceptCallback: gasExceptCallback,\\n            signatureTaskExclusiveWindow: signatureTaskExclusiveWindow,\\n            rewardPerSignature: rewardPerSignature,\\n            committerRewardPerSignature: committerRewardPerSignature,\\n            reentrancyLock: false\\n        });\\n\\n        emit AdapterConfigSet(\\n            minimumRequestConfirmations,\\n            maxGasLimit,\\n            gasAfterPaymentCalculation,\\n            gasExceptCallback,\\n            signatureTaskExclusiveWindow,\\n            rewardPerSignature,\\n            committerRewardPerSignature\\n        );\\n    }\\n\\n    function setFlatFeeConfig(\\n        FeeConfig memory flatFeeConfig,\\n        uint16 flatFeePromotionGlobalPercentage,\\n        bool isFlatFeePromotionEnabledPermanently,\\n        uint256 flatFeePromotionStartTimestamp,\\n        uint256 flatFeePromotionEndTimestamp\\n    ) external override(IAdapterOwner) onlyOwner {\\n        _flatFeeConfig = FlatFeeConfig({\\n            config: flatFeeConfig,\\n            flatFeePromotionGlobalPercentage: flatFeePromotionGlobalPercentage,\\n            isFlatFeePromotionEnabledPermanently: isFlatFeePromotionEnabledPermanently,\\n            flatFeePromotionStartTimestamp: flatFeePromotionStartTimestamp,\\n            flatFeePromotionEndTimestamp: flatFeePromotionEndTimestamp\\n        });\\n\\n        emit FlatFeeConfigSet(\\n            flatFeeConfig,\\n            flatFeePromotionGlobalPercentage,\\n            isFlatFeePromotionEnabledPermanently,\\n            flatFeePromotionStartTimestamp,\\n            flatFeePromotionEndTimestamp\\n        );\\n    }\\n\\n    function setReferralConfig(\\n        bool isReferralEnabled,\\n        uint16 freeRequestCountForReferrer,\\n        uint16 freeRequestCountForReferee\\n    ) external override(IAdapterOwner) onlyOwner {\\n        _referralConfig = ReferralConfig({\\n            isReferralEnabled: isReferralEnabled,\\n            freeRequestCountForReferrer: freeRequestCountForReferrer,\\n            freeRequestCountForReferee: freeRequestCountForReferee\\n        });\\n\\n        emit ReferralConfigSet(isReferralEnabled, freeRequestCountForReferrer, freeRequestCountForReferee);\\n    }\\n\\n    function setFreeRequestCount(uint64[] memory subIds, uint64[] memory freeRequestCounts)\\n        external\\n        override(IAdapterOwner)\\n        onlyOwner\\n    {\\n        for (uint256 i = 0; i < subIds.length; i++) {\\n            _subscriptions[subIds[i]].freeRequestCount = freeRequestCounts[i];\\n        }\\n    }\\n\\n    function ownerCancelSubscription(uint64 subId) external override(IAdapterOwner) onlyOwner {\\n        if (_subscriptions[subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        _cancelSubscriptionHelper(subId, _subscriptions[subId].owner);\\n    }\\n\\n    // =============\\n    // IAdapter\\n    // =============\\n    function nodeWithdrawETH(address recipient, uint256 ethAmount) external override(IAdapter) {\\n        if (msg.sender != address(_controller)) {\\n            revert SenderNotController();\\n        }\\n        payable(recipient).transfer(ethAmount);\\n    }\\n\\n    function createSubscription() external override(IAdapter) nonReentrant returns (uint64) {\\n        _currentSubId++;\\n\\n        _subscriptions[_currentSubId].owner = msg.sender;\\n        // flat fee free for the first request for each subscription\\n        _subscriptions[_currentSubId].freeRequestCount = 1;\\n\\n        emit SubscriptionCreated(_currentSubId, msg.sender);\\n        return _currentSubId;\\n    }\\n\\n    function addConsumer(uint64 subId, address consumer) external override(IAdapter) onlySubOwner(subId) nonReentrant {\\n        // Already maxed, cannot add any more consumers.\\n        if (_subscriptions[subId].consumers.length == MAX_CONSUMERS) {\\n            revert TooManyConsumers();\\n        }\\n        if (_consumers[consumer].nonces[subId] != 0) {\\n            // Idempotence - do nothing if already added.\\n            // Ensures uniqueness in subscriptions[subId].consumers.\\n            return;\\n        }\\n        // Initialize the nonce to 1, indicating the consumer is allocated.\\n        _consumers[consumer].nonces[subId] = 1;\\n        _consumers[consumer].lastSubscription = subId;\\n        _subscriptions[subId].consumers.push(consumer);\\n\\n        emit SubscriptionConsumerAdded(subId, consumer);\\n    }\\n\\n    function removeConsumer(uint64 subId, address consumer)\\n        external\\n        override(IAdapter)\\n        onlySubOwner(subId)\\n        nonReentrant\\n    {\\n        if (_subscriptions[subId].inflightCost != 0) {\\n            revert PendingRequestExists();\\n        }\\n        address[] memory consumers = _subscriptions[subId].consumers;\\n        if (consumers.length == 0) {\\n            revert InvalidConsumer(subId, consumer);\\n        }\\n        // Note bounded by MAX_CONSUMERS\\n        for (uint256 i = 0; i < consumers.length; i++) {\\n            if (consumers[i] == consumer) {\\n                _subscriptions[subId].consumers[i] = consumers[consumers.length - 1];\\n                _subscriptions[subId].consumers.pop();\\n\\n                emit SubscriptionConsumerRemoved(subId, consumer);\\n                return;\\n            }\\n        }\\n        revert InvalidConsumer(subId, consumer);\\n    }\\n\\n    function fundSubscription(uint64 subId) external payable override(IAdapter) nonReentrant {\\n        if (_subscriptions[subId].owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n\\n        // We do not check that the msg.sender is the subscription owner,\\n        // anyone can fund a subscription.\\n        uint256 oldBalance = _subscriptions[subId].balance;\\n        _subscriptions[subId].balance += msg.value;\\n        emit SubscriptionFunded(subId, oldBalance, oldBalance + msg.value);\\n    }\\n\\n    function setReferral(uint64 subId, uint64 referralSubId)\\n        external\\n        override(IAdapter)\\n        onlySubOwner(subId)\\n        nonReentrant\\n    {\\n        if (!_referralConfig.isReferralEnabled) {\\n            revert ReferralPromotionDisabled();\\n        }\\n        if (_subscriptions[subId].owner == _subscriptions[referralSubId].owner) {\\n            revert IdenticalSubscription();\\n        }\\n        if (_subscriptions[subId].referralSubId != 0) {\\n            revert SubscriptionAlreadyHasReferral();\\n        }\\n        if (_subscriptions[subId].reqCount == 0 || _subscriptions[referralSubId].reqCount == 0) {\\n            revert AtLeastOneRequestIsRequired();\\n        }\\n        _subscriptions[referralSubId].freeRequestCount += _referralConfig.freeRequestCountForReferrer;\\n        _subscriptions[subId].freeRequestCount += _referralConfig.freeRequestCountForReferee;\\n        _subscriptions[subId].referralSubId = referralSubId;\\n\\n        emit SubscriptionReferralSet(subId, referralSubId);\\n    }\\n\\n    function cancelSubscription(uint64 subId, address to)\\n        external\\n        override(IAdapter)\\n        onlySubOwner(subId)\\n        nonReentrant\\n    {\\n        if (to == address(0)) {\\n            revert InvalidZeroAddress();\\n        }\\n        if (_subscriptions[subId].inflightCost != 0) {\\n            revert PendingRequestExists();\\n        }\\n        _cancelSubscriptionHelper(subId, to);\\n    }\\n\\n    function cancelOvertimeRequest(bytes32 requestId, RequestDetail calldata requestDetail)\\n        external\\n        override(IAdapter)\\n        onlySubOwner(requestDetail.subId)\\n    {\\n        if (_requestCommitments[requestId] == 0) {\\n            revert NoCorrespondingRequest();\\n        }\\n        if (\\n            _requestCommitments[requestId]\\n                != keccak256(\\n                    abi.encode(\\n                        requestId,\\n                        requestDetail.subId,\\n                        requestDetail.groupIndex,\\n                        requestDetail.requestType,\\n                        requestDetail.params,\\n                        requestDetail.callbackContract,\\n                        requestDetail.seed,\\n                        requestDetail.requestConfirmations,\\n                        requestDetail.callbackGasLimit,\\n                        requestDetail.callbackMaxGasPrice,\\n                        requestDetail.blockNum\\n                    )\\n                )\\n        ) {\\n            revert IncorrectCommitment();\\n        }\\n        uint256 blockNum24H = 1 days / ChainHelper.getBlockTime();\\n        if (block.number < requestDetail.blockNum + blockNum24H) {\\n            revert RequestNotExpired();\\n        }\\n        delete _requestCommitments[requestId];\\n        _subscriptions[requestDetail.subId].inflightCost -=\\n            _subscriptions[requestDetail.subId].inflightPayments[requestId];\\n        delete _subscriptions[requestDetail.subId].inflightPayments[requestId];\\n        emit OvertimeRequestCanceled(requestId, requestDetail.subId);\\n    }\\n\\n    function requestRandomness(RandomnessRequestParams calldata params)\\n        public\\n        virtual\\n        override(IAdapter)\\n        nonReentrant\\n        returns (bytes32)\\n    {\\n        RandomnessRequestParams memory p = params;\\n\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin) {\\n            revert InvalidRequestByEOA();\\n        }\\n\\n        Subscription storage sub = _subscriptions[p.subId];\\n\\n        // Input validation using the subscription storage.\\n        if (sub.owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        // Its important to ensure that the consumer is in fact who they say they\\n        // are, otherwise they could use someone else's subscription balance.\\n        // A nonce of 0 indicates consumer is not allocated to the sub.\\n        if (_consumers[msg.sender].nonces[p.subId] == 0) {\\n            revert InvalidConsumer(p.subId, msg.sender);\\n        }\\n\\n        if (\\n            p.requestConfirmations < _config.minimumRequestConfirmations\\n                || p.requestConfirmations > MAX_REQUEST_CONFIRMATIONS\\n        ) {\\n            revert InvalidRequestConfirmations(\\n                p.requestConfirmations, _config.minimumRequestConfirmations, MAX_REQUEST_CONFIRMATIONS\\n            );\\n        }\\n        // No lower bound on the requested gas limit. A user could request 0\\n        // and they would simply be billed for the proof verification and wouldn't be\\n        // able to do anything with the random value.\\n        if (p.callbackGasLimit > _config.maxGasLimit) {\\n            revert GasLimitTooBig(p.callbackGasLimit, _config.maxGasLimit);\\n        }\\n\\n        // Choose current available group to handle randomness request(by round robin)\\n        _lastAssignedGroupIndex = uint32(_findGroupToAssignTask());\\n\\n        // Calculate requestId for the task\\n        uint256 rawSeed = _makeRandcastInputSeed(p.seed, p.subId, msg.sender, _consumers[msg.sender].nonces[p.subId]);\\n        _consumers[msg.sender].lastSubscription = p.subId;\\n        _consumers[msg.sender].nonces[p.subId] += 1;\\n        bytes32 requestId = _makeRequestId(rawSeed);\\n\\n        (, uint256 groupSize) = _controller.getGroupThreshold(_lastAssignedGroupIndex);\\n\\n        uint256 payment =\\n            _freezePaymentBySubscription(sub, requestId, uint32(groupSize), p.callbackGasLimit, p.callbackMaxGasPrice);\\n\\n        _requestCommitments[requestId] = keccak256(\\n            abi.encode(\\n                requestId,\\n                p.subId,\\n                _lastAssignedGroupIndex,\\n                p.requestType,\\n                p.params,\\n                msg.sender,\\n                rawSeed,\\n                p.requestConfirmations,\\n                p.callbackGasLimit,\\n                p.callbackMaxGasPrice,\\n                block.number\\n            )\\n        );\\n\\n        emit RandomnessRequest(\\n            requestId,\\n            p.subId,\\n            _lastAssignedGroupIndex,\\n            p.requestType,\\n            p.params,\\n            msg.sender,\\n            rawSeed,\\n            p.requestConfirmations,\\n            p.callbackGasLimit,\\n            p.callbackMaxGasPrice,\\n            payment\\n        );\\n\\n        return requestId;\\n    }\\n\\n    function fulfillRandomness(\\n        uint32 groupIndex,\\n        bytes32 requestId,\\n        uint256 signature,\\n        RequestDetail calldata requestDetail,\\n        PartialSignature[] calldata partialSignatures\\n    ) public virtual override(IAdapter) nonReentrant {\\n        uint256 startGas = gasleft();\\n\\n        bytes32 commitment = _requestCommitments[requestId];\\n        if (commitment == 0) {\\n            revert NoCorrespondingRequest();\\n        }\\n        if (\\n            commitment\\n                != keccak256(\\n                    abi.encode(\\n                        requestId,\\n                        requestDetail.subId,\\n                        requestDetail.groupIndex,\\n                        requestDetail.requestType,\\n                        requestDetail.params,\\n                        requestDetail.callbackContract,\\n                        requestDetail.seed,\\n                        requestDetail.requestConfirmations,\\n                        requestDetail.callbackGasLimit,\\n                        requestDetail.callbackMaxGasPrice,\\n                        requestDetail.blockNum\\n                    )\\n                )\\n        ) {\\n            revert IncorrectCommitment();\\n        }\\n\\n        if (block.number < requestDetail.blockNum + requestDetail.requestConfirmations) {\\n            revert TaskStillWithinRequestConfirmations();\\n        }\\n\\n        if (\\n            groupIndex != requestDetail.groupIndex\\n                && block.number <= requestDetail.blockNum + _config.signatureTaskExclusiveWindow\\n        ) {\\n            revert TaskStillExclusive();\\n        }\\n        if (groupIndex >= _controller.getGroupCount()) {\\n            revert GroupNotExist(groupIndex);\\n        }\\n\\n        address[] memory participantMembers =\\n            _verifySignature(groupIndex, requestDetail.seed, requestDetail.blockNum, signature, partialSignatures);\\n\\n        delete _requestCommitments[requestId];\\n\\n        uint256 randomness = uint256(keccak256(abi.encode(signature)));\\n\\n        _randomnessCount += 1;\\n        _lastRandomness = randomness;\\n        _controller.setLastOutput(randomness);\\n        // call user fulfill_randomness callback\\n        bool success = _fulfillCallback(requestId, randomness, requestDetail);\\n\\n        (uint256 payment, uint256 flatFee) =\\n            _payBySubscription(_subscriptions[requestDetail.subId], requestId, partialSignatures.length, startGas);\\n\\n        // rewardRandomness for participants\\n        _rewardRandomness(participantMembers, payment, flatFee);\\n\\n        // Include payment in the event for tracking costs.\\n        emit RandomnessRequestResult(\\n            requestId, groupIndex, msg.sender, participantMembers, randomness, payment, flatFee, success\\n        );\\n    }\\n\\n    function getLastSubscription(address consumer) public view override(IAdapter) returns (uint64) {\\n        return _consumers[consumer].lastSubscription;\\n    }\\n\\n    function getSubscription(uint64 subId)\\n        external\\n        view\\n        override(IAdapter)\\n        returns (\\n            address owner,\\n            address[] memory consumers,\\n            uint256 balance,\\n            uint256 inflightCost,\\n            uint64 reqCount,\\n            uint64 freeRequestCount,\\n            uint64 referralSubId,\\n            uint64 reqCountInCurrentPeriod,\\n            uint256 lastRequestTimestamp\\n        )\\n    {\\n        Subscription storage sub = _subscriptions[subId];\\n        if (sub.owner == address(0)) {\\n            revert InvalidSubscription();\\n        }\\n        return (\\n            sub.owner,\\n            sub.consumers,\\n            sub.balance,\\n            sub.inflightCost,\\n            sub.reqCount,\\n            sub.freeRequestCount,\\n            sub.referralSubId,\\n            sub.reqCountInCurrentPeriod,\\n            sub.lastRequestTimestamp\\n        );\\n    }\\n\\n    function getPendingRequestCommitment(bytes32 requestId) public view override(IAdapter) returns (bytes32) {\\n        return _requestCommitments[requestId];\\n    }\\n\\n    function getLastAssignedGroupIndex() external view override(IAdapter) returns (uint256) {\\n        return _lastAssignedGroupIndex;\\n    }\\n\\n    function getLastRandomness() external view override(IAdapter) returns (uint256) {\\n        return _lastRandomness;\\n    }\\n\\n    function getRandomnessCount() external view override(IAdapter) returns (uint256) {\\n        return _randomnessCount;\\n    }\\n\\n    function getCurrentSubId() external view override(IAdapter) returns (uint64) {\\n        return _currentSubId;\\n    }\\n\\n    function getCumulativeData() external view override(IAdapter) returns (uint256, uint256, uint256) {\\n        return (_cumulativeFlatFee, _cumulativeCommitterReward, _cumulativePartialSignatureReward);\\n    }\\n\\n    function getController() external view override(IAdapter) returns (address) {\\n        return address(_controller);\\n    }\\n\\n    function getAdapterConfig()\\n        external\\n        view\\n        override(IAdapter)\\n        returns (\\n            uint16 minimumRequestConfirmations,\\n            uint32 maxGasLimit,\\n            uint32 gasAfterPaymentCalculation,\\n            uint32 gasExceptCallback,\\n            uint256 signatureTaskExclusiveWindow,\\n            uint256 rewardPerSignature,\\n            uint256 committerRewardPerSignature\\n        )\\n    {\\n        return (\\n            _config.minimumRequestConfirmations,\\n            _config.maxGasLimit,\\n            _config.gasAfterPaymentCalculation,\\n            _config.gasExceptCallback,\\n            _config.signatureTaskExclusiveWindow,\\n            _config.rewardPerSignature,\\n            _config.committerRewardPerSignature\\n        );\\n    }\\n\\n    function getFlatFeeConfig()\\n        external\\n        view\\n        override(IAdapter)\\n        returns (\\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\\n            uint32 fulfillmentFlatFeeLinkPPMTier2,\\n            uint32 fulfillmentFlatFeeLinkPPMTier3,\\n            uint32 fulfillmentFlatFeeLinkPPMTier4,\\n            uint32 fulfillmentFlatFeeLinkPPMTier5,\\n            uint24 reqsForTier2,\\n            uint24 reqsForTier3,\\n            uint24 reqsForTier4,\\n            uint24 reqsForTier5,\\n            uint16 flatFeePromotionGlobalPercentage,\\n            bool isFlatFeePromotionEnabledPermanently,\\n            uint256 flatFeePromotionStartTimestamp,\\n            uint256 flatFeePromotionEndTimestamp\\n        )\\n    {\\n        FeeConfig memory fc = _flatFeeConfig.config;\\n        return (\\n            fc.fulfillmentFlatFeeEthPPMTier1,\\n            fc.fulfillmentFlatFeeEthPPMTier2,\\n            fc.fulfillmentFlatFeeEthPPMTier3,\\n            fc.fulfillmentFlatFeeEthPPMTier4,\\n            fc.fulfillmentFlatFeeEthPPMTier5,\\n            fc.reqsForTier2,\\n            fc.reqsForTier3,\\n            fc.reqsForTier4,\\n            fc.reqsForTier5,\\n            _flatFeeConfig.flatFeePromotionGlobalPercentage,\\n            _flatFeeConfig.isFlatFeePromotionEnabledPermanently,\\n            _flatFeeConfig.flatFeePromotionStartTimestamp,\\n            _flatFeeConfig.flatFeePromotionEndTimestamp\\n        );\\n    }\\n\\n    function getReferralConfig()\\n        external\\n        view\\n        override(IAdapter)\\n        returns (bool isReferralEnabled, uint16 freeRequestCountForReferrer, uint16 freeRequestCountForReferee)\\n    {\\n        return (\\n            _referralConfig.isReferralEnabled,\\n            _referralConfig.freeRequestCountForReferrer,\\n            _referralConfig.freeRequestCountForReferee\\n        );\\n    }\\n\\n    function getFeeTier(uint64 reqCount) public view override(IAdapter) returns (uint32) {\\n        FeeConfig memory fc = _flatFeeConfig.config;\\n        if (reqCount <= fc.reqsForTier2) {\\n            return fc.fulfillmentFlatFeeEthPPMTier1;\\n        }\\n        if (fc.reqsForTier2 < reqCount && reqCount <= fc.reqsForTier3) {\\n            return fc.fulfillmentFlatFeeEthPPMTier2;\\n        }\\n        if (fc.reqsForTier3 < reqCount && reqCount <= fc.reqsForTier4) {\\n            return fc.fulfillmentFlatFeeEthPPMTier3;\\n        }\\n        if (fc.reqsForTier4 < reqCount && reqCount <= fc.reqsForTier5) {\\n            return fc.fulfillmentFlatFeeEthPPMTier4;\\n        }\\n        return fc.fulfillmentFlatFeeEthPPMTier5;\\n    }\\n\\n    function estimatePaymentAmountInETH(\\n        uint32 callbackGasLimit,\\n        uint32 gasExceptCallback,\\n        uint32 fulfillmentFlatFeeEthPPM,\\n        uint256 weiPerUnitGas,\\n        uint32 groupSize\\n    ) public view override(IAdapter) returns (uint256) {\\n        // we estimate 1.5x the cost of the fulfillment calldata\\n        uint256 estimatedFulfillmentL1CostWei =\\n            ChainHelper.getTxL1GasFees(ChainHelper.getFulfillmentTxL1GasUsed(groupSize)) * 3 / 2;\\n        uint256 paymentNoFee = weiPerUnitGas * (gasExceptCallback + callbackGasLimit) + estimatedFulfillmentL1CostWei;\\n        return (paymentNoFee + 1e12 * uint256(fulfillmentFlatFeeEthPPM));\\n    }\\n\\n    // =============\\n    // Internal\\n    // =============\\n\\n    function _rewardRandomness(address[] memory participantMembers, uint256 payment, uint256 flatFee) internal {\\n        _cumulativeCommitterReward += _config.committerRewardPerSignature;\\n        _cumulativePartialSignatureReward += _config.rewardPerSignature * participantMembers.length;\\n\\n        address[] memory committer = new address[](1);\\n        committer[0] = msg.sender;\\n        _controller.addReward(committer, payment - flatFee, _config.committerRewardPerSignature);\\n        _controller.addReward(participantMembers, flatFee / participantMembers.length, _config.rewardPerSignature);\\n    }\\n\\n    function _fulfillCallback(bytes32 requestId, uint256 randomness, RequestDetail memory requestDetail)\\n        internal\\n        returns (bool success)\\n    {\\n        IBasicRandcastConsumerBase b;\\n        bytes memory resp;\\n        if (requestDetail.requestType == RequestType.Randomness) {\\n            resp = abi.encodeWithSelector(b.rawFulfillRandomness.selector, requestId, randomness);\\n        } else if (requestDetail.requestType == RequestType.RandomWords) {\\n            uint32 numWords = abi.decode(requestDetail.params, (uint32));\\n            uint256[] memory randomWords = new uint256[](numWords);\\n            for (uint256 i = 0; i < numWords; i++) {\\n                randomWords[i] = uint256(keccak256(abi.encode(randomness, i)));\\n            }\\n            resp = abi.encodeWithSelector(b.rawFulfillRandomWords.selector, requestId, randomWords);\\n        } else if (requestDetail.requestType == RequestType.Shuffling) {\\n            uint32 upper = abi.decode(requestDetail.params, (uint32));\\n            uint256[] memory shuffledArray = Utils.shuffle(upper, randomness);\\n            resp = abi.encodeWithSelector(b.rawFulfillShuffledArray.selector, requestId, shuffledArray);\\n        }\\n\\n        // Call with explicitly the amount of callback gas requested\\n        // Important to not let them exhaust the gas budget and avoid oracle payment.\\n        // Do not allow any non-view/non-pure coordinator functions to be called\\n        // during the consumers callback code via reentrancyLock.\\n        // Note that callWithExactGas will revert if we do not have sufficient gas\\n        // to give the callee their requested amount.\\n        _config.reentrancyLock = true;\\n        success = Utils.callWithExactGas(requestDetail.callbackGasLimit, requestDetail.callbackContract, resp);\\n        _config.reentrancyLock = false;\\n    }\\n\\n    function _freezePaymentBySubscription(\\n        Subscription storage sub,\\n        bytes32 requestId,\\n        uint32 groupSize,\\n        uint32 callbackGasLimit,\\n        uint256 callbackMaxGasPrice\\n    ) internal returns (uint256) {\\n        uint64 reqCount;\\n        if (_flatFeeConfig.isFlatFeePromotionEnabledPermanently) {\\n            reqCount = sub.reqCount;\\n        } else if (\\n            _flatFeeConfig\\n                //solhint-disable-next-line not-rely-on-time\\n                .flatFeePromotionStartTimestamp <= block.timestamp\\n            //solhint-disable-next-line not-rely-on-time\\n            && block.timestamp <= _flatFeeConfig.flatFeePromotionEndTimestamp\\n        ) {\\n            if (sub.lastRequestTimestamp < _flatFeeConfig.flatFeePromotionStartTimestamp) {\\n                reqCount = 1;\\n            } else {\\n                reqCount = sub.reqCountInCurrentPeriod + 1;\\n            }\\n        }\\n\\n        // Estimate upper cost of this fulfillment.\\n        uint256 payment = estimatePaymentAmountInETH(\\n            callbackGasLimit,\\n            _config.gasExceptCallback + RANDOMNESS_REWARD_GAS * groupSize\\n                + VERIFICATION_GAS_OVER_MINIMUM_THRESHOLD * (groupSize - DEFAULT_MINIMUM_THRESHOLD),\\n            sub.freeRequestCount > 0\\n                ? 0\\n                : (getFeeTier(reqCount) * _flatFeeConfig.flatFeePromotionGlobalPercentage / 100),\\n            callbackMaxGasPrice,\\n            groupSize\\n        );\\n\\n        if (sub.balance - sub.inflightCost < payment) {\\n            revert InsufficientBalanceWhenRequest();\\n        }\\n\\n        sub.inflightCost += payment;\\n        sub.inflightPayments[requestId] = payment;\\n\\n        return payment;\\n    }\\n\\n    function _payBySubscription(\\n        Subscription storage sub,\\n        bytes32 requestId,\\n        uint256 partialSignersCount,\\n        uint256 startGas\\n    ) internal returns (uint256, uint256) {\\n        // Increment the req count for fee tier selection.\\n        sub.reqCount += 1;\\n        uint64 reqCount;\\n        if (_flatFeeConfig.isFlatFeePromotionEnabledPermanently) {\\n            reqCount = sub.reqCount;\\n        } else if (\\n            _flatFeeConfig\\n                //solhint-disable-next-line not-rely-on-time\\n                .flatFeePromotionStartTimestamp <= block.timestamp\\n            //solhint-disable-next-line not-rely-on-time\\n            && block.timestamp <= _flatFeeConfig.flatFeePromotionEndTimestamp\\n        ) {\\n            if (sub.lastRequestTimestamp < _flatFeeConfig.flatFeePromotionStartTimestamp) {\\n                sub.reqCountInCurrentPeriod = 1;\\n            } else {\\n                sub.reqCountInCurrentPeriod += 1;\\n            }\\n            reqCount = sub.reqCountInCurrentPeriod;\\n        }\\n\\n        //solhint-disable-next-line not-rely-on-time\\n        sub.lastRequestTimestamp = block.timestamp;\\n\\n        uint256 flatFee;\\n        if (sub.freeRequestCount > 0) {\\n            sub.freeRequestCount -= 1;\\n        } else {\\n            // The flat eth fee is specified in millionths of eth, if _config.fulfillmentFlatFeeEthPPM = 1\\n            // 1 eth / 1e6 = 1e18 eth wei / 1e6 = 1e12 eth wei.\\n            flatFee = 1e12 * uint256(getFeeTier(reqCount)) * _flatFeeConfig.flatFeePromotionGlobalPercentage / 100;\\n        }\\n\\n        // We want to charge users exactly for how much gas they use in their callback.\\n        // The gasAfterPaymentCalculation is meant to cover these additional operations where we\\n        // decrement the subscription balance and increment the groups withdrawable balance.\\n        uint256 payment = _calculatePaymentAmountInETH(\\n            startGas,\\n            _config.gasAfterPaymentCalculation + RANDOMNESS_REWARD_GAS * partialSignersCount,\\n            flatFee,\\n            tx.gasprice\\n        );\\n\\n        if (sub.balance < payment) {\\n            revert InsufficientBalanceWhenFulfill();\\n        }\\n        sub.inflightCost -= sub.inflightPayments[requestId];\\n        delete sub.inflightPayments[requestId];\\n        sub.balance -= payment;\\n\\n        _cumulativeFlatFee += flatFee;\\n\\n        return (payment, flatFee);\\n    }\\n\\n    function _cancelSubscriptionHelper(uint64 subId, address to) internal nonReentrant {\\n        uint256 balance = _subscriptions[subId].balance;\\n        delete _subscriptions[subId].owner;\\n        emit SubscriptionCanceled(subId, to, balance);\\n        payable(to).transfer(balance);\\n    }\\n\\n    // Get the amount of gas used for fulfillment\\n    function _calculatePaymentAmountInETH(\\n        uint256 startGas,\\n        uint256 gasAfterPaymentCalculation,\\n        uint256 flatFee,\\n        uint256 weiPerUnitGas\\n    ) internal view returns (uint256) {\\n        uint256 paymentNoFee =\\n            weiPerUnitGas * (gasAfterPaymentCalculation + startGas - gasleft()) + ChainHelper.getCurrentTxL1GasFees();\\n        return paymentNoFee + flatFee;\\n    }\\n\\n    function _findGroupToAssignTask() internal view returns (uint256) {\\n        uint256[] memory validGroupIndices = _controller.getValidGroupIndices();\\n\\n        if (validGroupIndices.length == 0) {\\n            revert NoAvailableGroups();\\n        }\\n\\n        uint256 groupCount = _controller.getGroupCount();\\n\\n        uint256 currentAssignedGroupIndex = (_lastAssignedGroupIndex + 1) % groupCount;\\n\\n        while (!Utils.containElement(validGroupIndices, currentAssignedGroupIndex)) {\\n            currentAssignedGroupIndex = (currentAssignedGroupIndex + 1) % groupCount;\\n        }\\n\\n        return currentAssignedGroupIndex;\\n    }\\n\\n    function _verifySignature(\\n        uint256 groupIndex,\\n        uint256 seed,\\n        uint256 blockNum,\\n        uint256 signature,\\n        PartialSignature[] memory partialSignatures\\n    ) internal view returns (address[] memory participantMembers) {\\n        if (!BLS.isValid(signature)) {\\n            revert BLS.InvalidSignatureFormat();\\n        }\\n\\n        if (partialSignatures.length == 0) {\\n            revert BLS.EmptyPartialSignatures();\\n        }\\n\\n        IController.Group memory g = _controller.getGroup(groupIndex);\\n\\n        if (!Utils.containElement(g.committers, msg.sender)) {\\n            revert NotFromCommitter();\\n        }\\n\\n        bytes memory actualSeed = abi.encodePacked(seed, blockNum);\\n\\n        uint256[2] memory message = BLS.hashToPoint(actualSeed);\\n\\n        // verify tss-aggregation signature for randomness\\n        if (!BLS.verifySingle(BLS.decompress(signature), g.publicKey, message)) {\\n            revert BLS.InvalidSignature();\\n        }\\n\\n        // verify bls-aggregation signature for incentivizing worker list\\n        uint256[2][] memory partials = new uint256[2][](partialSignatures.length);\\n        uint256[4][] memory pubkeys = new uint256[4][](partialSignatures.length);\\n        participantMembers = new address[](partialSignatures.length);\\n        for (uint256 i = 0; i < partialSignatures.length; i++) {\\n            if (!BLS.isValid(partialSignatures[i].partialSignature)) {\\n                revert BLS.InvalidPartialSignatureFormat();\\n            }\\n            partials[i] = BLS.decompress(partialSignatures[i].partialSignature);\\n            pubkeys[i] = g.members[partialSignatures[i].index].partialPublicKey;\\n            participantMembers[i] = g.members[partialSignatures[i].index].nodeIdAddress;\\n        }\\n        if (!BLS.verifyPartials(partials, pubkeys, message)) {\\n            revert BLS.InvalidPartialSignatures();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAdapter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {IRequestTypeBase} from \\\"./IRequestTypeBase.sol\\\";\\n\\ninterface IAdapter is IRequestTypeBase {\\n    struct PartialSignature {\\n        uint256 index;\\n        uint256 partialSignature;\\n    }\\n\\n    struct RandomnessRequestParams {\\n        RequestType requestType;\\n        bytes params;\\n        uint64 subId;\\n        uint256 seed;\\n        uint16 requestConfirmations;\\n        uint32 callbackGasLimit;\\n        uint256 callbackMaxGasPrice;\\n    }\\n\\n    struct RequestDetail {\\n        uint64 subId;\\n        uint32 groupIndex;\\n        RequestType requestType;\\n        bytes params;\\n        address callbackContract;\\n        uint256 seed;\\n        uint16 requestConfirmations;\\n        uint32 callbackGasLimit;\\n        uint256 callbackMaxGasPrice;\\n        uint256 blockNum;\\n    }\\n\\n    // controller transaction\\n    function nodeWithdrawETH(address recipient, uint256 ethAmount) external;\\n\\n    // consumer contract transaction\\n    function requestRandomness(RandomnessRequestParams calldata params) external returns (bytes32);\\n\\n    function fulfillRandomness(\\n        uint32 groupIndex,\\n        bytes32 requestId,\\n        uint256 signature,\\n        RequestDetail calldata requestDetail,\\n        PartialSignature[] calldata partialSignatures\\n    ) external;\\n\\n    // user transaction\\n    function createSubscription() external returns (uint64);\\n\\n    function addConsumer(uint64 subId, address consumer) external;\\n\\n    function fundSubscription(uint64 subId) external payable;\\n\\n    function setReferral(uint64 subId, uint64 referralSubId) external;\\n\\n    function cancelSubscription(uint64 subId, address to) external;\\n\\n    function removeConsumer(uint64 subId, address consumer) external;\\n\\n    // delete the request that cannot be fulfilled, triggered by user themselves\\n    function cancelOvertimeRequest(bytes32 requestId, RequestDetail calldata requestDetail) external;\\n\\n    // view\\n    function getLastSubscription(address consumer) external view returns (uint64);\\n\\n    function getSubscription(uint64 subId)\\n        external\\n        view\\n        returns (\\n            address owner,\\n            address[] memory consumers,\\n            uint256 balance,\\n            uint256 inflightCost,\\n            uint64 reqCount,\\n            uint64 freeRequestCount,\\n            uint64 referralSubId,\\n            uint64 reqCountInCurrentPeriod,\\n            uint256 lastRequestTimestamp\\n        );\\n\\n    function getPendingRequestCommitment(bytes32 requestId) external view returns (bytes32);\\n\\n    function getLastAssignedGroupIndex() external view returns (uint256);\\n\\n    function getLastRandomness() external view returns (uint256);\\n\\n    function getRandomnessCount() external view returns (uint256);\\n\\n    function getCurrentSubId() external view returns (uint64);\\n\\n    function getCumulativeData() external view returns (uint256, uint256, uint256);\\n\\n    function getController() external view returns (address);\\n\\n    function getAdapterConfig()\\n        external\\n        view\\n        returns (\\n            uint16 minimumRequestConfirmations,\\n            uint32 maxGasLimit,\\n            uint32 gasAfterPaymentCalculation,\\n            uint32 gasExceptCallback,\\n            uint256 signatureTaskExclusiveWindow,\\n            uint256 rewardPerSignature,\\n            uint256 committerRewardPerSignature\\n        );\\n\\n    function getFlatFeeConfig()\\n        external\\n        view\\n        returns (\\n            uint32 fulfillmentFlatFeeLinkPPMTier1,\\n            uint32 fulfillmentFlatFeeLinkPPMTier2,\\n            uint32 fulfillmentFlatFeeLinkPPMTier3,\\n            uint32 fulfillmentFlatFeeLinkPPMTier4,\\n            uint32 fulfillmentFlatFeeLinkPPMTier5,\\n            uint24 reqsForTier2,\\n            uint24 reqsForTier3,\\n            uint24 reqsForTier4,\\n            uint24 reqsForTier5,\\n            uint16 flatFeePromotionGlobalPercentage,\\n            bool isFlatFeePromotionEnabledPermanently,\\n            uint256 flatFeePromotionStartTimestamp,\\n            uint256 flatFeePromotionEndTimestamp\\n        );\\n\\n    function getReferralConfig()\\n        external\\n        view\\n        returns (bool isReferralEnabled, uint16 freeRequestCountForReferrer, uint16 freeRequestCountForReferee);\\n\\n    /*\\n     * @notice Compute fee based on the request count\\n     * @param reqCount number of requests\\n     * @return feePPM fee in ARPA PPM\\n     */\\n    function getFeeTier(uint64 reqCount) external view returns (uint32);\\n\\n    // Estimate the amount of gas used for fulfillment\\n    function estimatePaymentAmountInETH(\\n        uint32 callbackGasLimit,\\n        uint32 gasExceptCallback,\\n        uint32 fulfillmentFlatFeeEthPPM,\\n        uint256 weiPerUnitGas,\\n        uint32 groupSize\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IAdapterOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IAdapterOwner {\\n    struct AdapterConfig {\\n        // Minimum number of blocks a request must wait before being fulfilled.\\n        uint16 minimumRequestConfirmations;\\n        // Maximum gas limit for fulfillRandomness requests.\\n        uint32 maxGasLimit;\\n        // Reentrancy protection.\\n        bool reentrancyLock;\\n        // Gas to cover group payment after we calculate the payment.\\n        // We make it configurable in case those operations are repriced.\\n        uint32 gasAfterPaymentCalculation;\\n        // Gas except callback during fulfillment of randomness. Only used for estimating inflight cost.\\n        uint32 gasExceptCallback;\\n        // The assigned group is exclusive for fulfilling the task within this block window\\n        uint256 signatureTaskExclusiveWindow;\\n        // reward per signature for every participating node\\n        uint256 rewardPerSignature;\\n        // reward per signature for the committer\\n        uint256 committerRewardPerSignature;\\n    }\\n\\n    struct FeeConfig {\\n        // Flat fee charged per fulfillment in millionths of arpa\\n        uint32 fulfillmentFlatFeeEthPPMTier1;\\n        uint32 fulfillmentFlatFeeEthPPMTier2;\\n        uint32 fulfillmentFlatFeeEthPPMTier3;\\n        uint32 fulfillmentFlatFeeEthPPMTier4;\\n        uint32 fulfillmentFlatFeeEthPPMTier5;\\n        uint24 reqsForTier2;\\n        uint24 reqsForTier3;\\n        uint24 reqsForTier4;\\n        uint24 reqsForTier5;\\n    }\\n\\n    struct FlatFeeConfig {\\n        FeeConfig config;\\n        uint16 flatFeePromotionGlobalPercentage;\\n        bool isFlatFeePromotionEnabledPermanently;\\n        uint256 flatFeePromotionStartTimestamp;\\n        uint256 flatFeePromotionEndTimestamp;\\n    }\\n\\n    struct ReferralConfig {\\n        bool isReferralEnabled;\\n        uint16 freeRequestCountForReferrer;\\n        uint16 freeRequestCountForReferee;\\n    }\\n\\n    /**\\n     * @notice Sets the configuration of the adapter\\n     * @param minimumRequestConfirmations global min for request confirmations\\n     * @param maxGasLimit global max for request gas limit\\n     * @param gasAfterPaymentCalculation gas used in doing accounting after completing the gas measurement\\n     * @param signatureTaskExclusiveWindow window in which a signature task is exclusive to the assigned group\\n     * @param rewardPerSignature reward per signature for every participating node\\n     * @param committerRewardPerSignature reward per signature for the committer\\n     */\\n    function setAdapterConfig(\\n        uint16 minimumRequestConfirmations,\\n        uint32 maxGasLimit,\\n        uint32 gasAfterPaymentCalculation,\\n        uint32 gasExceptCallback,\\n        uint256 signatureTaskExclusiveWindow,\\n        uint256 rewardPerSignature,\\n        uint256 committerRewardPerSignature\\n    ) external;\\n\\n    /**\\n     * @notice Sets the flat fee configuration of the adapter\\n     * @param flatFeeConfig flat fee tier configuration\\n     * @param flatFeePromotionGlobalPercentage global percentage of flat fee promotion\\n     * @param isFlatFeePromotionEnabledPermanently whether flat fee promotion is enabled permanently\\n     * @param flatFeePromotionStartTimestamp flat fee promotion start timestamp\\n     * @param flatFeePromotionEndTimestamp flat fee promotion end timestamp\\n     */\\n    function setFlatFeeConfig(\\n        FeeConfig memory flatFeeConfig,\\n        uint16 flatFeePromotionGlobalPercentage,\\n        bool isFlatFeePromotionEnabledPermanently,\\n        uint256 flatFeePromotionStartTimestamp,\\n        uint256 flatFeePromotionEndTimestamp\\n    ) external;\\n\\n    /**\\n     * @notice Sets the referral configuration of the adapter\\n     * @param isReferralEnabled whether referral is enabled\\n     * @param freeRequestCountForReferrer free request count for referrer\\n     * @param freeRequestCountForReferee free request count for referee\\n     */\\n    function setReferralConfig(\\n        bool isReferralEnabled,\\n        uint16 freeRequestCountForReferrer,\\n        uint16 freeRequestCountForReferee\\n    ) external;\\n\\n    /**\\n     * @notice Sets free request count for subscriptions\\n     * @param subIds subscription ids\\n     * @param freeRequestCounts free request count for each subscription\\n     */\\n    function setFreeRequestCount(uint64[] memory subIds, uint64[] memory freeRequestCounts) external;\\n\\n    /**\\n     * @notice Owner cancel subscription, sends remaining eth directly to the subscription owner\\n     * @param subId subscription id\\n     * @dev notably can be called even if there are pending requests\\n     */\\n    function ownerCancelSubscription(uint64 subId) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IController {\\n    struct Group {\\n        uint256 index;\\n        uint256 epoch;\\n        uint256 size;\\n        uint256 threshold;\\n        Member[] members;\\n        address[] committers;\\n        CommitCache[] commitCacheList;\\n        bool isStrictlyMajorityConsensusReached;\\n        uint256[4] publicKey;\\n    }\\n\\n    struct Member {\\n        address nodeIdAddress;\\n        uint256[4] partialPublicKey;\\n    }\\n\\n    struct CommitResult {\\n        uint256 groupEpoch;\\n        uint256[4] publicKey;\\n        address[] disqualifiedNodes;\\n    }\\n\\n    struct CommitCache {\\n        address[] nodeIdAddress;\\n        CommitResult commitResult;\\n    }\\n\\n    struct Node {\\n        address idAddress;\\n        bytes dkgPublicKey;\\n        bool state;\\n        uint256 pendingUntilBlock;\\n    }\\n\\n    struct CommitDkgParams {\\n        uint256 groupIndex;\\n        uint256 groupEpoch;\\n        bytes publicKey;\\n        bytes partialPublicKey;\\n        address[] disqualifiedNodes;\\n    }\\n\\n    // node transaction\\n    function nodeRegister(bytes calldata dkgPublicKey) external;\\n\\n    function nodeActivate() external;\\n\\n    function nodeQuit() external;\\n\\n    function changeDkgPublicKey(bytes calldata dkgPublicKey) external;\\n\\n    function commitDkg(CommitDkgParams memory params) external;\\n\\n    function postProcessDkg(uint256 groupIndex, uint256 groupEpoch) external;\\n\\n    function nodeWithdraw(address recipient) external;\\n\\n    // adapter transaction\\n    function addReward(address[] memory nodes, uint256 ethAmount, uint256 arpaAmount) external;\\n\\n    function setLastOutput(uint256 lastOutput) external;\\n\\n    // view\\n    function getControllerConfig()\\n        external\\n        view\\n        returns (\\n            address stakingContractAddress,\\n            address adapterContractAddress,\\n            uint256 nodeStakingAmount,\\n            uint256 disqualifiedNodePenaltyAmount,\\n            uint256 defaultNumberOfCommitters,\\n            uint256 defaultDkgPhaseDuration,\\n            uint256 groupMaxCapacity,\\n            uint256 idealNumberOfGroups,\\n            uint256 pendingBlockAfterQuit,\\n            uint256 dkgPostProcessReward\\n        );\\n\\n    /// @notice Get list of all group indexes where group.isStrictlyMajorityConsensusReached == true\\n    /// @return uint256[] List of valid group indexes\\n    function getValidGroupIndices() external view returns (uint256[] memory);\\n\\n    function getGroupEpoch() external view returns (uint256);\\n\\n    function getGroupCount() external view returns (uint256);\\n\\n    function getGroup(uint256 index) external view returns (Group memory);\\n\\n    function getGroupThreshold(uint256 groupIndex) external view returns (uint256, uint256);\\n\\n    function getNode(address nodeAddress) external view returns (Node memory);\\n\\n    function getMember(uint256 groupIndex, uint256 memberIndex) external view returns (Member memory);\\n\\n    /// @notice Get the group index and member index of a given node.\\n    function getBelongingGroup(address nodeAddress) external view returns (int256, int256);\\n\\n    function getCoordinator(uint256 groupIndex) external view returns (address);\\n\\n    function getNodeWithdrawableTokens(address nodeAddress) external view returns (uint256, uint256);\\n\\n    function getLastOutput() external view returns (uint256);\\n\\n    /// @notice Check to see if a group has a partial public key registered for a given node.\\n    /// @return bool True if the node has a partial public key registered for the group.\\n    function isPartialKeyRegistered(uint256 groupIndex, address nodeIdAddress) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IBasicRandcastConsumerBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IBasicRandcastConsumerBase {\\n    function rawFulfillRandomness(bytes32 requestId, uint256 randomness) external;\\n\\n    function rawFulfillRandomWords(bytes32 requestId, uint256[] memory randomWords) external;\\n\\n    function rawFulfillShuffledArray(bytes32 requestId, uint256[] memory shuffledArray) external;\\n}\\n\"\r\n    },\r\n    \"src/utils/RequestIdBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ncontract RequestIdBase {\\n    function _makeRandcastInputSeed(uint256 userSeed, uint64 subId, address requester, uint256 nonce)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(keccak256(abi.encode(block.chainid, userSeed, subId, requester, nonce)));\\n    }\\n\\n    function _makeRequestId(uint256 inputSeed) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(inputSeed));\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/BLS.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL 3.0\\npragma solidity ^0.8.18;\\n\\nimport {BN256G2} from \\\"./BN256G2.sol\\\";\\n\\n/**\\n * @title BLS operations on bn254 curve\\n * @author ARPA-Network adapted from https://github.com/ChihChengLiang/bls_solidity_python\\n * @dev Homepage: https://github.com/ARPA-Network/BLS-TSS-Network\\n *      Signature and Point hashed to G1 are represented by affine coordinate in big-endian order, deserialized from compressed format.\\n *      Public key is represented and serialized by affine coordinate Q-x-re(x0), Q-x-im(x1), Q-y-re(y0), Q-y-im(y1) in big-endian order.\\n */\\nlibrary BLS {\\n    // Field order\\n    uint256 public constant N = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Negated genarator of G2\\n    uint256 public constant N_G2_X1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 public constant N_G2_X0 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 public constant N_G2_Y1 = 17805874995975841540914202342111839520379459829704422454583296818431106115052;\\n    uint256 public constant N_G2_Y0 = 13392588948715843804641432497768002650278120570034223513918757245338268106653;\\n\\n    uint256 public constant FIELD_MASK = 0x3fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    error MustNotBeInfinity();\\n    error InvalidPublicKeyEncoding();\\n    error InvalidSignatureFormat();\\n    error InvalidSignature();\\n    error InvalidPartialSignatureFormat();\\n    error InvalidPartialSignatures();\\n    error EmptyPartialSignatures();\\n    error InvalidPublicKey();\\n    error InvalidPartialPublicKey();\\n\\n    function verifySingle(uint256[2] memory signature, uint256[4] memory pubkey, uint256[2] memory message)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256[12] memory input = [\\n            signature[0],\\n            signature[1],\\n            N_G2_X1,\\n            N_G2_X0,\\n            N_G2_Y1,\\n            N_G2_Y0,\\n            message[0],\\n            message[1],\\n            pubkey[1],\\n            pubkey[0],\\n            pubkey[3],\\n            pubkey[2]\\n        ];\\n        uint256[1] memory out;\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, input, 384, out, 0x20)\\n            switch success\\n            case 0 { invalid() }\\n        }\\n        require(success, \\\"\\\");\\n        return out[0] != 0;\\n    }\\n\\n    function verifyPartials(uint256[2][] memory partials, uint256[4][] memory pubkeys, uint256[2] memory message)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        uint256[2] memory aggregatedSignature;\\n        uint256[4] memory aggregatedPublicKey;\\n        for (uint256 i = 0; i < partials.length; i++) {\\n            aggregatedSignature = addPoints(aggregatedSignature, partials[i]);\\n            aggregatedPublicKey = BN256G2.ecTwistAdd(aggregatedPublicKey, pubkeys[i]);\\n        }\\n\\n        uint256[12] memory input = [\\n            aggregatedSignature[0],\\n            aggregatedSignature[1],\\n            N_G2_X1,\\n            N_G2_X0,\\n            N_G2_Y1,\\n            N_G2_Y0,\\n            message[0],\\n            message[1],\\n            aggregatedPublicKey[1],\\n            aggregatedPublicKey[0],\\n            aggregatedPublicKey[3],\\n            aggregatedPublicKey[2]\\n        ];\\n        uint256[1] memory out;\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, input, 384, out, 0x20)\\n            switch success\\n            case 0 { invalid() }\\n        }\\n        require(success, \\\"\\\");\\n        return out[0] != 0;\\n    }\\n\\n    // TODO a simple hash and increment implementation, can be improved later\\n    function hashToPoint(bytes memory data) public view returns (uint256[2] memory p) {\\n        bool found;\\n        bytes32 candidateHash = keccak256(data);\\n        while (true) {\\n            (p, found) = mapToPoint(candidateHash);\\n            if (found) {\\n                break;\\n            }\\n            candidateHash = keccak256(bytes.concat(candidateHash));\\n        }\\n    }\\n\\n    //  we take the y-coordinate as the lexicographically largest of the two associated with the encoded x-coordinate\\n    function mapToPoint(bytes32 _x) internal view returns (uint256[2] memory p, bool found) {\\n        uint256 y;\\n        uint256 x = uint256(_x) % N;\\n        (y, found) = deriveYOnG1(x);\\n        if (found) {\\n            p[0] = x;\\n            p[1] = y > N / 2 ? N - y : y;\\n        }\\n    }\\n\\n    function deriveYOnG1(uint256 x) internal view returns (uint256, bool) {\\n        uint256 y;\\n        y = mulmod(x, x, N);\\n        y = mulmod(y, x, N);\\n        y = addmod(y, 3, N);\\n        return sqrt(y);\\n    }\\n\\n    function isValidPublicKey(uint256[4] memory publicKey) public pure returns (bool) {\\n        if ((publicKey[0] >= N) || (publicKey[1] >= N) || (publicKey[2] >= N || (publicKey[3] >= N))) {\\n            return false;\\n        } else {\\n            return isOnCurveG2(publicKey);\\n        }\\n    }\\n\\n    function fromBytesPublicKey(bytes memory point) public pure returns (uint256[4] memory pubkey) {\\n        if (point.length != 128) {\\n            revert InvalidPublicKeyEncoding();\\n        }\\n        uint256 x0;\\n        uint256 x1;\\n        uint256 y0;\\n        uint256 y1;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // look the first 32 bytes of a bytes struct is its length\\n            x0 := mload(add(point, 32))\\n            x1 := mload(add(point, 64))\\n            y0 := mload(add(point, 96))\\n            y1 := mload(add(point, 128))\\n        }\\n        pubkey = [x0, x1, y0, y1];\\n    }\\n\\n    function decompress(uint256 compressedSignature) public view returns (uint256[2] memory uncompressed) {\\n        uint256 x = compressedSignature & FIELD_MASK;\\n        // The most significant bit, when set, indicates that the y-coordinate of the point\\n        // is the lexicographically largest of the two associated values.\\n        // The second-most significant bit indicates that the point is at infinity. If this bit is set,\\n        // the remaining bits of the group element's encoding should be set to zero.\\n        // We don't accept infinity as valid signature.\\n        uint256 decision = compressedSignature >> 254;\\n        if (decision & 1 == 1) {\\n            revert MustNotBeInfinity();\\n        }\\n        uint256 y;\\n        (y,) = deriveYOnG1(x);\\n\\n        // If the following two conditions or their negative forms are not met at the same time, get the negative y.\\n        // 1. The most significant bit of compressed signature is set\\n        // 2. The y we recovered first is the lexicographically largest\\n        if (((decision >> 1) ^ (y > N / 2 ? 1 : 0)) == 1) {\\n            y = N - y;\\n        }\\n        return [x, y];\\n    }\\n\\n    function isValid(uint256 compressedSignature) public view returns (bool) {\\n        uint256 x = compressedSignature & FIELD_MASK;\\n        if (x >= N) {\\n            return false;\\n        } else if (x == 0) {\\n            return false;\\n        }\\n        return isOnCurveG1(x);\\n    }\\n\\n    function isOnCurveG1(uint256[2] memory point) internal pure returns (bool _isOnCurve) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let t0 := mload(point)\\n            let t1 := mload(add(point, 32))\\n            let t2 := mulmod(t0, t0, N)\\n            t2 := mulmod(t2, t0, N)\\n            t2 := addmod(t2, 3, N)\\n            t1 := mulmod(t1, t1, N)\\n            _isOnCurve := eq(t1, t2)\\n        }\\n    }\\n\\n    function isOnCurveG1(uint256 x) internal view returns (bool _isOnCurve) {\\n        bool callSuccess;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let t0 := x\\n            let t1 := mulmod(t0, t0, N)\\n            t1 := mulmod(t1, t0, N)\\n            // x ^ 3 + b\\n            t1 := addmod(t1, 3, N)\\n\\n            let freemem := mload(0x40)\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n            mstore(add(freemem, 0x60), t1)\\n            // (N - 1) / 2 = 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3\\n            mstore(add(freemem, 0x80), 0x183227397098d014dc2822db40c0ac2ecbc0b548b438e5469e10460b6c3e7ea3)\\n            // N = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\\n            mstore(add(freemem, 0xA0), 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)\\n            callSuccess := staticcall(sub(gas(), 2000), 5, freemem, 0xC0, freemem, 0x20)\\n            _isOnCurve := eq(1, mload(freemem))\\n        }\\n    }\\n\\n    function isOnCurveG2(uint256[4] memory point) internal pure returns (bool _isOnCurve) {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // x0, x1\\n            let t0 := mload(point)\\n            let t1 := mload(add(point, 32))\\n            // x0 ^ 2\\n            let t2 := mulmod(t0, t0, N)\\n            // x1 ^ 2\\n            let t3 := mulmod(t1, t1, N)\\n            // 3 * x0 ^ 2\\n            let t4 := add(add(t2, t2), t2)\\n            // 3 * x1 ^ 2\\n            let t5 := addmod(add(t3, t3), t3, N)\\n            // x0 * (x0 ^ 2 - 3 * x1 ^ 2)\\n            t2 := mulmod(add(t2, sub(N, t5)), t0, N)\\n            // x1 * (3 * x0 ^ 2 - x1 ^ 2)\\n            t3 := mulmod(add(t4, sub(N, t3)), t1, N)\\n\\n            // x ^ 3 + b\\n            t0 := addmod(t2, 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5, N)\\n            t1 := addmod(t3, 0x009713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2, N)\\n\\n            // y0, y1\\n            t2 := mload(add(point, 64))\\n            t3 := mload(add(point, 96))\\n            // y ^ 2\\n            t4 := mulmod(addmod(t2, t3, N), addmod(t2, sub(N, t3), N), N)\\n            t3 := mulmod(shl(1, t2), t3, N)\\n\\n            // y ^ 2 == x ^ 3 + b\\n            _isOnCurve := and(eq(t0, t4), eq(t1, t3))\\n        }\\n    }\\n\\n    function sqrt(uint256 xx) internal view returns (uint256 x, bool hasRoot) {\\n        bool callSuccess;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freemem := mload(0x40)\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n            mstore(add(freemem, 0x60), xx)\\n            // this is enabled by N % 4 = 3 and Fermat's little theorem\\n            // (N + 1) / 4 = 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52\\n            mstore(add(freemem, 0x80), 0xc19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52)\\n            // N = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47\\n            mstore(add(freemem, 0xA0), 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47)\\n            callSuccess := staticcall(sub(gas(), 2000), 5, freemem, 0xC0, freemem, 0x20)\\n            x := mload(freemem)\\n            hasRoot := eq(xx, mulmod(x, x, N))\\n        }\\n        require(callSuccess, \\\"BLS: sqrt modexp call failed\\\");\\n    }\\n\\n    /// @notice Add two points in G1\\n    function addPoints(uint256[2] memory p1, uint256[2] memory p2) internal view returns (uint256[2] memory ret) {\\n        uint256[4] memory input;\\n        input[0] = p1[0];\\n        input[1] = p1[1];\\n        input[2] = p2[0];\\n        input[3] = p2[1];\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, ret, 0x60)\\n        }\\n        // solhint-disable-next-line reason-string\\n        require(success);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/Utils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\n// 5k is plenty for an EXTCODESIZE call (2600) + warm CALL (100)\\n// and some arithmetic operations.\\nuint256 constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n\\nfunction containElement(uint256[] memory arr, uint256 element) pure returns (bool) {\\n    for (uint256 i = 0; i < arr.length; i++) {\\n        if (arr[i] == element) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\nfunction containElement(address[] memory arr, address element) pure returns (bool) {\\n    for (uint256 i = 0; i < arr.length; i++) {\\n        if (arr[i] == element) {\\n            return true;\\n        }\\n    }\\n    return false;\\n}\\n\\n/**\\n * @dev returns the minimum threshold for a group of size groupSize\\n */\\nfunction minimumThreshold(uint256 groupSize) pure returns (uint256) {\\n    return groupSize / 2 + 1;\\n}\\n\\n/**\\n * @dev choose one random index from an array.\\n */\\nfunction pickRandomIndex(uint256 seed, uint256 length) pure returns (uint256) {\\n    return uint256(keccak256(abi.encodePacked(seed))) % length;\\n}\\n\\n/**\\n * @dev choose \\\"count\\\" random indices from \\\"indices\\\" array.\\n */\\nfunction pickRandomIndex(uint256 seed, uint256[] memory indices, uint256 count) pure returns (uint256[] memory) {\\n    uint256[] memory chosenIndices = new uint256[](count);\\n\\n    // Create copy of indices to avoid modifying original array.\\n    uint256[] memory remainingIndices = new uint256[](indices.length);\\n    for (uint256 i = 0; i < indices.length; i++) {\\n        remainingIndices[i] = indices[i];\\n    }\\n\\n    uint256 remainingCount = remainingIndices.length;\\n    for (uint256 i = 0; i < count; i++) {\\n        uint256 index = uint256(keccak256(abi.encodePacked(seed, i))) % remainingCount;\\n        chosenIndices[i] = remainingIndices[index];\\n        remainingIndices[index] = remainingIndices[remainingCount - 1];\\n        remainingCount--;\\n    }\\n    return chosenIndices;\\n}\\n\\n/**\\n * @dev iterates through list of members and remove disqualified nodes.\\n */\\nfunction getNonDisqualifiedMajorityMembers(address[] memory nodeAddresses, address[] memory disqualifiedNodes)\\n    pure\\n    returns (address[] memory)\\n{\\n    address[] memory majorityMembers = new address[](nodeAddresses.length);\\n    uint256 majorityMembersLength = 0;\\n    for (uint256 i = 0; i < nodeAddresses.length; i++) {\\n        if (!containElement(disqualifiedNodes, nodeAddresses[i])) {\\n            majorityMembers[majorityMembersLength] = nodeAddresses[i];\\n            majorityMembersLength++;\\n        }\\n    }\\n\\n    // remove trailing zero addresses\\n    return trimTrailingElements(majorityMembers, majorityMembersLength);\\n}\\n\\nfunction trimTrailingElements(uint256[] memory arr, uint256 newLength) pure returns (uint256[] memory) {\\n    uint256[] memory output = new uint256[](newLength);\\n    for (uint256 i = 0; i < newLength; i++) {\\n        output[i] = arr[i];\\n    }\\n    return output;\\n}\\n\\nfunction trimTrailingElements(address[] memory arr, uint256 newLength) pure returns (address[] memory) {\\n    address[] memory output = new address[](newLength);\\n    for (uint256 i = 0; i < newLength; i++) {\\n        output[i] = arr[i];\\n    }\\n    return output;\\n}\\n\\n/**\\n * @dev calls target address with exactly gasAmount gas and data as calldata\\n * or reverts if at least gasAmount gas is not available.\\n */\\nfunction callWithExactGas(uint256 gasAmount, address target, bytes memory data) returns (bool success) {\\n    // solhint-disable-next-line no-inline-assembly\\n    assembly {\\n        let g := gas()\\n        // Compute g -= GAS_FOR_CALL_EXACT_CHECK and check for underflow\\n        // The gas actually passed to the callee is min(gasAmount, 63//64*gas available).\\n        // We want to ensure that we revert if gasAmount >  63//64*gas available\\n        // as we do not want to provide them with less, however that check itself costs\\n        // gas.  GAS_FOR_CALL_EXACT_CHECK ensures we have at least enough gas to be able\\n        // to revert if gasAmount >  63//64*gas available.\\n        if lt(g, GAS_FOR_CALL_EXACT_CHECK) { revert(0, 0) }\\n        g := sub(g, GAS_FOR_CALL_EXACT_CHECK)\\n        // if g - g//64 <= gasAmount, revert\\n        // (we subtract g//64 because of EIP-150)\\n        if iszero(gt(sub(g, div(g, 64)), gasAmount)) { revert(0, 0) }\\n        // solidity calls check that a contract actually exists at the destination, so we do the same\\n        if iszero(extcodesize(target)) { revert(0, 0) }\\n        // call and return whether we succeeded. ignore return data\\n        // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n        success := call(gasAmount, target, 0, add(data, 0x20), mload(data), 0, 0)\\n    }\\n    return success;\\n}\\n\\nfunction shuffle(uint256 upper, uint256 randomness) pure returns (uint256[] memory) {\\n    uint256[] memory arr = new uint256[](upper);\\n    for (uint256 k = 0; k < upper; k++) {\\n        arr[k] = k;\\n    }\\n    uint256 i = arr.length;\\n    uint256 j;\\n    uint256 t;\\n    while (--i > 0) {\\n        j = randomness % i;\\n        randomness = uint256(keccak256(abi.encode(randomness)));\\n        t = arr[i];\\n        arr[i] = arr[j];\\n        arr[j] = t;\\n    }\\n    return arr;\\n}\\n\"\r\n    },\r\n    \"src/libraries/ChainHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\nimport {IOPGasPriceOracle} from \\\"../interfaces/IOPGasPriceOracle.sol\\\";\\n\\nlibrary ChainHelper {\\n    address public constant OP_GAS_PRICE_ORACLE_ADDR = address(0x420000000000000000000000000000000000000F);\\n    uint256 public constant OP_MAINNET_CHAIN_ID = 10;\\n    uint256 public constant OP_GOERLI_TESTNET_CHAIN_ID = 420;\\n    uint256 public constant OP_DEVNET_L1_CHAIN_ID = 900;\\n    uint256 public constant OP_DEVNET_L2_CHAIN_ID = 901;\\n    uint32 public constant OP_BASIC_FULFILLMENT_L1_GAS_USED = 5016;\\n    uint32 public constant OP_FULFILLMENT_GAS_PER_PARTICIPANT = 652;\\n    uint256 public constant OP_DIVISOR_DECIMALS = 6;\\n\\n    function getBlockTime() public view returns (uint256) {\\n        uint256 chainId = block.chainid;\\n        if (chainId == OP_MAINNET_CHAIN_ID || chainId == OP_GOERLI_TESTNET_CHAIN_ID || chainId == OP_DEVNET_L2_CHAIN_ID)\\n        {\\n            return 2;\\n        } else if (chainId == OP_DEVNET_L1_CHAIN_ID) {\\n            return 3;\\n        }\\n        return 12;\\n    }\\n\\n    function getCurrentTxL1GasFees() public view returns (uint256) {\\n        uint256 chainId = block.chainid;\\n        if (chainId == OP_MAINNET_CHAIN_ID || chainId == OP_GOERLI_TESTNET_CHAIN_ID || chainId == OP_DEVNET_L2_CHAIN_ID)\\n        {\\n            return IOPGasPriceOracle(OP_GAS_PRICE_ORACLE_ADDR).getL1Fee(msg.data);\\n        }\\n        return 0;\\n    }\\n\\n    function getTxL1GasFees(uint256 l1GasUsed) public view returns (uint256) {\\n        uint256 chainId = block.chainid;\\n        if (chainId == OP_MAINNET_CHAIN_ID || chainId == OP_GOERLI_TESTNET_CHAIN_ID || chainId == OP_DEVNET_L2_CHAIN_ID)\\n        {\\n            uint256 l1Fee = l1GasUsed * IOPGasPriceOracle(OP_GAS_PRICE_ORACLE_ADDR).l1BaseFee();\\n            uint256 divisor = 10 ** OP_DIVISOR_DECIMALS;\\n            uint256 unscaled = l1Fee * IOPGasPriceOracle(OP_GAS_PRICE_ORACLE_ADDR).scalar();\\n            return unscaled / divisor;\\n        }\\n        return 0;\\n    }\\n\\n    function getFulfillmentTxL1GasUsed(uint32 groupSize) public view returns (uint256) {\\n        uint256 chainId = block.chainid;\\n        if (chainId == OP_MAINNET_CHAIN_ID || chainId == OP_GOERLI_TESTNET_CHAIN_ID || chainId == OP_DEVNET_L2_CHAIN_ID)\\n        {\\n            return OP_BASIC_FULFILLMENT_L1_GAS_USED + groupSize * OP_FULFILLMENT_GAS_PER_PARTICIPANT;\\n        }\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            _functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function _functionDelegateCall(address target, bytes memory data) private returns (bytes memory) {\\n        require(AddressUpgradeable.isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return AddressUpgradeable.verifyCallResult(success, returndata, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IRequestTypeBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IRequestTypeBase {\\n    enum RequestType {\\n        Randomness,\\n        RandomWords,\\n        Shuffling\\n    }\\n}\\n\"\r\n    },\r\n    \"src/libraries/BN256G2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL 3.0\\npragma solidity ^0.8.18;\\n\\n/**\\n * @title Elliptic curve operations on twist points for alt_bn128\\n * @author ARPA-Network adapted from https://github.com/musalbas/solidity-BN256G2\\n * @dev Homepage: https://github.com/ARPA-Network/BLS-TSS-Network\\n */\\n\\nlibrary BN256G2 {\\n    uint256 public constant FIELD_MODULUS = 0x30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47;\\n    uint256 public constant TWISTBX = 0x2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5;\\n    uint256 public constant TWISTBY = 0x9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2;\\n    uint256 public constant PTXX = 0;\\n    uint256 public constant PTXY = 1;\\n    uint256 public constant PTYX = 2;\\n    uint256 public constant PTYY = 3;\\n    uint256 public constant PTZX = 4;\\n    uint256 public constant PTZY = 5;\\n\\n    function ecTwistAdd(uint256[4] memory pt1, uint256[4] memory pt2) internal view returns (uint256[4] memory pt) {\\n        (uint256 xx, uint256 xy, uint256 yx, uint256 yy) =\\n            ecTwistAdd(pt1[0], pt1[1], pt1[2], pt1[3], pt2[0], pt2[1], pt2[2], pt2[3]);\\n        pt = [xx, xy, yx, yy];\\n    }\\n\\n    /**\\n     * @notice Add two twist points\\n     * @param pt1xx Coefficient 1 of x on point 1\\n     * @param pt1xy Coefficient 2 of x on point 1\\n     * @param pt1yx Coefficient 1 of y on point 1\\n     * @param pt1yy Coefficient 2 of y on point 1\\n     * @param pt2xx Coefficient 1 of x on point 2\\n     * @param pt2xy Coefficient 2 of x on point 2\\n     * @param pt2yx Coefficient 1 of y on point 2\\n     * @param pt2yy Coefficient 2 of y on point 2\\n     * @return (pt3xx, pt3xy, pt3yx, pt3yy)\\n     */\\n    function ecTwistAdd(\\n        uint256 pt1xx,\\n        uint256 pt1xy,\\n        uint256 pt1yx,\\n        uint256 pt1yy,\\n        uint256 pt2xx,\\n        uint256 pt2xy,\\n        uint256 pt2yx,\\n        uint256 pt2yy\\n    ) internal view returns (uint256, uint256, uint256, uint256) {\\n        if (pt1xx == 0 && pt1xy == 0 && pt1yx == 0 && pt1yy == 0) {\\n            if (!(pt2xx == 0 && pt2xy == 0 && pt2yx == 0 && pt2yy == 0)) {\\n                assert(isOnCurve(pt2xx, pt2xy, pt2yx, pt2yy));\\n            }\\n            return (pt2xx, pt2xy, pt2yx, pt2yy);\\n        } else if (pt2xx == 0 && pt2xy == 0 && pt2yx == 0 && pt2yy == 0) {\\n            assert(isOnCurve(pt1xx, pt1xy, pt1yx, pt1yy));\\n            return (pt1xx, pt1xy, pt1yx, pt1yy);\\n        }\\n\\n        assert(isOnCurve(pt1xx, pt1xy, pt1yx, pt1yy));\\n        assert(isOnCurve(pt2xx, pt2xy, pt2yx, pt2yy));\\n\\n        uint256[6] memory pt1 = [pt1xx, pt1xy, pt1yx, pt1yy, 1, 0];\\n        uint256[6] memory pt2 = [pt2xx, pt2xy, pt2yx, pt2yy, 1, 0];\\n        uint256[6] memory pt3 = ecTwistAddJacobian(pt1, pt2);\\n\\n        return fromJacobian(pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]);\\n    }\\n\\n    function submod(uint256 a, uint256 b, uint256 n) internal pure returns (uint256) {\\n        return addmod(a, n - b, n);\\n    }\\n\\n    function fq2Mul(uint256 xx, uint256 xy, uint256 yx, uint256 yy) internal pure returns (uint256, uint256) {\\n        return (\\n            submod(mulmod(xx, yx, FIELD_MODULUS), mulmod(xy, yy, FIELD_MODULUS), FIELD_MODULUS),\\n            addmod(mulmod(xx, yy, FIELD_MODULUS), mulmod(xy, yx, FIELD_MODULUS), FIELD_MODULUS)\\n        );\\n    }\\n\\n    function fq2Muc(uint256 xx, uint256 xy, uint256 c) internal pure returns (uint256, uint256) {\\n        return (mulmod(xx, c, FIELD_MODULUS), mulmod(xy, c, FIELD_MODULUS));\\n    }\\n\\n    function fq2Sub(uint256 xx, uint256 xy, uint256 yx, uint256 yy) internal pure returns (uint256 rx, uint256 ry) {\\n        return (submod(xx, yx, FIELD_MODULUS), submod(xy, yy, FIELD_MODULUS));\\n    }\\n\\n    function fq2Inv(uint256 x, uint256 y) internal view returns (uint256, uint256) {\\n        uint256 inv =\\n            modInv(addmod(mulmod(y, y, FIELD_MODULUS), mulmod(x, x, FIELD_MODULUS), FIELD_MODULUS), FIELD_MODULUS);\\n        return (mulmod(x, inv, FIELD_MODULUS), FIELD_MODULUS - mulmod(y, inv, FIELD_MODULUS));\\n    }\\n\\n    function isOnCurve(uint256 xx, uint256 xy, uint256 yx, uint256 yy) internal pure returns (bool) {\\n        uint256 yyx;\\n        uint256 yyy;\\n        uint256 xxxx;\\n        uint256 xxxy;\\n        (yyx, yyy) = fq2Mul(yx, yy, yx, yy);\\n        (xxxx, xxxy) = fq2Mul(xx, xy, xx, xy);\\n        (xxxx, xxxy) = fq2Mul(xxxx, xxxy, xx, xy);\\n        (yyx, yyy) = fq2Sub(yyx, yyy, xxxx, xxxy);\\n        (yyx, yyy) = fq2Sub(yyx, yyy, TWISTBX, TWISTBY);\\n        return yyx == 0 && yyy == 0;\\n    }\\n\\n    function modInv(uint256 a, uint256 n) internal view returns (uint256 result) {\\n        bool success;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let freemem := mload(0x40)\\n            mstore(freemem, 0x20)\\n            mstore(add(freemem, 0x20), 0x20)\\n            mstore(add(freemem, 0x40), 0x20)\\n            mstore(add(freemem, 0x60), a)\\n            mstore(add(freemem, 0x80), sub(n, 2))\\n            mstore(add(freemem, 0xA0), n)\\n            success := staticcall(sub(gas(), 2000), 5, freemem, 0xC0, freemem, 0x20)\\n            result := mload(freemem)\\n        }\\n        // solhint-disable-next-line reason-string\\n        require(success);\\n    }\\n\\n    function fromJacobian(uint256 pt1xx, uint256 pt1xy, uint256 pt1yx, uint256 pt1yy, uint256 pt1zx, uint256 pt1zy)\\n        internal\\n        view\\n        returns (uint256 pt2xx, uint256 pt2xy, uint256 pt2yx, uint256 pt2yy)\\n    {\\n        uint256 invzx;\\n        uint256 invzy;\\n        (invzx, invzy) = fq2Inv(pt1zx, pt1zy);\\n        (pt2xx, pt2xy) = fq2Mul(pt1xx, pt1xy, invzx, invzy);\\n        (pt2yx, pt2yy) = fq2Mul(pt1yx, pt1yy, invzx, invzy);\\n    }\\n\\n    function ecTwistAddJacobian(uint256[6] memory pt1, uint256[6] memory pt2)\\n        public\\n        pure\\n        returns (uint256[6] memory pt3)\\n    {\\n        if (pt1[4] == 0 && pt1[5] == 0) {\\n            (pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]) =\\n                (pt2[0], pt2[1], pt2[2], pt2[3], pt2[4], pt2[5]);\\n            return pt3;\\n        } else if (pt2[4] == 0 && pt2[5] == 0) {\\n            (pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]) =\\n                (pt1[0], pt1[1], pt1[2], pt1[3], pt1[4], pt1[5]);\\n            return pt3;\\n        }\\n\\n        (pt2[2], pt2[3]) = fq2Mul(pt2[2], pt2[3], pt1[4], pt1[5]); // U1 = y2 * z1\\n        (pt3[PTYX], pt3[PTYY]) = fq2Mul(pt1[2], pt1[3], pt2[4], pt2[5]); // U2 = y1 * z2\\n        (pt2[0], pt2[1]) = fq2Mul(pt2[0], pt2[1], pt1[4], pt1[5]); // V1 = x2 * z1\\n        (pt3[PTZX], pt3[PTZY]) = fq2Mul(pt1[0], pt1[1], pt2[4], pt2[5]); // V2 = x1 * z2\\n\\n        if (pt2[0] == pt3[PTZX] && pt2[1] == pt3[PTZY]) {\\n            if (pt2[2] == pt3[PTYX] && pt2[3] == pt3[PTYY]) {\\n                (pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]) =\\n                    ecTwistDoubleJacobian(pt1[0], pt1[1], pt1[2], pt1[3], pt1[4], pt1[5]);\\n                return pt3;\\n            }\\n            (pt3[PTXX], pt3[PTXY], pt3[PTYX], pt3[PTYY], pt3[PTZX], pt3[PTZY]) = (1, 0, 1, 0, 0, 0);\\n            return pt3;\\n        }\\n\\n        (pt2[4], pt2[5]) = fq2Mul(pt1[4], pt1[5], pt2[4], pt2[5]); // W = z1 * z2\\n        (pt1[0], pt1[1]) = fq2Sub(pt2[2], pt2[3], pt3[PTYX], pt3[PTYY]); // U = U1 - U2\\n        (pt1[2], pt1[3]) = fq2Sub(pt2[0], pt2[1], pt3[PTZX], pt3[PTZY]); // V = V1 - V2\\n        (pt1[4], pt1[5]) = fq2Mul(pt1[2], pt1[3], pt1[2], pt1[3]); // V_squared = V * V\\n        (pt2[2], pt2[3]) = fq2Mul(pt1[4], pt1[5], pt3[PTZX], pt3[PTZY]); // V_squared_times_V2 = V_squared * V2\\n        (pt1[4], pt1[5]) = fq2Mul(pt1[4], pt1[5], pt1[2], pt1[3]); // V_cubed = V * V_squared\\n        (pt3[PTZX], pt3[PTZY]) = fq2Mul(pt1[4], pt1[5], pt2[4], pt2[5]); // newz = V_cubed * W\\n        (pt2[0], pt2[1]) = fq2Mul(pt1[0], pt1[1], pt1[0], pt1[1]); // U * U\\n        (pt2[0], pt2[1]) = fq2Mul(pt2[0], pt2[1], pt2[4], pt2[5]); // U * U * W\\n        (pt2[0], pt2[1]) = fq2Sub(pt2[0], pt2[1], pt1[4], pt1[5]); // U * U * W - V_cubed\\n        (pt2[4], pt2[5]) = fq2Muc(pt2[2], pt2[3], 2); // 2 * V_squared_times_V2\\n        (pt2[0], pt2[1]) = fq2Sub(pt2[0], pt2[1], pt2[4], pt2[5]); // A = U * U * W - V_cubed - 2 * V_squared_times_V2\\n        (pt3[PTXX], pt3[PTXY]) = fq2Mul(pt1[2], pt1[3], pt2[0], pt2[1]); // newx = V * A\\n        (pt1[2], pt1[3]) = fq2Sub(pt2[2], pt2[3], pt2[0], pt2[1]); // V_squared_times_V2 - A\\n        (pt1[2], pt1[3]) = fq2Mul(pt1[0], pt1[1], pt1[2], pt1[3]); // U * (V_squared_times_V2 - A)\\n        (pt1[0], pt1[1]) = fq2Mul(pt1[4], pt1[5], pt3[PTYX], pt3[PTYY]); // V_cubed * U2\\n        (pt3[PTYX], pt3[PTYY]) = fq2Sub(pt1[2], pt1[3], pt1[0], pt1[1]); // newy = U * (V_squared_times_V2 - A) - V_cubed * U2\\n    }\\n\\n    function ecTwistDoubleJacobian(\\n        uint256 pt1xx,\\n        uint256 pt1xy,\\n        uint256 pt1yx,\\n        uint256 pt1yy,\\n        uint256 pt1zx,\\n        uint256 pt1zy\\n    ) public pure returns (uint256 pt2xx, uint256 pt2xy, uint256 pt2yx, uint256 pt2yy, uint256 pt2zx, uint256 pt2zy) {\\n        (pt2xx, pt2xy) = fq2Muc(pt1xx, pt1xy, 3); // 3 * x\\n        (pt2xx, pt2xy) = fq2Mul(pt2xx, pt2xy, pt1xx, pt1xy); // W = 3 * x * x\\n        (pt1zx, pt1zy) = fq2Mul(pt1yx, pt1yy, pt1zx, pt1zy); // S = y * z\\n        (pt2yx, pt2yy) = fq2Mul(pt1xx, pt1xy, pt1yx, pt1yy); // x * y\\n        (pt2yx, pt2yy) = fq2Mul(pt2yx, pt2yy, pt1zx, pt1zy); // B = x * y * S\\n        (pt1xx, pt1xy) = fq2Mul(pt2xx, pt2xy, pt2xx, pt2xy); // W * W\\n        (pt2zx, pt2zy) = fq2Muc(pt2yx, pt2yy, 8); // 8 * B\\n        (pt1xx, pt1xy) = fq2Sub(pt1xx, pt1xy, pt2zx, pt2zy); // H = W * W - 8 * B\\n        (pt2zx, pt2zy) = fq2Mul(pt1zx, pt1zy, pt1zx, pt1zy); // S_squared = S * S\\n        (pt2yx, pt2yy) = fq2Muc(pt2yx, pt2yy, 4); // 4 * B\\n        (pt2yx, pt2yy) = fq2Sub(pt2yx, pt2yy, pt1xx, pt1xy); // 4 * B - H\\n        (pt2yx, pt2yy) = fq2Mul(pt2yx, pt2yy, pt2xx, pt2xy); // W * (4 * B - H)\\n        (pt2xx, pt2xy) = fq2Muc(pt1yx, pt1yy, 8); // 8 * y\\n        (pt2xx, pt2xy) = fq2Mul(pt2xx, pt2xy, pt1yx, pt1yy); // 8 * y * y\\n        (pt2xx, pt2xy) = fq2Mul(pt2xx, pt2xy, pt2zx, pt2zy); // 8 * y * y * S_squared\\n        (pt2yx, pt2yy) = fq2Sub(pt2yx, pt2yy, pt2xx, pt2xy); // newy = W * (4 * B - H) - 8 * y * y * S_squared\\n        (pt2xx, pt2xy) = fq2Muc(pt1xx, pt1xy, 2); // 2 * H\\n        (pt2xx, pt2xy) = fq2Mul(pt2xx, pt2xy, pt1zx, pt1zy); // newx = 2 * H * S\\n        (pt2zx, pt2zy) = fq2Mul(pt1zx, pt1zy, pt2zx, pt2zy); // S * S_squared\\n        (pt2zx, pt2zy) = fq2Muc(pt2zx, pt2zy, 8); // newz = 8 * S * S_squared\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IOPGasPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.18;\\n\\ninterface IOPGasPriceOracle {\\n    /// @notice Computes the L1 portion of the fee based on the size of the rlp encoded input\\n    ///         transaction, the current L1 base fee, and the various dynamic parameters.\\n    /// @param _data Unsigned fully RLP-encoded transaction to get the L1 fee for.\\n    /// @return L1 fee that should be paid for the tx\\n    function getL1Fee(bytes memory _data) external view returns (uint256);\\n    /// @notice Retrieves the current fee scalar.\\n    /// @return Current fee scalar.\\n    function scalar() external view returns (uint256);\\n    /// @notice Retrieves the latest known L1 base fee.\\n    /// @return Latest known L1 base fee.\\n    function l1BaseFee() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.3) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.9._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"Randcast-User-Contract/=lib/Randcast-User-Contract/contracts/\",\r\n      \"Staking-v0.1/=lib/Staking-v0.1/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 300\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/libraries/BLS.sol\": {\r\n        \"BLS\": \"0x25e627ED5C1102C4a130e8B846aA24867898Eb78\"\r\n      },\r\n      \"src/libraries/ChainHelper.sol\": {\r\n        \"ChainHelper\": \"0xb5DE499681c16bDD8E235Cb6DbA71bB7fc2a44FD\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AtLeastOneRequestIsRequired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EmptyPartialSignatures\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"have\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"want\",\"type\":\"uint32\"}],\"name\":\"GasLimitTooBig\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"groupIndex\",\"type\":\"uint256\"}],\"name\":\"GroupNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IdenticalSubscription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectCommitment\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalanceWhenFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalanceWhenRequest\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"InvalidConsumer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPartialSignatureFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPartialSignatures\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRequestByEOA\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"have\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"min\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"max\",\"type\":\"uint16\"}],\"name\":\"InvalidRequestConfirmations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignatureFormat\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSubscription\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidZeroAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"MustBeSubOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoAvailableGroups\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoCorrespondingRequest\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotFromCommitter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PendingRequestExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Reentrant\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReferralPromotionDisabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RequestNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotController\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubscriptionAlreadyHasReferral\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskStillExclusive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TaskStillWithinRequestConfirmations\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyConsumers\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"gasExceptCallback\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"signatureTaskExclusiveWindow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSignature\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"committerRewardPerSignature\",\"type\":\"uint256\"}],\"name\":\"AdapterConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"indexed\":false,\"internalType\":\"struct IAdapterOwner.FeeConfig\",\"name\":\"flatFeeConfig\",\"type\":\"tuple\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"flatFeePromotionGlobalPercentage\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFlatFeePromotionEnabledPermanently\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flatFeePromotionStartTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flatFeePromotionEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"FlatFeeConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"OvertimeRequestCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"groupIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"enum IRequestTypeBase.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"callbackMaxGasPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"estimatedPayment\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"groupIndex\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"committer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"participantMembers\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"randommness\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"payment\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"flatFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"RandomnessRequestResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isReferralEnabled\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"freeRequestCountForReferrer\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"freeRequestCountForReferee\",\"type\":\"uint16\"}],\"name\":\"ReferralConfigSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SubscriptionCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"SubscriptionConsumerRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"SubscriptionCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"SubscriptionFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"referralSubId\",\"type\":\"uint64\"}],\"name\":\"SubscriptionReferralSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_MINIMUM_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_CONSUMERS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RANDOMNESS_REWARD_GAS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERIFICATION_GAS_OVER_MINIMUM_THRESHOLD\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"groupIndex\",\"type\":\"uint32\"},{\"internalType\":\"enum IRequestTypeBase.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"callbackMaxGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"internalType\":\"struct IAdapter.RequestDetail\",\"name\":\"requestDetail\",\"type\":\"tuple\"}],\"name\":\"cancelOvertimeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasExceptCallback\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPM\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"weiPerUnitGas\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"groupSize\",\"type\":\"uint32\"}],\"name\":\"estimatePaymentAmountInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"groupIndex\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"signature\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"groupIndex\",\"type\":\"uint32\"},{\"internalType\":\"enum IRequestTypeBase.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"callbackContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"callbackMaxGasPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"}],\"internalType\":\"struct IAdapter.RequestDetail\",\"name\":\"requestDetail\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"partialSignature\",\"type\":\"uint256\"}],\"internalType\":\"struct IAdapter.PartialSignature[]\",\"name\":\"partialSignatures\",\"type\":\"tuple[]\"}],\"name\":\"fulfillRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"fundSubscription\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdapterConfig\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasExceptCallback\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"signatureTaskExclusiveWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSignature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committerRewardPerSignature\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCumulativeData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentSubId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"}],\"name\":\"getFeeTier\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFlatFeeConfig\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeLinkPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"},{\"internalType\":\"uint16\",\"name\":\"flatFeePromotionGlobalPercentage\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isFlatFeePromotionEnabledPermanently\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"flatFeePromotionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flatFeePromotionEndTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastAssignedGroupIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRandomness\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"getLastSubscription\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"name\":\"getPendingRequestCommitment\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRandomnessCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReferralConfig\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isReferralEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"freeRequestCountForReferrer\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"freeRequestCountForReferee\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"getSubscription\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"consumers\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inflightCost\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"reqCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"freeRequestCount\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"referralSubId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"reqCountInCurrentPeriod\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"lastRequestTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"controller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"nodeWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"ownerCancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"consumer\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum IRequestTypeBase.RequestType\",\"name\":\"requestType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"seed\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"callbackMaxGasPrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IAdapter.RandomnessRequestParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"requestRandomness\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"minimumRequestConfirmations\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"maxGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasAfterPaymentCalculation\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"gasExceptCallback\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"signatureTaskExclusiveWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerSignature\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"committerRewardPerSignature\",\"type\":\"uint256\"}],\"name\":\"setAdapterConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier1\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier2\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier3\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier4\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fulfillmentFlatFeeEthPPMTier5\",\"type\":\"uint32\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier2\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier3\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier4\",\"type\":\"uint24\"},{\"internalType\":\"uint24\",\"name\":\"reqsForTier5\",\"type\":\"uint24\"}],\"internalType\":\"struct IAdapterOwner.FeeConfig\",\"name\":\"flatFeeConfig\",\"type\":\"tuple\"},{\"internalType\":\"uint16\",\"name\":\"flatFeePromotionGlobalPercentage\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"isFlatFeePromotionEnabledPermanently\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"flatFeePromotionStartTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"flatFeePromotionEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"setFlatFeeConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"subIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint64[]\",\"name\":\"freeRequestCounts\",\"type\":\"uint64[]\"}],\"name\":\"setFreeRequestCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"referralSubId\",\"type\":\"uint64\"}],\"name\":\"setReferral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"isReferralEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint16\",\"name\":\"freeRequestCountForReferrer\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"freeRequestCountForReferee\",\"type\":\"uint16\"}],\"name\":\"setReferralConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Adapter", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "300", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}