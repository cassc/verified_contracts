{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/interfaces/ISaltzYard2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\ninterface ISaltzYard2 {\\n    \\n    function lastTimeRewardApplicable() external view returns (uint);\\n\\n    function rewardPerToken() external view returns (uint);\\n\\n    function stake(uint _amount) external;\\n\\n    function stakeWithLock(uint _amount, uint256 lockinPeriod) external;\\n\\n    function extendLockin(uint256 extendedTime) external;\\n    \\n    function withdraw(uint _amount) external;\\n\\n    function withdrawForLockedStackers() external;\\n\\n    function earned(address _account) external view returns (uint);\\n\\n    function getReward() external;\\n    \\n    function setRewardsDuration(uint _duration) external;\\n\\n    function notifyRewardAmount( uint _amount ) external;\\n\\n}\"\r\n    },\r\n    \"contracts/SaltsToken.sol\": {\r\n      \"content\": \"/**\\n    Saltz\\n    Explore the world\u2019s first yield generating deflationary coin with guaranteed Minimum selling price.\\n    \\n    Website: https://saltz.io\\n    Twitter: https://twitter.com/Saltz_io\\n    Telegram: https://t.me/saltzofficial\\n\\n**/\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.16;\\nimport \\\"./interfaces/ISaltzYard2.sol\\\";\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\npragma solidity ^0.8.9;\\n\\ninterface IVault {\\n    function setUpdater(address _updater) external;\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n}\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this;\\n        return msg.data;\\n    }\\n}\\n\\nabstract contract Ownable is Context {\\n    address internal _owner;\\n    address private _previousOwner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    constructor() {\\n        _owner = _msgSender();\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"Ownable: new owner is the zero address\\\"\\n        );\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\\ninterface IERC20Metadata is IERC20 {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\\n// File: Vault.sol\\n\\npragma solidity ^0.8.9;\\n\\ncontract Vault is Ownable {\\n    IERC20 tokenAddress;\\n    address public updater;\\n\\n    //address public owner;\\n    constructor(address _token) {\\n        tokenAddress = IERC20(_token);\\n    }\\n\\n    modifier onlyUpdater() {\\n        require(msg.sender == updater, \\\"you are not the updater\\\");\\n        _;\\n    }\\n\\n    function setUpdater(address _updater) public onlyOwner {\\n        updater = _updater;\\n    }\\n\\n    function withdraw(uint amount, address _user) public onlyUpdater {\\n        tokenAddress.transfer(_user, amount);\\n    }\\n}\\n\\ncontract ERC20 is Context, Ownable, IERC20, IERC20Metadata {\\n    using SafeMath for uint256;\\n\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    ) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(\\n            sender,\\n            _msgSender(),\\n            _allowances[sender][_msgSender()].sub(\\n                amount,\\n                \\\"ERC20: transfer amount exceeds allowance\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function increaseAllowance(\\n        address spender,\\n        uint256 addedValue\\n    ) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].add(addedValue)\\n        );\\n        return true;\\n    }\\n\\n    function decreaseAllowance(\\n        address spender,\\n        uint256 subtractedValue\\n    ) public virtual returns (bool) {\\n        _approve(\\n            _msgSender(),\\n            spender,\\n            _allowances[_msgSender()][spender].sub(\\n                subtractedValue,\\n                \\\"ERC20: decreased allowance below zero\\\"\\n            )\\n        );\\n        return true;\\n    }\\n\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(\\n            amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(\\n            amount,\\n            \\\"ERC20: burn amount exceeds balance\\\"\\n        );\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\\ncontract Saltz is ERC20 {\\n    using SafeMath for uint256;\\n\\n        struct ValuesOfAmount {\\n        uint256 amount;\\n        uint256 whaleFee;\\n        uint256 totalTax;\\n        uint256 transferAmount;\\n    }\\n\\n    mapping(address => bool) private _isExcludedFromFee;\\n    mapping(address => bool) public isRegistered;\\n    mapping(uint8 => uint16) public commision; // for referals\\n    mapping(address => address) public parent;\\n    mapping(address => uint) public referalReward;\\n    mapping(address => uint) public totalCommisionEarned;\\n\\n    address[] public users;\\n\\n    address public devWallet;\\n    address public vault;\\n\\n    address constant _burnAddress = 0x000000000000000000000000000000000000dEaD;\\n\\n    uint16 private totalTax = 1000;\\n\\n    // percentage of totalTax(after referrals distributed , if any) that goes into burning mechanism\\n    uint16 private taxBurn = 4000;\\n\\n    // percentage of transaction redistributed to all holders\\n    uint16 private taxReward = 3500;\\n\\n    // percentage of transaction goes to developers\\n    uint16 private taxDev = 2500;\\n\\n    address public onlyWallet;\\n\\n    uint256 public currentSupply;\\n\\n    uint256 public transactionCount = 1;\\n\\n    IVault Ivault;\\n\\n    bool public tradingEnabled = false;\\n\\n    uint256 public totalBurnt = 0 ;\\n    uint256 public totalVaultSupply;\\n    uint256 private previousVaultSupply;\\n\\n    uint256 private txLimit = 1;\\n\\n    ISaltzYard2 IsaltzYard;\\n    address saltzYard;\\n\\n    event UserRegistered(\\n        address indexed user,\\n        address indexed referer,\\n        uint256 timestamp\\n    );\\n    event RefTx(uint8 refIndex,address child, address referer, uint256 amount);\\n    event Taxes(uint256 burnTax, uint256 devTax, uint256 rewardstax);\\n    event Burn(address account, uint256 amount, uint256 timestamp);\\n    event referalClaimed(address indexed user, uint256 amount);\\n\\n    modifier ownerOrWallet(){\\n         require(msg.sender == owner() || msg.sender == onlyWallet, \\\"not authorized\\\");\\n    _;\\n    }\\n\\n    constructor(string memory _symbol, string memory _name, address _devWallet) ERC20(_symbol, _name) {\\n        devWallet = _devWallet; //my 3rd wallet\\n\\n        _isExcludedFromFee[address(this)] = true;\\n        _isExcludedFromFee[msg.sender] = true;\\n\\n\\n        _mint(owner(), 41000000 * 10 ** decimals());\\n\\n        currentSupply = totalSupply();\\n\\n        vault = address(new Vault(address(this)));\\n\\n        Ivault = IVault(vault);\\n\\n        commision[0] = 500;\\n        commision[1] = 300;\\n        commision[2] = 200;\\n        commision[3] = 100;\\n        commision[4] = 50;\\n    }\\n\\n    //-------------------------------------Public Methods--------------------------------//\\n\\n    function includeAndExcludeFromFee(\\n        address account,\\n        bool value\\n    ) public ownerOrWallet {\\n        _isExcludedFromFee[account] = value;\\n    }\\n\\n    function setOnlyWallet(address _address) public onlyOwner {\\n        onlyWallet = _address;\\n    }\\n\\n    function isExcludedFromFee(address account) public view returns (bool) {\\n        return _isExcludedFromFee[account];\\n    }\\n\\n    function getTrnx() public view returns (uint256) {\\n        return txLimit;\\n    }\\n\\n\\n    //-------------------------------------External Methods--------------------------------//\\n\\n\\n    function enableTrading() external onlyOwner {\\n        tradingEnabled = true;\\n    }\\n\\n    function setdevWallet(address _addr) external ownerOrWallet {\\n        devWallet = _addr;\\n    }\\n\\n    function registerUser(address _user, address _referer) external {\\n        if (isRegistered[_user] == false) {\\n            _register(_user, _referer);\\n            emit UserRegistered(_user, _referer, block.timestamp);\\n        }\\n    }\\n\\n    function transferRewardToYard() external ownerOrWallet {\\n        uint _amount = totalVaultSupply - previousVaultSupply; //recent changes\\n        IsaltzYard.notifyRewardAmount(_amount);\\n        previousVaultSupply = totalVaultSupply;\\n    }\\n\\n    function addYard(address _yard) external onlyOwner {\\n        saltzYard = _yard;\\n        IsaltzYard = ISaltzYard2(_yard);\\n        Ivault.setUpdater(saltzYard);\\n        includeAndExcludeFromFee(_yard, true); //Recent changes\\n    }\\n\\n    function updateTxLimit(uint256 _trnx) external ownerOrWallet {\\n        txLimit = _trnx;\\n    }\\n\\n    function claimReferalReward() external {\\n        require(\\n            referalReward[msg.sender] > 0,\\n            \\\"You don't own any referal reward yet\\\"\\n        );\\n        uint256 toTransfer = referalReward[msg.sender];\\n        referalReward[msg.sender] = 0;\\n        super._transfer(address(this), msg.sender, toTransfer);\\n        emit referalClaimed(msg.sender, toTransfer);\\n    }\\n\\n    receive() external payable {}\\n\\n\\n    //-------------------------------------Internal Methods--------------------------------//\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\n\\n        if (from != owner() && !tradingEnabled) {\\n            require(tradingEnabled, \\\"Trading is not enabled yet\\\");\\n        }\\n\\n        bool takeFee = true;\\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\\n            super._transfer(from, to, amount);\\n            takeFee = false;\\n        } else {\\n            ValuesOfAmount memory values = getValues(\\n                amount,\\n                _isExcludedFromFee[from],\\n                _isExcludedFromFee[to]\\n            );\\n\\n            super._transfer(from, to, values.transferAmount); // amount transfer to recepient\\n\\n            getTaxTransfer(values, from);\\n            transactionCount++;\\n        }\\n    }\\n\\n    function taxWhale(uint256 _amount) internal view returns (uint16) {\\n        uint256 i = (_amount * 100) / currentSupply;\\n        uint16 whaleTax;\\n        if (i < 1) {\\n            whaleTax = 0;\\n        } else if (i >= 1 && i < 2) {\\n            whaleTax = 500;\\n        } else if (i >= 2 && i < 3) {\\n            whaleTax = 1000;\\n        } else if (i >= 3 && i < 4) {\\n            whaleTax = 1500;\\n        } else if (i >= 4 && i < 5) {\\n            whaleTax = 2000;\\n        } else if (i >= 5 && i < 6) {\\n            whaleTax = 2500;\\n        } else if (i >= 6 && i < 7) {\\n            whaleTax = 3000;\\n        } else if (i >= 7 && i < 8) {\\n            whaleTax = 3500;\\n        } else if (i >= 8 && i < 9) {\\n            whaleTax = 4000;\\n        } else if (i >= 9 && i < 10) {\\n            whaleTax = 4500;\\n        } else if (i >= 10) {\\n            whaleTax = 5000;\\n        }\\n        return whaleTax;\\n    }\\n\\n    function _register(address _user, address _referer) internal {\\n        require(_user!=_referer,\\\"You cannot refer yourself\\\");\\n        parent[_user] = _referer;\\n        isRegistered[_user] = true;\\n        users.push(_user);\\n    }\\n\\n\\n    //-------------------------------------Private Methods--------------------------------//\\n\\n    function getParent(address user) private view returns (address referer) {\\n        return parent[user];\\n    }\\n\\n    function getTaxTransfer(\\n        ValuesOfAmount memory values,\\n        address sender\\n    ) private {\\n        uint8 i = 0;\\n        uint totalToTransfer = 0;\\n        address parentAddress = getParent(sender);\\n        while (parentAddress != address(0) && i <= 4) {\\n            uint256 tAmount = calculateTax(values.totalTax, commision[i]);\\n            referalReward[parentAddress] += tAmount;\\n            totalCommisionEarned[parentAddress] += tAmount;\\n            totalToTransfer += tAmount;\\n            values.totalTax -= tAmount;\\n            emit RefTx(i,sender, parentAddress, tAmount);\\n            parentAddress = getParent(parentAddress);\\n            i++;\\n        }\\n\\n        super._transfer(sender, address(this), totalToTransfer); // sending commision to parents    += tAmount;\\n        totalToTransfer = 0;\\n\\n        uint256 _totalTax = values.totalTax;\\n        uint256 BurnFee = calculateTax(_totalTax, taxBurn);\\n        uint256 RewardFee = calculateTax(_totalTax, taxReward);\\n        _totalTax = values.totalTax - (BurnFee + RewardFee);\\n        uint256 DevFee = _totalTax; //edit changes for devfee (done)\\n\\n        super._transfer(sender, devWallet, DevFee); //dev Wallet\\n\\n        super._transfer(sender, vault, RewardFee); //to reward wallet\\n        totalVaultSupply += RewardFee;\\n\\n        super._transfer(sender, _burnAddress, BurnFee); //burning tokens\\n        currentSupply -= BurnFee;\\n        totalBurnt +=BurnFee;\\n        emit Burn(sender, BurnFee, block.timestamp);\\n\\n        if (transactionCount % getTrnx() == 0) {\\n            uint _amount = totalVaultSupply - previousVaultSupply; //recent changes\\n            IsaltzYard.notifyRewardAmount(_amount);\\n            previousVaultSupply = totalVaultSupply;\\n        }\\n\\n        emit Taxes(BurnFee, DevFee, RewardFee);\\n    }\\n\\n    function getValues(\\n        uint256 amount,\\n        bool deductTransferFee,\\n        bool sender\\n    ) private view returns (ValuesOfAmount memory) {\\n        ValuesOfAmount memory values;\\n        values.amount = amount;\\n        if (!deductTransferFee && !sender) {\\n            // calculate fee\\n            uint16 taxWhale_ = taxWhale(values.amount);\\n            values.whaleFee = calculateTax(values.amount, taxWhale_);\\n            uint256 tempTotalTax = calculateTax(\\n                (values.amount - values.whaleFee),\\n                totalTax\\n            );\\n            values.totalTax = tempTotalTax + values.whaleFee;\\n            values.transferAmount = values.amount - values.totalTax;\\n        } else {\\n            values.whaleFee = 0;\\n            values.totalTax = 0;\\n            values.transferAmount = values.amount;\\n        }\\n        return values;\\n    }\\n\\n    function calculateTax(\\n        uint256 amount,\\n        uint16 tax\\n    ) private pure returns (uint256) {\\n        return (amount * tax) / (10 ** 4);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_devWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"refIndex\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"child\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RefTx\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burnTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"devTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardstax\",\"type\":\"uint256\"}],\"name\":\"Taxes\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UserRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"referalClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_yard\",\"type\":\"address\"}],\"name\":\"addYard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReferalReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"commision\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"devWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrnx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"includeAndExcludeFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRegistered\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"onlyWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referalReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referer\",\"type\":\"address\"}],\"name\":\"registerUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setOnlyWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"setdevWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBurnt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalCommisionEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalVaultSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactionCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferRewardToYard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_trnx\",\"type\":\"uint256\"}],\"name\":\"updateTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"users\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Saltz", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000ae685c04d159cabb0df5ddf4442bb32245b830fb000000000000000000000000000000000000000000000000000000000000000573616c747a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000573616c747a000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}