{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@aave/core-v3/contracts/interfaces/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\nimport {IPoolAddressesProvider} from './IPoolAddressesProvider.sol';\\nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol';\\n\\n/**\\n * @title IPool\\n * @author Aave\\n * @notice Defines the basic interface for an Aave Pool.\\n */\\ninterface IPool {\\n  /**\\n   * @dev Emitted on mintUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\\n   * @param amount The amount of supplied assets\\n   * @param referralCode The referral code used\\n   */\\n  event MintUnbacked(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on backUnbacked()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param backer The address paying for the backing\\n   * @param amount The amount added as backing\\n   * @param fee The amount paid in fees\\n   */\\n  event BackUnbacked(address indexed reserve, address indexed backer, uint256 amount, uint256 fee);\\n\\n  /**\\n   * @dev Emitted on supply()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address initiating the supply\\n   * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\\n   * @param amount The amount supplied\\n   * @param referralCode The referral code used\\n   */\\n  event Supply(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on withdraw()\\n   * @param reserve The address of the underlying asset being withdrawn\\n   * @param user The address initiating the withdrawal, owner of aTokens\\n   * @param to The address that will receive the underlying\\n   * @param amount The amount to be withdrawn\\n   */\\n  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\\n\\n  /**\\n   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\\n   * @param reserve The address of the underlying asset being borrowed\\n   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\\n   * initiator of the transaction on flashLoan()\\n   * @param onBehalfOf The address that will be getting the debt\\n   * @param amount The amount borrowed out\\n   * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\\n   * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\\n   * @param referralCode The referral code used\\n   */\\n  event Borrow(\\n    address indexed reserve,\\n    address user,\\n    address indexed onBehalfOf,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 borrowRate,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted on repay()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The beneficiary of the repayment, getting his debt reduced\\n   * @param repayer The address of the user initiating the repay(), providing the funds\\n   * @param amount The amount repaid\\n   * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\\n   */\\n  event Repay(\\n    address indexed reserve,\\n    address indexed user,\\n    address indexed repayer,\\n    uint256 amount,\\n    bool useATokens\\n  );\\n\\n  /**\\n   * @dev Emitted on swapBorrowRateMode()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user swapping his rate mode\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  event SwapBorrowRateMode(\\n    address indexed reserve,\\n    address indexed user,\\n    DataTypes.InterestRateMode interestRateMode\\n  );\\n\\n  /**\\n   * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param totalDebt The total isolation mode debt for the reserve\\n   */\\n  event IsolationModeTotalDebtUpdated(address indexed asset, uint256 totalDebt);\\n\\n  /**\\n   * @dev Emitted when the user selects a certain asset category for eMode\\n   * @param user The address of the user\\n   * @param categoryId The category id\\n   */\\n  event UserEModeSet(address indexed user, uint8 categoryId);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on setUserUseReserveAsCollateral()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user enabling the usage as collateral\\n   */\\n  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on rebalanceStableBorrowRate()\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param user The address of the user for which the rebalance has been executed\\n   */\\n  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\\n\\n  /**\\n   * @dev Emitted on flashLoan()\\n   * @param target The address of the flash loan receiver contract\\n   * @param initiator The address initiating the flash loan\\n   * @param asset The address of the asset being flash borrowed\\n   * @param amount The amount flash borrowed\\n   * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\\n   * @param premium The fee flash borrowed\\n   * @param referralCode The referral code used\\n   */\\n  event FlashLoan(\\n    address indexed target,\\n    address initiator,\\n    address indexed asset,\\n    uint256 amount,\\n    DataTypes.InterestRateMode interestRateMode,\\n    uint256 premium,\\n    uint16 indexed referralCode\\n  );\\n\\n  /**\\n   * @dev Emitted when a borrower is liquidated.\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\\n   * @param liquidator The address of the liquidator\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  event LiquidationCall(\\n    address indexed collateralAsset,\\n    address indexed debtAsset,\\n    address indexed user,\\n    uint256 debtToCover,\\n    uint256 liquidatedCollateralAmount,\\n    address liquidator,\\n    bool receiveAToken\\n  );\\n\\n  /**\\n   * @dev Emitted when the state of a reserve is updated.\\n   * @param reserve The address of the underlying asset of the reserve\\n   * @param liquidityRate The next liquidity rate\\n   * @param stableBorrowRate The next stable borrow rate\\n   * @param variableBorrowRate The next variable borrow rate\\n   * @param liquidityIndex The next liquidity index\\n   * @param variableBorrowIndex The next variable borrow index\\n   */\\n  event ReserveDataUpdated(\\n    address indexed reserve,\\n    uint256 liquidityRate,\\n    uint256 stableBorrowRate,\\n    uint256 variableBorrowRate,\\n    uint256 liquidityIndex,\\n    uint256 variableBorrowIndex\\n  );\\n\\n  /**\\n   * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\\n   * @param reserve The address of the reserve\\n   * @param amountMinted The amount minted to the treasury\\n   */\\n  event MintedToTreasury(address indexed reserve, uint256 amountMinted);\\n\\n  /**\\n   * @notice Mints an `amount` of aTokens to the `onBehalfOf`\\n   * @param asset The address of the underlying asset to mint\\n   * @param amount The amount to mint\\n   * @param onBehalfOf The address that will receive the aTokens\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function mintUnbacked(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Back the current unbacked underlying with `amount` and pay `fee`.\\n   * @param asset The address of the underlying asset to back\\n   * @param amount The amount to back\\n   * @param fee The amount paid in fees\\n   * @return The backed amount\\n   */\\n  function backUnbacked(\\n    address asset,\\n    uint256 amount,\\n    uint256 fee\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function supply(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Supply with transfer approval of asset to be supplied done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   */\\n  function supplyWithPermit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external;\\n\\n  /**\\n   * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\\n   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\\n   * @param asset The address of the underlying asset to withdraw\\n   * @param amount The underlying amount to be withdrawn\\n   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\\n   * @param to The address that will receive the underlying, same as msg.sender if the user\\n   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\\n   *   different wallet\\n   * @return The final amount withdrawn\\n   */\\n  function withdraw(\\n    address asset,\\n    uint256 amount,\\n    address to\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\\n   * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\\n   * corresponding debt token (StableDebtToken or VariableDebtToken)\\n   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\\n   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\\n   * @param asset The address of the underlying asset to borrow\\n   * @param amount The amount to be borrowed\\n   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\\n   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\\n   * if he has been given credit delegation allowance\\n   */\\n  function borrow(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    uint16 referralCode,\\n    address onBehalfOf\\n  ) external;\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\\n   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @return The final amount repaid\\n   */\\n  function repay(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repay with transfer approval of asset to be repaid done via permit function\\n   * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\\n   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\\n   * other borrower whose debt should be removed\\n   * @param deadline The deadline timestamp that the permit is valid\\n   * @param permitV The V parameter of ERC712 permit sig\\n   * @param permitR The R parameter of ERC712 permit sig\\n   * @param permitS The S parameter of ERC712 permit sig\\n   * @return The final amount repaid\\n   */\\n  function repayWithPermit(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode,\\n    address onBehalfOf,\\n    uint256 deadline,\\n    uint8 permitV,\\n    bytes32 permitR,\\n    bytes32 permitS\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\\n   * equivalent debt tokens\\n   * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\\n   * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\\n   * balance is not enough to cover the whole debt\\n   * @param asset The address of the borrowed underlying asset previously borrowed\\n   * @param amount The amount to repay\\n   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\\n   * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\\n   * @return The final amount repaid\\n   */\\n  function repayWithATokens(\\n    address asset,\\n    uint256 amount,\\n    uint256 interestRateMode\\n  ) external returns (uint256);\\n\\n  /**\\n   * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\\n   * @param asset The address of the underlying asset borrowed\\n   * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\\n   */\\n  function swapBorrowRateMode(address asset, uint256 interestRateMode) external;\\n\\n  /**\\n   * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\\n   * - Users can be rebalanced if the following conditions are satisfied:\\n   *     1. Usage ratio is above 95%\\n   *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\\n   *        much has been borrowed at a stable rate and suppliers are not earning enough\\n   * @param asset The address of the underlying asset borrowed\\n   * @param user The address of the user to be rebalanced\\n   */\\n  function rebalanceStableBorrowRate(address asset, address user) external;\\n\\n  /**\\n   * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\\n   * @param asset The address of the underlying asset supplied\\n   * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\\n   */\\n  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\\n\\n  /**\\n   * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\\n   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\\n   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\\n   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\\n   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\\n   * @param user The address of the borrower getting liquidated\\n   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\\n   * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\\n   * to receive the underlying collateral asset directly\\n   */\\n  function liquidationCall(\\n    address collateralAsset,\\n    address debtAsset,\\n    address user,\\n    uint256 debtToCover,\\n    bool receiveAToken\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\\n   * @param assets The addresses of the assets being flash-borrowed\\n   * @param amounts The amounts of the assets being flash-borrowed\\n   * @param interestRateModes Types of the debt to open if the flash loan is not returned:\\n   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\\n   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\\n   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoan(\\n    address receiverAddress,\\n    address[] calldata assets,\\n    uint256[] calldata amounts,\\n    uint256[] calldata interestRateModes,\\n    address onBehalfOf,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\\n   * as long as the amount taken plus a fee is returned.\\n   * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\\n   * into consideration. For further details please visit https://docs.aave.com/developers/\\n   * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\\n   * @param asset The address of the asset being flash-borrowed\\n   * @param amount The amount of the asset being flash-borrowed\\n   * @param params Variadic packed params to pass to the receiver as extra information\\n   * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function flashLoanSimple(\\n    address receiverAddress,\\n    address asset,\\n    uint256 amount,\\n    bytes calldata params,\\n    uint16 referralCode\\n  ) external;\\n\\n  /**\\n   * @notice Returns the user account data across all the reserves\\n   * @param user The address of the user\\n   * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\\n   * @return totalDebtBase The total debt of the user in the base currency used by the price feed\\n   * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\\n   * @return currentLiquidationThreshold The liquidation threshold of the user\\n   * @return ltv The loan to value of The user\\n   * @return healthFactor The current health factor of the user\\n   */\\n  function getUserAccountData(address user)\\n    external\\n    view\\n    returns (\\n      uint256 totalCollateralBase,\\n      uint256 totalDebtBase,\\n      uint256 availableBorrowsBase,\\n      uint256 currentLiquidationThreshold,\\n      uint256 ltv,\\n      uint256 healthFactor\\n    );\\n\\n  /**\\n   * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\\n   * interest rate strategy\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param aTokenAddress The address of the aToken that will be assigned to the reserve\\n   * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\\n   * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\\n   * @param interestRateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function initReserve(\\n    address asset,\\n    address aTokenAddress,\\n    address stableDebtAddress,\\n    address variableDebtAddress,\\n    address interestRateStrategyAddress\\n  ) external;\\n\\n  /**\\n   * @notice Drop a reserve\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   */\\n  function dropReserve(address asset) external;\\n\\n  /**\\n   * @notice Updates the address of the interest rate strategy contract\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param rateStrategyAddress The address of the interest rate strategy contract\\n   */\\n  function setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\\n    external;\\n\\n  /**\\n   * @notice Sets the configuration bitmap of the reserve as a whole\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param asset The address of the underlying asset of the reserve\\n   * @param configuration The new configuration bitmap\\n   */\\n  function setConfiguration(address asset, DataTypes.ReserveConfigurationMap calldata configuration)\\n    external;\\n\\n  /**\\n   * @notice Returns the configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The configuration of the reserve\\n   */\\n  function getConfiguration(address asset)\\n    external\\n    view\\n    returns (DataTypes.ReserveConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the configuration of the user across all the reserves\\n   * @param user The user address\\n   * @return The configuration of the user\\n   */\\n  function getUserConfiguration(address user)\\n    external\\n    view\\n    returns (DataTypes.UserConfigurationMap memory);\\n\\n  /**\\n   * @notice Returns the normalized income of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve's normalized income\\n   */\\n  function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the normalized variable debt per unit of asset\\n   * @dev WARNING: This function is intended to be used primarily by the protocol itself to get a\\n   * \\\"dynamic\\\" variable index based on time, current stored index and virtual rate at the current\\n   * moment (approx. a borrower would get if opening a position). This means that is always used in\\n   * combination with variable debt supply/balances.\\n   * If using this function externally, consider that is possible to have an increasing normalized\\n   * variable debt that is not equivalent to how the variable debt index would be updated in storage\\n   * (e.g. only updates with non-zero variable debt supply)\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The reserve normalized variable debt\\n   */\\n  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the state and configuration of the reserve\\n   * @param asset The address of the underlying asset of the reserve\\n   * @return The state and configuration data of the reserve\\n   */\\n  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\\n\\n  /**\\n   * @notice Validates and finalizes an aToken transfer\\n   * @dev Only callable by the overlying aToken of the `asset`\\n   * @param asset The address of the underlying asset of the aToken\\n   * @param from The user from which the aTokens are transferred\\n   * @param to The user receiving the aTokens\\n   * @param amount The amount being transferred/withdrawn\\n   * @param balanceFromBefore The aToken balance of the `from` user before the transfer\\n   * @param balanceToBefore The aToken balance of the `to` user before the transfer\\n   */\\n  function finalizeTransfer(\\n    address asset,\\n    address from,\\n    address to,\\n    uint256 amount,\\n    uint256 balanceFromBefore,\\n    uint256 balanceToBefore\\n  ) external;\\n\\n  /**\\n   * @notice Returns the list of the underlying assets of all the initialized reserves\\n   * @dev It does not include dropped reserves\\n   * @return The addresses of the underlying assets of the initialized reserves\\n   */\\n  function getReservesList() external view returns (address[] memory);\\n\\n  /**\\n   * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\\n   * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\\n   * @return The address of the reserve associated with id\\n   */\\n  function getReserveAddressById(uint16 id) external view returns (address);\\n\\n  /**\\n   * @notice Returns the PoolAddressesProvider connected to this contract\\n   * @return The address of the PoolAddressesProvider\\n   */\\n  function ADDRESSES_PROVIDER() external view returns (IPoolAddressesProvider);\\n\\n  /**\\n   * @notice Updates the protocol fee on the bridging\\n   * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\\n   */\\n  function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\\n\\n  /**\\n   * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\\n   * - A part is sent to aToken holders as extra, one time accumulated interest\\n   * - A part is collected by the protocol treasury\\n   * @dev The total premium is calculated on the total borrowed amount\\n   * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\\n   * @dev Only callable by the PoolConfigurator contract\\n   * @param flashLoanPremiumTotal The total premium, expressed in bps\\n   * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\\n   */\\n  function updateFlashloanPremiums(\\n    uint128 flashLoanPremiumTotal,\\n    uint128 flashLoanPremiumToProtocol\\n  ) external;\\n\\n  /**\\n   * @notice Configures a new category for the eMode.\\n   * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\\n   * The category 0 is reserved as it's the default for volatile assets\\n   * @param id The id of the category\\n   * @param config The configuration of the category\\n   */\\n  function configureEModeCategory(uint8 id, DataTypes.EModeCategory memory config) external;\\n\\n  /**\\n   * @notice Returns the data of an eMode category\\n   * @param id The id of the category\\n   * @return The configuration data of the category\\n   */\\n  function getEModeCategoryData(uint8 id) external view returns (DataTypes.EModeCategory memory);\\n\\n  /**\\n   * @notice Allows a user to use the protocol in eMode\\n   * @param categoryId The id of the category\\n   */\\n  function setUserEMode(uint8 categoryId) external;\\n\\n  /**\\n   * @notice Returns the eMode the user is using\\n   * @param user The address of the user\\n   * @return The eMode id\\n   */\\n  function getUserEMode(address user) external view returns (uint256);\\n\\n  /**\\n   * @notice Resets the isolation mode total debt of the given asset to zero\\n   * @dev It requires the given asset has zero debt ceiling\\n   * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\\n   */\\n  function resetIsolationModeTotalDebt(address asset) external;\\n\\n  /**\\n   * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\\n   * @return The percentage of available liquidity to borrow, expressed in bps\\n   */\\n  function MAX_STABLE_RATE_BORROW_SIZE_PERCENT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the total fee on flash loans\\n   * @return The total fee on flashloans\\n   */\\n  function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the part of the bridge fees sent to protocol\\n   * @return The bridge fee sent to the protocol treasury\\n   */\\n  function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the part of the flashloan fees sent to protocol\\n   * @return The flashloan fee sent to the protocol treasury\\n   */\\n  function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\\n\\n  /**\\n   * @notice Returns the maximum number of reserves supported to be listed in this Pool\\n   * @return The maximum number of reserves supported\\n   */\\n  function MAX_NUMBER_RESERVES() external view returns (uint16);\\n\\n  /**\\n   * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\\n   * @param assets The list of reserves for which the minting needs to be executed\\n   */\\n  function mintToTreasury(address[] calldata assets) external;\\n\\n  /**\\n   * @notice Rescue and transfer tokens locked in this contract\\n   * @param token The address of the token\\n   * @param to The address of the recipient\\n   * @param amount The amount of token to transfer\\n   */\\n  function rescueTokens(\\n    address token,\\n    address to,\\n    uint256 amount\\n  ) external;\\n\\n  /**\\n   * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\\n   * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\\n   * @dev Deprecated: Use the `supply` function instead\\n   * @param asset The address of the underlying asset to supply\\n   * @param amount The amount to be supplied\\n   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\\n   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\\n   *   is a different wallet\\n   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\\n   *   0 if the action is executed directly by the user, without any middle-man\\n   */\\n  function deposit(\\n    address asset,\\n    uint256 amount,\\n    address onBehalfOf,\\n    uint16 referralCode\\n  ) external;\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPoolAddressesProvider\\n * @author Aave\\n * @notice Defines the basic interface for a Pool Addresses Provider.\\n */\\ninterface IPoolAddressesProvider {\\n  /**\\n   * @dev Emitted when the market identifier is updated.\\n   * @param oldMarketId The old id of the market\\n   * @param newMarketId The new id of the market\\n   */\\n  event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\\n\\n  /**\\n   * @dev Emitted when the pool is updated.\\n   * @param oldAddress The old address of the Pool\\n   * @param newAddress The new address of the Pool\\n   */\\n  event PoolUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool configurator is updated.\\n   * @param oldAddress The old address of the PoolConfigurator\\n   * @param newAddress The new address of the PoolConfigurator\\n   */\\n  event PoolConfiguratorUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle is updated.\\n   * @param oldAddress The old address of the PriceOracle\\n   * @param newAddress The new address of the PriceOracle\\n   */\\n  event PriceOracleUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL manager is updated.\\n   * @param oldAddress The old address of the ACLManager\\n   * @param newAddress The new address of the ACLManager\\n   */\\n  event ACLManagerUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the ACL admin is updated.\\n   * @param oldAddress The old address of the ACLAdmin\\n   * @param newAddress The new address of the ACLAdmin\\n   */\\n  event ACLAdminUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the price oracle sentinel is updated.\\n   * @param oldAddress The old address of the PriceOracleSentinel\\n   * @param newAddress The new address of the PriceOracleSentinel\\n   */\\n  event PriceOracleSentinelUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the pool data provider is updated.\\n   * @param oldAddress The old address of the PoolDataProvider\\n   * @param newAddress The new address of the PoolDataProvider\\n   */\\n  event PoolDataProviderUpdated(address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when a new proxy is created.\\n   * @param id The identifier of the proxy\\n   * @param proxyAddress The address of the created proxy contract\\n   * @param implementationAddress The address of the implementation contract\\n   */\\n  event ProxyCreated(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address indexed implementationAddress\\n  );\\n\\n  /**\\n   * @dev Emitted when a new non-proxied contract address is registered.\\n   * @param id The identifier of the contract\\n   * @param oldAddress The address of the old contract\\n   * @param newAddress The address of the new contract\\n   */\\n  event AddressSet(bytes32 indexed id, address indexed oldAddress, address indexed newAddress);\\n\\n  /**\\n   * @dev Emitted when the implementation of the proxy registered with id is updated\\n   * @param id The identifier of the contract\\n   * @param proxyAddress The address of the proxy contract\\n   * @param oldImplementationAddress The address of the old implementation contract\\n   * @param newImplementationAddress The address of the new implementation contract\\n   */\\n  event AddressSetAsProxy(\\n    bytes32 indexed id,\\n    address indexed proxyAddress,\\n    address oldImplementationAddress,\\n    address indexed newImplementationAddress\\n  );\\n\\n  /**\\n   * @notice Returns the id of the Aave market to which this contract points to.\\n   * @return The market id\\n   */\\n  function getMarketId() external view returns (string memory);\\n\\n  /**\\n   * @notice Associates an id with a specific PoolAddressesProvider.\\n   * @dev This can be used to create an onchain registry of PoolAddressesProviders to\\n   * identify and validate multiple Aave markets.\\n   * @param newMarketId The market id\\n   */\\n  function setMarketId(string calldata newMarketId) external;\\n\\n  /**\\n   * @notice Returns an address by its identifier.\\n   * @dev The returned address might be an EOA or a contract, potentially proxied\\n   * @dev It returns ZERO if there is no registered address with the given id\\n   * @param id The id\\n   * @return The address of the registered for the specified id\\n   */\\n  function getAddress(bytes32 id) external view returns (address);\\n\\n  /**\\n   * @notice General function to update the implementation of a proxy registered with\\n   * certain `id`. If there is no proxy registered, it will instantiate one and\\n   * set as implementation the `newImplementationAddress`.\\n   * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\\n   * setter function, in order to avoid unexpected consequences\\n   * @param id The id\\n   * @param newImplementationAddress The address of the new implementation\\n   */\\n  function setAddressAsProxy(bytes32 id, address newImplementationAddress) external;\\n\\n  /**\\n   * @notice Sets an address for an id replacing the address saved in the addresses map.\\n   * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\\n   * @param id The id\\n   * @param newAddress The address to set\\n   */\\n  function setAddress(bytes32 id, address newAddress) external;\\n\\n  /**\\n   * @notice Returns the address of the Pool proxy.\\n   * @return The Pool proxy address\\n   */\\n  function getPool() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the Pool, or creates a proxy\\n   * setting the new `pool` implementation when the function is called for the first time.\\n   * @param newPoolImpl The new Pool implementation\\n   */\\n  function setPoolImpl(address newPoolImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the PoolConfigurator proxy.\\n   * @return The PoolConfigurator proxy address\\n   */\\n  function getPoolConfigurator() external view returns (address);\\n\\n  /**\\n   * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\\n   * setting the new `PoolConfigurator` implementation when the function is called for the first time.\\n   * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\\n   */\\n  function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle.\\n   * @return The address of the PriceOracle\\n   */\\n  function getPriceOracle() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle.\\n   * @param newPriceOracle The address of the new PriceOracle\\n   */\\n  function setPriceOracle(address newPriceOracle) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL manager.\\n   * @return The address of the ACLManager\\n   */\\n  function getACLManager() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL manager.\\n   * @param newAclManager The address of the new ACLManager\\n   */\\n  function setACLManager(address newAclManager) external;\\n\\n  /**\\n   * @notice Returns the address of the ACL admin.\\n   * @return The address of the ACL admin\\n   */\\n  function getACLAdmin() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the ACL admin.\\n   * @param newAclAdmin The address of the new ACL admin\\n   */\\n  function setACLAdmin(address newAclAdmin) external;\\n\\n  /**\\n   * @notice Returns the address of the price oracle sentinel.\\n   * @return The address of the PriceOracleSentinel\\n   */\\n  function getPriceOracleSentinel() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the price oracle sentinel.\\n   * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\\n   */\\n  function setPriceOracleSentinel(address newPriceOracleSentinel) external;\\n\\n  /**\\n   * @notice Returns the address of the data provider.\\n   * @return The address of the DataProvider\\n   */\\n  function getPoolDataProvider() external view returns (address);\\n\\n  /**\\n   * @notice Updates the address of the data provider.\\n   * @param newDataProvider The address of the new DataProvider\\n   */\\n  function setPoolDataProvider(address newDataProvider) external;\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/interfaces/IPriceOracleGetter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPriceOracleGetter\\n * @author Aave\\n * @notice Interface for the Aave price oracle.\\n */\\ninterface IPriceOracleGetter {\\n  /**\\n   * @notice Returns the base currency address\\n   * @dev Address 0x0 is reserved for USD as base currency.\\n   * @return Returns the base currency address.\\n   */\\n  function BASE_CURRENCY() external view returns (address);\\n\\n  /**\\n   * @notice Returns the base currency unit\\n   * @dev 1 ether for ETH, 1e8 for USD.\\n   * @return Returns the base currency unit.\\n   */\\n  function BASE_CURRENCY_UNIT() external view returns (uint256);\\n\\n  /**\\n   * @notice Returns the asset price in the base currency\\n   * @param asset The address of the asset\\n   * @return The price of the asset\\n   */\\n  function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport {Errors} from '../helpers/Errors.sol';\\nimport {DataTypes} from '../types/DataTypes.sol';\\n\\n/**\\n * @title ReserveConfiguration library\\n * @author Aave\\n * @notice Implements the bitmap logic to handle the reserve configuration\\n */\\nlibrary ReserveConfiguration {\\n  uint256 internal constant LTV_MASK =                       0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_THRESHOLD_MASK =     0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_BONUS_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFF; // prettier-ignore\\n  uint256 internal constant DECIMALS_MASK =                  0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant ACTIVE_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FROZEN_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWING_MASK =                 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant STABLE_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant PAUSED_MASK =                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_MASK =   0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SILOED_BORROWING_MASK =          0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant FLASHLOAN_ENABLED_MASK =         0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant RESERVE_FACTOR_MASK =            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant BORROW_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant SUPPLY_CAP_MASK =                0xFFFFFFFFFFFFFFFFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_MASK =  0xFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant EMODE_CATEGORY_MASK =            0xFFFFFFFFFFFFFFFFFFFF00FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant UNBACKED_MINT_CAP_MASK =         0xFFFFFFFFFFF000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n  uint256 internal constant DEBT_CEILING_MASK =              0xF0000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; // prettier-ignore\\n\\n  /// @dev For the LTV, the start bit is 0 (up to 15), hence no bitshifting is needed\\n  uint256 internal constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\\n  uint256 internal constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\\n  uint256 internal constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\\n  uint256 internal constant IS_ACTIVE_START_BIT_POSITION = 56;\\n  uint256 internal constant IS_FROZEN_START_BIT_POSITION = 57;\\n  uint256 internal constant BORROWING_ENABLED_START_BIT_POSITION = 58;\\n  uint256 internal constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\\n  uint256 internal constant IS_PAUSED_START_BIT_POSITION = 60;\\n  uint256 internal constant BORROWABLE_IN_ISOLATION_START_BIT_POSITION = 61;\\n  uint256 internal constant SILOED_BORROWING_START_BIT_POSITION = 62;\\n  uint256 internal constant FLASHLOAN_ENABLED_START_BIT_POSITION = 63;\\n  uint256 internal constant RESERVE_FACTOR_START_BIT_POSITION = 64;\\n  uint256 internal constant BORROW_CAP_START_BIT_POSITION = 80;\\n  uint256 internal constant SUPPLY_CAP_START_BIT_POSITION = 116;\\n  uint256 internal constant LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION = 152;\\n  uint256 internal constant EMODE_CATEGORY_START_BIT_POSITION = 168;\\n  uint256 internal constant UNBACKED_MINT_CAP_START_BIT_POSITION = 176;\\n  uint256 internal constant DEBT_CEILING_START_BIT_POSITION = 212;\\n\\n  uint256 internal constant MAX_VALID_LTV = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_BONUS = 65535;\\n  uint256 internal constant MAX_VALID_DECIMALS = 255;\\n  uint256 internal constant MAX_VALID_RESERVE_FACTOR = 65535;\\n  uint256 internal constant MAX_VALID_BORROW_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_SUPPLY_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_LIQUIDATION_PROTOCOL_FEE = 65535;\\n  uint256 internal constant MAX_VALID_EMODE_CATEGORY = 255;\\n  uint256 internal constant MAX_VALID_UNBACKED_MINT_CAP = 68719476735;\\n  uint256 internal constant MAX_VALID_DEBT_CEILING = 1099511627775;\\n\\n  uint256 public constant DEBT_CEILING_DECIMALS = 2;\\n  uint16 public constant MAX_RESERVES_COUNT = 128;\\n\\n  /**\\n   * @notice Sets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @param ltv The new ltv\\n   */\\n  function setLtv(DataTypes.ReserveConfigurationMap memory self, uint256 ltv) internal pure {\\n    require(ltv <= MAX_VALID_LTV, Errors.INVALID_LTV);\\n\\n    self.data = (self.data & LTV_MASK) | ltv;\\n  }\\n\\n  /**\\n   * @notice Gets the Loan to Value of the reserve\\n   * @param self The reserve configuration\\n   * @return The loan to value\\n   */\\n  function getLtv(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\\n    return self.data & ~LTV_MASK;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @param threshold The new liquidation threshold\\n   */\\n  function setLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self, uint256 threshold)\\n    internal\\n    pure\\n  {\\n    require(threshold <= MAX_VALID_LIQUIDATION_THRESHOLD, Errors.INVALID_LIQ_THRESHOLD);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_THRESHOLD_MASK) |\\n      (threshold << LIQUIDATION_THRESHOLD_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation threshold of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation threshold\\n   */\\n  function getLiquidationThreshold(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @param bonus The new liquidation bonus\\n   */\\n  function setLiquidationBonus(DataTypes.ReserveConfigurationMap memory self, uint256 bonus)\\n    internal\\n    pure\\n  {\\n    require(bonus <= MAX_VALID_LIQUIDATION_BONUS, Errors.INVALID_LIQ_BONUS);\\n\\n    self.data =\\n      (self.data & LIQUIDATION_BONUS_MASK) |\\n      (bonus << LIQUIDATION_BONUS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the liquidation bonus of the reserve\\n   * @param self The reserve configuration\\n   * @return The liquidation bonus\\n   */\\n  function getLiquidationBonus(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @param decimals The decimals\\n   */\\n  function setDecimals(DataTypes.ReserveConfigurationMap memory self, uint256 decimals)\\n    internal\\n    pure\\n  {\\n    require(decimals <= MAX_VALID_DECIMALS, Errors.INVALID_DECIMALS);\\n\\n    self.data = (self.data & DECIMALS_MASK) | (decimals << RESERVE_DECIMALS_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the decimals of the underlying asset of the reserve\\n   * @param self The reserve configuration\\n   * @return The decimals of the asset\\n   */\\n  function getDecimals(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @param active The active state\\n   */\\n  function setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\\n    self.data =\\n      (self.data & ACTIVE_MASK) |\\n      (uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the active state of the reserve\\n   * @param self The reserve configuration\\n   * @return The active state\\n   */\\n  function getActive(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~ACTIVE_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @param frozen The frozen state\\n   */\\n  function setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\\n    self.data =\\n      (self.data & FROZEN_MASK) |\\n      (uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the frozen state of the reserve\\n   * @param self The reserve configuration\\n   * @return The frozen state\\n   */\\n  function getFrozen(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~FROZEN_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @param paused The paused state\\n   */\\n  function setPaused(DataTypes.ReserveConfigurationMap memory self, bool paused) internal pure {\\n    self.data =\\n      (self.data & PAUSED_MASK) |\\n      (uint256(paused ? 1 : 0) << IS_PAUSED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the paused state of the reserve\\n   * @param self The reserve configuration\\n   * @return The paused state\\n   */\\n  function getPaused(DataTypes.ReserveConfigurationMap memory self) internal pure returns (bool) {\\n    return (self.data & ~PAUSED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the borrowable in isolation flag for the reserve.\\n   * @dev When this flag is set to true, the asset will be borrowable against isolated collaterals and the borrowed\\n   * amount will be accumulated in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @param borrowable True if the asset is borrowable\\n   */\\n  function setBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self, bool borrowable)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWABLE_IN_ISOLATION_MASK) |\\n      (uint256(borrowable ? 1 : 0) << BORROWABLE_IN_ISOLATION_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowable in isolation flag for the reserve.\\n   * @dev If the returned flag is true, the asset is borrowable against isolated collateral. Assets borrowed with\\n   * isolated collateral is accounted for in the isolated collateral's total debt exposure.\\n   * @dev Only assets of the same family (eg USD stablecoins) should be borrowable in isolation mode to keep\\n   * consistency in the debt ceiling calculations.\\n   * @param self The reserve configuration\\n   * @return The borrowable in isolation flag\\n   */\\n  function getBorrowableInIsolation(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWABLE_IN_ISOLATION_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @param siloed True if the asset is siloed\\n   */\\n  function setSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self, bool siloed)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & SILOED_BORROWING_MASK) |\\n      (uint256(siloed ? 1 : 0) << SILOED_BORROWING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the siloed borrowing flag for the reserve.\\n   * @dev When this flag is set to true, users borrowing this asset will not be allowed to borrow any other asset.\\n   * @param self The reserve configuration\\n   * @return The siloed borrowing flag\\n   */\\n  function getSiloedBorrowing(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~SILOED_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the borrowing needs to be enabled, false otherwise\\n   */\\n  function setBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self, bool enabled)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrowing state\\n   */\\n  function getBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Enables or disables stable rate borrowing on the reserve\\n   * @param self The reserve configuration\\n   * @param enabled True if the stable rate borrowing needs to be enabled, false otherwise\\n   */\\n  function setStableRateBorrowingEnabled(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    bool enabled\\n  ) internal pure {\\n    self.data =\\n      (self.data & STABLE_BORROWING_MASK) |\\n      (uint256(enabled ? 1 : 0) << STABLE_BORROWING_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the stable rate borrowing state of the reserve\\n   * @param self The reserve configuration\\n   * @return The stable rate borrowing state\\n   */\\n  function getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~STABLE_BORROWING_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Sets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @param reserveFactor The reserve factor\\n   */\\n  function setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\\n    internal\\n    pure\\n  {\\n    require(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.INVALID_RESERVE_FACTOR);\\n\\n    self.data =\\n      (self.data & RESERVE_FACTOR_MASK) |\\n      (reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the reserve factor of the reserve\\n   * @param self The reserve configuration\\n   * @return The reserve factor\\n   */\\n  function getReserveFactor(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @param borrowCap The borrow cap\\n   */\\n  function setBorrowCap(DataTypes.ReserveConfigurationMap memory self, uint256 borrowCap)\\n    internal\\n    pure\\n  {\\n    require(borrowCap <= MAX_VALID_BORROW_CAP, Errors.INVALID_BORROW_CAP);\\n\\n    self.data = (self.data & BORROW_CAP_MASK) | (borrowCap << BORROW_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the borrow cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The borrow cap\\n   */\\n  function getBorrowCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @param supplyCap The supply cap\\n   */\\n  function setSupplyCap(DataTypes.ReserveConfigurationMap memory self, uint256 supplyCap)\\n    internal\\n    pure\\n  {\\n    require(supplyCap <= MAX_VALID_SUPPLY_CAP, Errors.INVALID_SUPPLY_CAP);\\n\\n    self.data = (self.data & SUPPLY_CAP_MASK) | (supplyCap << SUPPLY_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the supply cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The supply cap\\n   */\\n  function getSupplyCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the debt ceiling in isolation mode for the asset\\n   * @param self The reserve configuration\\n   * @param ceiling The maximum debt ceiling for the asset\\n   */\\n  function setDebtCeiling(DataTypes.ReserveConfigurationMap memory self, uint256 ceiling)\\n    internal\\n    pure\\n  {\\n    require(ceiling <= MAX_VALID_DEBT_CEILING, Errors.INVALID_DEBT_CEILING);\\n\\n    self.data = (self.data & DEBT_CEILING_MASK) | (ceiling << DEBT_CEILING_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the debt ceiling for the asset if the asset is in isolation mode\\n   * @param self The reserve configuration\\n   * @return The debt ceiling (0 = isolation mode disabled)\\n   */\\n  function getDebtCeiling(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~DEBT_CEILING_MASK) >> DEBT_CEILING_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the liquidation protocol fee of the reserve\\n   * @param self The reserve configuration\\n   * @param liquidationProtocolFee The liquidation protocol fee\\n   */\\n  function setLiquidationProtocolFee(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 liquidationProtocolFee\\n  ) internal pure {\\n    require(\\n      liquidationProtocolFee <= MAX_VALID_LIQUIDATION_PROTOCOL_FEE,\\n      Errors.INVALID_LIQUIDATION_PROTOCOL_FEE\\n    );\\n\\n    self.data =\\n      (self.data & LIQUIDATION_PROTOCOL_FEE_MASK) |\\n      (liquidationProtocolFee << LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the liquidation protocol fee\\n   * @param self The reserve configuration\\n   * @return The liquidation protocol fee\\n   */\\n  function getLiquidationProtocolFee(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return\\n      (self.data & ~LIQUIDATION_PROTOCOL_FEE_MASK) >> LIQUIDATION_PROTOCOL_FEE_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @param unbackedMintCap The unbacked mint cap\\n   */\\n  function setUnbackedMintCap(\\n    DataTypes.ReserveConfigurationMap memory self,\\n    uint256 unbackedMintCap\\n  ) internal pure {\\n    require(unbackedMintCap <= MAX_VALID_UNBACKED_MINT_CAP, Errors.INVALID_UNBACKED_MINT_CAP);\\n\\n    self.data =\\n      (self.data & UNBACKED_MINT_CAP_MASK) |\\n      (unbackedMintCap << UNBACKED_MINT_CAP_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the unbacked mint cap of the reserve\\n   * @param self The reserve configuration\\n   * @return The unbacked mint cap\\n   */\\n  function getUnbackedMintCap(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~UNBACKED_MINT_CAP_MASK) >> UNBACKED_MINT_CAP_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the eMode asset category\\n   * @param self The reserve configuration\\n   * @param category The asset category when the user selects the eMode\\n   */\\n  function setEModeCategory(DataTypes.ReserveConfigurationMap memory self, uint256 category)\\n    internal\\n    pure\\n  {\\n    require(category <= MAX_VALID_EMODE_CATEGORY, Errors.INVALID_EMODE_CATEGORY);\\n\\n    self.data = (self.data & EMODE_CATEGORY_MASK) | (category << EMODE_CATEGORY_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @dev Gets the eMode asset category\\n   * @param self The reserve configuration\\n   * @return The eMode category for the asset\\n   */\\n  function getEModeCategory(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256)\\n  {\\n    return (self.data & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION;\\n  }\\n\\n  /**\\n   * @notice Sets the flashloanable flag for the reserve\\n   * @param self The reserve configuration\\n   * @param flashLoanEnabled True if the asset is flashloanable, false otherwise\\n   */\\n  function setFlashLoanEnabled(DataTypes.ReserveConfigurationMap memory self, bool flashLoanEnabled)\\n    internal\\n    pure\\n  {\\n    self.data =\\n      (self.data & FLASHLOAN_ENABLED_MASK) |\\n      (uint256(flashLoanEnabled ? 1 : 0) << FLASHLOAN_ENABLED_START_BIT_POSITION);\\n  }\\n\\n  /**\\n   * @notice Gets the flashloanable flag for the reserve\\n   * @param self The reserve configuration\\n   * @return The flashloanable flag\\n   */\\n  function getFlashLoanEnabled(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (bool)\\n  {\\n    return (self.data & ~FLASHLOAN_ENABLED_MASK) != 0;\\n  }\\n\\n  /**\\n   * @notice Gets the configuration flags of the reserve\\n   * @param self The reserve configuration\\n   * @return The state flag representing active\\n   * @return The state flag representing frozen\\n   * @return The state flag representing borrowing enabled\\n   * @return The state flag representing stableRateBorrowing enabled\\n   * @return The state flag representing paused\\n   */\\n  function getFlags(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      bool,\\n      bool,\\n      bool,\\n      bool,\\n      bool\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~ACTIVE_MASK) != 0,\\n      (dataLocal & ~FROZEN_MASK) != 0,\\n      (dataLocal & ~BORROWING_MASK) != 0,\\n      (dataLocal & ~STABLE_BORROWING_MASK) != 0,\\n      (dataLocal & ~PAUSED_MASK) != 0\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the configuration parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing ltv\\n   * @return The state param representing liquidation threshold\\n   * @return The state param representing liquidation bonus\\n   * @return The state param representing reserve decimals\\n   * @return The state param representing reserve factor\\n   * @return The state param representing eMode category\\n   */\\n  function getParams(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256,\\n      uint256\\n    )\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      dataLocal & ~LTV_MASK,\\n      (dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\\n      (dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\\n      (dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\\n      (dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION,\\n      (dataLocal & ~EMODE_CATEGORY_MASK) >> EMODE_CATEGORY_START_BIT_POSITION\\n    );\\n  }\\n\\n  /**\\n   * @notice Gets the caps parameters of the reserve from storage\\n   * @param self The reserve configuration\\n   * @return The state param representing borrow cap\\n   * @return The state param representing supply cap.\\n   */\\n  function getCaps(DataTypes.ReserveConfigurationMap memory self)\\n    internal\\n    pure\\n    returns (uint256, uint256)\\n  {\\n    uint256 dataLocal = self.data;\\n\\n    return (\\n      (dataLocal & ~BORROW_CAP_MASK) >> BORROW_CAP_START_BIT_POSITION,\\n      (dataLocal & ~SUPPLY_CAP_MASK) >> SUPPLY_CAP_START_BIT_POSITION\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/protocol/libraries/helpers/Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Errors library\\n * @author Aave\\n * @notice Defines the error messages emitted by the different contracts of the Aave protocol\\n */\\nlibrary Errors {\\n  string public constant CALLER_NOT_POOL_ADMIN = '1'; // 'The caller of the function is not a pool admin'\\n  string public constant CALLER_NOT_EMERGENCY_ADMIN = '2'; // 'The caller of the function is not an emergency admin'\\n  string public constant CALLER_NOT_POOL_OR_EMERGENCY_ADMIN = '3'; // 'The caller of the function is not a pool or emergency admin'\\n  string public constant CALLER_NOT_RISK_OR_POOL_ADMIN = '4'; // 'The caller of the function is not a risk or pool admin'\\n  string public constant CALLER_NOT_ASSET_LISTING_OR_POOL_ADMIN = '5'; // 'The caller of the function is not an asset listing or pool admin'\\n  string public constant CALLER_NOT_BRIDGE = '6'; // 'The caller of the function is not a bridge'\\n  string public constant ADDRESSES_PROVIDER_NOT_REGISTERED = '7'; // 'Pool addresses provider is not registered'\\n  string public constant INVALID_ADDRESSES_PROVIDER_ID = '8'; // 'Invalid id for the pool addresses provider'\\n  string public constant NOT_CONTRACT = '9'; // 'Address is not a contract'\\n  string public constant CALLER_NOT_POOL_CONFIGURATOR = '10'; // 'The caller of the function is not the pool configurator'\\n  string public constant CALLER_NOT_ATOKEN = '11'; // 'The caller of the function is not an AToken'\\n  string public constant INVALID_ADDRESSES_PROVIDER = '12'; // 'The address of the pool addresses provider is invalid'\\n  string public constant INVALID_FLASHLOAN_EXECUTOR_RETURN = '13'; // 'Invalid return value of the flashloan executor function'\\n  string public constant RESERVE_ALREADY_ADDED = '14'; // 'Reserve has already been added to reserve list'\\n  string public constant NO_MORE_RESERVES_ALLOWED = '15'; // 'Maximum amount of reserves in the pool reached'\\n  string public constant EMODE_CATEGORY_RESERVED = '16'; // 'Zero eMode category is reserved for volatile heterogeneous assets'\\n  string public constant INVALID_EMODE_CATEGORY_ASSIGNMENT = '17'; // 'Invalid eMode category assignment to asset'\\n  string public constant RESERVE_LIQUIDITY_NOT_ZERO = '18'; // 'The liquidity of the reserve needs to be 0'\\n  string public constant FLASHLOAN_PREMIUM_INVALID = '19'; // 'Invalid flashloan premium'\\n  string public constant INVALID_RESERVE_PARAMS = '20'; // 'Invalid risk parameters for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY_PARAMS = '21'; // 'Invalid risk parameters for the eMode category'\\n  string public constant BRIDGE_PROTOCOL_FEE_INVALID = '22'; // 'Invalid bridge protocol fee'\\n  string public constant CALLER_MUST_BE_POOL = '23'; // 'The caller of this function must be a pool'\\n  string public constant INVALID_MINT_AMOUNT = '24'; // 'Invalid amount to mint'\\n  string public constant INVALID_BURN_AMOUNT = '25'; // 'Invalid amount to burn'\\n  string public constant INVALID_AMOUNT = '26'; // 'Amount must be greater than 0'\\n  string public constant RESERVE_INACTIVE = '27'; // 'Action requires an active reserve'\\n  string public constant RESERVE_FROZEN = '28'; // 'Action cannot be performed because the reserve is frozen'\\n  string public constant RESERVE_PAUSED = '29'; // 'Action cannot be performed because the reserve is paused'\\n  string public constant BORROWING_NOT_ENABLED = '30'; // 'Borrowing is not enabled'\\n  string public constant STABLE_BORROWING_NOT_ENABLED = '31'; // 'Stable borrowing is not enabled'\\n  string public constant NOT_ENOUGH_AVAILABLE_USER_BALANCE = '32'; // 'User cannot withdraw more than the available balance'\\n  string public constant INVALID_INTEREST_RATE_MODE_SELECTED = '33'; // 'Invalid interest rate mode selected'\\n  string public constant COLLATERAL_BALANCE_IS_ZERO = '34'; // 'The collateral balance is 0'\\n  string public constant HEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD = '35'; // 'Health factor is lesser than the liquidation threshold'\\n  string public constant COLLATERAL_CANNOT_COVER_NEW_BORROW = '36'; // 'There is not enough collateral to cover a new borrow'\\n  string public constant COLLATERAL_SAME_AS_BORROWING_CURRENCY = '37'; // 'Collateral is (mostly) the same currency that is being borrowed'\\n  string public constant AMOUNT_BIGGER_THAN_MAX_LOAN_SIZE_STABLE = '38'; // 'The requested amount is greater than the max loan size in stable rate mode'\\n  string public constant NO_DEBT_OF_SELECTED_TYPE = '39'; // 'For repayment of a specific type of debt, the user needs to have debt that type'\\n  string public constant NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF = '40'; // 'To repay on behalf of a user an explicit amount to repay is needed'\\n  string public constant NO_OUTSTANDING_STABLE_DEBT = '41'; // 'User does not have outstanding stable rate debt on this reserve'\\n  string public constant NO_OUTSTANDING_VARIABLE_DEBT = '42'; // 'User does not have outstanding variable rate debt on this reserve'\\n  string public constant UNDERLYING_BALANCE_ZERO = '43'; // 'The underlying balance needs to be greater than 0'\\n  string public constant INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET = '44'; // 'Interest rate rebalance conditions were not met'\\n  string public constant HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '45'; // 'Health factor is not below the threshold'\\n  string public constant COLLATERAL_CANNOT_BE_LIQUIDATED = '46'; // 'The collateral chosen cannot be liquidated'\\n  string public constant SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '47'; // 'User did not borrow the specified currency'\\n  string public constant INCONSISTENT_FLASHLOAN_PARAMS = '49'; // 'Inconsistent flashloan parameters'\\n  string public constant BORROW_CAP_EXCEEDED = '50'; // 'Borrow cap is exceeded'\\n  string public constant SUPPLY_CAP_EXCEEDED = '51'; // 'Supply cap is exceeded'\\n  string public constant UNBACKED_MINT_CAP_EXCEEDED = '52'; // 'Unbacked mint cap is exceeded'\\n  string public constant DEBT_CEILING_EXCEEDED = '53'; // 'Debt ceiling is exceeded'\\n  string public constant UNDERLYING_CLAIMABLE_RIGHTS_NOT_ZERO = '54'; // 'Claimable rights over underlying not zero (aToken supply or accruedToTreasury)'\\n  string public constant STABLE_DEBT_NOT_ZERO = '55'; // 'Stable debt supply is not zero'\\n  string public constant VARIABLE_DEBT_SUPPLY_NOT_ZERO = '56'; // 'Variable debt supply is not zero'\\n  string public constant LTV_VALIDATION_FAILED = '57'; // 'Ltv validation failed'\\n  string public constant INCONSISTENT_EMODE_CATEGORY = '58'; // 'Inconsistent eMode category'\\n  string public constant PRICE_ORACLE_SENTINEL_CHECK_FAILED = '59'; // 'Price oracle sentinel validation failed'\\n  string public constant ASSET_NOT_BORROWABLE_IN_ISOLATION = '60'; // 'Asset is not borrowable in isolation mode'\\n  string public constant RESERVE_ALREADY_INITIALIZED = '61'; // 'Reserve has already been initialized'\\n  string public constant USER_IN_ISOLATION_MODE = '62'; // 'User is in isolation mode'\\n  string public constant INVALID_LTV = '63'; // 'Invalid ltv parameter for the reserve'\\n  string public constant INVALID_LIQ_THRESHOLD = '64'; // 'Invalid liquidity threshold parameter for the reserve'\\n  string public constant INVALID_LIQ_BONUS = '65'; // 'Invalid liquidity bonus parameter for the reserve'\\n  string public constant INVALID_DECIMALS = '66'; // 'Invalid decimals parameter of the underlying asset of the reserve'\\n  string public constant INVALID_RESERVE_FACTOR = '67'; // 'Invalid reserve factor parameter for the reserve'\\n  string public constant INVALID_BORROW_CAP = '68'; // 'Invalid borrow cap for the reserve'\\n  string public constant INVALID_SUPPLY_CAP = '69'; // 'Invalid supply cap for the reserve'\\n  string public constant INVALID_LIQUIDATION_PROTOCOL_FEE = '70'; // 'Invalid liquidation protocol fee for the reserve'\\n  string public constant INVALID_EMODE_CATEGORY = '71'; // 'Invalid eMode category for the reserve'\\n  string public constant INVALID_UNBACKED_MINT_CAP = '72'; // 'Invalid unbacked mint cap for the reserve'\\n  string public constant INVALID_DEBT_CEILING = '73'; // 'Invalid debt ceiling for the reserve\\n  string public constant INVALID_RESERVE_INDEX = '74'; // 'Invalid reserve index'\\n  string public constant ACL_ADMIN_CANNOT_BE_ZERO = '75'; // 'ACL admin cannot be set to the zero address'\\n  string public constant INCONSISTENT_PARAMS_LENGTH = '76'; // 'Array parameters that should be equal length are not'\\n  string public constant ZERO_ADDRESS_NOT_VALID = '77'; // 'Zero address not valid'\\n  string public constant INVALID_EXPIRATION = '78'; // 'Invalid expiration'\\n  string public constant INVALID_SIGNATURE = '79'; // 'Invalid signature'\\n  string public constant OPERATION_NOT_SUPPORTED = '80'; // 'Operation not supported'\\n  string public constant DEBT_CEILING_NOT_ZERO = '81'; // 'Debt ceiling is not zero'\\n  string public constant ASSET_NOT_LISTED = '82'; // 'Asset is not listed'\\n  string public constant INVALID_OPTIMAL_USAGE_RATIO = '83'; // 'Invalid optimal usage ratio'\\n  string public constant INVALID_OPTIMAL_STABLE_TO_TOTAL_DEBT_RATIO = '84'; // 'Invalid optimal stable to total debt ratio'\\n  string public constant UNDERLYING_CANNOT_BE_RESCUED = '85'; // 'The underlying asset cannot be rescued'\\n  string public constant ADDRESSES_PROVIDER_ALREADY_ADDED = '86'; // 'Reserve has already been added to reserve list'\\n  string public constant POOL_ADDRESSES_DO_NOT_MATCH = '87'; // 'The token implementation pool address and the pool address provided by the initializing pool do not match'\\n  string public constant STABLE_BORROWING_ENABLED = '88'; // 'Stable borrowing is enabled'\\n  string public constant SILOED_BORROWING_VIOLATION = '89'; // 'User is trying to borrow multiple assets including a siloed one'\\n  string public constant RESERVE_DEBT_NOT_ZERO = '90'; // the total debt of the reserve needs to be 0\\n  string public constant FLASHLOAN_DISABLED = '91'; // FlashLoaning for this asset is disabled\\n}\\n\"\r\n    },\r\n    \"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary DataTypes {\\n  struct ReserveData {\\n    //stores the reserve configuration\\n    ReserveConfigurationMap configuration;\\n    //the liquidity index. Expressed in ray\\n    uint128 liquidityIndex;\\n    //the current supply rate. Expressed in ray\\n    uint128 currentLiquidityRate;\\n    //variable borrow index. Expressed in ray\\n    uint128 variableBorrowIndex;\\n    //the current variable borrow rate. Expressed in ray\\n    uint128 currentVariableBorrowRate;\\n    //the current stable borrow rate. Expressed in ray\\n    uint128 currentStableBorrowRate;\\n    //timestamp of last update\\n    uint40 lastUpdateTimestamp;\\n    //the id of the reserve. Represents the position in the list of the active reserves\\n    uint16 id;\\n    //aToken address\\n    address aTokenAddress;\\n    //stableDebtToken address\\n    address stableDebtTokenAddress;\\n    //variableDebtToken address\\n    address variableDebtTokenAddress;\\n    //address of the interest rate strategy\\n    address interestRateStrategyAddress;\\n    //the current treasury balance, scaled\\n    uint128 accruedToTreasury;\\n    //the outstanding unbacked aTokens minted through the bridging feature\\n    uint128 unbacked;\\n    //the outstanding debt borrowed against this asset in isolation mode\\n    uint128 isolationModeTotalDebt;\\n  }\\n\\n  struct ReserveConfigurationMap {\\n    //bit 0-15: LTV\\n    //bit 16-31: Liq. threshold\\n    //bit 32-47: Liq. bonus\\n    //bit 48-55: Decimals\\n    //bit 56: reserve is active\\n    //bit 57: reserve is frozen\\n    //bit 58: borrowing is enabled\\n    //bit 59: stable rate borrowing enabled\\n    //bit 60: asset is paused\\n    //bit 61: borrowing in isolation mode is enabled\\n    //bit 62-63: reserved\\n    //bit 64-79: reserve factor\\n    //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\\n    //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\\n    //bit 152-167 liquidation protocol fee\\n    //bit 168-175 eMode category\\n    //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\\n    //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\\n    //bit 252-255 unused\\n\\n    uint256 data;\\n  }\\n\\n  struct UserConfigurationMap {\\n    /**\\n     * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\\n     * The first bit indicates if an asset is used as collateral by the user, the second whether an\\n     * asset is borrowed by the user.\\n     */\\n    uint256 data;\\n  }\\n\\n  struct EModeCategory {\\n    // each eMode category has a custom ltv and liquidation threshold\\n    uint16 ltv;\\n    uint16 liquidationThreshold;\\n    uint16 liquidationBonus;\\n    // each eMode category may or may not have a custom oracle to override the individual assets price oracles\\n    address priceSource;\\n    string label;\\n  }\\n\\n  enum InterestRateMode {\\n    NONE,\\n    STABLE,\\n    VARIABLE\\n  }\\n\\n  struct ReserveCache {\\n    uint256 currScaledVariableDebt;\\n    uint256 nextScaledVariableDebt;\\n    uint256 currPrincipalStableDebt;\\n    uint256 currAvgStableBorrowRate;\\n    uint256 currTotalStableDebt;\\n    uint256 nextAvgStableBorrowRate;\\n    uint256 nextTotalStableDebt;\\n    uint256 currLiquidityIndex;\\n    uint256 nextLiquidityIndex;\\n    uint256 currVariableBorrowIndex;\\n    uint256 nextVariableBorrowIndex;\\n    uint256 currLiquidityRate;\\n    uint256 currVariableBorrowRate;\\n    uint256 reserveFactor;\\n    ReserveConfigurationMap reserveConfiguration;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    uint40 reserveLastUpdateTimestamp;\\n    uint40 stableDebtLastUpdateTimestamp;\\n  }\\n\\n  struct ExecuteLiquidationCallParams {\\n    uint256 reservesCount;\\n    uint256 debtToCover;\\n    address collateralAsset;\\n    address debtAsset;\\n    address user;\\n    bool receiveAToken;\\n    address priceOracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteSupplyParams {\\n    address asset;\\n    uint256 amount;\\n    address onBehalfOf;\\n    uint16 referralCode;\\n  }\\n\\n  struct ExecuteBorrowParams {\\n    address asset;\\n    address user;\\n    address onBehalfOf;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint16 referralCode;\\n    bool releaseUnderlying;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct ExecuteRepayParams {\\n    address asset;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    address onBehalfOf;\\n    bool useATokens;\\n  }\\n\\n  struct ExecuteWithdrawParams {\\n    address asset;\\n    uint256 amount;\\n    address to;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ExecuteSetUserEModeParams {\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 categoryId;\\n  }\\n\\n  struct FinalizeTransferParams {\\n    address asset;\\n    address from;\\n    address to;\\n    uint256 amount;\\n    uint256 balanceFromBefore;\\n    uint256 balanceToBefore;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 fromEModeCategory;\\n  }\\n\\n  struct FlashloanParams {\\n    address receiverAddress;\\n    address[] assets;\\n    uint256[] amounts;\\n    uint256[] interestRateModes;\\n    address onBehalfOf;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n    uint256 maxStableRateBorrowSizePercent;\\n    uint256 reservesCount;\\n    address addressesProvider;\\n    uint8 userEModeCategory;\\n    bool isAuthorizedFlashBorrower;\\n  }\\n\\n  struct FlashloanSimpleParams {\\n    address receiverAddress;\\n    address asset;\\n    uint256 amount;\\n    bytes params;\\n    uint16 referralCode;\\n    uint256 flashLoanPremiumToProtocol;\\n    uint256 flashLoanPremiumTotal;\\n  }\\n\\n  struct FlashLoanRepaymentParams {\\n    uint256 amount;\\n    uint256 totalPremium;\\n    uint256 flashLoanPremiumToProtocol;\\n    address asset;\\n    address receiverAddress;\\n    uint16 referralCode;\\n  }\\n\\n  struct CalculateUserAccountDataParams {\\n    UserConfigurationMap userConfig;\\n    uint256 reservesCount;\\n    address user;\\n    address oracle;\\n    uint8 userEModeCategory;\\n  }\\n\\n  struct ValidateBorrowParams {\\n    ReserveCache reserveCache;\\n    UserConfigurationMap userConfig;\\n    address asset;\\n    address userAddress;\\n    uint256 amount;\\n    InterestRateMode interestRateMode;\\n    uint256 maxStableLoanPercent;\\n    uint256 reservesCount;\\n    address oracle;\\n    uint8 userEModeCategory;\\n    address priceOracleSentinel;\\n    bool isolationModeActive;\\n    address isolationModeCollateralAddress;\\n    uint256 isolationModeDebtCeiling;\\n  }\\n\\n  struct ValidateLiquidationCallParams {\\n    ReserveCache debtReserveCache;\\n    uint256 totalDebt;\\n    uint256 healthFactor;\\n    address priceOracleSentinel;\\n  }\\n\\n  struct CalculateInterestRatesParams {\\n    uint256 unbacked;\\n    uint256 liquidityAdded;\\n    uint256 liquidityTaken;\\n    uint256 totalStableDebt;\\n    uint256 totalVariableDebt;\\n    uint256 averageStableBorrowRate;\\n    uint256 reserveFactor;\\n    address reserve;\\n    address aToken;\\n  }\\n\\n  struct InitReserveParams {\\n    address asset;\\n    address aTokenAddress;\\n    address stableDebtAddress;\\n    address variableDebtAddress;\\n    address interestRateStrategyAddress;\\n    uint16 reservesCount;\\n    uint16 maxNumberReserves;\\n  }\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/IAuthentication.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthentication {\\n    /**\\n     * @dev Returns the action identifier associated with the external function described by `selector`.\\n     */\\n    function getActionId(bytes4 selector) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ISignaturesValidator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the SignatureValidator helper, used to support meta-transactions.\\n */\\ninterface ISignaturesValidator {\\n    /**\\n     * @dev Returns the EIP712 domain separator.\\n     */\\n    function getDomainSeparator() external view returns (bytes32);\\n\\n    /**\\n     * @dev Returns the next nonce used by an address to sign messages.\\n     */\\n    function getNextNonce(address user) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/helpers/ITemporarilyPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface for the TemporarilyPausable helper.\\n */\\ninterface ITemporarilyPausable {\\n    /**\\n     * @dev Emitted every time the pause state changes by `_setPaused`.\\n     */\\n    event PausedStateChanged(bool paused);\\n\\n    /**\\n     * @dev Returns the current paused state.\\n     */\\n    function getPausedState()\\n        external\\n        view\\n        returns (\\n            bool paused,\\n            uint256 pauseWindowEndTime,\\n            uint256 bufferPeriodEndTime\\n        );\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/misc/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport \\\"../openzeppelin/IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for WETH9.\\n * See https://github.com/gnosis/canonical-weth/blob/0dd1ea3e295eef916d0c6223ec63141137d22d67/contracts/WETH9.sol\\n */\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/solidity-utils/openzeppelin/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IAsset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev This is an empty interface used to represent either ERC20-conforming token contracts or ETH (using the zero\\n * address sentinel value). We're just relying on the fact that `interface` can be used to declare new address-like\\n * types.\\n *\\n * This concept is unrelated to a Pool's Asset Managers.\\n */\\ninterface IAsset {\\n    // solhint-disable-previous-line no-empty-blocks\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IAuthorizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IAuthorizer {\\n    /**\\n     * @dev Returns true if `account` can perform the action described by `actionId` in the contract `where`.\\n     */\\n    function canPerform(\\n        bytes32 actionId,\\n        address account,\\n        address where\\n    ) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n// Inspired by Aave Protocol's IFlashLoanReceiver.\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\ninterface IFlashLoanRecipient {\\n    /**\\n     * @dev When `flashLoan` is called on the Vault, it invokes the `receiveFlashLoan` hook on the recipient.\\n     *\\n     * At the time of the call, the Vault will have transferred `amounts` for `tokens` to the recipient. Before this\\n     * call returns, the recipient must have transferred `amounts` plus `feeAmounts` for each token back to the\\n     * Vault, or else the entire flash loan will revert.\\n     *\\n     * `userData` is the same value passed in the `IVault.flashLoan` call.\\n     */\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IProtocolFeesCollector.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\n\\nimport \\\"./IVault.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\n\\ninterface IProtocolFeesCollector {\\n    event SwapFeePercentageChanged(uint256 newSwapFeePercentage);\\n    event FlashLoanFeePercentageChanged(uint256 newFlashLoanFeePercentage);\\n\\n    function withdrawCollectedFees(\\n        IERC20[] calldata tokens,\\n        uint256[] calldata amounts,\\n        address recipient\\n    ) external;\\n\\n    function setSwapFeePercentage(uint256 newSwapFeePercentage) external;\\n\\n    function setFlashLoanFeePercentage(uint256 newFlashLoanFeePercentage) external;\\n\\n    function getSwapFeePercentage() external view returns (uint256);\\n\\n    function getFlashLoanFeePercentage() external view returns (uint256);\\n\\n    function getCollectedFeeAmounts(IERC20[] memory tokens) external view returns (uint256[] memory feeAmounts);\\n\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    function vault() external view returns (IVault);\\n}\\n\"\r\n    },\r\n    \"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"../solidity-utils/openzeppelin/IERC20.sol\\\";\\nimport \\\"../solidity-utils/helpers/IAuthentication.sol\\\";\\nimport \\\"../solidity-utils/helpers/ISignaturesValidator.sol\\\";\\nimport \\\"../solidity-utils/helpers/ITemporarilyPausable.sol\\\";\\nimport \\\"../solidity-utils/misc/IWETH.sol\\\";\\n\\nimport \\\"./IAsset.sol\\\";\\nimport \\\"./IAuthorizer.sol\\\";\\nimport \\\"./IFlashLoanRecipient.sol\\\";\\nimport \\\"./IProtocolFeesCollector.sol\\\";\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @dev Full external interface for the Vault core contract - no external or public methods exist in the contract that\\n * don't override one of these declarations.\\n */\\ninterface IVault is ISignaturesValidator, ITemporarilyPausable, IAuthentication {\\n    // Generalities about the Vault:\\n    //\\n    // - Whenever documentation refers to 'tokens', it strictly refers to ERC20-compliant token contracts. Tokens are\\n    // transferred out of the Vault by calling the `IERC20.transfer` function, and transferred in by calling\\n    // `IERC20.transferFrom`. In these cases, the sender must have previously allowed the Vault to use their tokens by\\n    // calling `IERC20.approve`. The only deviation from the ERC20 standard that is supported is functions not returning\\n    // a boolean value: in these scenarios, a non-reverting call is assumed to be successful.\\n    //\\n    // - All non-view functions in the Vault are non-reentrant: calling them while another one is mid-execution (e.g.\\n    // while execution control is transferred to a token contract during a swap) will result in a revert. View\\n    // functions can be called in a re-reentrant way, but doing so might cause them to return inconsistent results.\\n    // Contracts calling view functions in the Vault must make sure the Vault has not already been entered.\\n    //\\n    // - View functions revert if referring to either unregistered Pools, or unregistered tokens for registered Pools.\\n\\n    // Authorizer\\n    //\\n    // Some system actions are permissioned, like setting and collecting protocol fees. This permissioning system exists\\n    // outside of the Vault in the Authorizer contract: the Vault simply calls the Authorizer to check if the caller\\n    // can perform a given action.\\n\\n    /**\\n     * @dev Returns the Vault's Authorizer.\\n     */\\n    function getAuthorizer() external view returns (IAuthorizer);\\n\\n    /**\\n     * @dev Sets a new Authorizer for the Vault. The caller must be allowed by the current Authorizer to do this.\\n     *\\n     * Emits an `AuthorizerChanged` event.\\n     */\\n    function setAuthorizer(IAuthorizer newAuthorizer) external;\\n\\n    /**\\n     * @dev Emitted when a new authorizer is set by `setAuthorizer`.\\n     */\\n    event AuthorizerChanged(IAuthorizer indexed newAuthorizer);\\n\\n    // Relayers\\n    //\\n    // Additionally, it is possible for an account to perform certain actions on behalf of another one, using their\\n    // Vault ERC20 allowance and Internal Balance. These accounts are said to be 'relayers' for these Vault functions,\\n    // and are expected to be smart contracts with sound authentication mechanisms. For an account to be able to wield\\n    // this power, two things must occur:\\n    //  - The Authorizer must grant the account the permission to be a relayer for the relevant Vault function. This\\n    //    means that Balancer governance must approve each individual contract to act as a relayer for the intended\\n    //    functions.\\n    //  - Each user must approve the relayer to act on their behalf.\\n    // This double protection means users cannot be tricked into approving malicious relayers (because they will not\\n    // have been allowed by the Authorizer via governance), nor can malicious relayers approved by a compromised\\n    // Authorizer or governance drain user funds, since they would also need to be approved by each individual user.\\n\\n    /**\\n     * @dev Returns true if `user` has approved `relayer` to act as a relayer for them.\\n     */\\n    function hasApprovedRelayer(address user, address relayer) external view returns (bool);\\n\\n    /**\\n     * @dev Allows `relayer` to act as a relayer for `sender` if `approved` is true, and disallows it otherwise.\\n     *\\n     * Emits a `RelayerApprovalChanged` event.\\n     */\\n    function setRelayerApproval(\\n        address sender,\\n        address relayer,\\n        bool approved\\n    ) external;\\n\\n    /**\\n     * @dev Emitted every time a relayer is approved or disapproved by `setRelayerApproval`.\\n     */\\n    event RelayerApprovalChanged(address indexed relayer, address indexed sender, bool approved);\\n\\n    // Internal Balance\\n    //\\n    // Users can deposit tokens into the Vault, where they are allocated to their Internal Balance, and later\\n    // transferred or withdrawn. It can also be used as a source of tokens when joining Pools, as a destination\\n    // when exiting them, and as either when performing swaps. This usage of Internal Balance results in greatly reduced\\n    // gas costs when compared to relying on plain ERC20 transfers, leading to large savings for frequent users.\\n    //\\n    // Internal Balance management features batching, which means a single contract call can be used to perform multiple\\n    // operations of different kinds, with different senders and recipients, at once.\\n\\n    /**\\n     * @dev Returns `user`'s Internal Balance for a set of tokens.\\n     */\\n    function getInternalBalance(address user, IERC20[] memory tokens) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Performs a set of user balance operations, which involve Internal Balance (deposit, withdraw or transfer)\\n     * and plain ERC20 transfers using the Vault's allowance. This last feature is particularly useful for relayers, as\\n     * it lets integrators reuse a user's Vault allowance.\\n     *\\n     * For each operation, if the caller is not `sender`, it must be an authorized relayer for them.\\n     */\\n    function manageUserBalance(UserBalanceOp[] memory ops) external payable;\\n\\n    /**\\n     * @dev Data for `manageUserBalance` operations, which include the possibility for ETH to be sent and received\\n     without manual WETH wrapping or unwrapping.\\n     */\\n    struct UserBalanceOp {\\n        UserBalanceOpKind kind;\\n        IAsset asset;\\n        uint256 amount;\\n        address sender;\\n        address payable recipient;\\n    }\\n\\n    // There are four possible operations in `manageUserBalance`:\\n    //\\n    // - DEPOSIT_INTERNAL\\n    // Increases the Internal Balance of the `recipient` account by transferring tokens from the corresponding\\n    // `sender`. The sender must have allowed the Vault to use their tokens via `IERC20.approve()`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset and forwarding ETH in the call: it will be wrapped\\n    // and deposited as WETH. Any ETH amount remaining will be sent back to the caller (not the sender, which is\\n    // relevant for relayers).\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - WITHDRAW_INTERNAL\\n    // Decreases the Internal Balance of the `sender` account by transferring tokens to the `recipient`.\\n    //\\n    // ETH can be used by passing the ETH sentinel value as the asset. This will deduct WETH instead, unwrap it and send\\n    // it to the recipient as ETH.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_INTERNAL\\n    // Transfers tokens from the Internal Balance of the `sender` account to the Internal Balance of `recipient`.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `InternalBalanceChanged` event.\\n    //\\n    //\\n    // - TRANSFER_EXTERNAL\\n    // Transfers tokens from `sender` to `recipient`, using the Vault's ERC20 allowance. This is typically used by\\n    // relayers, as it lets them reuse a user's Vault allowance.\\n    //\\n    // Reverts if the ETH sentinel value is passed.\\n    //\\n    // Emits an `ExternalBalanceTransfer` event.\\n\\n    enum UserBalanceOpKind { DEPOSIT_INTERNAL, WITHDRAW_INTERNAL, TRANSFER_INTERNAL, TRANSFER_EXTERNAL }\\n\\n    /**\\n     * @dev Emitted when a user's Internal Balance changes, either from calls to `manageUserBalance`, or through\\n     * interacting with Pools using Internal Balance.\\n     *\\n     * Because Internal Balance works exclusively with ERC20 tokens, ETH deposits and withdrawals will use the WETH\\n     * address.\\n     */\\n    event InternalBalanceChanged(address indexed user, IERC20 indexed token, int256 delta);\\n\\n    /**\\n     * @dev Emitted when a user's Vault ERC20 allowance is used by the Vault to transfer tokens to an external account.\\n     */\\n    event ExternalBalanceTransfer(IERC20 indexed token, address indexed sender, address recipient, uint256 amount);\\n\\n    // Pools\\n    //\\n    // There are three specialization settings for Pools, which allow for cheaper swaps at the cost of reduced\\n    // functionality:\\n    //\\n    //  - General: no specialization, suited for all Pools. IGeneralPool is used for swap request callbacks, passing the\\n    // balance of all tokens in the Pool. These Pools have the largest swap costs (because of the extra storage reads),\\n    // which increase with the number of registered tokens.\\n    //\\n    //  - Minimal Swap Info: IMinimalSwapInfoPool is used instead of IGeneralPool, which saves gas by only passing the\\n    // balance of the two tokens involved in the swap. This is suitable for some pricing algorithms, like the weighted\\n    // constant product one popularized by Balancer V1. Swap costs are smaller compared to general Pools, and are\\n    // independent of the number of registered tokens.\\n    //\\n    //  - Two Token: only allows two tokens to be registered. This achieves the lowest possible swap gas cost. Like\\n    // minimal swap info Pools, these are called via IMinimalSwapInfoPool.\\n\\n    enum PoolSpecialization { GENERAL, MINIMAL_SWAP_INFO, TWO_TOKEN }\\n\\n    /**\\n     * @dev Registers the caller account as a Pool with a given specialization setting. Returns the Pool's ID, which\\n     * is used in all Pool-related functions. Pools cannot be deregistered, nor can the Pool's specialization be\\n     * changed.\\n     *\\n     * The caller is expected to be a smart contract that implements either `IGeneralPool` or `IMinimalSwapInfoPool`,\\n     * depending on the chosen specialization setting. This contract is known as the Pool's contract.\\n     *\\n     * Note that the same contract may register itself as multiple Pools with unique Pool IDs, or in other words,\\n     * multiple Pools may share the same contract.\\n     *\\n     * Emits a `PoolRegistered` event.\\n     */\\n    function registerPool(PoolSpecialization specialization) external returns (bytes32);\\n\\n    /**\\n     * @dev Emitted when a Pool is registered by calling `registerPool`.\\n     */\\n    event PoolRegistered(bytes32 indexed poolId, address indexed poolAddress, PoolSpecialization specialization);\\n\\n    /**\\n     * @dev Returns a Pool's contract address and specialization setting.\\n     */\\n    function getPool(bytes32 poolId) external view returns (address, PoolSpecialization);\\n\\n    /**\\n     * @dev Registers `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Pools can only interact with tokens they have registered. Users join a Pool by transferring registered tokens,\\n     * exit by receiving registered tokens, and can only swap registered tokens.\\n     *\\n     * Each token can only be registered once. For Pools with the Two Token specialization, `tokens` must have a length\\n     * of two, that is, both tokens must be registered in the same `registerTokens` call, and they must be sorted in\\n     * ascending order.\\n     *\\n     * The `tokens` and `assetManagers` arrays must have the same length, and each entry in these indicates the Asset\\n     * Manager for the corresponding token. Asset Managers can manage a Pool's tokens via `managePoolBalance`,\\n     * depositing and withdrawing them directly, and can even set their balance to arbitrary amounts. They are therefore\\n     * expected to be highly secured smart contracts with sound design principles, and the decision to register an\\n     * Asset Manager should not be made lightly.\\n     *\\n     * Pools can choose not to assign an Asset Manager to a given token by passing in the zero address. Once an Asset\\n     * Manager is set, it cannot be changed except by deregistering the associated token and registering again with a\\n     * different Asset Manager.\\n     *\\n     * Emits a `TokensRegistered` event.\\n     */\\n    function registerTokens(\\n        bytes32 poolId,\\n        IERC20[] memory tokens,\\n        address[] memory assetManagers\\n    ) external;\\n\\n    /**\\n     * @dev Emitted when a Pool registers tokens by calling `registerTokens`.\\n     */\\n    event TokensRegistered(bytes32 indexed poolId, IERC20[] tokens, address[] assetManagers);\\n\\n    /**\\n     * @dev Deregisters `tokens` for the `poolId` Pool. Must be called by the Pool's contract.\\n     *\\n     * Only registered tokens (via `registerTokens`) can be deregistered. Additionally, they must have zero total\\n     * balance. For Pools with the Two Token specialization, `tokens` must have a length of two, that is, both tokens\\n     * must be deregistered in the same `deregisterTokens` call.\\n     *\\n     * A deregistered token can be re-registered later on, possibly with a different Asset Manager.\\n     *\\n     * Emits a `TokensDeregistered` event.\\n     */\\n    function deregisterTokens(bytes32 poolId, IERC20[] memory tokens) external;\\n\\n    /**\\n     * @dev Emitted when a Pool deregisters tokens by calling `deregisterTokens`.\\n     */\\n    event TokensDeregistered(bytes32 indexed poolId, IERC20[] tokens);\\n\\n    /**\\n     * @dev Returns detailed information for a Pool's registered token.\\n     *\\n     * `cash` is the number of tokens the Vault currently holds for the Pool. `managed` is the number of tokens\\n     * withdrawn and held outside the Vault by the Pool's token Asset Manager. The Pool's total balance for `token`\\n     * equals the sum of `cash` and `managed`.\\n     *\\n     * Internally, `cash` and `managed` are stored using 112 bits. No action can ever cause a Pool's token `cash`,\\n     * `managed` or `total` balance to be greater than 2^112 - 1.\\n     *\\n     * `lastChangeBlock` is the number of the block in which `token`'s total balance was last modified (via either a\\n     * join, exit, swap, or Asset Manager update). This value is useful to avoid so-called 'sandwich attacks', for\\n     * example when developing price oracles. A change of zero (e.g. caused by a swap with amount zero) is considered a\\n     * change for this purpose, and will update `lastChangeBlock`.\\n     *\\n     * `assetManager` is the Pool's token Asset Manager.\\n     */\\n    function getPoolTokenInfo(bytes32 poolId, IERC20 token)\\n        external\\n        view\\n        returns (\\n            uint256 cash,\\n            uint256 managed,\\n            uint256 lastChangeBlock,\\n            address assetManager\\n        );\\n\\n    /**\\n     * @dev Returns a Pool's registered tokens, the total balance for each, and the latest block when *any* of\\n     * the tokens' `balances` changed.\\n     *\\n     * The order of the `tokens` array is the same order that will be used in `joinPool`, `exitPool`, as well as in all\\n     * Pool hooks (where applicable). Calls to `registerTokens` and `deregisterTokens` may change this order.\\n     *\\n     * If a Pool only registers tokens once, and these are sorted in ascending order, they will be stored in the same\\n     * order as passed to `registerTokens`.\\n     *\\n     * Total balances include both tokens held by the Vault and those withdrawn by the Pool's Asset Managers. These are\\n     * the amounts used by joins, exits and swaps. For a detailed breakdown of token balances, use `getPoolTokenInfo`\\n     * instead.\\n     */\\n    function getPoolTokens(bytes32 poolId)\\n        external\\n        view\\n        returns (\\n            IERC20[] memory tokens,\\n            uint256[] memory balances,\\n            uint256 lastChangeBlock\\n        );\\n\\n    /**\\n     * @dev Called by users to join a Pool, which transfers tokens from `sender` into the Pool's balance. This will\\n     * trigger custom Pool behavior, which will typically grant something in return to `recipient` - often tokenized\\n     * Pool shares.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `assets` and `maxAmountsIn` arrays must have the same length, and each entry indicates the maximum amount\\n     * to send for each asset. The amounts to send are decided by the Pool and not the Vault: it just enforces\\n     * these maximums.\\n     *\\n     * If joining a Pool that holds WETH, it is possible to send ETH directly: the Vault will do the wrapping. To enable\\n     * this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead of the\\n     * WETH address. Note that it is not possible to combine ETH and WETH in the same join. Any excess ETH will be sent\\n     * back to the caller (not the sender, which is important for relayers).\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If sending ETH however, the array must be\\n     * sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the final\\n     * `assets` array might not be sorted. Pools with no registered tokens cannot be joined.\\n     *\\n     * If `fromInternalBalance` is true, the caller's Internal Balance will be preferred: ERC20 transfers will only\\n     * be made for the difference between the requested amount and Internal Balance (if any). Note that ETH cannot be\\n     * withdrawn from Internal Balance: attempting to do so will trigger a revert.\\n     *\\n     * This causes the Vault to call the `IBasePool.onJoinPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares). This can be encoded in the `userData` argument, which is ignored by the Vault and passed\\n     * directly to the Pool's contract, as is `recipient`.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function joinPool(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        JoinPoolRequest memory request\\n    ) external payable;\\n\\n    struct JoinPoolRequest {\\n        IAsset[] assets;\\n        uint256[] maxAmountsIn;\\n        bytes userData;\\n        bool fromInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Called by users to exit a Pool, which transfers tokens from the Pool's balance to `recipient`. This will\\n     * trigger custom Pool behavior, which will typically ask for something in return from `sender` - often tokenized\\n     * Pool shares. The amount of tokens that can be withdrawn is limited by the Pool's `cash` balance (see\\n     * `getPoolTokenInfo`).\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * The `tokens` and `minAmountsOut` arrays must have the same length, and each entry in these indicates the minimum\\n     * token amount to receive for each token contract. The amounts to send are decided by the Pool and not the Vault:\\n     * it just enforces these minimums.\\n     *\\n     * If exiting a Pool that holds WETH, it is possible to receive ETH directly: the Vault will do the unwrapping. To\\n     * enable this mechanism, the IAsset sentinel value (the zero address) must be passed in the `assets` array instead\\n     * of the WETH address. Note that it is not possible to combine ETH and WETH in the same exit.\\n     *\\n     * `assets` must have the same length and order as the array returned by `getPoolTokens`. This prevents issues when\\n     * interacting with Pools that register and deregister tokens frequently. If receiving ETH however, the array must\\n     * be sorted *before* replacing the WETH address with the ETH sentinel value (the zero address), which means the\\n     * final `assets` array might not be sorted. Pools with no registered tokens cannot be exited.\\n     *\\n     * If `toInternalBalance` is true, the tokens will be deposited to `recipient`'s Internal Balance. Otherwise,\\n     * an ERC20 transfer will be performed. Note that ETH cannot be deposited to Internal Balance: attempting to\\n     * do so will trigger a revert.\\n     *\\n     * `minAmountsOut` is the minimum amount of tokens the user expects to get out of the Pool, for each token in the\\n     * `tokens` array. This array must match the Pool's registered tokens.\\n     *\\n     * This causes the Vault to call the `IBasePool.onExitPool` hook on the Pool's contract, where Pools implement\\n     * their own custom logic. This typically requires additional information from the user (such as the expected number\\n     * of Pool shares to return). This can be encoded in the `userData` argument, which is ignored by the Vault and\\n     * passed directly to the Pool's contract.\\n     *\\n     * Emits a `PoolBalanceChanged` event.\\n     */\\n    function exitPool(\\n        bytes32 poolId,\\n        address sender,\\n        address payable recipient,\\n        ExitPoolRequest memory request\\n    ) external;\\n\\n    struct ExitPoolRequest {\\n        IAsset[] assets;\\n        uint256[] minAmountsOut;\\n        bytes userData;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Emitted when a user joins or exits a Pool by calling `joinPool` or `exitPool`, respectively.\\n     */\\n    event PoolBalanceChanged(\\n        bytes32 indexed poolId,\\n        address indexed liquidityProvider,\\n        IERC20[] tokens,\\n        int256[] deltas,\\n        uint256[] protocolFeeAmounts\\n    );\\n\\n    enum PoolBalanceChangeKind { JOIN, EXIT }\\n\\n    // Swaps\\n    //\\n    // Users can swap tokens with Pools by calling the `swap` and `batchSwap` functions. To do this,\\n    // they need not trust Pool contracts in any way: all security checks are made by the Vault. They must however be\\n    // aware of the Pools' pricing algorithms in order to estimate the prices Pools will quote.\\n    //\\n    // The `swap` function executes a single swap, while `batchSwap` can perform multiple swaps in sequence.\\n    // In each individual swap, tokens of one kind are sent from the sender to the Pool (this is the 'token in'),\\n    // and tokens of another kind are sent from the Pool to the recipient in exchange (this is the 'token out').\\n    // More complex swaps, such as one token in to multiple tokens out can be achieved by batching together\\n    // individual swaps.\\n    //\\n    // There are two swap kinds:\\n    //  - 'given in' swaps, where the amount of tokens in (sent to the Pool) is known, and the Pool determines (via the\\n    // `onSwap` hook) the amount of tokens out (to send to the recipient).\\n    //  - 'given out' swaps, where the amount of tokens out (received from the Pool) is known, and the Pool determines\\n    // (via the `onSwap` hook) the amount of tokens in (to receive from the sender).\\n    //\\n    // Additionally, it is possible to chain swaps using a placeholder input amount, which the Vault replaces with\\n    // the calculated output of the previous swap. If the previous swap was 'given in', this will be the calculated\\n    // tokenOut amount. If the previous swap was 'given out', it will use the calculated tokenIn amount. These extended\\n    // swaps are known as 'multihop' swaps, since they 'hop' through a number of intermediate tokens before arriving at\\n    // the final intended token.\\n    //\\n    // In all cases, tokens are only transferred in and out of the Vault (or withdrawn from and deposited into Internal\\n    // Balance) after all individual swaps have been completed, and the net token balance change computed. This makes\\n    // certain swap patterns, such as multihops, or swaps that interact with the same token pair in multiple Pools, cost\\n    // much less gas than they would otherwise.\\n    //\\n    // It also means that under certain conditions it is possible to perform arbitrage by swapping with multiple\\n    // Pools in a way that results in net token movement out of the Vault (profit), with no tokens being sent in (only\\n    // updating the Pool's internal accounting).\\n    //\\n    // To protect users from front-running or the market changing rapidly, they supply a list of 'limits' for each token\\n    // involved in the swap, where either the maximum number of tokens to send (by passing a positive value) or the\\n    // minimum amount of tokens to receive (by passing a negative value) is specified.\\n    //\\n    // Additionally, a 'deadline' timestamp can also be provided, forcing the swap to fail if it occurs after\\n    // this point in time (e.g. if the transaction failed to be included in a block promptly).\\n    //\\n    // If interacting with Pools that hold WETH, it is possible to both send and receive ETH directly: the Vault will do\\n    // the wrapping and unwrapping. To enable this mechanism, the IAsset sentinel value (the zero address) must be\\n    // passed in the `assets` array instead of the WETH address. Note that it is possible to combine ETH and WETH in the\\n    // same swap. Any excess ETH will be sent back to the caller (not the sender, which is relevant for relayers).\\n    //\\n    // Finally, Internal Balance can be used when either sending or receiving tokens.\\n\\n    enum SwapKind { GIVEN_IN, GIVEN_OUT }\\n\\n    /**\\n     * @dev Performs a swap with a single Pool.\\n     *\\n     * If the swap is 'given in' (the number of tokens to send to the Pool is known), it returns the amount of tokens\\n     * taken from the Pool, which must be greater than or equal to `limit`.\\n     *\\n     * If the swap is 'given out' (the number of tokens to take from the Pool is known), it returns the amount of tokens\\n     * sent to the Pool, which must be less than or equal to `limit`.\\n     *\\n     * Internal Balance usage and the recipient are determined by the `funds` struct.\\n     *\\n     * Emits a `Swap` event.\\n     */\\n    function swap(\\n        SingleSwap memory singleSwap,\\n        FundManagement memory funds,\\n        uint256 limit,\\n        uint256 deadline\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @dev Data for a single swap executed by `swap`. `amount` is either `amountIn` or `amountOut` depending on\\n     * the `kind` value.\\n     *\\n     * `assetIn` and `assetOut` are either token addresses, or the IAsset sentinel value for ETH (the zero address).\\n     * Note that Pools never interact with ETH directly: it will be wrapped to or unwrapped from WETH by the Vault.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct SingleSwap {\\n        bytes32 poolId;\\n        SwapKind kind;\\n        IAsset assetIn;\\n        IAsset assetOut;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Performs a series of swaps with one or multiple Pools. In each individual swap, the caller determines either\\n     * the amount of tokens sent to or received from the Pool, depending on the `kind` value.\\n     *\\n     * Returns an array with the net Vault asset balance deltas. Positive amounts represent tokens (or ETH) sent to the\\n     * Vault, and negative amounts represent tokens (or ETH) sent by the Vault. Each delta corresponds to the asset at\\n     * the same index in the `assets` array.\\n     *\\n     * Swaps are executed sequentially, in the order specified by the `swaps` array. Each array element describes a\\n     * Pool, the token to be sent to this Pool, the token to receive from it, and an amount that is either `amountIn` or\\n     * `amountOut` depending on the swap kind.\\n     *\\n     * Multihop swaps can be executed by passing an `amount` value of zero for a swap. This will cause the amount in/out\\n     * of the previous swap to be used as the amount in for the current one. In a 'given in' swap, 'tokenIn' must equal\\n     * the previous swap's `tokenOut`. For a 'given out' swap, `tokenOut` must equal the previous swap's `tokenIn`.\\n     *\\n     * The `assets` array contains the addresses of all assets involved in the swaps. These are either token addresses,\\n     * or the IAsset sentinel value for ETH (the zero address). Each entry in the `swaps` array specifies tokens in and\\n     * out by referencing an index in `assets`. Note that Pools never interact with ETH directly: it will be wrapped to\\n     * or unwrapped from WETH by the Vault.\\n     *\\n     * Internal Balance usage, sender, and recipient are determined by the `funds` struct. The `limits` array specifies\\n     * the minimum or maximum amount of each token the vault is allowed to transfer.\\n     *\\n     * `batchSwap` can be used to make a single swap, like `swap` does, but doing so requires more gas than the\\n     * equivalent `swap` call.\\n     *\\n     * Emits `Swap` events.\\n     */\\n    function batchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds,\\n        int256[] memory limits,\\n        uint256 deadline\\n    ) external payable returns (int256[] memory);\\n\\n    /**\\n     * @dev Data for each individual swap executed by `batchSwap`. The asset in and out fields are indexes into the\\n     * `assets` array passed to that function, and ETH assets are converted to WETH.\\n     *\\n     * If `amount` is zero, the multihop mechanism is used to determine the actual amount based on the amount in/out\\n     * from the previous swap, depending on the swap kind.\\n     *\\n     * The `userData` field is ignored by the Vault, but forwarded to the Pool in the `onSwap` hook, and may be\\n     * used to extend swap behavior.\\n     */\\n    struct BatchSwapStep {\\n        bytes32 poolId;\\n        uint256 assetInIndex;\\n        uint256 assetOutIndex;\\n        uint256 amount;\\n        bytes userData;\\n    }\\n\\n    /**\\n     * @dev Emitted for each individual swap performed by `swap` or `batchSwap`.\\n     */\\n    event Swap(\\n        bytes32 indexed poolId,\\n        IERC20 indexed tokenIn,\\n        IERC20 indexed tokenOut,\\n        uint256 amountIn,\\n        uint256 amountOut\\n    );\\n\\n    /**\\n     * @dev All tokens in a swap are either sent from the `sender` account to the Vault, or from the Vault to the\\n     * `recipient` account.\\n     *\\n     * If the caller is not `sender`, it must be an authorized relayer for them.\\n     *\\n     * If `fromInternalBalance` is true, the `sender`'s Internal Balance will be preferred, performing an ERC20\\n     * transfer for the difference between the requested amount and the User's Internal Balance (if any). The `sender`\\n     * must have allowed the Vault to use their tokens via `IERC20.approve()`. This matches the behavior of\\n     * `joinPool`.\\n     *\\n     * If `toInternalBalance` is true, tokens will be deposited to `recipient`'s internal balance instead of\\n     * transferred. This matches the behavior of `exitPool`.\\n     *\\n     * Note that ETH cannot be deposited to or withdrawn from Internal Balance: attempting to do so will trigger a\\n     * revert.\\n     */\\n    struct FundManagement {\\n        address sender;\\n        bool fromInternalBalance;\\n        address payable recipient;\\n        bool toInternalBalance;\\n    }\\n\\n    /**\\n     * @dev Simulates a call to `batchSwap`, returning an array of Vault asset deltas. Calls to `swap` cannot be\\n     * simulated directly, but an equivalent `batchSwap` call can and will yield the exact same result.\\n     *\\n     * Each element in the array corresponds to the asset at the same index, and indicates the number of tokens (or ETH)\\n     * the Vault would take from the sender (if positive) or send to the recipient (if negative). The arguments it\\n     * receives are the same that an equivalent `batchSwap` call would receive.\\n     *\\n     * Unlike `batchSwap`, this function performs no checks on the sender or recipient field in the `funds` struct.\\n     * This makes it suitable to be called by off-chain applications via eth_call without needing to hold tokens,\\n     * approve them for the Vault, or even know a user's address.\\n     *\\n     * Note that this function is not 'view' (due to implementation details): the client code must explicitly execute\\n     * eth_call instead of eth_sendTransaction.\\n     */\\n    function queryBatchSwap(\\n        SwapKind kind,\\n        BatchSwapStep[] memory swaps,\\n        IAsset[] memory assets,\\n        FundManagement memory funds\\n    ) external returns (int256[] memory assetDeltas);\\n\\n    // Flash Loans\\n\\n    /**\\n     * @dev Performs a 'flash loan', sending tokens to `recipient`, executing the `receiveFlashLoan` hook on it,\\n     * and then reverting unless the tokens plus a proportional protocol fee have been returned.\\n     *\\n     * The `tokens` and `amounts` arrays must have the same length, and each entry in these indicates the loan amount\\n     * for each token contract. `tokens` must be sorted in ascending order.\\n     *\\n     * The 'userData' field is ignored by the Vault, and forwarded as-is to `recipient` as part of the\\n     * `receiveFlashLoan` call.\\n     *\\n     * Emits `FlashLoan` events.\\n     */\\n    function flashLoan(\\n        IFlashLoanRecipient recipient,\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        bytes memory userData\\n    ) external;\\n\\n    /**\\n     * @dev Emitted for each individual flash loan performed by `flashLoan`.\\n     */\\n    event FlashLoan(IFlashLoanRecipient indexed recipient, IERC20 indexed token, uint256 amount, uint256 feeAmount);\\n\\n    // Asset Management\\n    //\\n    // Each token registered for a Pool can be assigned an Asset Manager, which is able to freely withdraw the Pool's\\n    // tokens from the Vault, deposit them, or assign arbitrary values to its `managed` balance (see\\n    // `getPoolTokenInfo`). This makes them extremely powerful and dangerous. Even if an Asset Manager only directly\\n    // controls one of the tokens in a Pool, a malicious manager could set that token's balance to manipulate the\\n    // prices of the other tokens, and then drain the Pool with swaps. The risk of using Asset Managers is therefore\\n    // not constrained to the tokens they are managing, but extends to the entire Pool's holdings.\\n    //\\n    // However, a properly designed Asset Manager smart contract can be safely used for the Pool's benefit,\\n    // for example by lending unused tokens out for interest, or using them to participate in voting protocols.\\n    //\\n    // This concept is unrelated to the IAsset interface.\\n\\n    /**\\n     * @dev Performs a set of Pool balance operations, which may be either withdrawals, deposits or updates.\\n     *\\n     * Pool Balance management features batching, which means a single contract call can be used to perform multiple\\n     * operations of different kinds, with different Pools and tokens, at once.\\n     *\\n     * For each operation, the caller must be registered as the Asset Manager for `token` in `poolId`.\\n     */\\n    function managePoolBalance(PoolBalanceOp[] memory ops) external;\\n\\n    struct PoolBalanceOp {\\n        PoolBalanceOpKind kind;\\n        bytes32 poolId;\\n        IERC20 token;\\n        uint256 amount;\\n    }\\n\\n    /**\\n     * Withdrawals decrease the Pool's cash, but increase its managed balance, leaving the total balance unchanged.\\n     *\\n     * Deposits increase the Pool's cash, but decrease its managed balance, leaving the total balance unchanged.\\n     *\\n     * Updates don't affect the Pool's cash balance, but because the managed balance changes, it does alter the total.\\n     * The external amount can be either increased or decreased by this call (i.e., reporting a gain or a loss).\\n     */\\n    enum PoolBalanceOpKind { WITHDRAW, DEPOSIT, UPDATE }\\n\\n    /**\\n     * @dev Emitted when a Pool's token Asset Manager alters its balance via `managePoolBalance`.\\n     */\\n    event PoolBalanceManaged(\\n        bytes32 indexed poolId,\\n        address indexed assetManager,\\n        IERC20 indexed token,\\n        int256 cashDelta,\\n        int256 managedDelta\\n    );\\n\\n    // Protocol Fees\\n    //\\n    // Some operations cause the Vault to collect tokens in the form of protocol fees, which can then be withdrawn by\\n    // permissioned accounts.\\n    //\\n    // There are two kinds of protocol fees:\\n    //\\n    //  - flash loan fees: charged on all flash loans, as a percentage of the amounts lent.\\n    //\\n    //  - swap fees: a percentage of the fees charged by Pools when performing swaps. For a number of reasons, including\\n    // swap gas costs and interface simplicity, protocol swap fees are not charged on each individual swap. Rather,\\n    // Pools are expected to keep track of how much they have charged in swap fees, and pay any outstanding debts to the\\n    // Vault when they are joined or exited. This prevents users from joining a Pool with unpaid debt, as well as\\n    // exiting a Pool in debt without first paying their share.\\n\\n    /**\\n     * @dev Returns the current protocol fee module.\\n     */\\n    function getProtocolFeesCollector() external view returns (IProtocolFeesCollector);\\n\\n    /**\\n     * @dev Safety mechanism to pause most Vault operations in the event of an emergency - typically detection of an\\n     * error in some part of the system.\\n     *\\n     * The Vault can only be paused during an initial time period, after which pausing is forever disabled.\\n     *\\n     * While the contract is paused, the following features are disabled:\\n     * - depositing and transferring internal balance\\n     * - transferring external balance (using the Vault's allowance)\\n     * - swaps\\n     * - joining Pools\\n     * - Asset Manager interactions\\n     *\\n     * Internal Balance can still be withdrawn, and Pools exited.\\n     */\\n    function setPaused(bool paused) external;\\n\\n    /**\\n     * @dev Returns the Vault's WETH instance.\\n     */\\n    function WETH() external view returns (IWETH);\\n    // solhint-disable-previous-line func-name-mixedcase\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/AccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { CoreAccessControl, CoreAccessControlConfig } from \\\"../core/CoreAccessControl/v1/CoreAccessControl.sol\\\";\\nimport { CoreStopGuardian } from \\\"../core/CoreStopGuardian/v1/CoreStopGuardian.sol\\\";\\n\\nabstract contract BaseAccessControl is CoreAccessControl, CoreStopGuardian {\\n    /**\\n     * @dev\\n     * Modifiers inherited from CoreAccessControl:\\n     * onlyDefinitive\\n     * onlyClients\\n     * onlyWhitelisted\\n     * onlyClientAdmin\\n     * onlyDefinitiveAdmin\\n     *\\n     * Modifiers inherited from CoreStopGuardian:\\n     * stopGuarded\\n     */\\n\\n    constructor(CoreAccessControlConfig memory coreAccessControlConfig) CoreAccessControl(coreAccessControlConfig) {}\\n\\n    /**\\n     * @dev Inherited from CoreStopGuardian\\n     */\\n    function enableStopGuardian() public override onlyAdmins {\\n        return _enableStopGuardian();\\n    }\\n\\n    /**\\n     * @dev Inherited from CoreStopGuardian\\n     */\\n    function disableStopGuardian() public override onlyClientAdmin {\\n        return _disableStopGuardian();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { BaseAccessControl } from \\\"./BaseAccessControl.sol\\\";\\nimport { CoreFees, CoreFeesConfig } from \\\"../core/CoreFees/v1/CoreFees.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../core/libraries/DefinitiveAssets.sol\\\";\\nimport { DefinitiveConstants } from \\\"../core/libraries/DefinitiveConstants.sol\\\";\\nimport { InvalidFeePercent } from \\\"../core/libraries/DefinitiveErrors.sol\\\";\\n\\nabstract contract BaseFees is BaseAccessControl, CoreFees {\\n    using DefinitiveAssets for IERC20;\\n\\n    constructor(CoreFeesConfig memory coreFeesConfig) CoreFees(coreFeesConfig) {}\\n\\n    function updateFeeAccount(address payable _feeAccount) public override onlyDefinitiveAdmin {\\n        _updateFeeAccount(_feeAccount);\\n    }\\n\\n    function _handleFeesOnAmount(address token, uint256 amount, uint256 feePct) internal returns (uint256 feeAmount) {\\n        uint256 mMaxFeePCT = DefinitiveConstants.MAX_FEE_PCT;\\n        if (feePct > mMaxFeePCT) {\\n            revert InvalidFeePercent();\\n        }\\n\\n        feeAmount = (amount * feePct) / mMaxFeePCT;\\n        if (feeAmount > 0) {\\n            if (token == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n                DefinitiveAssets.safeTransferETH(FEE_ACCOUNT, feeAmount);\\n            } else {\\n                IERC20(token).safeTransfer(FEE_ACCOUNT, feeAmount);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseNativeWrapper/v1/BaseNativeWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { BaseAccessControl } from \\\"../../BaseAccessControl.sol\\\";\\nimport { IBaseNativeWrapperV1 } from \\\"./IBaseNativeWrapperV1.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport { DefinitiveAssets, IERC20 } from \\\"../../../core/libraries/DefinitiveAssets.sol\\\";\\n\\nstruct BaseNativeWrapperConfig {\\n    address payable wrappedNativeAssetAddress;\\n}\\n\\nabstract contract BaseNativeWrapper is IBaseNativeWrapperV1, BaseAccessControl, ReentrancyGuard {\\n    using DefinitiveAssets for IERC20;\\n\\n    address payable public immutable WRAPPED_NATIVE_ASSET_ADDRESS;\\n\\n    constructor(BaseNativeWrapperConfig memory baseNativeWrapperConfig) {\\n        WRAPPED_NATIVE_ASSET_ADDRESS = baseNativeWrapperConfig.wrappedNativeAssetAddress;\\n    }\\n\\n    /**\\n     * @notice Publicly accessible method to wrap native assets\\n     * @param amount Amount of native assets to wrap\\n     */\\n    function wrap(uint256 amount) public onlyWhitelisted nonReentrant {\\n        _wrap(amount);\\n        emit NativeAssetWrap(_msgSender(), amount, true /* wrappingToNative */);\\n    }\\n\\n    /**\\n     * @notice Publicly accessible method to unwrap native assets\\n     * @param amount Amount of tokenized assets to unwrap\\n     */\\n    function unwrap(uint256 amount) public onlyWhitelisted nonReentrant {\\n        _unwrap(amount);\\n        emit NativeAssetWrap(_msgSender(), amount, false /* wrappingToNative */);\\n    }\\n\\n    /**\\n     * @notice Publicly accessible method to unwrap full balance of native assets\\n     * @dev Method is not marked as `nonReentrant` since it is a wrapper around `unwrap`\\n     */\\n    function unwrapAll() external onlyWhitelisted {\\n        return unwrap(DefinitiveAssets.getBalance(WRAPPED_NATIVE_ASSET_ADDRESS));\\n    }\\n\\n    /**\\n     * @notice Internal method to wrap native assets\\n     * @dev Override this method with native asset wrapping implementation\\n     */\\n    function _wrap(uint256 amount) internal virtual;\\n\\n    /**\\n     * @notice Internal method to unwrap native assets\\n     * @dev Override this method with native asset unwrapping implementation\\n     */\\n    function _unwrap(uint256 amount) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseNativeWrapper/v1/IBaseNativeWrapperV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface IBaseNativeWrapperV1 {\\n    event NativeAssetWrap(address actor, uint256 amount, bool indexed wrappingToNative);\\n\\n    function wrap(uint256 amount) external;\\n\\n    function unwrap(uint256 amount) external;\\n\\n    function unwrapAll() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/BasePermissionedExecution/BasePermissionedExecution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { BaseAccessControl } from \\\"../BaseAccessControl.sol\\\";\\nimport { CallUtils } from \\\"../../tools/BubbleReverts/BubbleReverts.sol\\\";\\nimport { IBasePermissionedExecution } from \\\"./IBasePermissionedExecution.sol\\\";\\n\\nabstract contract BasePermissionedExecution is BaseAccessControl, IBasePermissionedExecution {\\n    function executeOperation(address target, bytes calldata payload) external payable override onlyClientAdmin {\\n        (bool _success, bytes memory _returnedData) = payable(target).call{ value: msg.value }(payload);\\n        if (!_success) {\\n            CallUtils.revertFromReturnedData(_returnedData);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BasePermissionedExecution/IBasePermissionedExecution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreAccessControlV1 } from \\\"../../core/CoreAccessControl/v1/ICoreAccessControlV1.sol\\\";\\n\\ninterface IBasePermissionedExecution is ICoreAccessControlV1 {\\n    function executeOperation(address target, bytes calldata payload) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { BaseFees } from \\\"./BaseFees.sol\\\";\\nimport { CoreRewards } from \\\"../core/CoreRewards/v1/CoreRewards.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../core/libraries/DefinitiveAssets.sol\\\";\\n\\nabstract contract BaseRewards is BaseFees, CoreRewards, ReentrancyGuard {\\n    using DefinitiveAssets for IERC20;\\n\\n    function claimAllRewards(\\n        uint256 feePct\\n    )\\n        external\\n        override\\n        onlyWhitelisted\\n        nonReentrant\\n        stopGuarded\\n        returns (IERC20[] memory rewardTokens, uint256[] memory earnedAmounts)\\n    {\\n        (rewardTokens, earnedAmounts) = _claimAllRewards();\\n        uint256 rewardTokensLength = rewardTokens.length;\\n        uint256[] memory feeAmounts = new uint256[](rewardTokensLength);\\n        if (FEE_ACCOUNT != address(0) && feePct > 0) {\\n            for (uint256 i; i < rewardTokensLength; ) {\\n                if (earnedAmounts[i] == 0) {\\n                    unchecked {\\n                        ++i;\\n                    }\\n                    continue;\\n                }\\n                feeAmounts[i] = _handleFeesOnAmount(address(rewardTokens[i]), earnedAmounts[i], feePct);\\n                unchecked {\\n                    ++i;\\n                }\\n            }\\n        }\\n        emit RewardsClaimed(rewardTokens, earnedAmounts, feeAmounts);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseSafeHarborMode/BaseSafeHarborMode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { BaseAccessControl } from \\\"../../base/BaseAccessControl.sol\\\";\\nimport { IBaseSafeHarborMode } from \\\"./IBaseSafeHarborMode.sol\\\";\\n\\nabstract contract BaseSafeHarborMode is Context, IBaseSafeHarborMode, BaseAccessControl {\\n    bool public SAFE_HARBOR_MODE_ENABLED;\\n\\n    function disableSafeHarborMode() external onlyAdmins {\\n        _setSafeHarborMode(false);\\n    }\\n\\n    function enableSafeHarborMode() external onlyWhitelisted {\\n        _setSafeHarborMode(true);\\n    }\\n\\n    function _setSafeHarborMode(bool _enabled) internal {\\n        SAFE_HARBOR_MODE_ENABLED = _enabled;\\n        emit SafeHarborModeUpdate(_msgSender(), _enabled);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseSafeHarborMode/IBaseSafeHarborMode.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\n// solhint-disable-next-line contract-name-camelcase\\ninterface IBaseSafeHarborMode {\\n    event SafeHarborModeUpdate(address indexed actor, bool indexed isEnabled);\\n\\n    function SAFE_HARBOR_MODE_ENABLED() external view returns (bool);\\n\\n    function enableSafeHarborMode() external;\\n\\n    function disableSafeHarborMode() external;\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { BaseFees } from \\\"./BaseFees.sol\\\";\\nimport { CoreSwap, CoreSwapConfig, SwapPayload } from \\\"../core/CoreSwap/v1/CoreSwap.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { DefinitiveConstants } from \\\"../core/libraries/DefinitiveConstants.sol\\\";\\nimport { InvalidFeePercent, InvalidSwapPayload, SlippageExceeded } from \\\"../core/libraries/DefinitiveErrors.sol\\\";\\nimport { ICoreSwapHandlerV1 } from \\\"../core/CoreSwapHandler/ICoreSwapHandlerV1.sol\\\";\\n\\nabstract contract BaseSwap is BaseFees, CoreSwap, ReentrancyGuard {\\n    constructor(CoreSwapConfig memory coreSwapConfig) CoreSwap(coreSwapConfig) {}\\n\\n    function enableSwapTokens(address[] memory swapTokens) public override onlyClientAdmin stopGuarded {\\n        return _updateSwapTokens(swapTokens, true);\\n    }\\n\\n    function disableSwapTokens(address[] memory swapTokens) public override onlyAdmins {\\n        return _updateSwapTokens(swapTokens, false);\\n    }\\n\\n    function enableSwapOutputTokens(address[] memory swapOutputTokens) public override onlyClientAdmin stopGuarded {\\n        return _updateSwapOutputTokens(swapOutputTokens, true);\\n    }\\n\\n    function disableSwapOutputTokens(address[] memory swapOutputTokens) public override onlyAdmins {\\n        return _updateSwapOutputTokens(swapOutputTokens, false);\\n    }\\n\\n    function enableSwapHandlers(address[] memory swapHandlers) public override onlyClientAdmin stopGuarded {\\n        _updateSwapHandlers(swapHandlers, true);\\n    }\\n\\n    function disableSwapHandlers(address[] memory swapHandlers) public override onlyAdmins {\\n        _updateSwapHandlers(swapHandlers, false);\\n    }\\n\\n    function swap(\\n        SwapPayload[] memory payloads,\\n        address outputToken,\\n        uint256 amountOutMin,\\n        uint256 feePct\\n    ) external override onlyWhitelisted nonReentrant stopGuarded returns (uint256) {\\n        if (feePct > DefinitiveConstants.MAX_FEE_PCT) {\\n            revert InvalidFeePercent();\\n        }\\n\\n        (uint256[] memory inputAmounts, uint256 outputAmount) = _swap(payloads, outputToken);\\n        if (outputAmount < amountOutMin) {\\n            revert SlippageExceeded(outputAmount, amountOutMin);\\n        }\\n\\n        address[] memory swapTokens = new address[](payloads.length);\\n        uint256 swapTokensLength = swapTokens.length;\\n        for (uint256 i; i < swapTokensLength; ) {\\n            swapTokens[i] = payloads[i].swapToken;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint256 feeAmount;\\n        if (FEE_ACCOUNT != address(0) && outputAmount > 0 && feePct > 0) {\\n            feeAmount = _handleFeesOnAmount(outputToken, outputAmount, feePct);\\n        }\\n        emit SwapHandled(swapTokens, inputAmounts, outputToken, outputAmount, feeAmount);\\n\\n        return outputAmount;\\n    }\\n\\n    function _getEncodedSwapHandlerCalldata(\\n        SwapPayload memory payload,\\n        address expectedOutputToken,\\n        bool isPrincipalAssetSwap,\\n        bool isDelegateCall\\n    ) internal pure override returns (bytes memory) {\\n        // Principal Swaps\\n        if (isPrincipalAssetSwap && isDelegateCall) {\\n            revert InvalidSwapPayload();\\n        }\\n\\n        bytes4 selector;\\n        if (isPrincipalAssetSwap) {\\n            selector = ICoreSwapHandlerV1.swapUsingValidatedPathCall.selector;\\n        } else {\\n            selector = isDelegateCall ? ICoreSwapHandlerV1.swapDelegate.selector : ICoreSwapHandlerV1.swapCall.selector;\\n        }\\n\\n        ICoreSwapHandlerV1.SwapParams memory _params = ICoreSwapHandlerV1.SwapParams({\\n            inputAssetAddress: payload.swapToken,\\n            inputAmount: payload.amount,\\n            outputAssetAddress: expectedOutputToken,\\n            minOutputAmount: payload.amountOutMin,\\n            data: payload.handlerCalldata,\\n            signature: payload.signature\\n        });\\n\\n        return abi.encodeWithSelector(selector, _params);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseTransfers/v1/BaseTransfers.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { CoreDeposit } from \\\"../../../core/CoreDeposit/v1/CoreDeposit.sol\\\";\\nimport { CoreWithdraw } from \\\"../../../core/CoreWithdraw/v1/CoreWithdraw.sol\\\";\\nimport { BaseAccessControl } from \\\"../../BaseAccessControl.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nabstract contract BaseTransfers is CoreDeposit, CoreWithdraw, BaseAccessControl, ReentrancyGuard {\\n    function deposit(\\n        uint256[] calldata amounts,\\n        address[] calldata erc20Tokens\\n    ) external payable virtual override onlyClients nonReentrant stopGuarded {\\n        return _deposit(amounts, erc20Tokens);\\n    }\\n\\n    function withdraw(\\n        uint256 amount,\\n        address erc20Token\\n    ) public virtual override onlyClients nonReentrant stopGuarded returns (bool) {\\n        return _withdraw(amount, erc20Token);\\n    }\\n\\n    function withdrawTo(\\n        uint256 amount,\\n        address erc20Token,\\n        address to\\n    ) public virtual override onlyWhitelisted nonReentrant stopGuarded returns (bool) {\\n        // `to` account must be a client\\n        _checkRole(ROLE_CLIENT, to);\\n\\n        return _withdrawTo(amount, erc20Token, to);\\n    }\\n\\n    function withdrawAll(\\n        address[] calldata tokens\\n    ) public virtual override onlyClients nonReentrant stopGuarded returns (bool) {\\n        return _withdrawAll(tokens);\\n    }\\n\\n    function withdrawAllTo(\\n        address[] calldata tokens,\\n        address to\\n    ) public virtual override onlyWhitelisted stopGuarded returns (bool) {\\n        _checkRole(ROLE_CLIENT, to);\\n        return _withdrawAllTo(tokens, to);\\n    }\\n\\n    function supportsNativeAssets() public pure virtual override returns (bool) {\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/base/BaseTransfersNative/v1/BaseTransfersNative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { IBaseNativeWrapperV1 } from \\\"../../BaseNativeWrapper/v1/IBaseNativeWrapperV1.sol\\\";\\nimport { BaseTransfers } from \\\"../../BaseTransfers/v1/BaseTransfers.sol\\\";\\nimport { CoreTransfersNative } from \\\"../../../core/CoreTransfersNative/v1/CoreTransfersNative.sol\\\";\\n\\nabstract contract BaseTransfersNative is IBaseNativeWrapperV1, CoreTransfersNative, BaseTransfers {\\n    function deposit(\\n        uint256[] calldata amounts,\\n        address[] calldata assetAddresses\\n    ) external payable override onlyClients nonReentrant stopGuarded {\\n        _depositNativeAndERC20(amounts, assetAddresses);\\n        emit Deposit(_msgSender(), assetAddresses, amounts);\\n    }\\n\\n    function supportsNativeAssets() public pure override returns (bool) {\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreAccessControl/v1/CoreAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { AccessControl as OZAccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { ICoreAccessControlV1 } from \\\"./ICoreAccessControlV1.sol\\\";\\nimport { AccountNotAdmin, AccountNotWhitelisted, AccountMissingRole } from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nstruct CoreAccessControlConfig {\\n    address admin;\\n    address definitiveAdmin;\\n    address[] definitive;\\n    address[] client;\\n}\\n\\nabstract contract CoreAccessControl is ICoreAccessControlV1, OZAccessControl {\\n    // roles\\n    bytes32 public constant ROLE_DEFINITIVE = keccak256(\\\"DEFINITIVE\\\");\\n    bytes32 public constant ROLE_DEFINITIVE_ADMIN = keccak256(\\\"DEFINITIVE_ADMIN\\\");\\n    bytes32 public constant ROLE_CLIENT = keccak256(\\\"CLIENT\\\");\\n\\n    modifier onlyDefinitive() {\\n        _checkRole(ROLE_DEFINITIVE);\\n        _;\\n    }\\n    modifier onlyDefinitiveAdmin() {\\n        _checkRole(ROLE_DEFINITIVE_ADMIN);\\n        _;\\n    }\\n    modifier onlyClients() {\\n        _checkRole(ROLE_CLIENT);\\n        _;\\n    }\\n    modifier onlyClientAdmin() {\\n        _checkRole(DEFAULT_ADMIN_ROLE);\\n        _;\\n    }\\n    // default admin + definitive admin\\n    modifier onlyAdmins() {\\n        bool isAdmins = (hasRole(DEFAULT_ADMIN_ROLE, _msgSender()) || hasRole(ROLE_DEFINITIVE_ADMIN, _msgSender()));\\n\\n        if (!isAdmins) {\\n            revert AccountNotAdmin(_msgSender());\\n        }\\n        _;\\n    }\\n    // client + definitive\\n    modifier onlyWhitelisted() {\\n        bool isWhitelisted = (hasRole(ROLE_CLIENT, _msgSender()) || hasRole(ROLE_DEFINITIVE, _msgSender()));\\n\\n        if (!isWhitelisted) {\\n            revert AccountNotWhitelisted(_msgSender());\\n        }\\n        _;\\n    }\\n\\n    constructor(CoreAccessControlConfig memory cfg) {\\n        // admin\\n        _setupRole(DEFAULT_ADMIN_ROLE, cfg.admin);\\n\\n        // definitive admin\\n        _setupRole(ROLE_DEFINITIVE_ADMIN, cfg.definitiveAdmin);\\n        _setRoleAdmin(ROLE_DEFINITIVE_ADMIN, ROLE_DEFINITIVE_ADMIN);\\n\\n        // definitive\\n        uint256 cfgDefinitiveLength = cfg.definitive.length;\\n        for (uint256 i; i < cfgDefinitiveLength; ) {\\n            _setupRole(ROLE_DEFINITIVE, cfg.definitive[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        _setRoleAdmin(ROLE_DEFINITIVE, ROLE_DEFINITIVE_ADMIN);\\n\\n        // clients - implicit role admin is DEFAULT_ADMIN_ROLE\\n        uint256 cfgClientLength = cfg.client.length;\\n        for (uint256 i; i < cfgClientLength; ) {\\n            _setupRole(ROLE_CLIENT, cfg.client[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _checkRole(bytes32 role, address account) internal view virtual override {\\n        if (!hasRole(role, account)) {\\n            revert AccountMissingRole(account, role);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreAccessControl/v1/ICoreAccessControlV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { IAccessControl } from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\n\\ninterface ICoreAccessControlV1 is IAccessControl {\\n    function ROLE_CLIENT() external returns (bytes32);\\n\\n    function ROLE_DEFINITIVE() external returns (bytes32);\\n\\n    function ROLE_DEFINITIVE_ADMIN() external returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreDeposit/v1/CoreDeposit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreDepositV1 } from \\\"./ICoreDepositV1.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\n\\nimport { InvalidInputs } from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nabstract contract CoreDeposit is ICoreDepositV1, Context {\\n    using DefinitiveAssets for IERC20;\\n\\n    function deposit(uint256[] calldata amounts, address[] calldata assetAddresses) external payable virtual;\\n\\n    function _deposit(uint256[] calldata amounts, address[] calldata erc20Tokens) internal virtual {\\n        _depositERC20(amounts, erc20Tokens);\\n\\n        emit Deposit(_msgSender(), erc20Tokens, amounts);\\n    }\\n\\n    function _depositERC20(uint256[] calldata amounts, address[] calldata erc20Tokens) internal {\\n        uint256 amountsLength = amounts.length;\\n        if (amountsLength != erc20Tokens.length) {\\n            revert InvalidInputs();\\n        }\\n\\n        for (uint256 i; i < amountsLength; ) {\\n            IERC20(erc20Tokens[i]).safeTransferFrom(_msgSender(), address(this), amounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreDeposit/v1/ICoreDepositV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreDepositV1 {\\n    event Deposit(address indexed actor, address[] assetAddresses, uint256[] amounts);\\n\\n    function deposit(uint256[] calldata amounts, address[] calldata assetAddresses) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreFees/v1/CoreFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreFeesV1 } from \\\"./ICoreFeesV1.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nstruct CoreFeesConfig {\\n    address payable feeAccount;\\n}\\n\\nabstract contract CoreFees is ICoreFeesV1, Context {\\n    address payable public FEE_ACCOUNT;\\n\\n    constructor(CoreFeesConfig memory coreFeesConfig) {\\n        FEE_ACCOUNT = coreFeesConfig.feeAccount;\\n    }\\n\\n    function _updateFeeAccount(address payable feeAccount) internal {\\n        FEE_ACCOUNT = feeAccount;\\n        emit FeeAccountUpdated(_msgSender(), feeAccount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreFees/v1/ICoreFeesV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreFeesV1 {\\n    event FeeAccountUpdated(address actor, address feeAccount);\\n\\n    function FEE_ACCOUNT() external returns (address payable);\\n\\n    function updateFeeAccount(address payable feeAccount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreMulticall/v1/CoreMulticall.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreMulticallV1 } from \\\"./ICoreMulticallV1.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { DefinitiveAssets } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\n\\n/* solhint-disable max-line-length */\\n/**\\n * @notice Implements openzeppelin/contracts/utils/Multicall.sol\\n * Source: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/5b027e517e6aee69f4b4b2f5e78274ac8ee53513/contracts/utils/Multicall.sol solhint-disable max-line-length\\n */\\n/* solhint-enable max-line-length */\\nabstract contract CoreMulticall is ICoreMulticallV1 {\\n    /**\\n     * @dev Receives and executes a batch of function calls on this contract.\\n     */\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results) {\\n        uint256 dataLength = data.length;\\n        results = new bytes[](dataLength);\\n        for (uint256 i; i < dataLength; ) {\\n            results[i] = Address.functionDelegateCall(address(this), data[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function getBalance(address assetAddress) public view returns (uint256) {\\n        return DefinitiveAssets.getBalance(assetAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreMulticall/v1/ICoreMulticallV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreMulticallV1 {\\n    function multicall(bytes[] calldata data) external returns (bytes[] memory results);\\n\\n    function getBalance(address assetAddress) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreRewards/v1/CoreRewards.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreRewardsV1 } from \\\"./ICoreRewardsV1.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { IERC20 } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\n\\nabstract contract CoreRewards is ICoreRewardsV1, Context {\\n    /**\\n     * @dev Override this method for the implementation of returning tokens and their respective claim amounts\\n     *\\n     * @notice returns the reward token and amount of unclaimed tokens\\n     * @return (IERC20[], uint256[])    tokens and rewards\\n     */\\n    function unclaimedRewards() public view virtual returns (IERC20[] memory, uint256[] memory);\\n\\n    function claimAllRewards(uint256 feePct) external virtual returns (IERC20[] memory, uint256[] memory);\\n\\n    /**\\n     * @dev Override this method for the implementation of claiming rewards\\n     */\\n    function _claimAllRewards() internal virtual returns (IERC20[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreRewards/v1/ICoreRewardsV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { IERC20 } from \\\"../../../core/libraries/DefinitiveAssets.sol\\\";\\n\\ninterface ICoreRewardsV1 {\\n    event RewardsClaimed(IERC20[] rewardTokens, uint256[] rewardAmounts, uint256[] feeAmounts);\\n\\n    function unclaimedRewards() external view returns (IERC20[] memory, uint256[] memory);\\n\\n    function claimAllRewards(uint256 feePct) external returns (IERC20[] memory, uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreStopGuardian/v1/CoreStopGuardian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreStopGuardianV1 } from \\\"./ICoreStopGuardianV1.sol\\\";\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { StopGuardianEnabled } from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nabstract contract CoreStopGuardian is ICoreStopGuardianV1, Context {\\n    bool public STOP_GUARDIAN_ENABLED;\\n\\n    // recommended for every public/external function\\n    modifier stopGuarded() {\\n        if (STOP_GUARDIAN_ENABLED) {\\n            revert StopGuardianEnabled();\\n        }\\n\\n        _;\\n    }\\n\\n    function enableStopGuardian() public virtual;\\n\\n    function disableStopGuardian() public virtual;\\n\\n    function _enableStopGuardian() internal {\\n        STOP_GUARDIAN_ENABLED = true;\\n        emit StopGuardianUpdate(_msgSender(), true);\\n    }\\n\\n    function _disableStopGuardian() internal {\\n        STOP_GUARDIAN_ENABLED = false;\\n        emit StopGuardianUpdate(_msgSender(), false);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreStopGuardian/v1/ICoreStopGuardianV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreStopGuardianV1 {\\n    event StopGuardianUpdate(address indexed actor, bool indexed isEnabled);\\n\\n    function STOP_GUARDIAN_ENABLED() external view returns (bool);\\n\\n    function enableStopGuardian() external;\\n\\n    function disableStopGuardian() external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSwap/v1/CoreSwap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreSwapV1 } from \\\"./ICoreSwapV1.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { CallUtils } from \\\"../../../tools/BubbleReverts/BubbleReverts.sol\\\";\\nimport { DefinitiveConstants } from \\\"../../libraries/DefinitiveConstants.sol\\\";\\nimport {\\n    InvalidSwapOutputToken,\\n    InvalidSwapHandler,\\n    InsufficientSwapTokenBalance,\\n    SwapTokenIsOutputToken,\\n    InvalidOutputToken,\\n    InvalidReportedOutputAmount,\\n    InvalidExecutedOutputAmount,\\n    SwapLimitExceeded\\n} from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nstruct CoreSwapConfig {\\n    address[] swapTokens;\\n    address[] swapOutputTokens;\\n    address[] swapHandlers;\\n}\\n\\nstruct SwapPayload {\\n    address handler;\\n    uint256 amount; // set 0 for maximum available balance\\n    address swapToken;\\n    uint256 amountOutMin;\\n    bool isDelegate;\\n    bytes handlerCalldata;\\n    bytes signature;\\n}\\n\\nabstract contract CoreSwap is ICoreSwapV1, Context {\\n    using DefinitiveAssets for IERC20;\\n\\n    uint256 internal swapsThisBlock;\\n    uint256 internal latestBlockNumber;\\n    uint256 public immutable MAX_SWAPS_PER_BLOCK;\\n\\n    /**\\n     * @notice Maintains mapping for reward tokens\\n     * @notice Tokens _not_ in this list will be treated as principal assets\\n     * @dev erc20 token => valid\\n     */\\n    mapping(address => bool) public _swapTokens;\\n\\n    /// @dev erc20 token => valid\\n    mapping(address => bool) public _swapOutputTokens;\\n\\n    /// @dev handler contract => enabled\\n    mapping(address => bool) public _swapHandlers;\\n\\n    modifier enforceSwapLimit(SwapPayload[] memory payloads) {\\n        if (block.number != latestBlockNumber) {\\n            latestBlockNumber = block.number;\\n            delete swapsThisBlock;\\n        }\\n        swapsThisBlock += payloads.length;\\n        if (swapsThisBlock > MAX_SWAPS_PER_BLOCK) {\\n            revert SwapLimitExceeded();\\n        }\\n        _;\\n    }\\n\\n    constructor(CoreSwapConfig memory coreSwapConfig) {\\n        uint256 coreswapConfigSwapTokensLength = coreSwapConfig.swapTokens.length;\\n        MAX_SWAPS_PER_BLOCK = DefinitiveConstants.MAX_SWAPS_PER_BLOCK;\\n        for (uint256 i; i < coreswapConfigSwapTokensLength; ) {\\n            _swapTokens[coreSwapConfig.swapTokens[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        uint256 coreSwapConfigSwapOutputTokensLength = coreSwapConfig.swapOutputTokens.length;\\n        for (uint256 i; i < coreSwapConfigSwapOutputTokensLength; ) {\\n            _swapOutputTokens[coreSwapConfig.swapOutputTokens[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        uint256 coreSwapConfigSwapHandlersLength = coreSwapConfig.swapHandlers.length;\\n        for (uint256 i; i < coreSwapConfigSwapHandlersLength; ) {\\n            _swapHandlers[coreSwapConfig.swapHandlers[i]] = true;\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function enableSwapTokens(address[] memory swapTokens) public virtual;\\n\\n    function disableSwapTokens(address[] memory swapTokens) public virtual;\\n\\n    function _updateSwapTokens(address[] memory swapTokens, bool enabled) internal {\\n        uint256 swapTokensLength = swapTokens.length;\\n        for (uint256 i; i < swapTokensLength; ) {\\n            _swapTokens[swapTokens[i]] = enabled;\\n            emit SwapTokenUpdate(_msgSender(), swapTokens[i], enabled);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function enableSwapOutputTokens(address[] memory swapOutputTokens) public virtual;\\n\\n    function disableSwapOutputTokens(address[] memory swapOutputTokens) public virtual;\\n\\n    function _updateSwapOutputTokens(address[] memory swapOutputTokens, bool enabled) internal {\\n        uint256 swapOutputTokensLength = swapOutputTokens.length;\\n        for (uint256 i; i < swapOutputTokensLength; ) {\\n            _swapOutputTokens[swapOutputTokens[i]] = enabled;\\n            emit SwapOutputTokenUpdate(_msgSender(), swapOutputTokens[i], enabled);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function enableSwapHandlers(address[] memory swapHandlers) public virtual;\\n\\n    function disableSwapHandlers(address[] memory swapHandlers) public virtual;\\n\\n    function _updateSwapHandlers(address[] memory swapHandlers, bool enabled) internal {\\n        uint256 swapHandlersLength = swapHandlers.length;\\n        for (uint256 i; i < swapHandlersLength; ) {\\n            _swapHandlers[swapHandlers[i]] = enabled;\\n            emit SwapHandlerUpdate(_msgSender(), swapHandlers[i], enabled);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function swap(\\n        SwapPayload[] memory payloads,\\n        address outputToken,\\n        uint256 amountOutMin,\\n        uint256 feePct\\n    ) external virtual returns (uint256 outputAmount);\\n\\n    function _swap(\\n        SwapPayload[] memory payloads,\\n        address expectedOutputToken\\n    ) internal enforceSwapLimit(payloads) returns (uint256[] memory inputTokenAmounts, uint256 outputTokenAmount) {\\n        if (!_swapOutputTokens[expectedOutputToken]) {\\n            revert InvalidSwapOutputToken();\\n        }\\n        uint256 payloadsLength = payloads.length;\\n        inputTokenAmounts = new uint256[](payloadsLength);\\n        uint256 outputTokenBalanceStart = DefinitiveAssets.getBalance(expectedOutputToken);\\n\\n        for (uint256 i; i < payloadsLength; ) {\\n            SwapPayload memory payload = payloads[i];\\n\\n            if (!_swapHandlers[payload.handler]) {\\n                revert InvalidSwapHandler();\\n            }\\n\\n            if (expectedOutputToken == payload.swapToken) {\\n                revert SwapTokenIsOutputToken();\\n            }\\n\\n            uint256 outputTokenBalanceBefore = DefinitiveAssets.getBalance(expectedOutputToken);\\n            inputTokenAmounts[i] = DefinitiveAssets.getBalance(payload.swapToken);\\n\\n            (uint256 _outputAmount, address _outputToken) = _processSwap(payload, expectedOutputToken);\\n\\n            if (_outputToken != expectedOutputToken) {\\n                revert InvalidOutputToken();\\n            }\\n            if (_outputAmount < payload.amountOutMin) {\\n                revert InvalidReportedOutputAmount();\\n            }\\n            uint256 outputTokenBalanceAfter = DefinitiveAssets.getBalance(expectedOutputToken);\\n\\n            if ((outputTokenBalanceAfter - outputTokenBalanceBefore) < payload.amountOutMin) {\\n                revert InvalidExecutedOutputAmount();\\n            }\\n\\n            // Update `inputTokenAmounts` to reflect the amount of tokens actually swapped\\n            inputTokenAmounts[i] -= DefinitiveAssets.getBalance(payload.swapToken);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        outputTokenAmount = DefinitiveAssets.getBalance(expectedOutputToken) - outputTokenBalanceStart;\\n    }\\n\\n    function _processSwap(SwapPayload memory payload, address expectedOutputToken) private returns (uint256, address) {\\n        // Override payload.amount with validated amount\\n        payload.amount = _getValidatedPayloadAmount(payload);\\n\\n        /// @dev if asset is in _swapTokens, then it is a reward token\\n        bool isPrincipalAssetSwap = !_swapTokens[payload.swapToken];\\n\\n        bytes memory _calldata = _getEncodedSwapHandlerCalldata(\\n            payload,\\n            expectedOutputToken,\\n            isPrincipalAssetSwap,\\n            payload.isDelegate\\n        );\\n\\n        bool _success;\\n        bytes memory _returnBytes;\\n        if (payload.isDelegate) {\\n            // slither-disable-next-line controlled-delegatecall\\n            (_success, _returnBytes) = payload.handler.delegatecall(_calldata);\\n        } else {\\n            _prepareAssetsForNonDelegateHandlerCall(payload, payload.amount);\\n            (_success, _returnBytes) = payload.handler.call(_calldata);\\n        }\\n\\n        if (!_success) {\\n            CallUtils.revertFromReturnedData(_returnBytes);\\n        }\\n\\n        return abi.decode(_returnBytes, (uint256, address));\\n    }\\n\\n    function _getEncodedSwapHandlerCalldata(\\n        SwapPayload memory payload,\\n        address expectedOutputToken,\\n        bool isPrincipalAssetSwap,\\n        bool isDelegateCall\\n    ) internal pure virtual returns (bytes memory);\\n\\n    function _getValidatedPayloadAmount(SwapPayload memory payload) private view returns (uint256 amount) {\\n        uint256 balance = DefinitiveAssets.getBalance(payload.swapToken);\\n\\n        // Ensure balance > 0\\n        DefinitiveAssets.validateAmount(balance);\\n\\n        amount = payload.amount;\\n\\n        if (amount != 0 && balance < amount) {\\n            revert InsufficientSwapTokenBalance();\\n        }\\n\\n        // maximum available balance if amount == 0\\n        if (amount == 0) {\\n            return balance;\\n        }\\n    }\\n\\n    function _prepareAssetsForNonDelegateHandlerCall(SwapPayload memory payload, uint256 amount) private {\\n        if (payload.swapToken == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            // Send ETH to handler\\n            DefinitiveAssets.safeTransferETH(payable(payload.handler), amount);\\n        } else {\\n            IERC20(payload.swapToken).resetAndSafeIncreaseAllowance(address(this), payload.handler, amount);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSwap/v1/ICoreSwapV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { SwapPayload } from \\\"./CoreSwap.sol\\\";\\n\\ninterface ICoreSwapV1 {\\n    event SwapHandlerUpdate(address actor, address swapHandler, bool isEnabled);\\n    event SwapTokenUpdate(address actor, address swapToken, bool isEnabled);\\n    event SwapOutputTokenUpdate(address actor, address swapOutputToken, bool isEnabled);\\n    event SwapHandled(\\n        address[] swapTokens,\\n        uint256[] swapAmounts,\\n        address outputToken,\\n        uint256 outputAmount,\\n        uint256 feeAmount\\n    );\\n\\n    function enableSwapTokens(address[] memory swapTokens) external;\\n\\n    function disableSwapTokens(address[] memory swapTokens) external;\\n\\n    function enableSwapOutputTokens(address[] memory swapOutputTokens) external;\\n\\n    function disableSwapOutputTokens(address[] memory swapOutputTokens) external;\\n\\n    function enableSwapHandlers(address[] memory swapHandlers) external;\\n\\n    function disableSwapHandlers(address[] memory swapHandlers) external;\\n\\n    function swap(\\n        SwapPayload[] memory payloads,\\n        address outputToken,\\n        uint256 amountOutMin,\\n        uint256 feePct\\n    ) external returns (uint256 outputAmount);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreSwapHandler/ICoreSwapHandlerV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreSwapHandlerV1 {\\n    event Swap(\\n        address indexed actor,\\n        address indexed inputToken,\\n        uint256 inputAmount,\\n        address indexed outputToken,\\n        uint256 outputAmount\\n    );\\n\\n    struct SwapParams {\\n        address inputAssetAddress;\\n        uint256 inputAmount;\\n        address outputAssetAddress;\\n        uint256 minOutputAmount;\\n        bytes data;\\n        bytes signature;\\n    }\\n\\n    function swapCall(SwapParams calldata params) external payable returns (uint256 amountOut, address outputAsset);\\n\\n    function swapDelegate(SwapParams calldata params) external payable returns (uint256 amountOut, address outputAsset);\\n\\n    function swapUsingValidatedPathCall(\\n        SwapParams calldata params\\n    ) external payable returns (uint256 amountOut, address outputAsset);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreTransfersNative/v1/CoreTransfersNative.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { ICoreTransfersNativeV1 } from \\\"./ICoreTransfersNativeV1.sol\\\";\\n\\nimport { DefinitiveAssets, IERC20 } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\nimport { DefinitiveConstants } from \\\"../../libraries/DefinitiveConstants.sol\\\";\\nimport { InvalidInputs, InvalidMsgValue } from \\\"../../libraries/DefinitiveErrors.sol\\\";\\n\\nabstract contract CoreTransfersNative is ICoreTransfersNativeV1, Context {\\n    using DefinitiveAssets for IERC20;\\n\\n    /**\\n     * @notice Allows contract to receive native assets\\n     */\\n    receive() external payable virtual {}\\n\\n    /**\\n     * @notice This function is executed if none of the other functions\\n     * match the call data.  `bytes calldata` will contain the full data sent\\n     * to the contract (equal to msg.data) and can return data in output.\\n     * The returned data will not be ABI-encoded, and will be returned without\\n     * modifications (not even padding).\\n     * https://docs.soliditylang.org/en/v0.8.17/contracts.html#fallback-function\\n     */\\n    fallback(bytes calldata) external payable virtual returns (bytes memory) {}\\n\\n    function _depositNativeAndERC20(uint256[] calldata amounts, address[] calldata assetAddresses) internal virtual {\\n        uint256 assetAddressesLength = assetAddresses.length;\\n        if (amounts.length != assetAddressesLength) {\\n            revert InvalidInputs();\\n        }\\n\\n        bool hasNativeAsset;\\n        uint256 nativeAssetIndex;\\n\\n        for (uint256 i; i < assetAddressesLength; ) {\\n            if (assetAddresses[i] == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n                nativeAssetIndex = i;\\n                hasNativeAsset = true;\\n                unchecked {\\n                    ++i;\\n                }\\n                continue;\\n            }\\n            // ERC20 tokens\\n            IERC20(assetAddresses[i]).safeTransferFrom(_msgSender(), address(this), amounts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        // Revert if NATIVE_ASSET_ADDRESS is not in assetAddresses and msg.value is not zero\\n        if (!hasNativeAsset && msg.value != 0) {\\n            revert InvalidMsgValue();\\n        }\\n\\n        // Revert if depositing native asset and amount != msg.value\\n        if (hasNativeAsset && msg.value != amounts[nativeAssetIndex]) {\\n            revert InvalidMsgValue();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreTransfersNative/v1/ICoreTransfersNativeV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreTransfersNativeV1 {\\n    receive() external payable;\\n\\n    fallback(bytes calldata) external payable returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreWithdraw/v1/CoreWithdraw.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreWithdrawV1 } from \\\"./ICoreWithdrawV1.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../libraries/DefinitiveAssets.sol\\\";\\nimport { Context } from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport { DefinitiveConstants } from \\\"../../libraries/DefinitiveConstants.sol\\\";\\n\\nabstract contract CoreWithdraw is ICoreWithdrawV1, Context {\\n    using DefinitiveAssets for IERC20;\\n\\n    function supportsNativeAssets() public pure virtual returns (bool);\\n\\n    function withdraw(uint256 amount, address erc20Token) public virtual returns (bool);\\n\\n    function withdrawTo(uint256 amount, address erc20Token, address to) public virtual returns (bool);\\n\\n    function _withdraw(uint256 amount, address erc20Token) internal returns (bool) {\\n        return _withdrawTo(amount, erc20Token, _msgSender());\\n    }\\n\\n    function _withdrawTo(uint256 amount, address erc20Token, address to) internal returns (bool success) {\\n        if (erc20Token == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            DefinitiveAssets.safeTransferETH(payable(to), amount);\\n        } else {\\n            IERC20(erc20Token).safeTransfer(to, amount);\\n        }\\n\\n        emit Withdrawal(erc20Token, amount, to);\\n\\n        success = true;\\n    }\\n\\n    function withdrawAll(address[] calldata tokens) public virtual returns (bool);\\n\\n    function withdrawAllTo(address[] calldata tokens, address to) public virtual returns (bool);\\n\\n    function _withdrawAll(address[] calldata tokens) internal returns (bool) {\\n        return _withdrawAllTo(tokens, _msgSender());\\n    }\\n\\n    function _withdrawAllTo(address[] calldata tokens, address to) internal returns (bool success) {\\n        uint256 tokenLength = tokens.length;\\n        for (uint256 i; i < tokenLength; ) {\\n            uint256 tokenBalance = DefinitiveAssets.getBalance(tokens[i]);\\n            if (tokenBalance > 0) {\\n                _withdrawTo(tokenBalance, tokens[i], to);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n        return true;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/CoreWithdraw/v1/ICoreWithdrawV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\ninterface ICoreWithdrawV1 {\\n    event Withdrawal(address indexed erc20Token, uint256 amount, address indexed recipient);\\n\\n    function withdrawAll(address[] calldata tokens) external returns (bool);\\n\\n    function withdrawAllTo(address[] calldata tokens, address to) external returns (bool);\\n\\n    function supportsNativeAssets() external pure returns (bool);\\n\\n    function withdraw(uint256 amount, address erc20Token) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DefinitiveAssets.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { IERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { SafeTransferLib } from \\\"solmate/src/utils/SafeTransferLib.sol\\\";\\nimport { DefinitiveConstants } from \\\"./DefinitiveConstants.sol\\\";\\n\\nimport { InsufficientBalance, InvalidAmount, InvalidAmounts, InvalidERC20Address } from \\\"./DefinitiveErrors.sol\\\";\\n\\n/**\\n * @notice Contains methods used throughout the Definitive contracts\\n * @dev This file should only be used as an internal library.\\n */\\nlibrary DefinitiveAssets {\\n    /**\\n     * @dev Checks if an address is a valid ERC20 token\\n     */\\n    modifier onlyValidERC20(address erc20Token) {\\n        if (address(erc20Token) == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            revert InvalidERC20Address();\\n        }\\n        _;\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 ERC20 and Native Asset Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Gets the balance of an ERC20 token or native asset\\n     */\\n    function getBalance(address assetAddress) internal view returns (uint256) {\\n        if (assetAddress == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            return address(this).balance;\\n        } else {\\n            return IERC20(assetAddress).balanceOf(address(this));\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to validate balance is higher than a given amount for ERC20 and native assets\\n     */\\n    function validateBalance(address token, uint256 amount) internal view {\\n        if (token == DefinitiveConstants.NATIVE_ASSET_ADDRESS) {\\n            validateNativeBalance(amount);\\n        } else {\\n            validateERC20Balance(token, amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 Native Asset Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev validates amount and balance, then uses SafeTransferLib to transfer native asset\\n     */\\n    function safeTransferETH(address recipient, uint256 amount) internal {\\n        if (amount > 0) {\\n            SafeTransferLib.safeTransferETH(payable(recipient), amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 ERC20 Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev Resets and increases the allowance of a spender for an ERC20 token\\n     */\\n    function resetAndSafeIncreaseAllowance(\\n        IERC20 token,\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal onlyValidERC20(address(token)) {\\n        if (token.allowance(owner, spender) > 0) {\\n            SafeERC20.safeApprove(token, spender, 0);\\n        }\\n\\n        return SafeERC20.safeIncreaseAllowance(token, spender, amount);\\n    }\\n\\n    function safeTransfer(IERC20 token, address to, uint256 amount) internal onlyValidERC20(address(token)) {\\n        if (amount > 0) {\\n            SafeERC20.safeTransfer(token, to, amount);\\n        }\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal onlyValidERC20(address(token)) {\\n        if (amount > 0) {\\n            //slither-disable-next-line arbitrary-send-erc20\\n            SafeERC20.safeTransferFrom(token, from, to, amount);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////\\n    //////////////////////////////////////////////////\\n    // \u2193 Asset Amount Helper Methods \u2193\\n    //////////////////////////////////////////////////\\n\\n    /**\\n     * @dev internal function to validate that amounts contains a value greater than zero\\n     */\\n    function validateAmounts(uint256[] calldata amounts) internal pure {\\n        bool hasValidAmounts;\\n        uint256 amountsLength = amounts.length;\\n        for (uint256 i; i < amountsLength; ) {\\n            if (amounts[i] > 0) {\\n                hasValidAmounts = true;\\n                break;\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        if (!hasValidAmounts) {\\n            revert InvalidAmounts();\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to validate if native asset balance is higher than the amount requested\\n     */\\n    function validateNativeBalance(uint256 amount) internal view {\\n        if (getBalance(DefinitiveConstants.NATIVE_ASSET_ADDRESS) < amount) {\\n            revert InsufficientBalance();\\n        }\\n    }\\n\\n    /**\\n     * @dev internal function to validate balance is higher than the amount requested for a token\\n     */\\n    function validateERC20Balance(address token, uint256 amount) internal view onlyValidERC20(token) {\\n        if (getBalance(token) < amount) {\\n            revert InsufficientBalance();\\n        }\\n    }\\n\\n    function validateAmount(uint256 _amount) internal pure {\\n        if (_amount == 0) {\\n            revert InvalidAmount();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DefinitiveConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\n/**\\n * @notice Contains constants used throughout the Definitive contracts\\n * @dev This file should only be used as an internal library.\\n */\\nlibrary DefinitiveConstants {\\n    /**\\n     * @notice Maximum fee percentage\\n     */\\n    uint256 internal constant MAX_FEE_PCT = 10000;\\n\\n    /**\\n     * @notice Address to signify native assets\\n     */\\n    address internal constant NATIVE_ASSET_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    /**\\n     * @notice Maximum number of swaps allowed per block\\n     */\\n    uint8 internal constant MAX_SWAPS_PER_BLOCK = 25;\\n\\n    struct Assets {\\n        uint256[] amounts;\\n        address[] addresses;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/DefinitiveErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\n/**\\n * @notice Contains all errors used throughout the Definitive contracts\\n * @dev This file should only be used as an internal library.\\n * @dev When adding a new error, add alphabetically\\n */\\n\\nerror AccountMissingRole(address _account, bytes32 _role);\\nerror AccountNotAdmin(address);\\nerror AccountNotWhitelisted(address);\\nerror AddLiquidityFailed();\\nerror DeadlineExceeded();\\nerror BorrowFailed(uint256 errorCode);\\nerror DecollateralizeFailed(uint256 errorCode);\\nerror DepositMoreThanMax();\\nerror EnterAllFailed();\\nerror EnforcedSafeLTV(uint256 invalidLTV);\\nerror ExceededMaxDelta();\\nerror ExceededMaxLTV();\\nerror ExceededShareToAssetRatioDeltaThreshold();\\nerror ExitAllFailed();\\nerror ExitOneCoinFailed();\\nerror InitializeMarketsFailed();\\nerror InputGreaterThanStaked();\\nerror InsufficientBalance();\\nerror InsufficientSwapTokenBalance();\\nerror InvalidAmount();\\nerror InvalidAmounts();\\nerror InvalidCalldata();\\nerror InvalidDestinationSwapper();\\nerror InvalidERC20Address();\\nerror InvalidExecutedOutputAmount();\\nerror InvalidFeePercent();\\nerror InvalidHandler();\\nerror InvalidInputs();\\nerror InvalidMsgValue();\\nerror InvalidSingleHopSwap();\\nerror InvalidMultiHopSwap();\\nerror InvalidOutputToken();\\nerror InvalidRedemptionRecipient(); // Used in cross-chain redeptions\\nerror InvalidReportedOutputAmount();\\nerror InvalidRewardsClaim();\\nerror InvalidSignature();\\nerror InvalidSignatureLength();\\nerror InvalidSwapHandler();\\nerror InvalidSwapInputAmount();\\nerror InvalidSwapOutputToken();\\nerror InvalidSwapPath();\\nerror InvalidSwapPayload();\\nerror InvalidSwapToken();\\nerror MintMoreThanMax();\\nerror NativeAssetWrapFailed(bool wrappingToNative);\\nerror NoSignatureVerificationSignerSet();\\nerror RedeemMoreThanMax();\\nerror RemoveLiquidityFailed();\\nerror RepayDebtFailed();\\nerror SafeHarborModeEnabled();\\nerror SafeHarborRedemptionDisabled();\\nerror SlippageExceeded(uint256 _outputAmount, uint256 _outputAmountMin);\\nerror StakeFailed();\\nerror SupplyFailed();\\nerror StopGuardianEnabled();\\nerror SwapDeadlineExceeded();\\nerror SwapLimitExceeded();\\nerror SwapTokenIsOutputToken();\\nerror TransfersLimitExceeded();\\nerror UnstakeFailed();\\nerror UnauthenticatedFlashloan();\\nerror UntrustedFlashLoanSender(address);\\nerror WithdrawMoreThanMax();\\nerror ZeroShares();\\n\"\r\n    },\r\n    \"contracts/modules/LLSDStrategy/v1/ILLSDStrategyV1.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ICoreMulticallV1 } from \\\"../../../core/CoreMulticall/v1/ICoreMulticallV1.sol\\\";\\nimport { SwapPayload } from \\\"../../../base/BaseSwap.sol\\\";\\nimport { IBasePermissionedExecution } from \\\"../../../base/BasePermissionedExecution/IBasePermissionedExecution.sol\\\";\\n\\ninterface ILLSDStrategyV1 is ICoreMulticallV1, IBasePermissionedExecution {\\n    event Enter(\\n        uint256 collateral,\\n        uint256 collateralDelta,\\n        uint256 debt,\\n        uint256 debtDelta,\\n        address[] dryAssets,\\n        int256[] dryBalanceDeltas,\\n        uint256 ltv\\n    );\\n\\n    event Exit(\\n        uint256 collateral,\\n        uint256 collateralDelta,\\n        uint256 debt,\\n        uint256 debtDelta,\\n        address[] dryAssets,\\n        int256[] dryBalanceDeltas,\\n        uint256 ltv\\n    );\\n\\n    event SweepDust(uint256 collateral, uint256 collateralDelta, uint256 debt, uint256 debtDelta, uint256 ltv);\\n\\n    struct EnterContext {\\n        uint256 flashloanAmount;\\n        SwapPayload swapPayload;\\n        uint256 maxLTV;\\n    }\\n\\n    struct ExitContext {\\n        uint256 flashloanAmount;\\n        uint256 repayAmount;\\n        uint256 decollateralizeAmount;\\n        SwapPayload swapPayload;\\n        uint256 maxLTV;\\n    }\\n\\n    enum FlashLoanContextType {\\n        ENTER,\\n        EXIT\\n    }\\n\\n    function STAKED_TOKEN() external view returns (address);\\n\\n    function STAKING_TOKEN() external view returns (address);\\n\\n    /**\\n     * @notice  Enter or increase leverage using a flashloan.\\n     *     Steps:\\n     *     1.   Flashloan `flashloanAmount` of the staking asset (eg: WETH)\\n     *     2a.  On chains that support staking, stake the entire dry balance of the staking token (eg: WETH)\\n     *     2b.  All other chains, the `swapPayload` will swap `flashloanAmount` to the staked asset\\n     *     3.   Collateralize strategy balance of `dry` staked token (eg: wstETH)\\n     *     4.   Borrow `flashloanAmount`\\n     *     5.   Repay flashloan\\n     *     6.   Verify LTV is below inputted threshold\\n     * @dev Swapping is only initiated if `SwapPayload.amount` > 0.\\n     * @dev 2b: `SwapPayload.amount` determines the amount of staking asset to swap\\n     * @param flashloanAmount   Amount to flashloan\\n     * @param swapPayload       Swaps to staked asset when native staking is not possible.\\n     *                          Not used on chains that support native staking.\\n     * @param maxLTV            Verify LTV at the end of the operation\\n     */\\n    function enter(uint256 flashloanAmount, SwapPayload calldata swapPayload, uint256 maxLTV) external;\\n\\n    /**\\n     * @notice  Enter or increase leverage using multicall looping.\\n     *     Steps:\\n     *     1.   Collateralize strategy balance of `dry` staked asset (eg: wstETH)\\n     *     2.   Borrow staking asset\\n     *     3a.  On chains that support staking, stake the entire dry balance of the staking token (eg: WETH)\\n     *     3b.  All other chains, the `swapPayload` will swap `flashloanAmount` to the staked asset\\n     *     4.   Verify LTV is below inputted threshold\\n     * @dev Swapping is only initiated if `SwapPayload.amount` > 0.\\n     *      This can occur to allow users to withdraw the staked asset.\\n     * @param borrowAmount      Amount to borrow\\n     * @param swapPayload       Swaps in to staked asset when native staking is not possible.\\n     * *                        Not used on chains that support native staking.\\n     * @param maxLTV            Verify LTV at the end of the operation\\n     */\\n    function enterMulticall(uint256 borrowAmount, SwapPayload calldata swapPayload, uint256 maxLTV) external;\\n\\n    /**\\n     * @notice Exit or decrease leverage using a flashloan.\\n     *     Steps:\\n     *     1.   Flashloan `flashloanAmount` of the staking asset (eg: WETH)\\n     *     2.   Repay `repayAmount`\\n     *     3.   Decollateralize `flashloanAmount`\\n     *     4a.  On chains that support unstaking, unstake `flashloanAmount`\\n     *     4b.  All other chains, `swapPayload` will swap `decollateralizeAmount` out of the staked asset\\n     *     5.   Repay `flashloanAmount`\\n     *     6.   Verify LTV is below inputted threshold\\n     * @dev `flashloanAmount` less `repayAmount` is the amount of the staking asset to leave dry.\\n     * @dev Swapping is only initiated if `SwapPayload.amount` > 0.\\n     *      This can occur to allow users to withdraw the staked asset.\\n     * @param flashloanAmount   Amount to flashloan\\n     * @param repayAmount       Amount of `flashloanAmount` to repay\\n     * @param decollateralizeAmount       Amount of staked asset to remove as collateral\\n     * @param swapPayload       Swaps to staking asset when native unstaking is not possible\\n     *                          On chains that support unstaking, `SwapPayload.amount` is used to unstake\\n     * @param maxLTV            Verify LTV at the end of the operation\\n     */\\n    function exit(\\n        uint256 flashloanAmount,\\n        uint256 repayAmount,\\n        uint256 decollateralizeAmount,\\n        SwapPayload calldata swapPayload,\\n        uint256 maxLTV\\n    ) external;\\n\\n    /**\\n     * @notice Exit or decrease leverage using multicall looping.\\n     *     Steps:\\n     *     1.   Decollateralize `decollateralizeAmount`\\n     *     2a.  On chains that support unstaking, unstake `decollateralizeAmount`\\n     *     2b.  All other chains, `swapPayload` will swap `decollateralizeAmount` out of the staked asset\\n     *     3.   If `repayDebt` is `true`, repay using the min(output of swap from step 2, outstanding debt)\\n     *          Minimum amount is used to allow users to withdraw the staked asset.\\n     *          If `repayDebt` is `false`, no repayment will be made.\\n     *     4.   Verify LTV is below inputted threshold\\n     * @dev Swapping is only initiated if `SwapPayload.amount` > 0.\\n     *      This can occur to allow users to withdraw the staked asset.\\n     * @dev `repayDebt` can be set to `true` to allow users to withdraw the staking asset.\\n     * @param decollateralizeAmount Amount of staked asset to remove as collateral\\n     * @param swapPayload       Swaps to staking asset when native unstaking is not possible\\n     *                          On chains that support unstaking, `SwapPayload.amount` is used to unstake\\n     * @param repayDebt         Flag to repay decollateralized asset\\n     * @param maxLTV            Verify LTV at the end of the operation\\n     */\\n    function exitMulticall(\\n        uint256 decollateralizeAmount,\\n        SwapPayload calldata swapPayload,\\n        bool repayDebt,\\n        uint256 maxLTV\\n    ) external;\\n\\n    /**\\n     * @notice  Vault balances of supplyable assets are supplied;\\n     *          vault balances of repayable assets are repaid\\n     */\\n    function sweepDust() external;\\n\\n    // view functions\\n\\n    function getDebtAmount() external view returns (uint256);\\n\\n    function getCollateralAmount() external view returns (uint256);\\n\\n    /// @notice Returns the oracle price of the debt asset in terms of the collateral asset\\n    function getCollateralToDebtPrice() external view returns (uint256 price, uint256 precision);\\n\\n    function getLTV() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/modules/LLSDStrategy/v1/LLSDStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { ILLSDStrategyV1 } from \\\"./ILLSDStrategyV1.sol\\\";\\nimport { BaseSwap, CoreSwapConfig, SwapPayload } from \\\"../../../base/BaseSwap.sol\\\";\\nimport { CoreMulticall } from \\\"../../../core/CoreMulticall/v1/CoreMulticall.sol\\\";\\nimport { BaseAccessControl, CoreAccessControlConfig } from \\\"../../../base/BaseAccessControl.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../../core/libraries/DefinitiveAssets.sol\\\";\\nimport { ExceededMaxLTV, InvalidRewardsClaim } from \\\"../../../core/libraries/DefinitiveErrors.sol\\\";\\nimport { BaseFees, CoreFeesConfig } from \\\"../../../base/BaseFees.sol\\\";\\nimport { BasePermissionedExecution } from \\\"../../../base/BasePermissionedExecution/BasePermissionedExecution.sol\\\";\\nimport { BaseSafeHarborMode } from \\\"../../../base/BaseSafeHarborMode/BaseSafeHarborMode.sol\\\";\\nimport { BaseRewards } from \\\"../../../base/BaseRewards.sol\\\";\\n\\nstruct LLSDStrategyConfig {\\n    address stakingToken;\\n    address stakedToken;\\n}\\n\\nabstract contract LLSDStrategy is\\n    ILLSDStrategyV1,\\n    BaseSwap,\\n    CoreMulticall,\\n    BasePermissionedExecution,\\n    BaseSafeHarborMode,\\n    BaseRewards\\n{\\n    address[] internal DRY_TOKENS;\\n\\n    constructor(\\n        CoreAccessControlConfig memory coreAccessControlConfig,\\n        CoreSwapConfig memory coreSwapConfig,\\n        CoreFeesConfig memory coreFeesConfig,\\n        LLSDStrategyConfig memory llsdConfig\\n    ) BaseAccessControl(coreAccessControlConfig) BaseSwap(coreSwapConfig) BaseFees(coreFeesConfig) {\\n        DRY_TOKENS = new address[](2);\\n        DRY_TOKENS[0] = llsdConfig.stakedToken;\\n        DRY_TOKENS[1] = llsdConfig.stakingToken;\\n    }\\n\\n    function STAKED_TOKEN() public view returns (address) {\\n        return DRY_TOKENS[0];\\n    }\\n\\n    function STAKING_TOKEN() public view returns (address) {\\n        return DRY_TOKENS[1];\\n    }\\n\\n    modifier emitEvent(FlashLoanContextType _type) {\\n        (uint256 collateralBefore, uint256 debtBefore, int256[] memory dryBalanceDeltas) = (\\n            getCollateralAmount(),\\n            getDebtAmount(),\\n            _getBalanceDeltas(new int256[](2))\\n        );\\n\\n        _;\\n\\n        emitEnterOrExitEvent(collateralBefore, debtBefore, dryBalanceDeltas, _type);\\n    }\\n\\n    modifier enforceMaxLTV(uint256 maxLTV) {\\n        _;\\n\\n        // Confirm LTV is below maxLTV\\n        if (getLTV() > maxLTV) {\\n            revert ExceededMaxLTV();\\n        }\\n    }\\n\\n    function emitEnterOrExitEvent(\\n        uint256 collateralBefore,\\n        uint256 debtBefore,\\n        int256[] memory dryBalancesBefore,\\n        FlashLoanContextType _type\\n    ) internal {\\n        (uint256 collateralAfter, uint256 debtAfter, int256[] memory dryBalanceDeltas, uint256 ltv) = (\\n            getCollateralAmount(),\\n            getDebtAmount(),\\n            _getBalanceDeltas(dryBalancesBefore),\\n            getLTV()\\n        );\\n\\n        if (_type == FlashLoanContextType.ENTER) {\\n            // Upon enter, collateral and debt amounts can not decrease\\n            emit Enter(\\n                collateralAfter,\\n                collateralAfter - collateralBefore,\\n                debtAfter,\\n                debtAfter - debtBefore,\\n                DRY_TOKENS,\\n                dryBalanceDeltas,\\n                ltv\\n            );\\n        } else if (_type == FlashLoanContextType.EXIT) {\\n            // Upon exit, collateral and debt amounts can not increase\\n            emit Exit(\\n                collateralAfter,\\n                collateralBefore - collateralAfter,\\n                debtAfter,\\n                debtBefore - debtAfter,\\n                DRY_TOKENS,\\n                dryBalanceDeltas,\\n                ltv\\n            );\\n        }\\n    }\\n\\n    function enterMulticall(\\n        uint256 borrowAmount,\\n        SwapPayload calldata swapPayload,\\n        uint256 maxLTV\\n    )\\n        external\\n        virtual\\n        onlyWhitelisted\\n        stopGuarded\\n        nonReentrant\\n        enforceMaxLTV(maxLTV)\\n        emitEvent(FlashLoanContextType.ENTER)\\n    {\\n        address mSTAKED_TOKEN = STAKED_TOKEN();\\n        // Supply dry balances of staked token\\n        _supply(DefinitiveAssets.getBalance(mSTAKED_TOKEN));\\n\\n        _borrow(borrowAmount);\\n\\n        // Swap in to staked asset\\n        if (swapPayload.amount > 0) {\\n            SwapPayload[] memory swapPayloads = new SwapPayload[](1);\\n            swapPayloads[0] = swapPayload;\\n            _swap(swapPayloads, mSTAKED_TOKEN);\\n        }\\n    }\\n\\n    function exitMulticall(\\n        uint256 decollateralizeAmount,\\n        SwapPayload calldata swapPayload,\\n        bool repayDebt,\\n        uint256 maxLTV\\n    ) external onlyWhitelisted stopGuarded nonReentrant enforceMaxLTV(maxLTV) emitEvent(FlashLoanContextType.EXIT) {\\n        // Decollateralize\\n        _decollateralize(decollateralizeAmount);\\n\\n        address mSTAKING_TOKEN = STAKING_TOKEN();\\n        uint256 swapOutput = DefinitiveAssets.getBalance(mSTAKING_TOKEN);\\n\\n        // Swap out of staked asset\\n        if (swapPayload.amount > 0) {\\n            SwapPayload[] memory swapPayloads = new SwapPayload[](1);\\n            swapPayloads[0] = swapPayload;\\n            _swap(swapPayloads, mSTAKING_TOKEN);\\n\\n            // Store the amount of staking asset received from swap\\n            swapOutput = DefinitiveAssets.getBalance(mSTAKING_TOKEN) - swapOutput;\\n        }\\n\\n        // Repay debt\\n        if (repayDebt) {\\n            // Repay the min of the swap output or the debt amount\\n\\n            uint256 debtAmount = getDebtAmount();\\n            uint256 repayAmount = swapOutput < debtAmount ? swapOutput : debtAmount;\\n            _repay(repayAmount);\\n        }\\n    }\\n\\n    function sweepDust() external onlyWhitelisted stopGuarded nonReentrant {\\n        (uint256 collateralBefore, uint256 debtBefore) = (getCollateralAmount(), getDebtAmount());\\n\\n        if (collateralBefore > 0 && debtBefore > 0) {\\n            _repay(DefinitiveAssets.getBalance(STAKING_TOKEN()));\\n        }\\n\\n        _supply(DefinitiveAssets.getBalance(STAKED_TOKEN()));\\n\\n        (uint256 collateralAfter, uint256 debtAfter) = (getCollateralAmount(), getDebtAmount());\\n\\n        emit SweepDust(\\n            collateralAfter,\\n            collateralAfter - collateralBefore,\\n            debtAfter,\\n            debtBefore - debtAfter,\\n            getLTV()\\n        );\\n    }\\n\\n    function getCollateralAmount() public view virtual returns (uint256);\\n\\n    function getDebtAmount() public view virtual returns (uint256);\\n\\n    function getLTV() public view virtual returns (uint256);\\n\\n    /// @dev By default, `unclaimedRewards()` will return 0 tokens + 0 reward amounts\\n    function unclaimedRewards()\\n        public\\n        view\\n        virtual\\n        override\\n        returns (IERC20[] memory rewardTokens, uint256[] memory earnedAmounts)\\n    {}\\n\\n    function _borrow(uint256 amount) internal virtual;\\n\\n    function _decollateralize(uint256 amount) internal virtual;\\n\\n    function _repay(uint256 amount) internal virtual;\\n\\n    function _supply(uint256 amount) internal virtual;\\n\\n    /// @dev By default, `_claimAllRewards()` will revert\\n    function _claimAllRewards() internal virtual override returns (IERC20[] memory, uint256[] memory) {\\n        revert InvalidRewardsClaim();\\n    }\\n\\n    function _getBalanceDeltas(\\n        int256[] memory previousDryBalances\\n    ) internal view returns (int256[] memory dryBalanceDeltas) {\\n        address[] memory mDryAssets = DRY_TOKENS;\\n        dryBalanceDeltas = new int256[](mDryAssets.length);\\n        uint256 length = mDryAssets.length;\\n        uint256 i = 0;\\n        while (i < length) {\\n            dryBalanceDeltas[i] = int256(DefinitiveAssets.getBalance(mDryAssets[i])) - previousDryBalances[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/modules/native-asset-wrappers/WETH9NativeWrapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { BaseNativeWrapper, BaseNativeWrapperConfig } from \\\"../../base/BaseNativeWrapper/v1/BaseNativeWrapper.sol\\\";\\nimport { IWETH9 } from \\\"../../vendor/interfaces/IWETH9.sol\\\";\\n\\nabstract contract WETH9NativeWrapper is BaseNativeWrapper {\\n    constructor(BaseNativeWrapperConfig memory config) BaseNativeWrapper(config) {}\\n\\n    function _wrap(uint256 amount) internal override {\\n        // slither-disable-next-line arbitrary-send-eth\\n        IWETH9(WRAPPED_NATIVE_ASSET_ADDRESS).deposit{ value: amount }();\\n    }\\n\\n    function _unwrap(uint256 amount) internal override {\\n        IWETH9(WRAPPED_NATIVE_ASSET_ADDRESS).withdraw(amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/protocols/balancer/BalancerFlashloanBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport {\\n    IFlashLoanRecipient,\\n    IERC20 as BalancerIERC20\\n} from \\\"@balancer-labs/v2-interfaces/contracts/vault/IFlashLoanRecipient.sol\\\";\\nimport { IVault } from \\\"@balancer-labs/v2-interfaces/contracts/vault/IVault.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../core/libraries/DefinitiveAssets.sol\\\";\\nimport { UnauthenticatedFlashloan, UntrustedFlashLoanSender } from \\\"../../core/libraries/DefinitiveErrors.sol\\\";\\n\\nabstract contract BalancerFlashloanBase {\\n    using DefinitiveAssets for IERC20;\\n\\n    address private constant BALANCER_VAULT = 0xBA12222222228d8Ba445958a75a0704d566BF2C8;\\n    bool private isAuthenticated;\\n\\n    function initiateFlashLoan(address borrowToken, uint256 amount, bytes memory userData) internal {\\n        (BalancerIERC20[] memory tokens, uint256[] memory amounts) = (new BalancerIERC20[](1), new uint256[](1));\\n        tokens[0] = BalancerIERC20(borrowToken);\\n        amounts[0] = amount;\\n        isAuthenticated = true;\\n        IVault(BALANCER_VAULT).flashLoan(IFlashLoanRecipient(address(this)), tokens, amounts, userData);\\n    }\\n\\n    function receiveFlashLoan(\\n        IERC20[] memory tokens,\\n        uint256[] memory amounts,\\n        uint256[] memory feeAmounts,\\n        bytes memory userData\\n    ) external {\\n        // we must enforce that only the flashloan provider vault can call this function\\n        if (msg.sender != BALANCER_VAULT) {\\n            revert UntrustedFlashLoanSender(msg.sender);\\n        }\\n\\n        // Enforce we initiated the flashloan\\n        if (!isAuthenticated) {\\n            revert UnauthenticatedFlashloan();\\n        }\\n\\n        // Reset authentication\\n        isAuthenticated = false;\\n\\n        onFlashLoanReceived(address(tokens[0]), amounts[0], feeAmounts[0], userData);\\n\\n        // Send tokens back to the balancer vault\\n        // slither-disable-next-line arbitrary-send-erc20\\n        tokens[0].safeTransfer(BALANCER_VAULT, amounts[0] + feeAmounts[0]);\\n    }\\n\\n    function onFlashLoanReceived(\\n        address token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        bytes memory userData\\n    ) internal virtual;\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/LLSD/libraries/AaveV3Helper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { DefinitiveAssets, IERC20 } from \\\"../../../core/libraries/DefinitiveAssets.sol\\\";\\nimport { IPool } from \\\"@aave/core-v3/contracts/interfaces/IPool.sol\\\";\\nimport { IPoolAddressesProvider } from \\\"@aave/core-v3/contracts/interfaces/IPoolAddressesProvider.sol\\\";\\nimport { IPriceOracleGetter } from \\\"@aave/core-v3/contracts/interfaces/IPriceOracleGetter.sol\\\";\\nimport { DataTypes } from \\\"@aave/core-v3/contracts/protocol/libraries/types/DataTypes.sol\\\";\\nimport {\\n    ReserveConfiguration\\n} from \\\"@aave/core-v3/contracts/protocol/libraries/configuration/ReserveConfiguration.sol\\\";\\n\\nlibrary AaveV3Helper {\\n    using DefinitiveAssets for IERC20;\\n    using ReserveConfiguration for DataTypes.ReserveConfigurationMap;\\n    using ReserveConfiguration for DataTypes.ReserveData;\\n\\n    // From Aave docs: Referral program is currently inactive, you can pass 0 as referralCode.\\n    uint16 public constant REFERRAL_CODE = 0;\\n\\n    function setEMode(address pool, uint8 categoryId) external {\\n        IPool(pool).setUserEMode(categoryId);\\n    }\\n\\n    function getOraclePriceRatio(\\n        address pool,\\n        address tokenAddress,\\n        address toTokenAddress\\n    ) public view returns (uint256, uint256) {\\n        (uint256 tokenPrice, uint256 tokenPrecision, address tokenBaseCurrency) = _getOraclePrice(pool, tokenAddress);\\n        if (toTokenAddress == tokenBaseCurrency) {\\n            return (tokenPrice, tokenPrecision);\\n        }\\n\\n        (uint256 toTokenPrice, uint256 toTokenPrecision, address toTokenBaseCurrency) = _getOraclePrice(\\n            pool,\\n            toTokenAddress\\n        );\\n\\n        // If the base currencies are different, perform an intermediary conversion\\n        if (tokenBaseCurrency != toTokenBaseCurrency) {\\n            (uint256 conversionPrice, uint256 conversionPrecision, ) = _getOraclePrice(pool, tokenBaseCurrency);\\n\\n            // Convert the tokenPrice to the base currency of the toToken\\n            tokenPrice = (tokenPrice * conversionPrecision) / conversionPrice;\\n\\n            // If the precisions are different, adjust the collateral token precision to match the debt token precision\\n            if (tokenPrecision != toTokenPrecision) {\\n                tokenPrice = (tokenPrice * toTokenPrecision) / tokenPrecision;\\n            }\\n        }\\n\\n        return ((tokenPrice * toTokenPrecision) / toTokenPrice, toTokenPrecision);\\n    }\\n\\n    function borrow(\\n        address pool,\\n        address asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        address onBehalfOf\\n    ) external {\\n        if (amount > 0) {\\n            IPool(pool).borrow(asset, amount, uint256(interestRateMode), REFERRAL_CODE, onBehalfOf);\\n        }\\n    }\\n\\n    function repay(\\n        address pool,\\n        address asset,\\n        uint256 amount,\\n        DataTypes.InterestRateMode interestRateMode,\\n        address onBehalfOf\\n    ) external {\\n        if (amount > 0) {\\n            IERC20(asset).resetAndSafeIncreaseAllowance(onBehalfOf, pool, amount);\\n            IPool(pool).repay(asset, amount, uint256(interestRateMode), onBehalfOf);\\n        }\\n    }\\n\\n    function supply(address pool, address asset, uint256 amount, address onBehalfOf) external {\\n        if (amount > 0) {\\n            IERC20(asset).resetAndSafeIncreaseAllowance(onBehalfOf, pool, amount);\\n            IPool(pool).supply(asset, amount, onBehalfOf, REFERRAL_CODE);\\n        }\\n    }\\n\\n    function decollateralize(address pool, address asset, uint256 amount, address onBehalfOf) external {\\n        if (amount > 0) {\\n            // slither-disable-next-line unused-return\\n            IPool(pool).withdraw(asset, amount, onBehalfOf);\\n        }\\n    }\\n\\n    function getTotalStableDebt(address pool, address underlyingAsset) external view returns (uint256 stableDebt) {\\n        DataTypes.ReserveData memory reserveData = IPool(pool).getReserveData(underlyingAsset);\\n        stableDebt = DefinitiveAssets.getBalance(reserveData.stableDebtTokenAddress);\\n    }\\n\\n    function getTotalVariableDebt(address pool, address underlyingAsset) external view returns (uint256) {\\n        DataTypes.ReserveData memory reserveData = IPool(pool).getReserveData(underlyingAsset);\\n        return DefinitiveAssets.getBalance(reserveData.variableDebtTokenAddress);\\n    }\\n\\n    function getTotalCollateral(address pool, address asset) external view returns (uint256) {\\n        DataTypes.ReserveData memory reserveData = IPool(pool).getReserveData(asset);\\n        return DefinitiveAssets.getBalance(reserveData.aTokenAddress);\\n    }\\n\\n    function getLTV(address pool, address user) external view returns (uint256 ltv) {\\n        (uint256 totalCollateralBase, uint256 totalDebtBase, , , , ) = IPool(pool).getUserAccountData(user);\\n\\n        if (totalCollateralBase > 0) {\\n            ltv = ((totalDebtBase * 1e4) / totalCollateralBase);\\n        }\\n\\n        return ltv;\\n    }\\n\\n    function _getOraclePrice(\\n        address pool,\\n        address asset\\n    ) internal view returns (uint256 price, uint256 precision, address currency) {\\n        address provider = address(IPool(pool).ADDRESSES_PROVIDER());\\n        address oracle = IPoolAddressesProvider(provider).getPriceOracle();\\n        price = IPriceOracleGetter(oracle).getAssetPrice(asset);\\n        precision = IPriceOracleGetter(oracle).BASE_CURRENCY_UNIT();\\n        currency = IPriceOracleGetter(oracle).BASE_CURRENCY();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/strategies/LLSD/wstETH/LLSD_EthereumAaveV3Balancer_wstETH_WETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.18;\\n\\nimport { BaseTransfersNative } from \\\"../../../base/BaseTransfersNative/v1/BaseTransfersNative.sol\\\";\\nimport {\\n    WETH9NativeWrapper,\\n    BaseNativeWrapperConfig\\n} from \\\"../../../modules/native-asset-wrappers/WETH9NativeWrapper.sol\\\";\\nimport { SwapPayload } from \\\"../../../base/BaseSwap.sol\\\";\\nimport { DefinitiveAssets, IERC20 } from \\\"../../../core/libraries/DefinitiveAssets.sol\\\";\\nimport {\\n    CoreAccessControlConfig,\\n    CoreSwapConfig,\\n    CoreFeesConfig,\\n    LLSDStrategy,\\n    LLSDStrategyConfig\\n} from \\\"../../../modules/LLSDStrategy/v1/LLSDStrategy.sol\\\";\\nimport { BalancerFlashloanBase } from \\\"../../../protocols/balancer/BalancerFlashloanBase.sol\\\";\\nimport { AaveV3Helper, DataTypes } from \\\"../libraries/AaveV3Helper.sol\\\";\\n\\n// solhint-disable-next-line contract-name-camelcase\\ncontract LLSD_EthereumAaveV3Balancer_wstETH_WETH is\\n    LLSDStrategy,\\n    BaseTransfersNative,\\n    WETH9NativeWrapper,\\n    BalancerFlashloanBase\\n{\\n    using DefinitiveAssets for IERC20;\\n\\n    /// @dev Aave V3 Mainnet Pool Address\\n    /// @dev https://docs.aave.com/developers/deployed-contracts/v3-mainnet/ethereum-mainnet\\n    address public constant AAVE_V3_POOL = 0x87870Bca3F3fD6335C3F4ce8392D69350B4fA4E2;\\n\\n    constructor(\\n        BaseNativeWrapperConfig memory baseNativeWrapperConfig,\\n        CoreAccessControlConfig memory coreAccessControlConfig,\\n        CoreSwapConfig memory coreSwapConfig,\\n        CoreFeesConfig memory coreFeesConfig\\n    )\\n        LLSDStrategy(\\n            coreAccessControlConfig,\\n            coreSwapConfig,\\n            coreFeesConfig,\\n            LLSDStrategyConfig(\\n                /// @dev STAKING_TOKEN: WETH\\n                0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2,\\n                /// @dev STAKED_TOKEN: wstETH\\n                0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0\\n            )\\n        )\\n        WETH9NativeWrapper(baseNativeWrapperConfig)\\n    {\\n        // Enable EMode to ETH Correlated to increase LTV to 90%\\n        AaveV3Helper.setEMode(AAVE_V3_POOL, 1);\\n    }\\n\\n    function enter(\\n        uint256 flashloanAmount,\\n        SwapPayload calldata swapPayload,\\n        uint256 maxLTV\\n    ) external onlyWhitelisted stopGuarded nonReentrant enforceMaxLTV(maxLTV) emitEvent(FlashLoanContextType.ENTER) {\\n        EnterContext memory ctx = EnterContext(flashloanAmount, swapPayload, maxLTV);\\n\\n        return\\n            flashloanAmount == 0\\n                ? _enterContinue(abi.encode(ctx))\\n                : initiateFlashLoan(\\n                    STAKING_TOKEN(),\\n                    flashloanAmount,\\n                    abi.encode(FlashLoanContextType.ENTER, abi.encode(ctx))\\n                );\\n    }\\n\\n    function exit(\\n        uint256 flashloanAmount,\\n        uint256 repayAmount,\\n        uint256 decollateralizeAmount,\\n        SwapPayload calldata swapPayload,\\n        uint256 maxLTV\\n    ) external onlyWhitelisted stopGuarded nonReentrant enforceMaxLTV(maxLTV) emitEvent(FlashLoanContextType.EXIT) {\\n        ExitContext memory ctx = ExitContext(flashloanAmount, repayAmount, decollateralizeAmount, swapPayload, maxLTV);\\n\\n        return\\n            flashloanAmount == 0\\n                ? _exitContinue(abi.encode(ctx))\\n                : initiateFlashLoan(\\n                    STAKING_TOKEN(),\\n                    flashloanAmount,\\n                    abi.encode(FlashLoanContextType.EXIT, abi.encode(ctx))\\n                );\\n    }\\n\\n    function setEMode(uint8 categoryId) external onlyWhitelisted {\\n        AaveV3Helper.setEMode(AAVE_V3_POOL, categoryId);\\n    }\\n\\n    function getCollateralToDebtPrice() external view returns (uint256, uint256) {\\n        return AaveV3Helper.getOraclePriceRatio(AAVE_V3_POOL, STAKING_TOKEN(), STAKED_TOKEN());\\n    }\\n\\n    function getDebtAmount() public view override returns (uint256) {\\n        return AaveV3Helper.getTotalVariableDebt(AAVE_V3_POOL, STAKING_TOKEN());\\n    }\\n\\n    function getCollateralAmount() public view override returns (uint256) {\\n        return AaveV3Helper.getTotalCollateral(AAVE_V3_POOL, STAKED_TOKEN());\\n    }\\n\\n    function getLTV() public view override returns (uint256) {\\n        return AaveV3Helper.getLTV(AAVE_V3_POOL, address(this));\\n    }\\n\\n    function onFlashLoanReceived(\\n        address, // token\\n        uint256, // amount\\n        uint256, // feeAmount\\n        bytes memory userData\\n    ) internal override {\\n        (FlashLoanContextType ctxType, bytes memory data) = abi.decode(userData, (FlashLoanContextType, bytes));\\n\\n        if (ctxType == FlashLoanContextType.ENTER) {\\n            return _enterContinue(data);\\n        }\\n\\n        if (ctxType == FlashLoanContextType.EXIT) {\\n            return _exitContinue(data);\\n        }\\n    }\\n\\n    function _enterContinue(bytes memory contextData) internal {\\n        EnterContext memory context = abi.decode(contextData, (EnterContext));\\n        address mSTAKED_TOKEN = STAKED_TOKEN();\\n\\n        // Swap in to staked asset\\n        if (context.swapPayload.amount > 0) {\\n            SwapPayload[] memory swapPayloads = new SwapPayload[](1);\\n            swapPayloads[0] = context.swapPayload;\\n            _swap(swapPayloads, mSTAKED_TOKEN);\\n        }\\n\\n        // Supply dry balance of staked token\\n        _supply(DefinitiveAssets.getBalance(mSTAKED_TOKEN));\\n\\n        // Borrow flashloan amount for repayment\\n        _borrow(context.flashloanAmount);\\n    }\\n\\n    function _exitContinue(bytes memory contextData) internal {\\n        ExitContext memory context = abi.decode(contextData, (ExitContext));\\n\\n        // Repay debt\\n        _repay(context.repayAmount);\\n\\n        // Decollateralize\\n        _decollateralize(context.decollateralizeAmount);\\n\\n        // Swap out of staked asset\\n        if (context.swapPayload.amount > 0) {\\n            SwapPayload[] memory swapPayloads = new SwapPayload[](1);\\n            swapPayloads[0] = context.swapPayload;\\n            _swap(swapPayloads, STAKING_TOKEN());\\n        }\\n    }\\n\\n    function _borrow(uint256 amount) internal override {\\n        AaveV3Helper.borrow(AAVE_V3_POOL, STAKING_TOKEN(), amount, DataTypes.InterestRateMode.VARIABLE, address(this));\\n    }\\n\\n    function _decollateralize(uint256 amount) internal override {\\n        AaveV3Helper.decollateralize(AAVE_V3_POOL, STAKED_TOKEN(), amount, address(this));\\n    }\\n\\n    function _repay(uint256 amount) internal override {\\n        uint256 debtAmount = getDebtAmount();\\n        AaveV3Helper.repay(\\n            AAVE_V3_POOL,\\n            STAKING_TOKEN(),\\n            amount > debtAmount ? debtAmount : amount,\\n            DataTypes.InterestRateMode.VARIABLE,\\n            address(this)\\n        );\\n    }\\n\\n    function _supply(uint256 amount) internal override {\\n        AaveV3Helper.supply(AAVE_V3_POOL, STAKED_TOKEN(), amount, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/tools/BubbleReverts/BubbleReverts.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPLv3\\npragma solidity >=0.8.18;\\n\\nimport { InvalidCalldata } from \\\"../../core/libraries/DefinitiveErrors.sol\\\";\\n\\n/**\\n * @title Call utilities library that is absent from the OpenZeppelin\\n * @author Superfluid\\n * Forked from\\n * https://github.com/superfluid-finance/protocol-monorepo/blob\\n * /d473b4876a689efb3bbb05552040bafde364a8b2/packages/ethereum-contracts/contracts/libs/CallUtils.sol\\n * (Separated by 2 lines to prevent going over 120 character per line limit)\\n */\\nlibrary CallUtils {\\n    /// @dev Bubble up the revert from the returnedData (supports Panic, Error & Custom Errors)\\n    /// @notice This is needed in order to provide some human-readable revert message from a call\\n    /// @param returnedData Response of the call\\n    function revertFromReturnedData(bytes memory returnedData) internal pure {\\n        if (returnedData.length < 4) {\\n            // case 1: catch all\\n            revert(\\\"CallUtils: target revert()\\\"); // solhint-disable-line custom-errors\\n        } else {\\n            bytes4 errorSelector;\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                errorSelector := mload(add(returnedData, 0x20))\\n            }\\n            if (errorSelector == bytes4(0x4e487b71) /* `seth sig \\\"Panic(uint256)\\\"` */) {\\n                // case 2: Panic(uint256) (Defined since 0.8.0)\\n                // solhint-disable-next-line max-line-length\\n                // ref: https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require)\\n                string memory reason = \\\"CallUtils: target panicked: 0x__\\\";\\n                uint256 errorCode;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    errorCode := mload(add(returnedData, 0x24))\\n                    let reasonWord := mload(add(reason, 0x20))\\n                    // [0..9] is converted to ['0'..'9']\\n                    // [0xa..0xf] is not correctly converted to ['a'..'f']\\n                    // but since panic code doesn't have those cases, we will ignore them for now!\\n                    let e1 := add(and(errorCode, 0xf), 0x30)\\n                    let e2 := shl(8, add(shr(4, and(errorCode, 0xf0)), 0x30))\\n                    reasonWord := or(\\n                        and(reasonWord, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000),\\n                        or(e2, e1)\\n                    )\\n                    mstore(add(reason, 0x20), reasonWord)\\n                }\\n                revert(reason);\\n            } else {\\n                // case 3: Error(string) (Defined at least since 0.7.0)\\n                // case 4: Custom errors (Defined since 0.8.0)\\n                uint256 len = returnedData.length;\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    revert(add(returnedData, 32), len)\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method to parse data and extract the method signature (selector).\\n     *\\n     * Copied from: https://github.com/argentlabs/argent-contracts/\\n     * blob/master/contracts/modules/common/Utils.sol#L54-L60\\n     */\\n    function parseSelector(bytes memory callData) internal pure returns (bytes4 selector) {\\n        if (callData.length < 4) {\\n            revert InvalidCalldata();\\n        }\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            selector := mload(add(callData, 0x20))\\n        }\\n    }\\n\\n    /**\\n     * @dev Pad length to 32 bytes word boundary\\n     */\\n    function padLength32(uint256 len) internal pure returns (uint256 paddedLen) {\\n        return ((len / 32) + (((len & 31) > 0) /* rounding? */ ? 1 : 0)) * 32;\\n    }\\n\\n    /**\\n     * @dev Validate if the data is encoded correctly with abi.encode(bytesData)\\n     *\\n     * Expected ABI Encode Layout:\\n     * | word 1      | word 2           | word 3           | the rest...\\n     * | data length | bytesData offset | bytesData length | bytesData + padLength32 zeros |\\n     */\\n    function isValidAbiEncodedBytes(bytes memory data) internal pure returns (bool) {\\n        if (data.length < 64) return false;\\n        uint256 bytesOffset;\\n        uint256 bytesLen;\\n        // bytes offset is always expected to be 32\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            bytesOffset := mload(add(data, 32))\\n        }\\n        if (bytesOffset != 32) return false;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            bytesLen := mload(add(data, 64))\\n        }\\n        // the data length should be bytesData.length + 64 + padded bytes length\\n        return data.length == 64 + padLength32(bytesLen);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/vendor/interfaces/IWETH9.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.18;\\n\\ninterface IWETH9 {\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\"\r\n    },\r\n    \"solmate/src/tokens/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"solmate/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport {ERC20} from \\\"../tokens/ERC20.sol\\\";\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Use with caution! Some functions in this library knowingly create dirty bits at the destination of the free memory pointer.\\n/// @dev Note that none of the functions in this library check that a token has code at all! That responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*//////////////////////////////////////////////////////////////\\n                             ETH OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not.\\n            success := call(gas(), to, amount, 0, 0, 0, 0)\\n        }\\n\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            ERC20 OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function safeTransferFrom(\\n        ERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), from) // Append the \\\"from\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FROM_FAILED\\\");\\n    }\\n\\n    function safeTransfer(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"TRANSFER_FAILED\\\");\\n    }\\n\\n    function safeApprove(\\n        ERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), to) // Append the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount) // Append the \\\"amount\\\" argument.\\n\\n            success := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        require(success, \\\"APPROVE_FAILED\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"none\"\r\n    },\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 850\r\n    },\r\n    \"viaIR\": false,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/strategies/LLSD/libraries/AaveV3Helper.sol\": {\r\n        \"AaveV3Helper\": \"0x10d8d55f6b437f1b1acc385c5f750eee9d59687f\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"wrappedNativeAssetAddress\",\"type\":\"address\"}],\"internalType\":\"struct BaseNativeWrapperConfig\",\"name\":\"baseNativeWrapperConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"definitiveAdmin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"definitive\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"client\",\"type\":\"address[]\"}],\"internalType\":\"struct CoreAccessControlConfig\",\"name\":\"coreAccessControlConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"swapTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapOutputTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"swapHandlers\",\"type\":\"address[]\"}],\"internalType\":\"struct CoreSwapConfig\",\"name\":\"coreSwapConfig\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"feeAccount\",\"type\":\"address\"}],\"internalType\":\"struct CoreFeesConfig\",\"name\":\"coreFeesConfig\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"AccountMissingRole\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AccountNotAdmin\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"AccountNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceededMaxLTV\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientSwapTokenBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidERC20Address\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExecutedOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidFeePercent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInputs\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMsgValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOutputToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidReportedOutputAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidRewardsClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapHandler\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapOutputToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSwapPayload\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmountMin\",\"type\":\"uint256\"}],\"name\":\"SlippageExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StopGuardianEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapLimitExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapTokenIsOutputToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnauthenticatedFlashloan\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UntrustedFlashLoanSender\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"assetAddresses\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"dryAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"dryBalanceDeltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"Enter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"dryAssets\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"dryBalanceDeltas\",\"type\":\"int256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeAccount\",\"type\":\"address\"}],\"name\":\"FeeAccountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"wrappingToNative\",\"type\":\"bool\"}],\"name\":\"NativeAssetWrap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"rewardAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"}],\"name\":\"RewardsClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"SafeHarborModeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"StopGuardianUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"swapTokens\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"swapAmounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outputAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"SwapHandled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapHandler\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"SwapHandlerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapOutputToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"SwapOutputTokenUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEnabled\",\"type\":\"bool\"}],\"name\":\"SwapTokenUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debtDelta\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ltv\",\"type\":\"uint256\"}],\"name\":\"SweepDust\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"AAVE_V3_POOL\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_ACCOUNT\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SWAPS_PER_BLOCK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_CLIENT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_DEFINITIVE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_DEFINITIVE_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SAFE_HARBOR_MODE_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKED_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STAKING_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STOP_GUARDIAN_ENABLED\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WRAPPED_NATIVE_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapHandlers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapOutputTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_swapTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\"}],\"name\":\"claimAllRewards\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"earnedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"assetAddresses\",\"type\":\"address[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableSafeHarborMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableStopGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapHandlers\",\"type\":\"address[]\"}],\"name\":\"disableSwapHandlers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapOutputTokens\",\"type\":\"address[]\"}],\"name\":\"disableSwapOutputTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapTokens\",\"type\":\"address[]\"}],\"name\":\"disableSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableSafeHarborMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableStopGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapHandlers\",\"type\":\"address[]\"}],\"name\":\"enableSwapHandlers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapOutputTokens\",\"type\":\"address[]\"}],\"name\":\"enableSwapOutputTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"swapTokens\",\"type\":\"address[]\"}],\"name\":\"enableSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flashloanAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"handlerCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapPayload\",\"name\":\"swapPayload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"}],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"handlerCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapPayload\",\"name\":\"swapPayload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"}],\"name\":\"enterMulticall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"flashloanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decollateralizeAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"handlerCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapPayload\",\"name\":\"swapPayload\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"decollateralizeAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"handlerCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapPayload\",\"name\":\"swapPayload\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"repayDebt\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"maxLTV\",\"type\":\"uint256\"}],\"name\":\"exitMulticall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralToDebtPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDebtAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"feeAmounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"}],\"name\":\"receiveFlashLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"categoryId\",\"type\":\"uint8\"}],\"name\":\"setEMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supportsNativeAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"handler\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isDelegate\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"handlerCalldata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct SwapPayload[]\",\"name\":\"payloads\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"outputToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feePct\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepDust\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedRewards\",\"outputs\":[{\"internalType\":\"contract IERC20[]\",\"name\":\"rewardTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"earnedAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unwrapAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_feeAccount\",\"type\":\"address\"}],\"name\":\"updateFeeAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAllTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "LLSD_EthereumAaveV3Balancer_wstETH_WETH", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "850", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001600000000000000000000000003b016025cd3d213c5779e10fe94a35ba440bd1c9000000000000000000000000a59c5bc33c9d705b738aa553b724d8c39324fd200000000000000000000000003b016025cd3d213c5779e10fe94a35ba440bd1c9000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000001000000000000000000000000d056c0eee354b24fe7c5d4ee762c4d7574badac10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000001c00000000000000000000000000000000000000000000000000000000000000003000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca00000000000000000000000000000000000000000000000000000000000000006000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000007f39c581f595b53c5cb19bd0b3f8da6c935e2ca0000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000f155735395a323b2a12051b5bc076c2c49eebeb300000000000000000000000081261c3ae484d2c0873bbea019eaecebc0056f95", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}