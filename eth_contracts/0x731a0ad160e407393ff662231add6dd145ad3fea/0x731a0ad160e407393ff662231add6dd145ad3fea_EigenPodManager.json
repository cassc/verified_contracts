{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/contracts/pods/EigenPodManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\nimport \\\"@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin-upgrades/contracts/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport \\\"../permissions/Pausable.sol\\\";\\nimport \\\"./EigenPodPausingConstants.sol\\\";\\nimport \\\"./EigenPodManagerStorage.sol\\\";\\n\\n/**\\n * @title The contract used for creating and managing EigenPods\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice The main functionalities are:\\n * - creating EigenPods\\n * - staking for new validators on EigenPods\\n * - keeping track of the restaked balances of all EigenPod owners\\n * - withdrawing eth when withdrawals are completed\\n */\\ncontract EigenPodManager is\\n    Initializable,\\n    OwnableUpgradeable,\\n    Pausable,\\n    EigenPodPausingConstants,\\n    EigenPodManagerStorage,\\n    ReentrancyGuardUpgradeable\\n{\\n    modifier onlyEigenPod(address podOwner) {\\n        require(address(ownerToPod[podOwner]) == msg.sender, \\\"EigenPodManager.onlyEigenPod: not a pod\\\");\\n        _;\\n    }\\n\\n    modifier onlyDelegationManager() {\\n        require(\\n            msg.sender == address(delegationManager), \\\"EigenPodManager.onlyDelegationManager: not the DelegationManager\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(\\n        IETHPOSDeposit _ethPOS,\\n        IBeacon _eigenPodBeacon,\\n        IStrategyManager _strategyManager,\\n        ISlasher _slasher,\\n        IDelegationManager _delegationManager\\n    ) EigenPodManagerStorage(_ethPOS, _eigenPodBeacon, _strategyManager, _slasher, _delegationManager) {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        address initialOwner,\\n        IPauserRegistry _pauserRegistry,\\n        uint256 _initPausedStatus\\n    ) external initializer {\\n        _transferOwnership(initialOwner);\\n        _initializePauser(_pauserRegistry, _initPausedStatus);\\n    }\\n\\n    /**\\n     * @notice Creates an EigenPod for the sender.\\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\\n     * @dev Returns EigenPod address\\n     */\\n    function createPod() external onlyWhenNotPaused(PAUSED_NEW_EIGENPODS) returns (address) {\\n        require(!hasPod(msg.sender), \\\"EigenPodManager.createPod: Sender already has a pod\\\");\\n        // deploy a pod if the sender doesn't have one already\\n        IEigenPod pod = _deployPod();\\n\\n        return address(pod);\\n    }\\n\\n    /**\\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod.\\n     * Also creates an EigenPod for the sender if they don't have one already.\\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\\n     * @param signature The validator's signature of the deposit data.\\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\\n     */\\n    function stake(\\n        bytes calldata pubkey,\\n        bytes calldata signature,\\n        bytes32 depositDataRoot\\n    ) external payable onlyWhenNotPaused(PAUSED_NEW_EIGENPODS) {\\n        IEigenPod pod = ownerToPod[msg.sender];\\n        if (address(pod) == address(0)) {\\n            //deploy a pod if the sender doesn't have one already\\n            pod = _deployPod();\\n        }\\n        pod.stake{value: msg.value}(pubkey, signature, depositDataRoot);\\n    }\\n\\n    /**\\n     * @notice Changes the `podOwner`'s shares by `sharesDelta` and performs a call to the DelegationManager\\n     * to ensure that delegated shares are also tracked correctly\\n     * @param podOwner is the pod owner whose balance is being updated.\\n     * @param sharesDelta is the change in podOwner's beaconChainETHStrategy shares\\n     * @dev Callable only by the podOwner's EigenPod contract.\\n     * @dev Reverts if `sharesDelta` is not a whole Gwei amount\\n     */\\n    function recordBeaconChainETHBalanceUpdate(\\n        address podOwner,\\n        int256 sharesDelta\\n    ) external onlyEigenPod(podOwner) nonReentrant {\\n        require(\\n            podOwner != address(0), \\\"EigenPodManager.recordBeaconChainETHBalanceUpdate: podOwner cannot be zero address\\\"\\n        );\\n        require(\\n            sharesDelta % int256(GWEI_TO_WEI) == 0,\\n            \\\"EigenPodManager.recordBeaconChainETHBalanceUpdate: sharesDelta must be a whole Gwei amount\\\"\\n        );\\n        int256 currentPodOwnerShares = podOwnerShares[podOwner];\\n        int256 updatedPodOwnerShares = currentPodOwnerShares + sharesDelta;\\n        podOwnerShares[podOwner] = updatedPodOwnerShares;\\n\\n        // inform the DelegationManager of the change in delegateable shares\\n        int256 changeInDelegatableShares = _calculateChangeInDelegatableShares({\\n            sharesBefore: currentPodOwnerShares,\\n            sharesAfter: updatedPodOwnerShares\\n        });\\n        // skip making a call to the DelegationManager if there is no change in delegateable shares\\n        if (changeInDelegatableShares != 0) {\\n            if (changeInDelegatableShares < 0) {\\n                delegationManager.decreaseDelegatedShares({\\n                    staker: podOwner,\\n                    strategy: beaconChainETHStrategy,\\n                    shares: uint256(-changeInDelegatableShares)\\n                });\\n            } else {\\n                delegationManager.increaseDelegatedShares({\\n                    staker: podOwner,\\n                    strategy: beaconChainETHStrategy,\\n                    shares: uint256(changeInDelegatableShares)\\n                });\\n            }\\n        }\\n        emit PodSharesUpdated(podOwner, sharesDelta);\\n        emit NewTotalShares(podOwner, updatedPodOwnerShares);\\n    }\\n\\n    /**\\n     * @notice Used by the DelegationManager to remove a pod owner's shares while they're in the withdrawal queue.\\n     * Simply decreases the `podOwner`'s shares by `shares`, down to a minimum of zero.\\n     * @dev This function reverts if it would result in `podOwnerShares[podOwner]` being less than zero, i.e. it is forbidden for this function to\\n     * result in the `podOwner` incurring a \\\"share deficit\\\". This behavior prevents a Staker from queuing a withdrawal which improperly removes excessive\\n     * shares from the operator to whom the staker is delegated.\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     * @dev The delegation manager validates that the podOwner is not address(0)\\n     */\\n    function removeShares(address podOwner, uint256 shares) external onlyDelegationManager {\\n        require(int256(shares) >= 0, \\\"EigenPodManager.removeShares: shares cannot be negative\\\");\\n        require(shares % GWEI_TO_WEI == 0, \\\"EigenPodManager.removeShares: shares must be a whole Gwei amount\\\");\\n        int256 updatedPodOwnerShares = podOwnerShares[podOwner] - int256(shares);\\n        require(\\n            updatedPodOwnerShares >= 0,\\n            \\\"EigenPodManager.removeShares: cannot result in pod owner having negative shares\\\"\\n        );\\n        podOwnerShares[podOwner] = updatedPodOwnerShares;\\n\\n        emit NewTotalShares(podOwner, updatedPodOwnerShares);\\n    }\\n\\n    /**\\n     * @notice Increases the `podOwner`'s shares by `shares`, paying off deficit if possible.\\n     * Used by the DelegationManager to award a pod owner shares on exiting the withdrawal queue\\n     * @dev Returns the number of shares added to `podOwnerShares[podOwner]` above zero, which will be less than the `shares` input\\n     * in the event that the podOwner has an existing shares deficit (i.e. `podOwnerShares[podOwner]` starts below zero)\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function addShares(address podOwner, uint256 shares) external onlyDelegationManager returns (uint256) {\\n        require(podOwner != address(0), \\\"EigenPodManager.addShares: podOwner cannot be zero address\\\");\\n        require(int256(shares) >= 0, \\\"EigenPodManager.addShares: shares cannot be negative\\\");\\n        require(shares % GWEI_TO_WEI == 0, \\\"EigenPodManager.addShares: shares must be a whole Gwei amount\\\");\\n        int256 currentPodOwnerShares = podOwnerShares[podOwner];\\n        int256 updatedPodOwnerShares = currentPodOwnerShares + int256(shares);\\n        podOwnerShares[podOwner] = updatedPodOwnerShares;\\n\\n        emit PodSharesUpdated(podOwner, int256(shares));\\n        emit NewTotalShares(podOwner, updatedPodOwnerShares);\\n\\n        return uint256(\\n            _calculateChangeInDelegatableShares({\\n                sharesBefore: currentPodOwnerShares,\\n                sharesAfter: updatedPodOwnerShares\\n            })\\n        );\\n    }\\n\\n    /**\\n     * @notice Used by the DelegationManager to complete a withdrawal, sending tokens to some destination address\\n     * @dev Prioritizes decreasing the podOwner's share deficit, if they have one\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     * @dev This function assumes that `removeShares` has already been called by the delegationManager, hence why\\n     *      we do not need to update the podOwnerShares if `currentPodOwnerShares` is positive\\n     */\\n    function withdrawSharesAsTokens(\\n        address podOwner,\\n        address destination,\\n        uint256 shares\\n    ) external onlyDelegationManager {\\n        require(podOwner != address(0), \\\"EigenPodManager.withdrawSharesAsTokens: podOwner cannot be zero address\\\");\\n        require(destination != address(0), \\\"EigenPodManager.withdrawSharesAsTokens: destination cannot be zero address\\\");\\n        require(int256(shares) >= 0, \\\"EigenPodManager.withdrawSharesAsTokens: shares cannot be negative\\\");\\n        require(shares % GWEI_TO_WEI == 0, \\\"EigenPodManager.withdrawSharesAsTokens: shares must be a whole Gwei amount\\\");\\n        int256 currentPodOwnerShares = podOwnerShares[podOwner];\\n\\n        // if there is an existing shares deficit, prioritize decreasing the deficit first\\n        if (currentPodOwnerShares < 0) {\\n            uint256 currentShareDeficit = uint256(-currentPodOwnerShares);\\n\\n            if (shares > currentShareDeficit) {\\n                // get rid of the whole deficit if possible, and pass any remaining shares onto destination\\n                podOwnerShares[podOwner] = 0;\\n                shares -= currentShareDeficit;\\n                emit PodSharesUpdated(podOwner, int256(currentShareDeficit));\\n                emit NewTotalShares(podOwner, 0);\\n            } else {\\n                // otherwise get rid of as much deficit as possible, and return early, since there is nothing left over to forward on\\n                int256 updatedPodOwnerShares = podOwnerShares[podOwner] + int256(shares);\\n                podOwnerShares[podOwner] = updatedPodOwnerShares;\\n                emit PodSharesUpdated(podOwner, int256(shares));\\n                emit NewTotalShares(podOwner, updatedPodOwnerShares);\\n                return;\\n            }\\n        }\\n        // Actually withdraw to the destination\\n        ownerToPod[podOwner].withdrawRestakedBeaconChainETH(destination, shares);\\n    }\\n\\n    // INTERNAL FUNCTIONS\\n\\n    function _deployPod() internal returns (IEigenPod) {\\n        ++numPods;\\n        // create the pod\\n        IEigenPod pod = IEigenPod(\\n            Create2.deploy(\\n                0,\\n                bytes32(uint256(uint160(msg.sender))),\\n                // set the beacon address to the eigenPodBeacon and initialize it\\n                abi.encodePacked(beaconProxyBytecode, abi.encode(eigenPodBeacon, \\\"\\\"))\\n            )\\n        );\\n        pod.initialize(msg.sender);\\n        // store the pod in the mapping\\n        ownerToPod[msg.sender] = pod;\\n        emit PodDeployed(address(pod), msg.sender);\\n        return pod;\\n    }\\n\\n    /**\\n     * @notice Calculates the change in a pod owner's delegateable shares as a result of their beacon chain ETH shares changing\\n     * from `sharesBefore` to `sharesAfter`. The key concept here is that negative/\\\"deficit\\\" shares are not delegateable.\\n     */\\n    function _calculateChangeInDelegatableShares(\\n        int256 sharesBefore,\\n        int256 sharesAfter\\n    ) internal pure returns (int256) {\\n        if (sharesBefore <= 0) {\\n            if (sharesAfter <= 0) {\\n                // if the shares started negative and stayed negative, then there cannot have been an increase in delegateable shares\\n                return 0;\\n            } else {\\n                // if the shares started negative and became positive, then the increase in delegateable shares is the ending share amount\\n                return sharesAfter;\\n            }\\n        } else {\\n            if (sharesAfter <= 0) {\\n                // if the shares started positive and became negative, then the decrease in delegateable shares is the starting share amount\\n                return (-sharesBefore);\\n            } else {\\n                // if the shares started positive and stayed positive, then the change in delegateable shares\\n                // is the difference between starting and ending amounts\\n                return (sharesAfter - sharesBefore);\\n            }\\n        }\\n    }\\n\\n    // VIEW FUNCTIONS\\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\\n    function getPod(address podOwner) public view returns (IEigenPod) {\\n        IEigenPod pod = ownerToPod[podOwner];\\n        // if pod does not exist already, calculate what its address *will be* once it is deployed\\n        if (address(pod) == address(0)) {\\n            pod = IEigenPod(\\n                Create2.computeAddress(\\n                    bytes32(uint256(uint160(podOwner))), //salt\\n                    keccak256(abi.encodePacked(beaconProxyBytecode, abi.encode(eigenPodBeacon, \\\"\\\"))) //bytecode\\n                )\\n            );\\n        }\\n        return pod;\\n    }\\n\\n    /// @notice Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\\n    function hasPod(address podOwner) public view returns (bool) {\\n        return address(ownerToPod[podOwner]) != address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Create2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address) {\\n        address addr;\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n        return addr;\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address) {\\n        bytes32 _data = keccak256(abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash));\\n        return address(uint160(uint256(_data)));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/contracts/permissions/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../interfaces/IPausable.sol\\\";\\n\\n/**\\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\\n * These functions should be permissioned as \\\"onlyPauser\\\" which defers to a `PauserRegistry` for determining access control.\\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \\\"paused\\\"), and if you unpause,\\n * you can only flip (any number of) switches to off/0 (aka \\\"paused\\\").\\n * If you want a pauseXYZ function that just flips a single bit / \\\"pausing flag\\\", it will:\\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\\n * 2) update the paused state to this new value\\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\\n */\\ncontract Pausable is IPausable {\\n    /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\\n    IPauserRegistry public pauserRegistry;\\n\\n    /// @dev whether or not the contract is currently paused\\n    uint256 private _paused;\\n\\n    uint256 internal constant UNPAUSE_ALL = 0;\\n    uint256 internal constant PAUSE_ALL = type(uint256).max;\\n\\n    /// @notice\\n    modifier onlyPauser() {\\n        require(pauserRegistry.isPauser(msg.sender), \\\"msg.sender is not permissioned as pauser\\\");\\n        _;\\n    }\\n\\n    modifier onlyUnpauser() {\\n        require(msg.sender == pauserRegistry.unpauser(), \\\"msg.sender is not permissioned as unpauser\\\");\\n        _;\\n    }\\n\\n    /// @notice Throws if the contract is paused, i.e. if any of the bits in `_paused` is flipped to 1.\\n    modifier whenNotPaused() {\\n        require(_paused == 0, \\\"Pausable: contract is paused\\\");\\n        _;\\n    }\\n\\n    /// @notice Throws if the `indexed`th bit of `_paused` is 1, i.e. if the `index`th pause switch is flipped.\\n    modifier onlyWhenNotPaused(uint8 index) {\\n        require(!paused(index), \\\"Pausable: index is paused\\\");\\n        _;\\n    }\\n\\n    /// @notice One-time function for setting the `pauserRegistry` and initializing the value of `_paused`.\\n    function _initializePauser(IPauserRegistry _pauserRegistry, uint256 initPausedStatus) internal {\\n        require(\\n            address(pauserRegistry) == address(0) && address(_pauserRegistry) != address(0),\\n            \\\"Pausable._initializePauser: _initializePauser() can only be called once\\\"\\n        );\\n        _paused = initPausedStatus;\\n        emit Paused(msg.sender, initPausedStatus);\\n        _setPauserRegistry(_pauserRegistry);\\n    }\\n\\n    /**\\n     * @notice This function is used to pause an EigenLayer contract's functionality.\\n     * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\\n     */\\n    function pause(uint256 newPausedStatus) external onlyPauser {\\n        // verify that the `newPausedStatus` does not *unflip* any bits (i.e. doesn't unpause anything, all 1 bits remain)\\n        require((_paused & newPausedStatus) == _paused, \\\"Pausable.pause: invalid attempt to unpause functionality\\\");\\n        _paused = newPausedStatus;\\n        emit Paused(msg.sender, newPausedStatus);\\n    }\\n\\n    /**\\n     * @notice Alias for `pause(type(uint256).max)`.\\n     */\\n    function pauseAll() external onlyPauser {\\n        _paused = type(uint256).max;\\n        emit Paused(msg.sender, type(uint256).max);\\n    }\\n\\n    /**\\n     * @notice This function is used to unpause an EigenLayer contract's functionality.\\n     * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\\n     */\\n    function unpause(uint256 newPausedStatus) external onlyUnpauser {\\n        // verify that the `newPausedStatus` does not *flip* any bits (i.e. doesn't pause anything, all 0 bits remain)\\n        require(\\n            ((~_paused) & (~newPausedStatus)) == (~_paused), \\\"Pausable.unpause: invalid attempt to pause functionality\\\"\\n        );\\n        _paused = newPausedStatus;\\n        emit Unpaused(msg.sender, newPausedStatus);\\n    }\\n\\n    /// @notice Returns the current paused status as a uint256.\\n    function paused() public view virtual returns (uint256) {\\n        return _paused;\\n    }\\n\\n    /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\\n    function paused(uint8 index) public view virtual returns (bool) {\\n        uint256 mask = 1 << index;\\n        return ((_paused & mask) == mask);\\n    }\\n\\n    /// @notice Allows the unpauser to set a new pauser registry\\n    function setPauserRegistry(IPauserRegistry newPauserRegistry) external onlyUnpauser {\\n        _setPauserRegistry(newPauserRegistry);\\n    }\\n\\n    /// internal function for setting pauser registry\\n    function _setPauserRegistry(IPauserRegistry newPauserRegistry) internal {\\n        require(\\n            address(newPauserRegistry) != address(0),\\n            \\\"Pausable._setPauserRegistry: newPauserRegistry cannot be the zero address\\\"\\n        );\\n        emit PauserRegistrySet(pauserRegistry, newPauserRegistry);\\n        pauserRegistry = newPauserRegistry;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[48] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/contracts/pods/EigenPodPausingConstants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.12;\\n\\n/**\\n * @title Constants shared between 'EigenPod' and 'EigenPodManager' contracts.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\nabstract contract EigenPodPausingConstants {\\n    /// @notice Index for flag that pauses creation of new EigenPods when set. See EigenPodManager code for details.\\n    uint8 internal constant PAUSED_NEW_EIGENPODS = 0;\\n    /**\\n     * @notice Index for flag that pauses all withdrawal-of-restaked ETH related functionality `\\n     * function *of the EigenPodManager* when set. See EigenPodManager code for details.\\n     */\\n    uint8 internal constant PAUSED_WITHDRAW_RESTAKED_ETH = 1;\\n\\n    /// @notice Index for flag that pauses the deposit related functions *of the EigenPods* when set. see EigenPod code for details.\\n    uint8 internal constant PAUSED_EIGENPODS_VERIFY_CREDENTIALS = 2;\\n\\n    // Deprecated\\n    // uint8 internal constant PAUSED_EIGENPODS_VERIFY_BALANCE_UPDATE = 3;\\n\\n    // Deprecated\\n    // uint8 internal constant PAUSED_EIGENPODS_VERIFY_WITHDRAWAL = 4;\\n\\n    /// @notice Pausability for EigenPod's \\\"accidental transfer\\\" withdrawal methods\\n    uint8 internal constant PAUSED_NON_PROOF_WITHDRAWALS = 5;\\n\\n    uint8 internal constant PAUSED_START_CHECKPOINT = 6;\\n\\n    /// @notice Index for flag that pauses the `verifyCheckpointProofs` function *of the EigenPods* when set. see EigenPod code for details.\\n    uint8 internal constant PAUSED_EIGENPODS_VERIFY_CHECKPOINT_PROOFS = 7;\\n\\n    uint8 internal constant PAUSED_VERIFY_STALE_BALANCE = 8;\\n}\\n\"\r\n    },\r\n    \"src/contracts/pods/EigenPodManagerStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\n\\nimport \\\"../interfaces/IStrategy.sol\\\";\\nimport \\\"../interfaces/IEigenPodManager.sol\\\";\\nimport \\\"../interfaces/IStrategyManager.sol\\\";\\nimport \\\"../interfaces/IDelegationManager.sol\\\";\\nimport \\\"../interfaces/IETHPOSDeposit.sol\\\";\\nimport \\\"../interfaces/IEigenPod.sol\\\";\\n\\nabstract contract EigenPodManagerStorage is IEigenPodManager {\\n    /**\\n     *\\n     *                            CONSTANTS / IMMUTABLES\\n     *\\n     */\\n\\n    /// @notice The ETH2 Deposit Contract\\n    IETHPOSDeposit public immutable ethPOS;\\n\\n    /// @notice Beacon proxy to which the EigenPods point\\n    IBeacon public immutable eigenPodBeacon;\\n\\n    /// @notice EigenLayer's StrategyManager contract\\n    IStrategyManager public immutable strategyManager;\\n\\n    /// @notice EigenLayer's Slasher contract\\n    ISlasher public immutable slasher;\\n\\n    /// @notice EigenLayer's DelegationManager contract\\n    IDelegationManager public immutable delegationManager;\\n\\n    /**\\n     * @notice Stored code of type(BeaconProxy).creationCode\\n     * @dev Maintained as a constant to solve an edge case - changes to OpenZeppelin's BeaconProxy code should not cause\\n     * addresses of EigenPods that are pre-computed with Create2 to change, even upon upgrading this contract, changing compiler version, etc.\\n     */\\n    bytes internal constant beaconProxyBytecode =\\n        hex\\\"608060405260405161090e38038061090e83398101604081905261002291610460565b61002e82826000610035565b505061058a565b61003e83610100565b6040516001600160a01b038416907f1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e90600090a260008251118061007f5750805b156100fb576100f9836001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100e99190610520565b836102a360201b6100291760201c565b505b505050565b610113816102cf60201b6100551760201c565b6101725760405162461bcd60e51b815260206004820152602560248201527f455243313936373a206e657720626561636f6e206973206e6f74206120636f6e6044820152641d1c9858dd60da1b60648201526084015b60405180910390fd5b6101e6816001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d79190610520565b6102cf60201b6100551760201c565b61024b5760405162461bcd60e51b815260206004820152603060248201527f455243313936373a20626561636f6e20696d706c656d656e746174696f6e206960448201526f1cc81b9bdd08184818dbdb9d1c9858dd60821b6064820152608401610169565b806102827fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d5060001b6102de60201b6100641760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b60606102c883836040518060600160405280602781526020016108e7602791396102e1565b9392505050565b6001600160a01b03163b151590565b90565b6060600080856001600160a01b0316856040516102fe919061053b565b600060405180830381855af49150503d8060008114610339576040519150601f19603f3d011682016040523d82523d6000602084013e61033e565b606091505b5090925090506103508683838761035a565b9695505050505050565b606083156103c65782516103bf576001600160a01b0385163b6103bf5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610169565b50816103d0565b6103d083836103d8565b949350505050565b8151156103e85781518083602001fd5b8060405162461bcd60e51b81526004016101699190610557565b80516001600160a01b038116811461041957600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561044f578181015183820152602001610437565b838111156100f95750506000910152565b6000806040838503121561047357600080fd5b61047c83610402565b60208401519092506001600160401b038082111561049957600080fd5b818501915085601f8301126104ad57600080fd5b8151818111156104bf576104bf61041e565b604051601f8201601f19908116603f011681019083821181831017156104e7576104e761041e565b8160405282815288602084870101111561050057600080fd5b610511836020830160208801610434565b80955050505050509250929050565b60006020828403121561053257600080fd5b6102c882610402565b6000825161054d818460208701610434565b9190910192915050565b6020815260008251806020840152610576816040850160208701610434565b601f01601f19169190910160400192915050565b61034e806105996000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610067565b610100565b565b606061004e83836040518060600160405280602781526020016102f260279139610124565b9392505050565b6001600160a01b03163b151590565b90565b600061009a7fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50546001600160a01b031690565b6001600160a01b0316635c60da1b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100fb9190610249565b905090565b3660008037600080366000845af43d6000803e80801561011f573d6000f35b3d6000fd5b6060600080856001600160a01b03168560405161014191906102a2565b600060405180830381855af49150503d806000811461017c576040519150601f19603f3d011682016040523d82523d6000602084013e610181565b606091505b50915091506101928683838761019c565b9695505050505050565b6060831561020d578251610206576001600160a01b0385163b6102065760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610217565b610217838361021f565b949350505050565b81511561022f5781518083602001fd5b8060405162461bcd60e51b81526004016101fd91906102be565b60006020828403121561025b57600080fd5b81516001600160a01b038116811461004e57600080fd5b60005b8381101561028d578181015183820152602001610275565b8381111561029c576000848401525b50505050565b600082516102b4818460208701610272565b9190910192915050565b60208152600082518060208401526102dd816040850160208701610272565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d51e81d3bc5ed20a26aeb05dce7e825c503b2061aa78628027300c8d65b9d89a64736f6c634300080c0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564\\\";\\n\\n    // @notice Internal constant used in calculations, since the beacon chain stores balances in Gwei rather than wei\\n    uint256 internal constant GWEI_TO_WEI = 1e9;\\n\\n    /// @notice Canonical, virtual beacon chain ETH strategy\\n    IStrategy public constant beaconChainETHStrategy = IStrategy(0xbeaC0eeEeeeeEEeEeEEEEeeEEeEeeeEeeEEBEaC0);\\n\\n    /**\\n     *\\n     *                                STATE VARIABLES\\n     *\\n     */\\n\\n    /// @notice [DEPRECATED] Previously used to query beacon block roots. We now use eip-4788 directly\\n    address internal __deprecated_beaconChainOracle;\\n\\n    /// @notice Pod owner to deployed EigenPod address\\n    mapping(address => IEigenPod) public ownerToPod;\\n\\n    // BEGIN STORAGE VARIABLES ADDED AFTER FIRST TESTNET DEPLOYMENT -- DO NOT SUGGEST REORDERING TO CONVENTIONAL ORDER\\n    /// @notice The number of EigenPods that have been deployed\\n    uint256 public numPods;\\n\\n    /// @notice [DEPRECATED] Was initially used to limit growth early on but there is no longer\\n    /// a maximum number of EigenPods that can be deployed.\\n    uint256 private __deprecated_maxPods;\\n\\n    // BEGIN STORAGE VARIABLES ADDED AFTER MAINNET DEPLOYMENT -- DO NOT SUGGEST REORDERING TO CONVENTIONAL ORDER\\n    /**\\n     * @notice Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\\n     * @dev The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can\\n     * decrease between the pod owner queuing and completing a withdrawal.\\n     * When the pod owner's shares would otherwise increase, this \\\"deficit\\\" is decreased first _instead_.\\n     * Likewise, when a withdrawal is completed, this \\\"deficit\\\" is decreased and the withdrawal amount is decreased; We can think of this\\n     * as the withdrawal \\\"paying off the deficit\\\".\\n     */\\n    mapping(address => int256) public podOwnerShares;\\n\\n    uint64 internal __deprecated_denebForkTimestamp;\\n\\n    constructor(\\n        IETHPOSDeposit _ethPOS,\\n        IBeacon _eigenPodBeacon,\\n        IStrategyManager _strategyManager,\\n        ISlasher _slasher,\\n        IDelegationManager _delegationManager\\n    ) {\\n        ethPOS = _ethPOS;\\n        eigenPodBeacon = _eigenPodBeacon;\\n        strategyManager = _strategyManager;\\n        slasher = _slasher;\\n        delegationManager = _delegationManager;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[44] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IPausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"../interfaces/IPauserRegistry.sol\\\";\\n\\n/**\\n * @title Adds pausability to a contract, with pausing & unpausing controlled by the `pauser` and `unpauser` of a PauserRegistry contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Contracts that inherit from this contract may define their own `pause` and `unpause` (and/or related) functions.\\n * These functions should be permissioned as \\\"onlyPauser\\\" which defers to a `PauserRegistry` for determining access control.\\n * @dev Pausability is implemented using a uint256, which allows up to 256 different single bit-flags; each bit can potentially pause different functionality.\\n * Inspiration for this was taken from the NearBridge design here https://etherscan.io/address/0x3FEFc5A4B1c02f21cBc8D3613643ba0635b9a873#code.\\n * For the `pause` and `unpause` functions we've implemented, if you pause, you can only flip (any number of) switches to on/1 (aka \\\"paused\\\"), and if you unpause,\\n * you can only flip (any number of) switches to off/0 (aka \\\"paused\\\").\\n * If you want a pauseXYZ function that just flips a single bit / \\\"pausing flag\\\", it will:\\n * 1) 'bit-wise and' (aka `&`) a flag with the current paused state (as a uint256)\\n * 2) update the paused state to this new value\\n * @dev We note as well that we have chosen to identify flags by their *bit index* as opposed to their numerical value, so, e.g. defining `DEPOSITS_PAUSED = 3`\\n * indicates specifically that if the *third bit* of `_paused` is flipped -- i.e. it is a '1' -- then deposits should be paused\\n */\\ninterface IPausable {\\n    /// @notice Emitted when the `pauserRegistry` is set to `newPauserRegistry`.\\n    event PauserRegistrySet(IPauserRegistry pauserRegistry, IPauserRegistry newPauserRegistry);\\n\\n    /// @notice Emitted when the pause is triggered by `account`, and changed to `newPausedStatus`.\\n    event Paused(address indexed account, uint256 newPausedStatus);\\n\\n    /// @notice Emitted when the pause is lifted by `account`, and changed to `newPausedStatus`.\\n    event Unpaused(address indexed account, uint256 newPausedStatus);\\n\\n    /// @notice Address of the `PauserRegistry` contract that this contract defers to for determining access control (for pausing).\\n    function pauserRegistry() external view returns (IPauserRegistry);\\n\\n    /**\\n     * @notice This function is used to pause an EigenLayer contract's functionality.\\n     * It is permissioned to the `pauser` address, which is expected to be a low threshold multisig.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only pause functionality, and thus cannot 'unflip' any bit in `_paused` from 1 to 0.\\n     */\\n    function pause(uint256 newPausedStatus) external;\\n\\n    /**\\n     * @notice Alias for `pause(type(uint256).max)`.\\n     */\\n    function pauseAll() external;\\n\\n    /**\\n     * @notice This function is used to unpause an EigenLayer contract's functionality.\\n     * It is permissioned to the `unpauser` address, which is expected to be a high threshold multisig or governance contract.\\n     * @param newPausedStatus represents the new value for `_paused` to take, which means it may flip several bits at once.\\n     * @dev This function can only unpause functionality, and thus cannot 'flip' any bit in `_paused` from 0 to 1.\\n     */\\n    function unpause(uint256 newPausedStatus) external;\\n\\n    /// @notice Returns the current paused status as a uint256.\\n    function paused() external view returns (uint256);\\n\\n    /// @notice Returns 'true' if the `indexed`th bit of `_paused` is 1, and 'false' otherwise\\n    function paused(uint8 index) external view returns (bool);\\n\\n    /// @notice Allows the unpauser to set a new pauser registry\\n    function setPauserRegistry(IPauserRegistry newPauserRegistry) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title Minimal interface for an `Strategy` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice Custom `Strategy` implementations may expand extensively on this interface.\\n */\\ninterface IStrategy {\\n    /**\\n     * @notice Used to emit an event for the exchange rate between 1 share and underlying token in a strategy contract\\n     * @param rate is the exchange rate in wad 18 decimals\\n     * @dev Tokens that do not have 18 decimals must have offchain services scale the exchange rate by the proper magnitude\\n     */\\n    event ExchangeRateEmitted(uint256 rate);\\n\\n    /**\\n     * Used to emit the underlying token and its decimals on strategy creation\\n     * @notice token\\n     * @param token is the ERC20 token of the strategy\\n     * @param decimals are the decimals of the ERC20 token in the strategy\\n     */\\n    event StrategyTokenSet(IERC20 token, uint8 decimals);\\n\\n    /**\\n     * @notice Used to deposit tokens into this Strategy\\n     * @param token is the ERC20 token being deposited\\n     * @param amount is the amount of token being deposited\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * `depositIntoStrategy` function, and individual share balances are recorded in the strategyManager as well.\\n     * @return newShares is the number of new shares issued at the current exchange ratio.\\n     */\\n    function deposit(IERC20 token, uint256 amount) external returns (uint256);\\n\\n    /**\\n     * @notice Used to withdraw tokens from this Strategy, to the `recipient`'s address\\n     * @param recipient is the address to receive the withdrawn funds\\n     * @param token is the ERC20 token being transferred out\\n     * @param amountShares is the amount of shares being withdrawn\\n     * @dev This function is only callable by the strategyManager contract. It is invoked inside of the strategyManager's\\n     * other functions, and individual share balances are recorded in the strategyManager as well.\\n     */\\n    function withdraw(address recipient, IERC20 token, uint256 amountShares) external;\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlyingView`, this function **may** make state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlying(uint256 amountShares) external returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToSharesView`, this function **may** make state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of underlying tokens corresponding to the input `amountShares`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToShares(uint256 amountUnderlying) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlyingView`, this function **may** make state modifications\\n     */\\n    function userUnderlying(address user) external returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current total shares of `user` in this strategy, by\\n     * querying the `strategyManager` contract\\n     */\\n    function shares(address user) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert a number of shares to the equivalent amount of underlying tokens for this strategy.\\n     * @notice In contrast to `sharesToUnderlying`, this function guarantees no state modifications\\n     * @param amountShares is the amount of shares to calculate its conversion into the underlying token\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function sharesToUnderlyingView(uint256 amountShares) external view returns (uint256);\\n\\n    /**\\n     * @notice Used to convert an amount of underlying tokens to the equivalent amount of shares in this strategy.\\n     * @notice In contrast to `underlyingToShares`, this function guarantees no state modifications\\n     * @param amountUnderlying is the amount of `underlyingToken` to calculate its conversion into strategy shares\\n     * @return The amount of shares corresponding to the input `amountUnderlying`\\n     * @dev Implementation for these functions in particular may vary significantly for different strategies\\n     */\\n    function underlyingToSharesView(uint256 amountUnderlying) external view returns (uint256);\\n\\n    /**\\n     * @notice convenience function for fetching the current underlying value of all of the `user`'s shares in\\n     * this strategy. In contrast to `userUnderlying`, this function guarantees no state modifications\\n     */\\n    function userUnderlyingView(address user) external view returns (uint256);\\n\\n    /// @notice The underlying token for shares in this Strategy\\n    function underlyingToken() external view returns (IERC20);\\n\\n    /// @notice The total number of extant shares in this Strategy\\n    function totalShares() external view returns (uint256);\\n\\n    /// @notice Returns either a brief string explaining the strategy's goal & purpose, or a link to metadata that explains in more detail.\\n    function explanation() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IEigenPodManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\\\";\\nimport \\\"./IETHPOSDeposit.sol\\\";\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IEigenPod.sol\\\";\\nimport \\\"./IPausable.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IStrategy.sol\\\";\\n\\n/**\\n * @title Interface for factory that creates and manages solo staking pods that have their withdrawal credentials pointed to EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IEigenPodManager is IPausable {\\n    /// @notice Emitted to notify the deployment of an EigenPod\\n    event PodDeployed(address indexed eigenPod, address indexed podOwner);\\n\\n    /// @notice Emitted to notify a deposit of beacon chain ETH recorded in the strategy manager\\n    event BeaconChainETHDeposited(address indexed podOwner, uint256 amount);\\n\\n    /// @notice Emitted when the balance of an EigenPod is updated\\n    event PodSharesUpdated(address indexed podOwner, int256 sharesDelta);\\n\\n    /// @notice Emitted every time the total shares of a pod are updated\\n    event NewTotalShares(address indexed podOwner, int256 newTotalShares);\\n\\n    /// @notice Emitted when a withdrawal of beacon chain ETH is completed\\n    event BeaconChainETHWithdrawalCompleted(\\n        address indexed podOwner,\\n        uint256 shares,\\n        uint96 nonce,\\n        address delegatedAddress,\\n        address withdrawer,\\n        bytes32 withdrawalRoot\\n    );\\n\\n    /**\\n     * @notice Creates an EigenPod for the sender.\\n     * @dev Function will revert if the `msg.sender` already has an EigenPod.\\n     * @dev Returns EigenPod address\\n     */\\n    function createPod() external returns (address);\\n\\n    /**\\n     * @notice Stakes for a new beacon chain validator on the sender's EigenPod.\\n     * Also creates an EigenPod for the sender if they don't have one already.\\n     * @param pubkey The 48 bytes public key of the beacon chain validator.\\n     * @param signature The validator's signature of the deposit data.\\n     * @param depositDataRoot The root/hash of the deposit data for the validator's deposit.\\n     */\\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\\n\\n    /**\\n     * @notice Changes the `podOwner`'s shares by `sharesDelta` and performs a call to the DelegationManager\\n     * to ensure that delegated shares are also tracked correctly\\n     * @param podOwner is the pod owner whose balance is being updated.\\n     * @param sharesDelta is the change in podOwner's beaconChainETHStrategy shares\\n     * @dev Callable only by the podOwner's EigenPod contract.\\n     * @dev Reverts if `sharesDelta` is not a whole Gwei amount\\n     */\\n    function recordBeaconChainETHBalanceUpdate(address podOwner, int256 sharesDelta) external;\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod if it has been deployed.\\n    function ownerToPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice Returns the address of the `podOwner`'s EigenPod (whether it is deployed yet or not).\\n    function getPod(address podOwner) external view returns (IEigenPod);\\n\\n    /// @notice The ETH2 Deposit Contract\\n    function ethPOS() external view returns (IETHPOSDeposit);\\n\\n    /// @notice Beacon proxy to which the EigenPods point\\n    function eigenPodBeacon() external view returns (IBeacon);\\n\\n    /// @notice EigenLayer's StrategyManager contract\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice EigenLayer's Slasher contract\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice Returns 'true' if the `podOwner` has created an EigenPod, and 'false' otherwise.\\n    function hasPod(address podOwner) external view returns (bool);\\n\\n    /// @notice Returns the number of EigenPods that have been created\\n    function numPods() external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping from Pod owner owner to the number of shares they have in the virtual beacon chain ETH strategy.\\n     * @dev The share amount can become negative. This is necessary to accommodate the fact that a pod owner's virtual beacon chain ETH shares can\\n     * decrease between the pod owner queuing and completing a withdrawal.\\n     * When the pod owner's shares would otherwise increase, this \\\"deficit\\\" is decreased first _instead_.\\n     * Likewise, when a withdrawal is completed, this \\\"deficit\\\" is decreased and the withdrawal amount is decreased; We can think of this\\n     * as the withdrawal \\\"paying off the deficit\\\".\\n     */\\n    function podOwnerShares(address podOwner) external view returns (int256);\\n\\n    /// @notice returns canonical, virtual beaconChainETH strategy\\n    function beaconChainETHStrategy() external view returns (IStrategy);\\n\\n    /**\\n     * @notice Used by the DelegationManager to remove a pod owner's shares while they're in the withdrawal queue.\\n     * Simply decreases the `podOwner`'s shares by `shares`, down to a minimum of zero.\\n     * @dev This function reverts if it would result in `podOwnerShares[podOwner]` being less than zero, i.e. it is forbidden for this function to\\n     * result in the `podOwner` incurring a \\\"share deficit\\\". This behavior prevents a Staker from queuing a withdrawal which improperly removes excessive\\n     * shares from the operator to whom the staker is delegated.\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function removeShares(address podOwner, uint256 shares) external;\\n\\n    /**\\n     * @notice Increases the `podOwner`'s shares by `shares`, paying off deficit if possible.\\n     * Used by the DelegationManager to award a pod owner shares on exiting the withdrawal queue\\n     * @dev Returns the number of shares added to `podOwnerShares[podOwner]` above zero, which will be less than the `shares` input\\n     * in the event that the podOwner has an existing shares deficit (i.e. `podOwnerShares[podOwner]` starts below zero)\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function addShares(address podOwner, uint256 shares) external returns (uint256);\\n\\n    /**\\n     * @notice Used by the DelegationManager to complete a withdrawal, sending tokens to some destination address\\n     * @dev Prioritizes decreasing the podOwner's share deficit, if they have one\\n     * @dev Reverts if `shares` is not a whole Gwei amount\\n     */\\n    function withdrawSharesAsTokens(address podOwner, address destination, uint256 shares) external;\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IStrategyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISlasher.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary entrypoint for funds into EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `StrategyManager` contract itself for implementation details.\\n */\\ninterface IStrategyManager {\\n    /**\\n     * @notice Emitted when a new deposit occurs on behalf of `staker`.\\n     * @param staker Is the staker who is depositing funds into EigenLayer.\\n     * @param strategy Is the strategy that `staker` has deposited into.\\n     * @param token Is the token that `staker` deposited.\\n     * @param shares Is the number of new shares `staker` has been granted in `strategy`.\\n     */\\n    event Deposit(address staker, IERC20 token, IStrategy strategy, uint256 shares);\\n\\n    /// @notice Emitted when `thirdPartyTransfersForbidden` is updated for a strategy and value by the owner\\n    event UpdatedThirdPartyTransfersForbidden(IStrategy strategy, bool value);\\n\\n    /// @notice Emitted when the `strategyWhitelister` is changed\\n    event StrategyWhitelisterChanged(address previousAddress, address newAddress);\\n\\n    /// @notice Emitted when a strategy is added to the approved list of strategies for deposit\\n    event StrategyAddedToDepositWhitelist(IStrategy strategy);\\n\\n    /// @notice Emitted when a strategy is removed from the approved list of strategies for deposit\\n    event StrategyRemovedFromDepositWhitelist(IStrategy strategy);\\n\\n    /**\\n     * @notice Deposits `amount` of `token` into the specified `strategy`, with the resultant shares credited to `msg.sender`\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the staker\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev Cannot be called by an address that is 'frozen' (this function will revert if the `msg.sender` is frozen).\\n     *\\n     * WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy.\\n     */\\n    function depositIntoStrategy(IStrategy strategy, IERC20 token, uint256 amount) external returns (uint256 shares);\\n\\n    /**\\n     * @notice Used for depositing an asset into the specified strategy with the resultant shares credited to `staker`,\\n     * who must sign off on the action.\\n     * Note that the assets are transferred out/from the `msg.sender`, not from the `staker`; this function is explicitly designed\\n     * purely to help one address deposit 'for' another.\\n     * @param strategy is the specified strategy where deposit is to be made,\\n     * @param token is the denomination in which the deposit is to be made,\\n     * @param amount is the amount of token to be deposited in the strategy by the staker\\n     * @param staker the staker that the deposited assets will be credited to\\n     * @param expiry the timestamp at which the signature expires\\n     * @param signature is a valid signature from the `staker`. either an ECDSA signature if the `staker` is an EOA, or data to forward\\n     * following EIP-1271 if the `staker` is a contract\\n     * @return shares The amount of new shares in the `strategy` created as part of the action.\\n     * @dev The `msg.sender` must have previously approved this contract to transfer at least `amount` of `token` on their behalf.\\n     * @dev A signature is required for this function to eliminate the possibility of griefing attacks, specifically those\\n     * targeting stakers who may be attempting to undelegate.\\n     * @dev Cannot be called if thirdPartyTransfersForbidden is set to true for this strategy\\n     *\\n     *  WARNING: Depositing tokens that allow reentrancy (eg. ERC-777) into a strategy is not recommended.  This can lead to attack vectors\\n     *          where the token balance and corresponding strategy shares are not in sync upon reentrancy\\n     */\\n    function depositIntoStrategyWithSignature(\\n        IStrategy strategy,\\n        IERC20 token,\\n        uint256 amount,\\n        address staker,\\n        uint256 expiry,\\n        bytes memory signature\\n    ) external returns (uint256 shares);\\n\\n    /// @notice Used by the DelegationManager to remove a Staker's shares from a particular strategy when entering the withdrawal queue\\n    function removeShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n    /// @notice Used by the DelegationManager to award a Staker some shares that have passed through the withdrawal queue\\n    function addShares(address staker, IERC20 token, IStrategy strategy, uint256 shares) external;\\n\\n    /// @notice Used by the DelegationManager to convert withdrawn shares to tokens and send them to a recipient\\n    function withdrawSharesAsTokens(address recipient, IStrategy strategy, uint256 shares, IERC20 token) external;\\n\\n    /// @notice Returns the current shares of `user` in `strategy`\\n    function stakerStrategyShares(address user, IStrategy strategy) external view returns (uint256 shares);\\n\\n    /**\\n     * @notice Get all details on the staker's deposits and corresponding shares\\n     * @return (staker's strategies, shares in these strategies)\\n     */\\n    function getDeposits(address staker) external view returns (IStrategy[] memory, uint256[] memory);\\n\\n    /// @notice Simple getter function that returns `stakerStrategyList[staker].length`.\\n    function stakerStrategyListLength(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Owner-only function that adds the provided Strategies to the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToWhitelist Strategies that will be added to the `strategyIsWhitelistedForDeposit` mapping (if they aren't in it already)\\n     * @param thirdPartyTransfersForbiddenValues bool values to set `thirdPartyTransfersForbidden` to for each strategy\\n     */\\n    function addStrategiesToDepositWhitelist(\\n        IStrategy[] calldata strategiesToWhitelist,\\n        bool[] calldata thirdPartyTransfersForbiddenValues\\n    ) external;\\n\\n    /**\\n     * @notice Owner-only function that removes the provided Strategies from the 'whitelist' of strategies that stakers can deposit into\\n     * @param strategiesToRemoveFromWhitelist Strategies that will be removed to the `strategyIsWhitelistedForDeposit` mapping (if they are in it)\\n     */\\n    function removeStrategiesFromDepositWhitelist(IStrategy[] calldata strategiesToRemoveFromWhitelist) external;\\n\\n    /**\\n     * If true for a strategy, a user cannot depositIntoStrategyWithSignature into that strategy for another staker\\n     * and also when performing DelegationManager.queueWithdrawals, a staker can only withdraw to themselves.\\n     * Defaulted to false for all existing strategies.\\n     * @param strategy The strategy to set `thirdPartyTransfersForbidden` value to\\n     * @param value bool value to set `thirdPartyTransfersForbidden` to\\n     */\\n    function setThirdPartyTransfersForbidden(IStrategy strategy, bool value) external;\\n\\n    /// @notice Returns the single, central Delegation contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /// @notice Returns the single, central Slasher contract of EigenLayer\\n    function slasher() external view returns (ISlasher);\\n\\n    /// @notice Returns the EigenPodManager contract of EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice Returns the address of the `strategyWhitelister`\\n    function strategyWhitelister() external view returns (address);\\n\\n    /// @notice Returns bool for whether or not `strategy` is whitelisted for deposit\\n    function strategyIsWhitelistedForDeposit(IStrategy strategy) external view returns (bool);\\n\\n    /**\\n     * @notice Returns bool for whether or not `strategy` enables credit transfers. i.e enabling\\n     * depositIntoStrategyWithSignature calls or queueing withdrawals to a different address than the staker.\\n     */\\n    function thirdPartyTransfersForbidden(IStrategy strategy) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IDelegationManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategy.sol\\\";\\nimport \\\"./ISignatureUtils.sol\\\";\\n\\n/**\\n * @title DelegationManager\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice  This is the contract for delegation in EigenLayer. The main functionalities of this contract are\\n * - enabling anyone to register as an operator in EigenLayer\\n * - allowing operators to specify parameters related to stakers who delegate to them\\n * - enabling any staker to delegate its stake to the operator of its choice (a given staker can only delegate to a single operator at a time)\\n * - enabling a staker to undelegate its assets from the operator it is delegated to (performed as part of the withdrawal process, initiated through the StrategyManager)\\n */\\ninterface IDelegationManager is ISignatureUtils {\\n    // @notice Struct used for storing information about a single operator who has registered with EigenLayer\\n    struct OperatorDetails {\\n        /// @notice DEPRECATED -- this field is no longer used, payments are handled in PaymentCoordinator.sol\\n        address __deprecated_earningsReceiver;\\n        /**\\n         * @notice Address to verify signatures when a staker wishes to delegate to the operator, as well as controlling \\\"forced undelegations\\\".\\n         * @dev Signature verification follows these rules:\\n         * 1) If this address is left as address(0), then any staker will be free to delegate to the operator, i.e. no signature verification will be performed.\\n         * 2) If this address is an EOA (i.e. it has no code), then we follow standard ECDSA signature verification for delegations to the operator.\\n         * 3) If this address is a contract (i.e. it has code) then we forward a call to the contract and verify that it returns the correct EIP-1271 \\\"magic value\\\".\\n         */\\n        address delegationApprover;\\n        /**\\n         * @notice A minimum delay -- measured in blocks -- enforced between:\\n         * 1) the operator signalling their intent to register for a service, via calling `Slasher.optIntoSlashing`\\n         * and\\n         * 2) the operator completing registration for the service, via the service ultimately calling `Slasher.recordFirstStakeUpdate`\\n         * @dev note that for a specific operator, this value *cannot decrease*, i.e. if the operator wishes to modify their OperatorDetails,\\n         * then they are only allowed to either increase this value or keep it the same.\\n         */\\n        uint32 stakerOptOutWindowBlocks;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for a staker to approve that they (the staker themselves) delegate to a specific operator.\\n     * @dev Used in computing the `STAKER_DELEGATION_TYPEHASH` and as a reference in the computation of the stakerDigestHash in the `delegateToBySignature` function.\\n     */\\n    struct StakerDelegation {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the staker's nonce\\n        uint256 nonce;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    /**\\n     * @notice Abstract struct used in calculating an EIP712 signature for an operator's delegationApprover to approve that a specific staker delegate to the operator.\\n     * @dev Used in computing the `DELEGATION_APPROVAL_TYPEHASH` and as a reference in the computation of the approverDigestHash in the `_delegate` function.\\n     */\\n    struct DelegationApproval {\\n        // the staker who is delegating\\n        address staker;\\n        // the operator being delegated to\\n        address operator;\\n        // the operator's provided salt\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    /**\\n     * Struct type used to specify an existing queued withdrawal. Rather than storing the entire struct, only a hash is stored.\\n     * In functions that operate on existing queued withdrawals -- e.g. completeQueuedWithdrawal`, the data is resubmitted and the hash of the submitted\\n     * data is computed by `calculateWithdrawalRoot` and checked against the stored hash in order to confirm the integrity of the submitted data.\\n     */\\n    struct Withdrawal {\\n        // The address that originated the Withdrawal\\n        address staker;\\n        // The address that the staker was delegated to at the time that the Withdrawal was created\\n        address delegatedTo;\\n        // The address that can complete the Withdrawal + will receive funds when completing the withdrawal\\n        address withdrawer;\\n        // Nonce used to guarantee that otherwise identical withdrawals have unique hashes\\n        uint256 nonce;\\n        // Block number when the Withdrawal was created\\n        uint32 startBlock;\\n        // Array of strategies that the Withdrawal contains\\n        IStrategy[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n    }\\n\\n    struct QueuedWithdrawalParams {\\n        // Array of strategies that the QueuedWithdrawal contains\\n        IStrategy[] strategies;\\n        // Array containing the amount of shares in each Strategy in the `strategies` array\\n        uint256[] shares;\\n        // The address of the withdrawer\\n        address withdrawer;\\n    }\\n\\n    // @notice Emitted when a new operator registers in EigenLayer and provides their OperatorDetails.\\n    event OperatorRegistered(address indexed operator, OperatorDetails operatorDetails);\\n\\n    /// @notice Emitted when an operator updates their OperatorDetails to @param newOperatorDetails\\n    event OperatorDetailsModified(address indexed operator, OperatorDetails newOperatorDetails);\\n\\n    /**\\n     * @notice Emitted when @param operator indicates that they are updating their MetadataURI string\\n     * @dev Note that these strings are *never stored in storage* and are instead purely emitted in events for off-chain indexing\\n     */\\n    event OperatorMetadataURIUpdated(address indexed operator, string metadataURI);\\n\\n    /// @notice Emitted whenever an operator's shares are increased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesIncreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\\n\\n    /// @notice Emitted whenever an operator's shares are decreased for a given strategy. Note that shares is the delta in the operator's shares.\\n    event OperatorSharesDecreased(address indexed operator, address staker, IStrategy strategy, uint256 shares);\\n\\n    /// @notice Emitted when @param staker delegates to @param operator.\\n    event StakerDelegated(address indexed staker, address indexed operator);\\n\\n    /// @notice Emitted when @param staker undelegates from @param operator.\\n    event StakerUndelegated(address indexed staker, address indexed operator);\\n\\n    /// @notice Emitted when @param staker is undelegated via a call not originating from the staker themself\\n    event StakerForceUndelegated(address indexed staker, address indexed operator);\\n\\n    /**\\n     * @notice Emitted when a new withdrawal is queued.\\n     * @param withdrawalRoot Is the hash of the `withdrawal`.\\n     * @param withdrawal Is the withdrawal itself.\\n     */\\n    event WithdrawalQueued(bytes32 withdrawalRoot, Withdrawal withdrawal);\\n\\n    /// @notice Emitted when a queued withdrawal is completed\\n    event WithdrawalCompleted(bytes32 withdrawalRoot);\\n\\n    /// @notice Emitted when the `minWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event MinWithdrawalDelayBlocksSet(uint256 previousValue, uint256 newValue);\\n\\n    /// @notice Emitted when the `strategyWithdrawalDelayBlocks` variable is modified from `previousValue` to `newValue`.\\n    event StrategyWithdrawalDelayBlocksSet(IStrategy strategy, uint256 previousValue, uint256 newValue);\\n\\n    /**\\n     * @notice Registers the caller as an operator in EigenLayer.\\n     * @param registeringOperatorDetails is the `OperatorDetails` for the operator.\\n     * @param metadataURI is a URI for the operator's metadata, i.e. a link providing more details on the operator.\\n     *\\n     * @dev Once an operator is registered, they cannot 'deregister' as an operator, and they will forever be considered \\\"delegated to themself\\\".\\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n     */\\n    function registerAsOperator(\\n        OperatorDetails calldata registeringOperatorDetails,\\n        string calldata metadataURI\\n    ) external;\\n\\n    /**\\n     * @notice Updates an operator's stored `OperatorDetails`.\\n     * @param newOperatorDetails is the updated `OperatorDetails` for the operator, to replace their current OperatorDetails`.\\n     *\\n     * @dev The caller must have previously registered as an operator in EigenLayer.\\n     */\\n    function modifyOperatorDetails(OperatorDetails calldata newOperatorDetails) external;\\n\\n    /**\\n     * @notice Called by an operator to emit an `OperatorMetadataURIUpdated` event indicating the information has updated.\\n     * @param metadataURI The URI for metadata associated with an operator\\n     * @dev Note that the `metadataURI` is *never stored * and is only emitted in the `OperatorMetadataURIUpdated` event\\n     */\\n    function updateOperatorMetadataURI(string calldata metadataURI) external;\\n\\n    /**\\n     * @notice Caller delegates their stake to an operator.\\n     * @param operator The account (`msg.sender`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param approverSignatureAndExpiry Verifies the operator approves of this delegation\\n     * @param approverSalt A unique single use value tied to an individual signature.\\n     * @dev The approverSignatureAndExpiry is used in the event that:\\n     *          1) the operator's `delegationApprover` address is set to a non-zero value.\\n     *                  AND\\n     *          2) neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator\\n     *             or their delegationApprover is the `msg.sender`, then approval is assumed.\\n     * @dev In the event that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateTo(\\n        address operator,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Caller delegates a staker's stake to an operator with valid signatures from both parties.\\n     * @param staker The account delegating stake to an `operator` account\\n     * @param operator The account (`staker`) is delegating its assets to for use in serving applications built on EigenLayer.\\n     * @param stakerSignatureAndExpiry Signed data from the staker authorizing delegating stake to an operator\\n     * @param approverSignatureAndExpiry is a parameter that will be used for verifying that the operator approves of this delegation action in the event that:\\n     * @param approverSalt Is a salt used to help guarantee signature uniqueness. Each salt can only be used once by a given approver.\\n     *\\n     * @dev If `staker` is an EOA, then `stakerSignature` is verified to be a valid ECDSA stakerSignature from `staker`, indicating their intention for this action.\\n     * @dev If `staker` is a contract, then `stakerSignature` will be checked according to EIP-1271.\\n     * @dev the operator's `delegationApprover` address is set to a non-zero value.\\n     * @dev neither the operator nor their `delegationApprover` is the `msg.sender`, since in the event that the operator or their delegationApprover\\n     * is the `msg.sender`, then approval is assumed.\\n     * @dev This function will revert if the current `block.timestamp` is equal to or exceeds the expiry\\n     * @dev In the case that `approverSignatureAndExpiry` is not checked, its content is ignored entirely; it's recommended to use an empty input\\n     * in this case to save on complexity + gas costs\\n     */\\n    function delegateToBySignature(\\n        address staker,\\n        address operator,\\n        SignatureWithExpiry memory stakerSignatureAndExpiry,\\n        SignatureWithExpiry memory approverSignatureAndExpiry,\\n        bytes32 approverSalt\\n    ) external;\\n\\n    /**\\n     * @notice Undelegates the staker from the operator who they are delegated to. Puts the staker into the \\\"undelegation limbo\\\" mode of the EigenPodManager\\n     * and queues a withdrawal of all of the staker's shares in the StrategyManager (to the staker), if necessary.\\n     * @param staker The account to be undelegated.\\n     * @return withdrawalRoot The root of the newly queued withdrawal, if a withdrawal was queued. Otherwise just bytes32(0).\\n     *\\n     * @dev Reverts if the `staker` is also an operator, since operators are not allowed to undelegate from themselves.\\n     * @dev Reverts if the caller is not the staker, nor the operator who the staker is delegated to, nor the operator's specified \\\"delegationApprover\\\"\\n     * @dev Reverts if the `staker` is already undelegated.\\n     */\\n    function undelegate(address staker) external returns (bytes32[] memory withdrawalRoot);\\n\\n    /**\\n     * Allows a staker to withdraw some shares. Withdrawn shares/strategies are immediately removed\\n     * from the staker. If the staker is delegated, withdrawn shares/strategies are also removed from\\n     * their operator.\\n     *\\n     * All withdrawn shares/strategies are placed in a queue and can be fully withdrawn after a delay.\\n     */\\n    function queueWithdrawals(QueuedWithdrawalParams[] calldata queuedWithdrawalParams)\\n        external\\n        returns (bytes32[] memory);\\n\\n    /**\\n     * @notice Used to complete the specified `withdrawal`. The caller must match `withdrawal.withdrawer`\\n     * @param withdrawal The Withdrawal to complete.\\n     * @param tokens Array in which the i-th entry specifies the `token` input to the 'withdraw' function of the i-th Strategy in the `withdrawal.strategies` array.\\n     * This input can be provided with zero length if `receiveAsTokens` is set to 'false' (since in that case, this input will be unused)\\n     * @param middlewareTimesIndex is the index in the operator that the staker who triggered the withdrawal was delegated to's middleware times array\\n     * @param receiveAsTokens If true, the shares specified in the withdrawal will be withdrawn from the specified strategies themselves\\n     * and sent to the caller, through calls to `withdrawal.strategies[i].withdraw`. If false, then the shares in the specified strategies\\n     * will simply be transferred to the caller directly.\\n     * @dev middlewareTimesIndex should be calculated off chain before calling this function by finding the first index that satisfies `slasher.canWithdraw`\\n     * @dev beaconChainETHStrategy shares are non-transferrable, so if `receiveAsTokens = false` and `withdrawal.withdrawer != withdrawal.staker`, note that\\n     * any beaconChainETHStrategy shares in the `withdrawal` will be _returned to the staker_, rather than transferred to the withdrawer, unlike shares in\\n     * any other strategies, which will be transferred to the withdrawer.\\n     */\\n    function completeQueuedWithdrawal(\\n        Withdrawal calldata withdrawal,\\n        IERC20[] calldata tokens,\\n        uint256 middlewareTimesIndex,\\n        bool receiveAsTokens\\n    ) external;\\n\\n    /**\\n     * @notice Array-ified version of `completeQueuedWithdrawal`.\\n     * Used to complete the specified `withdrawals`. The function caller must match `withdrawals[...].withdrawer`\\n     * @param withdrawals The Withdrawals to complete.\\n     * @param tokens Array of tokens for each Withdrawal. See `completeQueuedWithdrawal` for the usage of a single array.\\n     * @param middlewareTimesIndexes One index to reference per Withdrawal. See `completeQueuedWithdrawal` for the usage of a single index.\\n     * @param receiveAsTokens Whether or not to complete each withdrawal as tokens. See `completeQueuedWithdrawal` for the usage of a single boolean.\\n     * @dev See `completeQueuedWithdrawal` for relevant dev tags\\n     */\\n    function completeQueuedWithdrawals(\\n        Withdrawal[] calldata withdrawals,\\n        IERC20[][] calldata tokens,\\n        uint256[] calldata middlewareTimesIndexes,\\n        bool[] calldata receiveAsTokens\\n    ) external;\\n\\n    /**\\n     * @notice Increases a staker's delegated share balance in a strategy.\\n     * @param staker The address to increase the delegated shares for their operator.\\n     * @param strategy The strategy in which to increase the delegated shares.\\n     * @param shares The number of shares to increase.\\n     *\\n     * @dev *If the staker is actively delegated*, then increases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n     * @dev Callable only by the StrategyManager or EigenPodManager.\\n     */\\n    function increaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n    /**\\n     * @notice Decreases a staker's delegated share balance in a strategy.\\n     * @param staker The address to increase the delegated shares for their operator.\\n     * @param strategy The strategy in which to decrease the delegated shares.\\n     * @param shares The number of shares to decrease.\\n     *\\n     * @dev *If the staker is actively delegated*, then decreases the `staker`'s delegated shares in `strategy` by `shares`. Otherwise does nothing.\\n     * @dev Callable only by the StrategyManager or EigenPodManager.\\n     */\\n    function decreaseDelegatedShares(address staker, IStrategy strategy, uint256 shares) external;\\n\\n    /**\\n     * @notice returns the address of the operator that `staker` is delegated to.\\n     * @notice Mapping: staker => operator whom the staker is currently delegated to.\\n     * @dev Note that returning address(0) indicates that the staker is not actively delegated to any operator.\\n     */\\n    function delegatedTo(address staker) external view returns (address);\\n\\n    /**\\n     * @notice Returns the OperatorDetails struct associated with an `operator`.\\n     */\\n    function operatorDetails(address operator) external view returns (OperatorDetails memory);\\n\\n    /**\\n     * @notice Returns the delegationApprover account for an operator\\n     */\\n    function delegationApprover(address operator) external view returns (address);\\n\\n    /**\\n     * @notice Returns the stakerOptOutWindowBlocks for an operator\\n     */\\n    function stakerOptOutWindowBlocks(address operator) external view returns (uint256);\\n\\n    /**\\n     * @notice Given array of strategies, returns array of shares for the operator\\n     */\\n    function getOperatorShares(\\n        address operator,\\n        IStrategy[] memory strategies\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Given a list of strategies, return the minimum number of blocks that must pass to withdraw\\n     * from all the inputted strategies. Return value is >= minWithdrawalDelayBlocks as this is the global min withdrawal delay.\\n     * @param strategies The strategies to check withdrawal delays for\\n     */\\n    function getWithdrawalDelay(IStrategy[] calldata strategies) external view returns (uint256);\\n\\n    /**\\n     * @notice returns the total number of shares in `strategy` that are delegated to `operator`.\\n     * @notice Mapping: operator => strategy => total number of shares in the strategy delegated to the operator.\\n     * @dev By design, the following invariant should hold for each Strategy:\\n     * (operator's shares in delegation manager) = sum (shares above zero of all stakers delegated to operator)\\n     * = sum (delegateable shares of all stakers delegated to the operator)\\n     */\\n    function operatorShares(address operator, IStrategy strategy) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `staker` *is* actively delegated, and 'false' otherwise.\\n     */\\n    function isDelegated(address staker) external view returns (bool);\\n\\n    /**\\n     * @notice Returns true is an operator has previously registered for delegation.\\n     */\\n    function isOperator(address operator) external view returns (bool);\\n\\n    /// @notice Mapping: staker => number of signed delegation nonces (used in `delegateToBySignature`) from the staker that the contract has already checked\\n    function stakerNonce(address staker) external view returns (uint256);\\n\\n    /**\\n     * @notice Mapping: delegationApprover => 32-byte salt => whether or not the salt has already been used by the delegationApprover.\\n     * @dev Salts are used in the `delegateTo` and `delegateToBySignature` functions. Note that these functions only process the delegationApprover's\\n     * signature + the provided salt if the operator being delegated to has specified a nonzero address as their `delegationApprover`.\\n     */\\n    function delegationApproverSaltIsSpent(address _delegationApprover, bytes32 salt) external view returns (bool);\\n\\n    /**\\n     * @notice Minimum delay enforced by this contract for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\\n     * Note that strategies each have a separate withdrawal delay, which can be greater than this value. So the minimum number of blocks that must pass\\n     * to withdraw a strategy is MAX(minWithdrawalDelayBlocks, strategyWithdrawalDelayBlocks[strategy])\\n     */\\n    function minWithdrawalDelayBlocks() external view returns (uint256);\\n\\n    /**\\n     * @notice Minimum delay enforced by this contract per Strategy for completing queued withdrawals. Measured in blocks, and adjustable by this contract's owner,\\n     * up to a maximum of `MAX_WITHDRAWAL_DELAY_BLOCKS`. Minimum value is 0 (i.e. no delay enforced).\\n     */\\n    function strategyWithdrawalDelayBlocks(IStrategy strategy) external view returns (uint256);\\n\\n    /// @notice return address of the beaconChainETHStrategy\\n    function beaconChainETHStrategy() external view returns (IStrategy);\\n\\n    /**\\n     * @notice Calculates the digestHash for a `staker` to sign to delegate to an `operator`\\n     * @param staker The signing staker\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateCurrentStakerDelegationDigestHash(\\n        address staker,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed and used in the `delegateToBySignature` function\\n     * @param staker The signing staker\\n     * @param _stakerNonce The nonce of the staker. In practice we use the staker's current nonce, stored at `stakerNonce[staker]`\\n     * @param operator The operator who is being delegated to\\n     * @param expiry The desired expiry time of the staker's signature\\n     */\\n    function calculateStakerDelegationDigestHash(\\n        address staker,\\n        uint256 _stakerNonce,\\n        address operator,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /**\\n     * @notice Calculates the digest hash to be signed by the operator's delegationApprove and used in the `delegateTo` and `delegateToBySignature` functions.\\n     * @param staker The account delegating their stake\\n     * @param operator The account receiving delegated stake\\n     * @param _delegationApprover the operator's `delegationApprover` who will be signing the delegationHash (in general)\\n     * @param approverSalt A unique and single use value associated with the approver signature.\\n     * @param expiry Time after which the approver's signature becomes invalid\\n     */\\n    function calculateDelegationApprovalDigestHash(\\n        address staker,\\n        address operator,\\n        address _delegationApprover,\\n        bytes32 approverSalt,\\n        uint256 expiry\\n    ) external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    function DOMAIN_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the StakerDelegation struct used by the contract\\n    function STAKER_DELEGATION_TYPEHASH() external view returns (bytes32);\\n\\n    /// @notice The EIP-712 typehash for the DelegationApproval struct used by the contract\\n    function DELEGATION_APPROVAL_TYPEHASH() external view returns (bytes32);\\n\\n    /**\\n     * @notice Getter function for the current EIP-712 domain separator for this contract.\\n     *\\n     * @dev The domain separator will change in the event of a fork that changes the ChainID.\\n     * @dev By introducing a domain separator the DApp developers are guaranteed that there can be no signature collision.\\n     * for more detailed information please read EIP-712.\\n     */\\n    function domainSeparator() external view returns (bytes32);\\n\\n    /// @notice Mapping: staker => cumulative number of queued withdrawals they have ever initiated.\\n    /// @dev This only increments (doesn't decrement), and is used to help ensure that otherwise identical withdrawals have unique hashes.\\n    function cumulativeWithdrawalsQueued(address staker) external view returns (uint256);\\n\\n    /// @notice Returns the keccak256 hash of `withdrawal`.\\n    function calculateWithdrawalRoot(Withdrawal memory withdrawal) external pure returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IETHPOSDeposit.sol\": {\r\n      \"content\": \"// \u250f\u2501\u2501\u2501\u2513\u2501\u250f\u2513\u2501\u250f\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u250f\u2501\u2501\u2501\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u2513\u2501\\n// \u2503\u250f\u2501\u2501\u251b\u250f\u251b\u2517\u2513\u2503\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2517\u2513\u250f\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u250f\u2501\u2513\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u2513\\n// \u2503\u2517\u2501\u2501\u2513\u2517\u2513\u250f\u251b\u2503\u2517\u2501\u2513\u2517\u251b\u250f\u251b\u2503\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2501\u2501\u2513\u250f\u2513\u2517\u2513\u250f\u251b\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2517\u251b\u250f\u2501\u2501\u2513\u250f\u2501\u2513\u2501\u2517\u2513\u250f\u251b\u250f\u2501\u2513\u250f\u2501\u2501\u2513\u2501\u250f\u2501\u2501\u2513\u2517\u2513\u250f\u251b\\n// \u2503\u250f\u2501\u2501\u251b\u2501\u2503\u2503\u2501\u2503\u250f\u2513\u2503\u250f\u2501\u251b\u250f\u251b\u2501\u2501\u2503\u2503\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2503\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2503\u2503\u2501\u2501\u252b\u2523\u252b\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u250f\u2513\u2503\u250f\u2513\u2503\u2503\u250f\u2513\u2513\u2501\u2503\u2503\u2501\u2503\u250f\u251b\u2517\u2501\u2513\u2503\u2501\u2503\u250f\u2501\u251b\u2501\u2503\u2503\u2501\\n// \u2503\u2517\u2501\u2501\u2513\u2501\u2503\u2517\u2513\u2503\u2503\u2503\u2503\u2503\u2503\u2517\u2501\u2513\u250f\u2513\u2503\u2517\u2501\u251b\u2503\u2501\u2501\u2501\u2501\u250f\u251b\u2517\u251b\u2503\u2503\u2503\u2501\u252b\u2503\u2517\u251b\u2503\u2503\u2517\u251b\u2503\u2523\u2501\u2501\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2501\u2501\u2501\u2501\u2503\u2517\u2501\u251b\u2503\u2503\u2517\u251b\u2503\u2503\u2503\u2503\u2503\u2501\u2503\u2517\u2513\u2503\u2503\u2501\u2503\u2517\u251b\u2517\u2513\u2503\u2517\u2501\u2513\u2501\u2503\u2517\u2513\\n// \u2517\u2501\u2501\u2501\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2517\u251b\u2517\u2501\u2501\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2503\u250f\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2501\u2501\u2501\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2517\u251b\u2517\u251b\u2501\u2517\u2501\u251b\u2517\u251b\u2501\u2517\u2501\u2501\u2501\u251b\u2517\u2501\u2501\u251b\u2501\u2517\u2501\u251b\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2503\u2503\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n// \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2517\u251b\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\\n\\n// SPDX-License-Identifier: CC0-1.0\\n\\npragma solidity >=0.5.0;\\n\\n// This interface is designed to be compatible with the Vyper version.\\n/// @notice This is the Ethereum 2.0 deposit contract interface.\\n/// For more information see the Phase 0 specification under https://github.com/ethereum/eth2.0-specs\\ninterface IETHPOSDeposit {\\n    /// @notice A processed deposit event.\\n    event DepositEvent(bytes pubkey, bytes withdrawal_credentials, bytes amount, bytes signature, bytes index);\\n\\n    /// @notice Submit a Phase 0 DepositData object.\\n    /// @param pubkey A BLS12-381 public key.\\n    /// @param withdrawal_credentials Commitment to a public key for withdrawals.\\n    /// @param signature A BLS12-381 signature.\\n    /// @param deposit_data_root The SHA-256 hash of the SSZ-encoded DepositData object.\\n    /// Used as a protection against malformed input.\\n    function deposit(\\n        bytes calldata pubkey,\\n        bytes calldata withdrawal_credentials,\\n        bytes calldata signature,\\n        bytes32 deposit_data_root\\n    ) external payable;\\n\\n    /// @notice Query the current deposit root hash.\\n    /// @return The deposit root hash.\\n    function get_deposit_root() external view returns (bytes32);\\n\\n    /// @notice Query the current deposit count.\\n    /// @return The deposit count encoded as a little endian 64-bit number.\\n    function get_deposit_count() external view returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IEigenPod.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"../libraries/BeaconChainProofs.sol\\\";\\nimport \\\"./IEigenPodManager.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title The implementation contract used for restaking beacon chain ETH on EigenLayer\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @dev Note that all beacon chain balances are stored as gwei within the beacon chain datastructures. We choose\\n *   to account balances in terms of gwei in the EigenPod contract and convert to wei when making calls to other contracts\\n */\\ninterface IEigenPod {\\n    /**\\n     *\\n     *                                STRUCTS / ENUMS\\n     *\\n     */\\n    enum VALIDATOR_STATUS {\\n        INACTIVE, // doesnt exist\\n        ACTIVE, // staked on ethpos and withdrawal credentials are pointed to the EigenPod\\n        WITHDRAWN // withdrawn from the Beacon Chain\\n\\n    }\\n\\n    struct ValidatorInfo {\\n        // index of the validator in the beacon chain\\n        uint64 validatorIndex;\\n        // amount of beacon chain ETH restaked on EigenLayer in gwei\\n        uint64 restakedBalanceGwei;\\n        //timestamp of the validator's most recent balance update\\n        uint64 lastCheckpointedAt;\\n        // status of the validator\\n        VALIDATOR_STATUS status;\\n    }\\n\\n    struct Checkpoint {\\n        bytes32 beaconBlockRoot;\\n        uint24 proofsRemaining;\\n        uint64 podBalanceGwei;\\n        int128 balanceDeltasGwei;\\n    }\\n\\n    /**\\n     *\\n     *                                    EVENTS\\n     *\\n     */\\n\\n    /// @notice Emitted when an ETH validator stakes via this eigenPod\\n    event EigenPodStaked(bytes pubkey);\\n\\n    /// @notice Emitted when a pod owner updates the proof submitter address\\n    event ProofSubmitterUpdated(address prevProofSubmitter, address newProofSubmitter);\\n\\n    /// @notice Emitted when an ETH validator's withdrawal credentials are successfully verified to be pointed to this eigenPod\\n    event ValidatorRestaked(uint40 validatorIndex);\\n\\n    /// @notice Emitted when an ETH validator's  balance is proven to be updated.  Here newValidatorBalanceGwei\\n    //  is the validator's balance that is credited on EigenLayer.\\n    event ValidatorBalanceUpdated(uint40 validatorIndex, uint64 balanceTimestamp, uint64 newValidatorBalanceGwei);\\n\\n    /// @notice Emitted when restaked beacon chain ETH is withdrawn from the eigenPod.\\n    event RestakedBeaconChainETHWithdrawn(address indexed recipient, uint256 amount);\\n\\n    /// @notice Emitted when ETH is received via the `receive` fallback\\n    event NonBeaconChainETHReceived(uint256 amountReceived);\\n\\n    /// @notice Emitted when a checkpoint is created\\n    event CheckpointCreated(\\n        uint64 indexed checkpointTimestamp, bytes32 indexed beaconBlockRoot, uint256 validatorCount\\n    );\\n\\n    /// @notice Emitted when a checkpoint is finalized\\n    event CheckpointFinalized(uint64 indexed checkpointTimestamp, int256 totalShareDeltaWei);\\n\\n    /// @notice Emitted when a validator is proven for a given checkpoint\\n    event ValidatorCheckpointed(uint64 indexed checkpointTimestamp, uint40 indexed validatorIndex);\\n\\n    /// @notice Emitted when a validaor is proven to have 0 balance at a given checkpoint\\n    event ValidatorWithdrawn(uint64 indexed checkpointTimestamp, uint40 indexed validatorIndex);\\n\\n    /**\\n     *\\n     *                       EXTERNAL STATE-CHANGING METHODS\\n     *\\n     */\\n\\n    /// @notice Used to initialize the pointers to contracts crucial to the pod's functionality, in beacon proxy construction from EigenPodManager\\n    function initialize(address owner) external;\\n\\n    /// @notice Called by EigenPodManager when the owner wants to create another ETH validator.\\n    function stake(bytes calldata pubkey, bytes calldata signature, bytes32 depositDataRoot) external payable;\\n\\n    /**\\n     * @notice Transfers `amountWei` in ether from this contract to the specified `recipient` address\\n     * @notice Called by EigenPodManager to withdrawBeaconChainETH that has been added to the EigenPod's balance due to a withdrawal from the beacon chain.\\n     * @dev The podOwner must have already proved sufficient withdrawals, so that this pod's `withdrawableRestakedExecutionLayerGwei` exceeds the\\n     * `amountWei` input (when converted to GWEI).\\n     * @dev Reverts if `amountWei` is not a whole Gwei amount\\n     */\\n    function withdrawRestakedBeaconChainETH(address recipient, uint256 amount) external;\\n\\n    /**\\n     * @dev Create a checkpoint used to prove this pod's active validator set. Checkpoints are completed\\n     * by submitting one checkpoint proof per ACTIVE validator. During the checkpoint process, the total\\n     * change in ACTIVE validator balance is tracked, and any validators with 0 balance are marked `WITHDRAWN`.\\n     * @dev Once finalized, the pod owner is awarded shares corresponding to:\\n     * - the total change in their ACTIVE validator balances\\n     * - any ETH in the pod not already awarded shares\\n     * @dev A checkpoint cannot be created if the pod already has an outstanding checkpoint. If\\n     * this is the case, the pod owner MUST complete the existing checkpoint before starting a new one.\\n     * @param revertIfNoBalance Forces a revert if the pod ETH balance is 0. This allows the pod owner\\n     * to prevent accidentally starting a checkpoint that will not increase their shares\\n     */\\n    function startCheckpoint(bool revertIfNoBalance) external;\\n\\n    /**\\n     * @dev Progress the current checkpoint towards completion by submitting one or more validator\\n     * checkpoint proofs. Anyone can call this method to submit proofs towards the current checkpoint.\\n     * For each validator proven, the current checkpoint's `proofsRemaining` decreases.\\n     * @dev If the checkpoint's `proofsRemaining` reaches 0, the checkpoint is finalized.\\n     * (see `_updateCheckpoint` for more details)\\n     * @dev This method can only be called when there is a currently-active checkpoint.\\n     * @param balanceContainerProof proves the beacon's current balance container root against a checkpoint's `beaconBlockRoot`\\n     * @param proofs Proofs for one or more validator current balances against the `balanceContainerRoot`\\n     */\\n    function verifyCheckpointProofs(\\n        BeaconChainProofs.BalanceContainerProof calldata balanceContainerProof,\\n        BeaconChainProofs.BalanceProof[] calldata proofs\\n    ) external;\\n\\n    /**\\n     * @dev Verify one or more validators have their withdrawal credentials pointed at this EigenPod, and award\\n     * shares based on their effective balance. Proven validators are marked `ACTIVE` within the EigenPod, and\\n     * future checkpoint proofs will need to include them.\\n     * @dev Withdrawal credential proofs MUST NOT be older than `currentCheckpointTimestamp`.\\n     * @dev Validators proven via this method MUST NOT have an exit epoch set already.\\n     * @param beaconTimestamp the beacon chain timestamp sent to the 4788 oracle contract. Corresponds\\n     * to the parent beacon block root against which the proof is verified.\\n     * @param stateRootProof proves a beacon state root against a beacon block root\\n     * @param validatorIndices a list of validator indices being proven\\n     * @param validatorFieldsProofs proofs of each validator's `validatorFields` against the beacon state root\\n     * @param validatorFields the fields of the beacon chain \\\"Validator\\\" container. See consensus specs for\\n     * details: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     */\\n    function verifyWithdrawalCredentials(\\n        uint64 beaconTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        uint40[] calldata validatorIndices,\\n        bytes[] calldata validatorFieldsProofs,\\n        bytes32[][] calldata validatorFields\\n    ) external;\\n\\n    /**\\n     * @dev Prove that one of this pod's active validators was slashed on the beacon chain. A successful\\n     * staleness proof allows the caller to start a checkpoint.\\n     *\\n     * @dev Note that in order to start a checkpoint, any existing checkpoint must already be completed!\\n     * (See `_startCheckpoint` for details)\\n     *\\n     * @dev Note that this method allows anyone to start a checkpoint as soon as a slashing occurs on the beacon\\n     * chain. This is intended to make it easier to external watchers to keep a pod's balance up to date.\\n     *\\n     * @dev Note too that beacon chain slashings are not instant. There is a delay between the initial slashing event\\n     * and the validator's final exit back to the execution layer. During this time, the validator's balance may or\\n     * may not drop further due to a correlation penalty. This method allows proof of a slashed validator\\n     * to initiate a checkpoint for as long as the validator remains on the beacon chain. Once the validator\\n     * has exited and been checkpointed at 0 balance, they are no longer \\\"checkpoint-able\\\" and cannot be proven\\n     * \\\"stale\\\" via this method.\\n     * See https://eth2book.info/capella/part3/transition/epoch/#slashings for more info.\\n     *\\n     * @param beaconTimestamp the beacon chain timestamp sent to the 4788 oracle contract. Corresponds\\n     * to the parent beacon block root against which the proof is verified.\\n     * @param stateRootProof proves a beacon state root against a beacon block root\\n     * @param proof the fields of the beacon chain \\\"Validator\\\" container, along with a merkle proof against\\n     * the beacon state root. See the consensus specs for more details:\\n     * https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator\\n     *\\n     * @dev Staleness conditions:\\n     * - Validator's last checkpoint is older than `beaconTimestamp`\\n     * - Validator MUST be in `ACTIVE` status in the pod\\n     * - Validator MUST be slashed on the beacon chain\\n     */\\n    function verifyStaleBalance(\\n        uint64 beaconTimestamp,\\n        BeaconChainProofs.StateRootProof calldata stateRootProof,\\n        BeaconChainProofs.ValidatorProof calldata proof\\n    ) external;\\n\\n    /// @notice called by owner of a pod to remove any ERC20s deposited in the pod\\n    function recoverTokens(IERC20[] memory tokenList, uint256[] memory amountsToWithdraw, address recipient) external;\\n\\n    /// @notice Allows the owner of a pod to update the proof submitter, a permissioned\\n    /// address that can call `startCheckpoint` and `verifyWithdrawalCredentials`.\\n    /// @dev Note that EITHER the podOwner OR proofSubmitter can access these methods,\\n    /// so it's fine to set your proofSubmitter to 0 if you want the podOwner to be the\\n    /// only address that can call these methods.\\n    /// @param newProofSubmitter The new proof submitter address. If set to 0, only the\\n    /// pod owner will be able to call `startCheckpoint` and `verifyWithdrawalCredentials`\\n    function setProofSubmitter(address newProofSubmitter) external;\\n\\n    /**\\n     *\\n     *                                VIEW METHODS\\n     *\\n     */\\n\\n    /// @notice An address with permissions to call `startCheckpoint` and `verifyWithdrawalCredentials`, set\\n    /// by the podOwner. This role exists to allow a podOwner to designate a hot wallet that can call\\n    /// these methods, allowing the podOwner to remain a cold wallet that is only used to manage funds.\\n    /// @dev If this address is NOT set, only the podOwner can call `startCheckpoint` and `verifyWithdrawalCredentials`\\n    function proofSubmitter() external view returns (address);\\n\\n    /// @notice the amount of execution layer ETH in this contract that is staked in EigenLayer (i.e. withdrawn from beaconchain but not EigenLayer),\\n    function withdrawableRestakedExecutionLayerGwei() external view returns (uint64);\\n\\n    /// @notice The single EigenPodManager for EigenLayer\\n    function eigenPodManager() external view returns (IEigenPodManager);\\n\\n    /// @notice The owner of this EigenPod\\n    function podOwner() external view returns (address);\\n\\n    /// @notice Returns the validatorInfo struct for the provided pubkeyHash\\n    function validatorPubkeyHashToInfo(bytes32 validatorPubkeyHash) external view returns (ValidatorInfo memory);\\n\\n    /// @notice Returns the validatorInfo struct for the provided pubkey\\n    function validatorPubkeyToInfo(bytes calldata validatorPubkey) external view returns (ValidatorInfo memory);\\n\\n    /// @notice This returns the status of a given validator\\n    function validatorStatus(bytes32 pubkeyHash) external view returns (VALIDATOR_STATUS);\\n\\n    /// @notice This returns the status of a given validator pubkey\\n    function validatorStatus(bytes calldata validatorPubkey) external view returns (VALIDATOR_STATUS);\\n\\n    /// @notice Number of validators with proven withdrawal credentials, who do not have proven full withdrawals\\n    function activeValidatorCount() external view returns (uint256);\\n\\n    /// @notice The timestamp of the last checkpoint finalized\\n    function lastCheckpointTimestamp() external view returns (uint64);\\n\\n    /// @notice The timestamp of the currently-active checkpoint. Will be 0 if there is not active checkpoint\\n    function currentCheckpointTimestamp() external view returns (uint64);\\n\\n    /// @notice Returns the currently-active checkpoint\\n    function currentCheckpoint() external view returns (Checkpoint memory);\\n\\n    /// @notice For each checkpoint, the total balance attributed to exited validators, in gwei\\n    ///\\n    /// NOTE that the values added to this mapping are NOT guaranteed to capture the entirety of a validator's\\n    /// exit - rather, they capture the total change in a validator's balance when a checkpoint shows their\\n    /// balance change from nonzero to zero. While a change from nonzero to zero DOES guarantee that a validator\\n    /// has been fully exited, it is possible that the magnitude of this change does not capture what is\\n    /// typically thought of as a \\\"full exit.\\\"\\n    ///\\n    /// For example:\\n    /// 1. Consider a validator was last checkpointed at 32 ETH before exiting. Once the exit has been processed,\\n    /// it is expected that the validator's exited balance is calculated to be `32 ETH`.\\n    /// 2. However, before `startCheckpoint` is called, a deposit is made to the validator for 1 ETH. The beacon\\n    /// chain will automatically withdraw this ETH, but not until the withdrawal sweep passes over the validator\\n    /// again. Until this occurs, the validator's current balance (used for checkpointing) is 1 ETH.\\n    /// 3. If `startCheckpoint` is called at this point, the balance delta calculated for this validator will be\\n    /// `-31 ETH`, and because the validator has a nonzero balance, it is not marked WITHDRAWN.\\n    /// 4. After the exit is processed by the beacon chain, a subsequent `startCheckpoint` and checkpoint proof\\n    /// will calculate a balance delta of `-1 ETH` and attribute a 1 ETH exit to the validator.\\n    ///\\n    /// If this edge case impacts your usecase, it should be possible to mitigate this by monitoring for deposits\\n    /// to your exited validators, and waiting to call `startCheckpoint` until those deposits have been automatically\\n    /// exited.\\n    ///\\n    /// Additional edge cases this mapping does not cover:\\n    /// - If a validator is slashed, their balance exited will reflect their original balance rather than the slashed amount\\n    /// - The final partial withdrawal for an exited validator will be likely be included in this mapping.\\n    ///   i.e. if a validator was last checkpointed at 32.1 ETH before exiting, the next checkpoint will calculate their\\n    ///   \\\"exited\\\" amount to be 32.1 ETH rather than 32 ETH.\\n    function checkpointBalanceExitedGwei(uint64) external view returns (uint64);\\n\\n    /// @notice Query the 4788 oracle to get the parent block root of the slot with the given `timestamp`\\n    /// @param timestamp of the block for which the parent block root will be returned. MUST correspond\\n    /// to an existing slot within the last 24 hours. If the slot at `timestamp` was skipped, this method\\n    /// will revert.\\n    function getParentBlockRoot(uint64 timestamp) external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/IPauserRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title Interface for the `PauserRegistry` contract.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface IPauserRegistry {\\n    event PauserStatusChanged(address pauser, bool canPause);\\n\\n    event UnpauserChanged(address previousUnpauser, address newUnpauser);\\n\\n    /// @notice Mapping of addresses to whether they hold the pauser role.\\n    function isPauser(address pauser) external view returns (bool);\\n\\n    /// @notice Unique address that holds the unpauser role. Capable of changing *both* the pauser and unpauser addresses.\\n    function unpauser() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/ISlasher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\nimport \\\"./IStrategyManager.sol\\\";\\nimport \\\"./IDelegationManager.sol\\\";\\n\\n/**\\n * @title Interface for the primary 'slashing' contract for EigenLayer.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n * @notice See the `Slasher` contract itself for implementation details.\\n */\\ninterface ISlasher {\\n    // struct used to store information about the current state of an operator's obligations to middlewares they are serving\\n    struct MiddlewareTimes {\\n        // The update block for the middleware whose most recent update was earliest, i.e. the 'stalest' update out of all middlewares the operator is serving\\n        uint32 stalestUpdateBlock;\\n        // The latest 'serveUntilBlock' from all of the middleware that the operator is serving\\n        uint32 latestServeUntilBlock;\\n    }\\n\\n    // struct used to store details relevant to a single middleware that an operator has opted-in to serving\\n    struct MiddlewareDetails {\\n        // the block at which the contract begins being able to finalize the operator's registration with the service via calling `recordFirstStakeUpdate`\\n        uint32 registrationMayBeginAtBlock;\\n        // the block before which the contract is allowed to slash the user\\n        uint32 contractCanSlashOperatorUntilBlock;\\n        // the block at which the middleware's view of the operator's stake was most recently updated\\n        uint32 latestUpdateBlock;\\n    }\\n\\n    /// @notice Emitted when a middleware times is added to `operator`'s array.\\n    event MiddlewareTimesAdded(\\n        address operator, uint256 index, uint32 stalestUpdateBlock, uint32 latestServeUntilBlock\\n    );\\n\\n    /// @notice Emitted when `operator` begins to allow `contractAddress` to slash them.\\n    event OptedIntoSlashing(address indexed operator, address indexed contractAddress);\\n\\n    /// @notice Emitted when `contractAddress` signals that it will no longer be able to slash `operator` after the `contractCanSlashOperatorUntilBlock`.\\n    event SlashingAbilityRevoked(\\n        address indexed operator, address indexed contractAddress, uint32 contractCanSlashOperatorUntilBlock\\n    );\\n\\n    /**\\n     * @notice Emitted when `slashingContract` 'freezes' the `slashedOperator`.\\n     * @dev The `slashingContract` must have permission to slash the `slashedOperator`, i.e. `canSlash(slasherOperator, slashingContract)` must return 'true'.\\n     */\\n    event OperatorFrozen(address indexed slashedOperator, address indexed slashingContract);\\n\\n    /// @notice Emitted when `previouslySlashedAddress` is 'unfrozen', allowing them to again move deposited funds within EigenLayer.\\n    event FrozenStatusReset(address indexed previouslySlashedAddress);\\n\\n    /**\\n     * @notice Gives the `contractAddress` permission to slash the funds of the caller.\\n     * @dev Typically, this function must be called prior to registering for a middleware.\\n     */\\n    function optIntoSlashing(address contractAddress) external;\\n\\n    /**\\n     * @notice Used for 'slashing' a certain operator.\\n     * @param toBeFrozen The operator to be frozen.\\n     * @dev Technically the operator is 'frozen' (hence the name of this function), and then subject to slashing pending a decision by a human-in-the-loop.\\n     * @dev The operator must have previously given the caller (which should be a contract) the ability to slash them, through a call to `optIntoSlashing`.\\n     */\\n    function freezeOperator(address toBeFrozen) external;\\n\\n    /**\\n     * @notice Removes the 'frozen' status from each of the `frozenAddresses`\\n     * @dev Callable only by the contract owner (i.e. governance).\\n     */\\n    function resetFrozenStatus(address[] calldata frozenAddresses) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's registration to make sure the operator's stake at registration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev adds the middleware's slashing contract to the operator's linked list\\n     */\\n    function recordFirstStakeUpdate(address operator, uint32 serveUntilBlock) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during a stake update for an operator (perhaps to free pending withdrawals)\\n     *         to make sure the operator's stake at updateBlock is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param updateBlock the block for which the stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at updateBlock is slashable\\n     * @param insertAfter the element of the operators linked list that the currently updating middleware should be inserted after\\n     * @dev insertAfter should be calculated offchain before making the transaction that calls this. this is subject to race conditions,\\n     *      but it is anticipated to be rare and not detrimental.\\n     */\\n    function recordStakeUpdate(\\n        address operator,\\n        uint32 updateBlock,\\n        uint32 serveUntilBlock,\\n        uint256 insertAfter\\n    ) external;\\n\\n    /**\\n     * @notice this function is a called by middlewares during an operator's deregistration to make sure the operator's stake at deregistration\\n     *         is slashable until serveUntil\\n     * @param operator the operator whose stake update is being recorded\\n     * @param serveUntilBlock the block until which the operator's stake at the current block is slashable\\n     * @dev removes the middleware's slashing contract to the operator's linked list and revokes the middleware's (i.e. caller's) ability to\\n     * slash `operator` once `serveUntil` is reached\\n     */\\n    function recordLastStakeUpdateAndRevokeSlashingAbility(address operator, uint32 serveUntilBlock) external;\\n\\n    /// @notice The StrategyManager contract of EigenLayer\\n    function strategyManager() external view returns (IStrategyManager);\\n\\n    /// @notice The DelegationManager contract of EigenLayer\\n    function delegation() external view returns (IDelegationManager);\\n\\n    /**\\n     * @notice Used to determine whether `staker` is actively 'frozen'. If a staker is frozen, then they are potentially subject to\\n     * slashing of their funds, and cannot cannot deposit or withdraw from the strategyManager until the slashing process is completed\\n     * and the staker's status is reset (to 'unfrozen').\\n     * @param staker The staker of interest.\\n     * @return Returns 'true' if `staker` themselves has their status set to frozen, OR if the staker is delegated\\n     * to an operator who has their status set to frozen. Otherwise returns 'false'.\\n     */\\n    function isFrozen(address staker) external view returns (bool);\\n\\n    /// @notice Returns true if `slashingContract` is currently allowed to slash `toBeSlashed`.\\n    function canSlash(address toBeSlashed, address slashingContract) external view returns (bool);\\n\\n    /// @notice Returns the block until which `serviceContract` is allowed to slash the `operator`.\\n    function contractCanSlashOperatorUntilBlock(\\n        address operator,\\n        address serviceContract\\n    ) external view returns (uint32);\\n\\n    /// @notice Returns the block at which the `serviceContract` last updated its view of the `operator`'s stake\\n    function latestUpdateBlock(address operator, address serviceContract) external view returns (uint32);\\n\\n    /// @notice A search routine for finding the correct input value of `insertAfter` to `recordStakeUpdate` / `_updateMiddlewareList`.\\n    function getCorrectValueForInsertAfter(address operator, uint32 updateBlock) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns 'true' if `operator` can currently complete a withdrawal started at the `withdrawalStartBlock`, with `middlewareTimesIndex` used\\n     * to specify the index of a `MiddlewareTimes` struct in the operator's list (i.e. an index in `operatorToMiddlewareTimes[operator]`). The specified\\n     * struct is consulted as proof of the `operator`'s ability (or lack thereof) to complete the withdrawal.\\n     * This function will return 'false' if the operator cannot currently complete a withdrawal started at the `withdrawalStartBlock`, *or* in the event\\n     * that an incorrect `middlewareTimesIndex` is supplied, even if one or more correct inputs exist.\\n     * @param operator Either the operator who queued the withdrawal themselves, or if the withdrawing party is a staker who delegated to an operator,\\n     * this address is the operator *who the staker was delegated to* at the time of the `withdrawalStartBlock`.\\n     * @param withdrawalStartBlock The block number at which the withdrawal was initiated.\\n     * @param middlewareTimesIndex Indicates an index in `operatorToMiddlewareTimes[operator]` to consult as proof of the `operator`'s ability to withdraw\\n     * @dev The correct `middlewareTimesIndex` input should be computable off-chain.\\n     */\\n    function canWithdraw(\\n        address operator,\\n        uint32 withdrawalStartBlock,\\n        uint256 middlewareTimesIndex\\n    ) external returns (bool);\\n\\n    /**\\n     * operator =>\\n     *  [\\n     *      (\\n     *          the least recent update block of all of the middlewares it's serving/served,\\n     *          latest time that the stake bonded at that update needed to serve until\\n     *      )\\n     *  ]\\n     */\\n    function operatorToMiddlewareTimes(\\n        address operator,\\n        uint256 arrayIndex\\n    ) external view returns (MiddlewareTimes memory);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator].length`\\n    function middlewareTimesLength(address operator) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].stalestUpdateBlock`.\\n    function getMiddlewareTimesIndexStalestUpdateBlock(address operator, uint32 index) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `operatorToMiddlewareTimes[operator][index].latestServeUntil`.\\n    function getMiddlewareTimesIndexServeUntilBlock(address operator, uint32 index) external view returns (uint32);\\n\\n    /// @notice Getter function for fetching `_operatorToWhitelistedContractsByUpdate[operator].size`.\\n    function operatorWhitelistedContractsLinkedListSize(address operator) external view returns (uint256);\\n\\n    /// @notice Getter function for fetching a single node in the operator's linked list (`_operatorToWhitelistedContractsByUpdate[operator]`).\\n    function operatorWhitelistedContractsLinkedListEntry(\\n        address operator,\\n        address node\\n    ) external view returns (bool, uint256, uint256);\\n}\\n\"\r\n    },\r\n    \"src/contracts/interfaces/ISignatureUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title The interface for common signature utilities.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface ISignatureUtils {\\n    // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithSaltAndExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the salt used to generate the signature\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/BeaconChainProofs.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Merkle.sol\\\";\\nimport \\\"../libraries/Endian.sol\\\";\\n\\n//Utility library for parsing and PHASE0 beacon chain block headers\\n//SSZ Spec: https://github.com/ethereum/consensus-specs/blob/dev/ssz/simple-serialize.md#merkleization\\n//BeaconBlockHeader Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader\\n//BeaconState Spec: https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconstate\\nlibrary BeaconChainProofs {\\n    /// @notice Heights of various merkle trees in the beacon chain\\n    /// - beaconBlockRoot\\n    /// |                                             HEIGHT: BEACON_BLOCK_HEADER_TREE_HEIGHT\\n    /// -- beaconStateRoot\\n    /// |                                             HEIGHT: BEACON_STATE_TREE_HEIGHT\\n    /// validatorContainerRoot, balanceContainerRoot\\n    /// |                       |                     HEIGHT: BALANCE_TREE_HEIGHT\\n    /// |                       individual balances\\n    /// |                                             HEIGHT: VALIDATOR_TREE_HEIGHT\\n    /// individual validators\\n    uint256 internal constant BEACON_BLOCK_HEADER_TREE_HEIGHT = 3;\\n    uint256 internal constant BEACON_STATE_TREE_HEIGHT = 5;\\n    uint256 internal constant BALANCE_TREE_HEIGHT = 38;\\n    uint256 internal constant VALIDATOR_TREE_HEIGHT = 40;\\n\\n    /// @notice Index of the beaconStateRoot in the `BeaconBlockHeader` container\\n    ///\\n    /// BeaconBlockHeader = [..., state_root, ...]\\n    ///                      0...      3\\n    ///\\n    /// (See https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#beaconblockheader)\\n    uint256 internal constant STATE_ROOT_INDEX = 3;\\n\\n    /// @notice Indices for fields in the `BeaconState` container\\n    ///\\n    /// BeaconState = [..., validators, balances, ...]\\n    ///                0...     11         12\\n    ///\\n    /// (See https://github.com/ethereum/consensus-specs/blob/dev/specs/capella/beacon-chain.md#beaconstate)\\n    uint256 internal constant VALIDATOR_CONTAINER_INDEX = 11;\\n    uint256 internal constant BALANCE_CONTAINER_INDEX = 12;\\n\\n    /// @notice Number of fields in the `Validator` container\\n    /// (See https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator)\\n    uint256 internal constant VALIDATOR_FIELDS_LENGTH = 8;\\n\\n    /// @notice Indices for fields in the `Validator` container\\n    uint256 internal constant VALIDATOR_PUBKEY_INDEX = 0;\\n    uint256 internal constant VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX = 1;\\n    uint256 internal constant VALIDATOR_BALANCE_INDEX = 2;\\n    uint256 internal constant VALIDATOR_SLASHED_INDEX = 3;\\n    uint256 internal constant VALIDATOR_ACTIVATION_EPOCH_INDEX = 5;\\n    uint256 internal constant VALIDATOR_EXIT_EPOCH_INDEX = 6;\\n\\n    /// @notice Slot/Epoch timings\\n    uint64 internal constant SECONDS_PER_SLOT = 12;\\n    uint64 internal constant SLOTS_PER_EPOCH = 32;\\n    uint64 internal constant SECONDS_PER_EPOCH = SLOTS_PER_EPOCH * SECONDS_PER_SLOT;\\n\\n    /// @notice `FAR_FUTURE_EPOCH` is used as the default value for certain `Validator`\\n    /// fields when a `Validator` is first created on the beacon chain\\n    uint64 internal constant FAR_FUTURE_EPOCH = type(uint64).max;\\n    bytes8 internal constant UINT64_MASK = 0xffffffffffffffff;\\n\\n    /// @notice Contains a beacon state root and a merkle proof verifying its inclusion under a beacon block root\\n    struct StateRootProof {\\n        bytes32 beaconStateRoot;\\n        bytes proof;\\n    }\\n\\n    /// @notice Contains a validator's fields and a merkle proof of their inclusion under a beacon state root\\n    struct ValidatorProof {\\n        bytes32[] validatorFields;\\n        bytes proof;\\n    }\\n\\n    /// @notice Contains a beacon balance container root and a proof of this root under a beacon block root\\n    struct BalanceContainerProof {\\n        bytes32 balanceContainerRoot;\\n        bytes proof;\\n    }\\n\\n    /// @notice Contains a validator balance root and a proof of its inclusion under a balance container root\\n    struct BalanceProof {\\n        bytes32 pubkeyHash;\\n        bytes32 balanceRoot;\\n        bytes proof;\\n    }\\n\\n    /**\\n     *\\n     *              VALIDATOR FIELDS -> BEACON STATE ROOT -> BEACON BLOCK ROOT\\n     *\\n     */\\n\\n    /// @notice Verify a merkle proof of the beacon state root against a beacon block root\\n    /// @param beaconBlockRoot merkle root of the beacon block\\n    /// @param proof the beacon state root and merkle proof of its inclusion under `beaconBlockRoot`\\n    function verifyStateRoot(bytes32 beaconBlockRoot, StateRootProof calldata proof) internal view {\\n        require(\\n            proof.proof.length == 32 * (BEACON_BLOCK_HEADER_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyStateRoot: Proof has incorrect length\\\"\\n        );\\n\\n        /// This merkle proof verifies the `beaconStateRoot` under the `beaconBlockRoot`\\n        /// - beaconBlockRoot\\n        /// |                            HEIGHT: BEACON_BLOCK_HEADER_TREE_HEIGHT\\n        /// -- beaconStateRoot\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: proof.proof,\\n                root: beaconBlockRoot,\\n                leaf: proof.beaconStateRoot,\\n                index: STATE_ROOT_INDEX\\n            }),\\n            \\\"BeaconChainProofs.verifyStateRoot: Invalid state root merkle proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verify a merkle proof of a validator container against a `beaconStateRoot`\\n    /// @dev This proof starts at a validator's container root, proves through the validator container root,\\n    /// and continues proving to the root of the `BeaconState`\\n    /// @dev See https://eth2book.info/capella/part3/containers/dependencies/#validator for info on `Validator` containers\\n    /// @dev See https://eth2book.info/capella/part3/containers/state/#beaconstate for info on `BeaconState` containers\\n    /// @param beaconStateRoot merkle root of the `BeaconState` container\\n    /// @param validatorFields an individual validator's fields. These are merklized to form a `validatorRoot`,\\n    /// which is used as the leaf to prove against `beaconStateRoot`\\n    /// @param validatorFieldsProof a merkle proof of inclusion of `validatorFields` under `beaconStateRoot`\\n    /// @param validatorIndex the validator's unique index\\n    function verifyValidatorFields(\\n        bytes32 beaconStateRoot,\\n        bytes32[] calldata validatorFields,\\n        bytes calldata validatorFieldsProof,\\n        uint40 validatorIndex\\n    ) internal view {\\n        require(\\n            validatorFields.length == VALIDATOR_FIELDS_LENGTH,\\n            \\\"BeaconChainProofs.verifyValidatorFields: Validator fields has incorrect length\\\"\\n        );\\n\\n        /// Note: the reason we use `VALIDATOR_TREE_HEIGHT + 1` here is because the merklization process for\\n        /// this container includes hashing the root of the validator tree with the length of the validator list\\n        require(\\n            validatorFieldsProof.length == 32 * ((VALIDATOR_TREE_HEIGHT + 1) + BEACON_STATE_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Proof has incorrect length\\\"\\n        );\\n\\n        // Merkleize `validatorFields` to get the leaf to prove\\n        bytes32 validatorRoot = Merkle.merkleizeSha256(validatorFields);\\n\\n        /// This proof combines two proofs, so its index accounts for the relative position of leaves in two trees:\\n        /// - beaconStateRoot\\n        /// |                            HEIGHT: BEACON_STATE_TREE_HEIGHT\\n        /// -- validatorContainerRoot\\n        /// |                            HEIGHT: VALIDATOR_TREE_HEIGHT + 1\\n        /// ---- validatorRoot\\n        uint256 index = (VALIDATOR_CONTAINER_INDEX << (VALIDATOR_TREE_HEIGHT + 1)) | uint256(validatorIndex);\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: validatorFieldsProof,\\n                root: beaconStateRoot,\\n                leaf: validatorRoot,\\n                index: index\\n            }),\\n            \\\"BeaconChainProofs.verifyValidatorFields: Invalid merkle proof\\\"\\n        );\\n    }\\n\\n    /**\\n     *\\n     *          VALIDATOR BALANCE -> BALANCE CONTAINER ROOT -> BEACON BLOCK ROOT\\n     *\\n     */\\n\\n    /// @notice Verify a merkle proof of the beacon state's balances container against the beacon block root\\n    /// @dev This proof starts at the balance container root, proves through the beacon state root, and\\n    /// continues proving through the beacon block root. As a result, this proof will contain elements\\n    /// of a `StateRootProof` under the same block root, with the addition of proving the balances field\\n    /// within the beacon state.\\n    /// @dev This is used to make checkpoint proofs more efficient, as a checkpoint will verify multiple balances\\n    /// against the same balance container root.\\n    /// @param beaconBlockRoot merkle root of the beacon block\\n    /// @param proof a beacon balance container root and merkle proof of its inclusion under `beaconBlockRoot`\\n    function verifyBalanceContainer(bytes32 beaconBlockRoot, BalanceContainerProof calldata proof) internal view {\\n        require(\\n            proof.proof.length == 32 * (BEACON_BLOCK_HEADER_TREE_HEIGHT + BEACON_STATE_TREE_HEIGHT),\\n            \\\"BeaconChainProofs.verifyBalanceContainer: Proof has incorrect length\\\"\\n        );\\n\\n        /// This proof combines two proofs, so its index accounts for the relative position of leaves in two trees:\\n        /// - beaconBlockRoot\\n        /// |                            HEIGHT: BEACON_BLOCK_HEADER_TREE_HEIGHT\\n        /// -- beaconStateRoot\\n        /// |                            HEIGHT: BEACON_STATE_TREE_HEIGHT\\n        /// ---- balancesContainerRoot\\n        uint256 index = (STATE_ROOT_INDEX << (BEACON_STATE_TREE_HEIGHT)) | BALANCE_CONTAINER_INDEX;\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: proof.proof,\\n                root: beaconBlockRoot,\\n                leaf: proof.balanceContainerRoot,\\n                index: index\\n            }),\\n            \\\"BeaconChainProofs.verifyBalanceContainer: invalid balance container proof\\\"\\n        );\\n    }\\n\\n    /// @notice Verify a merkle proof of a validator's balance against the beacon state's `balanceContainerRoot`\\n    /// @param balanceContainerRoot the merkle root of all validators' current balances\\n    /// @param validatorIndex the index of the validator whose balance we are proving\\n    /// @param proof the validator's associated balance root and a merkle proof of inclusion under `balanceContainerRoot`\\n    /// @return validatorBalanceGwei the validator's current balance (in gwei)\\n    function verifyValidatorBalance(\\n        bytes32 balanceContainerRoot,\\n        uint40 validatorIndex,\\n        BalanceProof calldata proof\\n    ) internal view returns (uint64 validatorBalanceGwei) {\\n        /// Note: the reason we use `BALANCE_TREE_HEIGHT + 1` here is because the merklization process for\\n        /// this container includes hashing the root of the balances tree with the length of the balances list\\n        require(\\n            proof.proof.length == 32 * (BALANCE_TREE_HEIGHT + 1),\\n            \\\"BeaconChainProofs.verifyValidatorBalance: Proof has incorrect length\\\"\\n        );\\n\\n        /// When merkleized, beacon chain balances are combined into groups of 4 called a `balanceRoot`. The merkle\\n        /// proof here verifies that this validator's `balanceRoot` is included in the `balanceContainerRoot`\\n        /// - balanceContainerRoot\\n        /// |                            HEIGHT: BALANCE_TREE_HEIGHT\\n        /// -- balanceRoot\\n        uint256 balanceIndex = uint256(validatorIndex / 4);\\n\\n        require(\\n            Merkle.verifyInclusionSha256({\\n                proof: proof.proof,\\n                root: balanceContainerRoot,\\n                leaf: proof.balanceRoot,\\n                index: balanceIndex\\n            }),\\n            \\\"BeaconChainProofs.verifyValidatorBalance: Invalid merkle proof\\\"\\n        );\\n\\n        /// Extract the individual validator's balance from the `balanceRoot`\\n        return getBalanceAtIndex(proof.balanceRoot, validatorIndex);\\n    }\\n\\n    /**\\n     * @notice Parses a balanceRoot to get the uint64 balance of a validator.\\n     * @dev During merkleization of the beacon state balance tree, four uint64 values are treated as a single\\n     * leaf in the merkle tree. We use validatorIndex % 4 to determine which of the four uint64 values to\\n     * extract from the balanceRoot.\\n     * @param balanceRoot is the combination of 4 validator balances being proven for\\n     * @param validatorIndex is the index of the validator being proven for\\n     * @return The validator's balance, in Gwei\\n     */\\n    function getBalanceAtIndex(bytes32 balanceRoot, uint40 validatorIndex) internal pure returns (uint64) {\\n        uint256 bitShiftAmount = (validatorIndex % 4) * 64;\\n        return Endian.fromLittleEndianUint64(bytes32((uint256(balanceRoot) << bitShiftAmount)));\\n    }\\n\\n    /// @notice Indices for fields in the `Validator` container:\\n    /// 0: pubkey\\n    /// 1: withdrawal credentials\\n    /// 2: effective balance\\n    /// 3: slashed?\\n    /// 4: activation eligibility epoch\\n    /// 5: activation epoch\\n    /// 6: exit epoch\\n    /// 7: withdrawable epoch\\n    ///\\n    /// (See https://github.com/ethereum/consensus-specs/blob/dev/specs/phase0/beacon-chain.md#validator)\\n\\n    /// @dev Retrieves a validator's pubkey hash\\n    function getPubkeyHash(bytes32[] memory validatorFields) internal pure returns (bytes32) {\\n        return validatorFields[VALIDATOR_PUBKEY_INDEX];\\n    }\\n\\n    /// @dev Retrieves a validator's withdrawal credentials\\n    function getWithdrawalCredentials(bytes32[] memory validatorFields) internal pure returns (bytes32) {\\n        return validatorFields[VALIDATOR_WITHDRAWAL_CREDENTIALS_INDEX];\\n    }\\n\\n    /// @dev Retrieves a validator's effective balance (in gwei)\\n    function getEffectiveBalanceGwei(bytes32[] memory validatorFields) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_BALANCE_INDEX]);\\n    }\\n\\n    /// @dev Retrieves a validator's activation epoch\\n    function getActivationEpoch(bytes32[] memory validatorFields) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_ACTIVATION_EPOCH_INDEX]);\\n    }\\n\\n    /// @dev Retrieves true IFF a validator is marked slashed\\n    function isValidatorSlashed(bytes32[] memory validatorFields) internal pure returns (bool) {\\n        return validatorFields[VALIDATOR_SLASHED_INDEX] != 0;\\n    }\\n\\n    /// @dev Retrieves a validator's exit epoch\\n    function getExitEpoch(bytes32[] memory validatorFields) internal pure returns (uint64) {\\n        return Endian.fromLittleEndianUint64(validatorFields[VALIDATOR_EXIT_EPOCH_INDEX]);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/Merkle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Adapted from OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary Merkle {\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function verifyInclusionKeccak(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bool) {\\n        return processInclusionProofKeccak(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     * @dev If the proof length is 0 then the leaf hash is returned.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the keccak/sha3 hash function\\n     */\\n    function processInclusionProofKeccak(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal pure returns (bytes32) {\\n        require(proof.length % 32 == 0, \\\"Merkle.processInclusionProofKeccak: proof length should be a multiple of 32\\\");\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, computedHash)\\n                    mstore(0x20, mload(add(proof, i)))\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, computedHash)\\n                    computedHash := keccak256(0x00, 0x40)\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function verifyInclusionSha256(\\n        bytes memory proof,\\n        bytes32 root,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bool) {\\n        return processInclusionProofSha256(proof, leaf, index) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. The tree is built assuming `leaf` is\\n     * the 0 indexed `index`'th leaf from the bottom left of the tree.\\n     *\\n     * _Available since v4.4._\\n     *\\n     * Note this is for a Merkle tree using the sha256 hash function\\n     */\\n    function processInclusionProofSha256(\\n        bytes memory proof,\\n        bytes32 leaf,\\n        uint256 index\\n    ) internal view returns (bytes32) {\\n        require(\\n            proof.length != 0 && proof.length % 32 == 0,\\n            \\\"Merkle.processInclusionProofSha256: proof length should be a non-zero multiple of 32\\\"\\n        );\\n        bytes32[1] memory computedHash = [leaf];\\n        for (uint256 i = 32; i <= proof.length; i += 32) {\\n            if (index % 2 == 0) {\\n                // if ith bit of index is 0, then computedHash is a left sibling\\n                assembly {\\n                    mstore(0x00, mload(computedHash))\\n                    mstore(0x20, mload(add(proof, i)))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) { revert(0, 0) }\\n                    index := div(index, 2)\\n                }\\n            } else {\\n                // if ith bit of index is 1, then computedHash is a right sibling\\n                assembly {\\n                    mstore(0x00, mload(add(proof, i)))\\n                    mstore(0x20, mload(computedHash))\\n                    if iszero(staticcall(sub(gas(), 2000), 2, 0x00, 0x40, computedHash, 0x20)) { revert(0, 0) }\\n                    index := div(index, 2)\\n                }\\n            }\\n        }\\n        return computedHash[0];\\n    }\\n\\n    /**\\n     * @notice this function returns the merkle root of a tree created from a set of leaves using sha256 as its hash function\\n     *  @param leaves the leaves of the merkle tree\\n     *  @return The computed Merkle root of the tree.\\n     *  @dev A pre-condition to this function is that leaves.length is a power of two.  If not, the function will merkleize the inputs incorrectly.\\n     */\\n    function merkleizeSha256(bytes32[] memory leaves) internal pure returns (bytes32) {\\n        //there are half as many nodes in the layer above the leaves\\n        uint256 numNodesInLayer = leaves.length / 2;\\n        //create a layer to store the internal nodes\\n        bytes32[] memory layer = new bytes32[](numNodesInLayer);\\n        //fill the layer with the pairwise hashes of the leaves\\n        for (uint256 i = 0; i < numNodesInLayer; i++) {\\n            layer[i] = sha256(abi.encodePacked(leaves[2 * i], leaves[2 * i + 1]));\\n        }\\n        //the next layer above has half as many nodes\\n        numNodesInLayer /= 2;\\n        //while we haven't computed the root\\n        while (numNodesInLayer != 0) {\\n            //overwrite the first numNodesInLayer nodes in layer with the pairwise hashes of their children\\n            for (uint256 i = 0; i < numNodesInLayer; i++) {\\n                layer[i] = sha256(abi.encodePacked(layer[2 * i], layer[2 * i + 1]));\\n            }\\n            //the next layer above has half as many nodes\\n            numNodesInLayer /= 2;\\n        }\\n        //the first node in the layer is the root\\n        return layer[0];\\n    }\\n}\\n\"\r\n    },\r\n    \"src/contracts/libraries/Endian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nlibrary Endian {\\n    /**\\n     * @notice Converts a little endian-formatted uint64 to a big endian-formatted uint64\\n     * @param lenum little endian-formatted uint64 input, provided as 'bytes32' type\\n     * @return n The big endian-formatted uint64\\n     * @dev Note that the input is formatted as a 'bytes32' type (i.e. 256 bits), but it is immediately truncated to a uint64 (i.e. 64 bits)\\n     * through a right-shift/shr operation.\\n     */\\n    function fromLittleEndianUint64(bytes32 lenum) internal pure returns (uint64 n) {\\n        // the number needs to be stored in little-endian encoding (ie in bytes 0-8)\\n        n = uint64(uint256(lenum >> 192));\\n        // forgefmt: disable-next-item\\n        return (n >> 56) | \\n            ((0x00FF000000000000 & n) >> 40) | \\n            ((0x0000FF0000000000 & n) >> 24) | \\n            ((0x000000FF00000000 & n) >> 8)  | \\n            ((0x00000000FF000000 & n) << 8)  | \\n            ((0x0000000000FF0000 & n) << 24) | \\n            ((0x000000000000FF00 & n) << 40) | \\n            ((0x00000000000000FF & n) << 56);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@openzeppelin-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/\",\r\n      \"@openzeppelin-upgrades-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\r\n      \"ds-test/=lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts-upgradeable-v4.9.0/lib/erc4626-tests/\",\r\n      \"openzeppelin-contracts-upgradeable-v4.9.0/=lib/openzeppelin-contracts-upgradeable-v4.9.0/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts-v4.9.0/=lib/openzeppelin-contracts-v4.9.0/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts-upgradeable-v4.9.0/contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IETHPOSDeposit\",\"name\":\"_ethPOS\",\"type\":\"address\"},{\"internalType\":\"contract IBeacon\",\"name\":\"_eigenPodBeacon\",\"type\":\"address\"},{\"internalType\":\"contract IStrategyManager\",\"name\":\"_strategyManager\",\"type\":\"address\"},{\"internalType\":\"contract ISlasher\",\"name\":\"_slasher\",\"type\":\"address\"},{\"internalType\":\"contract IDelegationManager\",\"name\":\"_delegationManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BeaconChainETHDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"nonce\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"delegatedAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"withdrawalRoot\",\"type\":\"bytes32\"}],\"name\":\"BeaconChainETHWithdrawalCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"newTotalShares\",\"type\":\"int256\"}],\"name\":\"NewTotalShares\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IPauserRegistry\",\"name\":\"pauserRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"PauserRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"eigenPod\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"PodDeployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"sharesDelta\",\"type\":\"int256\"}],\"name\":\"PodSharesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"addShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beaconChainETHStrategy\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPod\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegationManager\",\"outputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eigenPodBeacon\",\"outputs\":[{\"internalType\":\"contract IBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ethPOS\",\"outputs\":[{\"internalType\":\"contract IETHPOSDeposit\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"getPod\",\"outputs\":[{\"internalType\":\"contract IEigenPod\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"}],\"name\":\"hasPod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"contract IPauserRegistry\",\"name\":\"_pauserRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_initPausedStatus\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numPods\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ownerToPod\",\"outputs\":[{\"internalType\":\"contract IEigenPod\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contract IPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"podOwnerShares\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"sharesDelta\",\"type\":\"int256\"}],\"name\":\"recordBeaconChainETHBalanceUpdate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"removeShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"setPauserRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contract ISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"pubkey\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"depositDataRoot\",\"type\":\"bytes32\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyManager\",\"outputs\":[{\"internalType\":\"contract IStrategyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"podOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"withdrawSharesAsTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "EigenPodManager", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000219ab540356cbb839cbe05303d7705fa0000000000000000000000005a2a4f2f3c18f09179b6703e63d9edd165909073000000000000000000000000858646372cc42e1a627fce94aa7a7033e7cf075a000000000000000000000000d92145c07f8ed1d392c1b88017934e301cc1c3cd00000000000000000000000039053d51b77dc0d36036fc1fcc8cb819df8ef37a", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}