{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/MiladyDoge.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.18;\\n\\nimport \\\"../lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract MiladyDoge is ERC20 {\\n    address public managerWallet;\\n    mapping(address => bool) excludedFromTax;\\n\\n    bool internal supplyMinted = false;\\n    uint256 MAX_SUPPLY = 18004262537 * 1e18;\\n    uint256 MAX_TAX_FRACTION = 0.02 * 1e18;\\n    uint256 public currentTaxFraction;\\n\\n    event NewManager(address newManager);\\n\\n    modifier onlyManager() {\\n        require(msg.sender == managerWallet, \\\"not authorized\\\");\\n        _;\\n    }\\n\\n    constructor(address _managerWallet) ERC20(\\\"MiladyDoge\\\", \\\"MD\\\") {\\n        managerWallet = _managerWallet;\\n        currentTaxFraction = MAX_TAX_FRACTION;\\n        excludedFromTax[managerWallet] = true;\\n    }\\n\\n    function mintAll() external onlyManager {\\n        require(!supplyMinted, \\\"already minted\\\");\\n        _mint(managerWallet, MAX_SUPPLY);\\n        supplyMinted = true;\\n    }\\n\\n    function renounceManagerRole(address newManager) external onlyManager {\\n        require(newManager != address(0), \\\"can't use the zero adress\\\");\\n        managerWallet = newManager;\\n        emit NewManager(newManager);\\n    }\\n\\n    function setTaxFraction(uint256 _newTaxFraction) external onlyManager {\\n        require(_newTaxFraction <= MAX_TAX_FRACTION);\\n        currentTaxFraction = _newTaxFraction;\\n    }\\n\\n    function excludeFromTax(address account) external onlyManager {\\n        excludedFromTax[account] = true;\\n    }\\n\\n    function includeInTax(address account) external onlyManager {\\n        excludedFromTax[account] = false;\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 fromBalance = _balances[from];\\n        require(\\n            fromBalance >= amount,\\n            \\\"ERC20: transfer amount exceeds balance\\\"\\n        );\\n\\n        // Tax Logic\\n        uint256 amountTo = amount;\\n        if (!excludedFromTax[from] && !excludedFromTax[to]) {\\n            uint256 tax = (amount * currentTaxFraction) / 1e18;\\n            amountTo -= tax;\\n            _balances[managerWallet] += tax;\\n        }\\n\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            _balances[to] += amountTo;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n    }\\n\\n    /**\\n\\n~~~~~~~~^~~~~!!77?JJJYYYYYYYYYY5Y5YYY5YY55Y5555Y555555555555555555555YYYY5Y5Y5555YYYYYYYYYYJJJJ???7!\\n~~~~~~~~~!!!!777?JJJYYYYYYYYYYYY5Y55YYYYYYYYY5YY5YY5Y555555YYYYYYYYYYYYYYY5Y5YYYYYYYYYJJJJJJJJJ????J\\n^^^^^^^~~~!!77???JJJJYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJJJJJ??JJJJJJJJJ?7!\\n::::::^^~~!777?????JJJJJJYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJJJJJJ????7?JJJYJJJJ??77?\\n::...:::^~~!7777!!7777?JJYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJJJJJJJ?????JJYYYJJJJ???77!\\n:::::::^^^~~~!!!!!!!!7?JYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJYJYYJJJJJJJJJJJJYYYYYJJJJ??777?\\n^^~~~~~~~~~~~~~!!!77JJYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJJJJYJJJYYYYYYYYYYJJJJJ??7!~\\n7??????????77777??JYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJYYYYYYYYYYYJJJJJJ??77?\\n77?JJJYYJJJJJJJYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJJJJJJJJJ?77!!\\n???JJ?JJJYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJJJJJJJYYYYYYYYYYYYYYYYYYYYYYYJJJJJYYYYJJJJJJJJJJJ???7!7\\nYYYJJJJ?JYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYJJJJ???JJJYJJJYJJJYYYYYJJJJJJJJJJJJJ?JJJJJYJJJJJJJJ???77!!\\nYYYYJJYJYYYYYYYYYYYYYYYYYYYYYYYYYYYJJJJJYJJ????JJJJYJJYYYJJ?JYYYYJ?JYJJ?JYJJYYJ?JYJJJJYJJJJJ????77!!\\nYYYYYYYYYYYYYYYYYYYYYYYYYJJJJYYYJJJ???JJJJ???JJJJJYYJJYYJJJ??YYYYJ?Y5YJ??YYJ?JYJ?JYJJ?JYJ??????777!!\\nJYYYYYYYYYYJYYYYYYYJJYYJ??JJYYYJJJ?7?JJJJ?7J5YJJJYYYJJYYJJJJ?J5YJ???5YJ??YYJ??JYJJYYJJ?JY????7777!!!\\nJJJJJJJJJJJJYYYYYJJJJYJ???JYYYJJJ?7?JJJJJ??55YJJJ55JJ!~~JJJJ??YYYJ?!7?J??55YJ?JYJJYYJJ?JYJ7777!!!~~!\\nJJJJJJJJJJJYYYYYJ???JY???JJYYYJJ???JJJYJJ7?5YYJJ77YY?~^^?YJJJ7?!7JJ!^~J?!7!7J??YJJYYJ??YYY?7!!!!!!~!\\nJJJJJJJJJJJYYYJJ?77?YY??JJJJYYJJ??JJJYYJ?!~7JJJJ~^~J?^^^~?JJJ??!^~77^~7~^^~77!~!??YYJJJYYY?~~~~~~^^^\\n????JJJJJJJYYJJJ?77JYY??JJJJYYJJ??JJ??YJ?~77?JJ7~^^~7~^~~~!J?7?!^^^~~^^^^^^^^^^^^~7JYYJJYY!::::.....\\n?????????JYYJJJ?77?YYY?JJJJJYYJJ??J?~^7Y7^~77!~^^^^^^^^~!!!7!!~^~~~^~~~~~~~~~~^^^~~!Y5J?YY:.......  \\n?????????JYYJJ?777?YYJJJYJJJJYJJ???~^^^!~^^^^^^^^^~~^~^^^^^^^^^^^^^^Y#BGGGGGGGG57^^!Y5JJY!..........\\n7777?????JYJJ?7777JYYYJJYYJ?JYYJ??7^^^^^^^~!!7JY5G#P~^^^^^^^^^^^^^^^!?7?JJJJ?7!?7~~~~JJ7^...........\\n777777777JJJJ?777?YYYYJYYJJ?JYYYJ?!^^~7J5PPP555YJJ?7~^^^^^^^^^^^^^^~^^!Y5PGPPP57~~~~~~:............:\\n!!!!!!!!7JJJ?7777?YYYYYYJJ??7???JJ7!PGPY?777??!^^^^^^^^^^^^^^^^^^^~~~~~5PYJ5#BP?~~~~~^..............\\n!!!!!!!!JJJJ?777?YYYYYYJJ?77!~^^~!!~!~^~Y55555?7!~^^^^^^^^^^^^^^^~~~~!#?    J@@B?~~~~^:::...........\\n!!!!!!!?YJJJ?777JYYYYJJJ?7!!~~^^^^^^^^7PYPB#B#&@&B57^^^^^^^^^^^^~~~~~P@Y^^!5&&&#&Y~~~^::::::::::::::\\n!!!!!!7YJJJJ?7?JYYJJ????77!~~^^^^^^^^^~JB5~:..^G@@@&Y~^^^^^^^^^^~~!~!#@@@@@@@@##7G5~~~^^^^^^^^^^^^^^\\n~~~~~~?YJJJJ?7?JJ?77!!~~~~~~~^^^^^^^^~5@5      5@&@@&7^^^^^^^^^^~~~~!&&##@@@@&BB:~!~~~~~~~~~~^^^^~~~\\n~!!!!!JYJJJ?!!!!~~~~~~~~~~~~~^~~~~~^7B#@&5???Y#@&@@@@Y^^^^^^^^^^~~~~~P7!7P@&?~G7^!~~~~~~~~~~~~~~~~~~\\n7777!7YYJJ7!~~~~~~~~~~~~~~~^^~~~~~~J#5^#@&&@@@@@BGY7?5^^^^~~^^^^~!~~~!J?7JJ?!Y?^~~~~~!!!!!!!!!!!!!!!\\nJJJ??JYJJJ?!~~~~~~~~~~~~~~~^^~~~~~~!!^.~#@&&##B5.  ~Y7^^^~~~~~~~~!!~~~~!7JJJP5!~~~~!7!!!~~!!!!!!!!!!\\nGGGPPPYJJJ???!~~~~~~~~~^^~~^^^~~~~~~^~^:^YGJ~~~~:^55!^^^^^~~~~~~~~~!!~~~~~~!7?!~~~~JYYJ?77??JJJ??JJJ\\nBBBBBGYJJJ?JYJ?!!~~~~~~~~~~~~~~~~~~~~~^~^:^7!!77?J?~^^^^^^^^~^^^^:^~~!!!!!!!!~~~~~?YYYYYYYYYYYYYYYY5\\nGGGGGG5JJJ?JYYYYJ?7!!~~~!!~~~~~~~~~~~~^^^~~7JJ7!~^^^^^^^^^^^^^^^^^^~~~~~!!!!~~~~~?JJ5PPGPPPPPPPP5555\\nPPGGBBPJJJ?JYYYYYYYYJJ?!!!~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^~~~~~~~~!!!~~~~~!!!~~~!?JJ?JPGGGGGGGGGGGGGB\\nPGGBBB#5JJJJYYYYYYYYYYY?J?7?7!!!~~~~~~~~~~~~~~~~^^~~^^^~~^~!!!!!~~~^~~~~~!!~~!7JYJJJ?JPGGGGGGGGGGGGP\\nGGBBBB#B5JJJYYYYYYYYYYYJ77Y55YYJJ?7!!~~~~~~~~~~~~~~~~~~~~~~^^^^^^^~~~~~~~~~!?JYYYJJJJ?JGBGGBBBGGGPPG\\nGGGGGGGGGYJJYYYYYYYYYYYJ77YYYYY555YYYJ?7!~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~!!7JYYYYYYJ?JJJJJPGGGGP5PPPP5\\nBGGGGPGGG5JJYYYYYYYYYYYYJJYYYYYYYYYYY555YYJ?7!!~~~~~~~~~~~~~~~~~~~~!!7?JYYYYYYYYJJJJJJJ?5GGP5555PPPG\\nBBGGGGGGGPJJJYYJJYYYYYYYYYYYYYYYYYYYYYYYYY5GGGGGP?!!!!~~~~~!!!!77??JYYYYYYYYYYYYYJJJJJJJJPGPPPPPPPP5\\nBBBBBBBBBBYJJJJJJYYYYYYYYYYYYYYYYYYYYY555PGBGGP5P5???7777!!!!!!P555YYYYYYYYYYYYYYJJJJJJJ?YGGG5YPPPPG\\nGBBBBBBGGG5JJJJJJJJJYYYYYYYYYYYYYY55PGGGPP55Y5~:^?777777777!!!!J:^?5P5YYYYYYYYYYYYJJJJJJJ?JYYJYGGGGG\\nGGGGGGGPYYJJJJJJJJJJJYYYYY55555PPGBBGPYJYYYYYYY7:!77777777!!!!!!:  .?YY?YJJJYYYYYYYYYYYPP55Y5PBGGGGG\\nBBBBBBBBPPPPPPGGGGGGBBBGGGB##BBBBB5JYYYJJ555555Y??5YJ??777777??YY.  ^YYJY55??5GPPGPPGGGGBBBBBB#BGGGG\\n###&&######B#&&&#########BBBBBBGGJ~7JJY5Y5Y555YY55YG##BBBBBBB###G!:^YJY5JJ5Y!!YGPGGPPGGGGBBBBBBBBGGG\\n###BBBBGGGGGGB#B#BBBBBBBBBBBGGGGJ!~!J55J55J5Y55PP5YJJB#########GJ?JJYY55Y5YJ7~~J555P55PGGGGGGGPPGPPP\\nGGPPPPP5PPPPPPPGGGGGGGGGPPPPPPPY!!!!?P5YYP555P5P5PGJJJP########J??!?5Y?JYPYJ7~~!5P5555PPPPPPP555555Y\\nGGGGGGGPGGGBGPPPGGGGGGPPP55Y5P57~!!~7Y5YY55PYYY5Y5PPG5JJB#####Y777JJY?JYYYYJ7~~!5PPPPPPPPGPP555YYY55\\nGGGGGGGGGBBBBGGGGGGGGGGPP555PG5!~!!~!J5J5YY5Y5YYJ555PGPY?G###J?J5577J?YY?YJJ7~~~?PPPPPPPPGGPPP5555PP\\nGGGGGGGB#######BBBBGGGPP55PPPGJ~!!!!~?PP?J55Y55JJJJYP5YPPJ5B7755YJ7YYJJ7JYYJ7~~~7PGGGPGGGB#BBGP5PPPG\\nGGGGGGGPP5YY55PGGGGGGPPPPPGGGP7~!!!!~7JY?P5YYJ?Y5YYYY575GY?~J5YJYYY7J?Y?YJY?!~~~~5GGGGGBGGB#BGPPGGGP\\n     **/\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) internal _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string internal _name;\\n    string internal _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_managerWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"NewManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentTaxFraction\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"excludeFromTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"includeInTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managerWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"renounceManagerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newTaxFraction\",\"type\":\"uint256\"}],\"name\":\"setTaxFraction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "MiladyDoge", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000004a9785e0a688001c6e5c0d5507f2557cdcad9722", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}