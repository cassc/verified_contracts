{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/BondSwap/Exchange/BondsMarketplace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Created by BondSwap https://bondswap.org\\n\\npragma solidity ^0.8.17;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC20, SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport { ICurrencyManager } from \\\"./interfaces/ICurrencyManager.sol\\\";\\nimport { IBondswapExchange } from \\\"./interfaces/IBondSwapExchange.sol\\\";\\nimport { IWETH } from \\\"./interfaces/IWETH.sol\\\";\\nimport { IBondContract } from \\\"./interfaces/IBondContract.sol\\\";\\nimport { IRegistry } from \\\"./interfaces/IRegistry.sol\\\";\\n\\nimport { OrderTypes } from \\\"./libraries/OrderTypes.sol\\\";\\nimport { BondContractSettings } from \\\"./libraries/BondConfig.sol\\\";\\n\\nimport { SignatureChecker } from \\\"./libraries/SignatureChecker.sol\\\";\\n\\ncontract BondSwapMarketplace is IBondswapExchange, ReentrancyGuard, Ownable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tusing OrderTypes for OrderTypes.MakerOrder;\\n\\tusing OrderTypes for OrderTypes.TakerOrder;\\n\\tusing BondContractSettings for BondContractSettings.BondContractConfig;\\n\\n\\taddress public immutable WETH;\\n\\tbytes32 public immutable DOMAIN_SEPARATOR;\\n\\n\\tuint256 public protocolFee;\\n\\taddress public protocolFeeRecipient;\\n\\tICurrencyManager public currencyManager;\\n\\tIRegistry public bondsRegistry;\\n\\n\\tmapping(address => uint256) public userMinOrderNonce;\\n\\tmapping(address => mapping(uint256 => bool)) private _isUserOrderNonceExecutedOrCancelled;\\n\\n\\tevent CancelAllOrders(address indexed user, uint256 newMinNonce);\\n\\tevent CancelMultipleOrders(address indexed user, uint256[] orderNonces);\\n\\tevent NewCurrencyManager(address indexed currencyManager);\\n\\tevent NewBondsRegistry(address indexed bondsRegistry);\\n\\tevent NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\\n\\tevent NewProtocolFee(uint256 newFee);\\n\\n\\tevent TakerAsk(\\n\\t\\tbytes32 orderHash, // bid hash of the maker order\\n\\t\\tuint256 orderNonce, // user order nonce\\n\\t\\taddress indexed taker, // sender address for the taker ask order\\n\\t\\taddress indexed maker, // maker address of the initial bid order\\n\\t\\taddress currency, // currency address\\n\\t\\taddress bondContract, // bondContract address\\n\\t\\tuint256 tokenId, // tokenId transferred\\n\\t\\tuint256 price // final transacted price\\n\\t);\\n\\n\\tevent TakerBid(\\n\\t\\tbytes32 orderHash, // ask hash of the maker order\\n\\t\\tuint256 orderNonce, // user order nonce\\n\\t\\taddress indexed taker, // sender address for the taker bid order\\n\\t\\taddress indexed maker, // maker address of the initial ask order\\n\\t\\taddress currency, // currency address\\n\\t\\taddress bondContract, // bondContract address\\n\\t\\tuint256 tokenId, // tokenId transferred\\n\\t\\tuint256 price // final transacted price\\n\\t);\\n\\n\\t/**\\n\\t * @notice Constructor\\n\\t * @param _currencyManager currency manager address\\n\\t * @param _WETH wrapped ether address (for other chains, use wrapped native asset)\\n\\t * @param _protocolFeeRecipient protocol fee recipient\\n\\t * @param _protocolFee protocol fee\\n\\t */\\n\\tconstructor(\\n\\t\\taddress _currencyManager,\\n\\t\\taddress _bondsRegistry,\\n\\t\\taddress _WETH,\\n\\t\\taddress _protocolFeeRecipient,\\n\\t\\tuint256 _protocolFee\\n\\t) {\\n\\t\\t// Calculate the domain separator\\n\\t\\tDOMAIN_SEPARATOR = keccak256(\\n\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n\\t\\t\\t\\t0xe13814be1494ac697820045213a238b3656a84d59ef31122c42a65695b0b16a0, // keccak256(\\\"BondSwapExchange\\\")\\n\\t\\t\\t\\t0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n\\t\\t\\t\\tblock.chainid,\\n\\t\\t\\t\\taddress(this)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\tcurrencyManager = ICurrencyManager(_currencyManager);\\n\\t\\tbondsRegistry = IRegistry(_bondsRegistry);\\n\\t\\tWETH = _WETH;\\n\\t\\tprotocolFeeRecipient = _protocolFeeRecipient;\\n\\t\\tprotocolFee = _protocolFee;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancel all pending orders for a sender\\n\\t * @param minNonce minimum user nonce\\n\\t */\\n\\tfunction cancelAllOrdersForSender(uint256 minNonce) external {\\n\\t\\trequire(minNonce > userMinOrderNonce[msg.sender], \\\"Cancel: Order nonce lower than current\\\");\\n\\t\\trequire(minNonce < userMinOrderNonce[msg.sender] + 500000, \\\"Cancel: Cannot cancel more orders\\\");\\n\\t\\tuserMinOrderNonce[msg.sender] = minNonce;\\n\\n\\t\\temit CancelAllOrders(msg.sender, minNonce);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Cancel maker orders\\n\\t * @param orderNonces array of order nonces\\n\\t */\\n\\tfunction cancelMultipleMakerOrders(uint256[] calldata orderNonces) external {\\n\\t\\trequire(orderNonces.length > 0, \\\"Cancel: Cannot be empty\\\");\\n\\n\\t\\tfor (uint256 i = 0; i < orderNonces.length; i++) {\\n\\t\\t\\trequire(orderNonces[i] >= userMinOrderNonce[msg.sender], \\\"Cancel: Order nonce lower than current\\\");\\n\\t\\t\\t_isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]] = true;\\n\\t\\t}\\n\\n\\t\\temit CancelMultipleOrders(msg.sender, orderNonces);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Match ask with a taker bid order using ETH\\n\\t * @param takerBid taker bid order\\n\\t * @param makerAsk maker ask order\\n\\t */\\n\\tfunction matchAskWithTakerBidUsingETHAndWETH(\\n\\t\\tOrderTypes.TakerOrder calldata takerBid,\\n\\t\\tOrderTypes.MakerOrder calldata makerAsk\\n\\t) external payable override nonReentrant {\\n\\t\\trequire((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \\\"Order: Wrong sides\\\");\\n\\t\\trequire(makerAsk.currency == WETH, \\\"Order: Currency must be WETH\\\");\\n\\t\\trequire(msg.sender == takerBid.taker, \\\"Order: Taker must be the sender\\\");\\n\\n\\t\\t// If not enough ETH to cover the price, use WETH\\n\\t\\tif (takerBid.price > msg.value) {\\n\\t\\t\\tIERC20(WETH).safeTransferFrom(msg.sender, address(this), (takerBid.price - msg.value));\\n\\t\\t} else {\\n\\t\\t\\trequire(takerBid.price == msg.value, \\\"Order: Msg.value too high\\\");\\n\\t\\t}\\n\\n\\t\\t// Verify whether bond have enough reward tokens left\\n\\t\\trequire(\\n\\t\\t\\tisAboveMinRequiredRewardToken(makerAsk.bondContract, takerBid.tokenId, takerBid.minRewardToken),\\n\\t\\t\\t\\\"BondContract: Not enough tokens left\\\"\\n\\t\\t);\\n\\n\\t\\t// Wrap ETH sent to this contract\\n\\t\\tIWETH(WETH).deposit{ value: msg.value }();\\n\\n\\t\\t// Check the maker ask order\\n\\t\\tbytes32 askHash = makerAsk.hash();\\n\\t\\t_validateOrder(makerAsk, askHash);\\n\\n\\t\\t// Retrieve execution parameters\\n\\t\\t(bool isExecutionValid, uint256 tokenId) = canExecuteTakerBid(takerBid, makerAsk);\\n\\n\\t\\trequire(isExecutionValid, \\\"Order: Execution invalid\\\");\\n\\n\\t\\t// Update maker ask order status to true (prevents replay)\\n\\t\\t_isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\\n\\n\\t\\t_transferFeesAndFundsWithWETH(makerAsk.signer, takerBid.price, makerAsk.minPercentageToAsk);\\n\\n\\t\\tIERC721(makerAsk.bondContract).safeTransferFrom(makerAsk.signer, takerBid.taker, tokenId);\\n\\n\\t\\temit TakerBid(\\n\\t\\t\\taskHash,\\n\\t\\t\\tmakerAsk.nonce,\\n\\t\\t\\ttakerBid.taker,\\n\\t\\t\\tmakerAsk.signer,\\n\\t\\t\\tmakerAsk.currency,\\n\\t\\t\\tmakerAsk.bondContract,\\n\\t\\t\\ttokenId,\\n\\t\\t\\ttakerBid.price\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Match a takerBid with a matchAsk\\n\\t * @param takerBid taker bid order\\n\\t * @param makerAsk maker ask order\\n\\t */\\n\\tfunction matchAskWithTakerBid(\\n\\t\\tOrderTypes.TakerOrder calldata takerBid,\\n\\t\\tOrderTypes.MakerOrder calldata makerAsk\\n\\t) external override nonReentrant {\\n\\t\\trequire((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \\\"Order: Wrong sides\\\");\\n\\t\\trequire(msg.sender == takerBid.taker, \\\"Order: Taker must be the sender\\\");\\n\\n\\t\\t// Verify whether bond have enough reward tokens left\\n\\t\\trequire(\\n\\t\\t\\tisAboveMinRequiredRewardToken(makerAsk.bondContract, takerBid.tokenId, takerBid.minRewardToken),\\n\\t\\t\\t\\\"BondContract: Not enough tokens left\\\"\\n\\t\\t);\\n\\n\\t\\t// Check the maker ask order\\n\\t\\tbytes32 askHash = makerAsk.hash();\\n\\t\\t_validateOrder(makerAsk, askHash);\\n\\n\\t\\t(bool isExecutionValid, uint256 tokenId) = canExecuteTakerBid(takerBid, makerAsk);\\n\\n\\t\\trequire(isExecutionValid, \\\"Order: Execution invalid\\\");\\n\\n\\t\\t// Update maker ask order status to true (prevents replay)\\n\\t\\t_isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\\n\\n\\t\\t_transferFeesAndFunds(\\n\\t\\t\\tmakerAsk.currency,\\n\\t\\t\\tmsg.sender,\\n\\t\\t\\tmakerAsk.signer,\\n\\t\\t\\ttakerBid.price,\\n\\t\\t\\tmakerAsk.minPercentageToAsk\\n\\t\\t);\\n\\n\\t\\tIERC721(makerAsk.bondContract).safeTransferFrom(makerAsk.signer, takerBid.taker, tokenId);\\n\\n\\t\\temit TakerBid(\\n\\t\\t\\taskHash,\\n\\t\\t\\tmakerAsk.nonce,\\n\\t\\t\\ttakerBid.taker,\\n\\t\\t\\tmakerAsk.signer,\\n\\t\\t\\tmakerAsk.currency,\\n\\t\\t\\tmakerAsk.bondContract,\\n\\t\\t\\ttokenId,\\n\\t\\t\\ttakerBid.price\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Match a takerAsk with a makerBid\\n\\t * @param takerAsk taker ask order\\n\\t * @param makerBid maker bid order\\n\\t */\\n\\tfunction matchBidWithTakerAsk(\\n\\t\\tOrderTypes.TakerOrder calldata takerAsk,\\n\\t\\tOrderTypes.MakerOrder calldata makerBid\\n\\t) external override nonReentrant {\\n\\t\\trequire((!makerBid.isOrderAsk) && (takerAsk.isOrderAsk), \\\"Order: Wrong sides\\\");\\n\\t\\trequire(msg.sender == takerAsk.taker, \\\"Order: Taker must be the sender\\\");\\n\\n\\t\\t// Verify whether bond have enough reward tokens left\\n\\t\\trequire(\\n\\t\\t\\tisAboveMinRequiredRewardToken(makerBid.bondContract, makerBid.tokenId, makerBid.minRewardToken),\\n\\t\\t\\t\\\"BondContract: Not enough tokens left\\\"\\n\\t\\t);\\n\\n\\t\\t// Check the maker bid order\\n\\t\\tbytes32 bidHash = makerBid.hash();\\n\\t\\t_validateOrder(makerBid, bidHash);\\n\\n\\t\\t(bool isExecutionValid, uint256 tokenId) = canExecuteTakerAsk(takerAsk, makerBid);\\n\\n\\t\\trequire(isExecutionValid, \\\"Order: Execution invalid\\\");\\n\\n\\t\\t// Update maker bid order status to true (prevents replay)\\n\\t\\t_isUserOrderNonceExecutedOrCancelled[makerBid.signer][makerBid.nonce] = true;\\n\\n\\t\\tIERC721(makerBid.bondContract).safeTransferFrom(msg.sender, makerBid.signer, tokenId);\\n\\n\\t\\t_transferFeesAndFunds(\\n\\t\\t\\tmakerBid.currency,\\n\\t\\t\\tmakerBid.signer,\\n\\t\\t\\ttakerAsk.taker,\\n\\t\\t\\ttakerAsk.price,\\n\\t\\t\\ttakerAsk.minPercentageToAsk\\n\\t\\t);\\n\\n\\t\\temit TakerAsk(\\n\\t\\t\\tbidHash,\\n\\t\\t\\tmakerBid.nonce,\\n\\t\\t\\ttakerAsk.taker,\\n\\t\\t\\tmakerBid.signer,\\n\\t\\t\\tmakerBid.currency,\\n\\t\\t\\tmakerBid.bondContract,\\n\\t\\t\\ttokenId,\\n\\t\\t\\ttakerAsk.price\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update currency manager\\n\\t * @param _currencyManager new currency manager address\\n\\t */\\n\\tfunction updateCurrencyManager(address _currencyManager) external onlyOwner {\\n\\t\\trequire(_currencyManager != address(0), \\\"Owner: Cannot be null address\\\");\\n\\t\\tcurrencyManager = ICurrencyManager(_currencyManager);\\n\\t\\temit NewCurrencyManager(_currencyManager);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update bonds registry\\n\\t * @param _bondsRegistry new bonds registry address\\n\\t */\\n\\tfunction updateBondsRegistry(address _bondsRegistry) external onlyOwner {\\n\\t\\trequire(_bondsRegistry != address(0), \\\"Owner: Cannot be null address\\\");\\n\\t\\tbondsRegistry = IRegistry(_bondsRegistry);\\n\\t\\temit NewBondsRegistry(_bondsRegistry);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update protocol fee and recipient\\n\\t * @param _protocolFeeRecipient new recipient for protocol fees\\n\\t */\\n\\tfunction updateProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\\n\\t\\tprotocolFeeRecipient = _protocolFeeRecipient;\\n\\t\\temit NewProtocolFeeRecipient(_protocolFeeRecipient);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Update protocol fee\\n\\t * @param _protocolFee new protocol fee\\n\\t */\\n\\tfunction updateProtocolFee(uint256 _protocolFee) external onlyOwner {\\n\\t\\tprotocolFee = _protocolFee;\\n\\t\\temit NewProtocolFee(_protocolFee);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check whether user order nonce is executed or cancelled\\n\\t * @param user address of user\\n\\t * @param orderNonce nonce of the order\\n\\t */\\n\\tfunction isUserOrderNonceExecutedOrCancelled(address user, uint256 orderNonce) external view returns (bool) {\\n\\t\\treturn _isUserOrderNonceExecutedOrCancelled[user][orderNonce];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfer fees and funds to protocol, and seller\\n\\t * @param currency currency being used for the purchase (e.g., WETH/USDC)\\n\\t * @param from sender of the funds\\n\\t * @param to seller's recipient\\n\\t * @param amount amount being transferred (in currency)\\n\\t * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n\\t */\\n\\tfunction _transferFeesAndFunds(\\n\\t\\taddress currency,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 minPercentageToAsk\\n\\t) internal {\\n\\t\\t// Initialize the final amount that is transferred to seller\\n\\t\\tuint256 finalSellerAmount = amount;\\n\\n\\t\\t// 1. Protocol fee\\n\\t\\t{\\n\\t\\t\\tuint256 protocolFeeAmount = _calculateProtocolFee(amount);\\n\\n\\t\\t\\t// Check if the protocol fee is different than 0 for this strategy\\n\\t\\t\\tif ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\\n\\t\\t\\t\\tIERC20(currency).safeTransferFrom(from, protocolFeeRecipient, protocolFeeAmount);\\n\\t\\t\\t\\tfinalSellerAmount -= protocolFeeAmount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \\\"Fees: Higher than expected\\\");\\n\\n\\t\\t// 3. Transfer final amount (post-fees) to seller\\n\\t\\t{\\n\\t\\t\\tIERC20(currency).safeTransferFrom(from, to, finalSellerAmount);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Transfer fees and funds to protocol, and seller\\n\\t * @param to seller's recipient\\n\\t * @param amount amount being transferred (in currency)\\n\\t * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n\\t */\\n\\tfunction _transferFeesAndFundsWithWETH(address to, uint256 amount, uint256 minPercentageToAsk) internal {\\n\\t\\t// Initialize the final amount that is transferred to seller\\n\\t\\tuint256 finalSellerAmount = amount;\\n\\n\\t\\t// 1. Protocol fee\\n\\t\\t{\\n\\t\\t\\tuint256 protocolFeeAmount = _calculateProtocolFee(amount);\\n\\n\\t\\t\\t// Check if the protocol fee is different than 0 for this strategy\\n\\t\\t\\tif ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\\n\\t\\t\\t\\tIERC20(WETH).safeTransfer(protocolFeeRecipient, protocolFeeAmount);\\n\\t\\t\\t\\tfinalSellerAmount -= protocolFeeAmount;\\n\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\trequire((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \\\"Fees: Higher than expected\\\");\\n\\n\\t\\t// 3. Transfer final amount (post-fees) to seller\\n\\t\\t{\\n\\t\\t\\tIERC20(WETH).safeTransfer(to, finalSellerAmount);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @notice Calculate protocol fee\\n\\t * @param amount amount to transfer\\n\\t */\\n\\tfunction _calculateProtocolFee(uint256 amount) internal view returns (uint256) {\\n\\t\\treturn (protocolFee * amount) / 10000;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Verify the validity of the maker order\\n\\t * @param makerOrder maker order\\n\\t * @param orderHash computed hash for the order\\n\\t */\\n\\tfunction _validateOrder(OrderTypes.MakerOrder calldata makerOrder, bytes32 orderHash) internal view {\\n\\t\\t// Verify whether order nonce has expired\\n\\t\\trequire(\\n\\t\\t\\t(!_isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.nonce]) &&\\n\\t\\t\\t\\t(makerOrder.nonce >= userMinOrderNonce[makerOrder.signer]),\\n\\t\\t\\t\\\"Order: Matching order expired\\\"\\n\\t\\t);\\n\\n\\t\\t// Verify the signer is not address(0)\\n\\t\\trequire(makerOrder.signer != address(0), \\\"Order: Invalid signer\\\");\\n\\n\\t\\t// Verify the validity of the signature\\n\\t\\trequire(\\n\\t\\t\\tSignatureChecker.verify(\\n\\t\\t\\t\\torderHash,\\n\\t\\t\\t\\tmakerOrder.signer,\\n\\t\\t\\t\\tmakerOrder.v,\\n\\t\\t\\t\\tmakerOrder.r,\\n\\t\\t\\t\\tmakerOrder.s,\\n\\t\\t\\t\\tDOMAIN_SEPARATOR\\n\\t\\t\\t),\\n\\t\\t\\t\\\"Signature: Invalid\\\"\\n\\t\\t);\\n\\n\\t\\t// Verify whether the currency is whitelisted\\n\\t\\trequire(currencyManager.isCurrencyWhitelisted(makerOrder.currency), \\\"Currency: Not whitelisted\\\");\\n\\n\\t\\t// Verify whether bond contract was created by BondSwap\\n\\t\\trequire(validateBondContract(makerOrder.bondContract), \\\"BondContract: Not listed\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check whether a taker ask order can be executed against a maker bid\\n\\t * @param takerAsk taker ask order\\n\\t * @param makerBid maker bid order\\n\\t * @return (whether can be executed, tokenId to execute, amount of tokens to execute)\\n\\t */\\n\\tfunction canExecuteTakerAsk(\\n\\t\\tOrderTypes.TakerOrder calldata takerAsk,\\n\\t\\tOrderTypes.MakerOrder calldata makerBid\\n\\t) internal view returns (bool, uint256) {\\n\\t\\treturn (\\n\\t\\t\\t((makerBid.price == takerAsk.price) &&\\n\\t\\t\\t\\t(makerBid.tokenId == takerAsk.tokenId) &&\\n\\t\\t\\t\\t(makerBid.startTime <= block.timestamp) &&\\n\\t\\t\\t\\t(makerBid.endTime >= block.timestamp)),\\n\\t\\t\\tmakerBid.tokenId\\n\\t\\t);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check whether a collection origin is from BondSwap\\n\\t * @param bondContract bondContract\\n\\t * @return (whether bondContract is valid/verified to be from BondSwap)\\n\\t */\\n\\n\\tfunction validateBondContract(address bondContract) internal view returns (bool) {\\n\\t\\t(, , , address bondToken, , , , ) = IBondContract(bondContract).settings();\\n\\n\\t\\taddress[] memory contracts = bondsRegistry.getBondContracts(bondToken);\\n\\t\\tfor (uint256 i = 0; i < contracts.length; i++) {\\n\\t\\t\\tif (contracts[i] == bondContract) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\\treturn false;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check if there is enough reward token left in the bond\\n\\t * @param bondContract bondContract\\n\\t * @param bondID token ID (bond ID)\\n\\t * @param minReward minimum reward tokens\\n\\t * @return (whether enough of reward tokens left)\\n\\t */\\n\\n\\tfunction isAboveMinRequiredRewardToken(\\n\\t\\taddress bondContract,\\n\\t\\tuint256 bondID,\\n\\t\\tuint256 minReward\\n\\t) internal view returns (bool) {\\n\\t\\tBondContractSettings.Bond memory bond = IBondContract(bondContract).bonds(bondID);\\n\\n\\t\\treturn bond.left >= minReward;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Check whether a taker bid order can be executed against a maker ask\\n\\t * @param takerBid taker bid order\\n\\t * @param makerAsk maker ask order\\n\\t * @return (whether can be executed, tokenId to execute)\\n\\t */\\n\\tfunction canExecuteTakerBid(\\n\\t\\tOrderTypes.TakerOrder calldata takerBid,\\n\\t\\tOrderTypes.MakerOrder calldata makerAsk\\n\\t) internal view returns (bool, uint256) {\\n\\t\\treturn (\\n\\t\\t\\t((makerAsk.price == takerBid.price) &&\\n\\t\\t\\t\\t(makerAsk.tokenId == takerBid.tokenId) &&\\n\\t\\t\\t\\t(makerAsk.startTime <= block.timestamp) &&\\n\\t\\t\\t\\t(makerAsk.endTime >= block.timestamp)),\\n\\t\\t\\tmakerAsk.tokenId\\n\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/BondSwap/Exchange/interfaces/IBondContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU\\npragma solidity >=0.5.0;\\n\\nimport { BondContractSettings } from \\\"../libraries/BondConfig.sol\\\";\\n\\ninterface IBondContract {\\n\\tfunction settings()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (string memory, uint256, address, address, uint8, uint256, address, uint256);\\n\\n\\tfunction bonds(uint256 bondID) external view returns (BondContractSettings.Bond memory);\\n}\\n\"\r\n    },\r\n    \"contracts/BondSwap/Exchange/interfaces/IBondSwapExchange.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface IBondswapExchange {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable;\\n\\n    function matchAskWithTakerBid(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external;\\n\\n    function matchBidWithTakerAsk(\\n        OrderTypes.TakerOrder calldata takerAsk,\\n        OrderTypes.MakerOrder calldata makerBid\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/BondSwap/Exchange/interfaces/ICurrencyManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurrencyManager {\\n    function addCurrency(address currency) external;\\n\\n    function removeCurrency(address currency) external;\\n\\n    function isCurrencyWhitelisted(address currency)\\n        external\\n        view\\n        returns (bool);\\n\\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\\n        external\\n        view\\n        returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/BondSwap/Exchange/interfaces/IRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Created by DegenLabs https://bondswap.org\\n\\npragma solidity ^0.8.15;\\n\\ninterface IRegistry {\\n    function getBondContracts(\\n        address _token\\n    ) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/BondSwap/Exchange/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GNU\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/BondSwap/Exchange/libraries/BondConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nlibrary BondContractSettings {\\n\\tstruct BondContractConfig {\\n\\t\\tstring uri;\\n\\t\\tuint256 protocolFee; // 5 digit representation,  5000 = 50%, 700 = 7%, 50 = 0.5% etc\\n\\t\\taddress protocolFeeAddress; // protocol fee address\\n\\t\\taddress bondToken; // token that we buy bonds for\\n\\t\\tuint8 bondTokenDecimals; // decimals for this token\\n\\t\\tuint256 bondContractVersion; // implementation contract version\\n\\t\\taddress bondCreator; // address that created bonds/have permission to create new bond classes\\n\\t\\tuint256 bondSymbolNumber; // used in ERC721 bond symbol\\n\\t}\\n\\n\\tstruct Bond {\\n\\t\\tuint256 bondTermsID; // bond ID\\n\\t\\tuint256 payout; //  all tokens to be paid (this value is NOT updated when claimed)\\n\\t\\tuint256 left; // how many tokes left to be claimed\\n\\t\\tuint256 vestingEnd; // vest ending timestamp\\n\\t\\tuint256 lastClaimed; // last claim timestamp\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/BondSwap/Exchange/libraries/OrderTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OrderTypes\\n * @notice This library contains order types for the BondSwap exchange.\\n */\\nlibrary OrderTypes {\\n\\t// keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address bondContract,uint256 price,uint256 tokenId,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,uint256 minRewardToken,bytes params)\\\")\\n\\tbytes32 internal constant MAKER_ORDER_HASH = 0xb2b62835b49da011c2344b046129b628de40af51cb4c4fbd62eb9394783c8edb;\\n\\n\\tstruct MakerOrder {\\n\\t\\tbool isOrderAsk; // true --> ask / false --> bid\\n\\t\\taddress signer; // signer of the maker order\\n\\t\\taddress bondContract; // bond contract address\\n\\t\\tuint256 price; // price (used as )\\n\\t\\tuint256 tokenId; // id of the token\\n\\t\\taddress currency; // currency (e.g., WETH)\\n\\t\\tuint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n\\t\\tuint256 startTime; // startTime in timestamp\\n\\t\\tuint256 endTime; // endTime in timestamp\\n\\t\\tuint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n\\t\\tuint256 minRewardToken; // protection against bond claim front running\\n\\t\\tbytes params; // additional parameters\\n\\t\\tuint8 v; // v: parameter (27 or 28)\\n\\t\\tbytes32 r; // r: parameter\\n\\t\\tbytes32 s; // s: parameter\\n\\t}\\n\\n\\tstruct TakerOrder {\\n\\t\\tbool isOrderAsk; // true --> ask / false --> bid\\n\\t\\taddress taker; // msg.sender\\n\\t\\tuint256 price; // final price for the purchase\\n\\t\\tuint256 tokenId;\\n\\t\\tuint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n\\t\\tuint256 minRewardToken; // protection against bond claim front running\\n\\t\\tbytes params; // other params (e.g., tokenId)\\n\\t}\\n\\n\\tfunction hash(MakerOrder memory makerOrder) internal pure returns (bytes32) {\\n\\t\\treturn\\n\\t\\t\\tkeccak256(\\n\\t\\t\\t\\tabi.encode(\\n\\t\\t\\t\\t\\tMAKER_ORDER_HASH,\\n\\t\\t\\t\\t\\tmakerOrder.isOrderAsk,\\n\\t\\t\\t\\t\\tmakerOrder.signer,\\n\\t\\t\\t\\t\\tmakerOrder.bondContract,\\n\\t\\t\\t\\t\\tmakerOrder.price,\\n\\t\\t\\t\\t\\tmakerOrder.tokenId,\\n\\t\\t\\t\\t\\tmakerOrder.currency,\\n\\t\\t\\t\\t\\tmakerOrder.nonce,\\n\\t\\t\\t\\t\\tmakerOrder.startTime,\\n\\t\\t\\t\\t\\tmakerOrder.endTime,\\n\\t\\t\\t\\t\\tmakerOrder.minPercentageToAsk,\\n\\t\\t\\t\\t\\tmakerOrder.minRewardToken,\\n\\t\\t\\t\\t\\tkeccak256(makerOrder.params)\\n\\t\\t\\t\\t)\\n\\t\\t\\t);\\n\\t}\\n}\\n\"\r\n    },\r\n    \"contracts/BondSwap/Exchange/libraries/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <=\\n                0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Signature: Invalid s parameter\\\"\\n        );\\n\\n        require(v == 27 || v == 28, \\\"Signature: Invalid v parameter\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"Signature: Invalid signer\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hash)\\n        );\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return\\n                IERC1271(signer).isValidSignature(\\n                    digest,\\n                    abi.encodePacked(r, s, v)\\n                ) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bondsRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinNonce\",\"type\":\"uint256\"}],\"name\":\"CancelAllOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"orderNonces\",\"type\":\"uint256[]\"}],\"name\":\"CancelMultipleOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bondsRegistry\",\"type\":\"address\"}],\"name\":\"NewBondsRegistry\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currencyManager\",\"type\":\"address\"}],\"name\":\"NewCurrencyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"NewProtocolFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bondContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerAsk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bondContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerBid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bondsRegistry\",\"outputs\":[{\"internalType\":\"contract IRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNonce\",\"type\":\"uint256\"}],\"name\":\"cancelAllOrdersForSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultipleMakerOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"internalType\":\"contract ICurrencyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"}],\"name\":\"isUserOrderNonceExecutedOrCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchAskWithTakerBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchAskWithTakerBidUsingETHAndWETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerAsk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bondContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRewardToken\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerBid\",\"type\":\"tuple\"}],\"name\":\"matchBidWithTakerAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bondsRegistry\",\"type\":\"address\"}],\"name\":\"updateBondsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"}],\"name\":\"updateCurrencyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"}],\"name\":\"updateProtocolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMinOrderNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BondSwapMarketplace", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c980e61e2b3c95f8e9797f2e012cf0c9066fa4a2000000000000000000000000cbf4698bc6947c94be3b43d519befc4fbf48f1b4000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000a516c76f242a71edf686cff8bd0e2ce4c88f7df800000000000000000000000000000000000000000000000000000000000000c8", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}