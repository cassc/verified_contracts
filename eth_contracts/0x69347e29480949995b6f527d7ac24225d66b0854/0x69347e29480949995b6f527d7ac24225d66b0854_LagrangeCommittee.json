{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/protocol/LagrangeCommittee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport \\\"@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin-upgrades/contracts/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"../interfaces/ILagrangeCommittee.sol\\\";\\nimport \\\"../interfaces/ILagrangeService.sol\\\";\\nimport \\\"../interfaces/IVoteWeigher.sol\\\";\\n\\ncontract LagrangeCommittee is Initializable, OwnableUpgradeable, ILagrangeCommittee {\\n    ILagrangeService public immutable service;\\n    IVoteWeigher public immutable voteWeigher;\\n\\n    // Leaf Node Prefix\\n    bytes1 public constant LEAF_NODE_PREFIX = 0x01;\\n    // Inner Node Prefix\\n    bytes1 public constant INNER_NODE_PREFIX = 0x02;\\n\\n    // Registered ChainIDs\\n    uint32[] public chainIDs;\\n    // ChainID => Committee\\n    mapping(uint32 => CommitteeDef) public committeeParams;\\n    // ChainID => Epoch => CommitteeData\\n    mapping(uint32 => mapping(uint256 => CommitteeData)) public committees;\\n\\n    // ChainID => Operator address[]\\n    mapping(uint32 => address[]) public committeeAddrs;\\n    // Tree Depth => Node Value\\n    mapping(uint8 => bytes32) zeroHashes;\\n\\n    mapping(address => OperatorStatus) public operatorsStatus;\\n\\n    // ChainID => Epoch check if committee tree has been updated\\n    mapping(uint32 => uint256) public updatedEpoch;\\n\\n    mapping(uint32 => mapping(address => bool)) public subscribedChains;\\n\\n    modifier onlyService() {\\n        require(msg.sender == address(service), \\\"Only Lagrange service can call this function.\\\");\\n        _;\\n    }\\n\\n    constructor(ILagrangeService _service, IVoteWeigher _voteWeigher) {\\n        service = _service;\\n        voteWeigher = _voteWeigher;\\n        _disableInitializers();\\n    }\\n\\n    // Initializer: sets owner\\n    function initialize(address initialOwner) external initializer {\\n        // Initialize zero hashes\\n        for (uint8 i = 1; i <= 20; i++) {\\n            zeroHashes[i] = _innerHash(zeroHashes[i - 1], zeroHashes[i - 1]);\\n        }\\n\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    // Adds address stake data and flags it for committee addition\\n    function addOperator(address operator, address signAddress, uint256[2][] calldata blsPubKeys) public onlyService {\\n        _validateBlsPubKeys(blsPubKeys);\\n        _registerOperator(operator, signAddress, blsPubKeys);\\n    }\\n\\n    // Adds address stake data and flags it for committee addition\\n    function addBlsPubKeys(address operator, uint256[2][] calldata additionalBlsPubKeys) public onlyService {\\n        _validateBlsPubKeys(additionalBlsPubKeys);\\n        _addBlsPubKeys(operator, additionalBlsPubKeys);\\n    }\\n\\n    function subscribeChain(address operator, uint32 chainID) external onlyService {\\n        // Check if the chainID is already registered\\n        require(committeeParams[chainID].startBlock > 0, \\\"The dedicated chain is not registered.\\\");\\n\\n        (bool locked,) = isLocked(chainID);\\n        require(!locked, \\\"The dedicated chain is locked.\\\");\\n\\n        UnsubscribedParam[] memory unsubscribedParams = operatorsStatus[operator].unsubscribedParams;\\n\\n        uint256 _length = unsubscribedParams.length;\\n        for (uint256 i; i < _length; i++) {\\n            UnsubscribedParam memory param = unsubscribedParams[i];\\n            if (param.chainID == chainID) {\\n                if (param.blockNumber >= block.number) {\\n                    revert(\\\"The dedciated chain is while unsubscribing.\\\");\\n                }\\n            }\\n        }\\n        require(!subscribedChains[chainID][operator], \\\"The dedicated chain is already subscribed.\\\");\\n\\n        CommitteeDef memory _committeeParam = committeeParams[chainID];\\n        uint96 _voteWeight = voteWeigher.weightOfOperator(_committeeParam.quorumNumber, operator); // voteWeight\\n        require(_voteWeight >= _committeeParam.minWeight, \\\"Insufficient Vote Weight\\\");\\n\\n        _subscribeChain(operator, chainID);\\n    }\\n\\n    function unsubscribeChain(address operator, uint32 chainID) external onlyService {\\n        require(subscribedChains[chainID][operator], \\\"The dedicated chain is not subscribed\\\");\\n\\n        (bool locked, uint256 blockNumber) = isLocked(chainID);\\n        require(!locked, \\\"The dedicated chain is locked.\\\");\\n\\n        _unsubscribeChain(operator, chainID, blockNumber);\\n    }\\n\\n    // Initializes a new committee, and optionally associates addresses with it.\\n    function registerChain(\\n        uint32 chainID,\\n        uint256 genesisBlock,\\n        uint256 epochPeriod,\\n        uint256 freezeDuration,\\n        uint8 quorumNumber,\\n        uint96 minWeight,\\n        uint96 maxWeight\\n    ) public onlyOwner {\\n        require(committeeParams[chainID].startBlock == 0, \\\"Committee has already been initialized.\\\");\\n        _validateVotingPowerRange(minWeight, maxWeight);\\n\\n        _initCommittee(chainID, genesisBlock, epochPeriod, freezeDuration, quorumNumber, minWeight, maxWeight);\\n    }\\n\\n    function updateChain(\\n        uint32 chainID,\\n        int256 l1Bias,\\n        uint256 genesisBlock,\\n        uint256 epochPeriod,\\n        uint256 freezeDuration,\\n        uint8 quorumNumber,\\n        uint96 minWeight,\\n        uint96 maxWeight\\n    ) public onlyOwner {\\n        uint256 _startBlock = committeeParams[chainID].startBlock;\\n        require(_startBlock != 0, \\\"Chain not initialized\\\");\\n\\n        _validateVotingPowerRange(minWeight, maxWeight);\\n\\n        _updateCommitteeParams(\\n            chainID, l1Bias, _startBlock, genesisBlock, epochPeriod, freezeDuration, quorumNumber, minWeight, maxWeight\\n        );\\n    }\\n\\n    function isUnregisterable(address operator) public view returns (bool, uint256) {\\n        OperatorStatus memory _opStatus = operatorsStatus[operator];\\n\\n        if (_opStatus.subscribedChainCount > 0) {\\n            return (false, 0);\\n        }\\n\\n        uint256 _unsubscribeBlockNumber;\\n        uint256 _length = _opStatus.unsubscribedParams.length;\\n        for (uint256 i; i < _length; i++) {\\n            UnsubscribedParam memory param = _opStatus.unsubscribedParams[i];\\n            if (param.blockNumber > _unsubscribeBlockNumber) {\\n                _unsubscribeBlockNumber = param.blockNumber;\\n            }\\n        }\\n\\n        return (true, _unsubscribeBlockNumber);\\n    }\\n\\n    function getBlsPubKeys(address operator) public view returns (uint256[2][] memory) {\\n        return operatorsStatus[operator].blsPubKeys;\\n    }\\n\\n    // Returns chain's committee current and next roots at a given block.\\n    function getCommittee(uint32 chainID, uint256 blockNumber)\\n        public\\n        view\\n        returns (CommitteeData memory currentCommittee)\\n    {\\n        uint256 epochNumber = getEpochNumber(chainID, blockNumber);\\n        currentCommittee = committees[chainID][epochNumber];\\n        return currentCommittee;\\n    }\\n\\n    // Checks if a chain's committee is updatable at a given block\\n    function isUpdatable(uint32 chainID, uint256 epochNumber) public view returns (bool) {\\n        uint256 epochEnd = epochNumber * committeeParams[chainID].duration + committeeParams[chainID].startBlock;\\n        return block.number > epochEnd - committeeParams[chainID].freezeDuration;\\n    }\\n\\n    // Checks if a chain's committee is locked at a given block\\n    function isLocked(uint32 chainID) public view returns (bool, uint256) {\\n        uint256 startNumber = committeeParams[chainID].startBlock;\\n        uint256 epochPeriod = committeeParams[chainID].duration;\\n        uint256 epochNumber = (block.number - startNumber) / epochPeriod + 1;\\n        uint256 epochEnd = epochNumber * epochPeriod + startNumber;\\n        return (block.number > epochEnd - committeeParams[chainID].freezeDuration, epochEnd);\\n    }\\n\\n    // If applicable, updates committee based on staking, unstaking, and slashing.\\n    function update(uint32 chainID, uint256 epochNumber) public {\\n        require(isUpdatable(chainID, epochNumber), \\\"Block number is prior to committee freeze window.\\\");\\n\\n        require(updatedEpoch[chainID] + 1 == epochNumber, \\\"The epochNumber is not sequential.\\\");\\n\\n        CommitteeDef memory _committeeParam = committeeParams[chainID];\\n        uint8 _quorumNumber = _committeeParam.quorumNumber;\\n        uint96 _minWeight = _committeeParam.minWeight;\\n        uint96 _maxWeight = _committeeParam.maxWeight;\\n\\n        address[] memory _operators = committeeAddrs[chainID];\\n        uint256 _operatorCount = _operators.length;\\n\\n        uint256 _leafCounter;\\n\\n        // pre-calculate array size (can be bigger than actual size)\\n        for (uint256 i; i < _operatorCount;) {\\n            unchecked {\\n                _leafCounter += operatorsStatus[_operators[i]].blsPubKeys.length;\\n                i++;\\n            }\\n        }\\n\\n        bytes32[] memory _committeeLeaves = new bytes32[](_leafCounter);\\n        {\\n            _leafCounter = 0;\\n            for (uint256 i; i < _operatorCount;) {\\n                address _operator = _operators[i];\\n\\n                OperatorStatus storage _opStatus = operatorsStatus[_operator];\\n                uint96 _votingPower = _checkVotingPower(\\n                    uint32(_opStatus.blsPubKeys.length), // blsPubKeyCount\\n                    voteWeigher.weightOfOperator(_quorumNumber, _operator), // voteWeight\\n                    _minWeight,\\n                    _maxWeight\\n                );\\n\\n                uint96 _remained = _votingPower;\\n                unchecked {\\n                    for (uint256 j; _remained > 0;) {\\n                        uint96 _individualVotingPower;\\n                        if (_remained >= _maxWeight + _minWeight) {\\n                            _individualVotingPower = _maxWeight;\\n                        } else if (_remained > _maxWeight) {\\n                            _individualVotingPower = _minWeight;\\n                        } else {\\n                            _individualVotingPower = _remained;\\n                        }\\n                        _remained -= _individualVotingPower;\\n                        _committeeLeaves[_leafCounter] =\\n                            _leafHash(_operator, _opStatus.blsPubKeys[j], _individualVotingPower);\\n                        j++;\\n                        _leafCounter++;\\n                    }\\n                }\\n                unchecked {\\n                    i++;\\n                }\\n            }\\n        }\\n\\n        bytes32 _root;\\n        unchecked {\\n            // Nothing to overflow/underflow\\n            uint256 _childCount = _leafCounter;\\n            for (uint8 _h; _childCount > 1; _h++) {\\n                uint256 _parentCount = (_childCount + 1) >> 1;\\n                for (uint256 _i = 1; _i < _childCount; _i += 2) {\\n                    _committeeLeaves[_i >> 1] = _innerHash(_committeeLeaves[_i - 1], _committeeLeaves[_i]);\\n                }\\n                if (_childCount & 1 == 1) {\\n                    _committeeLeaves[_parentCount - 1] = _innerHash(_committeeLeaves[_childCount - 1], zeroHashes[_h]);\\n                }\\n                _childCount = _parentCount;\\n            }\\n            if (_leafCounter > 0) _root = _committeeLeaves[0];\\n        }\\n\\n        _updateCommittee(chainID, epochNumber, _root, uint32(_leafCounter));\\n    }\\n\\n    // Computes epoch number for a chain's committee at a given block\\n    function getEpochNumber(uint32 chainID, uint256 blockNumber) public view returns (uint256) {\\n        // we don't need to care about safeCast here, only getting API\\n        blockNumber = uint256(int256(blockNumber) + committeeParams[chainID].l1Bias);\\n        if (blockNumber < committeeParams[chainID].genesisBlock) {\\n            return 0;\\n        }\\n        uint256 startBlockNumber = committeeParams[chainID].startBlock;\\n        uint256 epochPeriod = committeeParams[chainID].duration;\\n        if (blockNumber < startBlockNumber + epochPeriod) {\\n            return 1;\\n        }\\n        return (blockNumber - startBlockNumber) / epochPeriod;\\n    }\\n\\n    // Get the operator's voting power for the given chainID\\n    function getOperatorVotingPower(address opAddr, uint32 chainID) public view returns (uint96) {\\n        CommitteeDef memory _committeeParam = committeeParams[chainID];\\n        uint96 _weight = voteWeigher.weightOfOperator(_committeeParam.quorumNumber, opAddr);\\n        return _checkVotingPower(\\n            uint32(operatorsStatus[opAddr].blsPubKeys.length),\\n            _weight,\\n            _committeeParam.minWeight,\\n            _committeeParam.maxWeight\\n        );\\n    }\\n\\n    // Get array of voting powers of individual BlsPubKeys\\n    function getBlsPubKeyVotingPowers(address opAddr, uint32 chainID)\\n        public\\n        view\\n        returns (uint96[] memory individualVotingPowers)\\n    {\\n        uint96 _votingPower = getOperatorVotingPower(opAddr, chainID);\\n        uint96 _minWeight = committeeParams[chainID].minWeight;\\n        uint96 _maxWeight = committeeParams[chainID].maxWeight;\\n        return _divideVotingPower(_votingPower, _minWeight, _maxWeight);\\n    }\\n\\n    function getTokenListForOperator(address operator) external view returns (address[] memory) {\\n        uint256 _length = chainIDs.length;\\n        uint8[] memory _quorumNumbers = new uint8[](operatorsStatus[operator].subscribedChainCount);\\n        uint256 _count;\\n        for (uint256 i; i < _length; i++) {\\n            uint32 _chainID = chainIDs[i];\\n            if (subscribedChains[_chainID][operator]) {\\n                _quorumNumbers[_count++] = committeeParams[_chainID].quorumNumber;\\n            }\\n        }\\n\\n        return voteWeigher.getTokenListForQuorumNumbers(_quorumNumbers);\\n    }\\n\\n    // Initialize new committee.\\n    function _initCommittee(\\n        uint32 _chainID,\\n        uint256 _genesisBlock,\\n        uint256 _duration,\\n        uint256 _freezeDuration,\\n        uint8 _quorumNumber,\\n        uint96 _minWeight,\\n        uint96 _maxWeight\\n    ) internal {\\n        committeeParams[_chainID] = CommitteeDef(\\n            block.number, 0, _genesisBlock, _duration, _freezeDuration, _quorumNumber, _minWeight, _maxWeight\\n        );\\n        committees[_chainID][0] = CommitteeData(0, 0, 0);\\n\\n        chainIDs.push(_chainID);\\n\\n        emit InitCommittee(_chainID, _quorumNumber, _genesisBlock, _duration, _freezeDuration, _minWeight, _maxWeight);\\n    }\\n\\n    // Update committee.\\n    function _updateCommitteeParams(\\n        uint32 _chainID,\\n        int256 _l1Bias,\\n        uint256 _startBlock,\\n        uint256 _genesisBlock,\\n        uint256 _duration,\\n        uint256 _freezeDuration,\\n        uint8 _quorumNumber,\\n        uint96 _minWeight,\\n        uint96 _maxWeight\\n    ) internal {\\n        committeeParams[_chainID] = CommitteeDef(\\n            _startBlock, _l1Bias, _genesisBlock, _duration, _freezeDuration, _quorumNumber, _minWeight, _maxWeight\\n        );\\n        emit UpdateCommitteeParams(\\n            _chainID, _quorumNumber, _l1Bias, _genesisBlock, _duration, _freezeDuration, _minWeight, _maxWeight\\n        );\\n    }\\n\\n    function _registerOperator(address _operator, address _signAddress, uint256[2][] memory _blsPubKeys) internal {\\n        OperatorStatus storage _opStatus = operatorsStatus[_operator];\\n        require(_opStatus.blsPubKeys.length == 0, \\\"Operator is already registered.\\\");\\n        _opStatus.signAddress = _signAddress;\\n        uint256 _length = _blsPubKeys.length;\\n        for (uint256 i; i < _length; i++) {\\n            _checkBlsPubKeyDuplicate(_opStatus.blsPubKeys, _blsPubKeys[i]);\\n            _opStatus.blsPubKeys.push(_blsPubKeys[i]);\\n        }\\n    }\\n\\n    function _addBlsPubKeys(address _operator, uint256[2][] memory _additionalBlsPubKeys) internal {\\n        OperatorStatus storage _opStatus = operatorsStatus[_operator];\\n        require(_opStatus.blsPubKeys.length != 0, \\\"Operator is not registered.\\\");\\n        uint256 _length = _additionalBlsPubKeys.length;\\n        for (uint256 i; i < _length; i++) {\\n            _checkBlsPubKeyDuplicate(_opStatus.blsPubKeys, _additionalBlsPubKeys[i]);\\n            _opStatus.blsPubKeys.push(_additionalBlsPubKeys[i]);\\n        }\\n    }\\n\\n    function _checkBlsPubKeyDuplicate(uint256[2][] memory _blsPubKeys, uint256[2] memory _blsPubKey) internal pure {\\n        uint256 _length = _blsPubKeys.length;\\n        for (uint256 i; i < _length; i++) {\\n            require(_blsPubKeys[i][0] != _blsPubKey[0] || _blsPubKeys[i][1] != _blsPubKey[1], \\\"Duplicated BlsPubKey\\\");\\n        }\\n    }\\n\\n    function _subscribeChain(address _operator, uint32 _chainID) internal {\\n        subscribedChains[_chainID][_operator] = true;\\n        operatorsStatus[_operator].subscribedChainCount++;\\n\\n        committeeAddrs[_chainID].push(_operator);\\n    }\\n\\n    function _unsubscribeChain(address _operator, uint32 _chainID, uint256 _blockNumber) internal {\\n        delete subscribedChains[_chainID][_operator];\\n        OperatorStatus storage _opStatus = operatorsStatus[_operator];\\n        _opStatus.unsubscribedParams.push(UnsubscribedParam(_chainID, _blockNumber));\\n        _opStatus.subscribedChainCount = _opStatus.subscribedChainCount - 1;\\n\\n        uint256 _length = committeeAddrs[_chainID].length;\\n        for (uint256 i; i < _length; i++) {\\n            if (committeeAddrs[_chainID][i] == _operator) {\\n                committeeAddrs[_chainID][i] = committeeAddrs[_chainID][_length - 1];\\n            }\\n        }\\n        committeeAddrs[_chainID].pop();\\n    }\\n\\n    function _updateCommittee(uint32 _chainID, uint256 _epochNumber, bytes32 _root, uint32 _leafCount) internal {\\n        // Update roots\\n        committees[_chainID][_epochNumber].leafCount = _leafCount;\\n        committees[_chainID][_epochNumber].root = _root;\\n        committees[_chainID][_epochNumber].updatedBlock = uint224(block.number);\\n        updatedEpoch[_chainID] = _epochNumber;\\n        emit UpdateCommittee(_chainID, _epochNumber, _root);\\n    }\\n\\n    function _validateBlsPubKeys(uint256[2][] memory _blsPubKeys) internal pure {\\n        require(_blsPubKeys.length != 0, \\\"Empty BLS Public Keys.\\\");\\n        // TODO: need to add validation for blsPubKeys with signatures\\n        uint256 _length = _blsPubKeys.length;\\n        for (uint256 i; i < _length; i++) {\\n            require(_blsPubKeys[i][0] != 0 && _blsPubKeys[i][1] != 0, \\\"Invalid BLS Public Key.\\\");\\n        }\\n    }\\n\\n    // Returns the leaf hash for a given operator\\n    function _leafHash(address opAddr, uint256[2] memory blsPubKey, uint96 _votingPower)\\n        internal\\n        pure\\n        returns (bytes32)\\n    {\\n        return keccak256(abi.encodePacked(LEAF_NODE_PREFIX, blsPubKey[0], blsPubKey[1], opAddr, _votingPower));\\n    }\\n\\n    // Calculate the inner node hash from left and right children\\n    function _innerHash(bytes32 left, bytes32 right) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(INNER_NODE_PREFIX, left, right));\\n    }\\n\\n    function _validateVotingPowerRange(uint96 _minWeight, uint96 _maxWeight) internal pure {\\n        require(_minWeight > 0 && _maxWeight >= _minWeight * 2, \\\"Invalid min/max Weight\\\");\\n    }\\n\\n    function _checkVotingPower(uint32 blsPubKeysCount, uint96 votingPower, uint96 minWeight, uint96 maxWeight)\\n        internal\\n        pure\\n        returns (uint96)\\n    {\\n        if (votingPower < minWeight) {\\n            return 0;\\n        }\\n        unchecked {\\n            uint256 _amountLimit = uint256(maxWeight) * uint256(blsPubKeysCount); // This value can be bigger than type(uint96).max\\n\\n            if (votingPower > _amountLimit) {\\n                votingPower = uint96(_amountLimit);\\n            }\\n        }\\n        return votingPower;\\n    }\\n\\n    function _calcActiveBlsPubKeyCount(uint96 _votingPower, uint96 minWeight, uint96 maxWeight)\\n        internal\\n        pure\\n        returns (uint32)\\n    {\\n        if (_votingPower < minWeight) {\\n            return 0;\\n        } else {\\n            unchecked {\\n                uint96 _count = ((_votingPower - 1) / maxWeight) + 1;\\n                require(_count <= type(uint32).max, \\\"OverFlow\\\");\\n                return uint32(_count);\\n            }\\n        }\\n    }\\n\\n    function _divideVotingPower(uint96 totalWeight, uint96 minWeight, uint96 maxWeight)\\n        internal\\n        pure\\n        returns (uint96[] memory)\\n    {\\n        uint256 _count = _calcActiveBlsPubKeyCount(totalWeight, minWeight, maxWeight);\\n        uint96[] memory _individualVotingPowers = new uint96[](_count);\\n        if (_count == 0) return _individualVotingPowers;\\n        uint256 _index;\\n        uint96 _remained = totalWeight;\\n        unchecked {\\n            while (_remained >= maxWeight + minWeight) {\\n                _individualVotingPowers[_index++] = maxWeight;\\n                _remained -= maxWeight;\\n            }\\n            if (_remained > maxWeight) {\\n                _individualVotingPowers[_index++] = minWeight;\\n                _individualVotingPowers[_index++] = _remained - minWeight;\\n            } else {\\n                _individualVotingPowers[_index++] = _remained;\\n            }\\n        }\\n        return _individualVotingPowers;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILagrangeCommittee.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface ILagrangeCommittee {\\n    struct UnsubscribedParam {\\n        uint32 chainID;\\n        uint256 blockNumber;\\n    }\\n\\n    struct OperatorStatus {\\n        address signAddress;\\n        uint256[2][] blsPubKeys;\\n        uint8 subscribedChainCount; // assume that size of this array is not big\\n        UnsubscribedParam[] unsubscribedParams;\\n    }\\n\\n    struct CommitteeDef {\\n        uint256 startBlock;\\n        // l1Bias is the difference between the base L1 block number of the given L2 chain and\\n        // the maintained L1 block number, for example, if we want to register the Base Mainnet\\n        // chain in the Holesky, the l1Bias should be the difference between the Mainnet block\\n        // number and the Holesky block number.\\n        int256 l1Bias;\\n        uint256 genesisBlock;\\n        uint256 duration;\\n        uint256 freezeDuration;\\n        uint8 quorumNumber;\\n        uint96 minWeight;\\n        uint96 maxWeight;\\n    }\\n\\n    struct CommitteeData {\\n        bytes32 root;\\n        uint224 updatedBlock;\\n        uint32 leafCount;\\n    }\\n\\n    function getCommittee(uint32 chainID, uint256 blockNumber) external view returns (CommitteeData memory);\\n\\n    // TODO: need to change order of the params for gas optimization\\n    function registerChain(\\n        uint32 chainID,\\n        uint256 genesisBlock,\\n        uint256 epochPeriod,\\n        uint256 freezeDuration,\\n        uint8 quorumNumber,\\n        uint96 minWeight,\\n        uint96 maxWeight\\n    ) external;\\n\\n    function updateChain(\\n        uint32 chainID,\\n        int256 l1Bias,\\n        uint256 genesisBlock,\\n        uint256 epochPeriod,\\n        uint256 freezeDuration,\\n        uint8 quorumNumber,\\n        uint96 minWeight,\\n        uint96 maxWeight\\n    ) external;\\n\\n    function addOperator(address operator, address signAddress, uint256[2][] memory blsPubKeys) external;\\n\\n    function addBlsPubKeys(address operator, uint256[2][] memory additionalBlsPubKeys) external;\\n\\n    function isLocked(uint32 chainID) external view returns (bool, uint256);\\n\\n    function subscribeChain(address operator, uint32 chainID) external;\\n\\n    function unsubscribeChain(address operator, uint32 chainID) external;\\n\\n    function isUnregisterable(address operator) external view returns (bool, uint256);\\n\\n    function update(uint32 chainID, uint256 epochNumber) external;\\n\\n    function getBlsPubKeys(address operator) external view returns (uint256[2][] memory);\\n\\n    function getOperatorVotingPower(address opAddr, uint32 chainID) external view returns (uint96);\\n\\n    function getBlsPubKeyVotingPowers(address opAddr, uint32 chainID) external view returns (uint96[] memory);\\n\\n    function getTokenListForOperator(address operator) external view returns (address[] memory);\\n\\n    // Event fired on initialization of a new committee\\n    event InitCommittee(\\n        uint256 indexed chainID,\\n        uint8 indexed quorumNumber,\\n        uint256 genesisBlock,\\n        uint256 duration,\\n        uint256 freezeDuration,\\n        uint96 minWeight,\\n        uint96 maxWeight\\n    );\\n    // Event fired on updating a committee params\\n    event UpdateCommitteeParams(\\n        uint256 indexed chainID,\\n        uint8 indexed quorumNumber,\\n        int256 l1Bias,\\n        uint256 genesisBlock,\\n        uint256 duration,\\n        uint256 freezeDuration,\\n        uint96 minWeight,\\n        uint96 maxWeight\\n    );\\n\\n    // Fired on successful rotation of committee\\n    event UpdateCommittee(uint256 indexed chainID, uint256 indexed epochNumber, bytes32 current);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILagrangeService.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\nimport {ISignatureUtils} from \\\"eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\\\";\\n\\ninterface ILagrangeService {\\n    function addOperatorsToWhitelist(address[] calldata operators) external;\\n\\n    function removeOperatorsFromWhitelist(address[] calldata operators) external;\\n\\n    function register(\\n        address signAddress,\\n        uint256[2][] memory blsPubKeys,\\n        ISignatureUtils.SignatureWithSaltAndExpiry memory operatorSignature\\n    ) external;\\n\\n    function addBlsPubKeys(uint256[2][] memory additionalBlsPubKeys) external;\\n\\n    function subscribe(uint32 chainID) external;\\n\\n    function unsubscribe(uint32 chainID) external;\\n\\n    function deregister() external;\\n\\n    function owner() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoteWeigher.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.12;\\n\\ninterface IVoteWeigher {\\n    struct TokenMultiplier {\\n        address token;\\n        uint96 multiplier;\\n    }\\n\\n    function addQuorumMultiplier(uint8 quorumNumber, TokenMultiplier[] memory multipliers) external;\\n\\n    function removeQuorumMultiplier(uint8 quorumNumber) external;\\n\\n    function updateQuorumMultiplier(uint8 quorumNumber, uint256 index, TokenMultiplier memory multiplier) external;\\n\\n    function weightOfOperator(uint8 quorumNumber, address operator) external view returns (uint96);\\n\\n    function getTokenList() external view returns (address[] memory);\\n\\n    function getTokenListForQuorumNumbers(uint8[] memory quorumNumbers_) external view returns (address[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity >=0.5.0;\\n\\n/**\\n * @title The interface for common signature utilities.\\n * @author Layr Labs, Inc.\\n * @notice Terms of Service: https://docs.eigenlayer.xyz/overview/terms-of-service\\n */\\ninterface ISignatureUtils {\\n    // @notice Struct that bundles together a signature and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n\\n    // @notice Struct that bundles together a signature, a salt for uniqueness, and an expiration time for the signature. Used primarily for stack management.\\n    struct SignatureWithSaltAndExpiry {\\n        // the signature itself, formatted as a single bytes object\\n        bytes signature;\\n        // the salt used to generate the signature\\n        bytes32 salt;\\n        // the expiration timestamp (UTC) of the signature\\n        uint256 expiry;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin-upgrades/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\r\n      \"eigenlayer-middleware/=lib/eigenlayer-middleware/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"solidity-rlp/=node_modules/solidity-rlp/\",\r\n      \"src/=lib/eigenlayer-middleware/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ILagrangeService\",\"name\":\"_service\",\"type\":\"address\"},{\"internalType\":\"contract IVoteWeigher\",\"name\":\"_voteWeigher\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"genesisBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minWeight\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"maxWeight\",\"type\":\"uint96\"}],\"name\":\"InitCommittee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"current\",\"type\":\"bytes32\"}],\"name\":\"UpdateCommittee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"chainID\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"l1Bias\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"genesisBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minWeight\",\"type\":\"uint96\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"maxWeight\",\"type\":\"uint96\"}],\"name\":\"UpdateCommitteeParams\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INNER_NODE_PREFIX\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LEAF_NODE_PREFIX\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256[2][]\",\"name\":\"additionalBlsPubKeys\",\"type\":\"uint256[2][]\"}],\"name\":\"addBlsPubKeys\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"signAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[2][]\",\"name\":\"blsPubKeys\",\"type\":\"uint256[2][]\"}],\"name\":\"addOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainIDs\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committeeAddrs\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"committeeParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"l1Bias\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"genesisBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"minWeight\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"maxWeight\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"committees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint224\",\"name\":\"updatedBlock\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"leafCount\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opAddr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"}],\"name\":\"getBlsPubKeyVotingPowers\",\"outputs\":[{\"internalType\":\"uint96[]\",\"name\":\"individualVotingPowers\",\"type\":\"uint96[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getBlsPubKeys\",\"outputs\":[{\"internalType\":\"uint256[2][]\",\"name\":\"\",\"type\":\"uint256[2][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getCommittee\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint224\",\"name\":\"updatedBlock\",\"type\":\"uint224\"},{\"internalType\":\"uint32\",\"name\":\"leafCount\",\"type\":\"uint32\"}],\"internalType\":\"struct ILagrangeCommittee.CommitteeData\",\"name\":\"currentCommittee\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"getEpochNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"opAddr\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"}],\"name\":\"getOperatorVotingPower\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getTokenListForOperator\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"}],\"name\":\"isLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isUnregisterable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"isUpdatable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"operatorsStatus\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"signAddress\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"subscribedChainCount\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"genesisBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"minWeight\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"maxWeight\",\"type\":\"uint96\"}],\"name\":\"registerChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"service\",\"outputs\":[{\"internalType\":\"contract ILagrangeService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"}],\"name\":\"subscribeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"subscribedChains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"}],\"name\":\"unsubscribeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"epochNumber\",\"type\":\"uint256\"}],\"name\":\"update\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"chainID\",\"type\":\"uint32\"},{\"internalType\":\"int256\",\"name\":\"l1Bias\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"genesisBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"epochPeriod\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"freezeDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"minWeight\",\"type\":\"uint96\"},{\"internalType\":\"uint96\",\"name\":\"maxWeight\",\"type\":\"uint96\"}],\"name\":\"updateChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"updatedEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteWeigher\",\"outputs\":[{\"internalType\":\"contract IVoteWeigher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "LagrangeCommittee", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000035f4f28a8d3ff20eed10e087e8f96ea2641e6aa2000000000000000000000000e1e25a74eb983e668f2abc93407a102010b48fd9", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}