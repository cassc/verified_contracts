{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ncontract BlokAISeedDistro {\r\n    address public owner;\r\n    BlokAIToken public blokAISeedBloks;\r\n    uint256 public saleStartTimestamp;\r\n    uint256 public saleEndTimestamp;\r\n    uint256 public constant maxSeedBloksForSale = 75000000 * 10**18; // 75 million blokAI Seed BLOKS\r\n    uint256 public tokensSold;\r\n    uint256 public tokenPrice = 500000; // 500000 wei per 0.01 ETH\r\n    bool private locked;\r\n    mapping(address => uint256) public tokensBoughtByAddress;\r\n   \r\n    event TokensPurchased(address indexed buyer, uint256 amountSpent, uint256 tokensReceived);\r\n    event SaleCancelled();\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n    event TokensWithdrawn(address indexed recipient, uint256 amount);\r\n    event SeedBloksPriceChanged(uint256 newPrice);\r\n    event SaleExtended(uint256 newEndTimestamp);\r\n    event TokensReturned(address indexed recipient, uint256 amount);\r\n   \r\n    constructor() {\r\n        owner = msg.sender;\r\n        blokAISeedBloks = new BlokAIToken();\r\n        saleStartTimestamp = block.timestamp;\r\n        saleEndTimestamp = block.timestamp + 14 days;\r\n        require(saleEndTimestamp > saleStartTimestamp, \"Sale end timestamp must be greater than sale start timestamp\");\r\n    }\r\n   \r\n    receive() external payable {\r\n        getSeedBloks();\r\n    }\r\n   \r\n    modifier nonReentrant() {\r\n        require(!locked, \"No re-entrancy allowed\");\r\n        locked = true;\r\n        _;\r\n        locked = false;\r\n    }\r\n   \r\n    /**\r\n     * @dev Allows users to purchase blokAI BLOKS Seed Tokens by sending ETH.\r\n     * The function calculates the amount of tokens based on the ETH value sent and transfers the tokens to the buyer.\r\n     * The ETH is transferred to the contract owner.\r\n     */\r\n    function getSeedBloks() public payable nonReentrant {\r\n        require(block.timestamp >= saleStartTimestamp && block.timestamp <= saleEndTimestamp, \"Token sale is not active\");\r\n        require(msg.value >= 0.01 ether, \"Minimum purchase amount is 0.01 ETH\");\r\n        uint256 tokenAmount = calculateSeedBloksAmount(msg.value);\r\n        require(tokenAmount > 0, \"Token amount must be greater than zero\");\r\n        require(tokensSold + tokenAmount <= maxSeedBloksForSale, \"Purchase would exceed the maximum tokens for sale\");\r\n        require(blokAISeedBloks.balanceOf(address(this)) >= tokenAmount, \"Insufficient tokens in the contract\");\r\n       \r\n        tokensSold += tokenAmount;\r\n        tokensBoughtByAddress[msg.sender] += tokenAmount;\r\n       \r\n        payable(owner).transfer(msg.value);\r\n        blokAISeedBloks.transfer(msg.sender, tokenAmount);\r\n       \r\n        emit TokensPurchased(msg.sender, msg.value, tokenAmount);\r\n    }\r\n   \r\n    /**\r\n     * @dev Calculates the amount of blokAI BLOKS Seed Tokens based on the ETH value.\r\n     * @param amountETH The amount of ETH sent.\r\n     * @return The amount of blokAI BLOKS Seed Tokens.\r\n     */\r\n    function calculateSeedBloksAmount(uint256 amountETH) public view returns (uint256) {\r\n        return amountETH * tokenPrice;\r\n    }\r\n   \r\n    /**\r\n     * @dev Returns the remaining amount of blokAI BLOKS Seed Tokens available for sale.\r\n     * @return The remaining amount of blokAI BLOKS Seed Tokens.\r\n     */\r\n    function getSeedBloksRemaining() public view returns (uint256) {\r\n        return maxSeedBloksForSale - tokensSold;\r\n    }\r\n   \r\n    /**\r\n     * @dev Allows the contract owner to set a new price for the blokAI BLOKS Seed Tokens.\r\n     * @param newPrice The new price for the blokAI BLOKS Seed Tokens.\r\n     */\r\n    function setSeedBloksPrice(uint256 newPrice) public {\r\n        require(msg.sender == owner, \"Only the contract owner can perform this action\");\r\n        tokenPrice = newPrice;\r\n        emit SeedBloksPriceChanged(newPrice);\r\n    }\r\n   \r\n    /**\r\n     * @dev Returns the remaining time of the token sale.\r\n     * @return The remaining time in seconds.\r\n     */\r\n    function getTimeRemaining() public view returns (uint256) {\r\n        if (block.timestamp >= saleEndTimestamp) {\r\n            return 0;\r\n        } else {\r\n            return saleEndTimestamp - block.timestamp;\r\n        }\r\n    }\r\n   \r\n    /**\r\n     * @dev Allows the contract owner to cancel the token sale.\r\n     * The sale end timestamp is set to the current timestamp.\r\n     */\r\n    function cancelSale() public {\r\n        require(msg.sender == owner, \"Only the contract owner can perform this action\");\r\n        require(block.timestamp < saleEndTimestamp, \"Sale has already ended\");\r\n        saleEndTimestamp = block.timestamp;\r\n        emit SaleCancelled();\r\n    }\r\n   \r\n    /**\r\n     * @dev Allows the contract owner to transfer ownership to a new address.\r\n     * @param newOwner The address of the new owner.\r\n     */\r\n    function transferOwnership(address newOwner) public {\r\n        require(msg.sender == owner, \"Only the contract owner can perform this action\");\r\n        require(newOwner != address(0), \"New owner cannot be the zero address\");\r\n        address previousOwner = owner;\r\n        owner = newOwner;\r\n        emit OwnershipTransferred(previousOwner, newOwner);\r\n    }\r\n   \r\n    /**\r\n     * @dev Allows the contract owner to withdraw a specified amount of tokens to a recipient address.\r\n     * @param recipient The address to receive the tokens.\r\n     * @param amount The amount of tokens to withdraw.\r\n     */\r\n    function withdrawTokens(address recipient, uint256 amount) public {\r\n        require(msg.sender == owner, \"Only the contract owner can perform this action\");\r\n        require(recipient != address(0), \"Recipient cannot be the zero address\");\r\n        require(amount > 0, \"Withdrawal amount must be greater than zero\");\r\n        require(blokAISeedBloks.balanceOf(address(this)) - tokensSold >= amount, \"Insufficient tokens in the contract\");\r\n        blokAISeedBloks.transfer(recipient, amount);\r\n        emit TokensWithdrawn(recipient, amount);\r\n    }\r\n   \r\n    /**\r\n     * @dev Allows the contract owner to extend the token sale by setting a new end timestamp.\r\n     * @param newEndTimestamp The new end timestamp for the token sale.\r\n     */\r\n    function extendSale(uint256 newEndTimestamp) public {\r\n        require(msg.sender == owner, \"Only the contract owner can perform this action\");\r\n        require(block.timestamp < saleEndTimestamp, \"Sale has already ended\");\r\n        require(newEndTimestamp > saleEndTimestamp, \"New end timestamp must be greater than the current end timestamp\");\r\n        saleEndTimestamp = newEndTimestamp;\r\n        emit SaleExtended(saleEndTimestamp);\r\n    }\r\n}\r\n\r\ncontract BlokAIToken {\r\n    string public constant name = \"blokAI Seed BLOKS\";\r\n    string public constant symbol = \"BLOKSEED\";\r\n    uint8 public constant decimals = 18;\r\n    uint256 public totalSupply = 75000000 * 10**18; // 75 million blokAI Seed Bloks\r\n    mapping(address => uint256) public balanceOf;\r\n    mapping(address => mapping(address => uint256)) public allowance;\r\n   \r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n   \r\n    constructor() {\r\n        balanceOf[msg.sender] = totalSupply;\r\n    }\r\n   \r\n    /**\r\n     * @dev Transfers a specified amount of tokens from the sender to a recipient address.\r\n     * @param recipient The address to receive the tokens.\r\n     * @param amount The amount of tokens to transfer.\r\n     * @return A boolean value indicating whether the transfer was successful.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public returns (bool) {\r\n        require(recipient != address(0), \"Invalid recipient address\");\r\n        require(amount <= balanceOf[msg.sender], \"Insufficient balance\");\r\n       \r\n        balanceOf[msg.sender] -= amount;\r\n        balanceOf[recipient] += amount;\r\n       \r\n        emit Transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n   \r\n    /**\r\n     * @dev Approves a specified address to spend a certain amount of tokens on behalf of the sender.\r\n     * @param spender The address to be approved.\r\n     * @param amount The amount of tokens to approve.\r\n     * @return A boolean value indicating whether the approval was successful.\r\n     */\r\n    function approve(address spender, uint256 amount) public returns (bool) {\r\n        allowance[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n   \r\n    /**\r\n     * @dev Transfers a specified amount of tokens from one address to another using the allowance mechanism.\r\n     * @param sender The address from which the tokens will be transferred.\r\n     * @param recipient The address to receive the tokens.\r\n     * @param amount The amount of tokens to transfer.\r\n     * @return A boolean value indicating whether the transfer was successful.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\r\n        require(recipient != address(0), \"Invalid recipient address\");\r\n        require(amount <= balanceOf[sender], \"Insufficient balance\");\r\n        require(amount <= allowance[sender][msg.sender], \"Insufficient allowance\");\r\n       \r\n        balanceOf[sender] -= amount;\r\n        balanceOf[recipient] += amount;\r\n        allowance[sender][msg.sender] -= amount;\r\n       \r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SaleCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"SaleExtended\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"SeedBloksPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensReceived\",\"type\":\"uint256\"}],\"name\":\"TokensPurchased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensReturned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blokAISeedBloks\",\"outputs\":[{\"internalType\":\"contract BlokAIToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountETH\",\"type\":\"uint256\"}],\"name\":\"calculateSeedBloksAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newEndTimestamp\",\"type\":\"uint256\"}],\"name\":\"extendSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSeedBloks\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSeedBloksRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTimeRemaining\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSeedBloksForSale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPrice\",\"type\":\"uint256\"}],\"name\":\"setSeedBloksPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokensBoughtByAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BlokAISeedDistro", "CompilerVersion": "v0.8.0+commit.c7dfd78e", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://672d57926196cda1dea95fc193695eaa0d7ea2e3b97707fa281c9f1576df51bb"}