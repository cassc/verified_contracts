{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/HypernativeModule.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ProtectedContract, ContractType} from \\\"./HypernativeModuleStructsAndEnums.sol\\\";\\n\\ninterface ISafe {\\n    function execTransactionFromModule(address to, uint256 value, bytes memory data, uint8 operation) external returns (bool success);\\n}\\n\\ncontract HypernativeModule is Ownable {\\n    address public updater;\\n    bytes constant public pauseSelector = abi.encodeWithSignature(\\\"pause()\\\");\\n    bytes constant public emergencyShutdownSelector = abi.encodeWithSignature(\\\"emergencyShutdown()\\\");\\n    \\n    mapping (ContractType => bytes) public contractTypeToPauseFunction;\\n    ProtectedContract[] public protectedContracts;\\n    ISafe public safe;\\n\\n    constructor(address multisig, address _updater, ProtectedContract[] memory _protectedContracts) {\\n        safe = ISafe(multisig);\\n        updater = _updater;\\n        contractTypeToPauseFunction[ContractType.JUNIOR_OR_SENIOR] = pauseSelector;\\n        contractTypeToPauseFunction[ContractType.TRANCH] = emergencyShutdownSelector;\\n        for (uint i = 0; i < _protectedContracts.length; ++i) {\\n            protectedContracts.push(_protectedContracts[i]);\\n        }\\n    }\\n\\n    modifier onlyUpdater() {\\n        require(msg.sender == updater, \\\"HypernativeModule: Only Updater\\\");\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrUpdater() {\\n        require(msg.sender == updater || msg.sender == owner(), \\\"HypernativeModule: Only Updater or Owner\\\");\\n        _;\\n    }\\n\\n    function pauseAllContracts() public onlyOwner {\\n        uint256 protectedContractLength = protectedContracts.length;\\n        for (uint i = 0; i < protectedContractLength;) {\\n            safe.execTransactionFromModule(protectedContracts[i].contractAddress, 0, contractTypeToPauseFunction[protectedContracts[i].contractType],0);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function pauseContractsByType(ContractType _contractType) public onlyOwner {\\n        uint256 protectedContractLength = protectedContracts.length;\\n        for (uint i = 0; i < protectedContractLength;) {\\n            if (protectedContracts[i].contractType == _contractType) {\\n                safe.execTransactionFromModule(protectedContracts[i].contractAddress, 0, contractTypeToPauseFunction[_contractType], 0);\\n            }\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function updateProtectedContracts(ProtectedContract[] memory _protectedContracts) public onlyUpdater {\\n        uint256 _protectedContractsLength = _protectedContracts.length;\\n        for (uint i = 0; i < _protectedContractsLength;) {\\n            protectedContracts.push(_protectedContracts[i]);\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n    }\\n    \\n    function replaceProtectedContracts(ProtectedContract[] memory _protectedContracts) public onlyUpdater {\\n        assembly {\\n            sstore(protectedContracts.slot, mload(_protectedContracts))\\n        }\\n        uint256 _protectedContractsLength = _protectedContracts.length;\\n        for (uint i = 0; i < _protectedContractsLength;) {\\n            protectedContracts[i] = _protectedContracts[i];\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function updateMultisigAddress(address newMultisig) public onlyOwner {\\n        safe = ISafe(newMultisig);\\n    }\\n\\n    function getProctectedContracts() public view returns (ProtectedContract[] memory) {\\n        return protectedContracts;\\n    }\\n\\n    function isContractProtected(address _address) public view returns (bool) {\\n        for (uint i = 0; i < protectedContracts.length; ++i) {\\n            if (protectedContracts[i].contractAddress == _address) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function changeUpdater(address _updater) public onlyOwnerOrUpdater {\\n        updater = _updater;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/HypernativeModuleStructsAndEnums.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nenum ContractType {\\n    JUNIOR_OR_SENIOR,\\n    TRANCH\\n}\\n\\nstruct ProtectedContract {\\n    address contractAddress;\\n    ContractType contractType;\\n}\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@safe/=lib/safe-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"safe-contracts/=lib/safe-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"multisig\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"internalType\":\"struct ProtectedContract[]\",\"name\":\"_protectedContracts\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_updater\",\"type\":\"address\"}],\"name\":\"changeUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"contractTypeToPauseFunction\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emergencyShutdownSelector\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProctectedContracts\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"internalType\":\"struct ProtectedContract[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isContractProtected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAllContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum ContractType\",\"name\":\"_contractType\",\"type\":\"uint8\"}],\"name\":\"pauseContractsByType\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSelector\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protectedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"internalType\":\"struct ProtectedContract[]\",\"name\":\"_protectedContracts\",\"type\":\"tuple[]\"}],\"name\":\"replaceProtectedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safe\",\"outputs\":[{\"internalType\":\"contract ISafe\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMultisig\",\"type\":\"address\"}],\"name\":\"updateMultisigAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"internalType\":\"enum ContractType\",\"name\":\"contractType\",\"type\":\"uint8\"}],\"internalType\":\"struct ProtectedContract[]\",\"name\":\"_protectedContracts\",\"type\":\"tuple[]\"}],\"name\":\"updateProtectedContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "HypernativeModule", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000baecba470c229984b75bc860efe8e97ae082bb9f000000000000000000000000e5dab8208c1f4cce15883348b72086dbace3e64b00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000003000000000000000000000000b2d5cb72a621493fe83c6885e4a776279be595bc000000000000000000000000000000000000000000000000000000000000000000000000000000000000000070320a388c6755fc826be0ef9f98bcb6bccc6fea000000000000000000000000000000000000000000000000000000000000000100000000000000000000000062a0369c6bb00054e589d12aad7ad81ed789514b0000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}