{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"convex-platform/contracts/contracts/Booster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\nimport \\\"./Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\\\";\\n\\n/**\\n * @title   Booster\\n * @author  ConvexFinance\\n * @notice  Main deposit contract; keeps track of pool info & user deposits; distributes rewards.\\n * @dev     They say all paths lead to Rome, and the cvxBooster is no different. This is where it all goes down.\\n *          It is responsible for tracking all the pools, it collects rewards from all pools and redirects it.\\n */\\ncontract Booster is ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    address public immutable crv;\\n\\n    mapping(address => bool) public validVotingContracts;\\n\\n    uint256 public lockIncentive = 825; //incentive to crv stakers\\n    uint256 public stakerIncentive = 825; //incentive to native token stakers\\n    uint256 public earmarkIncentive = 50; //incentive to users who spend gas to make calls\\n    uint256 public platformFee = 0; //possible fee to build treasury\\n    uint256 public constant MaxFees = 4000;\\n    uint256 public constant FEE_DENOMINATOR = 10000;\\n\\n    address public owner;\\n    address public feeManager;\\n    address public poolManager;\\n    address public immutable staker;\\n    address public immutable minter;\\n    address public rewardFactory;\\n    address public stashFactory;\\n    address public tokenFactory;\\n    address public rewardArbitrator;\\n    address public voteDelegate;\\n    address public voteManager;\\n    address public treasury;\\n    address public stakerRewards; //cvx rewards\\n    address public lockRewards; //cvxCrv rewards(crv)\\n    address public bridgeDelegate;\\n    mapping(uint256 => uint256) public l2FeesHistory;\\n    uint256 immutable epochLength = 1 weeks;\\n\\n    mapping(address => FeeDistro) public feeTokens;\\n    struct FeeDistro {\\n        address distro;\\n        address rewards;\\n        bool active;\\n    }\\n\\n    bool public isShutdown;\\n\\n    struct PoolInfo {\\n        address lptoken;\\n        address token;\\n        address gauge;\\n        address crvRewards;\\n        address stash;\\n        bool shutdown;\\n    }\\n\\n    //index(pid) -> pool\\n    PoolInfo[] public poolInfo;\\n    mapping(address => bool) public gaugeMap;\\n\\n    // Reward multiplier for increasing or decreasing AURA rewards per PID\\n    uint256 public constant REWARD_MULTIPLIER_DENOMINATOR = 10000;\\n    // rewardContract => rewardMultiplier (10000 = 100%)\\n    mapping(address => uint256) public getRewardMultipliers;\\n\\n    event Deposited(address indexed user, uint256 indexed poolid, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 indexed poolid, uint256 amount);\\n\\n    event PoolAdded(address lpToken, address gauge, address token, address rewardPool, address stash, uint256 pid);\\n    event PoolShutdown(uint256 poolId);\\n\\n    event OwnerUpdated(address newOwner);\\n    event FeeManagerUpdated(address newFeeManager);\\n    event PoolManagerUpdated(address newPoolManager);\\n    event FactoriesUpdated(address rewardFactory, address stashFactory, address tokenFactory);\\n    event ArbitratorUpdated(address newArbitrator);\\n    event VoteDelegateUpdated(address newVoteDelegate);\\n    event VoteManagerUpdated(address newVoteManager);\\n    event RewardContractsUpdated(address lockRewards, address stakerRewards);\\n    event FeesUpdated(uint256 lockIncentive, uint256 stakerIncentive, uint256 earmarkIncentive, uint256 platformFee);\\n    event TreasuryUpdated(address newTreasury);\\n    event FeeInfoUpdated(address feeDistro, address lockFees, address feeToken);\\n    event FeeInfoChanged(address feeDistro, bool active);\\n\\n    event UpdateVotingContract(address votingContract, bool active);\\n\\n    /**\\n     * @dev Constructor doing what constructors do. It is noteworthy that\\n     *      a lot of basic config is set to 0 - expecting subsequent calls to setFeeInfo etc.\\n     * @param _staker                 VoterProxy (locks the crv and adds to all gauges)\\n     * @param _minter                 CVX token, or the thing that mints it\\n     * @param _crv                    CRV\\n     */\\n    constructor(\\n        address _staker,\\n        address _minter,\\n        address _crv\\n    ) public {\\n        staker = _staker;\\n        minter = _minter;\\n        crv = _crv;\\n        isShutdown = false;\\n\\n        owner = msg.sender;\\n        voteDelegate = msg.sender;\\n        feeManager = msg.sender;\\n        poolManager = msg.sender;\\n        voteManager = msg.sender;\\n        treasury = address(0);\\n\\n        emit OwnerUpdated(msg.sender);\\n        emit VoteDelegateUpdated(msg.sender);\\n        emit FeeManagerUpdated(msg.sender);\\n        emit PoolManagerUpdated(msg.sender);\\n    }\\n\\n\\n    /// SETTER SECTION ///\\n\\n    /**\\n     * @notice Owner is responsible for setting initial config, updating vote delegate and shutting system\\n     */\\n    function setOwner(address _owner) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        owner = _owner;\\n\\n        emit OwnerUpdated(_owner);\\n    }\\n\\n    /**\\n     * @notice Fee Manager can update the fees (lockIncentive, stakeIncentive, earmarkIncentive, platformFee)\\n     */\\n    function setFeeManager(address _feeM) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        feeManager = _feeM;\\n\\n        emit FeeManagerUpdated(_feeM);\\n    }\\n\\n    /**\\n     * @notice Pool manager is responsible for adding new pools\\n     */\\n    function setPoolManager(address _poolM) external {\\n        require(msg.sender == poolManager, \\\"!auth\\\");\\n        poolManager = _poolM;\\n\\n        emit PoolManagerUpdated(_poolM);\\n    }\\n\\n    /**\\n     * @notice Factories are used when deploying new pools. Only the stash factory is mutable after init\\n     */\\n    function setFactories(address _rfactory, address _sfactory, address _tfactory) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n\\n        //stash factory should be considered more safe to change\\n        //updating may be required to handle new types of gauges\\n        stashFactory = _sfactory;\\n\\n        //reward factory only allow this to be called once even if owner\\n        //removes ability to inject malicious staking contracts\\n        //token factory can also be immutable\\n        if(rewardFactory == address(0)){\\n            rewardFactory = _rfactory;\\n            tokenFactory = _tfactory;\\n\\n            emit FactoriesUpdated(_rfactory, _sfactory, _tfactory);\\n        } else {\\n            emit FactoriesUpdated(address(0), _sfactory, address(0));\\n        }\\n    }\\n\\n    /**\\n     * @notice Arbitrator handles tokens that are used as secondary rewards across multiple pools\\n     */\\n    function setArbitrator(address _arb) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n        rewardArbitrator = _arb;\\n\\n        emit ArbitratorUpdated(_arb);\\n    }\\n\\n    /**\\n     * @notice Vote Delegate has the rights to cast votes on the VoterProxy via the Booster\\n     */\\n    function setVoteDelegate(address _voteDelegate) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n        voteDelegate = _voteDelegate;\\n\\n        emit VoteDelegateUpdated(_voteDelegate);\\n    }\\n\\n    /**\\n     * @notice Vote Manager has the rights to add new voting contracts\\n     */\\n    function setVoteManager(address _voteManager) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n        voteManager = _voteManager;\\n\\n        emit VoteManagerUpdated(_voteManager);\\n    }\\n\\n    /**\\n     * @notice Only called once, to set the addresses of cvxCrv (lockRewards) and cvx staking (stakerRewards)\\n     */\\n    function setRewardContracts(address _rewards, address _stakerRewards) external {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        \\n        //reward contracts are immutable or else the owner\\n        //has a means to redeploy and mint cvx via rewardClaimed()\\n        if(lockRewards == address(0)){\\n            lockRewards = _rewards;\\n            stakerRewards = _stakerRewards;\\n            getRewardMultipliers[lockRewards] = REWARD_MULTIPLIER_DENOMINATOR;\\n            emit RewardContractsUpdated(_rewards, _stakerRewards);\\n        }\\n    }\\n\\n    /**\\n     * @notice Set reward token and claim contract\\n     * @dev    This creates a secondary (VirtualRewardsPool) rewards contract for the vcxCrv staking contract\\n     */\\n    function setFeeInfo(address _feeToken, address _feeDistro) external nonReentrant {\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        require(!isShutdown, \\\"shutdown\\\");\\n        require(lockRewards != address(0) && rewardFactory != address(0), \\\"!initialised\\\");\\n\\n        require(_feeToken != address(0) && _feeDistro != address(0), \\\"!addresses\\\");\\n        require(IFeeDistributor(_feeDistro).getTokenTimeCursor(_feeToken) > 0, \\\"!distro\\\");\\n\\n        if(feeTokens[_feeToken].distro == address(0)){\\n            require(!gaugeMap[_feeToken], \\\"!token\\\");\\n\\n            // Distributed directly\\n            if(_feeToken == crv){\\n                feeTokens[crv] = FeeDistro({\\n                    distro: _feeDistro,\\n                    rewards: lockRewards,\\n                    active: true\\n                });\\n                emit FeeInfoUpdated(_feeDistro, lockRewards, crv);\\n            } else {\\n                //create a new reward contract for the new token\\n                require(IRewards(lockRewards).extraRewardsLength() < 10, \\\"too many rewards\\\");\\n                address rewards = IRewardFactory(rewardFactory).CreateTokenRewards(_feeToken, lockRewards, address(this));\\n                feeTokens[_feeToken] = FeeDistro({\\n                    distro: _feeDistro,\\n                    rewards: rewards,\\n                    active: true\\n                });\\n                emit FeeInfoUpdated(_feeDistro, rewards, _feeToken);\\n            }\\n        } else {\\n            feeTokens[_feeToken].distro = _feeDistro;\\n            emit FeeInfoUpdated(_feeDistro, address(0), _feeToken);\\n        }\\n    }\\n\\n    /**\\n     * @notice Allows turning off or on for fee distro\\n     */\\n    function updateFeeInfo(address _feeToken, bool _active) external {\\n        require(msg.sender==owner, \\\"!auth\\\");\\n\\n        require(feeTokens[_feeToken].distro != address(0), \\\"Fee doesn't exist\\\");\\n\\n        feeTokens[_feeToken].active = _active;\\n\\n        emit FeeInfoChanged(_feeToken, _active);\\n    }\\n\\n    /**\\n     * @notice Fee manager can set all the relevant fees\\n     * @param _lockFees     % for cvxCrv stakers where 1% == 100\\n     * @param _stakerFees   % for CVX stakers where 1% == 100\\n     * @param _callerFees   % for whoever calls the claim where 1% == 100\\n     * @param _platform     % for \\\"treasury\\\" or WETH-LIQ or liqLIT-LIT staking where 1% == 100\\n     */\\n    function setFees(uint256 _lockFees, uint256 _stakerFees, uint256 _callerFees, uint256 _platform) external nonReentrant{\\n        require(msg.sender==feeManager, \\\"!auth\\\");\\n\\n        uint256 total = _lockFees.add(_stakerFees).add(_callerFees).add(_platform);\\n        require(total <= MaxFees, \\\">MaxFees\\\");\\n\\n        require(_lockFees >= 300 && _lockFees <= 3500, \\\"!lockFees\\\");\\n        require(_stakerFees >= 300 && _stakerFees <= 1500, \\\"!stakerFees\\\");\\n        require(_callerFees >= 10 && _callerFees <= 100, \\\"!callerFees\\\");\\n        require(_platform <= 1000, \\\"!platform\\\");\\n\\n        lockIncentive = _lockFees;\\n        stakerIncentive = _stakerFees;\\n        earmarkIncentive = _callerFees;\\n        platformFee = _platform;\\n\\n        emit FeesUpdated(_lockFees, _stakerFees, _callerFees, _platform);\\n    }\\n\\n    /**\\n     * @notice Set the address of the treasury (i.e. vlCVX)\\n     */\\n    function setTreasury(address _treasury) external {\\n        require(msg.sender==feeManager, \\\"!auth\\\");\\n        treasury = _treasury;\\n\\n        emit TreasuryUpdated(_treasury);\\n    }\\n\\n    \\n    /**\\n     * @dev Set bridge delegate\\n     * @param _bridgeDelegate The bridge delegate address\\n     */\\n    function setBridgeDelegate(address _bridgeDelegate) external {\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\n        bridgeDelegate = _bridgeDelegate;\\n    }\\n\\n    function setRewardMultiplier(address rewardContract, uint256 multiplier) external {\\n        require(msg.sender == feeManager, \\\"!auth\\\");\\n        require(multiplier <= REWARD_MULTIPLIER_DENOMINATOR * 2, \\\"too high\\\");\\n        getRewardMultipliers[rewardContract] = multiplier;\\n    }\\n\\n    /// END SETTER SECTION ///\\n\\n\\n    function poolLength() external view returns (uint256) {\\n        return poolInfo.length;\\n    }\\n\\n    /**\\n     * @notice Called by the PoolManager (i.e. PoolManagerProxy) to add a new pool - creates all the required\\n     *         contracts (DepositToken, RewardPool, Stash) and then adds to the list!\\n     */\\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool){\\n        require(msg.sender==poolManager && !isShutdown, \\\"!add\\\");\\n        require(_gauge != address(0) && _lptoken != address(0),\\\"!param\\\");\\n        require(feeTokens[_gauge].distro == address(0), \\\"!gauge\\\");\\n\\n        //the next pool's pid\\n        uint256 pid = poolInfo.length;\\n\\n        //create a tokenized deposit\\n        address token = ITokenFactory(tokenFactory).CreateDepositToken(_lptoken);\\n        //create a reward contract for crv rewards\\n        address newRewardPool = IRewardFactory(rewardFactory).CreateCrvRewards(pid,token,_lptoken);\\n        //create a stash to handle extra incentives\\n        address stash = IStashFactory(stashFactory).CreateStash(pid,_gauge,staker,_stashVersion);\\n\\n        //add the new pool\\n        poolInfo.push(\\n            PoolInfo({\\n                lptoken: _lptoken,\\n                token: token,\\n                gauge: _gauge,\\n                crvRewards: newRewardPool,\\n                stash: stash,\\n                shutdown: false\\n            })\\n        );\\n        gaugeMap[_gauge] = true;\\n        //give stashes access to rewardfactory and voteproxy\\n        //   voteproxy so it can grab the incentive tokens off the contract after claiming rewards\\n        //   reward factory so that stashes can make new extra reward contracts if a new incentive is added to the gauge\\n        if(stash != address(0)){\\n            poolInfo[pid].stash = stash;\\n            IStaker(staker).setStashAccess(stash,true);\\n            IRewardFactory(rewardFactory).setAccess(stash,true);\\n        }\\n\\n        // Init the pool with the default reward multiplier\\n        getRewardMultipliers[newRewardPool] = REWARD_MULTIPLIER_DENOMINATOR;\\n\\n        emit PoolAdded(_lptoken, _gauge, token, newRewardPool, stash, pid);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Shuts down the pool by withdrawing everything from the gauge to here (can later be\\n     *         claimed from depositors by using the withdraw fn) and marking it as shut down\\n     */\\n    function shutdownPool(uint256 _pid) external nonReentrant returns(bool){\\n        require(msg.sender==poolManager, \\\"!auth\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n\\n        //withdraw from gauge\\n        try IStaker(staker).withdrawAll(pool.lptoken,pool.gauge){\\n        }catch{}\\n\\n        pool.shutdown = true;\\n        gaugeMap[pool.gauge] = false;\\n\\n        emit PoolShutdown(_pid);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Shuts down the WHOLE SYSTEM by withdrawing all the LP tokens to here and then allowing\\n     *         for subsequent withdrawal by any depositors.\\n     */\\n    function shutdownSystem() external{\\n        require(msg.sender == owner, \\\"!auth\\\");\\n        isShutdown = true;\\n\\n        for(uint i=0; i < poolInfo.length; i++){\\n            PoolInfo storage pool = poolInfo[i];\\n            if (pool.shutdown) continue;\\n\\n            address token = pool.lptoken;\\n            address gauge = pool.gauge;\\n\\n            //withdraw from gauge\\n            try IStaker(staker).withdrawAll(token,gauge){\\n                pool.shutdown = true;\\n            }catch{}\\n        }\\n    }\\n\\n    /**\\n     * @notice  Deposits an \\\"_amount\\\" to a given gauge (specified by _pid), mints a `DepositToken`\\n     *          and subsequently stakes that on Convex BaseRewardPool\\n     */\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) public nonReentrant returns(bool){\\n        require(!isShutdown,\\\"shutdown\\\");\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(pool.shutdown == false, \\\"pool is closed\\\");\\n\\n        //send to proxy to stake\\n        address lptoken = pool.lptoken;\\n        IERC20(lptoken).safeTransferFrom(msg.sender, staker, _amount);\\n\\n        //stake\\n        address gauge = pool.gauge;\\n        require(gauge != address(0),\\\"!gauge setting\\\");\\n        IStaker(staker).deposit(lptoken,gauge);\\n\\n        //some gauges claim rewards when depositing, stash them in a seperate contract until next claim\\n        address stash = pool.stash;\\n        if(stash != address(0)){\\n            IStash(stash).stashRewards();\\n        }\\n\\n        address token = pool.token;\\n        if(_stake){\\n            //mint here and send to rewards on user behalf\\n            ITokenMinter(token).mint(address(this),_amount);\\n            address rewardContract = pool.crvRewards;\\n            IERC20(token).safeApprove(rewardContract,0);\\n            IERC20(token).safeApprove(rewardContract,_amount);\\n            IRewards(rewardContract).stakeFor(msg.sender,_amount);\\n        }else{\\n            //add user balance directly\\n            ITokenMinter(token).mint(msg.sender,_amount);\\n        }\\n\\n        \\n        emit Deposited(msg.sender, _pid, _amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice  Deposits all a senders balance to a given gauge (specified by _pid), mints a `DepositToken`\\n     *          and subsequently stakes that on Convex BaseRewardPool\\n     */\\n    function depositAll(uint256 _pid, bool _stake) external returns(bool){\\n        address lptoken = poolInfo[_pid].lptoken;\\n        uint256 balance = IERC20(lptoken).balanceOf(msg.sender);\\n        deposit(_pid,balance,_stake);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice  Withdraws LP tokens from a given PID (& user).\\n     *          1. Burn the cvxLP balance from \\\"_from\\\" (implicit balance check)\\n     *          2. If pool !shutdown.. withdraw from gauge\\n     *          3. If stash, stash rewards\\n     *          4. Transfer out the LP tokens\\n     */\\n    function _withdraw(uint256 _pid, uint256 _amount, address _from, address _to) internal nonReentrant {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        address lptoken = pool.lptoken;\\n        address gauge = pool.gauge;\\n\\n        //remove lp balance\\n        address token = pool.token;\\n        ITokenMinter(token).burn(_from,_amount);\\n\\n        //pull from gauge if not shutdown\\n        // if shutdown tokens will be in this contract\\n        if (!pool.shutdown) {\\n            IStaker(staker).withdraw(lptoken,gauge, _amount);\\n        }\\n\\n        //some gauges claim rewards when withdrawing, stash them in a separate contract until next claim\\n        //do not call if shutdown since stashes wont have access\\n        address stash = pool.stash;\\n        if(stash != address(0) && !isShutdown && !pool.shutdown){\\n            IStash(stash).stashRewards();\\n        }\\n        \\n        //return lp tokens\\n        IERC20(lptoken).safeTransfer(_to, _amount);\\n\\n        emit Withdrawn(_to, _pid, _amount);\\n    }\\n\\n    /**\\n     * @notice  Withdraw a given amount from a pool (must already been unstaked from the Convex Reward Pool -\\n     *          BaseRewardPool uses withdrawAndUnwrap to get around this)\\n     */\\n    function withdraw(uint256 _pid, uint256 _amount) public returns(bool){\\n        _withdraw(_pid,_amount,msg.sender,msg.sender);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice  Withdraw all the senders LP tokens from a given gauge\\n     */\\n    function withdrawAll(uint256 _pid) public returns(bool){\\n        address token = poolInfo[_pid].token;\\n        uint256 userBal = IERC20(token).balanceOf(msg.sender);\\n        withdraw(_pid, userBal);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Allows the actual BaseRewardPool to withdraw and send directly to the user\\n     */\\n    function withdrawTo(uint256 _pid, uint256 _amount, address _to) external returns(bool){\\n        address rewardContract = poolInfo[_pid].crvRewards;\\n        require(msg.sender == rewardContract,\\\"!auth\\\");\\n\\n        _withdraw(_pid,_amount,msg.sender,_to);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice set valid vote hash on VoterProxy \\n     */\\n    function setVote(bytes32 _hash) external returns(bool){\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\n        \\n        IStaker(staker).setVote(_hash, false);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Set delegate on snapshot\\n     */\\n    function setDelegate(address _delegateContract, address _delegate, bytes32 _space) external{\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\\"setDelegate(bytes32,address)\\\")), _space, _delegate);\\n        IStaker(staker).execute(_delegateContract,uint256(0),data);\\n    }\\n\\n    /**\\n     * @notice Delegate address votes on dao via VoterProxy\\n     */\\n    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool){\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\n        require(validVotingContracts[_votingAddress], \\\"!voteAddr\\\");\\n        \\n        IStaker(staker).vote(_voteId,_votingAddress,_support);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Delegate address votes on gauge weight via VoterProxy\\n     */\\n    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns(bool){\\n        require(msg.sender == voteDelegate, \\\"!auth\\\");\\n\\n        for(uint256 i = 0; i < _gauge.length; i++){\\n            IStaker(staker).voteGaugeWeight(_gauge[i],_weight[i]);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Enables or disables a Timeless on-chain DAO voting contract\\n     */\\n    function updateVotingContract(address _votingContract, bool _active) external {\\n        require(msg.sender == voteManager, \\\"!auth\\\");\\n\\t\\tvalidVotingContracts[_votingContract] = _active;\\n\\t\\temit UpdateVotingContract(_votingContract, _active);\\n\\t}\\n\\n    /**\\n     * @notice Allows a stash to claim secondary rewards from a gauge\\n     */\\n    function claimRewards(uint256 _pid, address _gauge) external returns(bool){\\n        address stash = poolInfo[_pid].stash;\\n        require(msg.sender == stash,\\\"!auth\\\");\\n\\n        IStaker(staker).claimRewards(_gauge);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Tells the Curve gauge to redirect any accrued rewards to the given stash via the VoterProxy\\n     */\\n    function setGaugeRedirect(uint256 _pid) external returns(bool){\\n        address stash = poolInfo[_pid].stash;\\n        require(msg.sender == stash,\\\"!auth\\\");\\n        address gauge = poolInfo[_pid].gauge;\\n        bytes memory data = abi.encodeWithSelector(bytes4(keccak256(\\\"set_rewards_receiver(address)\\\")), stash);\\n        IStaker(staker).execute(gauge,uint256(0),data);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Basically a hugely pivotal function.\\n     *         Responsible for collecting the crv from gauge, and then redistributing to the correct place.\\n     *         Pays the caller a fee to process this.\\n     */\\n    function _earmarkRewards(uint256 _pid) internal {\\n        PoolInfo storage pool = poolInfo[_pid];\\n        require(pool.shutdown == false, \\\"pool is closed\\\");\\n\\n        address gauge = pool.gauge;\\n\\n        // If there is idle CRV in the Booster we need to transfer it out\\n        // in order that our accounting doesn't get screwed.\\n        uint256 crvBBalBefore = IERC20(crv).balanceOf(address(this));\\n        uint256 crvVBalBefore = IERC20(crv).balanceOf(staker);\\n        uint256 crvBalBefore = crvBBalBefore.add(crvVBalBefore);\\n\\n        //claim crv\\n        IStaker(staker).claimCrv(gauge);\\n\\n        //crv balance\\n        uint256 crvBalAfter = IERC20(crv).balanceOf(address(this));\\n        uint crvBal = crvBalAfter.sub(crvBalBefore);\\n\\n        if(crvBalBefore > 0 && treasury != address(0)) {\\n            IERC20(crv).transfer(treasury, crvBalBefore);\\n        }\\n\\n        //check if there are extra rewards\\n        address stash = pool.stash;\\n        if(stash != address(0)){\\n            //claim extra rewards\\n            IStash(stash).claimRewards();\\n            //process extra rewards\\n            IStash(stash).processStash();\\n        }\\n\\n        if (crvBal > 0) {\\n            // LockIncentive = cvxCrv stakers (currently 10%)\\n            uint256 _lockIncentive = crvBal.mul(lockIncentive).div(FEE_DENOMINATOR);\\n            // StakerIncentive = cvx stakers (currently 5%)\\n            uint256 _stakerIncentive = crvBal.mul(stakerIncentive).div(FEE_DENOMINATOR);\\n            // CallIncentive = caller of this contract (currently 1%)\\n            uint256 _callIncentive = crvBal.mul(earmarkIncentive).div(FEE_DENOMINATOR);\\n            \\n            // Treasury = WETH-LIQ or liqLIT-LIT staking\\n            if(treasury != address(0) && treasury != address(this) && platformFee > 0){\\n                //only subtract after address condition check\\n                uint256 _platform = crvBal.mul(platformFee).div(FEE_DENOMINATOR);\\n                crvBal = crvBal.sub(_platform);\\n                IERC20(crv).safeTransfer(treasury, _platform);\\n            }\\n\\n            //remove incentives from balance\\n            crvBal = crvBal.sub(_lockIncentive).sub(_callIncentive).sub(_stakerIncentive);\\n\\n            //send incentives for calling\\n            IERC20(crv).safeTransfer(msg.sender, _callIncentive);          \\n\\n            //send crv to lp provider reward contract\\n            address rewardContract = pool.crvRewards;\\n            IERC20(crv).safeTransfer(rewardContract, crvBal);\\n            IRewards(rewardContract).queueNewRewards(crvBal);\\n\\n            //send lockers' share of crv to reward contract\\n            IERC20(crv).safeTransfer(lockRewards, _lockIncentive);\\n            IRewards(lockRewards).queueNewRewards(_lockIncentive);\\n\\n            //send stakers's share of crv to reward contract\\n            IERC20(crv).safeTransfer(stakerRewards, _stakerIncentive);\\n            ILocker(stakerRewards).queueNewRewards(crv, _stakerIncentive);\\n        }\\n    }\\n\\n    /**\\n     * @notice Basically a hugely pivotal function.\\n     *         Responsible for collecting the crv from gauge, and then redistributing to the correct place.\\n     *         Pays the caller a fee to process this.\\n     */\\n    function earmarkRewards(uint256 _pid) external nonReentrant returns(bool){\\n        require(!isShutdown,\\\"shutdown\\\");\\n        _earmarkRewards(_pid);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Claim fees from curve distro contract, put in lockers' reward contract.\\n     *         lockFees is the secondary reward contract that uses the virtual balances from cvxCrv\\n     */\\n    function earmarkFees(address _feeToken) external nonReentrant returns(bool){\\n        require(!isShutdown,\\\"shutdown\\\");\\n        FeeDistro memory feeDistro = feeTokens[_feeToken];\\n        \\n        require(feeDistro.active, \\\"Inactive distro\\\");\\n        require(!gaugeMap[_feeToken], \\\"Invalid token\\\");\\n\\n        //claim fee rewards\\n        uint256 tokenBalanceVBefore = IERC20(_feeToken).balanceOf(staker);\\n        uint256 tokenBalanceBBefore = IERC20(_feeToken).balanceOf(address(this));\\n        uint256 tokenBalanceBefore = tokenBalanceBBefore.add(tokenBalanceVBefore);\\n        IStaker(staker).claimFees(feeDistro.distro, _feeToken);\\n        uint256 tokenBalanceAfter = IERC20(_feeToken).balanceOf(address(this));\\n        uint256 feesClaimed = tokenBalanceAfter.sub(tokenBalanceBefore);\\n\\n        //send fee rewards to reward contract\\n        IERC20(_feeToken).safeTransfer(feeDistro.rewards, feesClaimed);\\n        IRewards(feeDistro.rewards).queueNewRewards(feesClaimed);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Callback from reward contract when crv is received.\\n     * @dev    Goes off and mints a relative amount of `CVX` based on the distribution schedule.\\n     */\\n    function rewardClaimed(uint256 _pid, address _address, uint256 _amount) external returns(bool){\\n        address rewardContract = poolInfo[_pid].crvRewards;\\n        require(msg.sender == rewardContract || msg.sender == lockRewards, \\\"!auth\\\");\\n\\n        uint256 mintAmount = _amount.mul(getRewardMultipliers[msg.sender]).div(REWARD_MULTIPLIER_DENOMINATOR);\\n\\n        if(mintAmount > 0) {\\n            //mint reward tokens\\n            ITokenMinter(minter).mint(_address, mintAmount);\\n        }\\n        \\n        return true;\\n    }\\n     \\n\\n    /**\\n     * @dev Distribute fees from L2 to L1 reward contracts\\n     * @param _amount Amount of fees to distribute\\n     */\\n    function distributeL2Fees(uint256 _amount) external nonReentrant {\\n        require(msg.sender == bridgeDelegate, \\\"!auth\\\");\\n\\n        // calculate the rewards that were paid based on the incentives that\\n        // are being distributed\\n        uint256 totalIncentives = lockIncentive.add(stakerIncentive);\\n        uint256 totalFarmed = _amount.mul(FEE_DENOMINATOR).div(totalIncentives);\\n        uint256 eligibleForMint = totalFarmed.sub(_amount);\\n\\n        // Ensure that the total amount of rewards claimed per epoch is less than 70k\\n        uint256 epoch = block.timestamp.div(epochLength);\\n        l2FeesHistory[epoch] = l2FeesHistory[epoch].add(totalFarmed);\\n        require(l2FeesHistory[epoch] <= 70000e18, \\\"Too many L2 Fees\\\");\\n\\n        // Calculate fees for individual reward contracts\\n        uint256 _lockIncentive = _amount.mul(lockIncentive).div(totalIncentives);\\n        uint256 _stakerIncentive = _amount.sub(_lockIncentive);\\n\\n        //send lockers' share of crv to reward contract\\n        IERC20(crv).safeTransferFrom(bridgeDelegate, lockRewards, _lockIncentive);\\n        IRewards(lockRewards).queueNewRewards(_lockIncentive);\\n\\n        //send stakers's share of crv to reward contract\\n        IERC20(crv).safeTransferFrom(bridgeDelegate, stakerRewards, _stakerIncentive);\\n        ILocker(stakerRewards).queueNewRewards(crv, _stakerIncentive);\\n\\n        // Mint CVX to bridge delegate\\n        ITokenMinter(minter).mint(bridgeDelegate, eligibleForMint);\\n    }\\n}\\n\"\r\n    },\r\n    \"convex-platform/contracts/contracts/Interfaces.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.6.12;\\n\\n\\n\\ninterface ICurveGauge {\\n    function deposit(uint256) external;\\n    function balanceOf(address) external view returns (uint256);\\n    function withdraw(uint256) external;\\n    function claim_rewards() external;\\n    function reward_tokens(uint256) external view returns(address);//v2\\n    function rewarded_token() external view returns(address);//v1\\n    function lp_token() external view returns(address);\\n}\\n\\ninterface ICurveVoteEscrow {\\n    function create_lock(uint256, uint256) external;\\n    function increase_amount(uint256) external;\\n    function increase_unlock_time(uint256) external;\\n    function withdraw() external;\\n    function smart_wallet_checker() external view returns (address);\\n    function commit_smart_wallet_checker(address) external;\\n    function apply_smart_wallet_checker() external;\\n}\\n\\ninterface IWalletChecker {\\n    function check(address) external view returns (bool);\\n    function approveWallet(address) external;\\n    function dao() external view returns (address);\\n}\\n\\ninterface IVoting{\\n    function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\\n    function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory); \\n    function vote_for_gauge_weights(address,uint256) external;\\n}\\n\\ninterface IMinter{\\n    function mint(address) external;\\n}\\n\\ninterface IStaker{\\n    function deposit(address, address) external returns (bool);\\n    function withdraw(address) external returns (uint256);\\n    function withdraw(address, address, uint256) external returns (bool);\\n    function withdrawAll(address, address) external returns (bool);\\n    function createLock(uint256, uint256) external returns(bool);\\n    function increaseAmount(uint256) external returns(bool);\\n    function increaseTime(uint256) external returns(bool);\\n    function release() external returns(bool);\\n    function claimCrv(address) external returns (uint256);\\n    function claimRewards(address) external returns(bool);\\n    function claimFees(address,address) external returns (uint256);\\n    function setStashAccess(address, bool) external returns (bool);\\n    function vote(uint256,address,bool) external returns(bool);\\n    function voteGaugeWeight(address,uint256) external returns(bool);\\n    function balanceOfPool(address) external view returns (uint256);\\n    function operator() external view returns (address);\\n    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\\n    function setVote(bytes32 hash, bool valid) external;\\n    function migrate(address to) external;\\n}\\n\\ninterface IRewards{\\n    function stake(address, uint256) external;\\n    function stakeFor(address, uint256) external;\\n    function withdraw(address, uint256) external;\\n    function exit(address) external;\\n    function getReward(address) external;\\n    function queueNewRewards(uint256) external;\\n    function notifyRewardAmount(uint256) external;\\n    function addExtraReward(address) external;\\n    function extraRewardsLength() external view returns (uint256);\\n    function stakingToken() external view returns (address);\\n    function rewardToken() external view returns(address);\\n    function earned(address account) external view returns (uint256);\\n}\\n\\ninterface IStash{\\n    function stashRewards() external returns (bool);\\n    function processStash() external returns (bool);\\n    function claimRewards() external returns (bool);\\n    function initialize(uint256 _pid, address _operator, address _staker, address _gauge, address _rewardFactory) external;\\n    function setExtraReward(address) external;\\n}\\n\\ninterface IFeeDistributor {\\n    function claimToken(address user, address token) external returns (uint256);\\n    function claimTokens(address user, address[] calldata tokens) external returns (uint256[] memory);\\n    function getTokenTimeCursor(address token) external view returns (uint256);\\n}\\n\\ninterface ITokenMinter{\\n    function mint(address,uint256) external;\\n    function burn(address,uint256) external;\\n}\\n\\ninterface IDeposit{\\n    function isShutdown() external view returns(bool);\\n    function balanceOf(address _account) external view returns(uint256);\\n    function totalSupply() external view returns(uint256);\\n    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\\n    function rewardClaimed(uint256,address,uint256) external;\\n    function withdrawTo(uint256,uint256,address) external;\\n    function claimRewards(uint256,address) external returns(bool);\\n    function rewardArbitrator() external returns(address);\\n    function setGaugeRedirect(uint256 _pid) external returns(bool);\\n    function owner() external returns(address);\\n    function deposit(uint256 _pid, uint256 _amount, bool _stake) external returns(bool);\\n}\\n\\ninterface ICrvDeposit{\\n    function deposit(uint256, bool) external;\\n    function lockIncentive() external view returns(uint256);\\n}\\n\\ninterface IRewardFactory{\\n    function setAccess(address,bool) external;\\n    function CreateCrvRewards(uint256,address,address) external returns(address);\\n    function CreateTokenRewards(address,address,address) external returns(address);\\n    function activeRewardCount(address) external view returns(uint256);\\n    function addActiveReward(address,uint256) external returns(bool);\\n    function removeActiveReward(address,uint256) external returns(bool);\\n}\\n\\ninterface IStashFactory{\\n    function CreateStash(uint256,address,address,uint256) external returns(address);\\n    function setImplementation(address, address, address) external;\\n}\\n\\ninterface ITokenFactory{\\n    function CreateDepositToken(address) external returns(address);\\n}\\n\\ninterface IPools{\\n    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\\n    function forceAddPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\\n    function shutdownPool(uint256 _pid) external returns(bool);\\n    function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\\n    function poolLength() external view returns (uint256);\\n    function gaugeMap(address) external view returns(bool);\\n    function setPoolManager(address _poolM) external;\\n    function shutdownSystem() external;\\n    function setUsedAddress(address[] memory) external;\\n}\\n\\ninterface IVestedEscrow{\\n    function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns(bool);\\n}\\n\\ninterface IRewardDeposit {\\n    function addReward(address, uint256) external;\\n}\\n\\ninterface ILocker {\\n    function lock(address _account, uint256 _amount) external;\\n    function checkpointEpoch() external;\\n    function epochCount() external view returns (uint256);\\n    function balanceAtEpochOf(uint256 _epoch, address _user) external view returns (uint256 amount);\\n    function totalSupplyAtEpoch(uint256 _epoch) external view returns (uint256 supply);\\n    function queueNewRewards(address _rewardsToken, uint256 reward) external;\\n    function getReward(address _account, bool _stake) external;\\n    function getReward(address _account) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-0.6/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_staker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_minter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_crv\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newArbitrator\",\"type\":\"address\"}],\"name\":\"ArbitratorUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stashFactory\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenFactory\",\"type\":\"address\"}],\"name\":\"FactoriesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeDistro\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"FeeInfoChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeDistro\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockFees\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"}],\"name\":\"FeeInfoUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFeeManager\",\"type\":\"address\"}],\"name\":\"FeeManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockIncentive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stakerIncentive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"earmarkIncentive\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"platformFee\",\"type\":\"uint256\"}],\"name\":\"FeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"rewardPool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stash\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"PoolAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPoolManager\",\"type\":\"address\"}],\"name\":\"PoolManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolId\",\"type\":\"uint256\"}],\"name\":\"PoolShutdown\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"lockRewards\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stakerRewards\",\"type\":\"address\"}],\"name\":\"RewardContractsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"TreasuryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"name\":\"UpdateVotingContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVoteDelegate\",\"type\":\"address\"}],\"name\":\"VoteDelegateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVoteManager\",\"type\":\"address\"}],\"name\":\"VoteManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"poolid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MaxFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_MULTIPLIER_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_stashVersion\",\"type\":\"uint256\"}],\"name\":\"addPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bridgeDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_gauge\",\"type\":\"address\"}],\"name\":\"claimRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crv\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_stake\",\"type\":\"bool\"}],\"name\":\"depositAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"distributeL2Fees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"}],\"name\":\"earmarkFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"earmarkIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"earmarkRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"feeTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"distro\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewards\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeMap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getRewardMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isShutdown\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"l2FeesHistory\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"lptoken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gauge\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"crvRewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"shutdown\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardArbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rewardClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_arb\",\"type\":\"address\"}],\"name\":\"setArbitrator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_bridgeDelegate\",\"type\":\"address\"}],\"name\":\"setBridgeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_delegateContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_space\",\"type\":\"bytes32\"}],\"name\":\"setDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sfactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tfactory\",\"type\":\"address\"}],\"name\":\"setFactories\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeDistro\",\"type\":\"address\"}],\"name\":\"setFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeM\",\"type\":\"address\"}],\"name\":\"setFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stakerFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_callerFees\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_platform\",\"type\":\"uint256\"}],\"name\":\"setFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"setGaugeRedirect\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolM\",\"type\":\"address\"}],\"name\":\"setPoolManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewards\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakerRewards\",\"type\":\"address\"}],\"name\":\"setRewardContracts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rewardContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"setRewardMultiplier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"setVote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voteDelegate\",\"type\":\"address\"}],\"name\":\"setVoteDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_voteManager\",\"type\":\"address\"}],\"name\":\"setVoteManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"shutdownPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"shutdownSystem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakerRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stashFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"updateFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_votingContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_active\",\"type\":\"bool\"}],\"name\":\"updateVotingContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validVotingContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_voteId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_votingAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteDelegate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gauge\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weight\",\"type\":\"uint256[]\"}],\"name\":\"voteGaugeWeight\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"voteManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"withdrawAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"withdrawTo\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Booster", "CompilerVersion": "v0.6.12+commit.27d51765", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000037aeb332d6e57112f1bfe36923a7ee670ee9278b000000000000000000000000d82fd4d6d62f89a1e50b1db69ad19932314aa408000000000000000000000000627fee87d0d9d2c55098a06ac805db8f98b158aa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}