{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Redemption.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\ncontract RedemptionCalculator {\\n    uint256 constant _BASE_COST = 1e6;\\n\\n    function redeemNFTCost(uint256 nftCount, uint256 erc20Count) external pure returns (uint256) {\\n        require(erc20Count / 1e6 > 0 , \\\"Invalid ERC20 Count\\\");\\n        require(nftCount > 0, \\\"Invalid NFT Count\\\");\\n        erc20Count = erc20Count / 1e6;\\n        uint256 difference;\\n        uint256 adjustmentFactor;\\n        if (nftCount > erc20Count) {\\n            difference = (nftCount) - (erc20Count);\\n            adjustmentFactor = 1e5 / (nftCount);          \\n            return _BASE_COST + (difference * adjustmentFactor);\\n        } else {\\n            difference = erc20Count - nftCount;\\n            adjustmentFactor = 1e5 / erc20Count;\\n            return _BASE_COST - (difference * adjustmentFactor);\\n        }\\n    }\\n\\n    function redeemERC20Cost(uint256 nftCount, uint256 erc20Count) external pure returns (uint256) {\\n        require(erc20Count / 1e6 > 0 , \\\"Invalid ERC20 Count\\\");\\n        require(nftCount > 0, \\\"Invalid NFT Count\\\");\\n        erc20Count = erc20Count / 1e6;\\n        uint256 difference;\\n        uint256 adjustmentFactor;\\n        if (nftCount > erc20Count) {\\n            difference = (nftCount) - (erc20Count);\\n            adjustmentFactor = 1e5 / (nftCount);          \\n            return _BASE_COST + (difference * adjustmentFactor);\\n        } else {\\n            difference = erc20Count - nftCount;\\n            adjustmentFactor = 1e5 / erc20Count;\\n            return _BASE_COST - (difference * adjustmentFactor);\\n        }\\n    }\\n\\n    function updateRaceProbability(uint256 mintCount) external pure returns (uint256, uint256, uint256, uint256, uint256) {\\n        uint tracker = (mintCount / 5000) + 1;\\n        if (tracker > 10_000) {\\n            tracker = 10_000;\\n        }\\n        uint d = 50_000 / tracker;\\n        uint c = 10_000 / tracker;\\n        uint e = 500_000 / tracker;\\n        uint n = 500_000 / tracker;\\n        uint s = (100_000_000) - (c + d + e + n);\\n        return (c, d, e, n, s);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Count\",\"type\":\"uint256\"}],\"name\":\"redeemERC20Cost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftCount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"erc20Count\",\"type\":\"uint256\"}],\"name\":\"redeemNFTCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"mintCount\",\"type\":\"uint256\"}],\"name\":\"updateRaceProbability\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "RedemptionCalculator", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}