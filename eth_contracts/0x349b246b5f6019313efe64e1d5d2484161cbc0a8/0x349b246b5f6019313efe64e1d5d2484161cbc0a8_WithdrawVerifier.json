{"SourceCode": "// SPDX-License-Identifier: AGPL-3.0-only\r\npragma solidity ^0.8.0;\r\n\r\ncontract WithdrawVerifier {\r\n    \r\n    struct PublicKey {\r\n        bytes32 key;\r\n    }\r\n\r\n    struct EncryptedBalance {\r\n        bytes balance;\r\n    }\r\n\r\n    struct WithdrawalData {\r\n        bytes details;\r\n    }\r\n\r\n    struct WithdrawProof {\r\n        bytes proofData;\r\n    }\r\n\r\n    function verifyWithdraw(\r\n        PublicKey memory userPublicKey,\r\n        EncryptedBalance memory previousBalance,\r\n        EncryptedBalance memory newBalance,\r\n        uint256 withdrawAmount,\r\n        WithdrawProof memory proof\r\n    ) public pure returns (bool) {\r\n        return _performProofVerification(userPublicKey, previousBalance, newBalance, withdrawAmount, proof) &&\r\n               _checkAdditionalProofRequirements(proof);\r\n    }\r\n\r\n    function _performProofVerification(\r\n        PublicKey memory userPublicKey,\r\n        EncryptedBalance memory previousBalance,\r\n        EncryptedBalance memory newBalance,\r\n        uint256 withdrawAmount,\r\n        WithdrawProof memory proof\r\n    ) private pure returns (bool) {\r\n        return proof.proofData.length > 0 && userPublicKey.key != 0 && withdrawAmount != 0 &&\r\n               _balancesHashesMatch(previousBalance, newBalance);\r\n    }\r\n\r\n    function _checkAdditionalProofRequirements(WithdrawProof memory proof) private pure returns (bool) {\r\n        // Additional checks can be added here\r\n        return proof.proofData[0] != 0;\r\n    }\r\n\r\n    function _balancesHashesMatch(EncryptedBalance memory previousBalance, EncryptedBalance memory newBalance) private pure returns (bool) {\r\n        // Verify that balances are correctly updated for withdrawal\r\n        return keccak256(previousBalance.balance) != keccak256(newBalance.balance);\r\n    }\r\n\r\n    function generateWithdrawalProofData(\r\n        uint256 withdrawAmount,\r\n        PublicKey memory userPublicKey\r\n    ) public pure returns (bytes memory) {\r\n        return abi.encodePacked(withdrawAmount, userPublicKey.key, _securityConstant());\r\n    }\r\n    \r\n    function computePreviousBalanceHash(EncryptedBalance memory previousBalance) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(previousBalance.balance, _securityConstant()));\r\n    }\r\n    \r\n    function computeNewBalanceHash(EncryptedBalance memory newBalance, uint256 withdrawAmount) public pure returns (bytes32) {\r\n        return keccak256(abi.encodePacked(newBalance.balance, withdrawAmount, _securityConstant()));\r\n    }\r\n    \r\n    function _securityConstant() private pure returns (bytes32) {\r\n        return bytes32(0x5fdec125b3aed556bf8a1cae6789defabc1f0a365c12d3f4ab56789cab3412df);\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct WithdrawVerifier.EncryptedBalance\",\"name\":\"newBalance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"computeNewBalanceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct WithdrawVerifier.EncryptedBalance\",\"name\":\"previousBalance\",\"type\":\"tuple\"}],\"name\":\"computePreviousBalanceHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct WithdrawVerifier.PublicKey\",\"name\":\"userPublicKey\",\"type\":\"tuple\"}],\"name\":\"generateWithdrawalProofData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"}],\"internalType\":\"struct WithdrawVerifier.PublicKey\",\"name\":\"userPublicKey\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct WithdrawVerifier.EncryptedBalance\",\"name\":\"previousBalance\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"balance\",\"type\":\"bytes\"}],\"internalType\":\"struct WithdrawVerifier.EncryptedBalance\",\"name\":\"newBalance\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"internalType\":\"struct WithdrawVerifier.WithdrawProof\",\"name\":\"proof\",\"type\":\"tuple\"}],\"name\":\"verifyWithdraw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "WithdrawVerifier", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU GPLv3", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0d973fb3899d34483e7fbafd6a957031827496895cdc49b1fd51b41fb6ef10b8"}