{"SourceCode": "// \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588    \u2588\u2588                   \r\n// \u2588\u2588   \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588     \u2588\u2588  \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588   \u2588\u2588                  \r\n// \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588   \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588   \u2588\u2588    \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588 \u2588\u2588  \u2588\u2588                   \r\n// \u2588\u2588   \u2588\u2588 \u2588\u2588       \u2588\u2588  \u2588\u2588  \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588    \u2588\u2588  \u2588\u2588     \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588                   \r\n// \u2588\u2588   \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588   \u2588\u2588\u2588\u2588    \r\n\r\n// SAFU CONTRACT BY REVOLUZION\r\n\r\n//Revoluzion Ecosystem\r\n//WEB: https://revoluzion.io\r\n//DAPP: https://revoluzion.app\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.18;\r\n\r\n/********************************************************************************************\r\n  INTERFACE\r\n********************************************************************************************/\r\n\r\ninterface IERC20 {\r\n    \r\n    // EVENT \r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    // FUNCTION\r\n\r\n    function name() external view returns (string memory);\r\n    \r\n    function symbol() external view returns (string memory);\r\n    \r\n    function decimals() external view returns (uint8);\r\n    \r\n    function totalSupply() external view returns (uint256);\r\n    \r\n    function balanceOf(address account) external view returns (uint256);\r\n    \r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    \r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    \r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IFactory {\r\n\r\n    // FUNCTION\r\n\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IRouter {\r\n\r\n    // FUNCTION\r\n\r\n    function WETH() external pure returns (address);\r\n        \r\n    function factory() external pure returns (address);\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external;\r\n    \r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external payable;\r\n    \r\n    function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IAuthError {\r\n\r\n    // ERROR\r\n\r\n    error InvalidOwner(address account);\r\n\r\n    error UnauthorizedAccount(address account);\r\n\r\n    error InvalidAuthorizedAccount(address account);\r\n\r\n    error CurrentAuthorizedState(address account, bool state);\r\n}\r\n\r\ninterface ICommonError {\r\n\r\n    // ERROR\r\n\r\n    error CannotUseCurrentAddress(address current);\r\n\r\n    error CannotUseCurrentValue(uint256 current);\r\n\r\n    error CannotUseCurrentState(bool current);\r\n\r\n    error InvalidAddress(address invalid);\r\n\r\n    error InvalidValue(uint256 invalid);\r\n}\r\n\r\ninterface IRewardDistributor {\r\n\r\n    // FUNCTION\r\n\r\n    function isRewardDistributor() external pure returns (bool);\r\n    \r\n    function setDistributionCriteria(uint256 distribution) external;\r\n\r\n    function setShare(address shareholder, uint256 amount) external;\r\n\r\n    function deposit(uint256 amountToRedeem) external;\r\n\r\n    function process(uint256 gas) external;\r\n\r\n    function distributeReward(address shareholder) external;\r\n\r\n}\r\n\r\n/********************************************************************************************\r\n  ACCESS\r\n********************************************************************************************/\r\n\r\nabstract contract Auth is IAuthError {\r\n    \r\n    // DATA\r\n\r\n    address private _owner;\r\n\r\n    // MAPPING\r\n\r\n    mapping(address => bool) public authorization;\r\n\r\n    // MODIFIER\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    modifier authorized() {\r\n        _checkAuthorized();\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCCTOR\r\n\r\n    constructor(address initialOwner) {\r\n        _transferOwnership(initialOwner);\r\n        authorization[initialOwner] = true;\r\n        if (initialOwner != msg.sender) {\r\n            authorization[msg.sender] = true;\r\n        }\r\n    }\r\n\r\n    // EVENT\r\n    \r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    event UpdateAuthorizedAccount(address authorizedAccount, address caller, bool state, uint256 timestamp);\r\n\r\n    // FUNCTION\r\n    \r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != msg.sender) {\r\n            revert UnauthorizedAccount(msg.sender);\r\n        }\r\n    }\r\n\r\n    function _checkAuthorized() internal view virtual {\r\n        if (!authorization[msg.sender]) {\r\n            revert UnauthorizedAccount(msg.sender);\r\n        }\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert InvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function authorize(address account) public virtual onlyOwner {\r\n        if (account == address(0) || account == address(0xdead)) {\r\n            revert InvalidAuthorizedAccount(account);\r\n        }\r\n        _authorization(account, msg.sender, true);\r\n    }\r\n\r\n    function unauthorize(address account) public virtual onlyOwner {\r\n        if (account == address(0) || account == address(0xdead)) {\r\n            revert InvalidAuthorizedAccount(account);\r\n        }\r\n        _authorization(account, msg.sender, false);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    function _authorization(address account, address caller, bool state) internal virtual {\r\n        if (authorization[account] == state) {\r\n            revert CurrentAuthorizedState(account, state);\r\n        }\r\n        authorization[account] = state;\r\n        emit UpdateAuthorizedAccount(account, caller, state, block.timestamp);\r\n    }\r\n}\r\n\r\n/********************************************************************************************\r\n  REWARD\r\n********************************************************************************************/\r\n\r\ncontract RewardDistributor is Auth, ICommonError, IRewardDistributor {\r\n\r\n    // DATA\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalRealised;\r\n    }\r\n\r\n    IRouter public router;\r\n\r\n    bool private constant ISREWARDDISTRIBUTOR = true;\r\n\r\n    uint256 public minDistribution = 1 gwei;\r\n    uint256 public maxContinuousDistribution = 10;\r\n    uint256 public rewardsPerShare = 0;\r\n    uint256 public currentIndex = 0;\r\n    uint256 public totalShares = 0;\r\n    uint256 public totalRewards = 0; \r\n    uint256 public totalDistributed = 0;\r\n\r\n    uint256 public constant ACCURACY = 1_000_000_000_000_000_000 ether;\r\n\r\n    address[] public shareholders;\r\n\r\n    address public immutable token;\r\n\r\n    // MAPPING\r\n\r\n    mapping(address => Share) public shares;\r\n    mapping(address => uint256) public shareholderIndexes;\r\n    mapping(address => uint256) public shareholderClaims;\r\n\r\n    // MODIFIER\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == token);\r\n        _;\r\n    }\r\n\r\n    // CONSTRUCTOR \r\n\r\n    constructor (\r\n        address tokenAddress,\r\n        address newOwner, \r\n        address routerAddress\r\n    ) Auth (newOwner) {\r\n        if (tokenAddress == address(0)) { revert InvalidAddress(address(0)); }\r\n        token = tokenAddress;\r\n        _transferOwnership(newOwner);\r\n\r\n        router = IRouter(routerAddress);\r\n        shareholderClaims[newOwner] = 0;\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event UpdateRouter(address oldRouter, address newRouter, uint256 timestamp);\r\n\r\n    event UpdateMaxContinuousDistribution(uint256 oldMaxContinuousDistribution, uint256 newMaxContinuousDistribution, uint256 timestamp);\r\n\r\n    event TotalSharesUpdates(uint256 initialTotal, uint256 totalShares, uint256 timestamp);\r\n\r\n    // FUNCTION\r\n\r\n    /* General */\r\n\r\n    receive() external payable {}\r\n    \r\n    function wNative() external onlyOwner {\r\n        address beneficiary = token;\r\n        payable(beneficiary).transfer(address(this).balance);\r\n    }\r\n\r\n    function isRewardDistributor() external override pure returns (bool) {\r\n        return ISREWARDDISTRIBUTOR;\r\n    } \r\n\r\n    /* Update */\r\n\r\n    function updateMaxContinuousDistribution(uint256 newMaxContinuousDistribution) external authorized {\r\n        require(maxContinuousDistribution <= 20, \"Update Max Continuous Distribution: Max distribution for reward should be lesser or equal to 20 at one time.\");\r\n        if (newMaxContinuousDistribution == maxContinuousDistribution) { revert CannotUseCurrentValue(newMaxContinuousDistribution); }\r\n        uint256 oldMaxContinuousDistribution = maxContinuousDistribution;\r\n        maxContinuousDistribution = newMaxContinuousDistribution;\r\n        emit UpdateMaxContinuousDistribution(oldMaxContinuousDistribution, newMaxContinuousDistribution, block.timestamp);\r\n    }\r\n\r\n    function updateRouter(address newRouter) external authorized {\r\n        if (address(router) == newRouter) { revert CannotUseCurrentAddress(newRouter); }\r\n        address oldRouter = address(router);\r\n        router = IRouter(newRouter);\r\n        emit UpdateRouter(oldRouter, newRouter, block.timestamp);\r\n    }\r\n\r\n    function setDistributionCriteria(uint256 distributionMin) external override authorized {\r\n        if (minDistribution == distributionMin) { revert CannotUseCurrentValue(distributionMin); }\r\n        minDistribution = distributionMin;\r\n    }\r\n\r\n    /* Check */\r\n\r\n    function shouldDistribute(address shareholder) internal view returns (bool) {\r\n        return getUnpaidEarnings(shareholder) > minDistribution;\r\n    }\r\n\r\n    function getCumulativeRewards(uint256 share) internal view returns (uint256) {\r\n        return share * rewardsPerShare / ACCURACY;\r\n    }\r\n\r\n    function getUnpaidEarnings(address shareholder) public view returns (uint256) {\r\n        if (shares[shareholder].amount == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 shareholderTotalRewards = getCumulativeRewards(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if (shareholderTotalRewards <= shareholderTotalExcluded) {\r\n            return 0;\r\n        }\r\n\r\n        return shareholderTotalRewards - shareholderTotalExcluded;\r\n    }\r\n\r\n    /* Reward */\r\n\r\n    function deposit(uint256 amount) external override {\r\n        totalRewards = totalRewards + amount;\r\n        rewardsPerShare = rewardsPerShare + (ACCURACY * amount / totalShares);\r\n        IERC20(token).transferFrom(address(token), address(this), amount);\r\n    }\r\n\r\n    function process(uint256 gas) external override {\r\n        uint256 shareholderCount = shareholders.length;\r\n\r\n        if (shareholderCount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 gasUsed = 0;\r\n        uint256 gasLeft = gasleft();\r\n        uint256 iterations = 0;\r\n\r\n        while (gasUsed < gas && iterations < maxContinuousDistribution && iterations < shareholderCount) {\r\n            if (currentIndex >= shareholderCount) {\r\n                currentIndex -= shareholderCount;\r\n            }\r\n\r\n            if (shouldDistribute(shareholders[currentIndex])) {\r\n                distributeReward(shareholders[currentIndex]);\r\n            }\r\n\r\n            gasUsed = gasUsed + (gasLeft - gasleft());\r\n            gasLeft = gasleft();\r\n            iterations++;\r\n        }\r\n        \r\n    }\r\n\r\n    function distributeReward(address shareholder) public {\r\n        if (shares[shareholder].amount == 0) {\r\n            return;\r\n        }\r\n\r\n        uint256 amount = getUnpaidEarnings(shareholder);\r\n        \r\n        if (amount > 0) {\r\n            totalDistributed += amount;\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised + amount;\r\n            shares[shareholder].totalExcluded = getCumulativeRewards(shares[shareholder].amount);\r\n            require(IERC20(token).transfer(shareholder, amount), \"Distribute Reward: There's something wrong with transfer function.\");\r\n        }\r\n    }\r\n\r\n    function tallyReward(uint256 initialShares, uint256 amount, address shareholder) internal {\r\n        if (initialShares == 0) {\r\n            return;\r\n        }\r\n\r\n        if (amount > 0) {\r\n            totalDistributed += amount;\r\n            shareholderClaims[shareholder] = block.timestamp;\r\n            shares[shareholder].totalRealised = shares[shareholder].totalRealised + amount;\r\n            shares[shareholder].totalExcluded = getCumulativeRewards(initialShares);\r\n            require(IERC20(token).transfer(shareholder, amount), \"Tally Reward: There's something wrong with transfer function.\");\r\n        }\r\n    }\r\n\r\n    function claimReward() external {\r\n        distributeReward(msg.sender);\r\n    }\r\n\r\n    /* Shares */\r\n    \r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        uint256 initialShares = shares[shareholder].amount;\r\n        uint256 unpaid = getUnpaidEarnings(shareholder);\r\n\r\n        if (amount > 0 && shares[shareholder].amount == 0) {\r\n            addShareholder(shareholder);\r\n        } else if (amount == 0 && shares[shareholder].amount > 0) {\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        uint256 initialTotal = totalShares;\r\n        totalShares = totalShares - shares[shareholder].amount + amount;\r\n        emit TotalSharesUpdates(initialTotal, totalShares, block.timestamp);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeRewards(shares[shareholder].amount);\r\n\r\n        if (initialShares > 0) {\r\n            tallyReward(initialShares, unpaid, shareholder);\r\n        }\r\n    } \r\n\r\n    /* Shareholders */\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length - 1];\r\n        shareholderIndexes[shareholders[shareholders.length - 1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n}\r\n\r\n/********************************************************************************************\r\n  TOKEN\r\n********************************************************************************************/\r\n\r\ncontract EverRise2 is Auth, ICommonError, IERC20 {\r\n\r\n    // DATA\r\n\r\n    IRouter public router;\r\n\r\n    IRewardDistributor public immutable distributor;\r\n\r\n    string private constant NAME = \"EverRise 2.0\";\r\n    string private constant SYMBOL = \"RISE2.0\";\r\n\r\n    uint8 private constant DECIMALS = 18;\r\n\r\n    uint256 private _totalSupply;\r\n    \r\n    uint256 public constant FEEDENOMINATOR = 10_000;\r\n    uint256 public constant TRIGGERZEUSCOOLDOWN = 12 hours;\r\n\r\n    uint256 public buyMarketingFee = 100;\r\n    uint256 public buyBuybackFee = 100;\r\n    uint256 public buyRewardFee = 100;\r\n    uint256 public sellMarketingFee = 100;\r\n    uint256 public sellBuybackFee = 100;\r\n    uint256 public sellRewardFee = 100;\r\n    uint256 public transferMarketingFee = 0;\r\n    uint256 public transferBuybackFee = 0;\r\n    uint256 public transferRewardFee = 0;\r\n    uint256 public marketingFeeCollected = 0;\r\n    uint256 public buybackFeeCollected = 0;\r\n    uint256 public rewardFeeCollected = 0;\r\n    uint256 public totalFeeCollected = 0;\r\n    uint256 public marketingFeeRedeemed = 0;\r\n    uint256 public buybackFeeRedeemed = 0;\r\n    uint256 public rewardFeeRedeemed = 0;\r\n    uint256 public totalFeeRedeemed = 0;\r\n    uint256 public totalTriggerZeusBuyback = 0;\r\n    uint256 public lastTriggerZeusTimestamp = 0;\r\n    uint256 public distributorGas = 30_000;\r\n    uint256 public minSwap = 100 ether;\r\n\r\n    bool private constant ISRISE2 = true;\r\n\r\n    bool public tradeEnabled = false;\r\n    bool public presaleFinalized = false;\r\n    bool public isRewardActive = false;\r\n    bool public isFeeActive = false;\r\n    bool public isFeeLocked = false;\r\n    bool public isSwapEnabled = false;\r\n    bool public inSwap = false;\r\n\r\n    address public immutable projectOwner;\r\n\r\n    address public constant ZERO = address(0);\r\n    address public constant DEAD = address(0xdead);\r\n\r\n    address public marketingReceiver = 0x60968dF59FDD7865aBb1fd837cD06504c6a1a65a;\r\n\r\n    address public pair;\r\n    address public presaleAddress;\r\n    address public presaleFactory;\r\n    \r\n    // MAPPING\r\n\r\n    mapping(address => uint256) private _balances;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) public isExcludeFromFees;\r\n    mapping(address => bool) public isRewardExempt;\r\n\r\n    // MODIFIER\r\n\r\n    modifier swapping() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    // ERROR\r\n\r\n    error InvalidRewardDistributor(IRewardDistributor distributorAddres);\r\n\r\n    error InvalidTotalFee(uint256 current, uint256 max);\r\n\r\n    error InvalidTradeEnabledState(bool current);\r\n\r\n    error InvalidFeeActiveState(bool current);\r\n\r\n    error InvalidRewardActiveState(bool current);\r\n\r\n    error InvalidSwapEnabledState(bool current);\r\n\r\n    error PresaleAlreadyFinalized(bool current);\r\n\r\n    error TriggerZeusBuybackInCooldown(uint256 timeleft);\r\n\r\n    error FeeLocked();\r\n\r\n    // CONSTRUCTOR\r\n\r\n    constructor(\r\n        address routerAddress,\r\n        address projectOwnerAddress\r\n    ) Auth (msg.sender) {\r\n        _mint(msg.sender, 100_000_000_000 * 10**DECIMALS);\r\n        if (projectOwnerAddress == ZERO) { revert InvalidAddress(projectOwnerAddress); }\r\n        projectOwner = projectOwnerAddress;\r\n\r\n        distributor = new RewardDistributor(address(this), msg.sender, routerAddress);\r\n        router = IRouter(routerAddress);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n\r\n        isExcludeFromFees[msg.sender] = true;\r\n        isExcludeFromFees[projectOwner] = true;\r\n        isExcludeFromFees[address(router)] = true;\r\n        isExcludeFromFees[address(distributor)] = true;\r\n\r\n        isRewardExempt[pair] = true;\r\n        isRewardExempt[DEAD] = true;\r\n        isRewardExempt[ZERO] = true;\r\n        isRewardExempt[address(this)] = true;\r\n        isRewardExempt[address(distributor)] = true;\r\n\r\n        authorize(address(distributor));\r\n    }\r\n\r\n    // EVENT\r\n\r\n    event UpdateRouter(address oldRouter, address newRouter, address caller, uint256 timestamp);\r\n\r\n    event UpdateMinSwap(uint256 oldMinSwap, uint256 newMinSwap, address caller, uint256 timestamp);\r\n\r\n    event UpdateDistributorGas(uint256 oldDistributorGas, uint256 newDistributorGas, address caller, uint256 timestamp);\r\n\r\n    event UpdateFeeActive(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n\r\n    event UpdateBuyFee(uint256 oldBuyMarketingFee, uint256 oldBuyBuybackFee, uint256 oldBuyRewardFee, uint256 newBuyMarketingFee, uint256 newBuyBuybackFee, uint256 newBuyRewardFee, address caller, uint256 timestamp);\r\n\r\n    event UpdateSellFee(uint256 oldSellMarketingFee, uint256 oldSellBuybackFee, uint256 oldSellRewardFee, uint256 newSellMarketingFee, uint256 newSellBuybackFee, uint256 newSellRewardFee, address caller, uint256 timestamp);\r\n\r\n    event UpdateTransferFee(uint256 oldTransferMarketingFee, uint256 oldTransferBuybackFee, uint256 oldTransferRewardFee, uint256 newTransferMarketingFee, uint256 newTransferBuybackFee, uint256 newTransferRewardFee, address caller, uint256 timestamp);\r\n\r\n    event UpdateSwapEnabled(bool oldStatus, bool newStatus, address caller, uint256 timestamp);\r\n\r\n    event UpdateMarketingReceiver(address oldMarketingReceiver, address newMarketingReceiver, address caller, uint256 timestamp);\r\n        \r\n    event AutoRedeem(uint256 marketingFeeDistribution, uint256 buybackFeeDistribution, uint256 rewardFeeDistribution, uint256 amountToRedeem, address caller, uint256 timestamp);\r\n\r\n    event SetPresaleAddress(address adr, address caller, uint256 timestamp);\r\n\r\n    event SetPresaleFactory(address adr, address caller, uint256 timestamp);\r\n\r\n    // FUNCTION\r\n\r\n    /* General */\r\n\r\n    receive() external payable {}\r\n\r\n    function enableTrading() external onlyOwner {\r\n        if (tradeEnabled) { revert InvalidTradeEnabledState(tradeEnabled); }\r\n        if (isFeeActive) { revert InvalidFeeActiveState(isFeeActive); }\r\n        if (isSwapEnabled) { revert InvalidSwapEnabledState(isSwapEnabled); }\r\n        tradeEnabled = true;\r\n        isFeeActive = true;\r\n        isSwapEnabled = true;\r\n        presaleFinalized = true;\r\n        isRewardActive = true;\r\n    }\r\n\r\n    function finalizePresale() external authorized {\r\n        if (presaleFinalized) { revert PresaleAlreadyFinalized(presaleFinalized); }\r\n        if (isFeeActive) { revert InvalidFeeActiveState(isFeeActive); }\r\n        if (isSwapEnabled) { revert InvalidSwapEnabledState(isSwapEnabled); }\r\n        isFeeActive = true;\r\n        isSwapEnabled = true;\r\n        presaleFinalized = true;\r\n    }\r\n\r\n    function lockFees() external onlyOwner {\r\n        if (isFeeLocked) { revert FeeLocked(); }\r\n        isFeeLocked = true;\r\n    }\r\n\r\n    /* Reward */\r\n\r\n    function claimReward() external {\r\n        if (!distributor.isRewardDistributor()) { revert InvalidRewardDistributor(distributor); }\r\n        try distributor.distributeReward(msg.sender) {} catch {}\r\n    }\r\n\r\n    /* Redeem */\r\n\r\n    function redeemAllMarketingFee() external {\r\n        uint256 amountToRedeem = marketingFeeCollected - marketingFeeRedeemed;\r\n        \r\n        _redeemMarketingFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialMarketingFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= marketingFeeCollected - marketingFeeRedeemed, \"Redeem Partial Marketing Fee: Insufficient marketing fee collected.\");\r\n        \r\n        _redeemMarketingFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemMarketingFee(uint256 amountToRedeem) internal swapping { \r\n        marketingFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n \r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            amountToRedeem,\r\n            0,\r\n            path,\r\n            marketingReceiver,\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function redeemAllBuybackFee() external {\r\n        uint256 amountToRedeem = buybackFeeCollected - buybackFeeRedeemed;\r\n        \r\n        _redeemBuybackFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialBuybackFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= buybackFeeCollected - buybackFeeRedeemed, \"Redeem Partial Buyback Fee: Insufficient marketing fee collected.\");\r\n        \r\n        _redeemBuybackFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemBuybackFee(uint256 amountToRedeem) internal swapping { \r\n        buybackFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        _basicTransfer(address(this), DEAD, amountToRedeem);\r\n    }\r\n\r\n    function redeemAllRewardFee() external {\r\n        uint256 amountToRedeem = rewardFeeCollected - rewardFeeRedeemed;\r\n        \r\n        _redeemRewardFee(amountToRedeem);\r\n    }\r\n\r\n    function redeemPartialRewardFee(uint256 amountToRedeem) external {\r\n        require(amountToRedeem <= rewardFeeCollected - rewardFeeRedeemed, \"Redeem Partial Reward Fee: Insufficient reward fee collected.\");\r\n        \r\n        _redeemRewardFee(amountToRedeem);\r\n    }\r\n\r\n    function _redeemRewardFee(uint256 amountToRedeem) internal swapping {        \r\n        if (!distributor.isRewardDistributor()) { revert InvalidRewardDistributor(distributor); }\r\n        rewardFeeRedeemed += amountToRedeem;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n\r\n        try distributor.deposit(amountToRedeem) {} catch {}\r\n    }\r\n\r\n    function autoRedeem(uint256 amountToRedeem) public swapping {  \r\n        uint256 marketingToRedeem = marketingFeeCollected - marketingFeeRedeemed;\r\n        uint256 buybackToRedeem = buybackFeeCollected - buybackFeeRedeemed;\r\n        uint256 totalToRedeem = totalFeeCollected - totalFeeRedeemed;\r\n\r\n        uint256 marketingFeeDistribution = amountToRedeem * marketingToRedeem / totalToRedeem;\r\n        uint256 buybackFeeDistribution = amountToRedeem * buybackToRedeem / totalToRedeem;\r\n        uint256 rewardFeeDistribution = amountToRedeem - marketingFeeDistribution - buybackFeeDistribution;\r\n        \r\n        marketingFeeRedeemed += marketingFeeDistribution;\r\n        buybackFeeRedeemed += buybackFeeDistribution;\r\n        rewardFeeRedeemed += rewardFeeDistribution;\r\n        totalFeeRedeemed += amountToRedeem;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = router.WETH();\r\n\r\n        _approve(address(this), address(router), amountToRedeem);\r\n        \r\n        emit AutoRedeem(marketingFeeDistribution, buybackFeeDistribution, rewardFeeDistribution, amountToRedeem, msg.sender, block.timestamp);\r\n\r\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            marketingFeeDistribution,\r\n            0,\r\n            path,\r\n            marketingReceiver,\r\n            block.timestamp\r\n        );\r\n\r\n        _basicTransfer(address(this), DEAD, buybackFeeRedeemed);\r\n\r\n        try distributor.deposit(rewardFeeDistribution) {} catch {}\r\n    }\r\n\r\n    /* Check */\r\n\r\n    function isRise2() external pure returns (bool) {\r\n        return ISRISE2;\r\n    }\r\n\r\n    function circulatingSupply() external view returns (uint256) {\r\n        return totalSupply() - balanceOf(DEAD) - balanceOf(ZERO);\r\n    }\r\n\r\n    /* Update */\r\n\r\n    function updateRewardContingencyAllowance(uint256 amount) external onlyOwner {\r\n        _approve(address(this), address(distributor), amount);\r\n        _approve(address(this), address(router), amount);\r\n    }\r\n\r\n    function updateRewardContingencyMaxAllowance() external onlyOwner {\r\n        _approve(address(this), address(distributor), type(uint256).max);\r\n        _approve(address(this), address(router), type(uint256).max);\r\n    }\r\n\r\n    function resetRewardContingencyAllowance() external onlyOwner {\r\n        _approve(address(this), address(distributor), 0);\r\n        _approve(address(this), address(router), 0);\r\n    }\r\n\r\n    function updateRouter(address newRouter) external onlyOwner {\r\n        if (address(router) == newRouter) { revert CannotUseCurrentAddress(newRouter); }\r\n        address oldRouter = address(router);\r\n        router = IRouter(newRouter);\r\n        \r\n        isExcludeFromFees[newRouter] = true;\r\n\r\n        emit UpdateRouter(oldRouter, newRouter, msg.sender, block.timestamp);\r\n        pair = IFactory(router.factory()).createPair(address(this), router.WETH());\r\n    }\r\n\r\n    function updateMinSwap(uint256 newMinSwap) external onlyOwner {\r\n        if (minSwap == newMinSwap) { revert CannotUseCurrentValue(newMinSwap); }\r\n        if (minSwap < 100 * 10**DECIMALS) { revert InvalidValue(100 * 10**DECIMALS); }\r\n        uint256 oldMinSwap = minSwap;\r\n        minSwap = newMinSwap;\r\n        emit UpdateMinSwap(oldMinSwap, newMinSwap, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateDistributorGas(uint256 newDistributorGas) external authorized {\r\n        if (distributorGas == newDistributorGas) { revert CannotUseCurrentValue(newDistributorGas); }\r\n        if (distributorGas < 10_000) { revert InvalidValue(10_000); }\r\n        if (distributorGas > 750_000) { revert InvalidValue(750_000); }\r\n        uint256 oldDistributorGas = distributorGas;\r\n        distributorGas = newDistributorGas;\r\n        emit UpdateDistributorGas(oldDistributorGas, newDistributorGas, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateBuyFee(uint256 newMarketingFee, uint256 newBuybackFee, uint256 newRewardFee) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeLocked(); }\r\n        if (newMarketingFee + newBuybackFee + newRewardFee > 1000) { revert InvalidTotalFee(newMarketingFee + newBuybackFee + newRewardFee, 1000); }\r\n        uint256 oldMarketingFee = buyMarketingFee;\r\n        uint256 oldBuybackFee = buyBuybackFee;\r\n        uint256 oldRewardFee = buyRewardFee;\r\n        buyMarketingFee = newMarketingFee;\r\n        buyBuybackFee = oldBuybackFee;\r\n        buyRewardFee = newRewardFee;\r\n        emit UpdateBuyFee(oldMarketingFee, oldRewardFee, oldBuybackFee, newMarketingFee, oldBuybackFee, newRewardFee, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateSellFee(uint256 newMarketingFee, uint256 newBuybackFee, uint256 newRewardFee) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeLocked(); }\r\n        if (newMarketingFee + newBuybackFee + newRewardFee > 1000) { revert InvalidTotalFee(newMarketingFee + newBuybackFee + newRewardFee, 1000); }\r\n        uint256 oldMarketingFee = sellMarketingFee;\r\n        uint256 oldBuybackFee = sellBuybackFee;\r\n        uint256 oldRewardFee = sellRewardFee;\r\n        sellMarketingFee = newMarketingFee;\r\n        sellBuybackFee = newBuybackFee;\r\n        sellRewardFee = newRewardFee;\r\n        emit UpdateSellFee(oldMarketingFee, oldRewardFee, oldBuybackFee, newMarketingFee, oldBuybackFee, newRewardFee, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateTransferFee(uint256 newMarketingFee, uint256 newBuybackFee, uint256 newRewardFee) external onlyOwner {\r\n        if (isFeeLocked) { revert FeeLocked(); }\r\n        if (newMarketingFee + newBuybackFee + newRewardFee > 1000) { revert InvalidTotalFee(newMarketingFee + newBuybackFee + newRewardFee, 1000); }\r\n        uint256 oldMarketingFee = transferMarketingFee;\r\n        uint256 oldBuybackFee = transferBuybackFee;\r\n        uint256 oldRewardFee = transferRewardFee;\r\n        transferMarketingFee = newMarketingFee;\r\n        transferBuybackFee = newBuybackFee;\r\n        transferRewardFee = newRewardFee;\r\n        emit UpdateTransferFee(oldMarketingFee, oldRewardFee, oldBuybackFee, newMarketingFee, oldBuybackFee, newRewardFee, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateFeeActive(bool newStatus) external authorized {\r\n        if (isFeeActive == newStatus) { revert CannotUseCurrentState(newStatus); }\r\n        bool oldStatus = isFeeActive;\r\n        isFeeActive = newStatus;\r\n        emit UpdateFeeActive(oldStatus, newStatus, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateSwapEnabled(bool newStatus) external authorized {\r\n        if (isSwapEnabled == newStatus) { revert CannotUseCurrentState(newStatus); }\r\n        bool oldStatus = isSwapEnabled;\r\n        isSwapEnabled = newStatus;\r\n        emit UpdateSwapEnabled(oldStatus, newStatus, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function updateMarketingReceiver(address newMarketingReceiver) external onlyOwner {\r\n        if (marketingReceiver == newMarketingReceiver) { revert CannotUseCurrentAddress(newMarketingReceiver); }\r\n        address oldMarketingReceiver = marketingReceiver;\r\n        marketingReceiver = newMarketingReceiver;\r\n        emit UpdateMarketingReceiver(oldMarketingReceiver, newMarketingReceiver, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function setPresaleFactory(address adr) external authorized {\r\n        if (presaleFinalized) { revert PresaleAlreadyFinalized(presaleFinalized); }\r\n        if (adr == ZERO) { revert InvalidAddress(ZERO); }\r\n        if (adr == presaleFactory) { revert CannotUseCurrentAddress(presaleFactory); }\r\n        presaleFactory = adr;\r\n        isExcludeFromFees[adr] = true;\r\n        isRewardExempt[adr] = true;\r\n        emit SetPresaleFactory(adr, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function setPresaleAddress(address adr) external authorized {\r\n        if (presaleFinalized) { revert PresaleAlreadyFinalized(presaleFinalized); }\r\n        if (adr == ZERO) { revert InvalidAddress(ZERO); }\r\n        if (adr == presaleAddress) { revert CannotUseCurrentAddress(presaleAddress); }\r\n        presaleAddress = adr;\r\n        isExcludeFromFees[adr] = true;\r\n        isRewardExempt[adr] = true;\r\n        emit SetPresaleAddress(adr, msg.sender, block.timestamp);\r\n    }\r\n\r\n    function setExcludeFromFees(address user, bool status) external authorized {\r\n        if (isExcludeFromFees[user] == status) { revert CannotUseCurrentState(status); }\r\n        isExcludeFromFees[user] = status;\r\n    }\r\n\r\n    function setExemptFromReward(address user, bool status) external authorized {\r\n        if (isRewardExempt[user] == status) { revert CannotUseCurrentState(status); }\r\n        isRewardExempt[user] = status;\r\n    }\r\n    \r\n    function setDistributionCriteria(uint256 distributionMin) external authorized {\r\n        if (!distributor.isRewardDistributor()) { revert InvalidRewardDistributor(distributor); }\r\n        try distributor.setDistributionCriteria(distributionMin) {} catch {}\r\n    }\r\n\r\n    /* Fee */\r\n\r\n    function takeBuyFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = buyMarketingFee + buyBuybackFee + buyRewardFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyBuyFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeSellFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = sellMarketingFee + sellBuybackFee + sellRewardFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallySellFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function takeTransferFee(address from, uint256 amount) internal swapping returns (uint256) {\r\n        uint256 feeTotal = transferMarketingFee + sellBuybackFee + transferRewardFee;\r\n        uint256 feeAmount = amount * feeTotal / FEEDENOMINATOR;\r\n        uint256 newAmount = amount - feeAmount;\r\n        tallyTransferFee(from, feeAmount, feeTotal);\r\n        return newAmount;\r\n    }\r\n\r\n    function tallyBuyFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectMarketing = amount * buyMarketingFee / fee;\r\n        uint256 collectBuyback = amount * buyBuybackFee / fee;\r\n        uint256 collectReward = amount - collectMarketing - collectBuyback;\r\n        tallyCollection(collectMarketing, collectBuyback, collectReward, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallySellFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectMarketing = amount * sellMarketingFee / fee;\r\n        uint256 collectBuyback = amount * sellBuybackFee / fee;\r\n        uint256 collectReward = amount - collectMarketing - collectBuyback;\r\n        tallyCollection(collectMarketing, collectBuyback, collectReward, amount);\r\n        \r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyTransferFee(address from, uint256 amount, uint256 fee) internal swapping {\r\n        uint256 collectMarketing = amount * transferMarketingFee / fee;\r\n        uint256 collectBuyback = amount * transferBuybackFee / fee;\r\n        uint256 collectReward = amount - collectMarketing - collectBuyback;\r\n        tallyCollection(collectMarketing, collectBuyback, collectReward, amount);\r\n\r\n        _balances[from] -= amount;\r\n        _balances[address(this)] += amount;\r\n    }\r\n\r\n    function tallyCollection(uint256 collectMarketing, uint256 collectBuyback, uint256 collectReward, uint256 amount) internal swapping {\r\n        marketingFeeCollected += collectMarketing;\r\n        buybackFeeCollected += collectBuyback;\r\n        rewardFeeCollected += collectReward;\r\n        totalFeeCollected += amount;\r\n    }\r\n\r\n    /* Buyback */\r\n\r\n    function triggerZeusBuyback(uint256 amount) external authorized {\r\n        if (amount > 5 ether) { revert InvalidValue(5 ether); }\r\n        if (block.timestamp - lastTriggerZeusTimestamp < TRIGGERZEUSCOOLDOWN) { revert TriggerZeusBuybackInCooldown(block.timestamp - lastTriggerZeusTimestamp); }\r\n        buyTokens(amount, DEAD);\r\n        totalTriggerZeusBuyback += amount;\r\n        lastTriggerZeusTimestamp = block.timestamp;\r\n    }\r\n\r\n    function buyTokens(uint256 amount, address to) internal swapping {\r\n        if (msg.sender == DEAD) { revert InvalidAddress(DEAD); }\r\n        address[] memory path = new address[](2);\r\n        path[0] = router.WETH();\r\n        path[1] = address(this);\r\n\r\n        router.swapExactETHForTokensSupportingFeeOnTransferTokens{\r\n            value: amount\r\n        } (0, path, to, block.timestamp);\r\n    }\r\n\r\n    /* ERC20 Standard */\r\n\r\n    function name() external view virtual override returns (string memory) {\r\n        return NAME;\r\n    }\r\n    \r\n    function symbol() external view virtual override returns (string memory) {\r\n        return SYMBOL;\r\n    }\r\n    \r\n    function decimals() external view virtual override returns (uint8) {\r\n        return DECIMALS;\r\n    }\r\n    \r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n    \r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n    \r\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\r\n        address provider = msg.sender;\r\n        return _transfer(provider, to, amount);\r\n    }\r\n    \r\n    function allowance(address provider, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[provider][spender];\r\n    }\r\n    \r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address provider = msg.sender;\r\n        _approve(provider, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        return _transfer(from, to, amount);\r\n    }\r\n    \r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        address provider = msg.sender;\r\n        _approve(provider, spender, allowance(provider, spender) + addedValue);\r\n        return true;\r\n    }\r\n    \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        address provider = msg.sender;\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(provider, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n    \r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        if (account == ZERO) { revert InvalidAddress(account); }\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    function _approve(address provider, address spender, uint256 amount) internal virtual {\r\n        if (provider == ZERO) { revert InvalidAddress(provider); }\r\n        if (spender == ZERO) { revert InvalidAddress(spender); }\r\n\r\n        _allowances[provider][spender] = amount;\r\n        emit Approval(provider, spender, amount);\r\n    }\r\n    \r\n    function _spendAllowance(address provider, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(provider, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(provider, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Additional */\r\n\r\n    function _basicTransfer(address from, address to, uint256 amount ) internal returns (bool) {\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n        return true;\r\n    }\r\n    \r\n    /* Overrides */\r\n \r\n    function _transfer(address from, address to, uint256 amount) internal virtual returns (bool) {\r\n        if (from == ZERO) { revert InvalidAddress(from); }\r\n        if (to == ZERO) { revert InvalidAddress(to); }\r\n        \r\n        if (!tradeEnabled) {\r\n            require(msg.sender == projectOwner || msg.sender == presaleFactory || msg.sender == owner() || msg.sender == presaleAddress, \"ERC20: Only operator, owner or presale addresses can call this function since trading is not yet enabled.\");\r\n\r\n            if (from == owner()) {\r\n                require(to != pair, \"ERC20: Owner and operator are not allowed to sell if trading is not yet enabled.\");\r\n            }\r\n        }\r\n\r\n        if (inSwap || isExcludeFromFees[from]) {\r\n            return _basicTransfer(from, to, amount);\r\n        }\r\n\r\n        if (from != pair && isSwapEnabled && totalFeeCollected - totalFeeRedeemed >= minSwap) {\r\n            autoRedeem(minSwap);\r\n        }\r\n\r\n        uint256 newAmount = amount;\r\n\r\n        if (isFeeActive && !isExcludeFromFees[from] && !isExcludeFromFees[to]) {\r\n            newAmount = _beforeTokenTransfer(from, to, amount);\r\n        }\r\n\r\n        require(_balances[from] >= newAmount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = _balances[from] - newAmount;\r\n            _balances[to] += newAmount;\r\n        }\r\n\r\n        emit Transfer(from, to, newAmount);\r\n\r\n        if (isRewardActive) {\r\n            _afterTokenTransfer(from, to);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal swapping virtual returns (uint256) {\r\n        if (from == pair && (buyMarketingFee + buyRewardFee > 0)) {\r\n            return takeBuyFee(from, amount);\r\n        }\r\n        if (to == pair && (sellMarketingFee + sellRewardFee > 0)) {\r\n            return takeSellFee(from, amount);\r\n        }\r\n        if (from != pair && to != pair && (transferMarketingFee + transferRewardFee > 0)) {\r\n            return takeTransferFee(from, amount);\r\n        }\r\n        return amount;\r\n    }\r\n\r\n    function _afterTokenTransfer(address from, address to) internal virtual {\r\n        if (!distributor.isRewardDistributor()) { revert InvalidRewardDistributor(distributor); }\r\n\r\n        if (!isRewardExempt[from]) {\r\n            try distributor.setShare(from, _balances[from]) {} catch {}\r\n        }\r\n        if (!isRewardExempt[to]) {\r\n            try distributor.setShare(to, _balances[to]) {} catch {}\r\n        }\r\n\r\n        try distributor.process(distributorGas) {} catch {}\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"routerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"projectOwnerAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"current\",\"type\":\"address\"}],\"name\":\"CannotUseCurrentAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"CannotUseCurrentState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"}],\"name\":\"CannotUseCurrentValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"CurrentAuthorizedState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeLocked\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"invalid\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvalidAuthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidFeeActiveState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidRewardActiveState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"contract IRewardDistributor\",\"name\":\"distributorAddres\",\"type\":\"address\"}],\"name\":\"InvalidRewardDistributor\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidSwapEnabledState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"current\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"InvalidTotalFee\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"InvalidTradeEnabledState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"invalid\",\"type\":\"uint256\"}],\"name\":\"InvalidValue\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"current\",\"type\":\"bool\"}],\"name\":\"PresaleAlreadyFinalized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timeleft\",\"type\":\"uint256\"}],\"name\":\"TriggerZeusBuybackInCooldown\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"UnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"buybackFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardFeeDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AutoRedeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetPresaleAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetPresaleFactory\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizedAccount\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"state\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateAuthorizedAccount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyBuybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBuyRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyBuybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBuyRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateBuyFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldDistributorGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDistributorGas\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateDistributorGas\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateFeeActive\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMarketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMarketingReceiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMarketingReceiver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateMinSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellBuybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSellRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellBuybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSellRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSellFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"oldStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateSwapEnabled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTransferMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTransferBuybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTransferRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransferMarketingFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransferBuybackFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransferRewardFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdateTransferFee\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEEDENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TRIGGERZEUSCOOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"authorization\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"autoRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buybackFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributor\",\"outputs\":[{\"internalType\":\"contract IRewardDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributorGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inSwap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isExcludeFromFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isFeeLocked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRewardActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRewardExempt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRise2\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTriggerZeusTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleFinalized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"projectOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemAllRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialBuybackFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialMarketingFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountToRedeem\",\"type\":\"uint256\"}],\"name\":\"redeemPartialRewardFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resetRewardContingencyAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sellRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"distributionMin\",\"type\":\"uint256\"}],\"name\":\"setDistributionCriteria\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExcludeFromFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setExemptFromReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setPresaleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"setPresaleFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeCollected\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFeeRedeemed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTriggerZeusBuyback\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferBuybackFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferMarketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferRewardFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"triggerZeusBuyback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"unauthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardFee\",\"type\":\"uint256\"}],\"name\":\"updateBuyFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newDistributorGas\",\"type\":\"uint256\"}],\"name\":\"updateDistributorGas\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateFeeActive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMarketingReceiver\",\"type\":\"address\"}],\"name\":\"updateMarketingReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMinSwap\",\"type\":\"uint256\"}],\"name\":\"updateMinSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateRewardContingencyAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewardContingencyMaxAllowance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouter\",\"type\":\"address\"}],\"name\":\"updateRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardFee\",\"type\":\"uint256\"}],\"name\":\"updateSellFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"updateSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newMarketingFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBuybackFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newRewardFee\",\"type\":\"uint256\"}],\"name\":\"updateTransferFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "EverRise2", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000e8ae9d9b30427a8b75c67b7cf8ea73046b2a6caf", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://355b0eb1dcb2e55fb61771512d483d094e8128ff0c56ecf2ddb6f789b4f96f52"}