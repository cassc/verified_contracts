{"SourceCode": "pragma solidity ^0.4.17;\r\n\r\n\r\nlibrary SafeMath {\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        assert(c / a == b);\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        assert(b <= a);\r\n        return a - b;\r\n    }\r\n\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        assert(c >= a);\r\n        return c;\r\n    }\r\n}\r\n\r\n\r\ncontract ITetherUSDTERC20 {\r\n    function totalSupply() public constant returns (uint);\r\n\r\n    function balanceOf(address who) public constant returns (uint);\r\n\r\n    function transfer(address to, uint value) public;\r\n\r\n    function allowance(address owner, address spender) public constant returns (uint);\r\n\r\n    function transferFrom(address from, address to, uint value) public;\r\n\r\n    function approve(address spender, uint value) public;\r\n\r\n    event Approval(address indexed owner, address indexed spender, uint value);\r\n    event Transfer(address indexed from, address indexed to, uint value);\r\n}\r\n\r\n\r\ncontract ETHPool {\r\n\r\n    using SafeMath for uint;\r\n\r\n    address  public admin;\r\n\r\n    ITetherUSDTERC20 public USDT;\r\n\r\n    //\u8d28\u62bc\r\n    event Pledge(address, address, uint);\r\n\r\n    bool initialized;\r\n\r\n    modifier onlyAdmin {\r\n        require(msg.sender == admin, \"You Are not admin\");\r\n        _;\r\n    }\r\n\r\n    //\u521d\u59cb\u5316\r\n    function initialize(address _admin,\r\n        address _usdtAddr\r\n    ) external {\r\n        require(!initialized, \"initialized\");\r\n        admin = _admin;\r\n        USDT = ITetherUSDTERC20(_usdtAddr);\r\n        initialized = true;\r\n    }\r\n\r\n    //\u8bbe\u7f6e\u7ba1\u7406\u5458\r\n    function setAdmin(address _admin) external onlyAdmin {\r\n        admin = _admin;\r\n    }\r\n\r\n\r\n    //\u8f6cUSDT\r\n    function batchAdminWithdraw(address[] _userList, uint[] _amount) external onlyAdmin {\r\n        for (uint i = 0; i < _userList.length; i++) {\r\n            USDT.transfer(address(_userList[i]), uint(_amount[i]));\r\n        }\r\n    }\r\n\r\n    //\u8f6cUSDT\r\n    function withdrawUSDT(address _addr, uint _amount) external onlyAdmin {\r\n        require(_addr != address(0), \"Can not withdraw to Blackhole\");\r\n        USDT.transfer(_addr, _amount);\r\n    }\r\n\r\n\r\n    //\u8f6cETH\r\n    function withdrawETH(address _addr, uint _amount) external onlyAdmin {\r\n        require(_addr != address(0), \"Can not withdraw to Blackhole\");\r\n        _addr.transfer(_amount);\r\n    }\r\n\r\n\r\n    //\u67e5\u5e73\u53f0 USDT \u4f59\u989d\r\n    function getBalanceUSDT() view external returns (uint){\r\n        return USDT.balanceOf(address(this));\r\n    }\r\n\r\n    //\u67e5\u7528\u6237 USDT \u4f59\u989d\r\n    function getBalanceUSDT(address _addr) view external returns (uint){\r\n        return USDT.balanceOf(_addr);\r\n    }\r\n\r\n    //\u8d28\u62bc\r\n    function pledge(uint _amount) external {\r\n        USDT.transferFrom(msg.sender, address(this), _amount);\r\n        emit Pledge(msg.sender, address(this), _amount);\r\n    }\r\n\r\n\r\n\r\n    function    receive () external payable {}\r\n\r\n\r\n}", "ABI": "[{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawUSDT\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawETH\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"},{\"name\":\"_usdtAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"setAdmin\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_userList\",\"type\":\"address[]\"},{\"name\":\"_amount\",\"type\":\"uint256[]\"}],\"name\":\"batchAdminWithdraw\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"pledge\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"getBalanceUSDT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getBalanceUSDT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"receive\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"USDT\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Pledge\",\"type\":\"event\"}]", "ContractName": "ETHPool", "CompilerVersion": "v0.4.26+commit.4563c3fc", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "bzzr://69db7415c6f70062bdbafde35b0a42121cda2122cae4d05b875cf8620a45f680"}