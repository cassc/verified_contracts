{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@vizing/contracts/interface/IMessageChannel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport {IMessageStruct} from \\\"./IMessageStruct.sol\\\";\\r\\n\\r\\ninterface IMessageChannel is IMessageStruct {\\r\\n    /*\\r\\n        /// @notice LaunchPad is the function that user or DApps send omni-chain message to other chain\\r\\n        ///         Once the message is sent, the Relay will validate the message and send it to the target chain\\r\\n        /// @dev 1. we will call the LaunchPad.Launch function to emit the message\\r\\n        /// @dev 2. the message will be sent to the destination chain\\r\\n        /// @param earliestArrivalTimestamp The earliest arrival time for the message\\r\\n        ///        set to 0, vizing will forward the information ASAP.\\r\\n        /// @param latestArrivalTimestamp The latest arrival time for the message\\r\\n        ///        set to 0, vizing will forward the information ASAP.\\r\\n        /// @param relayer the specify relayer for your message\\r\\n        ///        set to 0, all the relayers will be able to forward the message\\r\\n        /// @param sender The sender address for the message\\r\\n        ///        most likely the address of the EOA, the user of some DApps\\r\\n        /// @param value native token amount, will be sent to the target contract\\r\\n        /// @param destChainid The destination chain id for the message\\r\\n        /// @param additionParams The addition params for the message\\r\\n        ///        if not in expert mode, set to 0 (`new bytes(0)`)\\r\\n        /// @param message Arbitrary information\\r\\n        ///\\r\\n        ///    bytes                         \\r\\n        ///   message  = abi.encodePacked(\\r\\n        ///         byte1           uint256         uint24        uint64        bytes\\r\\n        ///     messageType, activateContract, executeGasLimit, maxFeePerGas, signature\\r\\n        ///   )\\r\\n        ///        \\r\\n    */\\r\\n    function Launch(\\r\\n        uint64 earliestArrivalTimestamp,\\r\\n        uint64 latestArrivalTimestamp,\\r\\n        address relayer,\\r\\n        address sender,\\r\\n        uint256 value,\\r\\n        uint64 destChainid,\\r\\n        bytes calldata additionParams,\\r\\n        bytes calldata message\\r\\n    ) external payable;\\r\\n\\r\\n    ///\\r\\n    ///    bytes                          byte1           uint256         uint24        uint64        bytes\\r\\n    ///   message  = abi.encodePacked(messageType, activateContract, executeGasLimit, maxFeePerGas, signature)\\r\\n    ///\\r\\n    function launchMultiChain(\\r\\n        launchEnhanceParams calldata params\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice batch landing message to the chain, execute the landing message\\r\\n    /// @dev trusted relayer will call this function to send omni-chain message to the Station\\r\\n    /// @param params the landing message params\\r\\n    /// @param proofs the  proof of the validated message\\r\\n    function Landing(\\r\\n        landingParams[] calldata params,\\r\\n        bytes[][] calldata proofs\\r\\n    ) external payable;\\r\\n\\r\\n    /// @notice similar to the Landing function, but with gasLimit\\r\\n    function LandingSpecifiedGas(\\r\\n        landingParams[] calldata params,\\r\\n        uint24 gasLimit,\\r\\n        bytes[][] calldata proofs\\r\\n    ) external payable;\\r\\n\\r\\n    /// @dev feel free to call this function before pass message to the Station,\\r\\n    ///      this method will return the protocol fee that the message need to pay, longer message will pay more\\r\\n    function estimateGas(\\r\\n        uint256[] calldata value,\\r\\n        uint64[] calldata destChainid,\\r\\n        bytes[] calldata additionParams,\\r\\n        bytes[] calldata message\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function estimateGas(\\r\\n        uint256 value,\\r\\n        uint64 destChainid,\\r\\n        bytes calldata additionParams,\\r\\n        bytes calldata message\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    function estimatePrice(\\r\\n        address sender,\\r\\n        uint64 destChainid\\r\\n    ) external view returns (uint64);\\r\\n\\r\\n    function gasSystemAddr() external view returns (address);\\r\\n\\r\\n    /// @dev get the message launch nonce of the sender on the specific chain\\r\\n    /// @param chainId the chain id of the sender\\r\\n    /// @param sender the address of the sender\\r\\n    function GetNonceLaunch(\\r\\n        uint64 chainId,\\r\\n        address sender\\r\\n    ) external view returns (uint32);\\r\\n\\r\\n    /// @dev get the message landing nonce of the sender on the specific chain\\r\\n    /// @param chainId the chain id of the sender\\r\\n    /// @param sender the address of the sender\\r\\n    function GetNonceLanding(\\r\\n        uint64 chainId,\\r\\n        address sender\\r\\n    ) external view returns (uint32);\\r\\n\\r\\n    /// @dev get the version of the Station\\r\\n    /// @return the version of the Station, like \\\"v1.0.0\\\"\\r\\n    function Version() external view returns (string memory);\\r\\n\\r\\n    /// @dev get the chainId of current Station\\r\\n    /// @return chainId, defined in the L2SupportLib.sol\\r\\n    function Chainid() external view returns (uint64);\\r\\n\\r\\n    function minArrivalTime() external view returns (uint64);\\r\\n\\r\\n    function maxArrivalTime() external view returns (uint64);\\r\\n\\r\\n    function expertLandingHook(bytes1 hook) external view returns (address);\\r\\n\\r\\n    function expertLaunchHook(bytes1 hook) external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/interface/IMessageDashboard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport {IMessageStruct} from \\\"./IMessageStruct.sol\\\";\\r\\n\\r\\ninterface IMessageDashboard is IMessageStruct {\\r\\n    /// @dev Only owner can call this function to stop or restart the engine\\r\\n    /// @param stop true is stop, false is start\\r\\n    function PauseEngine(bool stop) external;\\r\\n\\r\\n    /// @notice return the states of the engine\\r\\n    /// @return 0x01 is stop, 0x02 is start\\r\\n    function engineState() external view returns (uint8);\\r\\n\\r\\n    /// @notice return the states of the engine & Landing Pad\\r\\n    function padState() external view returns (uint8, uint8);\\r\\n\\r\\n    // function mptRoot() external view returns (bytes32);\\r\\n\\r\\n    /// @dev withdraw the protocol fee from the contract, only owner can call this function\\r\\n    /// @param amount the amount of the withdraw protocol fee\\r\\n    function Withdraw(uint256 amount, address to) external;\\r\\n\\r\\n    /// @dev set the payment system address, only owner can call this function\\r\\n    /// @param gasSystemAddress the address of the payment system\\r\\n    function setGasSystem(address gasSystemAddress) external;\\r\\n\\r\\n    function setExpertLaunchHooks(\\r\\n        bytes1[] calldata ids,\\r\\n        address[] calldata hooks\\r\\n    ) external;\\r\\n\\r\\n    function setExpertLandingHooks(\\r\\n        bytes1[] calldata ids,\\r\\n        address[] calldata hooks\\r\\n    ) external;\\r\\n\\r\\n    /// notice reset the permission of the contract, only owner can call this function\\r\\n    function roleConfiguration(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts,\\r\\n        bool[] calldata states\\r\\n    ) external;\\r\\n\\r\\n    function stationAdminSetRole(\\r\\n        bytes32 role,\\r\\n        address[] calldata accounts,\\r\\n        bool[] calldata states\\r\\n    ) external;\\r\\n\\r\\n    /// @notice transfer the ownership of the contract, only owner can call this function\\r\\n    function transferOwnership(address newOwner) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/interface/IMessageEmitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport \\\"./IMessageSpaceStation.sol\\\";\\r\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IMessageEmitter {\\r\\n    function minArrivalTime() external view returns (uint64);\\r\\n\\r\\n    function maxArrivalTime() external view returns (uint64);\\r\\n\\r\\n    function minGasLimit() external view returns (uint24);\\r\\n\\r\\n    function maxGasLimit() external view returns (uint24);\\r\\n\\r\\n    function defaultBridgeMode() external view returns (bytes1);\\r\\n\\r\\n    function selectedRelayer() external view returns (address);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/interface/IMessageEvent.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport {IMessageStruct} from \\\"./IMessageStruct.sol\\\";\\r\\n\\r\\ninterface IMessageEvent is IMessageStruct {\\r\\n    /// @notice Throws event after a  message which attempts to omni-chain is submitted to LaunchPad contract\\r\\n    event SuccessfulLaunchMessage(\\r\\n        uint32 indexed nonce,\\r\\n        uint64 earliestArrivalTimestamp,\\r\\n        uint64 latestArrivalTimestamp,\\r\\n        address relayer,\\r\\n        address sender,\\r\\n        address srcContract,\\r\\n        uint256 value,\\r\\n        uint64 destChainid,\\r\\n        bytes additionParams,\\r\\n        bytes message\\r\\n    );\\r\\n\\r\\n    /// @notice Throws event after a  message which attempts to omni-chain is submitted to LaunchPad contract\\r\\n    event SuccessfulLaunchMultiMessages(\\r\\n        uint32[] indexed nonce,\\r\\n        uint64 earliestArrivalTimestamp,\\r\\n        uint64 latestArrivalTimestamp,\\r\\n        address relayer,\\r\\n        address sender,\\r\\n        address srcContract,\\r\\n        uint256[] value,\\r\\n        uint64[] destChainid,\\r\\n        bytes[] additionParams,\\r\\n        bytes[] message\\r\\n    );\\r\\n\\r\\n    /// @notice Throws event after a omni-chain message is submitted from source chain to target chain\\r\\n    event SuccessfulLanding(bytes32 indexed messageId, landingParams params);\\r\\n\\r\\n    /// @notice Throws event after protocol state is changed, such as pause or resume\\r\\n    event EngineStateRefreshing(bool indexed isPause);\\r\\n\\r\\n    /// @notice Throws event after protocol fee calculation is changed\\r\\n    event PaymentSystemChanging(address indexed gasSystemAddress);\\r\\n\\r\\n    /// @notice Throws event after successful withdrawa\\r\\n    event WithdrawRequest(address indexed to, uint256 amount);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/interface/IMessageReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\ninterface IMessageReceiver {\\r\\n    function receiveStandardMessage(\\r\\n        uint64 srcChainId,\\r\\n        uint256 srcContract,\\r\\n        bytes calldata message\\r\\n    ) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/interface/IMessageSimulation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport {IMessageStruct} from \\\"./IMessageStruct.sol\\\";\\r\\n\\r\\ninterface IMessageSimulation is IMessageStruct {\\r\\n    /// @dev for sequencer to simulate the landing message, call this function before call Landing\\r\\n    /// @param params the landing message params\\r\\n    /// check the revert message \\\"SimulateResult\\\" to get the result of the simulation\\r\\n    /// for example, if the result is [true, false, true], it means the first and third message is valid, the second message is invalid\\r\\n    function SimulateLanding(landingParams[] calldata params) external payable;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/interface/IMessageSpaceStation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport {IMessageStruct} from \\\"./IMessageStruct.sol\\\";\\r\\nimport {IMessageDashboard} from \\\"./IMessageDashboard.sol\\\";\\r\\nimport {IMessageEvent} from \\\"../interface/IMessageEvent.sol\\\";\\r\\nimport {IMessageChannel} from \\\"../interface/IMessageChannel.sol\\\";\\r\\nimport {IMessageSimulation} from \\\"../interface/IMessageSimulation.sol\\\";\\r\\n\\r\\ninterface IMessageSpaceStation is\\r\\n    IMessageStruct,\\r\\n    IMessageDashboard,\\r\\n    IMessageEvent,\\r\\n    IMessageChannel,\\r\\n    IMessageSimulation\\r\\n{}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/interface/IMessageStruct.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\ninterface IMessageStruct {\\r\\n    struct launchParams {\\r\\n        uint64 earliestArrivalTimestamp;\\r\\n        uint64 latestArrivalTimestamp;\\r\\n        address relayer;\\r\\n        address sender;\\r\\n        uint256 value;\\r\\n        uint64 destChainid;\\r\\n        bytes additionParams;\\r\\n        bytes message;\\r\\n    }\\r\\n\\r\\n    struct landingParams {\\r\\n        bytes32 messageId;\\r\\n        uint64 earliestArrivalTimestamp;\\r\\n        uint64 latestArrivalTimestamp;\\r\\n        uint64 srcChainid;\\r\\n        bytes32 srcTxHash;\\r\\n        uint256 srcContract;\\r\\n        uint32 srcChainNonce;\\r\\n        uint256 sender;\\r\\n        uint256 value;\\r\\n        bytes additionParams;\\r\\n        bytes message;\\r\\n    }\\r\\n\\r\\n    struct launchEnhanceParams {\\r\\n        uint64 earliestArrivalTimestamp;\\r\\n        uint64 latestArrivalTimestamp;\\r\\n        address relayer;\\r\\n        address sender;\\r\\n        uint256[] value;\\r\\n        uint64[] destChainid;\\r\\n        bytes[] additionParams;\\r\\n        bytes[] message;\\r\\n    }\\r\\n\\r\\n    struct RollupMessageStruct {\\r\\n        SignedMessageBase base;\\r\\n        IMessageStruct.launchParams params;\\r\\n    }\\r\\n\\r\\n    struct SignedMessageBase {\\r\\n        uint64 srcChainId;\\r\\n        uint24 nonceLaunch;\\r\\n        bytes32 srcTxHash;\\r\\n        bytes32 destTxHash;\\r\\n        uint64 srcTxTimestamp;\\r\\n        uint64 destTxTimestamp;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/interface/IVizingGasSystemChannel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\ninterface IVizingGasSystemChannel {\\r\\n    /*\\r\\n        /// @notice Estimate how many native token we should spend to exchange the amountOut in the destChainid\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// @param amountOut The value we want to receive in the destination chain\\r\\n        /// @return amountIn the native token amount on the source chain we should spend\\r\\n    */\\r\\n    function exactOutput(\\r\\n        uint64 destChainid,\\r\\n        uint256 amountOut\\r\\n    ) external view returns (uint256 amountIn);\\r\\n\\r\\n    /*\\r\\n        /// @notice Estimate how many native token we could get in the destChainid if we input the amountIn\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// @param amountIn The value we spent in the source chain\\r\\n        /// @return amountOut the native token amount the destination chain will receive\\r\\n    */\\r\\n    function exactInput(\\r\\n        uint64 destChainid,\\r\\n        uint256 amountIn\\r\\n    ) external view returns (uint256 amountOut);\\r\\n\\r\\n    /*\\r\\n        /// @notice Estimate the gas fee we should pay to vizing\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// @param message The message we want to send to the destination chain\\r\\n    */\\r\\n    function estimateGas(\\r\\n        uint256 amountOut,\\r\\n        uint64 destChainid,\\r\\n        bytes calldata message\\r\\n    ) external view returns (uint256);\\r\\n\\r\\n    /*\\r\\n        /// @notice Estimate the gas fee & native token we should pay to vizing\\r\\n        /// @param amountOut amountOut in the destination chain\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// @param message The message we want to send to the destination chain\\r\\n    */\\r\\n    function batchEstimateTotalFee(\\r\\n        uint256[] calldata amountOut,\\r\\n        uint64[] calldata destChainid,\\r\\n        bytes[] calldata message\\r\\n    ) external view returns (uint256 totalFee);\\r\\n\\r\\n    /*\\r\\n        /// @notice Estimate the total fee we should pay to vizing\\r\\n        /// @param value The value we spent in the source chain\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// @param message The message we want to send to the destination chain\\r\\n    */\\r\\n    function estimateTotalFee(\\r\\n        uint256 value,\\r\\n        uint64 destChainid,\\r\\n        bytes calldata message\\r\\n    ) external view returns (uint256 totalFee);\\r\\n\\r\\n    /*\\r\\n        /// @notice Estimate the gas price we need to encode in message\\r\\n        /// @param sender most likely the address of the DApp, which forward the message from user\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n    */\\r\\n    function estimatePrice(\\r\\n        address targetContract,\\r\\n        uint64 destChainid\\r\\n    ) external view returns (uint64);\\r\\n\\r\\n    /*\\r\\n        /// @notice Estimate the gas price we need to encode in message\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n    */\\r\\n    function estimatePrice(uint64 destChainid) external view returns (uint64);\\r\\n\\r\\n    /*\\r\\n        /// @notice Calculate the fee for the native token transfer\\r\\n        /// @param amount The value we spent in the source chain\\r\\n    */\\r\\n    function computeTradeFee(\\r\\n        uint64 destChainid,\\r\\n        uint256 amountOut\\r\\n    ) external view returns (uint256 fee);\\r\\n\\r\\n    /*\\r\\n        /// @notice Calculate the fee for the native token transfer\\r\\n        /// @param amount The value we spent in the source chain\\r\\n    */\\r\\n    function computeTradeFee(\\r\\n        address targetContract,\\r\\n        uint64 destChainid,\\r\\n        uint256 amountOut\\r\\n    ) external view returns (uint256 fee);\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/library/MessageTypeLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nlibrary MessageTypeLib {\\r\\n    bytes1 constant DEFAULT = 0x00;\\r\\n\\r\\n    /* ********************* message type **********************/\\r\\n    bytes1 constant STANDARD_ACTIVATE = 0x01;\\r\\n    bytes1 constant ARBITRARY_ACTIVATE = 0x02;\\r\\n    bytes1 constant MESSAGE_POST = 0x03;\\r\\n    bytes1 constant NATIVE_TOKEN_SEND = 0x04;\\r\\n\\r\\n    /**\\r\\n     * additionParams type *********************\\r\\n     */\\r\\n    // Single-Send mode\\r\\n    bytes1 constant SINGLE_SEND = 0x01;\\r\\n    bytes1 constant MULTI_UNIVERSAL = 0x03;\\r\\n    bytes1 constant ERC20_HANDLER = 0x04;\\r\\n\\r\\n    bytes1 constant MAX_MODE = 0xFF;\\r\\n\\r\\n    function fetchMsgMode(\\r\\n        bytes calldata message\\r\\n    ) internal pure returns (bytes1) {\\r\\n        if (message.length < 1) {\\r\\n            return DEFAULT;\\r\\n        }\\r\\n        bytes1 messageSlice = bytes1(message[0:1]);\\r\\n        return messageSlice;\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/MessageEmitter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport {IMessageStruct} from \\\"./interface/IMessageStruct.sol\\\";\\r\\nimport {IMessageChannel} from \\\"./interface/IMessageChannel.sol\\\";\\r\\nimport {IMessageEmitter} from \\\"./interface/IMessageEmitter.sol\\\";\\r\\nimport {IMessageReceiver} from \\\"./interface/IMessageReceiver.sol\\\";\\r\\nimport {IVizingGasSystemChannel} from \\\"./interface/IVizingGasSystemChannel.sol\\\";\\r\\n\\r\\nabstract contract MessageEmitter is IMessageEmitter {\\r\\n    /// @dev bellow are the default parameters for the OmniToken,\\r\\n    ///      we **Highly recommended** to use immutable variables to store these parameters\\r\\n    /// @notice minArrivalTime the minimal arrival timestamp for the omni-chain message\\r\\n    /// @notice maxArrivalTime the maximal arrival timestamp for the omni-chain message\\r\\n    /// @notice minGasLimit the minimal gas limit for target chain execute omni-chain message\\r\\n    /// @notice maxGasLimit the maximal gas limit for target chain execute omni-chain message\\r\\n    /// @notice defaultBridgeMode the default mode for the omni-chain message,\\r\\n    ///        in OmniToken, we use MessageTypeLib.ARBITRARY_ACTIVATE (0x02), target chain will **ACTIVATE** the message\\r\\n    /// @notice selectedRelayer the specify relayer for your message\\r\\n    ///        set to 0, all the relayers will be able to forward the message\\r\\n    /// see https://docs.vizing.com/docs/BuildOnVizing/Contract\\r\\n\\r\\n    function minArrivalTime() external view virtual override returns (uint64) {}\\r\\n\\r\\n    function maxArrivalTime() external view virtual override returns (uint64) {}\\r\\n\\r\\n    function minGasLimit() external view virtual override returns (uint24) {}\\r\\n\\r\\n    function maxGasLimit() external view virtual override returns (uint24) {}\\r\\n\\r\\n    function defaultBridgeMode()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (bytes1)\\r\\n    {}\\r\\n\\r\\n    function selectedRelayer()\\r\\n        external\\r\\n        view\\r\\n        virtual\\r\\n        override\\r\\n        returns (address)\\r\\n    {}\\r\\n\\r\\n    IMessageChannel public LaunchPad;\\r\\n\\r\\n    constructor(address _LaunchPad) {\\r\\n        __LaunchPadInit(_LaunchPad);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// rewrite set LaunchPad address function\\r\\n        /// @notice call this function to reset the LaunchPad contract address\\r\\n        /// @param _LaunchPad The new LaunchPad contract address\\r\\n    */\\r\\n    function __LaunchPadInit(address _LaunchPad) internal virtual {\\r\\n        LaunchPad = IMessageChannel(_LaunchPad);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// @notice call this function to packet the message before sending it to the LandingPad contract\\r\\n        /// @param mode the emitter mode, check MessageTypeLib.sol for more details\\r\\n        ///        eg: 0x02 for ARBITRARY_ACTIVATE, your message will be activated on the target chain\\r\\n        /// @param gasLimit the gas limit for executing the specific function on the target contract\\r\\n        /// @param targetContract the target contract address on the destination chain\\r\\n        /// @param message the message to be sent to the target contract\\r\\n        /// @return the packed message\\r\\n        /// see https://docs.vizing.com/docs/BuildOnVizing/Contract\\r\\n    */\\r\\n    function _packetMessage(\\r\\n        bytes1 mode,\\r\\n        address targetContract,\\r\\n        uint24 gasLimit,\\r\\n        uint64 price,\\r\\n        bytes memory message\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        return\\r\\n            abi.encodePacked(\\r\\n                mode,\\r\\n                uint256(uint160(targetContract)),\\r\\n                gasLimit,\\r\\n                price,\\r\\n                message\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// @notice Calculate the amount of native tokens obtained on the target chain\\r\\n        /// @param value The value we send to vizing on the source chain\\r\\n    */\\r\\n    function _computeTradeFee(\\r\\n        uint64 destChainid,\\r\\n        uint256 value\\r\\n    ) internal view returns (uint256 amountIn) {\\r\\n        return\\r\\n            IVizingGasSystemChannel(LaunchPad.gasSystemAddr()).computeTradeFee(\\r\\n                destChainid,\\r\\n                value\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// @notice Fetch the nonce of the user with specific destination chain\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// see https://docs.vizing.com/docs/BuildOnVizing/Contract\\r\\n    */\\r\\n    function _fetchNonce(\\r\\n        uint64 destChainid\\r\\n    ) internal view virtual returns (uint32 nonce) {\\r\\n        nonce = LaunchPad.GetNonceLaunch(destChainid, msg.sender);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// @notice Estimate the gas price we need to encode in message\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// see https://docs.vizing.com/docs/BuildOnVizing/Contract\\r\\n    */\\r\\n    function _fetchPrice(\\r\\n        uint64 destChainid\\r\\n    ) internal view virtual returns (uint64) {\\r\\n        return\\r\\n            IVizingGasSystemChannel(LaunchPad.gasSystemAddr()).estimatePrice(\\r\\n                destChainid\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// @notice Estimate the gas price we need to encode in message\\r\\n        /// @param targetContract The target contract address on the destination chain\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// see https://docs.vizing.com/docs/BuildOnVizing/Contract\\r\\n    */\\r\\n    function _fetchPrice(\\r\\n        address targetContract,\\r\\n        uint64 destChainid\\r\\n    ) internal view virtual returns (uint64) {\\r\\n        return\\r\\n            IVizingGasSystemChannel(LaunchPad.gasSystemAddr()).estimatePrice(\\r\\n                targetContract,\\r\\n                destChainid\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// @notice similar to uniswap Swap Router\\r\\n        /// @notice Estimate how many native token we should spend to exchange the amountOut in the destChainid\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// @param amountOut The value we want to exchange in the destination chain\\r\\n        /// @return amountIn the native token amount on the source chain we should spend\\r\\n        /// see https://docs.vizing.com/docs/BuildOnVizing/Contract\\r\\n    */\\r\\n    function _exactOutput(\\r\\n        uint64 destChainid,\\r\\n        uint256 amountOut\\r\\n    ) internal view returns (uint256 amountIn) {\\r\\n        return\\r\\n            IVizingGasSystemChannel(LaunchPad.gasSystemAddr()).exactOutput(\\r\\n                destChainid,\\r\\n                amountOut\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// @notice similar to uniswap Swap Router\\r\\n        /// @notice Estimate how many native token we could get in the destChainid if we input the amountIn\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// @param amountIn The value we spent in the source chain\\r\\n        /// @return amountOut the native token amount the destination chain will receive\\r\\n        /// see https://docs.vizing.com/docs/BuildOnVizing/Contract\\r\\n    */\\r\\n    function _exactInput(\\r\\n        uint64 destChainid,\\r\\n        uint256 amountIn\\r\\n    ) internal view returns (uint256 amountOut) {\\r\\n        return\\r\\n            IVizingGasSystemChannel(LaunchPad.gasSystemAddr()).exactInput(\\r\\n                destChainid,\\r\\n                amountIn\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// @notice Estimate the gas price we need to encode in message\\r\\n        /// @param value The native token that value target address will receive in the destination chain\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// @param additionParams The addition params for the message\\r\\n        ///        if not in expert mode, set to 0 (`new bytes(0)`)\\r\\n        /// @param message The message we want to send to the destination chain\\r\\n        /// see https://docs.vizing.com/docs/BuildOnVizing/Contract\\r\\n    */\\r\\n    function _estimateVizingGasFee(\\r\\n        uint256 value,\\r\\n        uint64 destChainid,\\r\\n        bytes memory additionParams,\\r\\n        bytes memory message\\r\\n    ) internal view returns (uint256 vizingGasFee) {\\r\\n        return\\r\\n            LaunchPad.estimateGas(value, destChainid, additionParams, message);\\r\\n    }\\r\\n\\r\\n    /*  \\r\\n        /// @notice **Highly recommend** to call this function in your frontend program\\r\\n        /// @notice Estimate the gas price we need to encode in message\\r\\n        /// @param value The native token that value target address will receive in the destination chain\\r\\n        /// @param destChainid The chain id of the destination chain\\r\\n        /// @param additionParams The addition params for the message\\r\\n        ///        if not in expert mode, set to 0 (`new bytes(0)`)\\r\\n        /// @param message The message we want to send to the destination chain\\r\\n        /// see https://docs.vizing.com/docs/BuildOnVizing/Contract\\r\\n    */\\r\\n    function estimateVizingGasFee(\\r\\n        uint256 value,\\r\\n        uint64 destChainid,\\r\\n        bytes calldata additionParams,\\r\\n        bytes calldata message\\r\\n    ) external view returns (uint256 vizingGasFee) {\\r\\n        return\\r\\n            _estimateVizingGasFee(value, destChainid, additionParams, message);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/MessageReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport {IMessageChannel} from \\\"./interface/IMessageChannel.sol\\\";\\r\\nimport {IMessageReceiver} from \\\"./interface/IMessageReceiver.sol\\\";\\r\\n\\r\\nabstract contract MessageReceiver is IMessageReceiver {\\r\\n    error LandingPadAccessDenied();\\r\\n    error NotImplement();\\r\\n    IMessageChannel public LandingPad;\\r\\n\\r\\n    modifier onlyVizingPad() {\\r\\n        if (msg.sender != address(LandingPad)) revert LandingPadAccessDenied();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address _LandingPad) {\\r\\n        __LandingPadInit(_LandingPad);\\r\\n    }\\r\\n\\r\\n    /*\\r\\n        /// rewrite set LandingPad address function\\r\\n        /// @notice call this function to reset the LaunchPad contract address\\r\\n        /// @param _LaunchPad The new LaunchPad contract address\\r\\n    */\\r\\n    function __LandingPadInit(address _LandingPad) internal virtual {\\r\\n        LandingPad = IMessageChannel(_LandingPad);\\r\\n    }\\r\\n\\r\\n    /// @notice the standard function to receive the omni-chain message\\r\\n    function receiveStandardMessage(\\r\\n        uint64 srcChainId,\\r\\n        uint256 srcContract,\\r\\n        bytes calldata message\\r\\n    ) external payable virtual override onlyVizingPad {\\r\\n        _receiveMessage(srcChainId, srcContract, message);\\r\\n    }\\r\\n\\r\\n    /// @dev override this function to handle the omni-chain message\\r\\n    /// @param srcChainId the source chain id\\r\\n    /// @param srcContract the source contract address\\r\\n    /// @param message the message from the source chain\\r\\n    function _receiveMessage(\\r\\n        uint64 srcChainId,\\r\\n        uint256 srcContract,\\r\\n        bytes calldata message\\r\\n    ) internal virtual {\\r\\n        (srcChainId, srcContract, message);\\r\\n        revert NotImplement();\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"@vizing/contracts/VizingOmni.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.23;\\r\\n\\r\\nimport {MessageEmitter} from \\\"./MessageEmitter.sol\\\";\\r\\nimport {MessageReceiver} from \\\"./MessageReceiver.sol\\\";\\r\\n\\r\\nabstract contract VizingOmni is MessageEmitter, MessageReceiver {\\r\\n    constructor(\\r\\n        address _vizingPad\\r\\n    ) MessageEmitter(_vizingPad) MessageReceiver(_vizingPad) {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/ChannelSlave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {LikwidSlaveChannel} from \\\"./lib/LikwidSlaveChannel.sol\\\";\\n\\ncontract ChannelSlave is LikwidSlaveChannel {\\n    constructor(\\n        uint64 _masterChainId,\\n        address _masterAddress,\\n        address _vizingPad\\n    ) LikwidSlaveChannel(_masterChainId, _masterAddress, _vizingPad) {\\n        minArrivalTime = 1 minutes;\\n        maxArrivalTime = 1 days;\\n        minGasLimit = 100000;\\n        maxGasLimit = 1000000;\\n        selectedRelayer = address(0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IChannelSlave.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IChannelSlave {\\n    function paramsEstimateGas(uint value, bytes memory params) external view returns (uint);\\n\\n    function paramsEmit2LaunchPad(uint bridgeFee, uint value, bytes memory params, address sender) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IFactoryBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IProductBase} from \\\"./IProductBase.sol\\\";\\n\\ninterface IFactoryBase {\\n    function getChannelAddress() external view returns (address);\\n\\n    function getProduct(string memory symbol_) external view returns (IProductBase);\\n\\n    function getSymbol(address _addr) external view returns (string memory);\\n\\n    function existProduct(address _addr) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IProductBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IProductBase {\\n    function setFeeAddress(address addr) external;\\n\\n    function setAirdropAddr(address addr) external;\\n\\n    function setCreatorAddr(address addr) external;\\n\\n    function setLaunchHardCap(uint amount) external;\\n\\n    function setLaunchTime(uint launchTime_) external;\\n\\n    function setNativeTotal(uint amount) external;\\n\\n    function setNativeMax(uint amount) external;\\n\\n    function setNativeMin(uint amount) external;\\n\\n    function setTokenMin(uint amount) external;\\n\\n    function actionCall(\\n        uint64 srcChainId,\\n        address sender,\\n        uint8 action,\\n        uint pongFee,\\n        bytes memory params\\n    ) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/lib/LikwidSlaveChannel.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {VizingOmni} from \\\"@vizing/contracts/VizingOmni.sol\\\";\\nimport {MessageTypeLib} from \\\"@vizing/contracts/library/MessageTypeLib.sol\\\";\\n\\nimport {IFactoryBase} from \\\"../interface/IFactoryBase.sol\\\";\\nimport {IProductBase} from \\\"../interface/IProductBase.sol\\\";\\nimport {IChannelSlave} from \\\"../interface/IChannelSlave.sol\\\";\\n\\nabstract contract LikwidSlaveChannel is Ownable, ReentrancyGuard, VizingOmni, IChannelSlave {\\n    uint64 public immutable override minArrivalTime;\\n    uint64 public immutable override maxArrivalTime;\\n    uint24 public immutable override minGasLimit;\\n    uint24 public immutable override maxGasLimit;\\n    bytes1 public immutable override defaultBridgeMode;\\n    address public immutable override selectedRelayer;\\n\\n    event MessageReceived(uint64 _srcChainId, address _srcAddress, uint value, bytes _payload);\\n    event MessageFailed(uint64 _srcChainId, address _srcAddress, bytes _payload, bytes _reason, uint _value);\\n    uint public messageFailed;\\n    uint public messageReceived;\\n\\n    uint64 masterChainId;\\n    address masterContract;\\n\\n    constructor(uint64 _masterChainId, address _masterAddress, address _vizingPad) VizingOmni(_vizingPad) {\\n        require(_masterChainId != 0, \\\"In contract deployment ...\\\");\\n        require(_masterAddress != address(0), \\\"In contract deployment ...\\\");\\n        masterChainId = _masterChainId;\\n        masterContract = _masterAddress;\\n        defaultBridgeMode = MessageTypeLib.STANDARD_ACTIVATE;\\n    }\\n\\n    IFactoryBase _factory;\\n\\n    function setFactory(address addr) public virtual onlyOwner {\\n        _factory = IFactoryBase(addr);\\n    }\\n\\n    //----vizing bridge common----\\n    function paramsEstimateGas(uint value, bytes memory params) public view virtual returns (uint) {\\n        bytes memory message = _packetMessage(\\n            defaultBridgeMode,\\n            masterContract,\\n            maxGasLimit,\\n            _fetchPrice(masterContract, masterChainId),\\n            abi.encode(address(0), params)\\n        );\\n        return LaunchPad.estimateGas(value, masterChainId, new bytes(0), message);\\n    }\\n\\n    function paramsEmit2LaunchPad(uint bridgeFee, uint value, bytes memory params, address sender) external payable {\\n        require(_factory.existProduct(_msgSender()), \\\"LikwidChannel: caller must be product\\\");\\n        bytes memory message = _packetMessage(\\n            defaultBridgeMode,\\n            masterContract,\\n            maxGasLimit,\\n            _fetchPrice(masterContract, masterChainId),\\n            abi.encode(sender, params)\\n        );\\n\\n        uint bridgeValue = value + bridgeFee;\\n        require(msg.value >= bridgeValue, \\\"bridgeFee err.\\\");\\n        LaunchPad.Launch{value: bridgeValue}(\\n            0,\\n            0,\\n            selectedRelayer,\\n            sender,\\n            value,\\n            masterChainId,\\n            new bytes(0),\\n            message\\n        );\\n    }\\n\\n    function verifySource(uint64 srcChainId, address srcContract) internal view virtual returns (bool authorized) {\\n        return srcChainId == masterChainId && srcContract == masterContract;\\n    }\\n\\n    function _receiveMessage(\\n        uint64 srcChainId,\\n        uint256 srcContract,\\n        bytes calldata _payload\\n    ) internal virtual override {\\n        require(verifySource(srcChainId, address(uint160(srcContract))), \\\"unauthorized.\\\");\\n        (address sender, bytes memory message) = abi.decode(_payload, (address, bytes));\\n        messageReceived += 1;\\n        emit MessageReceived(srcChainId, sender, msg.value, message);\\n\\n        _consumeMessage(srcChainId, sender, message);\\n    }\\n\\n    function _consumeMessage(uint64 srcChainId, address sender, bytes memory message) internal {\\n        (uint8 action, string memory symbol_, uint pongFee, bytes memory params) = abi.decode(\\n            message,\\n            (uint8, string, uint, bytes)\\n        );\\n        IProductBase product = _factory.getProduct(symbol_);\\n        require(address(product) != address(0), \\\"product err\\\");\\n        product.actionCall{value: msg.value}(srcChainId, sender, action, pongFee, params);\\n    }\\n\\n    function withdrawFee(address to, uint amount) public onlyOwner nonReentrant {\\n        transferNative(to, amount);\\n    }\\n\\n    function transferNative(address to, uint amount) internal {\\n        (bool success, ) = to.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Transfer failed.\\\");\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 100\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_masterChainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_masterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vizingPad\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LandingPadAccessDenied\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotImplement\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_reason\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"MessageFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"_srcChainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"MessageReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"LandingPad\",\"outputs\":[{\"internalType\":\"contract IMessageChannel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LaunchPad\",\"outputs\":[{\"internalType\":\"contract IMessageChannel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultBridgeMode\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"destChainid\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"additionParams\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"estimateVizingGasFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vizingGasFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxArrivalTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasLimit\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageFailed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"messageReceived\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minArrivalTime\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minGasLimit\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bridgeFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"paramsEmit2LaunchPad\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"paramsEstimateGas\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"srcChainId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"srcContract\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"receiveStandardMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"selectedRelayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ChannelSlave", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "100", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000006f66000000000000000000000000f118d466a09eb3994d329fbb9ab01c05b0ee302e0000000000000000000000005d77b0c9855f44a8fbef34e670e243e988682a82", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}