{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/TokenStorageLib.sol\": {\r\n      \"content\": \"/* SPDX-License-Identifier: apache-2.0 */\\n/**\\n * Copyright 2022 Monerium ehf.\\n *\\n * Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n * you may not use this file except in compliance with the License.\\n * You may obtain a copy of the License at\\n *\\n *     http://www.apache.org/licenses/LICENSE-2.0\\n *\\n * Unless required by applicable law or agreed to in writing, software\\n * distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n * See the License for the specific language governing permissions and\\n * limitations under the License.\\n */\\n\\npragma solidity 0.8.11;\\n\\n/*\\n * @title TokenStorageLib\\n * @dev Implementation of an[external storage for tokens.\\n */\\nlibrary TokenStorageLib {\\n    struct TokenStorage {\\n        mapping(address => uint) balances;\\n        mapping(address => mapping(address => uint)) allowed;\\n        uint256 totalSupply;\\n    }\\n\\n    /**\\n     * @dev Increases balance of an address.\\n     * @param self Token storage to operate on.\\n     * @param to Address to increase.\\n     * @param amount Number of units to add.\\n     */\\n    function addBalance(\\n        TokenStorage storage self,\\n        address to,\\n        uint256 amount\\n    ) external {\\n        self.totalSupply = self.totalSupply + amount;\\n        self.balances[to] = self.balances[to] + amount;\\n    }\\n\\n    /**\\n     * @dev Decreases balance of an address.\\n     * @param self Token storage to operate on.\\n     * @param from Address to decrease.\\n     * @param amount Number of units to subtract.\\n     */\\n    function subBalance(\\n        TokenStorage storage self,\\n        address from,\\n        uint256 amount\\n    ) external {\\n        self.totalSupply = self.totalSupply - amount;\\n        self.balances[from] = self.balances[from] - amount;\\n    }\\n\\n    /**\\n     * @dev Sets the allowance for a spender.\\n     * @param self Token storage to operate on.\\n     * @param owner Address of the owner of the tokens to spend.\\n     * @param spender Address of the spender.\\n     * @param amount Qunatity of allowance.\\n     */\\n    function setAllowed(\\n        TokenStorage storage self,\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) external {\\n        self.allowed[owner][spender] = amount;\\n    }\\n\\n    /**\\n     * @dev Returns the supply of tokens.\\n     * @param self Token storage to operate on.\\n     * @return Total supply.\\n     */\\n    function getSupply(TokenStorage storage self) external view returns (uint) {\\n        return self.totalSupply;\\n    }\\n\\n    /**\\n     * @dev Returns the balance of an address.\\n     * @param self Token storage to operate on.\\n     * @param who Address to lookup.\\n     * @return Number of units.\\n     */\\n    function getBalance(\\n        TokenStorage storage self,\\n        address who\\n    ) external view returns (uint) {\\n        return self.balances[who];\\n    }\\n\\n    /**\\n     * @dev Returns the allowance for a spender.\\n     * @param self Token storage to operate on.\\n     * @param owner Address of the owner of the tokens to spend.\\n     * @param spender Address of the spender.\\n     * @return Number of units.\\n     */\\n    function getAllowed(\\n        TokenStorage storage self,\\n        address owner,\\n        address spender\\n    ) external view returns (uint) {\\n        return self.allowed[owner][spender];\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[]", "ContractName": "TokenStorageLib", "CompilerVersion": "v0.8.11+commit.d7f03943", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}