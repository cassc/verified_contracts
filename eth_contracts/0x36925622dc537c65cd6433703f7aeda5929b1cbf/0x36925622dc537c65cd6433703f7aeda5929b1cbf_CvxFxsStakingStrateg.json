{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/math/SafeMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/fxs/CvxFxsStakingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport { IConcentratorStrategy } from \\\"../interfaces/IConcentratorStrategy.sol\\\";\\nimport { IConvexFXSDepositor } from \\\"../../interfaces/convex/IConvexFXSDepositor.sol\\\";\\nimport { ICvxFxsStaking } from \\\"../../interfaces/convex/ICvxFxsStaking.sol\\\";\\nimport { ICurveCryptoPool } from \\\"../../interfaces/ICurveCryptoPool.sol\\\";\\nimport { IZap } from \\\"../../interfaces/IZap.sol\\\";\\n\\nimport { ConcentratorStrategyBase } from \\\"../strategies/ConcentratorStrategyBase.sol\\\";\\n\\ncontract CvxFxsStakingStrategy is ConcentratorStrategyBase {\\n  using SafeERC20 for IERC20;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  // solhint-disable const-name-snakecase\\n  string public constant override name = \\\"CvxFxsStaking\\\";\\n\\n  /// @dev The address of FXS token.\\n  address private constant FXS = 0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0;\\n\\n  /// @dev The address of cvxFXS token.\\n  address private constant cvxFXS = 0xFEEf77d3f69374f66429C91d732A244f074bdf74;\\n\\n  /// @dev The address of Curve FXS/cvxFXS pool.\\n  address private constant CURVE_FXS_cvxFXS_POOL = 0xd658A338613198204DCa1143Ac3F01A722b5d94A;\\n\\n  /// @dev The address of Convex FXS => cvxFXS Contract.\\n  address private constant FXS_DEPOSITOR = 0x8f55d7c21bDFf1A51AFAa60f3De7590222A3181e;\\n\\n  /// @notice The address of CvxFxsStaking contract.\\n  address public constant staker = 0x49b4d1dF40442f0C31b1BbAEA3EDE7c38e37E31a;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(address _operator) {\\n    address[] memory _rewards = new address[](2);\\n    _rewards[0] = 0x3432B6A60D23Ca0dFCa7761B7ab56459D9C964D0; // FXS\\n    _rewards[1] = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B; // CVX\\n\\n    _initialize(_operator, _rewards);\\n\\n    IERC20(cvxFXS).safeApprove(staker, uint256(-1));\\n    IERC20(FXS).safeApprove(FXS_DEPOSITOR, uint256(-1));\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Sync reward tokens from CvxFxsStaking contract.\\n  function syncRewardToken() external {\\n    delete rewards;\\n\\n    uint256 _length = ICvxFxsStaking(staker).rewardTokenLength();\\n    for (uint256 i = 0; i < _length; i++) {\\n      rewards.push(ICvxFxsStaking(staker).rewardTokens(i));\\n    }\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function deposit(address, uint256 _amount) external override onlyOperator {\\n    if (_amount > 0) {\\n      ICvxFxsStaking(staker).stake(_amount);\\n    }\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function withdraw(address _recipient, uint256 _amount) external override onlyOperator {\\n    if (_amount > 0) {\\n      ICvxFxsStaking(staker).withdraw(_amount);\\n      IERC20(cvxFXS).safeTransfer(_recipient, _amount);\\n    }\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function harvest(address _zapper, address _intermediate) external override onlyOperator returns (uint256 _harvested) {\\n    require(_intermediate == FXS, \\\"intermediate not FXS\\\");\\n\\n    // 1. claim rewards from staking contract.\\n    address[] memory _rewards = rewards;\\n    uint256[] memory _amounts = new uint256[](rewards.length);\\n    for (uint256 i = 0; i < rewards.length; i++) {\\n      _amounts[i] = IERC20(_rewards[i]).balanceOf(address(this));\\n    }\\n    ICvxFxsStaking(staker).getReward(address(this));\\n    for (uint256 i = 0; i < rewards.length; i++) {\\n      _amounts[i] = IERC20(_rewards[i]).balanceOf(address(this)) - _amounts[i];\\n    }\\n\\n    // 2. zap all rewards (except cvxFXS) to FXS\\n    uint256 _amountFXS;\\n    for (uint256 i = 0; i < rewards.length; i++) {\\n      address _rewardToken = _rewards[i];\\n      uint256 _amount = _amounts[i];\\n      if (_rewardToken == FXS) {\\n        _amountFXS += _amount;\\n      } else if (_rewardToken == cvxFXS) {\\n        _harvested += _amount;\\n      } else if (_amount > 0) {\\n        IERC20(_rewardToken).safeTransfer(_zapper, _amount);\\n        _amountFXS += IZap(_zapper).zap(_rewardToken, _amount, FXS, 0);\\n      }\\n    }\\n\\n    // 3. swap FXS to cvxFXS\\n    if (_amountFXS > 0) {\\n      _harvested += _swapFXSToCvxFXS(_amountFXS, address(this));\\n    }\\n\\n    // 4. deposit\\n    if (_harvested > 0) {\\n      ICvxFxsStaking(staker).stake(_harvested);\\n    }\\n\\n    return _harvested;\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to swap FXS to cvxFXS\\n  /// @param _amountIn The amount of FXS to swap.\\n  /// @param _recipient The address of recipient who will recieve the cvxFXS.\\n  function _swapFXSToCvxFXS(uint256 _amountIn, address _recipient) internal returns (uint256) {\\n    // CRV swap to cvxFXS or stake to cvxFXS\\n    uint256 _amountOut = ICurveCryptoPool(CURVE_FXS_cvxFXS_POOL).get_dy(0, 1, _amountIn);\\n    bool useCurve = _amountOut > _amountIn;\\n\\n    if (useCurve) {\\n      IERC20(FXS).safeApprove(CURVE_FXS_cvxFXS_POOL, 0);\\n      IERC20(FXS).safeApprove(CURVE_FXS_cvxFXS_POOL, _amountIn);\\n      _amountOut = ICurveCryptoPool(CURVE_FXS_cvxFXS_POOL).exchange_underlying(0, 1, _amountIn, 0, _recipient);\\n    } else {\\n      uint256 _lockIncentive = IConvexFXSDepositor(FXS_DEPOSITOR).incentiveFxs();\\n      // if use `lock = false`, will possible take fee\\n      // if use `lock = true`, some incentive will be given\\n      _amountOut = IERC20(cvxFXS).balanceOf(address(this));\\n      if (_lockIncentive == 0) {\\n        // no lock incentive, use `lock = false`\\n        IConvexFXSDepositor(FXS_DEPOSITOR).deposit(_amountIn, false);\\n      } else {\\n        // no lock incentive, use `lock = true`\\n        IConvexFXSDepositor(FXS_DEPOSITOR).deposit(_amountIn, true);\\n      }\\n      _amountOut = IERC20(cvxFXS).balanceOf(address(this)) - _amountOut; // never overflow here\\n      if (_recipient != address(this)) {\\n        IERC20(cvxFXS).safeTransfer(_recipient, _amountOut);\\n      }\\n    }\\n    return _amountOut;\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/interfaces/IConcentratorStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IConcentratorStrategy {\\n  /// @notice Return then name of the strategy.\\n  function name() external view returns (string memory);\\n\\n  /// @notice Update the list of reward tokens.\\n  /// @param _rewards The address list of reward tokens to update.\\n  function updateRewards(address[] memory _rewards) external;\\n\\n  /// @notice Deposit token to corresponding strategy.\\n  /// @dev Requirements:\\n  ///   + Caller should make sure the token is already transfered into the strategy contract.\\n  ///   + Caller should make sure the deposit amount is greater than zero.\\n  ///\\n  /// @param _recipient The address of recipient who will receive the share.\\n  /// @param _amount The amount of token to deposit.\\n  function deposit(address _recipient, uint256 _amount) external;\\n\\n  /// @notice Withdraw underlying token or yield token from corresponding strategy.\\n  /// @dev Requirements:\\n  ///   + Caller should make sure the withdraw amount is greater than zero.\\n  ///\\n  /// @param _recipient The address of recipient who will receive the token.\\n  /// @param _amount The amount of token to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external;\\n\\n  /// @notice Harvest possible rewards from strategy.\\n  ///\\n  /// @param _zapper The address of zap contract used to zap rewards.\\n  /// @param _intermediate The address of intermediate token to zap.\\n  /// @return amount The amount of corresponding reward token.\\n  function harvest(address _zapper, address _intermediate) external returns (uint256 amount);\\n\\n  /// @notice Emergency function to execute arbitrary call.\\n  /// @dev This function should be only used in case of emergency. It should never be called explicitly\\n  ///  in any contract in normal case.\\n  ///\\n  /// @param _to The address of target contract to call.\\n  /// @param _value The value passed to the target contract.\\n  /// @param _data The calldata pseed to the target contract.\\n  function execute(\\n    address _to,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external payable returns (bool, bytes memory);\\n\\n  /// @notice Do some extra work before migration.\\n  /// @param _newStrategy The address of new strategy.\\n  function prepareMigrate(address _newStrategy) external;\\n\\n  /// @notice Do some extra work after migration.\\n  /// @param _newStrategy The address of new strategy.\\n  function finishMigrate(address _newStrategy) external;\\n}\\n\"\r\n    },\r\n    \"contracts/concentrator/strategies/ConcentratorStrategyBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\\\";\\n\\nimport \\\"../interfaces/IConcentratorStrategy.sol\\\";\\n\\n// solhint-disable reason-string\\n// solhint-disable no-empty-blocks\\n\\nabstract contract ConcentratorStrategyBase is IConcentratorStrategy, Initializable {\\n  using SafeERC20 for IERC20;\\n\\n  /// @notice The address of operator.\\n  address public operator;\\n\\n  /// @notice The list of rewards token.\\n  address[] public rewards;\\n\\n  /// @dev reserved slots.\\n  uint256[48] private __gap;\\n\\n  modifier onlyOperator() {\\n    require(msg.sender == operator, \\\"ConcentratorStrategy: only operator\\\");\\n    _;\\n  }\\n\\n  // fallback function to receive eth.\\n  receive() external payable {}\\n\\n  function _initialize(address _operator, address[] memory _rewards) internal {\\n    _checkRewards(_rewards);\\n\\n    operator = _operator;\\n    rewards = _rewards;\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function updateRewards(address[] memory _rewards) public virtual override onlyOperator {\\n    _checkRewards(_rewards);\\n\\n    delete rewards;\\n    rewards = _rewards;\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function execute(\\n    address _to,\\n    uint256 _value,\\n    bytes calldata _data\\n  ) external payable override onlyOperator returns (bool, bytes memory) {\\n    // solhint-disable-next-line avoid-low-level-calls\\n    (bool success, bytes memory result) = _to.call{ value: _value }(_data);\\n    return (success, result);\\n  }\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function prepareMigrate(address _newStrategy) external virtual override onlyOperator {}\\n\\n  /// @inheritdoc IConcentratorStrategy\\n  function finishMigrate(address _newStrategy) external virtual override onlyOperator {}\\n\\n  /// @dev Internal function to validate rewards list.\\n  /// @param _rewards The address list of reward tokens.\\n  function _checkRewards(address[] memory _rewards) internal pure {\\n    for (uint256 i = 0; i < _rewards.length; i++) {\\n      require(_rewards[i] != address(0), \\\"ConcentratorStrategy: zero reward token\\\");\\n      for (uint256 j = 0; j < i; j++) {\\n        require(_rewards[i] != _rewards[j], \\\"ConcentratorStrategy: duplicated reward token\\\");\\n      }\\n    }\\n  }\\n\\n  function _transferTokenBack(address _token, uint256 _amount) internal {\\n    // 2. transfer intermediate token back to operator.\\n    if (_token == address(0)) {\\n      // solhint-disable-next-line avoid-low-level-calls\\n      (bool _success, ) = msg.sender.call{ value: _amount }(\\\"\\\");\\n      require(_success, \\\"ConcentratorStrategy: transfer ETH failed\\\");\\n    } else {\\n      IERC20(_token).safeTransfer(msg.sender, _amount);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/IConvexFXSDepositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IConvexFXSDepositor {\\n  //deposit fxs for cvxFxs\\n  //can locking immediately or defer locking to someone else by paying a fee.\\n  function deposit(uint256 _amount, bool _lock) external;\\n\\n  function depositAll(bool _lock) external;\\n\\n  function lockFxs() external;\\n\\n  function incentiveFxs() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/convex/ICvxFxsStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n// solhint-disable func-name-mixedcase\\n\\ninterface ICvxFxsStaking is IERC20 {\\n  struct EarnedData {\\n    address token;\\n    uint256 amount;\\n  }\\n\\n  function rewardTokenLength() external view returns (uint256);\\n\\n  function rewardTokens(uint256) external view returns (address);\\n\\n  function rewardPerToken(address _rewardsToken) external view returns (uint256);\\n\\n  // Address and claimable amount of all reward tokens for the given account\\n  function claimableRewards(address _account) external view returns (EarnedData[] memory userRewards);\\n\\n  //set any claimed rewards to automatically go to a different address\\n  //set address to zero to disable\\n  function setRewardRedirect(address _to) external;\\n\\n  // deposit fxs for cvxfxs and stake\\n  function deposit(uint256 _amount, bool _lock) external;\\n\\n  // deposit fxs for cvxfxs and stake\\n  function deposit(uint256 _amount) external;\\n\\n  // deposit cvxfxs\\n  function stake(uint256 _amount) external;\\n\\n  // deposit all cvxfxs\\n  function stakeAll() external;\\n\\n  // deposit cvxfxs and accredit a different address\\n  function stakeFor(address _for, uint256 _amount) external;\\n\\n  // withdraw cvxfxs\\n  function withdraw(uint256 _amount) external;\\n\\n  // Claim all pending rewards\\n  function getReward(address _address) external;\\n\\n  // Claim all pending rewards and forward\\n  function getReward(address _address, address _forwardTo) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ICurveCryptoPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// solhint-disable func-name-mixedcase, var-name-mixedcase\\n\\n/// @dev This is the interface of Curve Crypto Pools (including Factory Pool), examples:\\n/// + cvxeth: https://curve.fi/cvxeth\\n/// + crveth: https://curve.fi/crveth\\n/// + eursusd: https://curve.fi/eursusd\\n/// + teth: https://curve.fi/teth\\n/// + spelleth: https://curve.fi/spelleth\\n\\n/// + FXS/ETH: https://curve.fi/factory-crypto/3\\n/// + YFI/ETH: https://curve.fi/factory-crypto/8\\n/// + AAVE/palStkAAVE: https://curve.fi/factory-crypto/9\\n/// + DYDX/ETH: https://curve.fi/factory-crypto/10\\n/// + SDT/ETH: https://curve.fi/factory-crypto/11\\n/// + BTRFLY/ETH: https://curve.fi/factory-crypto/17\\n/// + cvxFXS/FXS: https://curve.fi/factory-crypto/18\\ninterface ICurveCryptoPool {\\n  function lp_price() external view returns (uint256);\\n\\n  function price_oracle() external view returns (uint256);\\n\\n  function add_liquidity(uint256[2] memory amounts, uint256 min_mint_amount) external payable returns (uint256);\\n\\n  function calc_token_amount(uint256[2] memory amounts) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external returns (uint256);\\n\\n  function calc_withdraw_one_coin(uint256 token_amount, uint256 i) external view returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool use_eth\\n  ) external payable returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool use_eth,\\n    address receiver\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external payable returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    address receiver\\n  ) external payable returns (uint256);\\n\\n  function get_dy(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function token() external view returns (address);\\n}\\n\\n/// @dev This is the interface of Zap Contract for Curve Meta Crypto Pools, examples:\\n/// + eurtusd: https://curve.fi/eurtusd\\n/// + xautusd: https://curve.fi/xautusd\\ninterface IZapCurveMetaCryptoPool {\\n  function add_liquidity(uint256[4] memory amounts, uint256 min_mint_amount) external returns (uint256);\\n\\n  function calc_token_amount(uint256[4] memory amounts) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external;\\n\\n  function calc_withdraw_one_coin(uint256 token_amount, uint256 i) external view returns (uint256);\\n\\n  function exchange_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy\\n  ) external returns (uint256);\\n\\n  function get_dy_underlying(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function coins(uint256 index) external view returns (address);\\n\\n  function underlying_coins(uint256 index) external view returns (address);\\n\\n  function token() external view returns (address);\\n\\n  function base_pool() external view returns (address);\\n\\n  function pool() external view returns (address);\\n}\\n\\n/// @dev This is the interface of Curve Tri Crypto Pools, examples:\\n/// + tricrypto2: https://curve.fi/tricrypto2\\n/// + tricrypto: https://curve.fi/tricrypto\\ninterface ICurveTriCryptoPool {\\n  function add_liquidity(uint256[3] memory amounts, uint256 min_mint_amount) external;\\n\\n  function calc_token_amount(uint256[3] memory amounts, bool deposit) external view returns (uint256);\\n\\n  function remove_liquidity_one_coin(\\n    uint256 token_amount,\\n    uint256 i,\\n    uint256 min_amount\\n  ) external;\\n\\n  function calc_withdraw_one_coin(uint256 token_amount, uint256 i) external view returns (uint256);\\n\\n  function exchange(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx,\\n    uint256 min_dy,\\n    bool use_eth\\n  ) external;\\n\\n  function get_dy(\\n    uint256 i,\\n    uint256 j,\\n    uint256 dx\\n  ) external view returns (uint256);\\n\\n  function token() external view returns (address);\\n\\n  function coins(uint256 index) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IZap {\\n  function zap(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n\\n  function zapWithRoutes(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256[] calldata _routes,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n\\n  function zapFrom(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"finishMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_intermediate\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_harvested\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newStrategy\",\"type\":\"address\"}],\"name\":\"prepareMigrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staker\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"syncRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_rewards\",\"type\":\"address[]\"}],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CvxFxsStakingStrategy", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000daf03d70fe637b91ba6e521a32e1fb39256d3ec9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}