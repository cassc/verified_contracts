{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/accountAbstraction/compliance/Asset.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {AssetLibrary} from \\\"contracts/libraries/AssetLibrary.sol\\\";\\n\\n/**\\n * @title Asset\\n * @dev Represents an asset with its token address and the amount.\\n * @param token The address of the asset's token.\\n * @param amount The amount of the asset.\\n */\\nstruct Asset {\\n    address token;\\n    uint256 amount;\\n}\\n\\nusing AssetLibrary for Asset global;\\n\"\r\n    },\r\n    \"contracts/interfaces/base/CommonErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n/**\\n * @notice An error indicating that the amount for the specified token is zero.\\n * @param token The address of the token with a zero amount.\\n */\\nerror AmountMustNotBeZero(address token);\\n\\n/**\\n * @notice An error indicating that an address must not be zero.\\n */\\nerror AddressMustNotBeZero();\\n\\n/**\\n * @notice An error indicating that an array must not be empty.\\n */\\nerror ArrayMustNotBeEmpty();\\n\\n/**\\n * @notice An error indicating storage is already up to date and doesn't need further processing.\\n * @dev This error is thrown when attempting to update an entity(s) that is(are) already up to date.\\n */\\nerror AlreadyUpToDate();\\n\\n/**\\n * @notice An error indicating that an action is unauthorized for the specified account.\\n * @param account The address of the unauthorized account.\\n */\\nerror UnauthorizedAccount(address account);\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidityManagement/liquidityPool/Debt.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.22;\\n\\nimport {DebtManager} from \\\"contracts/liquidityManagement/liquidityPool/libraries/DebtManager.sol\\\";\\n\\n/**\\n * @title PoolDebt\\n * @notice This type of debt is created when a Liquidity Provider attempts to withdraw or claim funds\\n * while the pool does not have enough tokens to fulfill the request immediately.\\n * @notice Once created, this debt will be automatically settled by  the [`IDispatcher`](/interfaces/marginEngine/IDispatcher.sol/interface.IDispatcher.html) during the next liquidation or closure.\\n * @dev `creditor` The address of the liquidity provider.\\n * @dev `amount` The amount of the debt.\\n */\\nstruct PoolDebt {\\n    address creditor;\\n    uint256 amount;\\n}\\n\\nusing DebtManager for PoolDebt global;\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidityManagement/liquidityPool/IMerkleTreeWhitelist.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IMerkleTreeWhitelist {\\n    /**\\n     * @notice Sets the root hash of the Merkle tree used for on-chain proof verification.\\n     * @dev if `root` is `bytes32(type(uint256).max)`, Merkle Tree verification is disabled.\\n     *      (see [`IPool.deposit()`](/interfaces/liquidityManagement/liquidityPool/IPool.sol/interface.IPool.html#deposit)).\\n     * @param root new hash root of the Merkle tree.\\n     */\\n    function setRoot(bytes32 root) external;\\n\\n    /**\\n     * @notice Retrieves the current root hash of the Merkle tree used for on-chain proof verification.\\n     * @return root current hash root of the Merkle tree.\\n     */\\n    function getRoot() external view returns (bytes32 root);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidityManagement/liquidityPool/IPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\n/**\\n * @title IPool\\n * @notice Interface for a liquidity pool.\\n */\\ninterface IPool {\\n    /**\\n     * @notice Emitted when tokens are borrowed from the pool.\\n     * @param amount The amount of tokens borrowed.\\n     * @dev Emitted from [`borrow()`](#borrow).\\n     */\\n    event Borrowed(uint256 amount);\\n\\n    /**\\n     * @notice Emitted when tokens are claimed.\\n     * @param recipient The address of the recipient.\\n     * @param amount The amount of rewards claimed.\\n     * @dev Emitted from [`claim()`](#claim).\\n     */\\n    event Claimed(address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when tokens are deposited into a liquidity pool.\\n     * @param depositor The address of the depositor.\\n     * @param amount The amount of tokens deposited.\\n     * @dev Emitted from [`deposit()`](#deposit).\\n     */\\n    event Deposited(address indexed depositor, uint256 amount);\\n\\n    /**\\n     * @notice Emitted when tokens are returned to the pool, repaying debts, and triggering an epoch switch.\\n     * @param distributed The amount of tokens distributed as rewards in the current epoch.\\n     * @param returned The amount of tokens used to repay debts.\\n     * @dev Emitted from [`returnAndDistribute()`](#returnanddistribute).\\n     */\\n    event Returned(uint256 returned, uint256 distributed);\\n\\n    /**\\n     * @notice Emitted when tokens are withdrawn from the pool.\\n     * @param amount The amount of tokens withdrawn.\\n     * @param recipient The address of the recipient.\\n     * @dev Emitted from [`withdraw()`](#withdraw).\\n     */\\n    event Withdrawn(address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Fired from [`borrow()`](#borrow).\\n     * @dev Error indicating that the borrower's requested amount exceeds the available balance in the pool.\\n     */\\n    error BorrowAmountExceedsBalance();\\n\\n    /**\\n     * @notice Error indicating that the Merkle tree verification failed.\\n     * @dev Fired from [`deposit()`](#deposit).\\n     */\\n    error MerkleTreeVerificationFailed();\\n\\n    /**\\n     * @notice Error indicating that the total deposit threshold has been exceeded by the user's deposit.\\n     * @dev Fired from [`deposit()`](#deposit).\\n     */\\n    error TotalDepositThresholdExceeded();\\n\\n    /**\\n     * @notice Error indicating that there are no pending rewards for the user.\\n     * @dev Fired from [`claim()`](#claim).\\n     */\\n    error NoPendingRewards();\\n\\n    /**\\n     * @notice Error indicating that the user is trying to withdraw an amount greater than their position's value.\\n     * @dev Fired from [`withdraw()`](#withdraw).\\n     */\\n    error WithdrawAmountExceedsBalance();\\n\\n    /**\\n     * @notice Allows whitelisted addresses to deposit tokens into the liquidity pool.\\n     * @dev If verification is not disabled (see [`IMerkleTreeWhitelist.setRoot()`](/interfaces/liquidityManagement/liquidityPool/IMerkleTreeWhitelist.sol/interface.IMerkleTreeWhitelist.html#setroot)),\\n     *      it requires a valid Merkle Proof for `msg.sender` to confirm deposit authorization.\\n     * @dev Throws a [`TotalDepositThresholdExceeded()`](#totaldepositthresholdexceeded) error if `amount` + `token.balanceOf(pool)` exceeds [`thresholdOnTotalDeposit()`](#thresholdontotaldeposit).\\n     * @dev Emits a [`Deposited()`](#deposited) event on successful deposit.\\n     * @param amount The amount of tokens to deposit.\\n     * @param permission Merkle Proof for `msg.sender`, confirming deposit authorization.\\n     */\\n    function deposit(uint128 amount, bytes32[] calldata permission) external;\\n\\n    /**\\n     * @notice Allows a user to withdraw tokens from the liquidity pool.\\n     * @dev If the pool has a sufficient token balance, tokens will be sent immediately to the specified `recipient`.\\n     *      Otherwise, the withdrawal amount will be added to the debt queue for processing during [`returnAndDistribute()`](#returnanddistribute).\\n     * @dev If `recipient` is `address(0)`, it will be changed to `msg.sender`.\\n     * @dev Throws a [`WithdrawAmountExceedsBalance()`](#withdrawamountexceedsbalance) error if the user has an insufficient balance.\\n     * @dev Emits a [`Withdrawn()`](#withdrawn) event on successful withdrawal.\\n     * @param amount The amount of tokens to withdraw.\\n     * @param recipient The address that will receive the withdrawn tokens. If `address(0)` is passed, it will be changed to `msg.sender`.\\n     */\\n    function withdraw(uint128 amount, address recipient) external;\\n\\n    /**\\n     * @notice Allows a user to claim rewards earned in the liquidity pool.\\n     * @dev If the pool has a sufficient token balance, rewards will be sent immediately to the `recipient`.\\n     *      Otherwise, the rewards will be added to the debt queue for processing during [`returnAndDistribute()`](#returnanddistribute).\\n     * @dev If `recipient` is `address(0)`, it will be changed to `msg.sender`.\\n     * @dev Throws a [`NoPendingRewards()`](#nopendingrewards) error if the user has no pending rewards (see [`getPendingRewards()`](#getpendingrewards)).\\n     * @dev Emits a [`Claimed()`](#claimed) event on successful claim.\\n     * @param recipient The address to receive the claimed rewards. If `address(0)` is passed, it will be changed to `msg.sender`.\\n     */\\n    function claim(address recipient) external;\\n\\n    /**\\n     * @notice Allows authorized addresses to borrow tokens from the pool.\\n     * @dev Requires `msg.sender` to have the `keccak256('BORROWER_ROLE')` role within the pool contract,\\n     *      otherwise, it throws an `\\\"AccessControl: account msg.sender is missing role keccak256('BORROWER_ROLE')\\\"` error.\\n     * @dev Throws a [`BorrowAmountExceedsBalance()`](#borrowamountexceedsbalance) error if the pool's token balance is less than the requested amount.\\n     * @dev Emits a [`Borrowed()`](#borrowed) event on successful borrow.\\n     * @param amount The amount of tokens to borrow.\\n     */\\n    function borrow(uint256 amount) external;\\n\\n    /**\\n     * @notice Allows authorized addresses to deposit tokens into the liquidity pool, pay off as many debts as possible,\\n     * distribute rewards for the current epoch, and start a new epoch.\\n     * @dev Requires `msg.sender` to have the `keccak256('REPAYER_ROLE')` role within the pool contract;\\n     *      otherwise, it throws an `\\\"AccessControl: account msg.sender is missing role keccak256('REPAYER_ROLE')\\\"` error.\\n     * @dev Emits a [`Returned()`](#returned) event upon successful return.\\n     * @param amount Amount of tokens used for debt payment.\\n     * @param rewards Amount of tokens to distribute as rewards for the current epoch.\\n     */\\n    function returnAndDistribute(uint256 amount, uint256 rewards) external;\\n\\n    /**\\n     * @notice Returns the token address associated with the pool.\\n     * @return Token address.\\n     */\\n    function token() external view returns (address);\\n\\n    /**\\n     * @notice Returns the current threshold on the total deposit value. The pool's token balance cannot exceed this threshold.\\n     * @return Current threshold value.\\n     */\\n    function thresholdOnTotalDeposit() external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the pending rewards that a user can claim.\\n     * @param user address for which to calculate rewards.\\n     * @return rewards amount of tokens that the user can claim right now.\\n     */\\n    function getPendingRewards(address user) external view returns (uint256 rewards);\\n\\n    /**\\n     * @notice Retrieves the amount of tokens owned by a user in the pool.\\n     * @param user address.\\n     * @return balance amount of tokens.\\n     */\\n    function getPositionInfo(address user) external view returns (uint256 balance);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidityManagement/liquidityPool/IPoolInitializer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface IPoolInitializer {\\n    function initialize(\\n        address borrower,\\n        address token_,\\n        uint256 thresholdOnTotalDeposit_\\n    ) external;\\n\\n    function setFund(address fund) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidityManagement/liquidityPool/ISuspendable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\ninterface ISuspendable {\\n    /**\\n     * @notice Forbids to make deposit to anyone. Only withdrawal will be possible\\n     * reverts if pool is suspended\\n     */\\n    function suspend() external;\\n\\n    /**\\n     * @notice Allows to make both deposit and withdrawal\\n     * reverts if pool is not suspended\\n     */\\n    function unsuspend() external;\\n\\n    function isSuspended() external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidityManagement/liquidityPool/Queue.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.22;\\n\\nimport {PoolDebt} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/Debt.sol\\\";\\nimport {QueueLibrary} from \\\"contracts/liquidityManagement/liquidityPool/libraries/QueueLibrary.sol\\\";\\n\\n/**\\n * @title Queue\\n * @notice Represents a queue structure.\\n * @dev `head` The index of the first element in the queue.\\n * @dev `elements` An array of elements of type [`PoolDebt`](/interfaces/liquidityManagement/liquidityPool/Debt.sol/struct.PoolDebt.html).\\n */\\nstruct Queue {\\n    uint256 head;\\n    PoolDebt[] elements;\\n}\\n\\n/**\\n * @dev Error indicating that the queue is empty and no elements are available.\\n */\\nerror QueueIsEmpty();\\n\\nusing QueueLibrary for Queue global;\\n\"\r\n    },\r\n    \"contracts/interfaces/liquidityManagement/liquidityPool/Staking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.22;\\n\\nimport {\\n    PositionManager\\n} from \\\"contracts/liquidityManagement/liquidityPool/libraries/staking/PositionManager.sol\\\";\\nimport {\\n    RewardsMath\\n} from \\\"contracts/liquidityManagement/liquidityPool/libraries/staking/RewardsMath.sol\\\";\\n\\nuint256 constant DENOMINATOR = 1e18;\\n\\n/* solhint-disable var-name-mixedcase */\\n\\n/**\\n * @title Staking\\n * @notice TPSS is a token reward unit per staked token unit per staked time unit.\\n * @dev For example, if TPSS is 2.5e-6 USDT per 1 USDT staked per second,\\n * a user staking 200 USDT for 2 days will receive a reward of (200 * 2 * 86400 * 2.5e-6) USDT.\\n * @dev `numberOfEpochs`: Slot 0, updated during distribution.\\n * @dev `TPSS`: Slot 0, updated during distribution. Represents Token reward per staked token unit per staked time unit.\\n * @dev `totalDeposited`: Slot 1, updated during deposit or withdrawal.\\n * @dev `timeWhenVolumeWasLastUpdated`: Slot 2, updated during deposit, withdrawal, or distribution.\\n * @dev `tokenVolume`: Slot 2, updated during deposit, withdrawal, or distribution.\\n * @dev `users`: Mapping of addresses to User positions.\\n * @dev `linkedListTPSS`: Mapping for epoch TPSS.\\n * @dev `TPSS2TPS`: Mapping from TPSS to TPS in the epoch. \\\"Token Per Stake\\\" cannot be derived from \\\"Token Per Stake per Second\\\"\\n * unless all epochs are equal in duration which is practically impossible. Thus to know TPS differences when calculating rewards\\n * for the whole number of epochs, we must know boundaries in TPS, not TPSS.\\n * @dev `epochStartTime`: Mapping for epoch start time.\\n */\\nstruct Staking {\\n    // 0 slot, updated on distribution\\n    uint16 numberOfEpochs;\\n    // solhint-disable-next-line var-name-mixedcase\\n    uint240 TPSS;\\n    // 1 slot, updated on deposit | withdraw\\n    uint256 totalDeposited;\\n    // 2 slot, updated on deposit | withdraw | distribution\\n    uint64 timeWhenVolumeWasLastUpdated;\\n    uint192 tokenVolume;\\n    mapping(address user => User position) users;\\n    mapping(uint256 previousEpochTPSS => uint256 nextEpochTPSS) linkedListTPSS;\\n    // solhint-disable-next-line var-name-mixedcase\\n    mapping(uint256 epochTPSS => uint256 epochTPS) TPSS2TPS;\\n    mapping(uint256 epochTPSS => uint256 epochStartTimestamp) epochStartTime;\\n}\\n\\n/**\\n * @title IncompleteEpoch\\n * @notice Represents an incomplete epoch structure.\\n * @dev `epochNum`: Slot 0, updated during deposit or withdrawal. Represents the epoch number.\\n * @dev `TPSS`: Slot 0, updated during deposit or withdrawal. Represents the Token reward per staked token unit per staked time unit.\\n * @dev `timeWhenUserVolumeWasLastUpdated`: Slot 1, updated during deposit or withdrawal.\\n * @dev `volume`: Slot 1, updated during deposit or withdrawal. Represents the volume.\\n */\\nstruct IncompleteEpoch {\\n    uint16 epochNum;\\n    uint240 TPSS;\\n    uint64 timeWhenUserVolumeWasLastUpdated;\\n    uint192 volume;\\n}\\n\\n/**\\n * @title User\\n * @notice Represents a user's staking information.\\n * @dev `balance`: The user's staked token balance.\\n * @dev `accumulatedRewards`: The total rewards accumulated by the user.\\n * @dev `depositEpoch`: The [`IncompleteEpoch`](./struct.IncompleteEpoch.html) structure representing the user's deposit information.\\n */\\nstruct User {\\n    uint128 balance;\\n    uint128 accumulatedRewards;\\n    IncompleteEpoch depositEpoch;\\n}\\n\\n/**\\n * @notice Thrown when borrower tries to finish the\\n * epoch by distributing the rewards, but epoch volume is zero.\\n */\\nerror TokenVolumeIsZero();\\n\\n/**\\n * @notice Thrown when tried to finish the epoch with zero interest.\\n */\\nerror InterestMustBeGreaterThanZero();\\n\\n/**\\n * @notice Thrown when tried to finish the epoch with insufficient\\n * interest meaning after math the TPSS increment will be zero.\\n */\\nerror InterestInsufficient();\\n\\n/**\\n * @notice If this error is thrown, then it means that there is missing\\n * check on rewards != 0 somewhere in the code.\\n */\\nerror CannotStartNewEpochWithSameTPSS();\\n\\nusing {PositionManager.increasePosition, PositionManager.decreasePosition} for Staking global;\\nusing {\\n    RewardsMath.updateUserRewards,\\n    RewardsMath.increaseInterest,\\n    RewardsMath.claimRewards,\\n    RewardsMath.getUserRewards\\n} for Staking global;\\n\\n/* solhint-enable var-name-mixedcase */\\n\"\r\n    },\r\n    \"contracts/libraries/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nlibrary Address {\\n    address internal constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    function set(bytes32 _slot, address _value) internal {\\n        assembly {\\n            sstore(_slot, _value)\\n        }\\n    }\\n\\n    function get(bytes32 _slot) internal view returns (address result_) {\\n        assembly {\\n            result_ := sload(_slot)\\n        }\\n    }\\n\\n    function isEth(address _token) internal pure returns (bool) {\\n        return _token == ETH || _token == address(0);\\n    }\\n\\n    function sort(address _a, address _b) internal pure returns (address, address) {\\n        return _a < _b ? (_a, _b) : (_b, _a);\\n    }\\n\\n    function sort(address[4] memory _array) internal pure returns (address[4] memory _sorted) {\\n        // Sorting network for the array of length 4\\n        (_sorted[0], _sorted[1]) = sort(_array[0], _array[1]);\\n        (_sorted[2], _sorted[3]) = sort(_array[2], _array[3]);\\n\\n        (_sorted[0], _sorted[2]) = sort(_sorted[0], _sorted[2]);\\n        (_sorted[1], _sorted[3]) = sort(_sorted[1], _sorted[3]);\\n        (_sorted[1], _sorted[2]) = sort(_sorted[1], _sorted[2]);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/AssetLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {SafeTransferLib} from \\\"solady/src/utils/SafeTransferLib.sol\\\";\\n\\nimport {Asset} from \\\"contracts/interfaces/accountAbstraction/compliance/Asset.sol\\\";\\nimport {AmountMustNotBeZero} from \\\"contracts/interfaces/base/CommonErrors.sol\\\";\\n\\nimport {Address} from \\\"./Address.sol\\\";\\n\\nlibrary AssetLibrary {\\n    using SafeTransferLib for address;\\n    using Address for address;\\n\\n    error NotEnoughReceived(address token, uint256 expected, uint256 received);\\n\\n    function forward(Asset calldata _self, address _to) internal {\\n        if (_self.amount == 0) revert AmountMustNotBeZero(_self.token);\\n\\n        if (_self.token.isEth()) _to.safeTransferETH(_self.amount);\\n        else _self.token.safeTransferFrom(msg.sender, _to, _self.amount);\\n    }\\n\\n    function enforceReceived(Asset calldata _self) internal view {\\n        if (_self.amount == 0) revert AmountMustNotBeZero(_self.token);\\n\\n        uint256 balance = _self.token.isEth()\\n            ? address(this).balance\\n            : _self.token.balanceOf(address(this));\\n\\n        if (balance < _self.amount) revert NotEnoughReceived(_self.token, _self.amount, balance);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidityManagement/liquidityPool/base/Suspendable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.22;\\n\\nimport {\\n    AccessControlUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\\\";\\nimport {\\n    PausableUpgradeable\\n} from \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport {\\n    ISuspendable\\n} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/ISuspendable.sol\\\";\\n\\ncontract Suspendable is ISuspendable, AccessControlUpgradeable, PausableUpgradeable {\\n    bytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\n    function suspend() external override onlyRole(PAUSER_ROLE) {\\n        _pause();\\n    }\\n\\n    function unsuspend() external override onlyRole(PAUSER_ROLE) {\\n        _unpause();\\n    }\\n\\n    function isSuspended() external view override returns (bool) {\\n        return paused();\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Suspendable_init() internal onlyInitializing {\\n        __AccessControl_init();\\n        __Pausable_init();\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidityManagement/liquidityPool/libraries/DebtManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.22;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {Asset} from \\\"contracts/interfaces/accountAbstraction/compliance/Asset.sol\\\";\\nimport {PoolDebt} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/Debt.sol\\\";\\nimport {Queue} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/Queue.sol\\\";\\n\\nlibrary DebtManager {\\n    using {canRepay, dequeueAndRepay} for Queue;\\n    using {partialRepay} for PoolDebt;\\n    using SafeERC20 for IERC20;\\n\\n    function create(Queue storage self, uint256 amount, address creditor) internal {\\n        self.enqueue(PoolDebt(creditor, amount));\\n    }\\n\\n    function tryRepay(Queue storage self, address token, uint256 amount) internal {\\n        Asset memory asset = Asset(token, amount);\\n\\n        while (self.canRepay(asset)) {\\n            tryRepay(self, asset);\\n        }\\n    }\\n\\n    function tryRepay(Queue storage self, Asset memory asset) private {\\n        PoolDebt storage debt = self.peek();\\n\\n        if (debt.amount > asset.amount) debt.partialRepay(asset);\\n        else self.dequeueAndRepay(asset);\\n    }\\n\\n    function partialRepay(PoolDebt storage self, Asset memory asset) private {\\n        self.amount -= asset.amount;\\n        IERC20(asset.token).safeTransfer(self.creditor, asset.amount);\\n\\n        delete asset.amount;\\n    }\\n\\n    function dequeueAndRepay(Queue storage self, Asset memory asset) private {\\n        PoolDebt memory debt = self.dequeue();\\n        IERC20(asset.token).safeTransfer(debt.creditor, debt.amount);\\n\\n        asset.amount -= debt.amount;\\n    }\\n\\n    function canRepay(Queue storage self, Asset memory asset) private view returns (bool) {\\n        bool debtExists = !self.isEmpty();\\n        return debtExists && asset.amount > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidityManagement/liquidityPool/libraries/MerkleTreeRepository.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.22;\\n\\nimport {MerkleProofLib} from \\\"solady/src/utils/MerkleProofLib.sol\\\";\\n\\nlibrary MerkleTreeRepository {\\n    bytes32 internal constant DISABLE_VERIFICATION = bytes32(type(uint256).max);\\n    bytes32 private constant ROOT_SLOT = keccak256(\\\"MerkleTreeRepository root slot V1\\\");\\n\\n    function setRoot(bytes32 _newRoot) internal {\\n        bytes32 slot = ROOT_SLOT;\\n        assembly {\\n            sstore(slot, _newRoot)\\n        }\\n    }\\n\\n    function getRoot() internal view returns (bytes32 root) {\\n        bytes32 slot = ROOT_SLOT;\\n        assembly {\\n            root := sload(slot)\\n        }\\n    }\\n\\n    function verify(\\n        bytes32[] calldata _proof,\\n        address _leaf,\\n        bytes32 _root\\n    ) internal pure returns (bool) {\\n        if (_root == DISABLE_VERIFICATION) return true;\\n        else return MerkleProofLib.verifyCalldata(_proof, _root, computeLeaf(_leaf));\\n    }\\n\\n    function computeLeaf(address _leaf) private pure returns (bytes32) {\\n        return keccak256(abi.encode(_leaf));\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidityManagement/liquidityPool/libraries/QueueLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.22;\\n\\nimport {PoolDebt} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/Debt.sol\\\";\\nimport {\\n    Queue,\\n    QueueIsEmpty\\n} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/Queue.sol\\\";\\n\\nlibrary QueueLibrary {\\n    function enqueue(Queue storage self, PoolDebt memory element) internal {\\n        self.elements.push(element);\\n    }\\n\\n    function dequeue(Queue storage self) internal returns (PoolDebt storage result) {\\n        if (isEmpty(self)) revert QueueIsEmpty();\\n        result = self.elements[self.head++];\\n    }\\n\\n    function peek(Queue storage self) internal view returns (PoolDebt storage) {\\n        return self.elements[self.head];\\n    }\\n\\n    function getLength(Queue storage self) internal view returns (uint256) {\\n        return self.elements.length - self.head;\\n    }\\n\\n    function isEmpty(Queue storage self) internal view returns (bool) {\\n        return getLength(self) == 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidityManagement/liquidityPool/libraries/staking/PositionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.22;\\n\\nimport {Staking} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/Staking.sol\\\";\\n\\nlibrary PositionManager {\\n    function increasePosition(Staking storage self, address user, uint128 amount) internal {\\n        self.updateUserRewards(user);\\n        self.users[user].balance += amount;\\n        self.totalDeposited += amount;\\n    }\\n\\n    function decreasePosition(Staking storage self, address user, uint128 amount) internal {\\n        self.updateUserRewards(user);\\n        self.users[user].balance -= amount;\\n        self.totalDeposited -= amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/liquidityManagement/liquidityPool/libraries/staking/RewardsMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.22;\\n\\nimport {\\n    CannotStartNewEpochWithSameTPSS,\\n    DENOMINATOR,\\n    IncompleteEpoch,\\n    InterestInsufficient,\\n    InterestMustBeGreaterThanZero,\\n    Staking,\\n    TokenVolumeIsZero\\n} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/Staking.sol\\\";\\n\\n/* solhint-disable not-rely-on-time, ordering */\\nlibrary RewardsMath {\\n    using {\\n        updateUserRewards,\\n        updateUserVolume,\\n        updateEpochVolume,\\n        calculateVolumeSinceLastUpdate,\\n        isEpochPassedSinceUserDeposited,\\n        startNewEpoch\\n    } for Staking;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL INTERFACE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function updateUserRewards(Staking storage self, address user) internal {\\n        self.updateEpochVolume();\\n        self.updateUserVolume(user);\\n\\n        if (self.isEpochPassedSinceUserDeposited(user)) {\\n            uint128 newReward = calculateNewUserRewards(self, user);\\n\\n            self.users[user].accumulatedRewards += newReward;\\n\\n            if (newReward > 0) setUserUFEStartingFromTheStartOfTheCurrentEpoch(self, user);\\n        }\\n\\n        self.users[user].depositEpoch.TPSS = self.TPSS;\\n    }\\n\\n    function increaseInterest(Staking storage self, uint256 amount) internal {\\n        if (amount == 0) revert InterestMustBeGreaterThanZero();\\n\\n        self.updateEpochVolume();\\n        if (self.tokenVolume == 0) revert TokenVolumeIsZero();\\n\\n        uint256 passingEpochTPSS = self.TPSS;\\n        uint240 incrementTPSS = uint240((amount * DENOMINATOR) / (self.tokenVolume));\\n        if (incrementTPSS == 0) revert InterestInsufficient();\\n        self.TPSS += incrementTPSS;\\n        self.startNewEpoch(passingEpochTPSS);\\n    }\\n\\n    function claimRewards(Staking storage self, address user) internal returns (uint256 rewards_) {\\n        self.updateUserRewards(user);\\n        rewards_ = self.users[user].accumulatedRewards;\\n\\n        self.users[user].accumulatedRewards = 0;\\n    }\\n\\n    function getUserRewards(\\n        Staking storage self,\\n        address user\\n    ) internal view returns (uint256 rewards_) {\\n        rewards_ = self.users[user].accumulatedRewards;\\n\\n        if (self.isEpochPassedSinceUserDeposited(user)) {\\n            rewards_ += calculateNewUserRewards(self, user);\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        PRIVATE METHODS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function calculateNewUserRewards(\\n        Staking storage self,\\n        address user\\n    ) private view returns (uint128 newReward) {\\n        uint256 rewardForTheIncompleteEpoch = calculateUserRewardsForIncompleteFirstEpoch(\\n            self,\\n            user\\n        );\\n\\n        uint256 rewardForTheRemainingEpochs = calculateUserRewardsForTheWholeNumberOfEpochs(\\n            self,\\n            user\\n        );\\n\\n        newReward = uint128(\\n            (rewardForTheIncompleteEpoch + rewardForTheRemainingEpochs) / DENOMINATOR\\n        );\\n    }\\n\\n    function isEpochPassedSinceUserDeposited(\\n        Staking storage self,\\n        address user\\n    ) private view returns (bool) {\\n        IncompleteEpoch storage depositEpoch = self.users[user].depositEpoch;\\n\\n        uint256 nextTPSSFromUserDepositEpoch = self.linkedListTPSS[depositEpoch.TPSS];\\n        return nextTPSSFromUserDepositEpoch > 0;\\n    }\\n\\n    function calculateUserRewardsForIncompleteFirstEpoch(\\n        Staking storage self,\\n        address user\\n    ) private view returns (uint256 _reward) {\\n        IncompleteEpoch storage depositEpoch = self.users[user].depositEpoch;\\n\\n        uint256 nextEpochTPSS = self.linkedListTPSS[depositEpoch.TPSS];\\n        uint256 userFirstEpochTPSS = nextEpochTPSS - depositEpoch.TPSS;\\n\\n        uint192 userVolume;\\n        if (depositEpoch.timeWhenUserVolumeWasLastUpdated != block.timestamp) {\\n            (userVolume, ) = calculateNewUserVolume(self, depositEpoch, user);\\n        }\\n\\n        _reward = (depositEpoch.volume + userVolume) * userFirstEpochTPSS;\\n    }\\n\\n    function calculateUserRewardsForTheWholeNumberOfEpochs(\\n        Staking storage self,\\n        address user\\n    ) private view returns (uint256 reward_) {\\n        IncompleteEpoch storage depositEpoch = self.users[user].depositEpoch;\\n        bool isUserStakedAtLeastOneWholeEpoch = self.numberOfEpochs > depositEpoch.epochNum + 1;\\n\\n        if (isUserStakedAtLeastOneWholeEpoch) {\\n            uint256 lastDistributionTPS = self.TPSS2TPS[self.TPSS];\\n            // First whole epoch of the user begins at the distribution\\n            // for the epoch when he updated his position last time.\\n            uint256 userFirstWholeEpochTPS = self.TPSS2TPS[self.linkedListTPSS[depositEpoch.TPSS]];\\n            uint256 tps = lastDistributionTPS - userFirstWholeEpochTPS;\\n            // \\\"Token Per Stake\\\" means how many rewards is accrued by the 1 unit of position.\\n            reward_ = tps * self.users[user].balance;\\n        }\\n    }\\n\\n    function startNewEpoch(Staking storage self, uint256 passingEpochTPSS) private {\\n        if (passingEpochTPSS == self.TPSS) revert CannotStartNewEpochWithSameTPSS();\\n\\n        self.linkedListTPSS[passingEpochTPSS] = self.TPSS;\\n\\n        uint256 passingEpochDuration = block.timestamp - self.epochStartTime[passingEpochTPSS];\\n        uint256 accruedTPS = (self.TPSS - passingEpochTPSS) * passingEpochDuration;\\n        self.TPSS2TPS[self.TPSS] = self.TPSS2TPS[passingEpochTPSS] + accruedTPS;\\n\\n        self.tokenVolume = 0;\\n        self.epochStartTime[self.TPSS] = block.timestamp;\\n        self.numberOfEpochs++;\\n    }\\n\\n    function updateEpochVolume(Staking storage self) private {\\n        self.tokenVolume += calculateVolumeSinceLastUpdate(self);\\n        self.timeWhenVolumeWasLastUpdated = uint64(block.timestamp);\\n    }\\n\\n    function calculateVolumeSinceLastUpdate(\\n        Staking storage self\\n    ) private view returns (uint192 newEpochVolume) {\\n        if (self.timeWhenVolumeWasLastUpdated > 0) {\\n            uint256 timePassedFromLastUpdate = block.timestamp - self.timeWhenVolumeWasLastUpdated;\\n            newEpochVolume = uint192(self.totalDeposited * timePassedFromLastUpdate);\\n        }\\n    }\\n\\n    function updateUserVolume(Staking storage self, address user) private {\\n        IncompleteEpoch storage depositEpoch = self.users[user].depositEpoch;\\n\\n        (uint192 userVolume, uint64 userVolumeUpdateTime) = calculateNewUserVolume(\\n            self,\\n            depositEpoch,\\n            user\\n        );\\n\\n        depositEpoch.volume += userVolume;\\n        depositEpoch.timeWhenUserVolumeWasLastUpdated = userVolumeUpdateTime;\\n\\n        if (needToInitializeUserUFE(self, user)) {\\n            initializeUserUFE(self, user);\\n        }\\n    }\\n\\n    function calculateNewUserVolume(\\n        Staking storage self,\\n        IncompleteEpoch storage depositEpoch,\\n        address user\\n    ) private view returns (uint192 userVolume, uint64 userVolumeUpdateTime) {\\n        uint256 timeWhenUserVolumeWasLastUpdated = depositEpoch.timeWhenUserVolumeWasLastUpdated;\\n        uint256 lastBalance = self.users[user].balance;\\n\\n        // if epoch when user have changed his deposit == current epoch\\n        if (self.numberOfEpochs == depositEpoch.epochNum && timeWhenUserVolumeWasLastUpdated > 0) {\\n            userVolume = uint192(\\n                lastBalance * (block.timestamp - timeWhenUserVolumeWasLastUpdated)\\n            );\\n            userVolumeUpdateTime = uint64(block.timestamp);\\n\\n            // if epoch when user have changed his deposit < current epoch\\n        } else {\\n            uint256 nextTPSSFromUserDepositEpoch = self.linkedListTPSS[depositEpoch.TPSS];\\n            uint256 epochEndTime = self.epochStartTime[nextTPSSFromUserDepositEpoch];\\n\\n            if (timeWhenUserVolumeWasLastUpdated < epochEndTime && lastBalance > 0) {\\n                userVolume = uint192(\\n                    lastBalance * (epochEndTime - timeWhenUserVolumeWasLastUpdated)\\n                );\\n                userVolumeUpdateTime = uint64(epochEndTime);\\n            }\\n        }\\n    }\\n\\n    function needToInitializeUserUFE(\\n        Staking storage self,\\n        address user\\n    ) private view returns (bool) {\\n        IncompleteEpoch storage depositEpoch = self.users[user].depositEpoch;\\n\\n        // next boundary TPSS for epoch when user deposited last time\\n        uint256 ufeEndTPSS = self.linkedListTPSS[depositEpoch.TPSS];\\n        uint256 ufeEndTime = self.epochStartTime[ufeEndTPSS];\\n\\n        uint256 timeWhenUserVolumeWasLastUpdated = depositEpoch.timeWhenUserVolumeWasLastUpdated;\\n        // when we calculate rewards for UFE we set timeWhenUserVolumeWasLastUpdated to UFE end time\\n        bool userGotAllRewards = timeWhenUserVolumeWasLastUpdated == ufeEndTime;\\n\\n        return\\n            (self.users[user].balance == 0 && userGotAllRewards) ||\\n            timeWhenUserVolumeWasLastUpdated == 0;\\n    }\\n\\n    function initializeUserUFE(Staking storage self, address user) private {\\n        IncompleteEpoch storage depositEpoch = self.users[user].depositEpoch;\\n\\n        depositEpoch.timeWhenUserVolumeWasLastUpdated = uint64(block.timestamp);\\n        depositEpoch.epochNum = self.numberOfEpochs;\\n        depositEpoch.volume = 0;\\n    }\\n\\n    function setUserUFEStartingFromTheStartOfTheCurrentEpoch(\\n        Staking storage self,\\n        address user\\n    ) private {\\n        IncompleteEpoch storage depositEpoch = self.users[user].depositEpoch;\\n\\n        uint256 thisEpochStartTime = self.epochStartTime[self.TPSS];\\n        depositEpoch.volume = uint192(\\n            self.users[user].balance * (block.timestamp - thisEpochStartTime)\\n        );\\n        depositEpoch.timeWhenUserVolumeWasLastUpdated = uint64(block.timestamp);\\n        depositEpoch.epochNum = self.numberOfEpochs;\\n    }\\n}\\n/* solhint-enable not-rely-on-time, ordering */\\n\"\r\n    },\r\n    \"contracts/liquidityManagement/liquidityPool/pool/Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.22;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport {AddressMustNotBeZero, AlreadyUpToDate} from \\\"contracts/interfaces/base/CommonErrors.sol\\\";\\nimport {\\n    IMerkleTreeWhitelist\\n} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/IMerkleTreeWhitelist.sol\\\";\\nimport {IPool} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/IPool.sol\\\";\\nimport {\\n    IPoolInitializer\\n} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/IPoolInitializer.sol\\\";\\nimport {Staking} from \\\"contracts/interfaces/liquidityManagement/liquidityPool/Staking.sol\\\";\\n\\nimport {Suspendable} from \\\"../base/Suspendable.sol\\\";\\nimport {DebtManager, Queue} from \\\"../libraries/DebtManager.sol\\\";\\nimport {MerkleTreeRepository} from \\\"../libraries/MerkleTreeRepository.sol\\\";\\n\\n/**\\n * @title Pool\\n * @notice Blink liquidity pool.\\n */\\ncontract Pool is IPool, IPoolInitializer, Suspendable {\\n    using DebtManager for Queue;\\n    using SafeERC20 for IERC20;\\n    using MerkleTreeRepository for bytes32[];\\n\\n    bytes32 public constant BORROWER_ROLE = keccak256(\\\"BORROWER_ROLE\\\");\\n    bytes32 public constant REPAYER_ROLE = keccak256(\\\"REPAYER_ROLE\\\");\\n\\n    Staking private staking;\\n    Queue private debts;\\n    uint256 public thresholdOnTotalDeposit;\\n    address public token;\\n    IMerkleTreeWhitelist internal depositWhitelist;\\n\\n    error ThresholdOnTotalDepositMustNotBeZero();\\n\\n    function initialize(\\n        address borrower,\\n        address token_,\\n        uint256 thresholdOnTotalDeposit_\\n    ) external override initializer {\\n        if (borrower == address(0) || token_ == address(0)) revert AddressMustNotBeZero();\\n        if (thresholdOnTotalDeposit_ == 0) revert ThresholdOnTotalDepositMustNotBeZero();\\n        __Suspendable_init();\\n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _grantRole(PAUSER_ROLE, msg.sender);\\n        _grantRole(BORROWER_ROLE, borrower);\\n\\n        thresholdOnTotalDeposit = thresholdOnTotalDeposit_;\\n        token = token_;\\n        depositWhitelist = IMerkleTreeWhitelist(msg.sender);\\n    }\\n\\n    function setFund(address fund) external override onlyRole(DEFAULT_ADMIN_ROLE) {\\n        if (!_grantRole(REPAYER_ROLE, fund)) {\\n            revert AlreadyUpToDate();\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        DEPOSIT/WITHDRAWAL/CLAIM LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IPool\\n    function deposit(\\n        uint128 amount,\\n        bytes32[] calldata permission\\n    ) external override whenNotPaused {\\n        if (!permission.verify(msg.sender, depositWhitelist.getRoot())) {\\n            revert MerkleTreeVerificationFailed();\\n        }\\n        if (amount + staking.totalDeposited > thresholdOnTotalDeposit) {\\n            revert TotalDepositThresholdExceeded();\\n        }\\n\\n        staking.increasePosition(msg.sender, amount);\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Deposited(msg.sender, amount);\\n    }\\n\\n    /// @inheritdoc IPool\\n    function withdraw(uint128 amount, address to) external override {\\n        if (to == address(0)) {\\n            to = msg.sender;\\n        }\\n        if (amount > staking.users[msg.sender].balance) {\\n            revert WithdrawAmountExceedsBalance();\\n        }\\n\\n        staking.decreasePosition(msg.sender, amount);\\n        uint256 amountToTransfer = _createDebtIfNecessary(amount + _claim(msg.sender));\\n        if (amountToTransfer != 0) {\\n            IERC20(token).safeTransfer(to, amountToTransfer);\\n        }\\n\\n        emit Withdrawn(to, amount);\\n    }\\n\\n    /// @inheritdoc IPool\\n    function claim(address to) external override {\\n        if (to == address(0)) {\\n            to = msg.sender;\\n        }\\n\\n        uint256 amountToClaim = _claim(msg.sender);\\n        amountToClaim = _createDebtIfNecessary(amountToClaim);\\n\\n        if (amountToClaim != 0) {\\n            IERC20(token).safeTransfer(to, amountToClaim);\\n        } else {\\n            revert NoPendingRewards();\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          ONLY BORROWER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IPool\\n    function borrow(uint256 amount) external override onlyRole(BORROWER_ROLE) {\\n        if (amount > IERC20(token).balanceOf(address(this))) {\\n            revert BorrowAmountExceedsBalance();\\n        }\\n        IERC20(token).safeTransfer(msg.sender, amount);\\n        emit Borrowed(amount);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          ONLY REPAYER FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IPool\\n    function returnAndDistribute(\\n        uint256 amount,\\n        uint256 rewards\\n    ) external override onlyRole(REPAYER_ROLE) {\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount + rewards);\\n        debts.tryRepay(address(token), amount);\\n        staking.increaseInterest(rewards);\\n        emit Returned(amount, rewards);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          VIEW FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IPool\\n    function getPendingRewards(address user) external view override returns (uint256) {\\n        return staking.getUserRewards(user);\\n    }\\n\\n    /// @inheritdoc IPool\\n    function getPositionInfo(address liquidityProvider) external view override returns (uint256) {\\n        return staking.users[liquidityProvider].balance;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          PRIVATE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _createDebtIfNecessary(\\n        uint256 amountToWithdraw\\n    ) private returns (uint256 amountToTransfer) {\\n        uint256 _totalBalance = IERC20(token).balanceOf(address(this));\\n        if (_totalBalance < amountToWithdraw) {\\n            debts.create(amountToWithdraw - _totalBalance, msg.sender);\\n            amountToTransfer = _totalBalance;\\n        } else {\\n            amountToTransfer = amountToWithdraw;\\n        }\\n    }\\n\\n    function _claim(address user) private returns (uint256 claimed) {\\n        claimed = staking.claimRewards(user);\\n        if (claimed > 0) {\\n            emit Claimed(user, claimed);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"solady/src/utils/MerkleProofLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Gas optimized verification of proof of inclusion for a leaf in a Merkle tree.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/MerkleProofLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/MerkleProofLib.sol)\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/cryptography/MerkleProof.sol)\\nlibrary MerkleProofLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*            MERKLE PROOF VERIFICATION OPERATIONS            */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns whether `leaf` exists in the Merkle tree with `root`, given `proof`.\\n    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf)\\n        internal\\n        pure\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(proof) {\\n                // Initialize `offset` to the offset of `proof` elements in memory.\\n                let offset := add(proof, 0x20)\\n                // Left shift by 5 is equivalent to multiplying by 0x20.\\n                let end := add(offset, shl(5, mload(proof)))\\n                // Iterate over proof elements to compute root hash.\\n                for {} 1 {} {\\n                    // Slot of `leaf` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(leaf, mload(offset)))\\n                    // Store elements to hash contiguously in scratch space.\\n                    // Scratch space is 64 bytes (0x00 - 0x3f) and both elements are 32 bytes.\\n                    mstore(scratch, leaf)\\n                    mstore(xor(scratch, 0x20), mload(offset))\\n                    // Reuse `leaf` to store the hash to reduce stack operations.\\n                    leaf := keccak256(0x00, 0x40)\\n                    offset := add(offset, 0x20)\\n                    if iszero(lt(offset, end)) { break }\\n                }\\n            }\\n            isValid := eq(leaf, root)\\n        }\\n    }\\n\\n    /// @dev Returns whether `leaf` exists in the Merkle tree with `root`, given `proof`.\\n    function verifyCalldata(bytes32[] calldata proof, bytes32 root, bytes32 leaf)\\n        internal\\n        pure\\n        returns (bool isValid)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if proof.length {\\n                // Left shift by 5 is equivalent to multiplying by 0x20.\\n                let end := add(proof.offset, shl(5, proof.length))\\n                // Initialize `offset` to the offset of `proof` in the calldata.\\n                let offset := proof.offset\\n                // Iterate over proof elements to compute root hash.\\n                for {} 1 {} {\\n                    // Slot of `leaf` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(leaf, calldataload(offset)))\\n                    // Store elements to hash contiguously in scratch space.\\n                    // Scratch space is 64 bytes (0x00 - 0x3f) and both elements are 32 bytes.\\n                    mstore(scratch, leaf)\\n                    mstore(xor(scratch, 0x20), calldataload(offset))\\n                    // Reuse `leaf` to store the hash to reduce stack operations.\\n                    leaf := keccak256(0x00, 0x40)\\n                    offset := add(offset, 0x20)\\n                    if iszero(lt(offset, end)) { break }\\n                }\\n            }\\n            isValid := eq(leaf, root)\\n        }\\n    }\\n\\n    /// @dev Returns whether all `leaves` exist in the Merkle tree with `root`,\\n    /// given `proof` and `flags`.\\n    function verifyMultiProof(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32[] memory leaves,\\n        bool[] memory flags\\n    ) internal pure returns (bool isValid) {\\n        // Rebuilds the root by consuming and producing values on a queue.\\n        // The queue starts with the `leaves` array, and goes into a `hashes` array.\\n        // After the process, the last element on the queue is verified\\n        // to be equal to the `root`.\\n        //\\n        // The `flags` array denotes whether the sibling\\n        // should be popped from the queue (`flag == true`), or\\n        // should be popped from the `proof` (`flag == false`).\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cache the lengths of the arrays.\\n            let leavesLength := mload(leaves)\\n            let proofLength := mload(proof)\\n            let flagsLength := mload(flags)\\n\\n            // Advance the pointers of the arrays to point to the data.\\n            leaves := add(0x20, leaves)\\n            proof := add(0x20, proof)\\n            flags := add(0x20, flags)\\n\\n            // If the number of flags is correct.\\n            for {} eq(add(leavesLength, proofLength), add(flagsLength, 1)) {} {\\n                // For the case where `proof.length + leaves.length == 1`.\\n                if iszero(flagsLength) {\\n                    // `isValid = (proof.length == 1 ? proof[0] : leaves[0]) == root`.\\n                    isValid := eq(mload(xor(leaves, mul(xor(proof, leaves), proofLength))), root)\\n                    break\\n                }\\n\\n                // The required final proof offset if `flagsLength` is not zero, otherwise zero.\\n                let proofEnd := mul(iszero(iszero(flagsLength)), add(proof, shl(5, proofLength)))\\n                // We can use the free memory space for the queue.\\n                // We don't need to allocate, since the queue is temporary.\\n                let hashesFront := mload(0x40)\\n                // Copy the leaves into the hashes.\\n                // Sometimes, a little memory expansion costs less than branching.\\n                // Should cost less, even with a high free memory offset of 0x7d00.\\n                leavesLength := shl(5, leavesLength)\\n                for { let i := 0 } iszero(eq(i, leavesLength)) { i := add(i, 0x20) } {\\n                    mstore(add(hashesFront, i), mload(add(leaves, i)))\\n                }\\n                // Compute the back of the hashes.\\n                let hashesBack := add(hashesFront, leavesLength)\\n                // This is the end of the memory for the queue.\\n                // We recycle `flagsLength` to save on stack variables (sometimes save gas).\\n                flagsLength := add(hashesBack, shl(5, flagsLength))\\n\\n                for {} 1 {} {\\n                    // Pop from `hashes`.\\n                    let a := mload(hashesFront)\\n                    // Pop from `hashes`.\\n                    let b := mload(add(hashesFront, 0x20))\\n                    hashesFront := add(hashesFront, 0x40)\\n\\n                    // If the flag is false, load the next proof,\\n                    // else, pops from the queue.\\n                    if iszero(mload(flags)) {\\n                        // Loads the next proof.\\n                        b := mload(proof)\\n                        proof := add(proof, 0x20)\\n                        // Unpop from `hashes`.\\n                        hashesFront := sub(hashesFront, 0x20)\\n                    }\\n\\n                    // Advance to the next flag.\\n                    flags := add(flags, 0x20)\\n\\n                    // Slot of `a` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(a, b))\\n                    // Hash the scratch space and push the result onto the queue.\\n                    mstore(scratch, a)\\n                    mstore(xor(scratch, 0x20), b)\\n                    mstore(hashesBack, keccak256(0x00, 0x40))\\n                    hashesBack := add(hashesBack, 0x20)\\n                    if iszero(lt(hashesBack, flagsLength)) { break }\\n                }\\n                isValid :=\\n                    and(\\n                        // Checks if the last value in the queue is same as the root.\\n                        eq(mload(sub(hashesBack, 0x20)), root),\\n                        // And whether all the proofs are used, if required (i.e. `proofEnd != 0`).\\n                        or(iszero(proofEnd), eq(proofEnd, proof))\\n                    )\\n                break\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns whether all `leaves` exist in the Merkle tree with `root`,\\n    /// given `proof` and `flags`.\\n    function verifyMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32[] calldata leaves,\\n        bool[] calldata flags\\n    ) internal pure returns (bool isValid) {\\n        // Rebuilds the root by consuming and producing values on a queue.\\n        // The queue starts with the `leaves` array, and goes into a `hashes` array.\\n        // After the process, the last element on the queue is verified\\n        // to be equal to the `root`.\\n        //\\n        // The `flags` array denotes whether the sibling\\n        // should be popped from the queue (`flag == true`), or\\n        // should be popped from the `proof` (`flag == false`).\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If the number of flags is correct.\\n            for {} eq(add(leaves.length, proof.length), add(flags.length, 1)) {} {\\n                // For the case where `proof.length + leaves.length == 1`.\\n                if iszero(flags.length) {\\n                    // `isValid = (proof.length == 1 ? proof[0] : leaves[0]) == root`.\\n                    // forgefmt: disable-next-item\\n                    isValid := eq(\\n                        calldataload(\\n                            xor(leaves.offset, mul(xor(proof.offset, leaves.offset), proof.length))\\n                        ),\\n                        root\\n                    )\\n                    break\\n                }\\n\\n                // The required final proof offset if `flagsLength` is not zero, otherwise zero.\\n                let proofEnd :=\\n                    mul(iszero(iszero(flags.length)), add(proof.offset, shl(5, proof.length)))\\n                // We can use the free memory space for the queue.\\n                // We don't need to allocate, since the queue is temporary.\\n                let hashesFront := mload(0x40)\\n                // Copy the leaves into the hashes.\\n                // Sometimes, a little memory expansion costs less than branching.\\n                // Should cost less, even with a high free memory offset of 0x7d00.\\n                calldatacopy(hashesFront, leaves.offset, shl(5, leaves.length))\\n                // Compute the back of the hashes.\\n                let hashesBack := add(hashesFront, shl(5, leaves.length))\\n                // This is the end of the memory for the queue.\\n                // We recycle `flagsLength` to save on stack variables (sometimes save gas).\\n                flags.length := add(hashesBack, shl(5, flags.length))\\n\\n                // We don't need to make a copy of `proof.offset` or `flags.offset`,\\n                // as they are pass-by-value (this trick may not always save gas).\\n\\n                for {} 1 {} {\\n                    // Pop from `hashes`.\\n                    let a := mload(hashesFront)\\n                    // Pop from `hashes`.\\n                    let b := mload(add(hashesFront, 0x20))\\n                    hashesFront := add(hashesFront, 0x40)\\n\\n                    // If the flag is false, load the next proof,\\n                    // else, pops from the queue.\\n                    if iszero(calldataload(flags.offset)) {\\n                        // Loads the next proof.\\n                        b := calldataload(proof.offset)\\n                        proof.offset := add(proof.offset, 0x20)\\n                        // Unpop from `hashes`.\\n                        hashesFront := sub(hashesFront, 0x20)\\n                    }\\n\\n                    // Advance to the next flag offset.\\n                    flags.offset := add(flags.offset, 0x20)\\n\\n                    // Slot of `a` in scratch space.\\n                    // If the condition is true: 0x20, otherwise: 0x00.\\n                    let scratch := shl(5, gt(a, b))\\n                    // Hash the scratch space and push the result onto the queue.\\n                    mstore(scratch, a)\\n                    mstore(xor(scratch, 0x20), b)\\n                    mstore(hashesBack, keccak256(0x00, 0x40))\\n                    hashesBack := add(hashesBack, 0x20)\\n                    if iszero(lt(hashesBack, flags.length)) { break }\\n                }\\n                isValid :=\\n                    and(\\n                        // Checks if the last value in the queue is same as the root.\\n                        eq(mload(sub(hashesBack, 0x20)), root),\\n                        // And whether all the proofs are used, if required (i.e. `proofEnd != 0`).\\n                        or(iszero(proofEnd), eq(proofEnd, proof.offset))\\n                    )\\n                break\\n            }\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                   EMPTY CALLDATA HELPERS                   */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Returns an empty calldata bytes32 array.\\n    function emptyProof() internal pure returns (bytes32[] calldata proof) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            proof.length := 0\\n        }\\n    }\\n\\n    /// @dev Returns an empty calldata bytes32 array.\\n    function emptyLeaves() internal pure returns (bytes32[] calldata leaves) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            leaves.length := 0\\n        }\\n    }\\n\\n    /// @dev Returns an empty calldata bool array.\\n    function emptyFlags() internal pure returns (bool[] calldata flags) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            flags.length := 0\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"solady/src/utils/SafeTransferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Safe ETH and ERC20 transfer library that gracefully handles missing return values.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/SafeTransferLib.sol)\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SafeTransferLib.sol)\\n/// @dev Caution! This library won't check that a token has code, responsibility is delegated to the caller.\\nlibrary SafeTransferLib {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       CUSTOM ERRORS                        */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev The ETH transfer has failed.\\n    error ETHTransferFailed();\\n\\n    /// @dev The ERC20 `transferFrom` has failed.\\n    error TransferFromFailed();\\n\\n    /// @dev The ERC20 `transfer` has failed.\\n    error TransferFailed();\\n\\n    /// @dev The ERC20 `approve` has failed.\\n    error ApproveFailed();\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                         CONSTANTS                          */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH\\n    /// that disallows any storage writes.\\n    uint256 internal constant _GAS_STIPEND_NO_STORAGE_WRITES = 2300;\\n\\n    /// @dev Suggested gas stipend for contract receiving ETH to perform a few\\n    /// storage reads and writes, but low enough to prevent griefing.\\n    /// Multiply by a small constant (e.g. 2), if needed.\\n    uint256 internal constant _GAS_STIPEND_NO_GRIEF = 100000;\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                       ETH OPERATIONS                       */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferETH(address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gas(), to, amount, 0, 0, 0, 0)) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount, uint256 gasStipend) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(gasStipend, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // For better gas estimation.\\n                    if iszero(gt(gas(), 1000000)) { revert(0, 0) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Force sends `amount` (in wei) ETH to `to`, with a gas stipend\\n    /// equal to `_GAS_STIPEND_NO_GRIEF`. This gas stipend is a reasonable default\\n    /// for 99% of cases and can be overriden with the three-argument version of this\\n    /// function if necessary.\\n    ///\\n    /// If sending via the normal procedure fails, force sends the ETH by\\n    /// creating a temporary contract which uses `SELFDESTRUCT` to force send the ETH.\\n    ///\\n    /// Reverts if the current contract has insufficient balance.\\n    function forceSafeTransferETH(address to, uint256 amount) internal {\\n        // Manually inlined because the compiler doesn't inline functions with branches.\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // If insufficient balance, revert.\\n            if lt(selfbalance(), amount) {\\n                // Store the function selector of `ETHTransferFailed()`.\\n                mstore(0x00, 0xb12d13eb)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Transfer the ETH and check if it succeeded or not.\\n            if iszero(call(_GAS_STIPEND_NO_GRIEF, to, amount, 0, 0, 0, 0)) {\\n                mstore(0x00, to) // Store the address in scratch space.\\n                mstore8(0x0b, 0x73) // Opcode `PUSH20`.\\n                mstore8(0x20, 0xff) // Opcode `SELFDESTRUCT`.\\n                // We can directly use `SELFDESTRUCT` in the contract creation.\\n                // Compatible with `SENDALL`: https://eips.ethereum.org/EIPS/eip-4758\\n                if iszero(create(amount, 0x0b, 0x16)) {\\n                    // For better gas estimation.\\n                    if iszero(gt(gas(), 1000000)) { revert(0, 0) }\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @dev Sends `amount` (in wei) ETH to `to`, with a `gasStipend`.\\n    /// The `gasStipend` can be set to a low enough value to prevent\\n    /// storage writes or gas griefing.\\n    ///\\n    /// Simply use `gasleft()` for `gasStipend` if you don't need a gas stipend.\\n    ///\\n    /// Note: Does NOT revert upon failure.\\n    /// Returns whether the transfer of ETH is successful instead.\\n    function trySafeTransferETH(address to, uint256 amount, uint256 gasStipend)\\n        internal\\n        returns (bool success)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and check if it succeeded or not.\\n            success := call(gasStipend, to, amount, 0, 0, 0, 0)\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                      ERC20 OPERATIONS                      */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    /// @dev Sends `amount` of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferFrom(address token, address from, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x60, amount) // Store the `amount` argument.\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x0c, 0x23b872dd000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from `from` to `to`.\\n    /// Reverts upon failure.\\n    ///\\n    /// The `from` account must have at least `amount` approved for\\n    /// the current contract to manage.\\n    function safeTransferAllFrom(address token, address from, address to)\\n        internal\\n        returns (uint256 amount)\\n    {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let m := mload(0x40) // Cache the free memory pointer.\\n\\n            mstore(0x40, to) // Store the `to` argument.\\n            mstore(0x2c, shl(96, from)) // Store the `from` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x0c, 0x70a08231000000000000000000000000)\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x60, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            // Store the function selector of `transferFrom(address,address,uint256)`.\\n            mstore(0x00, 0x23b872dd)\\n            // The `amount` argument is already written to the memory word at 0x6c.\\n            amount := mload(0x60)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x1c, 0x64, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFromFailed()`.\\n                mstore(0x00, 0x7939f424)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x60, 0) // Restore the zero slot to zero.\\n            mstore(0x40, m) // Restore the free memory pointer.\\n        }\\n    }\\n\\n    /// @dev Sends `amount` of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransfer(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sends all of ERC20 `token` from the current contract to `to`.\\n    /// Reverts upon failure.\\n    function safeTransferAll(address token, address to) internal returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, 0x70a08231) // Store the function selector of `balanceOf(address)`.\\n            mstore(0x20, address()) // Store the address of the current contract.\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                    staticcall(gas(), token, 0x1c, 0x24, 0x34, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n\\n            mstore(0x14, to) // Store the `to` argument.\\n            // The `amount` argument is already written to the memory word at 0x34.\\n            amount := mload(0x34)\\n            // Store the function selector of `transfer(address,uint256)`.\\n            mstore(0x00, 0xa9059cbb000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `TransferFailed()`.\\n                mstore(0x00, 0x90b8ec18)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Sets `amount` of ERC20 `token` for `to` to manage on behalf of the current contract.\\n    /// Reverts upon failure.\\n    function safeApprove(address token, address to, uint256 amount) internal {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, to) // Store the `to` argument.\\n            mstore(0x34, amount) // Store the `amount` argument.\\n            // Store the function selector of `approve(address,uint256)`.\\n            mstore(0x00, 0x095ea7b3000000000000000000000000)\\n\\n            if iszero(\\n                and( // The arguments of `and` are evaluated from right to left.\\n                    // Set success to whether the call reverted, if not we check it either\\n                    // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                    or(eq(mload(0x00), 1), iszero(returndatasize())),\\n                    call(gas(), token, 0, 0x10, 0x44, 0x00, 0x20)\\n                )\\n            ) {\\n                // Store the function selector of `ApproveFailed()`.\\n                mstore(0x00, 0x3e3f8f73)\\n                // Revert with (offset, size).\\n                revert(0x1c, 0x04)\\n            }\\n            // Restore the part of the free memory pointer that was overwritten.\\n            mstore(0x34, 0)\\n        }\\n    }\\n\\n    /// @dev Returns the amount of ERC20 `token` owned by `account`.\\n    /// Returns zero if the `token` does not exist.\\n    function balanceOf(address token, address account) internal view returns (uint256 amount) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x14, account) // Store the `account` argument.\\n            // Store the function selector of `balanceOf(address)`.\\n            mstore(0x00, 0x70a08231000000000000000000000000)\\n            amount :=\\n                mul(\\n                    mload(0x20),\\n                    and( // The arguments of `and` are evaluated from right to left.\\n                        gt(returndatasize(), 0x1f), // At least 32 bytes returned.\\n                        staticcall(gas(), token, 0x10, 0x24, 0x20, 0x20)\\n                    )\\n                )\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": false,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AddressMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyUpToDate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowAmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CannotStartNewEpochWithSameTPSS\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterestInsufficient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InterestMustBeGreaterThanZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeVerificationFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoPendingRewards\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"QueueIsEmpty\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ThresholdOnTotalDepositMustNotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenVolumeIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TotalDepositThresholdExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WithdrawAmountExceedsBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrowed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"distributed\",\"type\":\"uint256\"}],\"name\":\"Returned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROWER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REPAYER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"bytes32[]\",\"name\":\"permission\",\"type\":\"bytes32[]\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getPendingRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidityProvider\",\"type\":\"address\"}],\"name\":\"getPositionInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"thresholdOnTotalDeposit_\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSuspended\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewards\",\"type\":\"uint256\"}],\"name\":\"returnAndDistribute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"setFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suspend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"thresholdOnTotalDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unsuspend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Pool", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "1000000", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}