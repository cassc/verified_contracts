{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.17;\r\n\r\nlibrary SafeMath { \r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      assert(b <= a);\r\n      return a - b;\r\n    }\r\n    \r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n      uint256 c = a + b;\r\n      assert(c >= a);\r\n      return c;\r\n    }\r\n}\r\n\r\ncontract WXETA {\r\n    using SafeMath for uint256;\r\n    bytes32 internal constant WXETANAMESPACE = keccak256('wxeta.facet');\r\n\r\n    struct WXETASTORAGE {\r\n        string name;\r\n        string symbol;\r\n        uint8 decimals;  \r\n\r\n        address owner;\r\n        bool initialized;\r\n        uint256 _maxSupply;\r\n        uint256 _totalSupply;\r\n        \r\n        mapping(address => bool) authorized;\r\n        mapping(address => uint256) balances;\r\n        mapping(address => mapping (address => uint256)) allowed;\r\n    }\r\n\r\n    function getWXETAStorage() internal pure returns(WXETASTORAGE storage s) {\r\n        bytes32 position = WXETANAMESPACE;\r\n        assembly {\r\n            s.slot := position\r\n        }\r\n    }\r\n\r\n    event Transfer(address indexed from, address indexed to, uint tokens);\r\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\r\n\r\n    modifier onlyOwner() {\r\n        require(msg.sender == getWXETAStorage().owner, \"WXETA: not owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyAuthorized() {\r\n        require(getWXETAStorage().authorized[msg.sender], \"WXETA: not authorized\");\r\n        _;\r\n    }\r\n\r\n    function initialize(uint256 max) public {\r\n        WXETASTORAGE storage s = getWXETAStorage();\r\n        require(!s.initialized, \"WXETA: already initialized\");\r\n        s._maxSupply = max;\r\n        s.owner = msg.sender;\r\n        s.authorized[msg.sender] = true;\r\n        s.name = \"Wrapped Xeta\";\r\n        s.symbol = \"WXETA\";\r\n        s.decimals = 18;  \r\n    }\r\n\r\n    function totalSupply() public view returns (uint256) {\r\n\t    return getWXETAStorage()._totalSupply;\r\n    }\r\n    \r\n    function maxSupply() public view returns (uint256) {\r\n        return getWXETAStorage()._maxSupply;\r\n    }\r\n    \r\n    function balanceOf(address tokenOwner) public view returns (uint) {\r\n        return getWXETAStorage().balances[tokenOwner];\r\n    }\r\n\r\n    function mint(address receiver, uint256 amount) public onlyAuthorized() returns(bool) {\r\n        WXETASTORAGE storage s = getWXETAStorage();\r\n        require(s._totalSupply + amount <= s._maxSupply, \"Mint exceeds maximum supply\");\r\n\r\n        s._totalSupply = totalSupply().add(amount);\r\n        s.balances[receiver] = s.balances[receiver].add(amount);\r\n        emit Transfer(address(this), receiver, amount);\r\n        return true;\r\n    }\r\n\r\n    function burn(address from, uint256 amount) public onlyAuthorized() returns(bool) {\r\n        WXETASTORAGE storage s = getWXETAStorage();\r\n        require(s.balances[from] >= amount, \"Insufficient balance to burn\");\r\n\r\n        s._totalSupply = s._totalSupply.sub(amount);\r\n        s.balances[from] = s.balances[from].sub(amount);\r\n        emit Transfer(from, address(0), amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address delegate, uint numTokens) public returns (bool) {\r\n        WXETASTORAGE storage s = getWXETAStorage();\r\n        s.allowed[msg.sender][delegate] = numTokens;\r\n        emit Approval(msg.sender, delegate, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address user, address delegate) public view returns (uint) {\r\n        return getWXETAStorage().allowed[user][delegate];\r\n    }\r\n\r\n    function transfer(address receiver, uint numTokens) public returns (bool) {\r\n        WXETASTORAGE storage s = getWXETAStorage();\r\n        require(numTokens <= s.balances[msg.sender]);\r\n        require(receiver != address(0), \"WXETA: Cannot transfer to the zero address\");\r\n\r\n        s.balances[msg.sender] = s.balances[msg.sender].sub(numTokens);\r\n        s.balances[receiver] = s.balances[receiver].add(numTokens);\r\n        emit Transfer(msg.sender, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address user, address receiver, uint numTokens) public returns (bool) {\r\n        WXETASTORAGE storage s = getWXETAStorage();\r\n        require(numTokens <= s.balances[user]);\r\n        require(numTokens <= s.allowed[user][msg.sender]);\r\n        require(receiver != address(0), \"WXETA: Cannot transfer to the zero address\");\r\n    \r\n        s.balances[user] = s.balances[user].sub(numTokens);\r\n        s.allowed[user][msg.sender] = s.allowed[user][msg.sender].sub(numTokens);\r\n        s.balances[receiver] = s.balances[receiver].add(numTokens);\r\n        emit Transfer(user, receiver, numTokens);\r\n        return true;\r\n    }\r\n\r\n    function setAuthorized(address _address, bool _status) public onlyOwner() {\r\n        getWXETAStorage().authorized[_address] = _status;\r\n    }\r\n\r\n    function authorized(address _add) external view returns(bool) {\r\n        return getWXETAStorage().authorized[_add];\r\n    }\r\n\r\n    function owner() external view returns(address) {\r\n        return getWXETAStorage().owner;\r\n    }\r\n\r\n    function name() external view returns(string memory) {\r\n        return getWXETAStorage().name;\r\n    }\r\n\r\n    function symbol() external view returns(string memory) {\r\n        return getWXETAStorage().symbol;\r\n    }\r\n\r\n    function decimals() external view returns(uint256) {\r\n        return getWXETAStorage().decimals;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"delegate\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_add\",\"type\":\"address\"}],\"name\":\"authorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"max\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numTokens\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "WXETA", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://d9264c1fbff415b283562a049c16f8e3361d44b124a8d2adb54eecf9c65392f8"}