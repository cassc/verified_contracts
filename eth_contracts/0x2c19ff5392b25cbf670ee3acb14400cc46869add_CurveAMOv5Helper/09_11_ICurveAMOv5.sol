interface ICurveAMOv5 {
    function addOrSetPool ( bytes memory _configData, address _poolAddress ) external;
    function burnFRAX ( uint256 _fraxAmount ) external;
    function calcAllTknsFromFullLPExit ( address _poolAddress ) external view returns ( uint256[] memory _withdrawables );
    function calcFraxAndUsdcWithdrawable ( address _poolAddress, uint256 _lpAmount ) external view returns ( uint256[4] memory );
    function calcFraxUsdcOnlyFromFullLPExit ( address _poolAddress ) external view returns ( uint256[4] memory _withdrawables );
    function claimRewards ( address _poolAddress, bool _claimConvexVault, bool _claimFxsVault ) external;
    function createFxsVault ( address _poolAddress, uint256 _pid ) external;
    function depositToFxsVault ( address _poolAddress, uint256 _poolLpIn, uint256 _secs ) external returns ( bytes32 _kek_id );
    function depositToPool ( address _poolAddress, uint256[] memory _amounts, uint256 _minLpOut ) external;
    function depositToVault ( address _poolAddress, uint256 _poolLpIn ) external;
    function discountRate (  ) external view returns ( uint256 );
    function dollarBalances (  ) external view returns ( uint256 fraxValE18, uint256 collatValE18 );
    function execute ( address _to, uint256 _value, bytes memory _data ) external returns ( bool, bytes memory );
    function fraxDiscountRate (  ) external view returns ( uint256 );
    function getTknsForLPAtCurrRatio ( address _poolAddress, uint256 _lpAmount ) external view returns ( uint256[] memory _withdrawables );
    function giveCollatBack ( uint256 _collateralAmount ) external;
    function kekIdTotalDeposit ( bytes32 ) external view returns ( uint256 );
    function lockLongerInFxsVault ( address _poolAddress, bytes32 _kek_id, uint256 new_ending_ts ) external;
    function lockMoreInFxsVault ( address _poolAddress, bytes32 _kek_id, uint256 _addl_liq ) external;
    function lpInVault ( address _poolAddress ) external view returns ( uint256 );
    function lpTokenToPool ( address ) external view returns ( address );
    function mintedBalance (  ) external view returns ( int256 );
    function operatorAddress (  ) external view returns ( address );
    function owner (  ) external view returns ( address );
    function poolArray ( uint256 ) external view returns ( address );
    function poolInitialized ( address ) external view returns ( bool );
    function poolSwap ( address _poolAddress, uint256 _inIndex, uint256 _outIndex, uint256 _inAmount, uint256 _minOutAmount ) external;
    function recoverERC20 ( address tokenAddress, uint256 tokenAmount ) external;
    function renounceOwnership (  ) external;
    function setAMOMinter ( address _amoMinterAddress ) external;
    function setDiscount (  ) external view returns ( bool );
    function setDiscountRate ( bool _state, uint256 _discountRate ) external;
    function setOperatorAddress ( address _newOperatorAddress ) external;
    function setPoolAllocation ( address _poolAddress, uint256[] memory _poolMaxAllocations ) external;
    function setPoolVault ( address _poolAddress, address _rewardsContractAddress ) external;
    function showAllocations (  ) external view returns ( uint256[10] memory  );
    function showCVXRewards (  ) external view returns ( uint256 _cvxReward );
    function showPoolAccounting ( address _poolAddress ) external view returns ( uint256[] memory _assetBalances, uint256[] memory _depositedAmounts, uint256[] memory _profitTakenAmounts, uint256[3] memory _allocations );
    function showPoolAssetBalances ( address _poolAddress ) external view returns ( uint256[] memory _assetBalances );
    function showPoolCoinIndexes ( address _poolAddress ) external view returns ( uint256 _coinCount, uint256 _fraxIndex, uint256 _usdcIndex, uint256 _baseTokenIndex );
    function showPoolInfo ( address _poolAddress ) external view returns ( bool _isMetapool, bool _isCrypto, bool _hasFrax, bool _hasVault, bool _hasUsdc );
    function showPoolMaxAllocations ( address _poolAddress ) external view returns ( uint256[] memory _tokenMaxAllocation );
    function showPoolRewards ( address _poolAddress ) external view returns ( uint256 _crvReward, uint256[] memory  _extraRewardAmounts, address[] memory _extraRewardTokens );
    function showPoolVaults ( address _poolAddress ) external view returns ( uint256 _lpDepositPid, address _rewardsContractAddress, address _fxsPersonalVaultAddress );
    function transferOwnership ( address newOwner ) external;
    function vaultKekIds ( address, uint256 ) external view returns ( bytes32 );
    function withdrawAllAtCurrRatio ( address _poolAddress, uint256[] memory _minAmounts ) external returns ( uint256[] memory _amountReceived );
    function withdrawAndUnwrapFromFxsVault ( address _poolAddress, bytes32 _kek_id ) external;
    function withdrawAndUnwrapFromVault ( address _poolAddress, uint256 amount, bool claim ) external;
    function withdrawAtCurrRatio ( address _poolAddress, uint256 _lpIn, uint256[] memory _minAmounts ) external returns ( uint256[] memory _amountReceived );
    function withdrawOneCoin ( address _poolAddress, uint256 _lpIn, uint256 _coinIndex, uint256 _minAmountOut ) external returns ( uint256 _amountReceived );
    function withdrawRewards ( uint256 crvAmount, uint256 cvxAmount, uint256 cvxCRVAmount, uint256 fxsAmount ) external;
}