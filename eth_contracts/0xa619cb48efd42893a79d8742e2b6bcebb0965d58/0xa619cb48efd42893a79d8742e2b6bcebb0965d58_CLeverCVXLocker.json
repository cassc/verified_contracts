{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/clever/CLeverCVXLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\n\\nimport \\\"./interfaces/ICLeverCVXLocker.sol\\\";\\nimport \\\"./interfaces/ICLeverToken.sol\\\";\\nimport \\\"./interfaces/IFurnace.sol\\\";\\nimport \\\"../interfaces/IConvexCVXLocker.sol\\\";\\nimport \\\"../interfaces/IConvexCVXRewardPool.sol\\\";\\nimport \\\"../interfaces/ISnapshotDelegateRegistry.sol\\\";\\nimport \\\"../interfaces/IZap.sol\\\";\\nimport \\\"../voting/ISignatureVerifier.sol\\\";\\n\\n// solhint-disable not-rely-on-time, max-states-count, reason-string\\n\\ncontract CLeverCVXLocker is OwnableUpgradeable, ICLeverCVXLocker {\\n  using SafeMathUpgradeable for uint256;\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n  event UpdateWhitelist(address indexed _whitelist, bool _status);\\n  event UpdateStakePercentage(uint256 _percentage);\\n  event UpdateStakeThreshold(uint256 _threshold);\\n  event UpdateRepayFeePercentage(uint256 _feePercentage);\\n  event UpdatePlatformFeePercentage(uint256 _feePercentage);\\n  event UpdateHarvestBountyPercentage(uint256 _percentage);\\n  event UpdatePlatform(address indexed _platform);\\n  event UpdateZap(address indexed _zap);\\n  event UpdateGovernor(address indexed _governor);\\n  event UpdatePauseTimestamp(uint256 _startTimestamp, uint256 _finishTimestamp);\\n\\n  // The precision used to calculate accumulated rewards.\\n  uint256 private constant PRECISION = 1e18;\\n  // The denominator used for fee calculation.\\n  uint256 private constant FEE_PRECISION = 1e9;\\n  // The maximum value of repay fee percentage.\\n  uint256 private constant MAX_REPAY_FEE = 1e8; // 10%\\n  // The maximum value of platform fee percentage.\\n  uint256 private constant MAX_PLATFORM_FEE = 2e8; // 20%\\n  // The maximum value of harvest bounty percentage.\\n  uint256 private constant MAX_HARVEST_BOUNTY = 1e8; // 10%\\n  // The length of epoch in CVX Locker.\\n  uint256 private constant REWARDS_DURATION = 86400 * 7; // 1 week\\n\\n  // The address of CVX token.\\n  address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\\n  // The address of cvxCRV token.\\n  address private constant CVXCRV = 0x62B9c7356A2Dc64a1969e19C23e4f579F9810Aa7;\\n  // The address of CVXRewardPool Contract.\\n  address private constant CVX_REWARD_POOL = 0xCF50b810E57Ac33B91dCF525C6ddd9881B139332;\\n  // The address of CVXLockerV2 Contract.\\n  address private constant CVX_LOCKER = 0x72a19342e8F1838460eBFCCEf09F6585e32db86E;\\n  // The address of votium distributor\\n  address private constant VOTIUM_DISTRIBUTOR = 0x378Ba9B73309bE80BF4C2c027aAD799766a7ED5A;\\n  // The address of cvxFXS token.\\n  address private constant CVXFXS = 0xFEEf77d3f69374f66429C91d732A244f074bdf74;\\n  /// @dev The address of WETH token.\\n  address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n  struct EpochUnlockInfo {\\n    // The number of CVX should unlocked at the start of epoch `unlockEpoch`.\\n    uint192 pendingUnlock;\\n    // The epoch number to unlock `pendingUnlock` CVX\\n    uint64 unlockEpoch;\\n  }\\n\\n  struct UserInfo {\\n    // The total number of clevCVX minted.\\n    uint128 totalDebt;\\n    // The amount of distributed reward.\\n    uint128 rewards;\\n    // The paid accumulated reward per share, multipled by 1e18.\\n    uint192 rewardPerSharePaid;\\n    // The block number of the last interacted block (deposit, unlock, withdraw, repay, borrow).\\n    uint64 lastInteractedBlock;\\n    // The total amount of CVX locked.\\n    uint112 totalLocked;\\n    // The total amount of CVX unlocked.\\n    uint112 totalUnlocked;\\n    // The next unlock index to speedup unlock process.\\n    uint32 nextUnlockIndex;\\n    // In Convex, if you lock at epoch `e` (block.timestamp in `[e * rewardsDuration, (e + 1) * rewardsDuration)`),\\n    // you lock will start at epoch `e + 1` and will unlock at the beginning of epoch `(e + 17)`. If we relock right\\n    //  after the unlock, all unlocked CVX will start lock at epoch `e + 18`, and will locked again at epoch `e + 18 + 16`.\\n    // If we continue the process, all CVX locked in epoch `e` will be unlocked at epoch `e + 17 * k` (k >= 1).\\n    //\\n    // Here, we maintain an array for easy calculation when users lock or unlock.\\n    //\\n    // `epochLocked[r]` maintains all locked CVX whose unlocking epoch is `17 * k + r`. It means at the beginning of\\n    //  epoch `17 * k + r`, the CVX will unlock, if we continue to relock right after unlock.\\n    uint256[17] epochLocked;\\n    // The list of pending unlocked CVX.\\n    EpochUnlockInfo[] pendingUnlockList;\\n  }\\n\\n  /// @dev The address of governor\\n  address public governor;\\n  /// @dev The address of clevCVX contract.\\n  address public clevCVX;\\n\\n  /// @dev Assumptons:\\n  ///  1. totalLockedGlobal + totalPendingUnlockGlobal is the total amount of CVX locked in CVXLockerV2.\\n  ///  2. totalUnlockedGlobal is the total amount of CVX unlocked from CVXLockerV2 but still in contract.\\n  ///  3. totalDebtGlobal is the total amount of clevCVX borrowed, will decrease when debt is repayed.\\n  /// @dev The total amount of CVX locked in contract.\\n  uint256 public totalLockedGlobal;\\n  /// @dev The total amount of CVX going to unlocked.\\n  uint256 public totalPendingUnlockGlobal;\\n  /// @dev The total amount of CVX unlocked in CVXLockerV2 and will never be locked again.\\n  uint256 public totalUnlockedGlobal;\\n  /// @dev The total amount of clevCVX borrowed from this contract.\\n  uint256 public totalDebtGlobal;\\n\\n  /// @dev The reward per share of CVX accumulated, will be updated in each harvest, multipled by 1e18.\\n  uint256 public accRewardPerShare;\\n  /// @dev Mapping from user address to user info.\\n  mapping(address => UserInfo) public userInfo;\\n  /// @dev Mapping from epoch number to the amount of CVX to be unlocked.\\n  mapping(uint256 => uint256) public pendingUnlocked;\\n  /// @dev The address of Furnace Contract.\\n  address public furnace;\\n  /// @dev The percentage of free CVX will be staked in CVXRewardPool.\\n  uint256 public stakePercentage;\\n  /// @dev The minimum of amount of CVX to be staked.\\n  uint256 public stakeThreshold;\\n  /// @dev The debt reserve rate to borrow clevCVX for each user.\\n  uint256 public reserveRate;\\n  /// @dev The list of tokens which will swap manually.\\n  mapping(address => bool) public manualSwapRewardToken;\\n\\n  /// @dev The address of zap contract.\\n  address public zap;\\n  /// @dev The percentage of repay fee.\\n  uint256 public repayFeePercentage;\\n  /// @dev The percentage of rewards to take for caller on harvest\\n  uint256 public harvestBountyPercentage;\\n  /// @dev The percentage of rewards to take for platform on harvest\\n  uint256 public platformFeePercentage;\\n  /// @dev The address of recipient of platform fee\\n  address public platform;\\n\\n  /// @dev The list of whitelist keeper.\\n  mapping(address => bool) public isKeeper;\\n\\n  /// @notice The list of rewards token.\\n  address[] public rewardTokens;\\n\\n  /// @notice The address of SignatureVerifier contract.\\n  ISignatureVerifier public verifier;\\n\\n  modifier onlyGovernorOrOwner() {\\n    require(msg.sender == governor || msg.sender == owner(), \\\"CLeverCVXLocker: only governor or owner\\\");\\n    _;\\n  }\\n\\n  modifier onlyKeeper() {\\n    require(isKeeper[msg.sender], \\\"CLeverCVXLocker: only keeper\\\");\\n    _;\\n  }\\n\\n  function initialize(\\n    address _governor,\\n    address _clevCVX,\\n    address _zap,\\n    address _furnace,\\n    address _platform,\\n    uint256 _platformFeePercentage,\\n    uint256 _harvestBountyPercentage\\n  ) external initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n\\n    require(_governor != address(0), \\\"CLeverCVXLocker: zero governor address\\\");\\n    require(_clevCVX != address(0), \\\"CLeverCVXLocker: zero clevCVX address\\\");\\n    require(_zap != address(0), \\\"CLeverCVXLocker: zero zap address\\\");\\n    require(_furnace != address(0), \\\"CLeverCVXLocker: zero furnace address\\\");\\n    require(_platform != address(0), \\\"CLeverCVXLocker: zero platform address\\\");\\n    require(_platformFeePercentage <= MAX_PLATFORM_FEE, \\\"CLeverCVXLocker: fee too large\\\");\\n    require(_harvestBountyPercentage <= MAX_HARVEST_BOUNTY, \\\"CLeverCVXLocker: fee too large\\\");\\n\\n    governor = _governor;\\n    clevCVX = _clevCVX;\\n    zap = _zap;\\n    furnace = _furnace;\\n    platform = _platform;\\n    platformFeePercentage = _platformFeePercentage;\\n    harvestBountyPercentage = _harvestBountyPercentage;\\n    reserveRate = 500_000_000;\\n  }\\n\\n  receive() external payable {\\n    require(msg.sender == zap, \\\"only zap can send ETH\\\");\\n  }\\n\\n  /********************************** View Functions **********************************/\\n\\n  /// @dev Return user info in this contract.\\n  /// @param _account The address of user.\\n  /// @return totalDeposited The amount of CVX deposited in this contract of the user.\\n  /// @return totalPendingUnlocked The amount of CVX pending to be unlocked.\\n  /// @return totalUnlocked The amount of CVX unlokced of the user and can be withdrawed.\\n  /// @return totalBorrowed The amount of clevCVX borrowed by the user.\\n  /// @return totalReward The amount of CVX reward accrued for the user.\\n  function getUserInfo(address _account)\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 totalDeposited,\\n      uint256 totalPendingUnlocked,\\n      uint256 totalUnlocked,\\n      uint256 totalBorrowed,\\n      uint256 totalReward\\n    )\\n  {\\n    UserInfo storage _info = userInfo[_account];\\n\\n    totalDeposited = _info.totalLocked;\\n\\n    // update total reward and total Borrowed\\n    totalBorrowed = _info.totalDebt;\\n    totalReward = uint256(_info.rewards).add(\\n      accRewardPerShare.sub(_info.rewardPerSharePaid).mul(totalDeposited) / PRECISION\\n    );\\n    if (totalBorrowed > 0) {\\n      if (totalReward >= totalBorrowed) {\\n        totalReward -= totalBorrowed;\\n        totalBorrowed = 0;\\n      } else {\\n        totalBorrowed -= totalReward;\\n        totalReward = 0;\\n      }\\n    }\\n\\n    // update total unlocked and total pending unlocked.\\n    totalUnlocked = _info.totalUnlocked;\\n    EpochUnlockInfo[] storage _pendingUnlockList = _info.pendingUnlockList;\\n    uint256 _nextUnlockIndex = _info.nextUnlockIndex;\\n    uint256 _currentEpoch = block.timestamp / REWARDS_DURATION;\\n    while (_nextUnlockIndex < _pendingUnlockList.length) {\\n      if (_pendingUnlockList[_nextUnlockIndex].unlockEpoch <= _currentEpoch) {\\n        totalUnlocked += _pendingUnlockList[_nextUnlockIndex].pendingUnlock;\\n      } else {\\n        totalPendingUnlocked += _pendingUnlockList[_nextUnlockIndex].pendingUnlock;\\n      }\\n      _nextUnlockIndex += 1;\\n    }\\n  }\\n\\n  /// @dev Return the lock and pending unlocked list of user.\\n  /// @param _account The address of user.\\n  /// @return locks The list of CVX locked by the user, including amount and nearest unlock epoch.\\n  /// @return pendingUnlocks The list of CVX pending unlocked of the user, including amount and the unlock epoch.\\n  function getUserLocks(address _account)\\n    external\\n    view\\n    returns (EpochUnlockInfo[] memory locks, EpochUnlockInfo[] memory pendingUnlocks)\\n  {\\n    UserInfo storage _info = userInfo[_account];\\n\\n    uint256 _currentEpoch = block.timestamp / REWARDS_DURATION;\\n    uint256 lengthLocks;\\n    for (uint256 i = 0; i < 17; i++) {\\n      if (_info.epochLocked[i] > 0) {\\n        lengthLocks++;\\n      }\\n    }\\n    locks = new EpochUnlockInfo[](lengthLocks);\\n    lengthLocks = 0;\\n    for (uint256 i = 0; i < 17; i++) {\\n      uint256 _index = (_currentEpoch + i + 1) % 17;\\n      if (_info.epochLocked[_index] > 0) {\\n        locks[lengthLocks].pendingUnlock = uint192(_info.epochLocked[_index]);\\n        locks[lengthLocks].unlockEpoch = uint64(_currentEpoch + i + 1);\\n        lengthLocks += 1;\\n      }\\n    }\\n\\n    uint256 _nextUnlockIndex = _info.nextUnlockIndex;\\n    EpochUnlockInfo[] storage _pendingUnlockList = _info.pendingUnlockList;\\n    uint256 lengthPendingUnlocks;\\n    for (uint256 i = _nextUnlockIndex; i < _pendingUnlockList.length; i++) {\\n      if (_pendingUnlockList[i].unlockEpoch > _currentEpoch) {\\n        lengthPendingUnlocks += 1;\\n      }\\n    }\\n    pendingUnlocks = new EpochUnlockInfo[](lengthPendingUnlocks);\\n    lengthPendingUnlocks = 0;\\n    for (uint256 i = _nextUnlockIndex; i < _pendingUnlockList.length; i++) {\\n      if (_pendingUnlockList[i].unlockEpoch > _currentEpoch) {\\n        pendingUnlocks[lengthPendingUnlocks] = _pendingUnlockList[i];\\n        lengthPendingUnlocks += 1;\\n      }\\n    }\\n  }\\n\\n  /// @dev Return the total amount of free CVX in this contract, including staked in CVXRewardPool.\\n  /// @return The amount of CVX in this contract now.\\n  function totalCVXInPool() public view returns (uint256) {\\n    return\\n      IERC20Upgradeable(CVX).balanceOf(address(this)).add(\\n        IConvexCVXRewardPool(CVX_REWARD_POOL).balanceOf(address(this))\\n      );\\n  }\\n\\n  /// @notice Should return whether the signature provided is valid for the provided hash\\n  /// @dev See https://eips.ethereum.org/EIPS/eip-1271 for more details.\\n  /// @param _hash      Hash of the data to be signed\\n  /// @param _signature Signature byte array associated with _hash\\n  ///\\n  /// MUST return the bytes4 magic value 0x1626ba7e when function passes.\\n  /// MUST NOT modify state (using STATICCALL for solc < 0.5, view modifier for solc > 0.5)\\n  /// MUST allow external calls\\n  function isValidSignature(bytes32 _hash, bytes calldata _signature) external view returns (bytes4) {\\n    // Validate signatures\\n    if (verifier.verifySignature(_hash, _signature) == true) {\\n      return 0x1626ba7e;\\n    } else {\\n      return 0xffffffff;\\n    }\\n  }\\n\\n  /********************************** Mutated Functions **********************************/\\n\\n  /// @dev Deposit CVX and lock into CVXLockerV2\\n  /// @param _amount The amount of CVX to lock.\\n  function deposit(uint256 _amount) external override {\\n    require(_amount > 0, \\\"CLeverCVXLocker: deposit zero CVX\\\");\\n    IERC20Upgradeable(CVX).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    // 1. update reward info\\n    _updateReward(msg.sender);\\n\\n    // 2. lock to CVXLockerV2\\n    IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER, 0);\\n    IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER, _amount);\\n    IConvexCVXLocker(CVX_LOCKER).lock(address(this), _amount, 0);\\n\\n    // 3. update user lock info\\n    uint256 _currentEpoch = block.timestamp / REWARDS_DURATION;\\n    uint256 _reminder = _currentEpoch % 17;\\n\\n    UserInfo storage _info = userInfo[msg.sender];\\n    _info.totalLocked = uint112(_amount + uint256(_info.totalLocked)); // should never overflow\\n    _info.epochLocked[_reminder] = _amount + _info.epochLocked[_reminder]; // should never overflow\\n\\n    // 4. update global info\\n    totalLockedGlobal = _amount.add(totalLockedGlobal); // direct cast shoule be safe\\n\\n    emit Deposit(msg.sender, _amount);\\n  }\\n\\n  /// @dev Unlock CVX from the CVXLockerV2\\n  ///      Notice that all pending unlocked CVX will not share future rewards.\\n  /// @param _amount The amount of CVX to unlock.\\n  function unlock(uint256 _amount) external override {\\n    require(_amount > 0, \\\"CLeverCVXLocker: unlock zero CVX\\\");\\n    // 1. update reward info\\n    _updateReward(msg.sender);\\n\\n    // 2. update unlocked info\\n    _updateUnlocked(msg.sender);\\n\\n    // 3. check unlock limit and update\\n    UserInfo storage _info = userInfo[msg.sender];\\n    {\\n      uint256 _totalLocked = _info.totalLocked;\\n      uint256 _totalDebt = _info.totalDebt;\\n      require(_amount <= _totalLocked, \\\"CLeverCVXLocker: insufficient CVX to unlock\\\");\\n\\n      _checkAccountHealth(_totalLocked, _totalDebt, _amount, 0);\\n      // if you choose unlock, all pending unlocked CVX will not share the reward.\\n      _info.totalLocked = uint112(_totalLocked - _amount); // should never overflow\\n      // global unlock info will be updated in `processUnlockableCVX`\\n      totalLockedGlobal -= _amount;\\n      totalPendingUnlockGlobal += _amount;\\n    }\\n\\n    emit Unlock(msg.sender, _amount);\\n\\n    // 4. enumerate lockInfo array to unlock\\n    uint256 _nextEpoch = block.timestamp / REWARDS_DURATION + 1;\\n    EpochUnlockInfo[] storage _pendingUnlockList = _info.pendingUnlockList;\\n    uint256 _index;\\n    uint256 _locked;\\n    uint256 _unlocked;\\n    for (uint256 i = 0; i < 17; i++) {\\n      _index = _nextEpoch % 17;\\n      _locked = _info.epochLocked[_index];\\n      if (_amount >= _locked) _unlocked = _locked;\\n      else _unlocked = _amount;\\n\\n      if (_unlocked > 0) {\\n        _info.epochLocked[_index] = _locked - _unlocked; // should never overflow\\n        _amount = _amount - _unlocked; // should never overflow\\n        pendingUnlocked[_nextEpoch] = pendingUnlocked[_nextEpoch] + _unlocked; // should never overflow\\n\\n        if (\\n          _pendingUnlockList.length == 0 || _pendingUnlockList[_pendingUnlockList.length - 1].unlockEpoch != _nextEpoch\\n        ) {\\n          _pendingUnlockList.push(\\n            EpochUnlockInfo({ pendingUnlock: uint192(_unlocked), unlockEpoch: uint64(_nextEpoch) })\\n          );\\n        } else {\\n          _pendingUnlockList[_pendingUnlockList.length - 1].pendingUnlock = uint192(\\n            _unlocked + _pendingUnlockList[_pendingUnlockList.length - 1].pendingUnlock\\n          );\\n        }\\n      }\\n\\n      if (_amount == 0) break;\\n      _nextEpoch = _nextEpoch + 1;\\n    }\\n  }\\n\\n  /// @dev Withdraw all unlocked CVX from this contract.\\n  function withdrawUnlocked() external override {\\n    // 1. update reward info\\n    _updateReward(msg.sender);\\n\\n    // 2. update unlocked info\\n    _updateUnlocked(msg.sender);\\n\\n    // 3. claim unlocked CVX\\n    UserInfo storage _info = userInfo[msg.sender];\\n    uint256 _unlocked = _info.totalUnlocked;\\n    _info.totalUnlocked = 0;\\n\\n    // update global info\\n    totalUnlockedGlobal = totalUnlockedGlobal.sub(_unlocked);\\n\\n    uint256 _balanceInContract = IERC20Upgradeable(CVX).balanceOf(address(this));\\n    // balance is not enough, with from reward pool\\n    if (_balanceInContract < _unlocked) {\\n      IConvexCVXRewardPool(CVX_REWARD_POOL).withdraw(_unlocked - _balanceInContract, false);\\n    }\\n\\n    IERC20Upgradeable(CVX).safeTransfer(msg.sender, _unlocked);\\n\\n    emit Withdraw(msg.sender, _unlocked);\\n  }\\n\\n  /// @dev Repay clevCVX debt with CVX or clevCVX.\\n  /// @param _cvxAmount The amount of CVX used to pay debt.\\n  /// @param _clevCVXAmount The amount of clevCVX used to pay debt.\\n  function repay(uint256 _cvxAmount, uint256 _clevCVXAmount) external override {\\n    require(_cvxAmount > 0 || _clevCVXAmount > 0, \\\"CLeverCVXLocker: repay zero amount\\\");\\n\\n    // 1. update reward info\\n    _updateReward(msg.sender);\\n\\n    UserInfo storage _info = userInfo[msg.sender];\\n    uint256 _totalDebt = _info.totalDebt;\\n    uint256 _totalDebtGlobal = totalDebtGlobal;\\n\\n    // 3. check repay with cvx and take fee\\n    if (_cvxAmount > 0 && _totalDebt > 0) {\\n      if (_cvxAmount > _totalDebt) _cvxAmount = _totalDebt;\\n\\n      uint256 _fee = _cvxAmount.mul(repayFeePercentage) / FEE_PRECISION;\\n      _totalDebt = _totalDebt - _cvxAmount; // never overflow\\n      _totalDebtGlobal = _totalDebtGlobal - _cvxAmount; // never overflow\\n\\n      // distribute to furnace and transfer fee to platform\\n      IERC20Upgradeable(CVX).safeTransferFrom(msg.sender, address(this), _cvxAmount + _fee);\\n      if (_fee > 0) {\\n        IERC20Upgradeable(CVX).safeTransfer(platform, _fee);\\n      }\\n      address _furnace = furnace;\\n      IERC20Upgradeable(CVX).safeApprove(_furnace, 0);\\n      IERC20Upgradeable(CVX).safeApprove(_furnace, _cvxAmount);\\n      IFurnace(_furnace).distribute(address(this), _cvxAmount);\\n    }\\n\\n    // 4. check repay with clevCVX\\n    if (_clevCVXAmount > 0 && _totalDebt > 0) {\\n      if (_clevCVXAmount > _totalDebt) _clevCVXAmount = _totalDebt;\\n      uint256 _fee = _clevCVXAmount.mul(repayFeePercentage) / FEE_PRECISION;\\n      _totalDebt = _totalDebt - _clevCVXAmount; // never overflow\\n      _totalDebtGlobal = _totalDebtGlobal - _clevCVXAmount;\\n\\n      // burn debt token and tranfer fee to platform\\n      if (_fee > 0) {\\n        IERC20Upgradeable(clevCVX).safeTransferFrom(msg.sender, platform, _fee);\\n      }\\n      ICLeverToken(clevCVX).burnFrom(msg.sender, _clevCVXAmount);\\n    }\\n\\n    _info.totalDebt = uint128(_totalDebt);\\n    totalDebtGlobal = _totalDebtGlobal;\\n\\n    emit Repay(msg.sender, _cvxAmount, _clevCVXAmount);\\n  }\\n\\n  /// @dev Borrow clevCVX from this contract.\\n  ///      Notice the reward will be used first and it will not be treated as debt.\\n  /// @param _amount The amount of clevCVX to borrow.\\n  /// @param _depositToFurnace Whether to deposit borrowed clevCVX to furnace.\\n  function borrow(uint256 _amount, bool _depositToFurnace) external override {\\n    require(_amount > 0, \\\"CLeverCVXLocker: borrow zero amount\\\");\\n\\n    // 1. update reward info\\n    _updateReward(msg.sender);\\n\\n    UserInfo storage _info = userInfo[msg.sender];\\n    uint256 _rewards = _info.rewards;\\n    uint256 _borrowWithLocked;\\n\\n    // 2. borrow with rewards, this will not be treated as debt.\\n    if (_rewards >= _amount) {\\n      _info.rewards = uint128(_rewards - _amount);\\n    } else {\\n      _info.rewards = 0;\\n      _borrowWithLocked = _amount - _rewards;\\n    }\\n\\n    // 3. borrow with locked CVX\\n    if (_borrowWithLocked > 0) {\\n      uint256 _totalLocked = _info.totalLocked;\\n      uint256 _totalDebt = _info.totalDebt;\\n      _checkAccountHealth(_totalLocked, _totalDebt, 0, _borrowWithLocked);\\n      // update user info\\n      _info.totalDebt = uint128(_totalDebt + _borrowWithLocked); // should not overflow.\\n      // update global info\\n      totalDebtGlobal = totalDebtGlobal + _borrowWithLocked; // should not overflow.\\n    }\\n\\n    _mintOrDeposit(_amount, _depositToFurnace);\\n\\n    emit Borrow(msg.sender, _amount);\\n  }\\n\\n  /// @dev Someone donate CVX to all CVX locker in this contract.\\n  /// @param _amount The amount of CVX to donate.\\n  function donate(uint256 _amount) external override {\\n    require(_amount > 0, \\\"CLeverCVXLocker: donate zero amount\\\");\\n    IERC20Upgradeable(CVX).safeTransferFrom(msg.sender, address(this), _amount);\\n\\n    _distribute(_amount);\\n  }\\n\\n  /// @dev Harvest pending reward from CVXLockerV2 and CVXRewardPool, then swap it to CVX.\\n  /// @param _recipient - The address of account to receive harvest bounty.\\n  /// @param _minimumOut - The minimum amount of CVX should get.\\n  /// @return The amount of CVX harvested.\\n  function harvest(address _recipient, uint256 _minimumOut) external override returns (uint256) {\\n    // 1. harvest from CVXLockerV2 and CVXRewardPool\\n    address[] memory _rewardTokens = rewardTokens;\\n    uint256[] memory _balances = new uint256[](_rewardTokens.length);\\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n      _balances[i] = IERC20Upgradeable(_rewardTokens[i]).balanceOf(address(this));\\n    }\\n    IConvexCVXRewardPool(CVX_REWARD_POOL).getReward(false);\\n    IConvexCVXLocker(CVX_LOCKER).getReward(address(this));\\n\\n    // 2. convert all reward tokens to ETH, then to CVX\\n    uint256 _amount; // store the amount of ETH\\n    address _zap = zap;\\n    for (uint256 i = 0; i < _rewardTokens.length; i++) {\\n      address _token = _rewardTokens[i];\\n      uint256 _balance = IERC20Upgradeable(_token).balanceOf(address(this)) - _balances[i];\\n      if (_balance > 0) {\\n        IERC20Upgradeable(_token).safeTransfer(_zap, _balance);\\n        _amount += IZap(_zap).zap(_token, _balance, address(0), 0);\\n      }\\n    }\\n    if (_amount > 0) {\\n      _amount = IZap(_zap).zap{ value: _amount }(address(0), _amount, CVX, 0);\\n    }\\n    // @note now `_amount` store the amount of CVX\\n    require(_amount >= _minimumOut, \\\"CLeverCVXLocker: insufficient output\\\");\\n\\n    // 3. distribute incentive to platform and _recipient\\n    uint256 _platformFee = platformFeePercentage;\\n    uint256 _distributeAmount = _amount;\\n    if (_platformFee > 0) {\\n      _platformFee = (_distributeAmount * _platformFee) / FEE_PRECISION;\\n      _distributeAmount = _distributeAmount - _platformFee;\\n      IERC20Upgradeable(CVX).safeTransfer(platform, _platformFee);\\n    }\\n    uint256 _harvestBounty = harvestBountyPercentage;\\n    if (_harvestBounty > 0) {\\n      _harvestBounty = (_distributeAmount * _harvestBounty) / FEE_PRECISION;\\n      _distributeAmount = _distributeAmount - _harvestBounty;\\n      IERC20Upgradeable(CVX).safeTransfer(_recipient, _harvestBounty);\\n    }\\n\\n    // 4. distribute to users\\n    _distribute(_distributeAmount);\\n\\n    emit Harvest(msg.sender, _distributeAmount, _platformFee, _harvestBounty);\\n\\n    return _amount;\\n  }\\n\\n  /// @dev Harvest pending reward from Votium, then swap it to CVX.\\n  /// @param claims The parameters used by VotiumMultiMerkleStash contract.\\n  /// @param _routes The routes used to swap token to ETH.\\n  /// @param _minimumOut - The minimum amount of CVX should get.\\n  /// @return The amount of CVX harvested.\\n  function harvestVotium(\\n    IVotiumMultiMerkleStash.claimParam[] calldata claims,\\n    uint256[][] calldata _routes,\\n    uint256 _minimumOut\\n  ) external onlyKeeper returns (uint256) {\\n    // the last routes is ETH to CVX\\n    require(claims.length + 1 == _routes.length, \\\"length mismatch\\\");\\n    // 1. claim reward from votium\\n    for (uint256 i = 0; i < claims.length; i++) {\\n      // in case someone has claimed the reward for this contract, we can still call this function to process reward.\\n      if (!IVotiumMultiMerkleStash(VOTIUM_DISTRIBUTOR).isClaimed(claims[i].token, claims[i].index)) {\\n        IVotiumMultiMerkleStash(VOTIUM_DISTRIBUTOR).claim(\\n          claims[i].token,\\n          claims[i].index,\\n          address(this),\\n          claims[i].amount,\\n          claims[i].merkleProof\\n        );\\n      }\\n    }\\n    address[] memory _rewardTokens = new address[](claims.length);\\n    uint256[] memory _amounts = new uint256[](claims.length);\\n    for (uint256 i = 0; i < claims.length; i++) {\\n      _rewardTokens[i] = claims[i].token;\\n      // TODO: consider fee on transfer token (currently, such token doesn't exsist)\\n      _amounts[i] = claims[i].amount;\\n    }\\n\\n    // 2. swap all tokens to CVX\\n    uint256 _amount = _swapToCVX(_rewardTokens, _amounts, _routes, _minimumOut);\\n\\n    // 3. distribute to platform\\n    uint256 _distributeAmount = _amount;\\n    uint256 _platformFee = platformFeePercentage;\\n    if (_platformFee > 0) {\\n      _platformFee = (_distributeAmount * _platformFee) / FEE_PRECISION;\\n      _distributeAmount = _distributeAmount - _platformFee;\\n      IERC20Upgradeable(CVX).safeTransfer(platform, _platformFee);\\n    }\\n\\n    // 4. distribute to users\\n    _distribute(_distributeAmount);\\n\\n    emit Harvest(msg.sender, _distributeAmount, _platformFee, 0);\\n\\n    return _amount;\\n  }\\n\\n  /// @dev Process unlocked CVX in CVXLockerV2.\\n  ///\\n  /// This function should be called every week if\\n  ///   1. `pendingUnlocked[currentEpoch]` is nonzero.\\n  ///   2. some CVX is unlocked in current epoch.\\n  function processUnlockableCVX() external onlyKeeper {\\n    // Be careful that someone may kick us out from CVXLockerV2\\n    // `totalUnlockedGlobal` keep track the amount of CVX unlocked from CVXLockerV2\\n    // all other CVX in this contract can be considered unlocked from CVXLockerV2 by someone else.\\n\\n    // 1. find extra CVX from donation or kicked out from CVXLockerV2\\n    uint256 _extraCVX = totalCVXInPool().sub(totalUnlockedGlobal);\\n\\n    // 2. unlock CVX\\n    uint256 _unlocked = IERC20Upgradeable(CVX).balanceOf(address(this));\\n    IConvexCVXLocker(CVX_LOCKER).processExpiredLocks(false);\\n    _unlocked = IERC20Upgradeable(CVX).balanceOf(address(this)).sub(_unlocked).add(_extraCVX);\\n\\n    // 3. remove user unlocked CVX\\n    uint256 currentEpoch = block.timestamp / REWARDS_DURATION;\\n    uint256 _pending = pendingUnlocked[currentEpoch];\\n    if (_pending > 0) {\\n      // check if the unlocked CVX is enough, normally this should always be true.\\n      require(_unlocked >= _pending, \\\"CLeverCVXLocker: insufficient unlocked CVX\\\");\\n      _unlocked -= _pending;\\n      // update global info\\n      totalUnlockedGlobal = totalUnlockedGlobal.add(_pending);\\n      totalPendingUnlockGlobal -= _pending; // should never overflow\\n      pendingUnlocked[currentEpoch] = 0;\\n    }\\n\\n    // 4. relock\\n    if (_unlocked > 0) {\\n      IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER, 0);\\n      IERC20Upgradeable(CVX).safeApprove(CVX_LOCKER, _unlocked);\\n      IConvexCVXLocker(CVX_LOCKER).lock(address(this), _unlocked, 0);\\n    }\\n  }\\n\\n  /********************************** Restricted Functions **********************************/\\n\\n  /// @dev delegate vlCVX voting power.\\n  /// @param _registry The address of Snapshot Delegate Registry.\\n  /// @param _id The id for which the delegate should be set.\\n  /// @param _delegate The address of the delegate.\\n  function delegate(\\n    address _registry,\\n    bytes32 _id,\\n    address _delegate\\n  ) external onlyGovernorOrOwner {\\n    ISnapshotDelegateRegistry(_registry).setDelegate(_id, _delegate);\\n  }\\n\\n  /// @dev Update the address of governor.\\n  /// @param _governor The address to be updated\\n  function updateGovernor(address _governor) external onlyGovernorOrOwner {\\n    require(_governor != address(0), \\\"CLeverCVXLocker: zero governor address\\\");\\n    governor = _governor;\\n\\n    emit UpdateGovernor(_governor);\\n  }\\n\\n  /// @dev Update stake percentage for CVX in this contract.\\n  /// @param _percentage The stake percentage to be updated, multipled by 1e9.\\n  function updateStakePercentage(uint256 _percentage) external onlyGovernorOrOwner {\\n    require(_percentage <= FEE_PRECISION, \\\"CLeverCVXLocker: percentage too large\\\");\\n    stakePercentage = _percentage;\\n\\n    emit UpdateStakePercentage(_percentage);\\n  }\\n\\n  /// @dev Update stake threshold for CVX.\\n  /// @param _threshold The stake threshold to be updated.\\n  function updateStakeThreshold(uint256 _threshold) external onlyGovernorOrOwner {\\n    stakeThreshold = _threshold;\\n\\n    emit UpdateStakeThreshold(_threshold);\\n  }\\n\\n  /// @dev Update manual swap reward token lists.\\n  /// @param _tokens The addresses of token list.\\n  /// @param _status The status to be updated.\\n  function updateManualSwapRewardToken(address[] memory _tokens, bool _status) external onlyGovernorOrOwner {\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      require(_tokens[i] != CVX, \\\"CLeverCVXLocker: invalid token\\\");\\n      manualSwapRewardToken[_tokens[i]] = _status;\\n    }\\n  }\\n\\n  /// @dev Update the repay fee percentage.\\n  /// @param _feePercentage - The fee percentage to update.\\n  function updateRepayFeePercentage(uint256 _feePercentage) external onlyOwner {\\n    require(_feePercentage <= MAX_REPAY_FEE, \\\"AladdinCRV: fee too large\\\");\\n    repayFeePercentage = _feePercentage;\\n\\n    emit UpdateRepayFeePercentage(_feePercentage);\\n  }\\n\\n  /// @dev Update the platform fee percentage.\\n  /// @param _feePercentage - The fee percentage to update.\\n  function updatePlatformFeePercentage(uint256 _feePercentage) external onlyOwner {\\n    require(_feePercentage <= MAX_PLATFORM_FEE, \\\"AladdinCRV: fee too large\\\");\\n    platformFeePercentage = _feePercentage;\\n\\n    emit UpdatePlatformFeePercentage(_feePercentage);\\n  }\\n\\n  /// @dev Update the harvest bounty percentage.\\n  /// @param _percentage - The fee percentage to update.\\n  function updateHarvestBountyPercentage(uint256 _percentage) external onlyOwner {\\n    require(_percentage <= MAX_HARVEST_BOUNTY, \\\"AladdinCRV: fee too large\\\");\\n    harvestBountyPercentage = _percentage;\\n\\n    emit UpdateHarvestBountyPercentage(_percentage);\\n  }\\n\\n  /// @dev Update the recipient\\n  function updatePlatform(address _platform) external onlyOwner {\\n    require(_platform != address(0), \\\"AladdinCRV: zero platform address\\\");\\n    platform = _platform;\\n\\n    emit UpdatePlatform(_platform);\\n  }\\n\\n  /// @dev Update the zap contract\\n  function updateZap(address _zap) external onlyGovernorOrOwner {\\n    require(_zap != address(0), \\\"CLeverCVXLocker: zero zap address\\\");\\n    zap = _zap;\\n\\n    emit UpdateZap(_zap);\\n  }\\n\\n  function updateReserveRate(uint256 _reserveRate) external onlyOwner {\\n    require(_reserveRate <= FEE_PRECISION, \\\"CLeverCVXLocker: invalid reserve rate\\\");\\n    reserveRate = _reserveRate;\\n  }\\n\\n  /// @dev Withdraw all manual swap reward tokens from the contract.\\n  /// @param _tokens The address list of tokens to withdraw.\\n  /// @param _recipient The address of user who will recieve the tokens.\\n  function withdrawManualSwapRewardTokens(address[] memory _tokens, address _recipient) external onlyOwner {\\n    for (uint256 i = 0; i < _tokens.length; i++) {\\n      if (!manualSwapRewardToken[_tokens[i]]) continue;\\n      uint256 _balance = IERC20Upgradeable(_tokens[i]).balanceOf(address(this));\\n      IERC20Upgradeable(_tokens[i]).safeTransfer(_recipient, _balance);\\n    }\\n  }\\n\\n  /// @dev Update keepers.\\n  /// @param _accounts The address list of keepers to update.\\n  /// @param _status The status of updated keepers.\\n  function updateKeepers(address[] memory _accounts, bool _status) external onlyGovernorOrOwner {\\n    for (uint256 i = 0; i < _accounts.length; i++) {\\n      isKeeper[_accounts[i]] = _status;\\n    }\\n  }\\n\\n  /// @notice Update the address of SignatureVerifier contract.\\n  /// @param _verifier The address of new SignatureVerifier contract.\\n  function updateVerifier(address _verifier) external onlyOwner {\\n    verifier = ISignatureVerifier(_verifier);\\n  }\\n\\n  /// @notice Update the list of reward tokens.\\n  /// @param _tokens The list of reward tokens to update.\\n  function updateRewardTokens(address[] memory _tokens) external onlyOwner {\\n    delete rewardTokens;\\n    rewardTokens = _tokens;\\n  }\\n\\n  /********************************** Internal Functions **********************************/\\n\\n  /// @dev Internal function called by `deposit`, `unlock`, `withdrawUnlocked`, `repay`, `borrow` and `claim`.\\n  /// @param _account The address of account to update reward info.\\n  function _updateReward(address _account) internal {\\n    UserInfo storage _info = userInfo[_account];\\n    require(_info.lastInteractedBlock != block.number, \\\"CLeverCVXLocker: enter the same block\\\");\\n\\n    uint256 _totalDebtGlobal = totalDebtGlobal;\\n    uint256 _totalDebt = _info.totalDebt;\\n    uint256 _rewards = uint256(_info.rewards).add(\\n      accRewardPerShare.sub(_info.rewardPerSharePaid).mul(_info.totalLocked) / PRECISION\\n    );\\n\\n    _info.rewardPerSharePaid = uint192(accRewardPerShare); // direct cast should be safe\\n    _info.lastInteractedBlock = uint64(block.number);\\n\\n    // pay debt with reward if possible\\n    if (_totalDebt > 0) {\\n      if (_rewards >= _totalDebt) {\\n        _rewards -= _totalDebt;\\n        _totalDebtGlobal -= _totalDebt;\\n        _totalDebt = 0;\\n      } else {\\n        _totalDebtGlobal -= _rewards;\\n        _totalDebt -= _rewards;\\n        _rewards = 0;\\n      }\\n    }\\n\\n    _info.totalDebt = uint128(_totalDebt); // direct cast should be safe\\n    _info.rewards = uint128(_rewards); // direct cast should be safe\\n    totalDebtGlobal = _totalDebtGlobal;\\n  }\\n\\n  /// @dev Internal function called by `unlock`, `withdrawUnlocked`.\\n  /// @param _account The address of account to update pending unlock list.\\n  function _updateUnlocked(address _account) internal {\\n    UserInfo storage _info = userInfo[_account];\\n    uint256 _currentEpoch = block.timestamp / REWARDS_DURATION;\\n    uint256 _nextUnlockIndex = _info.nextUnlockIndex;\\n    uint256 _totalUnlocked = _info.totalUnlocked;\\n    EpochUnlockInfo[] storage _pendingUnlockList = _info.pendingUnlockList;\\n\\n    uint256 _unlockEpoch;\\n    uint256 _unlockAmount;\\n    while (_nextUnlockIndex < _pendingUnlockList.length) {\\n      _unlockEpoch = _pendingUnlockList[_nextUnlockIndex].unlockEpoch;\\n      _unlockAmount = _pendingUnlockList[_nextUnlockIndex].pendingUnlock;\\n      if (_unlockEpoch <= _currentEpoch) {\\n        _totalUnlocked = _totalUnlocked + _unlockAmount;\\n        delete _pendingUnlockList[_nextUnlockIndex]; // clear entry to refund gas\\n      } else {\\n        break;\\n      }\\n      _nextUnlockIndex += 1;\\n    }\\n    _info.totalUnlocked = uint112(_totalUnlocked);\\n    _info.nextUnlockIndex = uint32(_nextUnlockIndex);\\n  }\\n\\n  /// @dev Internal function used to swap tokens to CVX.\\n  /// @param _rewardTokens The address list of reward tokens.\\n  /// @param _amounts The amount list of reward tokens.\\n  /// @param _routes The routes used to swap token to WETH.\\n  /// @param _minimumOut The minimum amount of CVX should get.\\n  /// @return The amount of CVX swapped.\\n  function _swapToCVX(\\n    address[] memory _rewardTokens,\\n    uint256[] memory _amounts,\\n    uint256[][] calldata _routes,\\n    uint256 _minimumOut\\n  ) internal returns (uint256) {\\n    uint256 _amountCVX;\\n    uint256 _amountWETH;\\n    address _zap = zap;\\n    uint256 index;\\n    // 1. swap all token to WETH\\n    for (index = 0; index < _rewardTokens.length; index++) {\\n      address _token = _rewardTokens[index];\\n      // skip manual swap token\\n      if (manualSwapRewardToken[_token]) continue;\\n      if (_token != CVX) {\\n        if (_amounts[index] > 0) {\\n          IERC20Upgradeable(_token).safeTransfer(_zap, _amounts[index]);\\n          _amountWETH = _amountWETH.add(IZap(_zap).zapWithRoutes(_token, _amounts[index], WETH, _routes[index], 0));\\n        }\\n      } else {\\n        _amountCVX = _amountCVX.add(_amounts[index]);\\n      }\\n    }\\n    // 2. swap WETH to CVX\\n    if (_amountWETH > 0) {\\n      IERC20Upgradeable(WETH).safeTransfer(_zap, _amountWETH);\\n      _amountCVX = _amountCVX.add(IZap(_zap).zapWithRoutes(WETH, _amountWETH, CVX, _routes[index], 0));\\n    }\\n    require(_amountCVX >= _minimumOut, \\\"CLeverCVXLocker: insufficient output\\\");\\n    return _amountCVX;\\n  }\\n\\n  /// @dev Internal function called by `harvest` and `harvestVotium`.\\n  function _distribute(uint256 _amount) internal {\\n    // 1. update reward info\\n    uint256 _totalLockedGlobal = totalLockedGlobal; // gas saving\\n    // It's ok to donate when on one is locking in this contract.\\n    if (_totalLockedGlobal > 0) {\\n      accRewardPerShare = accRewardPerShare.add(_amount.mul(PRECISION) / uint256(_totalLockedGlobal));\\n    }\\n\\n    // 2. distribute reward CVX to Furnace\\n    address _furnace = furnace;\\n    IERC20Upgradeable(CVX).safeApprove(_furnace, 0);\\n    IERC20Upgradeable(CVX).safeApprove(_furnace, _amount);\\n    IFurnace(_furnace).distribute(address(this), _amount);\\n\\n    // 3. stake extra CVX to cvxRewardPool\\n    uint256 _balanceStaked = IConvexCVXRewardPool(CVX_REWARD_POOL).balanceOf(address(this));\\n    uint256 _toStake = _balanceStaked.add(IERC20Upgradeable(CVX).balanceOf(address(this))).mul(stakePercentage).div(\\n      FEE_PRECISION\\n    );\\n    if (_balanceStaked < _toStake) {\\n      _toStake = _toStake - _balanceStaked;\\n      if (_toStake >= stakeThreshold) {\\n        IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL, 0);\\n        IERC20Upgradeable(CVX).safeApprove(CVX_REWARD_POOL, _toStake);\\n        IConvexCVXRewardPool(CVX_REWARD_POOL).stake(_toStake);\\n      }\\n    }\\n  }\\n\\n  /// @dev Internal function used to help to mint clevCVX.\\n  /// @param _amount The amount of clevCVX to mint.\\n  /// @param _depositToFurnace Whether to deposit the minted clevCVX to furnace.\\n  function _mintOrDeposit(uint256 _amount, bool _depositToFurnace) internal {\\n    if (_depositToFurnace) {\\n      address _clevCVX = clevCVX;\\n      address _furnace = furnace;\\n      // stake clevCVX to furnace.\\n      ICLeverToken(_clevCVX).mint(address(this), _amount);\\n      IERC20Upgradeable(_clevCVX).safeApprove(_furnace, 0);\\n      IERC20Upgradeable(_clevCVX).safeApprove(_furnace, _amount);\\n      IFurnace(_furnace).depositFor(msg.sender, _amount);\\n    } else {\\n      // transfer clevCVX to sender.\\n      ICLeverToken(clevCVX).mint(msg.sender, _amount);\\n    }\\n  }\\n\\n  /// @dev Internal function to check the health of account.\\n  ///      And account is health if and only if\\n  ///                                       cvxBorrowed\\n  ///                      cvxDeposited >= --------------\\n  ///                                      cvxReserveRate\\n  /// @param _totalDeposited The amount of CVX currently deposited.\\n  /// @param _totalDebt The amount of clevCVX currently borrowed.\\n  /// @param _newUnlock The amount of CVX to unlock.\\n  /// @param _newBorrow The amount of clevCVX to borrow.\\n  function _checkAccountHealth(\\n    uint256 _totalDeposited,\\n    uint256 _totalDebt,\\n    uint256 _newUnlock,\\n    uint256 _newBorrow\\n  ) internal view {\\n    require(\\n      _totalDeposited.sub(_newUnlock).mul(reserveRate) >= _totalDebt.add(_newBorrow).mul(FEE_PRECISION),\\n      \\\"CLeverCVXLocker: unlock or borrow exceeds limit\\\"\\n    );\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvexCVXLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IConvexCVXLocker {\\n  struct LockedBalance {\\n    uint112 amount;\\n    uint112 boosted;\\n    uint32 unlockTime;\\n  }\\n\\n  function lockedBalanceOf(address _user) external view returns (uint256 amount);\\n\\n  // Information on a user's locked balances\\n  function lockedBalances(address _user)\\n    external\\n    view\\n    returns (\\n      uint256 total,\\n      uint256 unlockable,\\n      uint256 locked,\\n      LockedBalance[] memory lockData\\n    );\\n\\n  function lock(\\n    address _account,\\n    uint256 _amount,\\n    uint256 _spendRatio\\n  ) external;\\n\\n  function processExpiredLocks(\\n    bool _relock,\\n    uint256 _spendRatio,\\n    address _withdrawTo\\n  ) external;\\n\\n  function processExpiredLocks(bool _relock) external;\\n\\n  function kickExpiredLocks(address _account) external;\\n\\n  function getReward(address _account, bool _stake) external;\\n\\n  function getReward(address _account) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IConvexCVXRewardPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IConvexCVXRewardPool {\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  function earned(address account) external view returns (uint256);\\n\\n  function withdraw(uint256 _amount, bool claim) external;\\n\\n  function withdrawAll(bool claim) external;\\n\\n  function stake(uint256 _amount) external;\\n\\n  function stakeAll() external;\\n\\n  function stakeFor(address _for, uint256 _amount) external;\\n\\n  function getReward(\\n    address _account,\\n    bool _claimExtras,\\n    bool _stake\\n  ) external;\\n\\n  function getReward(bool _stake) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IZap.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IZap {\\n  function zap(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n\\n  function zapWithRoutes(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256[] calldata _routes,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n\\n  function zapFrom(\\n    address _fromToken,\\n    uint256 _amountIn,\\n    address _toToken,\\n    uint256 _minOut\\n  ) external payable returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/voting/ISignatureVerifier.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ISignatureVerifier {\\n  function verifySignature(bytes32 _hash, bytes memory _signature) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/clever/interfaces/ICLeverCVXLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"./IVotiumMultiMerkleStash.sol\\\";\\n\\ninterface ICLeverCVXLocker {\\n  event Deposit(address indexed _account, uint256 _amount);\\n  event Unlock(address indexed _account, uint256 _amount);\\n  event Withdraw(address indexed _account, uint256 _amount);\\n  event Repay(address indexed _account, uint256 _cvxAmount, uint256 _clevCVXAmount);\\n  event Borrow(address indexed _account, uint256 _amount);\\n  event Claim(address indexed _account, uint256 _amount);\\n  event Harvest(address indexed _caller, uint256 _reward, uint256 _platformFee, uint256 _harvestBounty);\\n\\n  function getUserInfo(address _account)\\n    external\\n    view\\n    returns (\\n      uint256 totalDeposited,\\n      uint256 totalPendingUnlocked,\\n      uint256 totalUnlocked,\\n      uint256 totalBorrowed,\\n      uint256 totalReward\\n    );\\n\\n  function deposit(uint256 _amount) external;\\n\\n  function unlock(uint256 _amount) external;\\n\\n  function withdrawUnlocked() external;\\n\\n  function repay(uint256 _cvxAmount, uint256 _clevCVXAmount) external;\\n\\n  function borrow(uint256 _amount, bool _depositToFurnace) external;\\n\\n  function donate(uint256 _amount) external;\\n\\n  function harvest(address _recipient, uint256 _minimumOut) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/clever/interfaces/IFurnace.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IFurnace {\\n  event Deposit(address indexed _account, uint256 _amount);\\n  event Withdraw(address indexed _account, address _recipient, uint256 _amount);\\n  event Claim(address indexed _account, address _recipient, uint256 _amount);\\n  event Distribute(address indexed _origin, uint256 _amount);\\n  event Harvest(address indexed _caller, uint256 _amount);\\n\\n  /// @dev Return the amount of clevCVX unrealised and realised of user.\\n  /// @param _account The address of user.\\n  /// @return unrealised The amount of clevCVX unrealised.\\n  /// @return realised The amount of clevCVX realised and can be claimed.\\n  function getUserInfo(address _account) external view returns (uint256 unrealised, uint256 realised);\\n\\n  /// @dev Deposit clevCVX in this contract to change for CVX.\\n  /// @param _amount The amount of clevCVX to deposit.\\n  function deposit(uint256 _amount) external;\\n\\n  /// @dev Deposit clevCVX in this contract to change for CVX for other user.\\n  /// @param _account The address of user you deposit for.\\n  /// @param _amount The amount of clevCVX to deposit.\\n  function depositFor(address _account, uint256 _amount) external;\\n\\n  /// @dev Withdraw unrealised clevCVX of the caller from this contract.\\n  /// @param _recipient The address of user who will recieve the clevCVX.\\n  /// @param _amount The amount of clevCVX to withdraw.\\n  function withdraw(address _recipient, uint256 _amount) external;\\n\\n  /// @dev Withdraw all unrealised clevCVX of the caller from this contract.\\n  /// @param _recipient The address of user who will recieve the clevCVX.\\n  function withdrawAll(address _recipient) external;\\n\\n  /// @dev Claim all realised CVX of the caller from this contract.\\n  /// @param _recipient The address of user who will recieve the CVX.\\n  function claim(address _recipient) external;\\n\\n  /// @dev Exit the contract, withdraw all unrealised clevCVX and realised CVX of the caller.\\n  /// @param _recipient The address of user who will recieve the clevCVX and CVX.\\n  function exit(address _recipient) external;\\n\\n  /// @dev Distribute CVX from `origin` to pay clevCVX debt.\\n  /// @param _origin The address of the user who will provide CVX.\\n  /// @param _amount The amount of CVX will be provided.\\n  function distribute(address _origin, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/clever/interfaces/ICLeverToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICLeverToken is IERC20 {\\n  function mint(address _recipient, uint256 _amount) external;\\n\\n  function burn(uint256 _amount) external;\\n\\n  function burnFrom(address _account, uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISnapshotDelegateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ISnapshotDelegateRegistry {\\n  function setDelegate(bytes32 id, address delegate) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/clever/interfaces/IVotiumMultiMerkleStash.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IVotiumMultiMerkleStash {\\n  // solhint-disable-next-line contract-name-camelcase\\n  struct claimParam {\\n    address token;\\n    uint256 index;\\n    uint256 amount;\\n    bytes32[] merkleProof;\\n  }\\n\\n  function isClaimed(address token, uint256 index) external view returns (bool);\\n\\n  function claim(\\n    address token,\\n    uint256 index,\\n    address account,\\n    uint256 amount,\\n    bytes32[] calldata merkleProof\\n  ) external;\\n\\n  function claimMulti(address account, claimParam[] calldata claims) external;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_harvestBounty\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_cvxAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_clevCVXAmount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"UpdateGovernor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"UpdateHarvestBountyPercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_finishTimestamp\",\"type\":\"uint256\"}],\"name\":\"UpdatePauseTimestamp\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"UpdatePlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"UpdatePlatformFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"UpdateRepayFeePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"UpdateStakePercentage\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"UpdateStakeThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_whitelist\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"UpdateWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"name\":\"UpdateZap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_depositToFurnace\",\"type\":\"bool\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"clevCVX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registry\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_id\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"delegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"furnace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalDeposited\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalPendingUnlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUnlocked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getUserLocks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint192\",\"name\":\"pendingUnlock\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"unlockEpoch\",\"type\":\"uint64\"}],\"internalType\":\"struct CLeverCVXLocker.EpochUnlockInfo[]\",\"name\":\"locks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint192\",\"name\":\"pendingUnlock\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"unlockEpoch\",\"type\":\"uint64\"}],\"internalType\":\"struct CLeverCVXLocker.EpochUnlockInfo[]\",\"name\":\"pendingUnlocks\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOut\",\"type\":\"uint256\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestBountyPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct IVotiumMultiMerkleStash.claimParam[]\",\"name\":\"claims\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256[][]\",\"name\":\"_routes\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256\",\"name\":\"_minimumOut\",\"type\":\"uint256\"}],\"name\":\"harvestVotium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_clevCVX\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_furnace\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_platformFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_harvestBountyPercentage\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isKeeper\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"manualSwapRewardToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pendingUnlocked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"processUnlockableCVX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cvxAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_clevCVXAmount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCVXInPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDebtGlobal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLockedGlobal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPendingUnlockGlobal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnlockedGlobal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"updateGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"updateHarvestBountyPercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_accounts\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateKeepers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateManualSwapRewardToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"updatePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercentage\",\"type\":\"uint256\"}],\"name\":\"updateRepayFeePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_reserveRate\",\"type\":\"uint256\"}],\"name\":\"updateReserveRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"updateRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"}],\"name\":\"updateStakePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_threshold\",\"type\":\"uint256\"}],\"name\":\"updateStakeThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifier\",\"type\":\"address\"}],\"name\":\"updateVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_zap\",\"type\":\"address\"}],\"name\":\"updateZap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"totalDebt\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"rewards\",\"type\":\"uint128\"},{\"internalType\":\"uint192\",\"name\":\"rewardPerSharePaid\",\"type\":\"uint192\"},{\"internalType\":\"uint64\",\"name\":\"lastInteractedBlock\",\"type\":\"uint64\"},{\"internalType\":\"uint112\",\"name\":\"totalLocked\",\"type\":\"uint112\"},{\"internalType\":\"uint112\",\"name\":\"totalUnlocked\",\"type\":\"uint112\"},{\"internalType\":\"uint32\",\"name\":\"nextUnlockIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract ISignatureVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"withdrawManualSwapRewardTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawUnlocked\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "CLeverCVXLocker", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}