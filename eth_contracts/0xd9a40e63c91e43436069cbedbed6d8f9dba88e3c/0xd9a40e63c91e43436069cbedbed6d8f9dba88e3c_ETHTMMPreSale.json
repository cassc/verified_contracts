{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/ETHTMMPreSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract ETHTMMPreSale is Ownable, Pausable, ReentrancyGuard {\\r\\n    uint256 public totalTokensSold = 0;\\r\\n    uint256 public totalUsdRaised = 0;\\r\\n    uint256 public startTime;\\r\\n    uint256 public endTime;\\r\\n    uint256 public claimStart;\\r\\n    uint256 public constant baseDecimals = (10 ** 18);\\r\\n    uint256 public maxTokensToBuy = 50_000_000;\\r\\n    uint256 public minUsdAmountToBuy = 24900000000000000000;\\r\\n    uint256 public currentStage = 0;\\r\\n    uint256 public checkPoint = 0;\\r\\n    uint256 public maxSlippageAmount = 10;\\r\\n\\r\\n    uint256[][3] public stages;\\r\\n\\r\\n    address public saleTokenAdress;\\r\\n    address public constant recipientETHAddress = 0xd3482F3c133991D4445862fFe991b4C4AA18F47B;\\r\\n    address public constant recipientUSDTAddress = 0x3EF7a84C338e050ed63513ec5e6C6E450601bd12;\\r\\n\\r\\n    IERC20 public USDTInterface =\\r\\n        IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\\r\\n    AggregatorV3Interface internal priceFeed =\\r\\n        AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\\r\\n\\r\\n    mapping(address => uint256) public userDeposits;\\r\\n    mapping(address => bool) public hasClaimed;\\r\\n\\r\\n    event SaleTimeSet(uint256 _start, uint256 _end, uint256 timestamp);\\r\\n    event SaleTimeUpdated(\\r\\n        bytes32 indexed key,\\r\\n        uint256 prevValue,\\r\\n        uint256 newValue,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event TokensBought(\\r\\n        address indexed user,\\r\\n        uint256 indexed tokensBought,\\r\\n        address indexed purchaseToken,\\r\\n        uint256 amountPaid,\\r\\n        uint256 usdEq,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event TokensAdded(\\r\\n        address indexed token,\\r\\n        uint256 noOfTokens,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event TokensClaimed(\\r\\n        address indexed user,\\r\\n        uint256 amount,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event ClaimStartUpdated(\\r\\n        uint256 prevValue,\\r\\n        uint256 newValue,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n    event CurrentStageUpdated(\\r\\n        uint256 prevValue,\\r\\n        uint256 newValue,\\r\\n        uint256 timestamp\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract and sets key parameters\\r\\n     * @param _startTime start time of the presale\\r\\n     * @param _endTime end time of the presale\\r\\n     * @param _stages stage data\\r\\n     */\\r\\n    constructor(\\r\\n        uint256 _startTime,\\r\\n        uint256 _endTime,\\r\\n        uint256[][3] memory _stages\\r\\n    ) Ownable(msg.sender) {\\r\\n        require(\\r\\n            _startTime > block.timestamp && _endTime > _startTime,\\r\\n            \\\"Invalid time\\\"\\r\\n        );\\r\\n        startTime = _startTime;\\r\\n        endTime = _endTime;\\r\\n        stages = _stages;\\r\\n        emit SaleTimeSet(startTime, endTime, block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To pause the presale\\r\\n     */\\r\\n    function pause() external onlyOwner {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To unpause the presale\\r\\n     */\\r\\n    function unpause() external onlyOwner {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To change maxTokensToBuy amount\\r\\n     * @param _maxTokensToBuy New max token amount\\r\\n     */\\r\\n    function changeMaxTokensToBuy(uint256 _maxTokensToBuy) external onlyOwner {\\r\\n        require(_maxTokensToBuy > 0, \\\"Zero max tokens to buy value\\\");\\r\\n        maxTokensToBuy = _maxTokensToBuy;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To change minUsdAmountToBuy. If zero, there is no min limit.\\r\\n     * @param _minUsdAmount New min USD amount\\r\\n     */\\r\\n    function changeMinUsdAmountToBuy(uint256 _minUsdAmount) external onlyOwner {\\r\\n        minUsdAmountToBuy = _minUsdAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To change stages data\\r\\n     * @param _stages New stage data\\r\\n     */\\r\\n    function changeStages(uint256[][3] memory _stages) external onlyOwner {\\r\\n        stages = _stages;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To change maxSlippageAmount data\\r\\n     * @param _maxSlippageAmount New maxSlippageAmount data\\r\\n     */\\r\\n    function changeMaxSlippageAmount(\\r\\n        uint256 _maxSlippageAmount\\r\\n    ) external onlyOwner {\\r\\n        maxSlippageAmount = _maxSlippageAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To change USDT interface\\r\\n     * @param _address Address of the USDT interface\\r\\n     */\\r\\n    function changeUSDTInterface(address _address) external onlyOwner {\\r\\n        USDTInterface = IERC20(_address);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To change aggregator interface\\r\\n     * @param _address Address of the aggregator interface\\r\\n     */\\r\\n    function changeAggregatorInterface(address _address) external onlyOwner {\\r\\n        priceFeed = AggregatorV3Interface(_address);\\r\\n    }\\r\\n\\r\\n    modifier checkSaleState(uint256 amount) {\\r\\n        require(\\r\\n            block.timestamp >= startTime && block.timestamp <= endTime,\\r\\n            \\\"Invalid time for buying\\\"\\r\\n        );\\r\\n        require(amount > 0, \\\"Invalid sale amount\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To calculate the price in USD for given amount of tokens.\\r\\n     * @param _amount No of tokens\\r\\n     */\\r\\n    function calculatePrice(uint256 _amount) public view returns (uint256) {\\r\\n        uint256 USDTAmount;\\r\\n        uint256 total = checkPoint == 0 ? totalTokensSold : checkPoint;\\r\\n        require(_amount <= maxTokensToBuy, \\\"Amount exceeds max tokens to buy\\\");\\r\\n        if (\\r\\n            _amount + total > stages[0][currentStage] ||\\r\\n            block.timestamp >= stages[2][currentStage]\\r\\n        ) {\\r\\n            require(currentStage < (stages[0].length - 1), \\\"Not valid\\\");\\r\\n            if (block.timestamp >= stages[2][currentStage]) {\\r\\n                require(\\r\\n                    stages[0][currentStage] + _amount <=\\r\\n                        stages[0][currentStage + 1],\\r\\n                    \\\"\\\"\\r\\n                );\\r\\n                USDTAmount = _amount * stages[1][currentStage + 1];\\r\\n            } else {\\r\\n                uint256 tokenAmountForCurrentPrice = stages[0][currentStage] -\\r\\n                    total;\\r\\n                USDTAmount =\\r\\n                    tokenAmountForCurrentPrice *\\r\\n                    stages[1][currentStage] +\\r\\n                    (_amount - tokenAmountForCurrentPrice) *\\r\\n                    stages[1][currentStage + 1];\\r\\n            }\\r\\n        } else USDTAmount = _amount * stages[1][currentStage];\\r\\n        return USDTAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To update the sale times\\r\\n     * @param _startTime New start time\\r\\n     * @param _endTime New end time\\r\\n     */\\r\\n    function changeSaleTimes(\\r\\n        uint256 _startTime,\\r\\n        uint256 _endTime\\r\\n    ) external onlyOwner {\\r\\n        require(_startTime > 0 || _endTime > 0, \\\"Invalid parameters\\\");\\r\\n        if (_startTime > 0) {\\r\\n            uint256 prevValue = startTime;\\r\\n            startTime = _startTime;\\r\\n            emit SaleTimeUpdated(\\r\\n                bytes32(\\\"START\\\"),\\r\\n                prevValue,\\r\\n                _startTime,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n\\r\\n        if (_endTime > 0) {\\r\\n            uint256 prevValue = endTime;\\r\\n            endTime = _endTime;\\r\\n            emit SaleTimeUpdated(\\r\\n                bytes32(\\\"END\\\"),\\r\\n                prevValue,\\r\\n                _endTime,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To get latest ETH price in 10**18 format\\r\\n     */\\r\\n    function getLatestPrice() public view returns (uint256) {\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        price = (price * (10 ** 10));\\r\\n        return uint256(price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To buy into a presale using USDT\\r\\n     * @param amount No of tokens to buy\\r\\n     */\\r\\n    function buyWithUSDT(\\r\\n        uint256 amount\\r\\n    ) external checkSaleState(amount) whenNotPaused returns (bool) {\\r\\n        uint256 usdPrice = calculatePrice(amount);\\r\\n\\r\\n        uint256 ourAllowance = USDTInterface.allowance(\\r\\n            _msgSender(),\\r\\n            address(this)\\r\\n        );\\r\\n        uint256 price = usdPrice / (10 ** 12);\\r\\n        require(price <= ourAllowance, \\\"Not enough allowance\\\");\\r\\n        (bool success, ) = address(USDTInterface).call(\\r\\n            abi.encodeWithSignature(\\r\\n                \\\"transferFrom(address,address,uint256)\\\",\\r\\n                _msgSender(),\\r\\n                recipientUSDTAddress,\\r\\n                price\\r\\n            )\\r\\n        );\\r\\n        require(success, \\\"Token payment failed\\\");\\r\\n\\r\\n        totalTokensSold += amount;\\r\\n        if (checkPoint != 0) checkPoint += amount;\\r\\n        uint256 total = totalTokensSold > checkPoint\\r\\n            ? totalTokensSold\\r\\n            : checkPoint;\\r\\n        if (\\r\\n            total > stages[0][currentStage] ||\\r\\n            block.timestamp >= stages[2][currentStage]\\r\\n        ) {\\r\\n            if (block.timestamp >= stages[2][currentStage]) {\\r\\n                checkPoint = stages[0][currentStage] + amount;\\r\\n            }\\r\\n            currentStage += 1;\\r\\n\\r\\n            emit CurrentStageUpdated(\\r\\n                currentStage - 1,\\r\\n                currentStage,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n        userDeposits[_msgSender()] += (amount * baseDecimals);\\r\\n        totalUsdRaised += usdPrice;\\r\\n\\r\\n        emit TokensBought(\\r\\n            _msgSender(),\\r\\n            amount,\\r\\n            address(USDTInterface),\\r\\n            usdPrice,\\r\\n            usdPrice,\\r\\n            block.timestamp\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To calculate the amount of tokens buyable with given ETH amount\\r\\n     * @param ethAmount ETH amount in wei\\r\\n     */\\r\\n    function calculateAmount(uint256 ethAmount) public view returns (uint256) {\\r\\n        uint256 ethPriceInUsd = (ethAmount * getLatestPrice()) / baseDecimals;\\r\\n\\r\\n        uint256 total = checkPoint == 0 ? totalTokensSold : checkPoint;\\r\\n        uint256 remainingTokensInStage = stages[0][currentStage] - total;\\r\\n        uint256 usdAmountForRemainingTokens = remainingTokensInStage *\\r\\n            stages[1][currentStage];\\r\\n\\r\\n        uint256 tokenAmount;\\r\\n\\r\\n        if (\\r\\n            ethPriceInUsd > usdAmountForRemainingTokens ||\\r\\n            block.timestamp >= stages[2][currentStage]\\r\\n        ) {\\r\\n            require(currentStage < (stages[0].length - 1), \\\"Not valid\\\");\\r\\n            if (block.timestamp >= stages[2][currentStage]) {\\r\\n                tokenAmount = ethPriceInUsd / stages[1][currentStage + 1];\\r\\n            } else {\\r\\n                tokenAmount =\\r\\n                    remainingTokensInStage +\\r\\n                    (ethPriceInUsd - usdAmountForRemainingTokens) /\\r\\n                    stages[1][currentStage + 1];\\r\\n            }\\r\\n        } else {\\r\\n            tokenAmount = ethPriceInUsd / stages[1][currentStage];\\r\\n        }\\r\\n\\r\\n        return tokenAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To buy into a presale using ETH with slippage\\r\\n     * @param amount No of tokens to buy\\r\\n     * @param slippage Acceptable slippage percentage (0-100)\\r\\n     */\\r\\n    function buyWithEth(\\r\\n        uint256 amount,\\r\\n        uint256 slippage\\r\\n    )\\r\\n        external\\r\\n        payable\\r\\n        checkSaleState(amount)\\r\\n        whenNotPaused\\r\\n        nonReentrant\\r\\n        returns (bool)\\r\\n    {\\r\\n        require(amount <= maxTokensToBuy, \\\"Amount exceeds max tokens to buy\\\");\\r\\n        require(slippage >= 0, \\\"Slippage must bigger than 0\\\");\\r\\n        require(slippage <= maxSlippageAmount, \\\"MaxSlippageAmount exceeds\\\");\\r\\n\\r\\n        uint256 ethAmount = msg.value;\\r\\n        uint256 calculatedAmount = calculateAmount(ethAmount);\\r\\n        require(\\r\\n            calculatedAmount >= (amount * (100 - slippage)) / 100,\\r\\n            \\\"Slippage tolerance exceeded\\\"\\r\\n        );\\r\\n        uint256 usdPrice = (ethAmount * getLatestPrice()) / baseDecimals;\\r\\n\\r\\n        sendValue(payable(recipientETHAddress), ethAmount);\\r\\n\\r\\n        totalTokensSold += calculatedAmount;\\r\\n        if (checkPoint != 0) checkPoint += calculatedAmount;\\r\\n        uint256 total = totalTokensSold > checkPoint\\r\\n            ? totalTokensSold\\r\\n            : checkPoint;\\r\\n        if (\\r\\n            total > stages[0][currentStage] ||\\r\\n            block.timestamp >= stages[2][currentStage]\\r\\n        ) {\\r\\n            if (block.timestamp >= stages[2][currentStage]) {\\r\\n                checkPoint = stages[0][currentStage] + calculatedAmount;\\r\\n            }\\r\\n            currentStage += 1;\\r\\n\\r\\n            emit CurrentStageUpdated(\\r\\n                currentStage - 1,\\r\\n                currentStage,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n        userDeposits[_msgSender()] += (calculatedAmount * baseDecimals);\\r\\n        totalUsdRaised += usdPrice;\\r\\n\\r\\n        emit TokensBought(\\r\\n            _msgSender(),\\r\\n            calculatedAmount,\\r\\n            address(0),\\r\\n            ethAmount,\\r\\n            usdPrice,\\r\\n            block.timestamp\\r\\n        );\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Low balance\\\");\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"ETH Payment failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To set the claim start time and sale token address by the owner\\r\\n     * @param _claimStart claim start time\\r\\n     * @param noOfTokens Number of tokens to add to the contract\\r\\n     * @param _saleTokenAdress sale token address\\r\\n     */\\r\\n    function startClaim(\\r\\n        uint256 _claimStart,\\r\\n        uint256 noOfTokens,\\r\\n        address _saleTokenAdress\\r\\n    ) external onlyOwner returns (bool) {\\r\\n        require(\\r\\n            _claimStart > endTime && _claimStart > block.timestamp,\\r\\n            \\\"Invalid claim start time\\\"\\r\\n        );\\r\\n        require(\\r\\n            noOfTokens >= (totalTokensSold * baseDecimals),\\r\\n            \\\"Tokens less than sold\\\"\\r\\n        );\\r\\n        require(_saleTokenAdress != address(0), \\\"Zero token address\\\");\\r\\n        require(claimStart == 0, \\\"Claim already set\\\");\\r\\n        claimStart = _claimStart;\\r\\n        saleTokenAdress = _saleTokenAdress;\\r\\n        bool success = IERC20(_saleTokenAdress).transferFrom(\\r\\n            _msgSender(),\\r\\n            address(this),\\r\\n            noOfTokens\\r\\n        );\\r\\n        require(success, \\\"Token transfer failed\\\");\\r\\n        emit TokensAdded(saleTokenAdress, noOfTokens, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To change the claim start time by the owner\\r\\n     * @param _claimStart new claim start time\\r\\n     */\\r\\n    function changeClaimStartTime(\\r\\n        uint256 _claimStart\\r\\n    ) external onlyOwner returns (bool) {\\r\\n        require(claimStart > 0, \\\"Initial claim data not set\\\");\\r\\n        require(_claimStart > endTime, \\\"Sale in progress\\\");\\r\\n        require(_claimStart > block.timestamp, \\\"Claim start in past\\\");\\r\\n        uint256 prevValue = claimStart;\\r\\n        claimStart = _claimStart;\\r\\n        emit ClaimStartUpdated(prevValue, _claimStart, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To claim tokens after claiming starts\\r\\n     */\\r\\n    function claim() external whenNotPaused returns (bool) {\\r\\n        require(saleTokenAdress != address(0), \\\"Sale token not added\\\");\\r\\n        require(block.timestamp >= claimStart, \\\"Claim has not started yet\\\");\\r\\n        require(!hasClaimed[_msgSender()], \\\"Already claimed\\\");\\r\\n        hasClaimed[_msgSender()] = true;\\r\\n        uint256 amount = userDeposits[_msgSender()];\\r\\n        require(amount > 0, \\\"Nothing to claim\\\");\\r\\n        delete userDeposits[_msgSender()];\\r\\n        bool success = IERC20(saleTokenAdress).transfer(_msgSender(), amount);\\r\\n        require(success, \\\"Token transfer failed\\\");\\r\\n        emit TokensClaimed(_msgSender(), amount, block.timestamp);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev To manualy change stage\\r\\n     */\\r\\n    function changeCurrentStage(uint256 _currentStage) external onlyOwner {\\r\\n        if (_currentStage > 0) {\\r\\n            checkPoint = stages[0][_currentStage - 1];\\r\\n        }\\r\\n        currentStage = _currentStage;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Helper funtion to get stage information\\r\\n     */\\r\\n    function getStages() external view returns (uint256[][3] memory) {\\r\\n        return stages;\\r\\n    }\\r\\n\\r\\n    function manualBuy(address _to, uint256 amount) external onlyOwner {\\r\\n        uint256 usdPrice = calculatePrice(amount);\\r\\n        totalTokensSold += amount;\\r\\n        userDeposits[_to] += (amount * baseDecimals);\\r\\n        totalUsdRaised += usdPrice;\\r\\n    }\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256[][3]\",\"name\":\"_stages\",\"type\":\"uint256[][3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ClaimStartUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CurrentStageUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SaleTimeSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SaleTimeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noOfTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdEq\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"}],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"name\":\"calculateAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculatePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeAggregatorInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimStart\",\"type\":\"uint256\"}],\"name\":\"changeClaimStartTime\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_currentStage\",\"type\":\"uint256\"}],\"name\":\"changeCurrentStage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSlippageAmount\",\"type\":\"uint256\"}],\"name\":\"changeMaxSlippageAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxTokensToBuy\",\"type\":\"uint256\"}],\"name\":\"changeMaxTokensToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minUsdAmount\",\"type\":\"uint256\"}],\"name\":\"changeMinUsdAmountToBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeSaleTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[][3]\",\"name\":\"_stages\",\"type\":\"uint256[][3]\"}],\"name\":\"changeStages\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeUSDTInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"checkPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStages\",\"outputs\":[{\"internalType\":\"uint256[][3]\",\"name\":\"\",\"type\":\"uint256[][3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualBuy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSlippageAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTokensToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minUsdAmountToBuy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientETHAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientUSDTAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleTokenAdress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stages\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"noOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_saleTokenAdress\",\"type\":\"address\"}],\"name\":\"startClaim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUsdRaised\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ETHTMMPreSale", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000066746e20000000000000000000000000000000000000000000000000000000006743f6400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000004400000000000000000000000000000000000000000000000000000000000000820000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000000000ee6b280000000000000000000000000000000000000000000000000000000001dcd6500000000000000000000000000000000000000000000000000000000002cb41780000000000000000000000000000000000000000000000000000000003b9aca00000000000000000000000000000000000000000000000000000000004a817c800000000000000000000000000000000000000000000000000000000059682f0000000000000000000000000000000000000000000000000000000000684ee180000000000000000000000000000000000000000000000000000000007735940000000000000000000000000000000000000000000000000000000000861c4680000000000000000000000000000000000000000000000000000000009502f90000000000000000000000000000000000000000000000000000000000a3e9ab8000000000000000000000000000000000000000000000000000000000b2d05e0000000000000000000000000000000000000000000000000000000000c1b7108000000000000000000000000000000000000000000000000000000000d09dc30000000000000000000000000000000000000000000000000000000000df84758000000000000000000000000000000000000000000000000000000000ee6b280000000000000000000000000000000000000000000000000000000000fd51da80000000000000000000000000000000000000000000000000000000010c388d00000000000000000000000000000000000000000000000000000000011b1f3f80000000000000000000000000000000000000000000000000000000012a05f2000000000000000000000000000000000000000000000000000000000138eca4800000000000000000000000000000000000000000000000000000000147d357000000000000000000000000000000000000000000000000000000000156ba09800000000000000000000000000000000000000000000000000000000165a0bc000000000000000000000000000000000000000000000000000000000174876e8000000000000000000000000000000000000000000000000000000001836e2100000000000000000000000000000000000000000000000000000000019254d38000000000000000000000000000000000000000000000000000000001a13b860000000000000000000000000000000000000000000000000000000001b022388000000000000000000000000000000000000000000000000000000001bf08eb00000000000000000000000000000000000000000000000000000000000000001e000000000000000000000000000000000000000000000000000221b262dd8000000000000000000000000000000000000000000000000000000233e2ffc2c000000000000000000000000000000000000000000000000000000246139ca8000000000000000000000000000000000000000000000000000000025844398d400000000000000000000000000000000000000000000000000000026a74d672800000000000000000000000000000000000000000000000000000027ca57357c00000000000000000000000000000000000000000000000000000028ed6103d00000000000000000000000000000000000000000000000000000002a106ad2240000000000000000000000000000000000000000000000000000002b3374a0780000000000000000000000000000000000000000000000000000002c567e6ecc0000000000000000000000000000000000000000000000000000002d79883d200000000000000000000000000000000000000000000000000000002e9c920b740000000000000000000000000000000000000000000000000000002fbf9bd9c800000000000000000000000000000000000000000000000000000030e2a5a81c0000000000000000000000000000000000000000000000000000003205af76700000000000000000000000000000000000000000000000000000003328b944c4000000000000000000000000000000000000000000000000000000344bc31318000000000000000000000000000000000000000000000000000000356ecce16c0000000000000000000000000000000000000000000000000000003691d6afc000000000000000000000000000000000000000000000000000000037b4e07e1400000000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000039faf41abc0000000000000000000000000000000000000000000000000000003b1dfde9100000000000000000000000000000000000000000000000000000003c4107b7640000000000000000000000000000000000000000000000000000003d641185b80000000000000000000000000000000000000000000000000000003e871b540c0000000000000000000000000000000000000000000000000000003faa25226000000000000000000000000000000000000000000000000000000040cd2ef0b400000000000000000000000000000000000000000000000000000041f038bf080000000000000000000000000000000000000000000000000000004313428d5c000000000000000000000000000000000000000000000000000000000000000001e0000000000000000000000000000000000000000000000000000000066ab08400000000000000000000000000000000000000000000000000000000066b04e400000000000000000000000000000000000000000000000000000000066b594400000000000000000000000000000000000000000000000000000000066bada400000000000000000000000000000000000000000000000000000000066c020400000000000000000000000000000000000000000000000000000000066c566400000000000000000000000000000000000000000000000000000000066caac400000000000000000000000000000000000000000000000000000000066cff2400000000000000000000000000000000000000000000000000000000066d538400000000000000000000000000000000000000000000000000000000066da7e400000000000000000000000000000000000000000000000000000000066dfc4400000000000000000000000000000000000000000000000000000000066e50a400000000000000000000000000000000000000000000000000000000066ea50400000000000000000000000000000000000000000000000000000000066ef96400000000000000000000000000000000000000000000000000000000066f4dc400000000000000000000000000000000000000000000000000000000066fa22400000000000000000000000000000000000000000000000000000000066ff6840000000000000000000000000000000000000000000000000000000006704ae40000000000000000000000000000000000000000000000000000000006709f44000000000000000000000000000000000000000000000000000000000670f3a400000000000000000000000000000000000000000000000000000000067148040000000000000000000000000000000000000000000000000000000006719c64000000000000000000000000000000000000000000000000000000000671f0c400000000000000000000000000000000000000000000000000000000067245240000000000000000000000000000000000000000000000000000000006729984000000000000000000000000000000000000000000000000000000000672ede4000000000000000000000000000000000000000000000000000000000673424400000000000000000000000000000000000000000000000000000000067396a4000000000000000000000000000000000000000000000000000000000673eb040000000000000000000000000000000000000000000000000000000006743f640", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}