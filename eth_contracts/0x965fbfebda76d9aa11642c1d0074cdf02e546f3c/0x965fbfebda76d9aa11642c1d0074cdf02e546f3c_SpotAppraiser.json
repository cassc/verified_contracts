{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@ampleforthorg/spot-contracts/contracts/_interfaces/buttonwood/IBondController.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { ITranche } from \\\"./ITranche.sol\\\";\\n\\ninterface IBondController {\\n    function collateralToken() external view returns (address);\\n\\n    function maturityDate() external view returns (uint256);\\n\\n    function creationDate() external view returns (uint256);\\n\\n    function totalDebt() external view returns (uint256);\\n\\n    function feeBps() external view returns (uint256);\\n\\n    function isMature() external view returns (bool);\\n\\n    function tranches(uint256 i) external view returns (ITranche token, uint256 ratio);\\n\\n    function trancheCount() external view returns (uint256 count);\\n\\n    function trancheTokenAddresses(ITranche token) external view returns (bool);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function redeem(uint256[] memory amounts) external;\\n\\n    function mature() external;\\n\\n    function redeemMature(address tranche, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"@ampleforthorg/spot-contracts/contracts/_interfaces/buttonwood/ITranche.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ITranche is IERC20Upgradeable {\\n    function bond() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@ampleforthorg/spot-contracts/contracts/_interfaces/CommonTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nstruct TokenAmount {\\n    /// @notice The asset token redeemed.\\n    IERC20Upgradeable token;\\n    /// @notice The amount redeemed.\\n    uint256 amount;\\n}\\n\\n/// @notice The system subscription parameters.\\nstruct SubscriptionParams {\\n    /// @notice The current TVL of perp denominated in the underlying.\\n    uint256 perpTVL;\\n    /// @notice The current TVL of the vault denominated in the underlying.\\n    uint256 vaultTVL;\\n    /// @notice The tranche ratio of seniors accepted by perp.\\n    uint256 seniorTR;\\n}\\n\\nstruct RolloverData {\\n    /// @notice The amount of tokens rolled out.\\n    uint256 tokenOutAmt;\\n    /// @notice The amount of trancheIn tokens rolled in.\\n    uint256 trancheInAmt;\\n}\\n\"\r\n    },\r\n    \"@ampleforthorg/spot-contracts/contracts/_interfaces/IBondIssuer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IBondController } from \\\"./buttonwood/IBondController.sol\\\";\\n\\ninterface IBondIssuer {\\n    /// @notice Event emitted when a new bond is issued by the issuer.\\n    /// @param bond The newly issued bond.\\n    event BondIssued(IBondController bond);\\n\\n    /// @notice Event emitted when a bond has matured.\\n    /// @param bond The matured bond.\\n    event BondMature(IBondController bond);\\n\\n    /// @notice The address of the underlying collateral token to be used for issued bonds.\\n    /// @return Address of the collateral token.\\n    function collateral() external view returns (address);\\n\\n    /// @notice Invokes `mature` on issued active bonds.\\n    function matureActive() external;\\n\\n    /// @notice Issues a new bond if sufficient time has elapsed since the last issue.\\n    function issue() external;\\n\\n    /// @notice Checks if a given bond has been issued by the issuer.\\n    /// @param bond Address of the bond to check.\\n    /// @return if the bond has been issued by the issuer.\\n    function isInstance(IBondController bond) external view returns (bool);\\n\\n    /// @notice Fetches the most recently issued bond.\\n    /// @return Address of the most recent bond.\\n    function getLatestBond() external returns (IBondController);\\n\\n    /// @notice Returns the total number of bonds issued by this issuer.\\n    /// @return Number of bonds.\\n    function issuedCount() external view returns (uint256);\\n\\n    /// @notice The bond address from the issued list by index.\\n    /// @param index The index of the bond in the issued list.\\n    /// @return Address of the bond.\\n    function issuedBondAt(uint256 index) external view returns (IBondController);\\n}\\n\"\r\n    },\r\n    \"@ampleforthorg/spot-contracts/contracts/_interfaces/IFeePolicy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { SubscriptionParams } from \\\"./CommonTypes.sol\\\";\\n\\ninterface IFeePolicy {\\n    /// @return The percentage of the mint perp tokens to be charged as fees,\\n    ///         as a fixed-point number with {DECIMALS} decimal places.\\n    function computePerpMintFeePerc() external view returns (uint256);\\n\\n    /// @return The percentage of the burnt perp tokens to be charged as fees,\\n    ///         as a fixed-point number with {DECIMALS} decimal places.\\n    function computePerpBurnFeePerc() external view returns (uint256);\\n\\n    /// @param dr The current system deviation ratio.\\n    /// @return The applied exchange rate adjustment between tranches into perp and\\n    ///         tokens out of perp during a rollover,\\n    ///         as a fixed-point number with {DECIMALS} decimal places.\\n    /// @dev - A fee of 0%, implies the rollover exchange rate is unaltered.\\n    ///         example) 100 tranchesIn for 100 tranchesOut\\n    ///      - A fee of 1%, implies the exchange rate is adjusted in favor of tranchesIn.\\n    ///         example) 100 tranchesIn for 99 tranchesOut; i.e) perp enrichment\\n    ///      - A fee of -1%, implies the exchange rate is adjusted in favor of tranchesOut.\\n    ///         example) 99 tranchesIn for 100 tranchesOut\\n    function computePerpRolloverFeePerc(uint256 dr) external view returns (int256);\\n\\n    /// @return The percentage of the mint vault note amount to be charged as fees,\\n    ///         as a fixed-point number with {DECIMALS} decimal places.\\n    function computeVaultMintFeePerc() external view returns (uint256);\\n\\n    /// @return The percentage of the burnt vault note amount to be charged as fees,\\n    ///         as a fixed-point number with {DECIMALS} decimal places.\\n    function computeVaultBurnFeePerc() external view returns (uint256);\\n\\n    /// @param dr The current system deviation ratio.\\n    /// @param dr_ The deviation ratio of the system after the operation is complete.\\n    /// @return The percentage of perp tokens out to be charged as swap fees by the vault,\\n    ///         as a fixed-point numbers with {DECIMALS} decimal places.\\n    function computeUnderlyingToPerpVaultSwapFeePerc(uint256 dr, uint256 dr_) external view returns (uint256);\\n\\n    /// @param dr The current system deviation ratio.\\n    /// @param dr_ The deviation ratio of the system after the operation is complete.\\n    /// @return The percentage of underlying tokens out to be charged as swap fees by the vault,\\n    ///         as a fixed-point numbers with {DECIMALS} decimal places.\\n    function computePerpToUnderlyingVaultSwapFeePerc(uint256 dr, uint256 dr_) external view returns (uint256);\\n\\n    /// @return Number of decimals representing a multiplier of 1.0. So, 100% = 1*10**decimals.\\n    function decimals() external view returns (uint8);\\n\\n    /// @param s The subscription parameters of both the perp and vault systems.\\n    /// @return The deviation ratio given the system subscription parameters.\\n    function computeDeviationRatio(SubscriptionParams memory s) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@ampleforthorg/spot-contracts/contracts/_interfaces/IPerpetualTranche.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport { IBondIssuer } from \\\"./IBondIssuer.sol\\\";\\nimport { IFeePolicy } from \\\"./IFeePolicy.sol\\\";\\nimport { IBondController } from \\\"./buttonwood/IBondController.sol\\\";\\nimport { ITranche } from \\\"./buttonwood/ITranche.sol\\\";\\nimport { IRolloverVault } from \\\"./IRolloverVault.sol\\\";\\nimport { TokenAmount, RolloverData } from \\\"./CommonTypes.sol\\\";\\n\\ninterface IPerpetualTranche is IERC20Upgradeable {\\n    //--------------------------------------------------------------------------\\n    // Events\\n\\n    /// @notice Event emitted the reserve's current token balance is recorded after change.\\n    /// @param token Address of token.\\n    /// @param balance The recorded ERC-20 balance of the token held by the reserve.\\n    event ReserveSynced(IERC20Upgradeable token, uint256 balance);\\n\\n    /// @notice Event emitted when the active deposit bond is updated.\\n    /// @param bond Address of the new deposit bond.\\n    event UpdatedDepositBond(IBondController bond);\\n\\n    //--------------------------------------------------------------------------\\n    // Methods\\n\\n    /// @notice Deposits tranche tokens into the system and mint perp tokens.\\n    /// @param trancheIn The address of the tranche token to be deposited.\\n    /// @param trancheInAmt The amount of tranche tokens deposited.\\n    /// @return The amount of perp tokens minted.\\n    function deposit(ITranche trancheIn, uint256 trancheInAmt) external returns (uint256);\\n\\n    /// @notice Burn perp tokens and redeem the share of reserve assets.\\n    /// @param perpAmtBurnt The amount of perp tokens burnt from the caller.\\n    /// @return tokensOut The list of reserve tokens and amounts redeemed.\\n    function redeem(uint256 perpAmtBurnt) external returns (TokenAmount[] memory tokensOut);\\n\\n    /// @notice Rotates newer tranches in for reserve tokens.\\n    /// @param trancheIn The tranche token deposited.\\n    /// @param tokenOut The reserve token to be redeemed.\\n    /// @param trancheInAmt The amount of trancheIn tokens deposited.\\n    /// @return r The rollover amounts in various denominations.\\n    function rollover(\\n        ITranche trancheIn,\\n        IERC20Upgradeable tokenOut,\\n        uint256 trancheInAmt\\n    ) external returns (RolloverData memory r);\\n\\n    /// @notice External contract that stores a predefined bond config and frequency,\\n    ///         and issues new bonds when poked.\\n    /// @return The address of the bond issuer.\\n    function bondIssuer() external view returns (IBondIssuer);\\n\\n    /// @notice Reference to the address that has the ability to pause/unpause operations.\\n    /// @return The address of the keeper.\\n    function keeper() external view returns (address);\\n\\n    /// @notice The address of the underlying rebasing ERC-20 collateral token backing the tranches.\\n    /// @return Address of the underlying collateral token.\\n    function underlying() external view returns (IERC20Upgradeable);\\n\\n    /// @return Address of perp's rollover vault.\\n    function vault() external view returns (IRolloverVault);\\n\\n    /// @notice The parent bond whose tranches are currently accepted to mint perp tokens.\\n    /// @return Address of the deposit bond.\\n    function getDepositBond() external returns (IBondController);\\n\\n    /// @notice The tranche token contract currently accepted to mint perp tokens.\\n    /// @return Address of the deposit tranche ERC-20 token.\\n    function getDepositTranche() external returns (ITranche);\\n\\n    /// @return The tranche ratio of the current deposit tranche.\\n    function getDepositTrancheRatio() external returns (uint256);\\n\\n    /// @notice The policy contract with the fee computation logic for the perp and vault systems.\\n    /// @return Address of the policy contract.\\n    function feePolicy() external view returns (IFeePolicy);\\n\\n    /// @notice Total count of tokens held in the reserve.\\n    /// @return The reserve token count.\\n    function getReserveCount() external returns (uint256);\\n\\n    /// @notice The token address from the reserve list by index.\\n    /// @param index The index of a token.\\n    /// @return The reserve token address.\\n    function getReserveAt(uint256 index) external returns (IERC20Upgradeable);\\n\\n    /// @notice Checks if the given token is part of the reserve.\\n    /// @param token The address of a token to check.\\n    /// @return If the token is part of the reserve.\\n    function inReserve(IERC20Upgradeable token) external returns (bool);\\n\\n    /// @notice Fetches the reserve's token balance.\\n    /// @param token The address of the tranche token held by the reserve.\\n    /// @return The ERC-20 balance of the reserve token.\\n    function getReserveTokenBalance(IERC20Upgradeable token) external returns (uint256);\\n\\n    /// @notice Calculates the reserve's token value,\\n    ///         in a standard denomination as defined by the implementation.\\n    /// @param token The address of the tranche token held by the reserve.\\n    /// @return The value of the reserve token balance held by the reserve, in a standard denomination.\\n    function getReserveTokenValue(IERC20Upgradeable token) external returns (uint256);\\n\\n    /// @notice Computes the total value of assets currently held in the reserve.\\n    /// @return The total value of the perp system, in a standard denomination.\\n    function getTVL() external returns (uint256);\\n\\n    /// @notice Fetches the list of reserve tokens which are up for rollover.\\n    /// @return The list of reserve tokens up for rollover.\\n    function getReserveTokensUpForRollover() external returns (IERC20Upgradeable[] memory);\\n\\n    /// @notice Computes the amount of perp tokens minted when `trancheInAmt` `trancheIn` tokens\\n    ///         are deposited into the system.\\n    /// @param trancheIn The tranche token deposited.\\n    /// @param trancheInAmt The amount of tranche tokens deposited.\\n    /// @return The amount of perp tokens to be minted.\\n    function computeMintAmt(ITranche trancheIn, uint256 trancheInAmt) external returns (uint256);\\n\\n    /// @notice Computes the amount reserve tokens redeemed when burning given number of perp tokens.\\n    /// @param perpAmtBurnt The amount of perp tokens to be burnt.\\n    /// @return tokensOut The list of reserve tokens and amounts redeemed.\\n    function computeRedemptionAmts(uint256 perpAmtBurnt) external returns (TokenAmount[] memory tokensOut);\\n\\n    /// @notice Computes the amount reserve tokens that are rolled out for the given number\\n    ///         of `trancheIn` tokens rolled in.\\n    /// @param trancheIn The tranche token rolled in.\\n    /// @param tokenOut The reserve token to be rolled out.\\n    /// @param trancheInAmtAvailable The amount of trancheIn tokens rolled in.\\n    /// @return r The rollover amounts in various denominations.\\n    function computeRolloverAmt(\\n        ITranche trancheIn,\\n        IERC20Upgradeable tokenOut,\\n        uint256 trancheInAmtAvailable\\n    ) external returns (RolloverData memory r);\\n\\n    /// @notice Updates time dependent storage state.\\n    function updateState() external;\\n\\n    /// @return The system's current deviation ratio.\\n    function deviationRatio() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@ampleforthorg/spot-contracts/contracts/_interfaces/IRolloverVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IVault } from \\\"./IVault.sol\\\";\\nimport { SubscriptionParams } from \\\"./CommonTypes.sol\\\";\\n\\ninterface IRolloverVault is IVault {\\n    /// @notice Allows users to swap their underlying tokens for perps held by the vault.\\n    /// @param underlyingAmtIn The amount of underlying tokens swapped in.\\n    /// @return The amount of perp tokens swapped out.\\n    function swapUnderlyingForPerps(uint256 underlyingAmtIn) external returns (uint256);\\n\\n    /// @notice Allows users to swap their perp tokens for underlying tokens held by the vault.\\n    /// @param perpAmtIn The amount of perp tokens swapped in.\\n    /// @return The amount of underlying tokens swapped out.\\n    function swapPerpsForUnderlying(uint256 perpAmtIn) external returns (uint256);\\n\\n    /// @notice Computes the amount of perp tokens that are returned when user swaps a given number of underlying tokens.\\n    /// @param underlyingAmtIn The number of underlying tokens the user swaps in.\\n    /// @return perpAmtOut The number of perp tokens returned to the user.\\n    /// @return perpFeeAmtToBurn The amount of perp tokens to be paid to the perp contract as mint fees.\\n    /// @return s The pre-swap perp and vault subscription state.\\n    function computeUnderlyingToPerpSwapAmt(\\n        uint256 underlyingAmtIn\\n    ) external returns (uint256, uint256, SubscriptionParams memory);\\n\\n    /// @notice Computes the amount of underlying tokens that are returned when user swaps a given number of perp tokens.\\n    /// @param perpAmtIn The number of perp tokens the user swaps in.\\n    /// @return underlyingAmtOut The number of underlying tokens returned to the user.\\n    /// @return perpFeeAmtToBurn The amount of perp tokens to be paid to the perp contract as burn fees.\\n    /// @return s The pre-swap perp and vault subscription state.\\n    function computePerpToUnderlyingSwapAmt(\\n        uint256 perpAmtIn\\n    ) external returns (uint256, uint256, SubscriptionParams memory);\\n\\n    /// @return The system's current deviation ratio.\\n    function deviationRatio() external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@ampleforthorg/spot-contracts/contracts/_interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { TokenAmount } from \\\"./CommonTypes.sol\\\";\\n\\n/*\\n *  @title IVault\\n *\\n *  @notice The standard interface for a generic vault as described by the \\\"Vault Framework\\\".\\n *          http://thinking.farm/essays/2022-10-05-mechanical-finance/\\n *\\n *          Users deposit a \\\"underlying\\\" asset and mint \\\"notes\\\" (or vault shares).\\n *          The vault \\\"deploys\\\" underlying asset in a rules-based fashion (through a hard-coded strategy).\\n *          It \\\"recovers\\\" deployed assets once the investment matures.\\n *\\n *          The vault operates through two external poke functions which off-chain keepers can execute.\\n *              1) `deploy`: When executed, the vault \\\"puts to work\\\" the underlying assets it holds. The vault\\n *                           usually returns other ERC-20 tokens which act as receipts of the deployment.\\n *              2) `recover`: When executed, the vault turns in the receipts and retrieves the underlying asset and\\n *                            usually collects some yield for this work.\\n *\\n *          The rules of the deployment and recovery are specific to the vault strategy.\\n *\\n *          At any time the vault will hold multiple ERC20 tokens, together referred to as the vault's \\\"assets\\\".\\n *          They can be a combination of the underlying asset and the deployed assets (receipts).\\n *\\n *          On redemption users burn their \\\"notes\\\" to receive a proportional slice of all the vault's assets.\\n *\\n */\\n\\ninterface IVault is IERC20Upgradeable {\\n    /// @notice Recovers deployed funds and redeploys them.\\n    function recoverAndRedeploy() external;\\n\\n    /// @notice Deploys deposited funds.\\n    function deploy() external;\\n\\n    /// @notice Recovers deployed funds.\\n    function recover() external;\\n\\n    /// @notice Recovers a given deployed asset.\\n    /// @param token The ERC-20 token address of the deployed asset.\\n    function recover(IERC20Upgradeable token) external;\\n\\n    /// @notice Deposits the underlying asset from {msg.sender} into the vault and mints notes.\\n    /// @param amount The amount tokens to be deposited into the vault.\\n    /// @return The amount of notes.\\n    function deposit(uint256 amount) external returns (uint256);\\n\\n    /// @notice Burns notes and sends a proportional share of vault's assets back to {msg.sender}.\\n    /// @param notes The amount of notes to be burnt.\\n    /// @return The list of asset tokens and amounts redeemed.\\n    function redeem(uint256 notes) external returns (TokenAmount[] memory);\\n\\n    /// @notice Batches the recover and redeem functions.\\n    /// @param notes The amount of notes to be burnt.\\n    /// @return The list of asset tokens and amounts redeemed.\\n    function recoverAndRedeem(uint256 notes) external returns (TokenAmount[] memory);\\n\\n    /// @return The total value of assets currently held by the vault, denominated in a standard unit of account.\\n    function getTVL() external view returns (uint256);\\n\\n    /// @param token The address of the asset ERC-20 token held by the vault.\\n    /// @return The vault's asset token value, denominated in a standard unit of account.\\n    function getVaultAssetValue(IERC20Upgradeable token) external view returns (uint256);\\n\\n    /// @notice The ERC20 token that can be deposited into this vault.\\n    function underlying() external view returns (IERC20Upgradeable);\\n\\n    /// @return Total count of ERC-20 tokens held by the vault.\\n    function assetCount() external view returns (uint256);\\n\\n    /// @param i The index of a token.\\n    /// @return The vault's asset token address by index.\\n    function assetAt(uint256 i) external view returns (IERC20Upgradeable);\\n\\n    /// @param token The address of the asset ERC-20 token held by the vault.\\n    /// @return The vault's asset token balance.\\n    function vaultAssetBalance(IERC20Upgradeable token) external view returns (uint256);\\n\\n    /// @param token The address of a token to check.\\n    /// @return If the given token is held by the vault.\\n    function isVaultAsset(IERC20Upgradeable token) external view returns (bool);\\n\\n    /// @notice Computes the amount of notes minted when given amount of underlying asset tokens\\n    ///         are deposited into the system.\\n    /// @param amount The amount tokens to be deposited into the vault.\\n    /// @return The amount of notes to be minted.\\n    function computeMintAmt(uint256 amount) external returns (uint256);\\n\\n    /// @notice Computes the amount of asset tokens redeemed when burning given number of vault notes.\\n    /// @param notes The amount of notes to be burnt.\\n    /// @return The list of asset tokens and amounts redeemed.\\n    function computeRedemptionAmts(uint256 notes) external returns (TokenAmount[] memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/BillBrokerErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.24;\\n\\n/// @notice Expected contract call to be triggered by authorized caller.\\nerror UnauthorizedCall();\\n\\n/// @notice Expected interface contract to return a fixed point with a different number of decimals.\\nerror UnexpectedDecimals();\\n\\n/// @notice Expected perc value to be at most (1 * 10**DECIMALS), i.e) 1.0 or 100%.\\nerror InvalidPerc();\\n\\n/// @notice Expected Senior CDR bound to be more than 1.0 or 100%.\\nerror InvalidSeniorCDRBound();\\n\\n/// @notice Expect AR lower bound to be under the upper bound.\\nerror InvalidARBound();\\n\\n/// @notice Expected pre and post swap AR delta to be non-increasing or non-decreasing.\\nerror UnexpectedARDelta();\\n\\n/// @notice Slippage higher than tolerance requested by user.\\nerror SlippageTooHigh();\\n\\n/// @notice Expected non-zero swap amounts;\\nerror UnacceptableSwap();\\n\\n/// @notice Expected usable external price.\\nerror UnreliablePrice();\\n\"\r\n    },\r\n    \"contracts/_interfaces/external/IAmpleforthOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.24;\\n\\ninterface IAmpleforthOracle {\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DECIMALS() external returns (uint8);\\n    function getData() external returns (uint256, bool);\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/external/IChainlinkOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.24;\\n\\ninterface IChainlinkOracle {\\n    function decimals() external view returns (uint8);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/_interfaces/IBillBrokerPricingStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.24;\\n\\n/**\\n * @title IBillBrokerPricingStrategy\\n *\\n * @notice Pricing strategy adapter for a BillBroker vault\\n *         which accepts Perp and USDC tokens.\\n *\\n */\\ninterface IBillBrokerPricingStrategy {\\n    /// @return Number of decimals representing the prices returned.\\n    function decimals() external pure returns (uint8);\\n\\n    /// @return price The price of USD tokens.\\n    /// @return isValid True if the returned price is valid.\\n    function usdPrice() external returns (uint256 price, bool isValid);\\n\\n    /// @return price The price of perp tokens.\\n    /// @return isValid True if the returned price is valid.\\n    function perpPrice() external returns (uint256 price, bool isValid);\\n}\\n\"\r\n    },\r\n    \"contracts/_strategies/SpotAppraiser.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.24;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { Math } from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ITranche } from \\\"@ampleforthorg/spot-contracts/contracts/_interfaces/buttonwood/ITranche.sol\\\";\\nimport { IBondController } from \\\"@ampleforthorg/spot-contracts/contracts/_interfaces/buttonwood/IBondController.sol\\\";\\nimport { IPerpetualTranche } from \\\"@ampleforthorg/spot-contracts/contracts/_interfaces/IPerpetualTranche.sol\\\";\\nimport { IChainlinkOracle } from \\\"../_interfaces/external/IChainlinkOracle.sol\\\";\\nimport { IAmpleforthOracle } from \\\"../_interfaces/external/IAmpleforthOracle.sol\\\";\\nimport { IBillBrokerPricingStrategy } from \\\"../_interfaces/IBillBrokerPricingStrategy.sol\\\";\\nimport { InvalidSeniorCDRBound } from \\\"../_interfaces/BillBrokerErrors.sol\\\";\\n\\n/**\\n * @title SpotAppraiser\\n *\\n * @notice Pricing strategy adapter for a BillBroker vault which accepts\\n *         SPOT (as the perp token) and dollar tokens like USDC.\\n *\\n *         AMPL is the underlying token for SPOT.\\n *         The market price of AMPL is mean reverting and eventually converges to its target.\\n *         However, it can significantly deviate from the target in the near term.\\n *\\n *         SPOT is a perpetual claim on AMPL senior tranches. Insofar as SPOT is fully backed by\\n *         healthy senior tranches, we can price spot reliably using the following strategy:\\n *\\n *         SPOT_PRICE = MULTIPLIER * AMPL_TARGET\\n *         MULTIPLIER = spot.getTVL() / spot.totalSupply(), which is it's enrichment/debasement factor.\\n *         To know more, read the spot documentation.\\n *\\n *         We get the AMPL target price from Ampleforth's CPI oracle,\\n *         which is also used by the protocol to adjust AMPL supply through rebasing.\\n *\\n *         And the MULTIPLIER is directly queried from the SPOT contract.\\n *\\n */\\ncontract SpotAppraiser is Ownable, IBillBrokerPricingStrategy {\\n    //-------------------------------------------------------------------------\\n    // Libraries\\n    using Math for uint256;\\n\\n    //-------------------------------------------------------------------------\\n    // Constants & Immutables\\n\\n    uint256 private constant DECIMALS = 18;\\n    uint256 private constant ONE = (10 ** DECIMALS);\\n    uint256 private constant SPOT_DR_DECIMALS = 8;\\n    uint256 private constant SPOT_DR_ONE = (10 ** SPOT_DR_DECIMALS);\\n    uint256 public constant CL_ORACLE_DECIMALS = 8;\\n    uint256 public constant CL_ORACLE_STALENESS_THRESHOLD_SEC = 3600 * 48; // 2 days\\n    uint256 public constant USD_LOWER_BOUND = (99 * ONE) / 100; // 0.99$\\n    uint256 public constant AMPL_DUST_AMT = 25000 * (10 ** 9); // 25000 AMPL\\n\\n    /// @notice Address of the SPOT (perpetual tranche) ERC-20 token contract.\\n    IPerpetualTranche public immutable SPOT;\\n\\n    /// @notice Address of the AMPL ERC-20 token contract.\\n    IERC20 public immutable AMPL;\\n\\n    /// @notice Address of the USD token market price oracle.\\n    IChainlinkOracle public immutable USD_ORACLE;\\n\\n    /// @notice Number of decimals representing the prices returned by the chainlink oracle.\\n    uint256 public immutable USD_ORACLE_DECIMALS;\\n\\n    /// @notice Address of the Ampleforth CPI oracle. (provides the inflation-adjusted target price for AMPL).\\n    IAmpleforthOracle public immutable AMPL_CPI_ORACLE;\\n\\n    /// @notice Number of decimals representing the prices returned by the ampleforth oracle.\\n    uint256 public immutable AMPL_CPI_ORACLE_DECIMALS;\\n\\n    //-------------------------------------------------------------------------\\n    // Storage\\n\\n    /// @notice The minimum \\\"deviation ratio\\\" of the SPOT outside which it's considered unhealthy.\\n    uint256 public minSPOTDR;\\n\\n    /// @notice The minimum CDR of senior tranches backing SPOT outside which it's considered unhealthy.\\n    uint256 public minSeniorCDR;\\n\\n    //-----------------------------------------------------------------------------\\n    // Constructor\\n\\n    /// @notice Contract constructor.\\n    /// @param spot Address of the SPOT token.\\n    /// @param usdOracle Address of the USD token market price oracle token.\\n    /// @param cpiOracle Address of the Ampleforth CPI oracle.\\n    constructor(\\n        IPerpetualTranche spot,\\n        IChainlinkOracle usdOracle,\\n        IAmpleforthOracle cpiOracle\\n    ) Ownable() {\\n        SPOT = spot;\\n        AMPL = IERC20(address(spot.underlying()));\\n\\n        USD_ORACLE = usdOracle;\\n        USD_ORACLE_DECIMALS = usdOracle.decimals();\\n\\n        AMPL_CPI_ORACLE = cpiOracle;\\n        AMPL_CPI_ORACLE_DECIMALS = cpiOracle.DECIMALS();\\n\\n        minSPOTDR = (ONE * 8) / 10; // 0.8\\n        minSeniorCDR = (ONE * 11) / 10; // 110%\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // Owner only methods\\n\\n    /// @notice Controls the minimum `deviationRatio` ratio of SPOT below which SPOT is considered unhealthy.\\n    /// @param minSPOTDR_ The minimum SPOT `deviationRatio`.\\n    function updateMinSPOTDR(uint256 minSPOTDR_) external onlyOwner {\\n        minSPOTDR = minSPOTDR_;\\n    }\\n\\n    /// @notice Controls the minimum CDR of SPOT's senior tranche below which SPOT is considered unhealthy.\\n    /// @param minSeniorCDR_ The minimum senior tranche CDR.\\n    function updateMinPerpCollateralCDR(uint256 minSeniorCDR_) external onlyOwner {\\n        if (minSeniorCDR_ < ONE) {\\n            revert InvalidSeniorCDRBound();\\n        }\\n        minSeniorCDR = minSeniorCDR_;\\n    }\\n\\n    //--------------------------------------------------------------------------\\n    // External methods\\n\\n    /// @return p The price of the usd token in dollars.\\n    /// @return v True if the price is valid and can be used by downstream consumers.\\n    function usdPrice() external view override returns (uint256, bool) {\\n        (uint256 p, bool v) = _getCLOracleData(USD_ORACLE, USD_ORACLE_DECIMALS);\\n        // If the market price of the USD coin fallen too much below 1$,\\n        // it's an indication of some systemic issue with the USD token\\n        // and thus its price should be considered unreliable.\\n        return (ONE, (v && p > USD_LOWER_BOUND));\\n    }\\n\\n    /// @return p The price of the spot token in dollar coins.\\n    /// @return v True if the price is valid and can be used by downstream consumers.\\n    function perpPrice() external override returns (uint256, bool) {\\n        (uint256 targetPrice, bool targetPriceValid) = AMPL_CPI_ORACLE.getData();\\n        uint256 p = targetPrice.mulDiv(SPOT.getTVL(), SPOT.totalSupply());\\n        bool v = (targetPriceValid && isSPOTHealthy());\\n        return (p, v);\\n    }\\n\\n    /// @return Number of decimals representing a price of 1.0 USD.\\n    function decimals() external pure override returns (uint8) {\\n        return uint8(DECIMALS);\\n    }\\n\\n    //-----------------------------------------------------------------------------\\n    // Public methods\\n\\n    /// @return If the spot token is healthy.\\n    function isSPOTHealthy() public returns (bool) {\\n        // If the SPOT's `deviationRatio` is lower than the defined bound\\n        // i.e) it doesn't have enough capital to cover future rollovers,\\n        // we consider it unhealthy.\\n        uint256 spotDR = SPOT.deviationRatio().mulDiv(ONE, SPOT_DR_ONE);\\n        if (spotDR < minSPOTDR) {\\n            return false;\\n        }\\n\\n        // We compute the CDR of all the senior tranches backing perp.\\n        // If any one of the seniors is mature or has a CDR below below the defined minimum,\\n        // we consider it unhealthy.\\n        // NOTE: Any CDR below 100%, means that the tranche is impaired\\n        // and is roughly equivalent to holding AMPL.\\n        uint8 reserveCount = uint8(SPOT.getReserveCount());\\n        for (uint8 i = 1; i < reserveCount; i++) {\\n            ITranche tranche = ITranche(address(SPOT.getReserveAt(i)));\\n            IBondController bond = IBondController(tranche.bond());\\n            if (bond.isMature()) {\\n                return false;\\n            }\\n            uint256 seniorCDR = AMPL.balanceOf(address(bond)).mulDiv(\\n                ONE,\\n                tranche.totalSupply()\\n            );\\n            if (seniorCDR < minSeniorCDR) {\\n                return false;\\n            }\\n        }\\n\\n        // If SPOT has ANY raw AMPL as collateral, we consider it unhealthy.\\n        // NOTE: In practice some dust might exist or someone could grief this check\\n        // by transferring some dust AMPL into the spot contract.\\n        // We consider SPOT unhealthy if it has more than `AMPL_DUST_AMT` AMPL.\\n        if (AMPL.balanceOf(address(SPOT)) > AMPL_DUST_AMT) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    //-----------------------------------------------------------------------------\\n    // Private methods\\n\\n    /// @dev Fetches most recent report from the given chain link oracle contract.\\n    ///      The data is considered invalid if the latest report is stale.\\n    function _getCLOracleData(\\n        IChainlinkOracle oracle,\\n        uint256 oracleDecimals\\n    ) private view returns (uint256, bool) {\\n        (, int256 p, , uint256 updatedAt, ) = oracle.latestRoundData();\\n        uint256 price = uint256(p).mulDiv(ONE, 10 ** oracleDecimals);\\n        return (\\n            price,\\n            (block.timestamp - updatedAt) <= CL_ORACLE_STALENESS_THRESHOLD_SEC\\n        );\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 750\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPerpetualTranche\",\"name\":\"spot\",\"type\":\"address\"},{\"internalType\":\"contract IChainlinkOracle\",\"name\":\"usdOracle\",\"type\":\"address\"},{\"internalType\":\"contract IAmpleforthOracle\",\"name\":\"cpiOracle\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidSeniorCDRBound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AMPL\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMPL_CPI_ORACLE\",\"outputs\":[{\"internalType\":\"contract IAmpleforthOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMPL_CPI_ORACLE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"AMPL_DUST_AMT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CL_ORACLE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CL_ORACLE_STALENESS_THRESHOLD_SEC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPOT\",\"outputs\":[{\"internalType\":\"contract IPerpetualTranche\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_LOWER_BOUND\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_ORACLE\",\"outputs\":[{\"internalType\":\"contract IChainlinkOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USD_ORACLE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSPOTHealthy\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSPOTDR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minSeniorCDR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"perpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSeniorCDR_\",\"type\":\"uint256\"}],\"name\":\"updateMinPerpCollateralCDR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minSPOTDR_\",\"type\":\"uint256\"}],\"name\":\"updateMinSPOTDR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SpotAppraiser", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "750", "ConstructorArguments": "000000000000000000000000c1f33e0cf7e40a67375007104b929e49a581bafe0000000000000000000000008fffffd4afb6115b954bd326cbe7b4ba576818f60000000000000000000000002a18bfb505b49aed12f19f271cc1183f98ff4f71", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}