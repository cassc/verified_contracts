{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/gateway/routers/axelar/Router.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.21;\\n\\nimport {Auth} from \\\"./../../../util/Auth.sol\\\";\\n\\ninterface AxelarGatewayLike {\\n    function callContract(string calldata destinationChain, string calldata contractAddress, bytes calldata payload)\\n        external;\\n\\n    function validateContractCall(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes32 payloadHash\\n    ) external returns (bool);\\n}\\n\\ninterface GatewayLike {\\n    function handle(bytes memory message) external;\\n}\\n\\n/// @title  Axelar Router\\n/// @notice Routing contract that integrates with an Axelar Gateway\\ncontract AxelarRouter is Auth {\\n    string public constant CENTRIFUGE_CHAIN_ID = \\\"centrifuge\\\";\\n    string public constant CENTRIFUGE_CHAIN_ADDRESS = \\\"0x7369626CEF070000000000000000000000000000\\\";\\n    string public constant CENTRIFUGE_AXELAR_EXECUTABLE = \\\"0xc1757c6A0563E37048869A342dF0651b9F267e41\\\";\\n\\n    AxelarGatewayLike public immutable axelarGateway;\\n\\n    GatewayLike public gateway;\\n\\n    // --- Events ---\\n    event File(bytes32 indexed what, address addr);\\n\\n    constructor(address axelarGateway_) {\\n        axelarGateway = AxelarGatewayLike(axelarGateway_);\\n\\n        wards[msg.sender] = 1;\\n        emit Rely(msg.sender);\\n    }\\n\\n    modifier onlyCentrifugeChainOrigin(string calldata sourceChain, string calldata sourceAddress) {\\n        require(\\n            keccak256(bytes(CENTRIFUGE_CHAIN_ID)) == keccak256(bytes(sourceChain)), \\\"AxelarRouter/invalid-source-chain\\\"\\n        );\\n        require(\\n            keccak256(bytes(CENTRIFUGE_CHAIN_ADDRESS)) == keccak256(bytes(sourceAddress)),\\n            \\\"AxelarRouter/invalid-source-address\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyGateway() {\\n        require(msg.sender == address(gateway), \\\"AxelarRouter/only-gateway-allowed-to-call\\\");\\n        _;\\n    }\\n\\n    // --- Administration ---\\n    function file(bytes32 what, address data) external auth {\\n        if (what == \\\"gateway\\\") {\\n            gateway = GatewayLike(data);\\n        } else {\\n            revert(\\\"AxelarRouter/file-unrecognized-param\\\");\\n        }\\n\\n        emit File(what, data);\\n    }\\n\\n    // --- Incoming ---\\n    function execute(\\n        bytes32 commandId,\\n        string calldata sourceChain,\\n        string calldata sourceAddress,\\n        bytes calldata payload\\n    ) public onlyCentrifugeChainOrigin(sourceChain, sourceAddress) {\\n        bytes32 payloadHash = keccak256(payload);\\n        require(\\n            axelarGateway.validateContractCall(commandId, sourceChain, sourceAddress, payloadHash),\\n            \\\"Router/not-approved-by-gateway\\\"\\n        );\\n\\n        gateway.handle(payload);\\n    }\\n\\n    // --- Outgoing ---\\n    function send(bytes calldata message) public onlyGateway {\\n        axelarGateway.callContract(CENTRIFUGE_CHAIN_ID, CENTRIFUGE_AXELAR_EXECUTABLE, message);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/util/Auth.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity 0.8.21;\\n\\n/// @title  Auth\\n/// @notice Simple authentication pattern\\n/// @author Based on code from https://github.com/makerdao/dss\\ncontract Auth {\\n    mapping(address => uint256) public wards;\\n\\n    event Rely(address indexed user);\\n    event Deny(address indexed user);\\n\\n    /// @dev Give permissions to the user\\n    function rely(address user) external auth {\\n        wards[user] = 1;\\n        emit Rely(user);\\n    }\\n\\n    /// @dev Remove permissions from the user\\n    function deny(address user) external auth {\\n        wards[user] = 0;\\n        emit Deny(user);\\n    }\\n\\n    /// @dev Check if the msg.sender has permissions\\n    modifier auth() {\\n        require(wards[msg.sender] == 1, \\\"Auth/not-authorized\\\");\\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/gateway/Messages.sol\": {\r\n        \"Messages\": \"0xaf9f6ac63c057eb7f59b6fae2c3d447191b58ea5\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"axelarGateway_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CENTRIFUGE_AXELAR_EXECUTABLE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CENTRIFUGE_CHAIN_ADDRESS\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CENTRIFUGE_CHAIN_ID\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"axelarGateway\",\"outputs\":[{\"internalType\":\"contract AxelarGatewayLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"commandId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"sourceChain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"sourceAddress\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gateway\",\"outputs\":[{\"internalType\":\"contract GatewayLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "AxelarRouter", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000004f4495243837681061c4743b74b3eedf548d56a5", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}