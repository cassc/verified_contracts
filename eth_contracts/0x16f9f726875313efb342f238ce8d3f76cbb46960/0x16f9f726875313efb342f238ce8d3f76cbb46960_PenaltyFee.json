{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.4;\r\n\r\ninterface IMultiplier {\r\n    /**\r\n     * Applies a multiplier on the _amount, based on the _pool and _beneficiary.\r\n     * The multiplier is not necessarily a constant number, it can be a more complex factor.\r\n     */\r\n    function applyMultiplier(uint256 _amount, uint256 _duration) external view returns (uint256);\r\n\r\n    function getMultiplier(uint256 _amount, uint256 _duration) external view returns (uint256);\r\n\r\n    function getDurationGroup(uint256 _duration) external view returns (uint256);\r\n\r\n    function getDurationMultiplier(uint256 _duration) external view returns (uint256);\r\n}\r\n\r\ninterface IPenaltyFee {\r\n    /**\r\n     * Calculates the penalty fee for the given _amount for a specific _beneficiary.\r\n     */\r\n    function calculate(\r\n        uint256 _amount,\r\n        uint256 _duration,\r\n        address _pool\r\n    ) external view returns (uint256);\r\n}\r\n\r\ninterface IStakingPool {\r\n    struct StakingInfo {\r\n        uint256 stakedAmount; // amount of the stake\r\n        uint256 minimumStakeTimestamp; // timestamp of the minimum stake\r\n        uint256 duration; // in seconds\r\n        uint256 rewardPerTokenPaid; // Reward per token paid\r\n        uint256 rewards; // rewards to be claimed\r\n    }\r\n\r\n    function rewardsMultiplier() external view returns (IMultiplier);\r\n\r\n    function penaltyFeeCalculator() external view returns (IPenaltyFee);\r\n\r\n    event Staked(address indexed user, uint256 stakeNumber, uint256 amount);\r\n    event Unstaked(address indexed user, uint256 stakeNumber, uint256 amount);\r\n    event RewardPaid(address indexed user, uint256 stakeNumber, uint256 reward);\r\n}\r\n\r\ncontract PenaltyFee is IPenaltyFee {\r\n    uint256 public constant MULTIPLIER_BASIS = 1e4;\r\n    uint256[] public penaltyFeePerGroup;\r\n\r\n    constructor(uint256[] memory _penaltyFeePerGroup) {\r\n        for (uint256 i = 0; i < _penaltyFeePerGroup.length; i++) {\r\n            require(_penaltyFeePerGroup[i] < MULTIPLIER_BASIS, \"PenaltyFee::constructor: penaltyBasis >= MAX_ALLOWED_PENALTY\");\r\n        }\r\n        penaltyFeePerGroup = _penaltyFeePerGroup;\r\n    }\r\n\r\n    function calculate(\r\n        uint256 _amount,\r\n        uint256 _duration,\r\n        address _pool\r\n    ) external view override returns (uint256) {\r\n        IMultiplier rewardsMultiplier = IStakingPool(_pool).rewardsMultiplier();\r\n        uint256 group = rewardsMultiplier.getDurationGroup(_duration);\r\n        return (_amount * penaltyFeePerGroup[group]) / MULTIPLIER_BASIS;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_penaltyFeePerGroup\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MULTIPLIER_BASIS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"calculate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"penaltyFeePerGroup\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PenaltyFee", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000001f400000000000000000000000000000000000000000000000000000000000003e800000000000000000000000000000000000000000000000000000000000005dc00000000000000000000000000000000000000000000000000000000000007d0", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://051b70689601a27bd79c4c4da5082c31182b87073fd5daebe2b27b54b8395dcf"}