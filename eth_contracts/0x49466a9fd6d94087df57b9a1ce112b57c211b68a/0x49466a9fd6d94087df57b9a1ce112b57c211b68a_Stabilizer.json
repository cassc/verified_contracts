{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorInterface {\\n  function latestAnswer() external view returns (int256);\\n\\n  function latestTimestamp() external view returns (uint256);\\n\\n  function latestRound() external view returns (uint256);\\n\\n  function getAnswer(uint256 roundId) external view returns (int256);\\n\\n  function getTimestamp(uint256 roundId) external view returns (uint256);\\n\\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\\n\\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\\n}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AggregatorInterface.sol\\\";\\nimport \\\"./AggregatorV3Interface.sol\\\";\\n\\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\\n\"\r\n    },\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/interfaces/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20Metadata} from \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Pausable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    bool private _paused;\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AuctionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\n\\nimport './interfaces/IVault.sol';\\nimport './interfaces/IVaultFactory.sol';\\nimport './interfaces/IStabilityPool.sol';\\nimport './interfaces/ILiquidationRouter.sol';\\nimport './interfaces/ITokenPriceFeed.sol';\\nimport './interfaces/IMintableToken.sol';\\nimport './interfaces/ILastResortLiquidation.sol';\\nimport './utils/constants.sol';\\n\\n/**\\n * @title AuctionManager.\\n * @dev Manages auctions for liquidating collateral in case of debt default.\\n */\\ncontract AuctionManager is Ownable, ReentrancyGuard, Constants {\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableToken;\\n\\n    // Auction duration and lowest health factor\\n    uint256 public auctionDuration = 2 hours;\\n\\n    uint256 public lowestHF = 0.95 ether; // 95%\\n\\n    // Struct to hold auction data\\n    struct auctionData {\\n        uint256 originalDebt;\\n        uint256 lowestDebtToAuction;\\n        uint256 highestDebtToAuction;\\n        uint256 collateralsLength;\\n        address[] collateral;\\n        uint256[] collateralAmount;\\n        uint256 auctionStartTime;\\n        uint256 auctionEndTime;\\n        bool auctionEnded;\\n    }\\n\\n    // Array to store auction data.\\n    auctionData[] public auctions;\\n\\n    address public vaultFactory;\\n\\n    // Events.\\n    event VaultFactoryUpdated(address indexed _vaultFactory);\\n    event AuctionDurationUpdated(uint256 _auctionDuration);\\n    event AuctionCreated(\\n        uint256 indexed _auctionId,\\n        uint256 _originalDebt,\\n        uint256 _lowestDebtToAuction,\\n        uint256 _highestDebtToAuction,\\n        uint256 _collateralsLength,\\n        address[] _collateral,\\n        uint256[] _collateralAmount,\\n        uint256 _auctionStartTime,\\n        uint256 _auctionEndTime\\n    );\\n    event AuctionWon(\\n        uint256 indexed _auctionId,\\n        address indexed _winner,\\n        uint256 _debtRepaid,\\n        uint256 _collateralValueGained\\n    );\\n    event AuctionEnded(uint256 indexed _auctionId);\\n\\n    /**\\n     * @notice Sets the duration of each auction.\\n     * @dev Can only be called by the contract owner.\\n     * @param _auctionDuration Duration of the auction.\\n     */\\n    function setAuctionDuration(uint256 _auctionDuration) external onlyOwner {\\n        require(_auctionDuration > 0, 'auction-duration-is-0');\\n        auctionDuration = _auctionDuration;\\n        emit AuctionDurationUpdated(_auctionDuration);\\n    }\\n\\n    /**\\n     * @notice Sets the lowest health factor allowed for bidding.\\n     * @dev Can only be called by the contract owner.\\n     * @param _lowestHF Lowest health factor allowed for bidding.\\n     */\\n    function setLowestHealthFactor(uint256 _lowestHF) external onlyOwner {\\n        require(_lowestHF > 0 && _lowestHF < 1e18, 'lowest-hf-is-0');\\n        lowestHF = _lowestHF;\\n    }\\n\\n    /**\\n     * @dev Sets the address of the vault factory. Can only be called by the contract owner.\\n     * @param _vaultFactory Address of the vault factory.\\n     */\\n    function setVaultFactory(address _vaultFactory) external onlyOwner {\\n        require(_vaultFactory != address(0x0), 'vault-factory-is-0');\\n        vaultFactory = _vaultFactory;\\n        emit VaultFactoryUpdated(_vaultFactory);\\n    }\\n\\n    /**\\n     * @dev Returns the total number of auctions created.\\n     * @return The total number of auctions.\\n     */\\n    function auctionsLength() external view returns (uint256) {\\n        return auctions.length;\\n    }\\n\\n    /**\\n     * @dev Get auction information by ID.\\n     * @param _auctionId The ID of the auction.\\n     * @return Auction data structure.\\n     */\\n    function auctionInfo(\\n        uint256 _auctionId\\n    ) external view returns (auctionData memory) {\\n        return auctions[_auctionId];\\n    }\\n\\n    /**\\n     * @dev Contract constructor to initialize the vault factory address.\\n     * @param _vaultFactory Address of the vault factory.\\n     */\\n    constructor(address _vaultFactory) Ownable(msg.sender) {\\n        require(_vaultFactory != address(0x0), 'vault-factory-is-0');\\n        vaultFactory = _vaultFactory;\\n        emit VaultFactoryUpdated(_vaultFactory);\\n    }\\n\\n    /**\\n     * @notice Calculate total collateral value for a specific auction.\\n     * @param _auctionId The ID of the auction.\\n     * @return Total collateral value.\\n     */\\n    function getTotalCollateralValue(\\n        uint256 _auctionId\\n    ) public view returns (uint256) {\\n        auctionData memory _auction = auctions[_auctionId];\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(\\n            IVaultFactory(vaultFactory).priceFeed()\\n        );\\n        uint256 _totalCollateralValue = 0;\\n        for (uint256 i = 0; i < _auction.collateralsLength; i++) {\\n            uint256 _price = _priceFeed.tokenPrice(_auction.collateral[i]);\\n            uint256 _normalizedCollateralAmount = _auction.collateralAmount[i] *\\n                (10 ** (18 - _priceFeed.decimals(_auction.collateral[i])));\\n            uint256 _collateralValue = (_normalizedCollateralAmount * _price) /\\n                DECIMAL_PRECISION;\\n            _totalCollateralValue += _collateralValue;\\n        }\\n        return _totalCollateralValue;\\n    }\\n\\n    /**\\n     * @dev Creates a new auction to liquidate underwater debt against collaterals.\\n     * Accessible only by the liquidation router.\\n     * @notice Allows the liquidation router to initiate a new auction for the collateralized debt.\\n     */\\n    function newAuction() external {\\n        ILiquidationRouter liquidationRouter = ILiquidationRouter(\\n            IVaultFactory(vaultFactory).liquidationRouter()\\n        );\\n        require(msg.sender == address(liquidationRouter), 'not-allowed');\\n\\n        uint256 _debtToAuction = liquidationRouter.underWaterDebt();\\n        require(_debtToAuction > 0, 'no-debt-to-auction');\\n\\n        address[] memory _collaterals = liquidationRouter.collaterals();\\n        uint256[] memory _collateralAmounts = new uint256[](\\n            _collaterals.length\\n        );\\n        uint256 _collateralsLength = _collaterals.length;\\n        require(_collateralsLength > 0, 'no-collaterals');\\n\\n        uint256 _totalCollateralValue = 0;\\n\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(\\n            IVaultFactory(vaultFactory).priceFeed()\\n        );\\n\\n        for (uint256 i = 0; i < _collateralsLength; i++) {\\n            IERC20 collateralToken = IERC20(_collaterals[i]);\\n            uint256 _collateralAmount = liquidationRouter.collateral(\\n                _collaterals[i]\\n            );\\n            collateralToken.safeTransferFrom(\\n                address(liquidationRouter),\\n                address(this),\\n                _collateralAmount\\n            );\\n            _collateralAmounts[i] = _collateralAmount;\\n\\n            uint256 _price = _priceFeed.tokenPrice(address(collateralToken));\\n            uint256 _normalizedCollateralAmount = _collateralAmount *\\n                (10 ** (18 - _priceFeed.decimals(address(collateralToken))));\\n            uint256 _collateralValue = (_normalizedCollateralAmount * _price) /\\n                DECIMAL_PRECISION;\\n            _totalCollateralValue += _collateralValue;\\n        }\\n\\n        uint256 _auctionStartTime = block.timestamp;\\n        uint256 _auctionEndTime = _auctionStartTime + auctionDuration;\\n\\n        uint256 _lowestDebtToAuction = (_totalCollateralValue * lowestHF) /\\n            DECIMAL_PRECISION;\\n        uint256 _highestDebtToAuction = _debtToAuction;\\n\\n        if (_highestDebtToAuction < _lowestDebtToAuction) {\\n            uint256 _debtToAuctionTmp = _lowestDebtToAuction;\\n            _lowestDebtToAuction = _highestDebtToAuction;\\n            _highestDebtToAuction = _debtToAuctionTmp;\\n        }\\n\\n        auctions.push(\\n            auctionData({\\n                originalDebt: _debtToAuction,\\n                lowestDebtToAuction: _lowestDebtToAuction,\\n                highestDebtToAuction: _highestDebtToAuction,\\n                collateralsLength: _collateralsLength,\\n                collateral: _collaterals,\\n                collateralAmount: _collateralAmounts,\\n                auctionStartTime: _auctionStartTime,\\n                auctionEndTime: _auctionEndTime,\\n                auctionEnded: false\\n            })\\n        );\\n\\n        emit AuctionCreated(\\n            auctions.length - 1,\\n            _debtToAuction,\\n            _lowestDebtToAuction,\\n            _highestDebtToAuction,\\n            _collateralsLength,\\n            _collaterals,\\n            _collateralAmounts,\\n            _auctionStartTime,\\n            _auctionEndTime\\n        );\\n    }\\n\\n    /**\\n     * @dev Get auction bid information.\\n     * @param _auctionId The ID of the auction.\\n     * @return _totalCollateralValue Total collateral value.\\n     * @return _debtToAuctionAtCurrentTime Debt to auction at the current time.\\n     */\\n    function bidInfo(\\n        uint256 _auctionId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 _totalCollateralValue,\\n            uint256 _debtToAuctionAtCurrentTime\\n        )\\n    {\\n        auctionData memory _auction = auctions[_auctionId];\\n        require(\\n            !_auction.auctionEnded &&\\n                block.timestamp <= _auction.auctionEndTime,\\n            'auction-ended'\\n        );\\n\\n        _totalCollateralValue = getTotalCollateralValue(_auctionId);\\n        uint256 _highestDebtToAuction = _auction.highestDebtToAuction;\\n        uint256 _lowestDebtToAuction = _auction.lowestDebtToAuction;\\n        // decrease _debtToAuction linearly to _lowestDebtToAuction over the auction duration\\n        _debtToAuctionAtCurrentTime =\\n            _highestDebtToAuction -\\n            ((_highestDebtToAuction - _lowestDebtToAuction) *\\n                (block.timestamp - _auction.auctionStartTime)) /\\n            auctionDuration;\\n    }\\n\\n    /**\\n     * @dev Transfer collateral to the last resort liquidation contract.\\n     * @param _auctionId The ID of the auction.\\n     */\\n    function _transferToLastResortLiquidation(uint256 _auctionId) internal {\\n        ILiquidationRouter _liquidationRouter = ILiquidationRouter(\\n            IVaultFactory(vaultFactory).liquidationRouter()\\n        );\\n        ILastResortLiquidation _lastResortLiquidation = ILastResortLiquidation(\\n            _liquidationRouter.lastResortLiquidation()\\n        );\\n\\n        auctionData memory _auction = auctions[_auctionId];\\n        uint256 _collateralsLength = _auction.collateralsLength;\\n        address[] memory _collaterals = _auction.collateral;\\n        uint256[] memory _collateralAmounts = _auction.collateralAmount;\\n        uint256 _badDebt = _auction.originalDebt;\\n\\n        _lastResortLiquidation.addBadDebt(_badDebt);\\n        for (uint256 i = 0; i < _collateralsLength; i++) {\\n            IERC20 collateralToken = IERC20(_collaterals[i]);\\n            collateralToken.safeIncreaseAllowance(\\n                address(_lastResortLiquidation),\\n                _collateralAmounts[i]\\n            );\\n            _lastResortLiquidation.addCollateral(\\n                address(collateralToken),\\n                _collateralAmounts[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Sends a bid from the caller to the auction for a specific auction ID.\\n     * @param _auctionId The ID of the auction.\\n     * @notice Allows a bidder to participate in the auction by placing a bid.\\n     * If the auction period is over or has been manually ended, it transfers the bid to the last resort liquidation.\\n     */\\n    function bid(uint256 _auctionId) external nonReentrant {\\n        auctionData memory _auction = auctions[_auctionId];\\n        require(!_auction.auctionEnded, 'auction-ended');\\n\\n        if (block.timestamp > _auction.auctionEndTime) {\\n            // auction ended\\n            auctions[_auctionId].auctionEnded = true;\\n            _transferToLastResortLiquidation(_auctionId);\\n            emit AuctionEnded(_auctionId);\\n            return;\\n        }\\n\\n        uint256 _totalCollateralValue = getTotalCollateralValue(_auctionId);\\n        uint256 _highestDebtToAuction = _auction.highestDebtToAuction;\\n        uint256 _lowestDebtToAuction = _auction.lowestDebtToAuction;\\n        // decrease _debtToAuction linearly to _lowestDebtToAuction over the auction duration\\n        uint256 _debtToAuctionAtCurrentTime = _highestDebtToAuction -\\n            ((_highestDebtToAuction - _lowestDebtToAuction) *\\n                (block.timestamp - _auction.auctionStartTime)) /\\n            auctionDuration;\\n\\n        IMintableToken _stable = IMintableToken(\\n            IVaultFactory(vaultFactory).stable()\\n        );\\n        _stable.safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _debtToAuctionAtCurrentTime\\n        );\\n        _stable.burn(_debtToAuctionAtCurrentTime);\\n\\n        uint256 _collateralsLength = _auction.collateralsLength;\\n\\n        for (uint256 i = 0; i < _collateralsLength; i++) {\\n            IERC20 collateralToken = IERC20(_auction.collateral[i]);\\n            collateralToken.safeTransfer(\\n                msg.sender,\\n                _auction.collateralAmount[i]\\n            );\\n        }\\n\\n        auctions[_auctionId].auctionEnded = true;\\n        emit AuctionWon(\\n            _auctionId,\\n            msg.sender,\\n            _debtToAuctionAtCurrentTime,\\n            _totalCollateralValue\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAuctionManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IAuctionManager {\\n    function newAuction() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IExternalPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IExternalPriceFeed {\\n    function token() external view returns (address);\\n\\n    function price() external view returns (uint256);\\n\\n    function pricePoint() external view returns (uint256);\\n\\n    function setPrice(uint256 _price) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IFeeRecipient.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IFeeRecipient {\\n    function baseRate() external view returns (uint256);\\n\\n    function getBorrowingFee(uint256 _amount) external view returns (uint256);\\n\\n    function calcDecayedBaseRate(\\n        uint256 _currentBaseRate\\n    ) external view returns (uint256);\\n\\n    /**\\n     @dev is called to make the FeeRecipient contract transfer the fees to itself. It will use transferFrom to get the\\n     fees from the msg.sender\\n     @param _amount the amount in Wei of fees to transfer\\n     */\\n    function takeFees(uint256 _amount) external returns (bool);\\n\\n    function increaseBaseRate(uint256 _increase) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILastResortLiquidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface ILastResortLiquidation {\\n    function addCollateral(address _collateral, uint256 _amount) external;\\n    function addBadDebt(uint256 _amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILiquidationRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface ILiquidationRouter {\\n    function addSeizedCollateral(address _collateral, uint256 _amount) external;\\n\\n    function addUnderWaterDebt(address _vault, uint256 _amount) external;\\n\\n    function removeUnderWaterDebt(uint256 _amount) external;\\n\\n    function underWaterDebt() external view returns (uint256);\\n\\n    function collaterals() external view returns (address[] memory);\\n\\n    function collateral(address _collateral) external view returns (uint256);\\n\\n    function tryLiquidate() external;\\n\\n    function stabilityPool() external view returns (address);\\n    function auctionManager() external view returns (address);\\n    function lastResortLiquidation() external view returns (address);\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IOwnable.sol';\\n\\ninterface IMintableToken is IERC20, IOwnable {\\n    function mint(address recipient, uint256 amount) external;\\n\\n    function burn(uint256 amount) external;\\n\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IMintableTokenOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport './IOwnable.sol';\\nimport './IMintableToken.sol';\\n\\ninterface IMintableTokenOwner is IOwnable {\\n    function token() external view returns (IMintableToken);\\n\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function transferTokenOwnership(address _newOwner) external;\\n\\n    function addMinter(address _newMinter) external;\\n\\n    function revokeMinter(address _minter) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IOwnable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IOwnable {\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() external view returns (address);\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IPriceFeed {\\n    function token() external view returns (address);\\n\\n    function price() external view returns (uint256);\\n\\n    function pricePoint() external view returns (uint256);\\n\\n    function emitPriceSignal() external;\\n\\n    event PriceUpdate(address token, uint256 price, uint256 average);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IRouter {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        address token0,\\n        address token1\\n    ) external view returns (uint256 amountOut);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IStabilityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IStabilityPool {\\n    function liquidate() external;\\n\\n    function totalDeposit() external view returns (uint256);\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function withdraw(uint256 _amount) external;\\n\\n    function tbankToken() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITokenPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport './IOwnable.sol';\\n\\ninterface ITokenPriceFeed is IOwnable {\\n    struct TokenInfo {\\n        address priceFeed;\\n        uint256 mcr; // Minimum Collateralization Ratio\\n        uint256 mlr; // Minimum Liquidation Ratio\\n        uint256 borrowRate;\\n        uint256 decimals;\\n    }\\n\\n    function tokenPriceFeed(address) external view returns (address);\\n\\n    function tokenPrice(address _token) external view returns (uint256);\\n\\n    function mcr(address _token) external view returns (uint256);\\n\\n    function decimals(address _token) external view returns (uint256);\\n\\n    function mlr(address _token) external view returns (uint256);\\n\\n    function borrowRate(address _token) external view returns (uint256);\\n\\n    function setTokenPriceFeed(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _mcr,\\n        uint256 _mlr,\\n        uint256 _borrowRate,\\n        uint256 /* _decimals */\\n    ) external;\\n\\n    event NewTokenPriceFeed(\\n        address _token,\\n        address _priceFeed,\\n        string _name,\\n        string _symbol,\\n        uint256 _mcr,\\n        uint256 _mlr,\\n        uint256 _borrowRate,\\n        uint256 _decimals\\n    );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IVault {\\n    function vaultOwner() external view returns (address);\\n    function debt() external view returns (uint256);\\n    function transferVaultOwnership(address _newOwner) external;\\n    function setName(string memory _name) external;\\n    function containsCollateral(\\n        address _collateral\\n    ) external view returns (bool);\\n    function collateralsLength() external view returns (uint256);\\n    function collateralAt(uint256 _index) external view returns (address);\\n    function collaterals() external view returns (address[] memory);\\n    function collateral(address _collateral) external view returns (uint256);\\n    function factory() external view returns (address);\\n    function addCollateral(address _collateral, uint256 _amount) external;\\n    function removeCollateral(\\n        address _collateral,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n    function addBadDebt(uint256 _amount) external;\\n    function borrowable()\\n        external\\n        view\\n        returns (uint256 _maxBorrowable, uint256 _borrowable);\\n    function borrow(uint256 _amount) external;\\n    function repay(uint256 _amount) external;\\n    function calcRedeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    )\\n        external\\n        view\\n        returns (uint256 _stableAmountNeeded, uint256 _redemptionFee);\\n    function redeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    ) external returns (uint256 _debtRepaid, uint256 _feeCollected);\\n    function healthFactor(\\n        bool _useMlr\\n    ) external view returns (uint256 _healthFactor);\\n    function newHealthFactor(\\n        uint256 _newDebt,\\n        bool _useMlr\\n    ) external view returns (uint256 _newHealthFactor);\\n    function borrowableWithDiff(\\n        address _collateral,\\n        uint256 _diffAmount,\\n        bool _isAdd,\\n        bool _useMlr\\n    ) external view returns (uint256 _maxBorrowable, uint256 _borrowable);\\n    function liquidate() external returns (uint256 _forgivenDebt);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultBorrowRate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IVaultBorrowRate {\\n    function getBorrowRate(\\n        address _vaultAddress\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IVaultDeployer {\\n    function deployVault(\\n        address _factory,\\n        address _vaultOwner,\\n        string memory _name\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultExtraSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IVaultExtraSettings {\\n    function setMaxRedeemablePercentage(\\n        uint256 _debtTreshold,\\n        uint256 _maxRedeemablePercentage\\n    ) external;\\n    function setRedemptionKickback(uint256 _redemptionKickback) external;\\n\\n    function getExtraSettings()\\n        external\\n        view\\n        returns (\\n            uint256 _debtTreshold,\\n            uint256 _maxRedeemablePercentage,\\n            uint256 _redemptionKickback\\n        );\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IVaultFactory {\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event PriceFeedUpdated(address indexed priceFeed);\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function vaultCount() external view returns (uint256);\\n    function lastVault() external view returns (address);\\n    function firstVault() external view returns (address);\\n    function nextVault(address _vault) external view returns (address);\\n    function prevVault(address _vault) external view returns (address);\\n    function liquidationRouter() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function priceFeed() external view returns (address);\\n    function transferVaultOwnership(address _vault, address _newOwner) external;\\n    function createVault(string memory _name) external returns (address);\\n    function addCollateralNative(address _vault) external payable;\\n    function removeCollateralNative(\\n        address _vault,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n    function addCollateral(\\n        address _vault,\\n        address _collateral,\\n        uint256 _amount\\n    ) external;\\n    function removeCollateral(\\n        address _vault,\\n        address _collateral,\\n        uint256 _amount,\\n        address _to\\n    ) external;\\n    function borrow(address _vault, uint256 _amount, address _to) external;\\n    function distributeBadDebt(address _vault, uint256 _amount) external;\\n    function closeVault(address _vault) external;\\n    function repay(address _vault, uint256 _amount) external;\\n    function redeem(\\n        address _vault,\\n        address _collateral,\\n        uint256 _collateralAmount,\\n        address _to\\n    ) external;\\n    function liquidate(address _vault) external;\\n    function isLiquidatable(address _vault) external view returns (bool);\\n    function isReedemable(\\n        address _vault,\\n        address _collateral\\n    ) external view returns (bool);\\n    function containsVault(address _vault) external view returns (bool);\\n    function stable() external view returns (address);\\n    function isCollateralSupported(\\n        address _collateral\\n    ) external view returns (bool);\\n    function vaultsByOwnerLength(\\n        address _owner\\n    ) external view returns (uint256);\\n    function redemptionHealthFactorLimit() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVaultFactoryConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IVaultFactoryConfig {\\n    event PriceFeedUpdated(address indexed priceFeed);\\n    event MaxTokensPerVaultUpdated(\\n        uint256 oldMaxTokensPerVault,\\n        uint256 newMaxTokensPerVault\\n    );\\n    event RedemptionRateUpdated(\\n        uint256 oldRedemptionRate,\\n        uint256 newRedemptionRate\\n    );\\n    event BorrowRateUpdated(uint256 oldBorrowRate, uint256 newBorrowRate);\\n    event RedemptionHealthFactorLimitUpdated(\\n        uint256 oldRedemptionHealthFactorLimit,\\n        uint256 newRedemptionHealthFactorLimit\\n    );\\n\\n    function setMaxTokensPerVault(uint256 _maxTokensPerVault) external;\\n    function setPriceFeed(address _priceFeed) external;\\n    function setRedemptionRate(uint256 _redemptionRate) external;\\n    function setBorrowRate(uint256 _borrowRate) external;\\n    function setRedemptionHealthFactorLimit(\\n        uint256 _redemptionHealthFactorLimit\\n    ) external;\\n    function setBorrowFeeRecipient(address _borrowFeeRecipient) external;\\n    function setRedemptionFeeRecipient(\\n        address _redemptionFeeRecipient\\n    ) external;\\n\\n    function priceFeed() external view returns (address);\\n    function MAX_TOKENS_PER_VAULT() external view returns (uint256);\\n    function redemptionRate() external view returns (uint256);\\n    function borrowRate() external view returns (uint256);\\n    function redemptionHealthFactorLimit() external view returns (uint256);\\n    function borrowFeeRecipient() external view returns (address);\\n    function redemptionFeeRecipient() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IWETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transfer(address _to, uint256 _value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\r\n    },\r\n    \"contracts/LastResortLiquidation.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\n\\nimport './interfaces/IVault.sol';\\nimport './interfaces/IVaultFactory.sol';\\nimport './interfaces/IStabilityPool.sol';\\nimport './interfaces/IAuctionManager.sol';\\nimport './interfaces/IMintableToken.sol';\\nimport './interfaces/ILiquidationRouter.sol';\\n\\n/**\\n * @title LastResortLiquidation\\n * @dev Contract to manage collateral and bad debt distribution for liquidation.\\n */\\ncontract LastResortLiquidation is Ownable, ReentrancyGuard {\\n    event VaultFactoryUpdated(address indexed _vaultFactory);\\n\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableToken;\\n\\n    EnumerableSet.AddressSet private collateralSet;\\n    EnumerableSet.AddressSet private allowedSet;\\n\\n    address public vaultFactory;\\n\\n    mapping(address => uint256) public collateral;\\n\\n    uint256 public badDebt;\\n\\n    modifier onlyAllowed() {\\n        require(allowedSet.contains(msg.sender), 'not-allowed');\\n        _;\\n    }\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Adds an address to the allowed set.\\n     * @param _allowed The address to add to the allowed set.\\n     */\\n    function addAllowed(address _allowed) external onlyOwner {\\n        require(_allowed != address(0x0), 'allowed-is-0');\\n        allowedSet.add(_allowed);\\n    }\\n\\n    /**\\n     * @dev Removes an address from the allowed set.\\n     * @param _allowed The address to remove from the allowed set.\\n     */\\n    function removeAllowed(address _allowed) external onlyOwner {\\n        require(_allowed != address(0x0), 'allowed-is-0');\\n        allowedSet.remove(_allowed);\\n    }\\n\\n    /**\\n     * @dev Gets the number of addresses in the allowed set.\\n     * @return The number of addresses in the allowed set.\\n     */\\n    function allowedLength() external view returns (uint256) {\\n        return allowedSet.length();\\n    }\\n\\n    /**\\n     * @dev Gets the address at the specified index in the allowed set.\\n     * @param _index The index of the address.\\n     * @return The address at the specified index in the allowed set.\\n     */\\n    function allowedAt(uint256 _index) external view returns (address) {\\n        return allowedSet.at(_index);\\n    }\\n\\n    /**\\n     * @dev Gets the number of addresses in the collateral set.\\n     * @return The number of addresses in the collateral set.\\n     */\\n    function collateralLength() external view returns (uint256) {\\n        return collateralSet.length();\\n    }\\n\\n    /**\\n     * @dev Gets the address at the specified index in the collateral set.\\n     * @param _index The index of the address.\\n     * @return The address at the specified index in the collateral set.\\n     */\\n    function collateralAt(uint256 _index) external view returns (address) {\\n        return collateralSet.at(_index);\\n    }\\n\\n    /**\\n     * @dev Sets the address of the vault factory.\\n     * @param _vaultFactory Address of the vault factory.\\n     */\\n    function setVaultFactory(address _vaultFactory) external onlyOwner {\\n        require(_vaultFactory != address(0x0), 'vault-factory-is-0');\\n        vaultFactory = _vaultFactory;\\n        emit VaultFactoryUpdated(_vaultFactory);\\n    }\\n\\n    /**\\n     * @dev Adds collateral to the contract and updates the collateral balance.\\n     * @param _collateral The address of the collateral token.\\n     * @param _amount The amount of collateral to add.\\n     */\\n    function addCollateral(\\n        address _collateral,\\n        uint256 _amount\\n    ) external onlyAllowed {\\n        require(_collateral != address(0x0), 'collateral-is-0');\\n        require(_amount > 0, 'amount-is-0');\\n\\n        collateralSet.add(_collateral);\\n        IERC20(_collateral).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        collateral[_collateral] += _amount;\\n    }\\n\\n    /**\\n     * @dev Withdraws collateral from the contract.\\n     * @param _collateral The address of the collateral token.\\n     * @param _amount The amount of collateral to withdraw.\\n     * @param _to The address to receive the withdrawn collateral.\\n     */\\n    function withdrawCollateral(\\n        address _collateral,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyOwner {\\n        require(_collateral != address(0x0), 'collateral-is-0');\\n        require(_amount > 0, 'amount-is-0');\\n\\n        collateral[_collateral] -= _amount;\\n\\n        if (collateral[_collateral] == 0) collateralSet.remove(_collateral);\\n\\n        IERC20(_collateral).safeTransfer(_to, _amount);\\n    }\\n\\n    /**\\n     * @dev Adds bad debt to the contract.\\n     * @param _amount The amount of bad debt to add.\\n     */\\n    function addBadDebt(uint256 _amount) external onlyAllowed {\\n        require(_amount > 0, 'amount-is-0');\\n        badDebt += _amount;\\n    }\\n\\n    /**\\n     * @dev Repays bad debt by burning stable tokens.\\n     * @param _amount The amount of stable tokens to burn.\\n     */\\n    function repayBadDebt(uint256 _amount) external onlyOwner {\\n        require(_amount > 0, 'amount-is-0');\\n        require(_amount <= badDebt, 'amount-too-high');\\n\\n        IMintableToken _stable = IMintableToken(\\n            IVaultFactory(vaultFactory).stable()\\n        );\\n        _stable.safeTransferFrom(msg.sender, address(this), _amount);\\n        _stable.burn(_amount);\\n\\n        badDebt -= _amount;\\n    }\\n\\n    /**\\n     * @dev Distributes bad debt to a specific vault.\\n     * @param _vault The address of the vault to receive the bad debt.\\n     * @param _amount The amount of bad debt to distribute.\\n     */\\n    function distributeBadDebt(\\n        address _vault,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        require(_vault != address(0x0), 'vault-is-0');\\n        require(_amount > 0, 'amount-is-0');\\n        require(_amount <= badDebt, 'amount-too-high');\\n        badDebt -= _amount;\\n        IVaultFactory _vaultFactory = IVaultFactory(vaultFactory);\\n        ILiquidationRouter _liquidationRouter = ILiquidationRouter(\\n            _vaultFactory.liquidationRouter()\\n        );\\n        _liquidationRouter.distributeBadDebt(_vault, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/LiquidationRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\n\\nimport './interfaces/IVault.sol';\\nimport './interfaces/IVaultFactory.sol';\\nimport './interfaces/IStabilityPool.sol';\\nimport './interfaces/IAuctionManager.sol';\\n\\n/**\\n * @title LiquidationRouter\\n * @dev Handles liquidation and redistribution of collaterals and debts in the system.\\n */\\ncontract LiquidationRouter is Ownable, ReentrancyGuard {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    using SafeERC20 for IERC20;\\n    event SeizedCollateralAdded(\\n        address indexed collateral,\\n        address indexed _vaultFactory,\\n        address indexed _vault,\\n        uint256 amount\\n    );\\n    event UnderWaterDebtAdded(\\n        address indexed _vaultFactory,\\n        address indexed _vault,\\n        uint256 debtAmount\\n    );\\n    event UnderWaterDebtRemoved(\\n        address indexed _vaultFactory,\\n        uint256 debtAmount\\n    );\\n    event VaultFactoryUpdated(address indexed _vaultFactory);\\n    event StabilityPoolUpdated(address indexed _stabilityPool);\\n    event AuctionManagerUpdated(address indexed _auctionManager);\\n    event LastResortLiquidationUpdated(address indexed _lastResortLiquidation);\\n    event BadDebtDistributed(address indexed _vault, uint256 amount);\\n\\n    uint256 public underWaterDebt;\\n\\n    address public vaultFactory;\\n    address public stabilityPool;\\n    address public auctionManager;\\n    address public lastResortLiquidation;\\n\\n    EnumerableSet.AddressSet private collateralSet;\\n\\n    mapping(address => uint256) public collateral;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Sets the last resort liquidation contract address.\\n     * @param _lastResortLiquidation Address of the last resort liquidation contract.\\n     */\\n    function setLastResortLiquidation(\\n        address _lastResortLiquidation\\n    ) external onlyOwner {\\n        require(\\n            _lastResortLiquidation != address(0x0),\\n            'last-resort-liquidation-is-0'\\n        );\\n        lastResortLiquidation = _lastResortLiquidation;\\n        emit LastResortLiquidationUpdated(_lastResortLiquidation);\\n    }\\n\\n    /**\\n     * @dev Sets the stability pool contract address.\\n     * @param _stabilityPool Address of the stability pool contract.\\n     */\\n    function setStabilityPool(address _stabilityPool) external onlyOwner {\\n        require(_stabilityPool != address(0x0), 'stability-pool-is-0');\\n        stabilityPool = _stabilityPool;\\n        emit StabilityPoolUpdated(_stabilityPool);\\n    }\\n\\n    /**\\n     * @dev Sets the auction manager contract address.\\n     * @param _auctionManager Address of the auction manager contract.\\n     */\\n    function setAuctionManager(address _auctionManager) external onlyOwner {\\n        require(_auctionManager != address(0x0), 'auction-manager-is-0');\\n        auctionManager = _auctionManager;\\n        emit AuctionManagerUpdated(_auctionManager);\\n    }\\n\\n    modifier onlyVault() {\\n        require(\\n            IVaultFactory(vaultFactory).containsVault(msg.sender),\\n            'not-a-vault'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyAllowed() {\\n        require(msg.sender == stabilityPool, 'not-allowed');\\n        _;\\n    }\\n\\n    modifier onlyLastResortLiquidation() {\\n        require(\\n            msg.sender == lastResortLiquidation,\\n            'not-last-resort-liquidation'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if a specific collateral token is registered.\\n     * @param _collateral Address of the collateral token to check.\\n     * @return bool indicating the presence of the collateral token.\\n     */\\n    function containsCollateral(\\n        address _collateral\\n    ) external view returns (bool) {\\n        return collateralSet.contains(_collateral);\\n    }\\n\\n    /**\\n     * @dev Returns the count of registered collateral tokens.\\n     * @return uint256 representing the count of collateral tokens.\\n     */\\n    function collateralsLength() external view returns (uint256) {\\n        return collateralSet.length();\\n    }\\n\\n    /**\\n     * @dev Gets the collateral token at a specific index in the list of registered collaterals.\\n     * @param _index Index of the collateral token.\\n     * @return address representing the collateral token address.\\n     */\\n    function collateralAt(uint256 _index) external view returns (address) {\\n        return collateralSet.at(_index);\\n    }\\n\\n    /**\\n     * @dev Gets all the registered collateral tokens.\\n     * @return address[] memory representing the list of collateral token addresses.\\n     */\\n    function collaterals() external view returns (address[] memory) {\\n        address[] memory _collaterals = new address[](collateralSet.length());\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            _collaterals[i] = collateralSet.at(i);\\n        }\\n        return _collaterals;\\n    }\\n\\n    /**\\n     * @dev Sets the vault factory contract address.\\n     * @param _vaultFactory Address of the vault factory contract.\\n     */\\n    function setVaultFactory(address _vaultFactory) external onlyOwner {\\n        require(_vaultFactory != address(0x0), 'vault-factory-is-0');\\n        require(\\n            IVaultFactory(_vaultFactory).liquidationRouter() == address(this),\\n            'wrong-liquidation-router'\\n        );\\n        vaultFactory = _vaultFactory;\\n        emit VaultFactoryUpdated(_vaultFactory);\\n    }\\n\\n    /**\\n     * @dev Adds seized collateral to the contract.\\n     * @param _collateral Address of the seized collateral.\\n     * @param _amount Amount of seized collateral.\\n     */\\n    function addSeizedCollateral(\\n        address _collateral,\\n        uint256 _amount\\n    ) external onlyVault {\\n        IERC20(_collateral).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            _amount\\n        );\\n\\n        IERC20(_collateral).safeIncreaseAllowance(stabilityPool, _amount);\\n        IERC20(_collateral).safeIncreaseAllowance(auctionManager, _amount);\\n\\n        collateralSet.add(_collateral);\\n        collateral[_collateral] += _amount;\\n        emit SeizedCollateralAdded(\\n            _collateral,\\n            vaultFactory,\\n            msg.sender,\\n            _amount\\n        );\\n    }\\n\\n    /**\\n     * @dev Adds underwater debt for a vault and increases the total underwater debt for the system.\\n     * @param _vault Address of the vault.\\n     * @param _amount Amount of underwater debt.\\n     */\\n    function addUnderWaterDebt(\\n        address _vault,\\n        uint256 _amount\\n    ) external onlyVault {\\n        underWaterDebt += _amount;\\n        emit UnderWaterDebtAdded(vaultFactory, _vault, _amount);\\n    }\\n\\n    /**\\n     * @dev Removes underwater debt from the system and decreases the total underwater debt.\\n     * @param _amount Amount of underwater debt to be removed.\\n     */\\n    function _removeUnderWaterDebt(uint256 _amount) internal {\\n        underWaterDebt -= _amount;\\n        emit UnderWaterDebtRemoved(vaultFactory, _amount);\\n    }\\n\\n    /**\\n     * @dev Withdraws liquidated collateral.\\n     * @param _collateral Address of the liquidated collateral.\\n     * @param _to Address to receive the liquidated collateral.\\n     * @param _amount Amount of liquidated collateral to withdraw.\\n     */\\n    function withdrawLiquidatedCollateral(\\n        address _collateral,\\n        address _to,\\n        uint256 _amount\\n    ) external onlyOwner {\\n        IERC20(_collateral).safeTransfer(_to, _amount);\\n        collateral[_collateral] -= _amount;\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes all collaterals from the contract.\\n     * This function sets the collateral amount for each collateral token to 0.\\n     */\\n    function _removeAllCollaterals() internal {\\n        uint256 _length = collateralSet.length();\\n        for (uint256 i; i < _length; i++) {\\n            address _collateral = collateralSet.at(i);\\n            collateral[_collateral] = 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Initiates liquidation or auction if necessary.\\n     */\\n    function tryLiquidate() external nonReentrant {\\n        require(underWaterDebt > 0, 'no-underwater-debt');\\n        uint256 _stabilityPoolDeposit = IStabilityPool(stabilityPool)\\n            .totalDeposit();\\n        if (_stabilityPoolDeposit >= underWaterDebt) {\\n            IStabilityPool(stabilityPool).liquidate();\\n        } else {\\n            IAuctionManager(auctionManager).newAuction();\\n        }\\n        _removeAllCollaterals();\\n        _removeUnderWaterDebt(underWaterDebt);\\n    }\\n\\n    /**\\n     * @dev Distributes bad debt in the system.\\n     * @param _vault Address of the vault with bad debt.\\n     * @param _amount Amount of bad debt to distribute.\\n     */\\n    function distributeBadDebt(\\n        address _vault,\\n        uint256 _amount\\n    ) external onlyLastResortLiquidation {\\n        IVaultFactory(vaultFactory).distributeBadDebt(_vault, _amount);\\n        emit BadDebtDistributed(_vault, _amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MintableToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/// @title implements minting/burning functionality for owner\\ncontract MintableToken is ERC20, Ownable {\\n    // solhint-disable-next-line func-visibility\\n    constructor(string memory name, string memory symbol) ERC20(name, symbol) Ownable(msg.sender) {}\\n\\n    /// @dev mints tokens to the recipient, to be called from owner\\n    /// @param recipient address to mint\\n    /// @param amount amount to be minted\\n    function mint(address recipient, uint256 amount) public onlyOwner {\\n        _mint(recipient, amount);\\n    }\\n\\n    /// @dev burns token of specified amount from msg.sender\\n    /// @param amount to burn\\n    function burn(uint256 amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MintableTokenOwner.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport './interfaces/IMintableToken.sol';\\n\\n/// @title implements owner of the MintableToken contract\\ncontract MintableTokenOwner is Ownable {\\n    IMintableToken public immutable token;\\n    mapping(address => bool) public minters;\\n\\n    event MinterAdded(address newMinter);\\n\\n    // solhint-disable-next-line func-visibility\\n    constructor(address _token) Ownable(msg.sender) {\\n        token = IMintableToken(_token);\\n    }\\n\\n    /// @dev mints tokens to the recipient, to be called from owner\\n    /// @param _recipient address to mint\\n    /// @param _amount amount to be minted\\n    function mint(address _recipient, uint256 _amount) public {\\n        require(\\n            minters[msg.sender],\\n            'MintableTokenOwner:mint: the sender must be in the minters list'\\n        );\\n        token.mint(_recipient, _amount);\\n    }\\n\\n    function transferTokenOwnership(address _newOwner) public onlyOwner {\\n        token.transferOwnership(_newOwner);\\n    }\\n\\n    /// @dev adds new minter\\n    /// @param _newMinter address of new minter\\n    function addMinter(address _newMinter) public onlyOwner {\\n        minters[_newMinter] = true;\\n        emit MinterAdded(_newMinter);\\n    }\\n\\n    /// @dev removes minter from minter list\\n    /// @param _minter address of the minter\\n    function revokeMinter(address _minter) public onlyOwner {\\n        minters[_minter] = false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/ChainlinkPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol';\\nimport '../interfaces/IPriceFeed.sol';\\nimport '../interfaces/ITokenPriceFeed.sol';\\nimport '../utils/constants.sol';\\n\\n/**\\n * @title ChainlinkPriceOracle\\n * @dev Retrieves and manages price data from Chainlink's Oracle for specified tokens.\\n */\\ncontract ChainlinkPriceOracle is IPriceFeed, Constants {\\n    AggregatorV2V3Interface public immutable oracle;\\n    address public immutable override token;\\n    uint256 public immutable precision;\\n    uint256 public updateThreshold = 24 hours;\\n\\n    /**\\n     * @dev Initializes the Chainlink price feed with the specified oracle and token.\\n     * @param _oracle The address of the Chainlink oracle contract.\\n     * @param _token The address of the associated token.\\n     */\\n    constructor(address _token, address _oracle) {\\n        require(\\n            _oracle != address(0x0),\\n            'oracle-is-zero-address'\\n        );\\n        require(\\n            _token != address(0x0),\\n            'token-is-zero-address'\\n        );\\n        token = _token;\\n        oracle = AggregatorV2V3Interface(_oracle);\\n        uint8 decimals = oracle.decimals();\\n        require(decimals > 0, 'decimals-is-zero');\\n        precision = 10 ** decimals;\\n    }\\n\\n    /**\\n     * @dev Retrieves the current price from the Chainlink oracle, ensuring it is not outdated.\\n     * @return The latest recorded price of the associated token.\\n     */\\n    function price() public view virtual override returns (uint256) {\\n        (, int256 _price, , uint256 _timestamp, ) = oracle.latestRoundData();\\n        require(_price > 0, 'invalid-price');\\n        require(\\n            block.timestamp - _timestamp <= updateThreshold,\\n            'price-outdated'\\n        );\\n        return (uint256(_price) * DECIMAL_PRECISION) / precision;\\n    }\\n\\n    /**\\n     * @dev Retrieves the current price point.\\n     * @return The current price of the associated token.\\n     */\\n    function pricePoint() public view override returns (uint256) {\\n        return price();\\n    }\\n\\n    /**\\n     * @dev Emits a price update signal for the associated token.\\n     */\\n    function emitPriceSignal() public override {\\n        emit PriceUpdate(token, price(), price());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/oracles/FixedPriceOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '../interfaces/IPriceFeed.sol';\\n\\ncontract FixedPriceOracle is IPriceFeed {\\n    IPriceFeed public immutable priceFeed = IPriceFeed(address(0));\\n    IPriceFeed public immutable conversionPriceFeed = IPriceFeed(address(0));\\n    address public immutable override token;\\n    uint256 public fixedPrice;\\n    constructor(address _token, uint256 _price) {\\n        fixedPrice = _price;\\n        token = _token;\\n    }\\n\\n    function price() public view override returns (uint256) {\\n        return fixedPrice;\\n    }\\n\\n    function pricePoint() public view override returns (uint256) {\\n        return price();\\n    }\\n\\n    function emitPriceSignal() public {\\n        emit PriceUpdate(token, price(), price());\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/OwnerProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/utils/Address.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\n\\n/**\\n * @title OwnerProxy\\n * @dev Allows the main owner to add fine-grained permissions to other operators.\\n */\\ncontract OwnerProxy is Context, Ownable {\\n    mapping(uint256 => bool) public permissions;\\n\\n    event PermissionAdded(\\n        address indexed caller,\\n        address targetAddress,\\n        bytes4 targetSignature,\\n        uint256 permissionHash\\n    );\\n    event PermissionRemoved(uint256 indexed permissionHash);\\n    event Executed(\\n        address indexed caller,\\n        address indexed target,\\n        string func,\\n        bytes data\\n    );\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Adds permission for a specific caller to execute a function on a target address.\\n     * @param caller The address allowed to call the function.\\n     * @param targetAddress The target address where the function will be called.\\n     * @param targetSignature The function signature to be executed.\\n     */\\n    function addPermission(\\n        address caller,\\n        address targetAddress,\\n        bytes4 targetSignature\\n    ) public onlyOwner {\\n        require(caller != address(0), 'invalid-caller-address');\\n        require(targetAddress != address(0), 'invalid-target-address');\\n        uint256 _hash = uint256(\\n            keccak256(abi.encodePacked(caller, targetAddress, targetSignature))\\n        );\\n        permissions[_hash] = true;\\n        emit PermissionAdded(caller, targetAddress, targetSignature, _hash);\\n    }\\n\\n    /**\\n     * @dev Removes a specific permission.\\n     * @param permissionHash The hash of the permission to be removed.\\n     */\\n    function removePermission(uint256 permissionHash) public onlyOwner {\\n        delete permissions[permissionHash];\\n        emit PermissionRemoved(permissionHash);\\n    }\\n\\n    /**\\n     * @dev Executes a function on a target address only if the caller has the required permission.\\n     * @param target The contract address where the function will be called.\\n     * @param func The name of the function to be executed.\\n     * @param data The data to be passed to the function.\\n     * @return _result The result of the function execution.\\n     */\\n    function execute(\\n        address target,\\n        string memory func,\\n        bytes memory data\\n    ) public returns (bytes memory _result) {\\n        bytes4 _targetSignature = bytes4(keccak256(bytes(func)));\\n        uint256 _hash = uint256(\\n            keccak256(abi.encodePacked(_msgSender(), target, _targetSignature))\\n        );\\n        require(permissions[_hash], 'invalid-permission');\\n        emit Executed(_msgSender(), target, func, data);\\n        _result = Address.functionCall(\\n            target,\\n            bytes.concat(_targetSignature, data)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StabilityPool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n// import openzeppelin reentrancy guard\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport './utils/constants.sol';\\nimport './interfaces/IVaultFactory.sol';\\nimport './interfaces/IMintableToken.sol';\\nimport './interfaces/IVault.sol';\\nimport './interfaces/ILiquidationRouter.sol';\\n\\n/**\\n * @title StabilityPool\\n * @dev A smart contract responsible for liquidating vaults and rewarding depositors with collateral redeemed.\\n * @notice is used to liquidate vaults and reward depositors with collateral redeemed\\n */\\ncontract StabilityPool is Ownable, ReentrancyGuard, Constants {\\n    using SafeERC20 for IERC20;\\n\\n    // A structure defining token addresses and their respective 'Stable' values\\n    struct TokenToS {\\n        address tokenAddress;\\n        uint256 S_value;\\n    }\\n\\n    // A structure defining token addresses and their corresponding uint256 values\\n    struct TokenToUint256 {\\n        address tokenAddress;\\n        uint256 value;\\n    }\\n\\n    // A structure that holds snapshots of token balances, 'P' and 'G', and epoch information\\n    struct Snapshots {\\n        TokenToS[] tokenToSArray;\\n        uint256 P;\\n        uint256 G;\\n        uint128 scale;\\n        uint128 epoch;\\n    }\\n\\n    IVaultFactory public factory;\\n    IMintableToken public immutable stableCoin;\\n\\n    IERC20 public immutable tbankToken;\\n\\n    // Track total deposits and error offsets\\n    uint256 public totalDeposit;\\n    mapping(address => uint256) public collateralToLastErrorOffset;\\n    uint256 public lastStableCoinLossErrorOffset;\\n    mapping(address => uint256) public deposits;\\n    mapping(address => Snapshots) public depositSnapshots; // depositor address -> snapshots struct\\n\\n    // Variables related to TBANK rewards and error tracking\\n    uint256 public tbankPerMinute;\\n    uint256 public totalTBANKRewardsLeft;\\n    uint256 public latestTBANKRewardTime;\\n    // Error tracker for the error correction in the TBANK redistribution calculation\\n    uint256 public lastTBANKError;\\n    /*  Product 'P': Running product by which to multiply an initial deposit, in order to find the current compounded deposit,\\n     * after a series of liquidations have occurred, each of which cancel some StableCoin debt with the deposit.\\n     *\\n     * During its lifetime, a deposit's value evolves from d_t to d_t * P / P_t , where P_t\\n     * is the snapshot of P taken at the instant the deposit was made. 18-digit decimal.\\n     */\\n    uint256 public P;\\n\\n    uint256 public constant SCALE_FACTOR = 1e9;\\n\\n    uint256 public constant SECONDS_IN_ONE_MINUTE = 60;\\n\\n    // Each time the scale of P shifts by SCALE_FACTOR, the scale is incremented by 1\\n    uint128 public currentScale;\\n\\n    // With each offset that fully empties the Pool, the epoch is incremented by 1\\n    uint128 public currentEpoch;\\n\\n    /* Collateral Gain sum 'S': During its lifetime, each deposit d_t earns an Collateral gain of ( d_t * [S - S_t] )/P_t, where S_t\\n     * is the depositor's snapshot of S taken at the time t when the deposit was made.\\n     *\\n     * The 'S' sums are stored in a nested mapping (epoch => scale => sum):\\n     *\\n     * - The inner mapping records the sum S at different scales\\n     * - The outer mapping records the (scale => sum) mappings, for different epochs.\\n     */\\n    mapping(uint128 => mapping(uint128 => TokenToS[]))\\n        public epochToScaleToTokenToSum;\\n\\n    /*\\n     * Similarly, the sum 'G' is used to calculate TBANK gains. During it's lifetime, each deposit d_t earns a TBANK gain of\\n     *  ( d_t * [G - G_t] )/P_t, where G_t is the depositor's snapshot of G taken at time t when  the deposit was made.\\n     *\\n     *  TBANK reward events occur are triggered by depositor operations (new deposit, topup, withdrawal), and liquidations.\\n     *  In each case, the TBANK reward is issued (i.e. G is updated), before other state changes are made.\\n     */\\n    mapping(uint128 => mapping(uint128 => uint256)) public epochToScaleToG;\\n\\n    event Deposit(address _contributor, uint256 _amount);\\n    event TotalDepositUpdated(uint256 _newValue);\\n    event Withdraw(address _contributor, uint256 _amount);\\n\\n    // Events\\n    // solhint-disable-next-line event-name-camelcase\\n    event TBANKRewardRedeemed(address _contributor, uint256 _amount);\\n    event TBANKRewardIssue(uint256 issuance, uint256 _totalTBANKRewardsLeft);\\n    event TBANKPerMinuteUpdated(uint256 _newAmount);\\n    event TotalTBANKRewardsUpdated(uint256 _newAmount);\\n    // solhint-disable-next-line event-name-camelcase\\n    event CollateralRewardRedeemed(\\n        address _contributor,\\n        address _tokenAddress,\\n        uint256 _amount\\n    );\\n    event DepositSnapshotUpdated(\\n        address indexed _depositor,\\n        uint256 _P,\\n        uint256 _G,\\n        uint256 _newDepositValue\\n    );\\n\\n    /* solhint-disable event-name-camelcase */\\n    event P_Updated(uint256 _P);\\n    event S_Updated(\\n        address _tokenAddress,\\n        uint256 _S,\\n        uint128 _epoch,\\n        uint128 _scale\\n    );\\n    event G_Updated(uint256 _G, uint128 _epoch, uint128 _scale);\\n    /* solhint-disable event-name-camelcase */\\n    event EpochUpdated(uint128 _currentEpoch);\\n    event ScaleUpdated(uint128 _currentScale);\\n\\n    /**\\n     * @notice Initializes the StabilityPool contract with the given Vault factory and TBANK token addresses.\\n     * @dev The constructor sets up essential contract parameters upon deployment.\\n     * @param _factory Address of the Vault Factory contract responsible for creating Vault instances.\\n     * @param _tbankToken Address of the TBANK token to be used within the Vault system.\\n     */\\n    constructor(address _factory, address _tbankToken) Ownable(msg.sender) {\\n        require(_factory != address(0x0), 'factory-is-0');\\n        require(_tbankToken != address(0x0), 'tbank-is-0');\\n        factory = IVaultFactory(_factory);\\n        stableCoin = IMintableToken(address(IVaultFactory(_factory).stable()));\\n        tbankToken = IERC20(_tbankToken);\\n        P = DECIMAL_PRECISION;\\n    }\\n\\n    /// @dev to deposit StableCoin into StabilityPool this must be protected against a reentrant attack from the arbitrage\\n    /// @param  _amount amount to deposit\\n    function deposit(uint256 _amount) public nonReentrant {\\n        // address depositor = msg.sender;\\n        require(_amount > 0, 'amount-is-0');\\n\\n        stableCoin.transferFrom(msg.sender, address(this), _amount);\\n        uint256 initialDeposit = deposits[msg.sender];\\n        _redeemReward();\\n\\n        Snapshots memory snapshots = depositSnapshots[msg.sender];\\n\\n        uint256 compoundedDeposit = _getCompoundedDepositFromSnapshots(\\n            initialDeposit,\\n            snapshots\\n        );\\n        // uint256 newValue = compoundedDeposit + _amount;\\n        uint256 newTotalDeposit = totalDeposit + _amount;\\n        totalDeposit = newTotalDeposit;\\n\\n        _updateDepositAndSnapshots(msg.sender, compoundedDeposit + _amount);\\n\\n        emit Deposit(msg.sender, _amount);\\n        emit TotalDepositUpdated(newTotalDeposit);\\n    }\\n\\n    /// @dev to withdraw StableCoin that was not spent if this function is called in a reentrantway during arbitrage  it\\n    /// @dev would skew the token allocation and must be protected against\\n    /// @param  _amount amount to withdraw\\n    function withdraw(uint256 _amount) public nonReentrant {\\n        uint256 contributorDeposit = deposits[msg.sender];\\n        require(_amount > 0, 'amount-is-0');\\n        require(contributorDeposit > 0, 'deposit-is-0');\\n        _redeemReward();\\n\\n        Snapshots memory snapshots = depositSnapshots[msg.sender];\\n\\n        uint256 compoundedDeposit = _getCompoundedDepositFromSnapshots(\\n            contributorDeposit,\\n            snapshots\\n        );\\n        uint256 calculatedAmount = compoundedDeposit > _amount\\n            ? _amount\\n            : compoundedDeposit;\\n        uint256 newValue = compoundedDeposit - calculatedAmount;\\n\\n        totalDeposit = totalDeposit - calculatedAmount;\\n\\n        _updateDepositAndSnapshots(msg.sender, newValue);\\n\\n        stableCoin.transfer(msg.sender, calculatedAmount);\\n        emit Withdraw(msg.sender, calculatedAmount);\\n        emit TotalDepositUpdated(totalDeposit);\\n    }\\n\\n    /// @dev to withdraw collateral rewards earned after liquidations\\n    /// @dev this function does not provide an opportunity for a reentrancy attack\\n    function redeemReward() external {\\n        Snapshots memory snapshots = depositSnapshots[msg.sender];\\n        uint256 contributorDeposit = deposits[msg.sender];\\n\\n        uint256 compoundedDeposit = _getCompoundedDepositFromSnapshots(\\n            contributorDeposit,\\n            snapshots\\n        );\\n        _redeemReward();\\n        _updateDepositAndSnapshots(msg.sender, compoundedDeposit);\\n    }\\n\\n    function setVaultFactory(address _factory) external onlyOwner {\\n        require(_factory != address(0x0), 'factory-is-0');\\n        factory = IVaultFactory(_factory);\\n    }\\n\\n    /// @dev liquidates vault, must be called from that vault\\n    /// @dev this function does not provide an opportunity for a reentrancy attack even though it would make the arbitrage\\n    /// @dev fail because of the lowering of the stablecoin balance\\n    /// @notice must be called by the valid vault\\n    function liquidate() external {\\n        require(\\n            msg.sender == factory.liquidationRouter(),\\n            'not-liquidation-router'\\n        );\\n        IVaultFactory factory_cached = factory;\\n\\n        ILiquidationRouter _liquidationRouter = ILiquidationRouter(\\n            factory_cached.liquidationRouter()\\n        );\\n        uint256 _underWaterDebt = _liquidationRouter.underWaterDebt();\\n        address[] memory _collaterals = _liquidationRouter.collaterals();\\n        uint256 _collateralCount = _collaterals.length;\\n\\n        uint256 totalStableCoin = totalDeposit; // cached to save an SLOAD\\n\\n        for (uint256 i; i < _collateralCount; i++) {\\n            IERC20 _collateralToken = IERC20(_collaterals[i]);\\n            uint256 _collateralAmount = _liquidationRouter.collateral(\\n                address(_collateralToken)\\n            );\\n            _collateralToken.safeTransferFrom(\\n                address(_liquidationRouter),\\n                address(this),\\n                _collateralAmount\\n            );\\n\\n            (\\n                uint256 collateralGainPerUnitStaked,\\n                uint256 stableCoinLossPerUnitStaked\\n            ) = _computeRewardsPerUnitStaked(\\n                    address(_collateralToken),\\n                    _collateralAmount,\\n                    _underWaterDebt,\\n                    totalStableCoin\\n                );\\n\\n            _updateRewardSumAndProduct(\\n                address(_collateralToken),\\n                collateralGainPerUnitStaked,\\n                stableCoinLossPerUnitStaked\\n            );\\n        }\\n\\n        _triggerTBANKdistribution();\\n\\n        stableCoin.burn(_underWaterDebt);\\n        uint256 newTotalDeposit = totalStableCoin - _underWaterDebt;\\n        totalDeposit = newTotalDeposit;\\n        emit TotalDepositUpdated(newTotalDeposit);\\n        //factory_cached.emitLiquidationEvent(address(collateralToken), msg.sender, address(this), vaultCollateral);\\n    }\\n\\n    /**\\n     * @dev Gets the current withdrawable deposit of a specified staker.\\n     * @param staker The address of the staker\\n     * @return uint256 The withdrawable deposit amount\\n     */ function getWithdrawableDeposit(\\n        address staker\\n    ) public view returns (uint256) {\\n        uint256 initialDeposit = deposits[staker];\\n        Snapshots memory snapshots = depositSnapshots[staker];\\n        return _getCompoundedDepositFromSnapshots(initialDeposit, snapshots);\\n    }\\n\\n    /**\\n     * @dev Retrieves the collateral reward of a specified `_depositor` for a specific `_token`.\\n     * @param _token The address of the collateral token\\n     * @param _depositor The address of the depositor\\n     * @return uint256 The collateral reward amount\\n     */\\n    function getCollateralReward(\\n        address _token,\\n        address _depositor\\n    ) external view returns (uint256) {\\n        Snapshots memory _snapshots = depositSnapshots[_depositor];\\n        uint256 _initialDeposit = deposits[_depositor];\\n\\n        uint128 epochSnapshot = _snapshots.epoch;\\n        uint128 scaleSnapshot = _snapshots.scale;\\n\\n        TokenToS[] memory tokensToSum_cached = epochToScaleToTokenToSum[\\n            epochSnapshot\\n        ][scaleSnapshot];\\n        uint256 tokenArrayLength = tokensToSum_cached.length;\\n\\n        TokenToS memory cachedS;\\n        for (uint128 i = 0; i < tokenArrayLength; i++) {\\n            TokenToS memory S = tokensToSum_cached[i];\\n            if (S.tokenAddress == _token) {\\n                cachedS = S;\\n                break;\\n            }\\n        }\\n        if (cachedS.tokenAddress == address(0)) return 0;\\n        uint256 relatedSValue_snapshot;\\n        for (uint128 i = 0; i < _snapshots.tokenToSArray.length; i++) {\\n            TokenToS memory S_snapsot = _snapshots.tokenToSArray[i];\\n            if (S_snapsot.tokenAddress == _token) {\\n                relatedSValue_snapshot = S_snapsot.S_value;\\n                break;\\n            }\\n        }\\n        TokenToS[] memory nextTokensToSum_cached = epochToScaleToTokenToSum[\\n            epochSnapshot\\n        ][scaleSnapshot + 1];\\n        uint256 nextScaleS;\\n        for (uint128 i = 0; i < nextTokensToSum_cached.length; i++) {\\n            TokenToS memory nextScaleTokenToS = nextTokensToSum_cached[i];\\n            if (nextScaleTokenToS.tokenAddress == _token) {\\n                nextScaleS = nextScaleTokenToS.S_value;\\n                break;\\n            }\\n        }\\n\\n        uint256 P_Snapshot = _snapshots.P;\\n\\n        uint256 collateralGain = _getCollateralGainFromSnapshots(\\n            _initialDeposit,\\n            cachedS.S_value,\\n            nextScaleS,\\n            relatedSValue_snapshot,\\n            P_Snapshot\\n        );\\n\\n        return collateralGain;\\n    }\\n\\n    /**\\n     * @dev Retrieves the TBANK reward of a specified `_depositor`.\\n     * @param _depositor The address of the user\\n     * @return uint256 The TBANK reward amount\\n     */\\n    function getDepositorTBANKGain(\\n        address _depositor\\n    ) external view returns (uint256) {\\n        uint256 totalTBANKRewardsLeft_cached = totalTBANKRewardsLeft;\\n        uint256 totalStableCoin = totalDeposit;\\n        if (\\n            totalTBANKRewardsLeft_cached == 0 ||\\n            tbankPerMinute == 0 ||\\n            totalStableCoin == 0\\n        ) {\\n            return 0;\\n        }\\n\\n        uint256 _tbankIssuance = tbankPerMinute *\\n            ((block.timestamp - latestTBANKRewardTime) / SECONDS_IN_ONE_MINUTE);\\n        if (totalTBANKRewardsLeft_cached < _tbankIssuance) {\\n            _tbankIssuance = totalTBANKRewardsLeft_cached;\\n        }\\n\\n        uint256 tbankGain = (_tbankIssuance * DECIMAL_PRECISION + lastTBANKError) /\\n            totalStableCoin;\\n        uint256 marginalTBANKGain = tbankGain * P;\\n\\n        return _getDepositorTBANKGain(_depositor, marginalTBANKGain);\\n    }\\n\\n    /**\\n     * @dev Sets the amount of TBANK tokens per minute for rewards.\\n     * @param _tbankPerMinute The TBANK tokens per minute to be set\\n     */\\n    function setTBANKPerMinute(uint256 _tbankPerMinute) external onlyOwner {\\n        _triggerTBANKdistribution();\\n        tbankPerMinute = _tbankPerMinute;\\n        emit TBANKPerMinuteUpdated(tbankPerMinute);\\n    }\\n\\n    /**\\n     * @dev Sets the total amount of TBANK tokens to be rewarded.\\n     * It pays per minute until it reaches the specified rewarded amount.\\n     */\\n    function setTBANKAmountForRewards() external onlyOwner {\\n        _triggerTBANKdistribution();\\n        totalTBANKRewardsLeft = tbankToken.balanceOf(address(this));\\n        emit TotalTBANKRewardsUpdated(totalTBANKRewardsLeft);\\n    }\\n\\n    /**\\n     * @dev Redeems rewards, calling internal functions for collateral and TBANK rewards.\\n     * Private function for internal use.\\n     */\\n    function _redeemReward() private {\\n        _redeemCollateralReward();\\n        _triggerTBANKdistribution();\\n        _redeemTBANKReward();\\n    }\\n\\n    /**\\n     * @notice Allows a depositor to redeem collateral rewards.\\n     */\\n    function _redeemCollateralReward() internal {\\n        address depositor = msg.sender;\\n        TokenToUint256[]\\n            memory depositorCollateralGains = _getDepositorCollateralGains(\\n                depositor\\n            );\\n        _sendCollateralRewardsToDepositor(depositorCollateralGains);\\n    }\\n\\n    /**\\n     * @notice Allows a depositor to redeem TBANK rewards.\\n     */\\n    function _redeemTBANKReward() internal {\\n        address depositor = msg.sender;\\n        uint256 depositorTBANKGain = _getDepositorTBANKGain(depositor, 0);\\n        _sendTBANKRewardsToDepositor(depositorTBANKGain);\\n        emit TBANKRewardRedeemed(depositor, depositorTBANKGain);\\n    }\\n\\n    /**\\n     * @dev Updates user deposit snapshot data for a new deposit value.\\n     * @param _depositor The address of the depositor.\\n     * @param _newValue The new deposit value.\\n     */\\n    function _updateDepositAndSnapshots(\\n        address _depositor,\\n        uint256 _newValue\\n    ) private {\\n        deposits[_depositor] = _newValue;\\n        if (_newValue == 0) {\\n            delete depositSnapshots[_depositor];\\n            emit DepositSnapshotUpdated(_depositor, 0, 0, 0);\\n            return;\\n        }\\n        uint128 cachedEpoch = currentEpoch;\\n        uint128 cachedScale = currentScale;\\n        TokenToS[] storage cachedTokenToSArray = epochToScaleToTokenToSum[\\n            cachedEpoch\\n        ][cachedScale]; // TODO: maybe remove and read twice?\\n        uint256 cachedP = P;\\n        uint256 cachedG = epochToScaleToG[cachedEpoch][cachedScale];\\n\\n        depositSnapshots[_depositor].tokenToSArray = cachedTokenToSArray; // TODO\\n        depositSnapshots[_depositor].P = cachedP;\\n        depositSnapshots[_depositor].G = cachedG;\\n        depositSnapshots[_depositor].scale = cachedScale;\\n        depositSnapshots[_depositor].epoch = cachedEpoch;\\n        emit DepositSnapshotUpdated(_depositor, cachedP, cachedG, _newValue);\\n    }\\n\\n    /**\\n     * @notice Updates the reward sums and product based on collateral and stablecoin changes.\\n     * @dev This function updates the reward sums and product based on changes in collateral and stablecoin values.\\n     * @param _collateralTokenAddress Address of the collateral token.\\n     * @param _collateralGainPerUnitStaked Collateral gains per unit staked.\\n     * @param _stableCoinLossPerUnitStaked Stablecoin losses per unit staked.\\n     */\\n    function _updateRewardSumAndProduct(\\n        address _collateralTokenAddress,\\n        uint256 _collateralGainPerUnitStaked,\\n        uint256 _stableCoinLossPerUnitStaked\\n    ) internal {\\n        assert(_stableCoinLossPerUnitStaked <= DECIMAL_PRECISION);\\n\\n        uint128 currentScaleCached = currentScale;\\n        uint128 currentEpochCached = currentEpoch;\\n        uint256 currentS;\\n        uint256 currentSIndex;\\n        bool _found;\\n        TokenToS[] memory currentTokenToSArray = epochToScaleToTokenToSum[\\n            currentEpochCached\\n        ][currentScaleCached];\\n        for (uint128 i = 0; i < currentTokenToSArray.length; i++) {\\n            if (\\n                currentTokenToSArray[i].tokenAddress == _collateralTokenAddress\\n            ) {\\n                currentS = currentTokenToSArray[i].S_value;\\n                currentSIndex = i;\\n                _found = true;\\n            }\\n        }\\n        /*\\n         * Calculate the new S first, before we update P.\\n         * The Collateral gain for any given depositor from a liquidation depends on the value of their deposit\\n         * (and the value of totalDeposits) prior to the Stability being depleted by the debt in the liquidation.\\n         *\\n         * Since S corresponds to Collateral gain, and P to deposit loss, we update S first.\\n         */\\n        uint256 marginalCollateralGain = _collateralGainPerUnitStaked * P;\\n        uint256 newS = currentS + marginalCollateralGain;\\n        if (currentTokenToSArray.length == 0 || !_found) {\\n            TokenToS memory tokenToS;\\n            tokenToS.S_value = newS;\\n            tokenToS.tokenAddress = _collateralTokenAddress;\\n            epochToScaleToTokenToSum[currentEpochCached][currentScaleCached]\\n                .push() = tokenToS;\\n        } else {\\n            epochToScaleToTokenToSum[currentEpochCached][currentScaleCached][\\n                currentSIndex\\n            ].S_value = newS;\\n        }\\n        emit S_Updated(\\n            _collateralTokenAddress,\\n            newS,\\n            currentEpochCached,\\n            currentScaleCached\\n        );\\n        _updateP(_stableCoinLossPerUnitStaked, true);\\n    }\\n\\n    function _updateP(\\n        uint256 _stableCoinChangePerUnitStaked,\\n        bool loss\\n    ) internal {\\n        /*\\n         * The newProductFactor is the factor by which to change all deposits, due to the depletion of Stability Pool StableCoin in the liquidation.\\n         * We make the product factor 0 if there was a pool-emptying. Otherwise, it is (1 - StableCoinLossPerUnitStaked)\\n         */\\n        uint256 newProductFactor;\\n        if (loss) {\\n            newProductFactor = uint256(\\n                DECIMAL_PRECISION - _stableCoinChangePerUnitStaked\\n            );\\n        } else {\\n            newProductFactor = uint256(\\n                DECIMAL_PRECISION + _stableCoinChangePerUnitStaked\\n            );\\n        }\\n        uint256 currentP = P;\\n        uint256 newP;\\n        // If the Stability Pool was emptied, increment the epoch, and reset the scale and product P\\n        if (newProductFactor == 0) {\\n            currentEpoch += 1;\\n            emit EpochUpdated(currentEpoch);\\n            currentScale = 0;\\n            emit ScaleUpdated(0);\\n            newP = DECIMAL_PRECISION;\\n\\n            // If multiplying P by a non-zero product factor would reduce P below the scale boundary, increment the scale\\n        } else if (\\n            (currentP * newProductFactor) / DECIMAL_PRECISION < SCALE_FACTOR\\n        ) {\\n            newP =\\n                (currentP * newProductFactor * SCALE_FACTOR) /\\n                DECIMAL_PRECISION;\\n            currentScale += 1;\\n            emit ScaleUpdated(currentScale);\\n        } else {\\n            newP = (currentP * newProductFactor) / DECIMAL_PRECISION;\\n        }\\n\\n        assert(newP > 0);\\n        P = newP;\\n\\n        emit P_Updated(newP);\\n    }\\n\\n    /**\\n     * @dev Updates G when a new TBANK amount is issued.\\n     * @param _tbankIssuance The new TBANK issuance amount\\n     */\\n    function _updateG(uint256 _tbankIssuance) internal {\\n        uint256 totalStableCoin = totalDeposit; // cached to save an SLOAD\\n        /*\\n         * When total deposits is 0, G is not updated. In this case, the TBANK issued can not be obtained by later\\n         * depositors - it is missed out on, and remains in the balanceof the Stability Pool.\\n         *\\n         */\\n        if (totalStableCoin == 0 || _tbankIssuance == 0) {\\n            return;\\n        }\\n\\n        uint256 tbankPerUnitStaked;\\n        tbankPerUnitStaked = _computeTBANKPerUnitStaked(\\n            _tbankIssuance,\\n            totalStableCoin\\n        );\\n\\n        uint256 marginalTBANKGain = tbankPerUnitStaked * P;\\n        uint128 currentEpoch_cached = currentEpoch;\\n        uint128 currentScale_cached = currentScale;\\n\\n        uint256 newEpochToScaleToG = epochToScaleToG[currentEpoch_cached][\\n            currentScale_cached\\n        ] + marginalTBANKGain;\\n        epochToScaleToG[currentEpoch_cached][\\n            currentScale_cached\\n        ] = newEpochToScaleToG;\\n\\n        emit G_Updated(\\n            newEpochToScaleToG,\\n            currentEpoch_cached,\\n            currentScale_cached\\n        );\\n    }\\n\\n    /**\\n     * @dev Retrieves the collateral gains of a specified `_depositor`.\\n     * @param _depositor The address of the depositor\\n     * @return TokenToUint256[] An array containing collateral gain information\\n     */\\n    function _getDepositorCollateralGains(\\n        address _depositor\\n    ) internal view returns (TokenToUint256[] memory) {\\n        uint256 initialDeposit = deposits[_depositor];\\n        if (initialDeposit == 0) {\\n            TokenToUint256[] memory x;\\n            return x;\\n        }\\n\\n        Snapshots memory snapshots = depositSnapshots[_depositor];\\n\\n        TokenToUint256[]\\n            memory gainPerCollateralArray = _getCollateralGainsArrayFromSnapshots(\\n                initialDeposit,\\n                snapshots\\n            );\\n        return gainPerCollateralArray;\\n    }\\n\\n    // todo!\\n    function _getCollateralGainsArrayFromSnapshots(\\n        uint256 _initialDeposit,\\n        Snapshots memory _snapshots\\n    ) internal view returns (TokenToUint256[] memory) {\\n        /*\\n         * Grab the sum 'S' from the epoch at which the stake was made. The Collateral gain may span up to one scale change.\\n         * If it does, the second portion of the Collateral gain is scaled by 1e9.\\n         * If the gain spans no scale change, the second portion will be 0.\\n         */\\n        uint128 epochSnapshot = _snapshots.epoch;\\n        uint128 scaleSnapshot = _snapshots.scale;\\n        TokenToS[] memory tokensToSum_cached = epochToScaleToTokenToSum[\\n            epochSnapshot\\n        ][scaleSnapshot];\\n        uint256 tokenArrayLength = tokensToSum_cached.length;\\n        TokenToUint256[] memory CollateralGainsArray = new TokenToUint256[](\\n            tokenArrayLength\\n        );\\n        for (uint128 i = 0; i < tokenArrayLength; i++) {\\n            TokenToS memory S = tokensToSum_cached[i];\\n            uint256 relatedS_snapshot;\\n            for (uint128 j = 0; j < _snapshots.tokenToSArray.length; j++) {\\n                TokenToS memory S_snapsot = _snapshots.tokenToSArray[j];\\n                if (S_snapsot.tokenAddress == S.tokenAddress) {\\n                    relatedS_snapshot = S_snapsot.S_value;\\n                    break;\\n                }\\n            }\\n            TokenToS[] memory nextTokensToSum_cached = epochToScaleToTokenToSum[\\n                epochSnapshot\\n            ][scaleSnapshot + 1];\\n            uint256 nextScaleS;\\n            for (uint128 j = 0; j < nextTokensToSum_cached.length; j++) {\\n                TokenToS memory nextScaleTokenToS = nextTokensToSum_cached[j];\\n                if (nextScaleTokenToS.tokenAddress == S.tokenAddress) {\\n                    nextScaleS = nextScaleTokenToS.S_value;\\n                    break;\\n                }\\n            }\\n            uint256 P_Snapshot = _snapshots.P;\\n\\n            CollateralGainsArray[i].value = _getCollateralGainFromSnapshots(\\n                _initialDeposit,\\n                S.S_value,\\n                nextScaleS,\\n                relatedS_snapshot,\\n                P_Snapshot\\n            );\\n            CollateralGainsArray[i].tokenAddress = S.tokenAddress;\\n        }\\n\\n        return CollateralGainsArray;\\n    }\\n\\n    function _getCollateralGainFromSnapshots(\\n        uint256 initialDeposit,\\n        uint256 S,\\n        uint256 nextScaleS,\\n        uint256 S_Snapshot,\\n        uint256 P_Snapshot\\n    ) internal pure returns (uint256) {\\n        uint256 firstPortion = S - S_Snapshot;\\n        uint256 secondPortion = nextScaleS / SCALE_FACTOR;\\n        uint256 collateralGain = (initialDeposit *\\n            (firstPortion + secondPortion)) /\\n            P_Snapshot /\\n            DECIMAL_PRECISION;\\n\\n        return collateralGain;\\n    }\\n\\n    function _getDepositorTBANKGain(\\n        address _depositor,\\n        uint256 _marginalTBANKGain\\n    ) internal view returns (uint256) {\\n        uint256 initialDeposit = deposits[_depositor];\\n        if (initialDeposit == 0) {\\n            return 0;\\n        }\\n        Snapshots memory _snapshots = depositSnapshots[_depositor];\\n        /*\\n         * Grab the sum 'G' from the epoch at which the stake was made. The TBANK gain may span up to one scale change.\\n         * If it does, the second portion of the TBANK gain is scaled by 1e9.\\n         * If the gain spans no scale change, the second portion will be 0.\\n         */\\n        uint256 firstEpochPortion = epochToScaleToG[_snapshots.epoch][\\n            _snapshots.scale\\n        ];\\n        uint256 secondEpochPortion = epochToScaleToG[_snapshots.epoch][\\n            _snapshots.scale + 1\\n        ];\\n        if (_snapshots.epoch == currentEpoch) {\\n            if (_snapshots.scale == currentScale)\\n                firstEpochPortion += _marginalTBANKGain;\\n            if (_snapshots.scale + 1 == currentScale)\\n                secondEpochPortion += _marginalTBANKGain;\\n        }\\n        uint256 gainPortions = firstEpochPortion -\\n            _snapshots.G +\\n            secondEpochPortion /\\n            SCALE_FACTOR;\\n\\n        return\\n            (initialDeposit * (gainPortions)) /\\n            _snapshots.P /\\n            DECIMAL_PRECISION;\\n    }\\n\\n    /// @dev gets compounded deposit of the user\\n    function _getCompoundedDepositFromSnapshots(\\n        uint256 _initialStake,\\n        Snapshots memory _snapshots\\n    ) internal view returns (uint256) {\\n        uint256 snapshot_P = _snapshots.P;\\n\\n        // If stake was made before a pool-emptying event, then it has been fully cancelled with debt -- so, return 0\\n        if (_snapshots.epoch < currentEpoch) {\\n            return 0;\\n        }\\n\\n        uint256 compoundedStake;\\n        uint128 scaleDiff = currentScale - _snapshots.scale;\\n\\n        /* Compute the compounded stake. If a scale change in P was made during the stake's lifetime,\\n         * account for it. If more than one scale change was made, then the stake has decreased by a factor of\\n         * at least 1e-9 -- so return 0.\\n         */\\n        uint256 calculatedSnapshotP = snapshot_P == 0\\n            ? DECIMAL_PRECISION\\n            : snapshot_P;\\n        if (scaleDiff == 0) {\\n            compoundedStake = (_initialStake * P) / calculatedSnapshotP;\\n        } else if (scaleDiff == 1) {\\n            compoundedStake =\\n                (_initialStake * P) /\\n                calculatedSnapshotP /\\n                SCALE_FACTOR;\\n        } else {\\n            // if scaleDiff >= 2\\n            compoundedStake = 0;\\n        }\\n\\n        /*\\n         * If compounded deposit is less than a billionth of the initial deposit, return 0.\\n         *\\n         * NOTE: originally, this line was in place to stop rounding errors making the deposit too large. However, the error\\n         * corrections should ensure the error in P \\\"favors the Pool\\\", i.e. any given compounded deposit should slightly less\\n         * than it's theoretical value.\\n         *\\n         * Thus it's unclear whether this line is still really needed.\\n         */\\n        if (compoundedStake < _initialStake / 1e9) {\\n            return 0;\\n        }\\n\\n        return compoundedStake;\\n    }\\n\\n    /// @dev Compute the StableCoin and Collateral rewards. Uses a \\\"feedback\\\" error correction, to keep\\n    /// the cumulative error in the P and S state variables low:s\\n    function _computeRewardsPerUnitStaked(\\n        address _collateralTokenAddress,\\n        uint256 _collToAdd,\\n        uint256 _debtToOffset,\\n        uint256 _totalStableCoinDeposits\\n    )\\n        internal\\n        returns (\\n            uint256 collateralGainPerUnitStaked,\\n            uint256 stableCoinLossPerUnitStaked\\n        )\\n    {\\n        /*\\n         * Compute the StableCoin and Collateral rewards. Uses a \\\"feedback\\\" error correction, to keep\\n         * the cumulative error in the P and S state variables low:\\n         *\\n         * 1) Form numerators which compensate for the floor division errors that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratios.\\n         * 3) Multiply each ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store these errors for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint256 collateralNumerator = _collToAdd *\\n            DECIMAL_PRECISION +\\n            collateralToLastErrorOffset[_collateralTokenAddress];\\n\\n        assert(_debtToOffset <= _totalStableCoinDeposits);\\n        if (_debtToOffset == _totalStableCoinDeposits) {\\n            stableCoinLossPerUnitStaked = DECIMAL_PRECISION; // When the Pool depletes to 0, so does each deposit\\n            lastStableCoinLossErrorOffset = 0;\\n        } else {\\n            uint256 stableCoinLossNumerator = _debtToOffset *\\n                DECIMAL_PRECISION -\\n                lastStableCoinLossErrorOffset;\\n            /*\\n             * Add 1 to make error in quotient positive. We want \\\"slightly too much\\\" StableCoin loss,\\n             * which ensures the error in any given compoundedStableCoinDeposit favors the Stability Pool.\\n             */\\n            stableCoinLossPerUnitStaked =\\n                stableCoinLossNumerator /\\n                _totalStableCoinDeposits +\\n                1;\\n            lastStableCoinLossErrorOffset =\\n                stableCoinLossPerUnitStaked *\\n                _totalStableCoinDeposits -\\n                stableCoinLossNumerator;\\n        }\\n\\n        collateralGainPerUnitStaked = (_totalStableCoinDeposits != 0)\\n            ? collateralNumerator / _totalStableCoinDeposits\\n            : 0;\\n        collateralToLastErrorOffset[_collateralTokenAddress] =\\n            collateralNumerator -\\n            collateralGainPerUnitStaked *\\n            _totalStableCoinDeposits;\\n\\n        return (collateralGainPerUnitStaked, stableCoinLossPerUnitStaked);\\n    }\\n\\n    /// @dev distributes TBANK per minutes that was not spent yet\\n    function _triggerTBANKdistribution() internal {\\n        uint256 issuance = _issueTBANKRewards();\\n        _updateG(issuance);\\n    }\\n\\n    function _issueTBANKRewards() internal returns (uint256) {\\n        uint256 newTBANKRewardTime = block.timestamp;\\n        uint256 totalTBANKRewardsLeft_cached = totalTBANKRewardsLeft;\\n        if (\\n            totalTBANKRewardsLeft_cached == 0 ||\\n            tbankPerMinute == 0 ||\\n            totalDeposit == 0\\n        ) {\\n            latestTBANKRewardTime = newTBANKRewardTime;\\n            return 0;\\n        }\\n\\n        uint256 timePassedInMinutes = (newTBANKRewardTime - latestTBANKRewardTime) /\\n            SECONDS_IN_ONE_MINUTE;\\n        uint256 issuance = tbankPerMinute * timePassedInMinutes;\\n        if (totalTBANKRewardsLeft_cached < issuance) {\\n            issuance = totalTBANKRewardsLeft_cached; // event will capture that 0 tokens left\\n        }\\n        uint256 newTotalTBANKRewardsLeft = totalTBANKRewardsLeft_cached - issuance;\\n        totalTBANKRewardsLeft = newTotalTBANKRewardsLeft;\\n        latestTBANKRewardTime = newTBANKRewardTime;\\n\\n        emit TBANKRewardIssue(issuance, newTotalTBANKRewardsLeft);\\n\\n        return issuance;\\n    }\\n\\n    function _computeTBANKPerUnitStaked(\\n        uint256 _tbankIssuance,\\n        uint256 _totalStableCoinDeposits\\n    ) internal returns (uint256) {\\n        /*\\n         * Calculate the TBANK-per-unit staked.  Division uses a \\\"feedback\\\" error correction, to keep the\\n         * cumulative error low in the running total G:\\n         *\\n         * 1) Form a numerator which compensates for the floor division error that occurred the last time this\\n         * function was called.\\n         * 2) Calculate \\\"per-unit-staked\\\" ratio.\\n         * 3) Multiply the ratio back by its denominator, to reveal the current floor division error.\\n         * 4) Store this error for use in the next correction when this function is called.\\n         * 5) Note: static analysis tools complain about this \\\"division before multiplication\\\", however, it is intended.\\n         */\\n        uint256 tbankNumerator = _tbankIssuance * DECIMAL_PRECISION + lastTBANKError;\\n\\n        uint256 tbankPerUnitStaked = tbankNumerator / _totalStableCoinDeposits;\\n        lastTBANKError =\\n            tbankNumerator -\\n            (tbankPerUnitStaked * _totalStableCoinDeposits);\\n\\n        return tbankPerUnitStaked;\\n    }\\n\\n    /// @dev transfers collateral rewards tokens precalculated to the depositor\\n    function _sendCollateralRewardsToDepositor(\\n        TokenToUint256[] memory _depositorCollateralGains\\n    ) internal {\\n        for (uint256 i = 0; i < _depositorCollateralGains.length; i++) {\\n            if (_depositorCollateralGains[i].value == 0) {\\n                continue;\\n            }\\n            IERC20 collateralToken = IERC20(\\n                _depositorCollateralGains[i].tokenAddress\\n            );\\n            collateralToken.safeTransfer(\\n                msg.sender,\\n                _depositorCollateralGains[i].value\\n            );\\n            emit CollateralRewardRedeemed(\\n                msg.sender,\\n                _depositorCollateralGains[i].tokenAddress,\\n                _depositorCollateralGains[i].value\\n            );\\n        }\\n    }\\n\\n    /// @dev transfers TBANK amount to the user\\n    function _sendTBANKRewardsToDepositor(uint256 _tbankGain) internal {\\n        tbankToken.transfer(msg.sender, _tbankGain);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Stabilizer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\nimport \\\"./interfaces/IMintableTokenOwner.sol\\\";\\nimport \\\"./interfaces/IMintableToken.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\ncontract Stabilizer is Ownable {\\n\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableToken;\\n\\n    IMintableTokenOwner public immutable mintableTokenOwner;\\n    IMintableToken public immutable stableToken;\\n    IERC20 public immutable collateralToken;\\n\\n    uint256 public immutable scalingFactor;\\n\\n    uint256 public feeBps;\\n\\n    address public feeRecipient;\\n\\n    event StabilizerMint(address indexed account, uint256 amount, uint256 fee);\\n    event StabilizerBurn(address indexed account, uint256 amount, uint256 stableFee);\\n\\n    event FeeRecipientChanged(address indexed oldRecipient, address indexed newRecipient);\\n\\n    constructor(address _mintableTokenOwner, address _collateralToken, uint256 _feeBps) Ownable(msg.sender) {\\n\\n        require(_mintableTokenOwner != address(0), \\\"mintable-token-owner-is-zero\\\");\\n        require(_collateralToken != address(0), \\\"collateral-token-is-zero\\\");\\n        mintableTokenOwner = IMintableTokenOwner(_mintableTokenOwner);\\n        stableToken = IMintableToken(mintableTokenOwner.token());\\n        collateralToken = IERC20(_collateralToken);\\n        scalingFactor = 10 ** (ERC20(address(stableToken)).decimals() - IERC20Metadata(_collateralToken).decimals());\\n        feeRecipient = msg.sender;\\n        feeBps = _feeBps;\\n    }\\n\\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        require(_feeRecipient != address(0), \\\"fee-recipient-is-zero\\\");\\n        emit FeeRecipientChanged(feeRecipient, _feeRecipient);\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    function setFeeBps(uint256 _feeBps) external onlyOwner {\\n        require(_feeBps <= 500, \\\"fee-too-high\\\");\\n        feeBps = _feeBps;\\n    }\\n\\n    function mint(uint256 _amount) external {\\n        uint256 fee = (_amount * feeBps) / 10000;\\n        require(_amount >= scalingFactor, \\\"amount-too-small\\\");\\n        uint256 collateralAmount = _amount / scalingFactor;\\n\\n        collateralToken.safeTransferFrom(msg.sender, address(this), collateralAmount);\\n\\n        mintableTokenOwner.mint(msg.sender, _amount - fee);\\n        mintableTokenOwner.mint(feeRecipient, fee);\\n\\n        emit StabilizerMint(msg.sender, _amount, fee);\\n    }\\n\\n\\n    function burn(uint256 _amount) external {\\n        // mintableToken is 18 decimals, scale accordingly\\n        uint256 collateralAmount = _amount / scalingFactor;\\n        require(_amount >= scalingFactor, \\\"amount-too-small\\\");\\n        uint256 fee = (collateralAmount * feeBps) / 10000;\\n\\n        stableToken.safeTransferFrom(msg.sender, address(this), _amount);\\n        stableToken.burn(_amount);\\n\\n        collateralToken.safeTransfer(msg.sender, collateralAmount - fee);\\n        collateralToken.safeTransfer(feeRecipient, fee);\\n\\n        emit StabilizerBurn(msg.sender, _amount, fee);\\n    }\\n\\n}\\n\"\r\n    },\r\n    \"contracts/TBANK.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\n/**\\n * @title TBANK\\n * @dev TBANK is an ERC20 token representing TBANK Governance Token.\\n */\\ncontract TBANK is ERC20 {\\n    /**\\n     * @dev Total supply of TBANK tokens.\\n     */\\n    uint256 public constant TOTAL_SUPPLY = 15_000_000 ether;\\n\\n    /**\\n     * @dev Constructor that mints the total supply of TBANK tokens to the deployer.\\n     */\\n    constructor() ERC20('TaoBank', 'TBANK') {\\n        _mint(msg.sender, TOTAL_SUPPLY);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/TBANKStaking.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/***\\n TTTTT  BBBBB   A   N   N  K   K\\n   T    B   B  A A  NN  N  K  K\\n   T    BBBBB  A A  N N N  KK\\n   T    B   B AAAAA N  NN  K  K\\n   T    BBBBB A   A N   N  K   K\\n***/\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ncontract TBANKStaking is ReentrancyGuard, Pausable, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    struct Reward {\\n        address rewardsDistributor;\\n        uint256 rewardsDuration;\\n        uint256 periodFinish;\\n        uint256 rewardRate;\\n        uint256 lastUpdateTime;\\n        uint256 rewardPerTokenStored;\\n    }\\n    IERC20 public stakingToken;\\n    mapping(address => Reward) public rewardData;\\n    address[] public rewardTokens;\\n\\n    // user -> reward token -> amount\\n    mapping(address => mapping(address => uint256))\\n        public userRewardPerTokenPaid;\\n    mapping(address => mapping(address => uint256)) public rewards;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    address public strategist;\\n    address public feeRecipient;\\n\\n    uint256 public constant MAX_FEE = 500; // 5%\\n    uint256 public depositFee = 0; // 0%\\n    uint256 public withdrawFee = 0; // 0%\\n\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    modifier onlyOwnerOrStrategist() {\\n        require(\\n            msg.sender == owner() || msg.sender == strategist,\\n            \\\"permission denied\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor(address _stakingToken) Ownable(msg.sender) {\\n        stakingToken = IERC20(_stakingToken);\\n        strategist = msg.sender;\\n        feeRecipient = msg.sender;\\n    }\\n\\n    function togglePause() external onlyOwnerOrStrategist {\\n        if (paused()) _unpause();\\n        else _pause();\\n    }\\n\\n    function setStrategist(address _strategist) external onlyOwner {\\n        require(_strategist != address(0), \\\"strategist is 0\\\");\\n        emit StrategistUpdated(strategist, _strategist);\\n        strategist = _strategist;\\n    }\\n\\n    function setFeeRecipient(address _feeRecipient) external onlyOwner {\\n        require(_feeRecipient != address(0), \\\"feeRecipient is 0\\\");\\n        emit FeeRecipientUpdated(feeRecipient, _feeRecipient);\\n        feeRecipient = _feeRecipient;\\n    }\\n\\n    function setDepositFee(uint256 _depositFee) external onlyOwner {\\n        require(_depositFee <= MAX_FEE, \\\"fee too high\\\");\\n        emit DepositFeeUpdated(depositFee, _depositFee);\\n        depositFee = _depositFee;\\n    }\\n\\n    function setWithdrawFee(uint256 _withdrawFee) external onlyOwner {\\n        require(_withdrawFee <= MAX_FEE, \\\"fee too high\\\");\\n        emit WithdrawFeeUpdated(withdrawFee, _withdrawFee);\\n        withdrawFee = _withdrawFee;\\n    }\\n\\n    function addReward(\\n        address _rewardsToken,\\n        address _rewardsDistributor,\\n        uint256 _rewardsDuration\\n    ) public onlyOwner {\\n        require(rewardData[_rewardsToken].rewardsDuration == 0);\\n        rewardTokens.push(_rewardsToken);\\n        rewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\\n        rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable(\\n        address _rewardsToken\\n    ) public view returns (uint256) {\\n        return (block.timestamp < rewardData[_rewardsToken].periodFinish\\n            ? block.timestamp\\n            : rewardData[_rewardsToken].periodFinish);\\n    }\\n\\n    function rewardPerToken(\\n        address _rewardsToken\\n    ) public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardData[_rewardsToken].rewardPerTokenStored;\\n        }\\n        return\\n            rewardData[_rewardsToken].rewardPerTokenStored +\\n            (((lastTimeRewardApplicable(_rewardsToken) -\\n                rewardData[_rewardsToken].lastUpdateTime) *\\n                rewardData[_rewardsToken].rewardRate) * 1e18) /\\n            _totalSupply;\\n    }\\n\\n    function earned(\\n        address account,\\n        address _rewardsToken\\n    ) public view returns (uint256) {\\n        return\\n            ((_balances[account] *\\n                (rewardPerToken(_rewardsToken) -\\n                    userRewardPerTokenPaid[account][_rewardsToken])) / 1e18) +\\n            rewards[account][_rewardsToken];\\n    }\\n\\n    function getRewardForDuration(\\n        address _rewardsToken\\n    ) external view returns (uint256) {\\n        return\\n            rewardData[_rewardsToken].rewardRate *\\n            rewardData[_rewardsToken].rewardsDuration;\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function setRewardsDistributor(\\n        address _rewardsToken,\\n        address _rewardsDistributor\\n    ) external onlyOwnerOrStrategist {\\n        rewardData[_rewardsToken].rewardsDistributor = _rewardsDistributor;\\n    }\\n\\n    function stake(\\n        uint256 amount\\n    ) external nonReentrant whenNotPaused updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n\\n        if (depositFee > 0) {\\n            uint256 _fee = (amount * depositFee) / 10000;\\n            stakingToken.safeTransferFrom(msg.sender, feeRecipient, _fee);\\n            amount = amount - _fee;\\n        }\\n\\n        _totalSupply = _totalSupply + amount;\\n        _balances[msg.sender] = _balances[msg.sender] + amount;\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(\\n        uint256 amount\\n    ) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        _totalSupply = _totalSupply - amount;\\n        _balances[msg.sender] = _balances[msg.sender] - amount;\\n\\n        if (withdrawFee > 0) {\\n            uint256 fee = (amount * withdrawFee) / 10000;\\n            stakingToken.safeTransfer(feeRecipient, fee);\\n            amount = amount - fee;\\n        }\\n        stakingToken.safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        for (uint i; i < rewardTokens.length; i++) {\\n            address _rewardsToken = rewardTokens[i];\\n            uint256 reward = rewards[msg.sender][_rewardsToken];\\n            if (reward > 0) {\\n                rewards[msg.sender][_rewardsToken] = 0;\\n                IERC20(_rewardsToken).safeTransfer(msg.sender, reward);\\n                emit RewardPaid(msg.sender, _rewardsToken, reward);\\n            }\\n        }\\n    }\\n\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function notifyRewardAmount(\\n        address _rewardsToken,\\n        uint256 reward\\n    ) external updateReward(address(0)) {\\n        require(rewardData[_rewardsToken].rewardsDistributor == msg.sender);\\n        // handle the transfer of reward tokens via `transferFrom` to reduce the number\\n        // of transactions required and ensure correctness of the reward amount\\n        IERC20(_rewardsToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            reward\\n        );\\n\\n        if (block.timestamp >= rewardData[_rewardsToken].periodFinish) {\\n            rewardData[_rewardsToken].rewardRate =\\n                reward /\\n                (rewardData[_rewardsToken].rewardsDuration);\\n        } else {\\n            uint256 remaining = rewardData[_rewardsToken].periodFinish -\\n                (block.timestamp);\\n            uint256 leftover = remaining *\\n                (rewardData[_rewardsToken].rewardRate);\\n            rewardData[_rewardsToken].rewardRate =\\n                (reward + leftover) /\\n                (rewardData[_rewardsToken].rewardsDuration);\\n        }\\n\\n        rewardData[_rewardsToken].lastUpdateTime = block.timestamp;\\n        rewardData[_rewardsToken].periodFinish =\\n            block.timestamp +\\n            (rewardData[_rewardsToken].rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(\\n        address tokenAddress,\\n        uint256 tokenAmount\\n    ) external onlyOwner {\\n        require(\\n            tokenAddress != address(stakingToken),\\n            \\\"Cannot withdraw staking token\\\"\\n        );\\n        require(\\n            rewardData[tokenAddress].lastUpdateTime == 0,\\n            \\\"Cannot withdraw reward token\\\"\\n        );\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setRewardsDuration(\\n        address _rewardsToken,\\n        uint256 _rewardsDuration\\n    ) external  {\\n        require(\\n            block.timestamp > rewardData[_rewardsToken].periodFinish,\\n            \\\"Reward period still active\\\"\\n        );\\n        require(rewardData[_rewardsToken].rewardsDistributor == msg.sender);\\n        require(_rewardsDuration > 0, \\\"Reward duration must be non-zero\\\");\\n        rewardData[_rewardsToken].rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(\\n            _rewardsToken,\\n            rewardData[_rewardsToken].rewardsDuration\\n        );\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        for (uint i; i < rewardTokens.length; i++) {\\n            address token = rewardTokens[i];\\n            rewardData[token].rewardPerTokenStored = rewardPerToken(token);\\n            rewardData[token].lastUpdateTime = lastTimeRewardApplicable(token);\\n            if (account != address(0)) {\\n                rewards[account][token] = earned(account, token);\\n                userRewardPerTokenPaid[account][token] = rewardData[token]\\n                    .rewardPerTokenStored;\\n            }\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(\\n        address indexed user,\\n        address indexed rewardsToken,\\n        uint256 reward\\n    );\\n    event RewardsDurationUpdated(address token, uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n    event Invested(address indexed strategist, uint256 amount);\\n    event StrategistUpdated(address oldStrategist, address newStrategist);\\n    event FeeRecipientUpdated(address oldFeeRecipient, address newFeeRecipient);\\n    event DepositFeeUpdated(uint256 oldDepositFee, uint256 newDepositFee);\\n    event WithdrawFeeUpdated(uint256 oldWithdrawFee, uint256 newWithdrawFee);\\n}\\n\"\r\n    },\r\n    \"contracts/TokenToPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\nimport './interfaces/IPriceFeed.sol';\\nimport './utils/constants.sol';\\nimport './interfaces/ITokenPriceFeed.sol';\\n\\n/**\\n * @title TokenToPriceFeed\\n * @dev Manages mapping of token addresses to their respective price feed contracts.\\n */\\ncontract TokenToPriceFeed is Ownable, Constants, ITokenPriceFeed {\\n    /// @dev Mapping of token address to its associated price feed contract.\\n    mapping(address => TokenInfo) public tokens;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Retrieves the contract owner's address.\\n     */\\n    function owner() public view override(Ownable, IOwnable) returns (address) {\\n        return Ownable.owner();\\n    }\\n\\n    /**\\n     * @dev Retrieves the token's current price from the respective price feed.\\n     * @param  _token Address of the token.\\n     */\\n    function tokenPrice(address _token) public view override returns (uint256) {\\n        return IPriceFeed(tokens[_token].priceFeed).price();\\n    }\\n\\n    /**\\n     * @dev Retrieves the price feed contract address for a given token.\\n     * @param  _token Address of the token.\\n     */\\n    function tokenPriceFeed(\\n        address _token\\n    ) public view override returns (address) {\\n        return tokens[_token].priceFeed;\\n    }\\n\\n    /**\\n     * @dev Retrieves the minimal collateral ratio for a given token.\\n     * @param  _token Address of the token.\\n     */\\n    function mcr(address _token) public view override returns (uint256) {\\n        return tokens[_token].mcr;\\n    }\\n\\n    /**\\n     * @dev Retrieves the decimal places of a given token.\\n     * @param  _token Address of the token.\\n     */\\n    function decimals(address _token) public view override returns (uint256) {\\n        return tokens[_token].decimals;\\n    }\\n\\n    /**\\n     * @dev Retrieves the minimal liquidation ratio for a given token.\\n     * @param  _token Address of the token.\\n     */\\n    function mlr(address _token) public view override returns (uint256) {\\n        return tokens[_token].mlr;\\n    }\\n\\n    /**\\n     * @dev Retrieves the borrow rate for a given token.\\n     * @param  _token Address of the token.\\n     */\\n\\n    function borrowRate(address _token) public view override returns (uint256) {\\n        return tokens[_token].borrowRate;\\n    }\\n\\n    /**\\n     * @dev Sets or updates the price feed contract for a specific token.\\n     * @param  _token Address of the token.\\n     * @param  _priceFeed Address of the PriceFeed contract for the token.\\n     * @param  _mcr Minimal Collateral Ratio of the token.\\n     * @param  _mlr Minimal Liquidation Ratio of the token.\\n     * @param  _borrowRate Borrow rate of the token.\\n     */\\n    function setTokenPriceFeed(\\n        address _token,\\n        address _priceFeed,\\n        uint256 _mcr,\\n        uint256 _mlr,\\n        uint256 _borrowRate,\\n        uint256 /* _decimals */\\n    ) public override onlyOwner {\\n        require(_mcr >= 100, 'MCR < 100');\\n        require(_mlr >= 100 && _mlr <= _mcr, 'MLR < 100 or MLR > MCR');\\n        require(_borrowRate < 10 ether, 'borrowRate >= 10%');\\n        IERC20Metadata erc20 = IERC20Metadata(_token);\\n        uint256 _decimals = erc20.decimals();\\n        require(_decimals > 0 || _decimals <= 18, 'not-valid-decimals');\\n\\n        TokenInfo memory token = tokens[_token];\\n        token.priceFeed = _priceFeed;\\n        token.mcr = (DECIMAL_PRECISION * _mcr) / 100;\\n        token.mlr = (DECIMAL_PRECISION * _mlr) / 100;\\n        token.borrowRate = _borrowRate;\\n        token.decimals = _decimals;\\n\\n        emit NewTokenPriceFeed(\\n            _token,\\n            _priceFeed,\\n            erc20.name(),\\n            erc20.symbol(),\\n            token.mcr,\\n            token.mlr,\\n            token.borrowRate,\\n            _decimals\\n        );\\n        tokens[_token] = token;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership after revoking other roles from other addresses.\\n     * @param _newOwner Address of the new owner.\\n     */\\n    function transferOwnership(\\n        address _newOwner\\n    ) public override(Ownable, IOwnable) {\\n        Ownable.transferOwnership(_newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title Constants\\n * @dev This contract defines various constants used within the system.\\n */\\ncontract Constants {\\n    // Precision used for decimal calculations\\n    uint256 public constant DECIMAL_PRECISION = 1e18;\\n\\n    // Reserve required for liquidation purposes\\n    uint256 public constant LIQUIDATION_RESERVE = 1e18;\\n\\n    // Maximum value for uint256\\n    uint256 public constant MAX_INT = 2 ** 256 - 1;\\n\\n    // Constants for percentage calculations\\n    uint256 public constant PERCENT = (DECIMAL_PRECISION * 1) / 100; // Represents 1%\\n    uint256 public constant PERCENT10 = PERCENT * 10; // Represents 10%\\n    uint256 public constant PERCENT_05 = PERCENT / 2; // Represents 0.5%\\n\\n    // Maximum borrowing and redemption rates\\n    uint256 public constant MAX_BORROWING_RATE = (DECIMAL_PRECISION * 5) / 100; // Represents 5%\\n    uint256 public constant MAX_REDEMPTION_RATE =\\n        (DECIMAL_PRECISION * 10) / 100; // Represents 10%\\n}\\n\"\r\n    },\r\n    \"contracts/utils/linked-address-list.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.21;\\n\\n/**\\n * @title LinkedAddressList\\n * @dev Library implementing a linked list structure to store and operate sorted Troves.\\n */\\nlibrary LinkedAddressList {\\n    struct EntryLink {\\n        address prev;\\n        address next;\\n    }\\n\\n    struct List {\\n        address _last;\\n        address _first;\\n        uint256 _size;\\n        mapping(address => EntryLink) _values;\\n    }\\n\\n    /**\\n     * @dev Adds an element to the linked list.\\n     * @param _list The storage pointer to the linked list.\\n     * @param _element The element to be added.\\n     * @param _reference The reference element to determine the position for addition.\\n     * @param _before A boolean indicating whether to add the element before the reference.\\n     * @return A boolean indicating the success of the addition.\\n     */\\n    function add(\\n        List storage _list,\\n        address _element,\\n        address _reference,\\n        bool _before\\n    ) internal returns (bool) {\\n        require(\\n            _reference == address(0x0) ||\\n                _list._values[_reference].next != address(0x0),\\n            '79d3d _ref neither valid nor 0x'\\n        );\\n\\n        // Element must not exist to be added\\n        EntryLink storage element_values = _list._values[_element];\\n        if (element_values.prev == address(0x0)) {\\n            if (_list._last == address(0x0)) {\\n                // If the list is empty, set the element as both first and last\\n                element_values.prev = _element;\\n                element_values.next = _element;\\n                _list._first = _element;\\n                _list._last = _element;\\n            } else {\\n                if (\\n                    _before &&\\n                    (_reference == address(0x0) || _reference == _list._first)\\n                ) {\\n                    // Adding the element as the first element\\n                    address first = _list._first;\\n                    _list._values[first].prev = _element;\\n                    element_values.prev = _element;\\n                    element_values.next = first;\\n                    _list._first = _element;\\n                } else if (\\n                    !_before &&\\n                    (_reference == address(0x0) || _reference == _list._last)\\n                ) {\\n                    // Adding the element as the last element\\n                    address last = _list._last;\\n                    _list._values[last].next = _element;\\n                    element_values.prev = last;\\n                    element_values.next = _element;\\n                    _list._last = _element;\\n                } else {\\n                    // Inserting the element between two elements\\n                    EntryLink memory ref = _list._values[_reference];\\n                    if (_before) {\\n                        element_values.prev = ref.prev;\\n                        element_values.next = _reference;\\n                        _list._values[_reference].prev = _element;\\n                        _list._values[ref.prev].next = _element;\\n                    } else {\\n                        element_values.prev = _reference;\\n                        element_values.next = ref.next;\\n                        _list._values[_reference].next = _element;\\n                        _list._values[ref.next].prev = _element;\\n                    }\\n                }\\n            }\\n            _list._size = _list._size + 1;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Removes an element from the linked list.\\n     * @param _list The storage pointer to the linked list.\\n     * @param _element The element to be removed.\\n     * @return A boolean indicating the success of the removal.\\n     */\\n    function remove(\\n        List storage _list,\\n        address _element\\n    ) internal returns (bool) {\\n        EntryLink memory element_values = _list._values[_element];\\n        if (element_values.next != address(0x0)) {\\n            if (_element == _list._last && _element == _list._first) {\\n                // Removing the last and only element in the list\\n                delete _list._last;\\n                delete _list._first;\\n            } else if (_element == _list._first) {\\n                // Removing the first element\\n                address next = element_values.next;\\n                _list._values[next].prev = next;\\n                _list._first = next;\\n            } else if (_element == _list._last) {\\n                // Removing the last element\\n                address new_list_last = element_values.prev;\\n                _list._last = new_list_last;\\n                _list._values[new_list_last].next = new_list_last;\\n            } else {\\n                // Removing an element in between two other elements\\n                address next = element_values.next;\\n                address prev = element_values.prev;\\n                _list._values[next].prev = prev;\\n                _list._values[prev].next = next;\\n            }\\n            // Delete the element itself\\n            delete _list._values[_element];\\n            _list._size = _list._size - 1;\\n            return true;\\n        }\\n        return false;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/utils/PoolAddress.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH =\\n        0x5fd83e37b194e20b4858ffd8707ab464489099cc00c7985c0a048fa38836bbaa;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(\\n        address factory,\\n        PoolKey memory key\\n    ) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex'ff',\\n                            factory,\\n                            keccak256(\\n                                abi.encode(key.token0, key.token1, key.fee)\\n                            ),\\n                            POOL_INIT_CODE_HASH\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Vault.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\nimport './interfaces/IPriceFeed.sol';\\nimport './interfaces/IVaultFactory.sol';\\nimport './interfaces/IVaultFactoryConfig.sol';\\nimport './interfaces/ILiquidationRouter.sol';\\n\\nimport './utils/constants.sol';\\nimport './interfaces/ITokenPriceFeed.sol';\\nimport './interfaces/IVaultExtraSettings.sol';\\nimport './utils/linked-address-list.sol';\\n\\n/**\\n * @title Vault\\n * @dev Manages creation, collateralization, borrowing, and liquidation of Vaults.\\n */\\ncontract Vault is Context, Constants {\\n    string public constant VERSION = '1.2.0';\\n\\n    // Events emitted by the contract\\n    event CollateralAdded(\\n        address indexed collateral,\\n        uint256 amount,\\n        uint256 newTotalAmount\\n    );\\n    event CollateralRemoved(\\n        address indexed collateral,\\n        uint256 amount,\\n        uint256 newTotalAmount\\n    );\\n    event CollateralRedeemed(\\n        address indexed collateral,\\n        uint256 amount,\\n        uint256 newTotalAmount,\\n        uint256 stableAmountUsed,\\n        uint256 feePaid\\n    );\\n\\n    event DebtAdded(uint256 amount, uint256 newTotalDebt);\\n    event DebtRepaid(uint256 amount, uint256 newTotalDebt);\\n\\n    modifier onlyFactory() {\\n        require(_msgSender() == factory, 'only-factory');\\n        _;\\n    }\\n\\n    using SafeERC20 for IERC20;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    address public immutable stable;\\n    address public immutable factory;\\n    address public vaultOwner;\\n\\n    string public name;\\n\\n    EnumerableSet.AddressSet private collateralSet;\\n    EnumerableSet.AddressSet private operators;\\n\\n    IVaultExtraSettings public vaultExtraSettings;\\n    mapping(address => uint256) public collateral;\\n\\n    uint256 public debt;\\n\\n    modifier onlyVaultOwner() {\\n        require(_msgSender() == vaultOwner, 'only-vault-owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the Vault contract.\\n     * @param _factory Address of the VaultFactory contract.\\n     * @param _vaultOwner Address of the initial owner of the Vault.\\n     * @param _name Name of the Vault.\\n     */\\n    constructor(\\n        address _factory,\\n        address _vaultOwner,\\n        string memory _name,\\n        IVaultExtraSettings _vaultExtraSettings\\n    ) {\\n        require(_vaultOwner != address(0x0), 'vault-owner-is-0');\\n        require(bytes(_name).length > 0, 'name-is-empty');\\n        require(_factory != address(0x0), 'factory-is-0');\\n        require(\\n            address(_vaultExtraSettings) != address(0x0),\\n            'vault-extra-settings-is-0'\\n        );\\n\\n        factory = _factory;\\n        vaultOwner = _vaultOwner;\\n        stable = IVaultFactory(factory).stable();\\n        name = _name;\\n        vaultExtraSettings = _vaultExtraSettings;\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the Vault to a new owner.\\n     * @param _newOwner Address of the new owner.\\n     */\\n    function transferVaultOwnership(address _newOwner) external onlyFactory {\\n        vaultOwner = _newOwner;\\n    }\\n\\n    /**\\n     * @dev Sets a new name for the Vault.\\n     * @param _name New name for the Vault.\\n     */\\n    function setName(string memory _name) external onlyVaultOwner {\\n        require(bytes(_name).length > 0, 'name-is-empty');\\n        name = _name;\\n    }\\n\\n    /**\\n     * @dev Adds an operator to the Vault, allowing them certain permissions.\\n     * @param _operator Address of the operator to be added.\\n     */\\n    function addOperator(address _operator) external onlyVaultOwner {\\n        require(_operator != address(0x0), 'operator-is-0');\\n        operators.add(_operator);\\n    }\\n\\n    /**\\n     * @dev Removes an operator from the Vault, revoking their permissions.\\n     * @param _operator Address of the operator to be removed.\\n     */\\n    function removeOperator(address _operator) external onlyVaultOwner {\\n        require(_operator != address(0x0), 'operator-is-0');\\n        operators.remove(_operator);\\n    }\\n\\n    /**\\n     * @dev Checks if an address is an operator for this Vault.\\n     * @param _operator Address to check.\\n     * @return Boolean indicating whether the address is an operator.\\n     */\\n    function isOperator(address _operator) external view returns (bool) {\\n        return operators.contains(_operator);\\n    }\\n\\n    /**\\n     * @dev Returns the number of operators in the Vault.\\n     * @return Length of the operators set.\\n     */\\n    function operatorsLength() external view returns (uint256) {\\n        return operators.length();\\n    }\\n\\n    /**\\n     * @dev Returns the operator at a given index in the operators set.\\n     * @param _index Index of the operator.\\n     * @return Address of the operator at the given index.\\n     */\\n    function operatorAt(uint256 _index) external view returns (address) {\\n        return operators.at(_index);\\n    }\\n\\n    /**\\n     * @dev Checks if a collateral token is added to the Vault.\\n     * @param _collateral Address of the collateral token to check.\\n     * @return Boolean indicating whether the collateral token is added.\\n     */\\n    function containsCollateral(\\n        address _collateral\\n    ) external view returns (bool) {\\n        return collateralSet.contains(_collateral);\\n    }\\n\\n    /**\\n     * @dev Returns the number of collateral tokens added to the Vault.\\n     * @return Length of the collateral set.\\n     */\\n    function collateralsLength() external view returns (uint256) {\\n        return collateralSet.length();\\n    }\\n\\n    /**\\n     * @dev Returns the collateral token address at a given index in the collateral set.\\n     * @param _index Index of the collateral token.\\n     * @return Address of the collateral token at the given index.\\n     */\\n    function collateralAt(uint256 _index) external view returns (address) {\\n        return collateralSet.at(_index);\\n    }\\n\\n    /**\\n     * @dev Returns an array containing all collateral token addresses in the Vault.\\n     * @return Array of collateral token addresses.\\n     */\\n    function collaterals() external view returns (address[] memory) {\\n        address[] memory _collaterals = new address[](collateralSet.length());\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            _collaterals[i] = collateralSet.at(i);\\n        }\\n        return _collaterals;\\n    }\\n\\n    /**\\n     * @dev Adds a new collateral token to the Vault and updates the collateral amount.\\n     * @param _collateral Address of the collateral token to add.\\n     * @param _amount Amount of the collateral token to add.\\n     */\\n    function addCollateral(\\n        address _collateral,\\n        uint256 _amount\\n    ) external onlyFactory {\\n        require(_collateral != address(0x0), 'collateral-is-0');\\n        require(_amount > 0, 'amount-is-0');\\n\\n        collateralSet.add(_collateral);\\n        uint256 _maxTokens = IVaultFactory(factory).MAX_TOKENS_PER_VAULT();\\n        require(collateralSet.length() <= _maxTokens, 'max-tokens-reached');\\n\\n        collateral[_collateral] += _amount;\\n\\n        emit CollateralAdded(_collateral, _amount, collateral[_collateral]);\\n    }\\n\\n    /**\\n     * @dev Removes a collateral token from the Vault and transfers it back to the sender.\\n     * @param _collateral Address of the collateral token to remove.\\n     * @param _amount Amount of the collateral token to remove.\\n     * @param _to Address to receive the removed collateral.\\n     */\\n    function removeCollateral(\\n        address _collateral,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyFactory {\\n        require(_collateral != address(0x0), 'collateral-is-0');\\n        require(_amount > 0, 'amount-is-0');\\n\\n        collateral[_collateral] -= _amount;\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n\\n        uint256 _healthFactor = healthFactor(false);\\n        require(_healthFactor >= DECIMAL_PRECISION, 'health-factor-below-1');\\n\\n        IERC20(_collateral).safeTransfer(_to, _amount);\\n\\n        emit CollateralRemoved(_collateral, _amount, collateral[_collateral]);\\n    }\\n\\n    /**\\n     * @dev Adds bad debt to the Vault.\\n     * @param _amount Amount of bad debt to add.\\n     */\\n    function addBadDebt(uint256 _amount) external onlyFactory {\\n        require(_amount > 0, 'amount-is-0');\\n\\n        debt += _amount;\\n        emit DebtAdded(_amount, debt);\\n    }\\n\\n    /**\\n     * @dev Calculates the maximum borrowable amount and the current borrowable amount.\\n     * @return _maxBorrowable Maximum borrowable amount.\\n     * @return _borrowable Current borrowable amount.\\n     */\\n    function borrowable()\\n        public\\n        view\\n        returns (uint256 _maxBorrowable, uint256 _borrowable)\\n    {\\n        (_maxBorrowable, _borrowable) = borrowableWithDiff(\\n            address(0x0),\\n            0,\\n            false,\\n            false\\n        );\\n    }\\n\\n    /**\\n     * @dev Borrows a specified amount from the Vault.\\n     * @param _amount Amount to borrow.\\n     */\\n    function borrow(uint256 _amount) external onlyFactory {\\n        require(_amount > 0, 'amount-is-0');\\n\\n        (uint256 _maxBorrowable, uint256 _borrowable) = borrowable();\\n        require(_amount <= _borrowable, 'not-enough-borrowable');\\n\\n        debt += _amount;\\n        require(debt <= _maxBorrowable, 'max-borrowable-reached');\\n\\n        emit DebtAdded(_amount, debt);\\n    }\\n\\n    /**\\n     * @dev Repays a specified amount to the Vault's debt.\\n     * @param _amount Amount to repay.\\n     */\\n    function repay(uint256 _amount) external onlyFactory {\\n        require(_amount <= debt, 'amount-exceeds-debt');\\n\\n        debt -= _amount;\\n        emit DebtRepaid(_amount, debt);\\n    }\\n\\n    /**\\n     * @dev Calculates the stable amount needed and the redemption fee for redeeming collateral.\\n     * @param _collateral Address of the collateral token.\\n     * @param _collateralAmount Amount of collateral to redeem.\\n     * @return _stableAmountNeeded Stablecoin amount required to redeem collateral.\\n     * @return _redemptionFee Fee charged for the redemption.\\n     */\\n    function calcRedeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    )\\n        public\\n        view\\n        returns (uint256 _stableAmountNeeded, uint256 _redemptionFee)\\n    {\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(\\n            IVaultFactory(factory).priceFeed()\\n        );\\n        uint256 _price = _priceFeed.tokenPrice(_collateral);\\n\\n        uint256 _normalizedCollateralAmount = _collateralAmount *\\n            (10 ** (18 - _priceFeed.decimals(_collateral)));\\n        _stableAmountNeeded =\\n            (_normalizedCollateralAmount * _price) /\\n            DECIMAL_PRECISION;\\n\\n        (, , uint256 _redemptionKickbackRate) = vaultExtraSettings\\n            .getExtraSettings();\\n\\n        if (_redemptionKickbackRate > 0) {\\n            uint256 _kickbackAmount = (_stableAmountNeeded *\\n                _redemptionKickbackRate) / DECIMAL_PRECISION;\\n            _stableAmountNeeded += _kickbackAmount;\\n        }\\n        uint256 _redemptionRate = IVaultFactoryConfig(factory).redemptionRate();\\n        _redemptionFee =\\n            (_stableAmountNeeded * _redemptionRate) /\\n            DECIMAL_PRECISION;\\n    }\\n\\n    /**\\n     * @dev Redeems a specified amount of collateral, repays debt, and transfers collateral back to the redeemer.\\n     * @param _collateral Address of the collateral token to redeem.\\n     * @param _collateralAmount Amount of collateral to redeem.\\n     * @return _debtRepaid Amount of debt repaid.\\n     * @return _feeCollected Fee collected for the redemption.\\n     */\\n    function redeem(\\n        address _collateral,\\n        uint256 _collateralAmount\\n    )\\n        external\\n        onlyFactory\\n        returns (uint256 _debtRepaid, uint256 _feeCollected)\\n    {\\n        require(_collateral != address(0x0), 'collateral-is-0');\\n        require(_collateralAmount > 0, 'amount-is-0');\\n        require(collateralSet.contains(_collateral), 'collateral-not-added');\\n        require(\\n            collateral[_collateral] >= _collateralAmount,\\n            'not-enough-collateral'\\n        );\\n\\n        uint256 _currentHealthFactor = healthFactor(true);\\n        uint256 _redemptionHealthFactorLimit = IVaultFactoryConfig(factory)\\n            .redemptionHealthFactorLimit();\\n        require(\\n            _currentHealthFactor < _redemptionHealthFactorLimit,\\n            'health-factor-above-redemption-limit'\\n        );\\n\\n        (uint256 _debtTreshold, uint256 _maxRedeemablePercentage, ) = vaultExtraSettings\\n            .getExtraSettings();\\n\\n        \\n        collateral[_collateral] -= _collateralAmount;\\n        (_debtRepaid, _feeCollected) = calcRedeem(\\n            _collateral,\\n            _collateralAmount\\n        );\\n\\n        \\n        if (debt > _debtTreshold) {\\n            uint256 _redeemableDebt = (debt * _maxRedeemablePercentage) /\\n                DECIMAL_PRECISION;\\n            require(_debtRepaid <= _redeemableDebt, 'redeemable-debt-exceeded');\\n\\n        }\\n\\n        debt -= _debtRepaid;\\n\\n        if (collateral[_collateral] == 0) {\\n            collateralSet.remove(_collateral);\\n        }\\n\\n        IERC20(_collateral).safeTransfer(_msgSender(), _collateralAmount);\\n\\n        emit CollateralRedeemed(\\n            _collateral,\\n            _collateralAmount,\\n            collateral[_collateral],\\n            _debtRepaid,\\n            _feeCollected\\n        );\\n        emit DebtRepaid(_debtRepaid, debt);\\n    }\\n\\n    /**\\n     * @dev Computes the health factor of the Vault.\\n     * @param _useMlr Flag to use Minimum Loan Ratio (MLR) in health factor computation.\\n     * @return _healthFactor Current health factor.\\n     */\\n    function healthFactor(\\n        bool _useMlr\\n    ) public view returns (uint256 _healthFactor) {\\n        if (debt == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        (uint256 _maxBorrowable, ) = borrowableWithDiff(\\n            address(0x0),\\n            0,\\n            false,\\n            _useMlr\\n        );\\n\\n        _healthFactor = (_maxBorrowable * DECIMAL_PRECISION) / debt;\\n    }\\n\\n    /**\\n     * @dev Computes a new health factor given a new debt value.\\n     * @param _newDebt New debt amount to calculate the health factor.\\n     * @param _useMlr Flag to use Minimum Loan Ratio (MLR) in health factor computation.\\n     * @return _newHealthFactor Calculated new health factor based on the new debt value.\\n     */\\n    function newHealthFactor(\\n        uint256 _newDebt,\\n        bool _useMlr\\n    ) public view returns (uint256 _newHealthFactor) {\\n        if (_newDebt == 0) {\\n            return type(uint256).max;\\n        }\\n\\n        (uint256 _maxBorrowable, ) = borrowableWithDiff(\\n            address(0x0),\\n            0,\\n            false,\\n            _useMlr\\n        );\\n        _newHealthFactor = (_maxBorrowable * DECIMAL_PRECISION) / _newDebt;\\n    }\\n\\n    /**\\n     * @dev Computes the maximum borrowable amount and the current borrowable amount.\\n     * @param _collateral Address of the collateral token (0x0 for total vault borrowable).\\n     * @param _diffAmount Difference in collateral amount when adding/removing collateral.\\n     * @param _isAdd Flag indicating whether the collateral is added or removed.\\n     * @param _useMlr Flag to use Minimum Loan Ratio (MLR) in borrowable computation.\\n     * @return _maxBorrowable Maximum borrowable amount.\\n     * @return _borrowable Current borrowable amount based on the collateral.\\n     */\\n    function borrowableWithDiff(\\n        address _collateral,\\n        uint256 _diffAmount,\\n        bool _isAdd,\\n        bool _useMlr\\n    ) public view returns (uint256 _maxBorrowable, uint256 _borrowable) {\\n        uint256 _newCollateralAmount = collateral[_collateral];\\n\\n        uint256 _borrowableAmount = 0;\\n\\n        if (_collateral != address(0x0)) {\\n            require(\\n                IVaultFactory(factory).isCollateralSupported(_collateral),\\n                'collateral-not-supported'\\n            );\\n            if (_isAdd) {\\n                _newCollateralAmount += _diffAmount;\\n            } else {\\n                _newCollateralAmount -= _diffAmount;\\n            }\\n        }\\n\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(\\n            IVaultFactory(factory).priceFeed()\\n        );\\n\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            address _c = collateralSet.at(i);\\n            uint256 _collateralAmount = _c == _collateral\\n                ? _newCollateralAmount\\n                : collateral[_c];\\n            uint256 _price = _priceFeed.tokenPrice(_c);\\n            uint256 _divisor = _useMlr\\n                ? _priceFeed.mlr(_c)\\n                : _priceFeed.mcr(_c);\\n            uint256 _normalizedCollateralAmount = _collateralAmount *\\n                (10 ** (18 - _priceFeed.decimals(_c)));\\n\\n            uint256 _collateralBorrowable = (_normalizedCollateralAmount *\\n                _price) / DECIMAL_PRECISION;\\n\\n            _borrowableAmount +=\\n                (_collateralBorrowable * DECIMAL_PRECISION) /\\n                _divisor;\\n        }\\n\\n        return (\\n            _borrowableAmount,\\n            (_borrowableAmount > debt) ? _borrowableAmount - debt : 0\\n        );\\n    }\\n\\n    /**\\n     * @dev Liquidates the vault by repaying all debts with seized collateral.\\n     * @return _forgivenDebt Amount of debt forgiven during liquidation.\\n     */\\n    function liquidate() external onlyFactory returns (uint256 _forgivenDebt) {\\n        require(\\n            healthFactor(true) < DECIMAL_PRECISION,\\n            'liquidation-factor-above-1'\\n        );\\n\\n        uint256 _debt = debt;\\n        debt = 0;\\n        ILiquidationRouter router = ILiquidationRouter(\\n            IVaultFactory(factory).liquidationRouter()\\n        );\\n        for (uint256 i = 0; i < collateralSet.length(); i++) {\\n            address _collateral = collateralSet.at(i);\\n            uint256 _collateralAmount = collateral[_collateral];\\n            uint256 _actualCollateralBalance = IERC20(_collateral).balanceOf(\\n                address(this)\\n            );\\n            if (_actualCollateralBalance < _collateralAmount) {\\n                _collateralAmount = _actualCollateralBalance;\\n            }\\n            collateral[_collateral] = 0;\\n\\n            IERC20(_collateral).safeIncreaseAllowance(\\n                IVaultFactory(factory).liquidationRouter(),\\n                _collateralAmount\\n            );\\n\\n            router.addSeizedCollateral(_collateral, _collateralAmount);\\n        }\\n        router.addUnderWaterDebt(address(this), _debt);\\n        router.tryLiquidate();\\n        _forgivenDebt = _debt;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultBorrowRate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport './interfaces/IVault.sol';\\nimport './interfaces/ITokenPriceFeed.sol';\\nimport './interfaces/IVaultFactory.sol';\\n\\n/**\\n * @title VaultBorrowRate\\n * @notice Contract to calculate the borrow rate for a given Vault\\n */\\ncontract VaultBorrowRate {\\n    /**\\n     * @notice Calculates the borrow rate for a specified Vault\\n     * @param _vaultAddress The address of the Vault for which to calculate the borrow rate\\n     * @return uint256 The calculated borrow rate\\n     */\\n    function getBorrowRate(\\n        address _vaultAddress\\n    ) external view returns (uint256) {\\n        IVault _vault = IVault(_vaultAddress);\\n        IVaultFactory _vaultFactory = IVaultFactory(_vault.factory());\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(_vaultFactory.priceFeed());\\n        uint256 _totalWeightedFee;\\n        uint256 _totalCollateralValue;\\n        uint256 _collateralsLength = _vault.collateralsLength();\\n\\n        for (uint256 i; i < _collateralsLength; i++) {\\n            address _collateralAddress = _vault.collateralAt(i);\\n            uint256 _collateralAmount = _vault.collateral(_collateralAddress);\\n            uint256 _price = _priceFeed.tokenPrice(_collateralAddress);\\n            uint256 _borrowRate = _priceFeed.borrowRate(_collateralAddress);\\n\\n            uint256 _normalizedCollateralAmount = _collateralAmount *\\n                (10 ** (18 - _priceFeed.decimals(_collateralAddress)));\\n            uint256 _collateralValue = (_normalizedCollateralAmount * _price) / 1e18;\\n            uint256 _weightedFee = (_collateralValue * _borrowRate) / 1e18;\\n\\n            _totalCollateralValue += _collateralValue;\\n            _totalWeightedFee += _weightedFee;\\n        }\\n\\n        return ((_totalWeightedFee * 1e18) / _totalCollateralValue) / 100;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultDeployer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport './Vault.sol';\\nimport './interfaces/IVaultExtraSettings.sol';\\n/**\\n * @title VaultDeployer\\n * @notice A contract responsible for deploying new instances of the Vault contract.\\n */\\ncontract VaultDeployer {\\n    IVaultExtraSettings public immutable vaultExtraSettings;\\n\\n    constructor(address _vaultExtraSettings) {\\n        require(\\n            _vaultExtraSettings != address(0x0),\\n            'vault-extra-settings-is-zero'\\n        );\\n        vaultExtraSettings = IVaultExtraSettings(_vaultExtraSettings);\\n    }\\n    /**\\n     * @notice Deploys a new Vault contract.\\n     * @param _factory The address of the factory contract managing the vaults.\\n     * @param _vaultOwner The address of the intended owner of the new vault.\\n     * @param _name The name of the new vault.\\n     * @return The address of the newly created Vault contract.\\n     */\\n    function deployVault(\\n        address _factory,\\n        address _vaultOwner,\\n        string memory _name\\n    ) external returns (address) {\\n        // Deploy a new instance of the Vault contract\\n        Vault vault = new Vault(\\n            _factory,\\n            _vaultOwner,\\n            _name,\\n            vaultExtraSettings\\n        );\\n        return address(vault);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultExtraSettings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport './interfaces/IVaultExtraSettings.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title VaultExtraSettings\\n * @notice Contract to manage extra settings for a Vault\\n */\\ncontract VaultExtraSettings is IVaultExtraSettings, Ownable {\\n    uint256 public debtTreshold;\\n    uint256 public maxRedeemablePercentage;\\n    uint256 public redemptionKickback;\\n\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Sets the maximum redeemable percentage for a Vault.\\n     * @param _debtTreshold The debt treshold for the Vault, in order to enable percentage redemption.\\n     * @param _maxRedeemablePercentage The maximum redeemable percentage for the Vault.\\n     */\\n    function setMaxRedeemablePercentage(\\n        uint256 _debtTreshold,\\n        uint256 _maxRedeemablePercentage\\n    ) external override onlyOwner {\\n        debtTreshold = _debtTreshold;\\n        maxRedeemablePercentage = _maxRedeemablePercentage;\\n    }\\n\\n    /**\\n     * @dev Sets the redemption kickback for a Vault.\\n     * @param _redemptionKickback The redemption kickback for the Vault.\\n     */\\n    function setRedemptionKickback(\\n        uint256 _redemptionKickback\\n    ) external override onlyOwner {\\n        redemptionKickback = _redemptionKickback;\\n    }\\n\\n    /**\\n     * @dev Retrieves the extra settings for a Vault.\\n     * @return _debtTreshold debt treshold for enabling max redeemable percentage, _maxRedeemablePercentage maximum redeemable percentage, _redemptionKickback redemption fee kickback to the vault\\n     */\\n    function getExtraSettings()\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 _debtTreshold,\\n            uint256 _maxRedeemablePercentage,\\n            uint256 _redemptionKickback\\n        )\\n    {\\n        return (debtTreshold, maxRedeemablePercentage, redemptionKickback);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/*\\n\\n                                              \\n _____ _____ _____    _____ _____ _____ _____ \\n|_   _|  _  |     |  | __  |  _  |   | |  |  |\\n  | | |     |  |  |  | __ -|     | | | |    -|\\n  |_| |__|__|_____|  |_____|__|__|_|___|__|__|\\n                                              \\n*/\\n\\nimport '@openzeppelin/contracts/interfaces/IERC20Metadata.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\n\\nimport './utils/linked-address-list.sol';\\nimport './Vault.sol';\\nimport './VaultFactoryConfig.sol';\\nimport './VaultFactoryList.sol';\\nimport './interfaces/IWETH.sol';\\nimport './interfaces/ITokenPriceFeed.sol';\\nimport './interfaces/IPriceFeed.sol';\\nimport './interfaces/IMintableTokenOwner.sol';\\nimport './interfaces/IMintableToken.sol';\\nimport './interfaces/IVaultDeployer.sol';\\nimport './interfaces/IVaultBorrowRate.sol';\\n\\n/**\\n * @title VaultFactory\\n * @dev Manages the creation, configuration, and operations of Vaults with collateral and borrowing functionality.\\n */\\ncontract VaultFactory is ReentrancyGuard, VaultFactoryConfig, VaultFactoryList {\\n    // Events emitted by the contract\\n    event NewVault(address indexed vault, string name, address indexed owner);\\n    event VaultOwnerChanged(\\n        address indexed vault,\\n        address indexed oldOwner,\\n        address indexed newOwner\\n    );\\n\\n    // Libraries used by the contract\\n    using LinkedAddressList for LinkedAddressList.List;\\n    using SafeERC20 for IERC20;\\n    using SafeERC20 for IMintableToken;\\n\\n    // Immutable state variables\\n    address public immutable stable;\\n    address public immutable nativeWrapped;\\n    IMintableTokenOwner public immutable mintableTokenOwner;\\n\\n    // State variables\\n    mapping(address => uint256) public collateral;\\n    uint256 public totalDebt;\\n\\n    /**\\n     * @dev Constructor to initialize essential addresses and contracts for VaultFactory.\\n     * @param _mintableTokenOwner Address of the Mintable Token Owner contract.\\n     * @param _nativeWrapped Address of the native wrapped token.\\n     * @param _priceFeed Address of the price feed contract.\\n     * @param _vaultDeployer Address of the Vault Deployer contract.\\n     * @param _liquidationRouter Address of the liquidation router contract.\\n     * @param _borrowRate Address of the borrow rate contract.\\n     */\\n    constructor(\\n        address _mintableTokenOwner,\\n        address _nativeWrapped,\\n        address _priceFeed,\\n        address _vaultDeployer,\\n        address _liquidationRouter,\\n        address _borrowRate\\n    ) VaultFactoryConfig(_vaultDeployer, _liquidationRouter) Ownable(msg.sender) {\\n        require(\\n            _mintableTokenOwner != address(0x0),\\n            'mintable-token-owner-is-0'\\n        );\\n\\n        mintableTokenOwner = IMintableTokenOwner(_mintableTokenOwner);\\n        stable = address(mintableTokenOwner.token());\\n\\n        require(stable != address(0x0), 'stable-is-0');\\n        require(_nativeWrapped != address(0x0), 'nativew-is-0');\\n        require(_priceFeed != address(0x0), 'pricefeed-is-0');\\n        require(_borrowRate != address(0x0), 'borrow-rate-is-0');\\n\\n        borrowRate = _borrowRate;\\n        nativeWrapped = _nativeWrapped;\\n        priceFeed = _priceFeed;\\n    }\\n\\n    /**\\n     * @dev Fallback function to receive Ether and restricts its usage to a designated sender.\\n     */\\n    receive() external payable {\\n        require(msg.sender == nativeWrapped, 'only-native-wrapped');\\n    }\\n\\n    /**\\n     * @dev Modifier: Allows function execution only by the owner of a specific vault.\\n     * @param _vault The address of the vault to check ownership.\\n     */\\n    modifier onlyVaultOwner(address _vault) {\\n        require(Vault(_vault).vaultOwner() == _msgSender(), 'only-vault-owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier: Allows function execution by the owner or an operator of a specific vault.\\n     * @param _vault The address of the vault to check ownership or operator status.\\n     */\\n    modifier onlyVaultOwnerOrOperator(address _vault) {\\n        require(\\n            Vault(_vault).vaultOwner() == _msgSender() ||\\n                Vault(_vault).isOperator(_msgSender()),\\n            'only-vault-owner-or-operator'\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier: Allows function execution only by the liquidation router.\\n     */\\n    modifier onlyLiquidationRouter() {\\n        require(liquidationRouter == _msgSender(), 'only-liquidation-router');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Checks if a given collateral token is supported.\\n     * @param _collateral The address of the collateral token.\\n     * @return A boolean indicating whether the collateral token is supported.\\n     */\\n    function isCollateralSupported(\\n        address _collateral\\n    ) external view returns (bool) {\\n        return _isCollateralSupported(_collateral);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of a vault to a new owner.\\n     * @param _vault The address of the vault to transfer ownership.\\n     * @param _newOwner The address of the new owner to receive the vault ownership.\\n     */\\n    function transferVaultOwnership(\\n        address _vault,\\n        address _newOwner\\n    ) external onlyVaultOwner(_vault) {\\n        address _msgSender = _msgSender();\\n        require(_newOwner != address(0x0), 'new-owner-is-0');\\n        require(containsVault(_vault), 'vault-not-found');\\n\\n        emit VaultOwnerChanged(_vault, _msgSender, _newOwner);\\n        Vault(_vault).transferVaultOwnership(_newOwner);\\n        _transferVault(_msgSender, _newOwner, _vault);\\n    }\\n\\n    /**\\n     * @dev Creates a new vault with a specified name.\\n     * @param _name The name of the new vault.\\n     * @return The address of the newly created vault.\\n     */\\n    function createVault(string memory _name) public returns (address) {\\n        address _msgSender = _msgSender();\\n        address _vaultAddress = IVaultDeployer(vaultDeployer).deployVault(\\n            address(this),\\n            _msgSender,\\n            _name\\n        );\\n        _addVault(_msgSender, _vaultAddress);\\n        emit NewVault(_vaultAddress, _name, _msgSender);\\n\\n        return _vaultAddress;\\n    }\\n\\n    /**\\n     * @dev Checks if a specific collateral token is supported for the vault.\\n     * @param _collateral The address of the collateral token to check.\\n     * @return A boolean indicating whether the collateral token is supported.\\n     */\\n    function _isCollateralSupported(\\n        address _collateral\\n    ) internal view returns (bool) {\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(priceFeed);\\n        return (_priceFeed.tokenPriceFeed(_collateral) != address(0x0));\\n    }\\n\\n    /**\\n     * @dev Adds native-wrapped collateral to a specific vault.\\n     * @param _vault The address of the vault to add collateral.\\n     */\\n    function addCollateralNative(address _vault) external payable {\\n        require(containsVault(_vault), 'vault-not-found');\\n        require(\\n            _isCollateralSupported(nativeWrapped),\\n            'collateral-not-supported'\\n        );\\n        uint256 _amount = msg.value;\\n\\n        collateral[nativeWrapped] += _amount;\\n\\n        require(\\n            collateral[nativeWrapped] <= collateralCap[nativeWrapped],\\n            'collateral-cap-reached'\\n        );\\n\\n        IWETH(nativeWrapped).deposit{value: _amount}();\\n\\n\\n        IERC20(nativeWrapped).safeTransfer(_vault, _amount);\\n\\n        Vault(_vault).addCollateral(nativeWrapped, _amount);\\n\\n    }\\n\\n    /**\\n     * @dev Removes native-wrapped collateral from a specific vault.\\n     * @param _vault The address of the vault to remove collateral.\\n     * @param _amount The amount of collateral to be removed.\\n     * @param _to The address where the removed collateral is transferred.\\n     */\\n    function removeCollateralNative(\\n        address _vault,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), 'vault-not-found');\\n        require(\\n            _isCollateralSupported(nativeWrapped),\\n            'collateral-not-supported'\\n        );\\n\\n        Vault(_vault).removeCollateral(nativeWrapped, _amount, address(this));\\n\\n        collateral[nativeWrapped] -= _amount;\\n\\n        IWETH(nativeWrapped).withdraw(_amount);\\n        (bool success, ) = payable(_to).call{value: _amount}(\\\"\\\");\\n        require(success, 'transfer-failed');\\n    }\\n\\n    /**\\n     * @dev Adds a specific collateral to a vault.\\n     * @param _vault The address of the vault to add collateral.\\n     * @param _collateral The address of the collateral token to add.\\n     * @param _amount The amount of collateral to add.\\n     */\\n    function addCollateral(\\n        address _vault,\\n        address _collateral,\\n        uint256 _amount\\n    ) external {\\n        require(containsVault(_vault), 'vault-not-found');\\n        require(\\n            _isCollateralSupported(_collateral),\\n            'collateral-not-supported'\\n        );\\n\\n        collateral[_collateral] += _amount;\\n\\n        require(\\n            collateral[_collateral] <= collateralCap[_collateral],\\n            'collateral-cap-reached'\\n        );\\n\\n        IERC20(_collateral).safeTransferFrom(_msgSender(), _vault, _amount);\\n        Vault(_vault).addCollateral(_collateral, _amount);\\n    }\\n\\n    /**\\n     * @dev Removes a specific collateral from a vault.\\n     * @param _vault The address of the vault to remove collateral.\\n     * @param _collateral The address of the collateral token to remove.\\n     * @param _amount The amount of collateral to remove.\\n     * @param _to The address where the removed collateral is transferred.\\n     */\\n    function removeCollateral(\\n        address _vault,\\n        address _collateral,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), 'vault-not-found');\\n        require(\\n            _isCollateralSupported(_collateral),\\n            'collateral-not-supported'\\n        );\\n\\n        collateral[_collateral] -= _amount;\\n        Vault(_vault).removeCollateral(_collateral, _amount, _to);\\n    }\\n\\n    /**\\n     * @dev Borrows funds from a vault by its owner or an operator.\\n     * @param _vault The address of the vault from which funds are borrowed.\\n     * @param _amount The amount of funds to borrow.\\n     * @param _to The address where borrowed funds are sent.\\n     */\\n    function borrow(\\n        address _vault,\\n        uint256 _amount,\\n        address _to\\n    ) external onlyVaultOwnerOrOperator(_vault) {\\n        require(containsVault(_vault), 'vault-not-found');\\n        require(_to != address(0x0), 'to-is-0');\\n\\n        totalDebt += _amount;\\n        _updateDebtWindow(_amount);\\n        Vault(_vault).borrow(_amount);\\n        uint256 _borrowRate = IVaultBorrowRate(borrowRate).getBorrowRate(\\n            _vault\\n        );\\n        uint256 _feeAmount = (_amount * _borrowRate) / DECIMAL_PRECISION;\\n\\n        mintableTokenOwner.mint(_to, _amount - _feeAmount);\\n        mintableTokenOwner.mint(borrowFeeRecipient, _feeAmount);\\n    }\\n\\n    /**\\n     * @dev Distributes bad debt to a specific vault.\\n     * @param _vault The address of the vault to distribute bad debt.\\n     * @param _amount The amount of bad debt to be distributed.\\n     */\\n    function distributeBadDebt(\\n        address _vault,\\n        uint256 _amount\\n    ) external nonReentrant onlyLiquidationRouter {\\n        require(containsVault(_vault), 'vault-not-found');\\n        totalDebt += _amount;\\n        Vault(_vault).addBadDebt(_amount);\\n    }\\n\\n    /**\\n     * @dev Closes a vault if it meets specific conditions.\\n     * @param _vault The address of the vault to close.\\n     */\\n    function closeVault(address _vault) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), 'vault-not-found');\\n        require(Vault(_vault).debt() == 0, 'debt-not-0');\\n        require(Vault(_vault).collateralsLength() == 0, 'collateral-not-0');\\n\\n        _removeVault(_msgSender(), _vault);\\n    }\\n\\n    /**\\n     * @dev Repays borrowed funds for a specific vault.\\n     * @param _vault The address of the vault for which funds are repaid.\\n     * @param _amount The amount of funds to repay.\\n     */\\n    function repay(address _vault, uint256 _amount) external onlyVaultOwner(_vault) {\\n        require(containsVault(_vault), 'vault-not-found');\\n        totalDebt -= _amount;\\n        Vault(_vault).repay(_amount);\\n\\n        IMintableToken(stable).safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            _amount\\n        );\\n        IMintableToken(stable).burn(_amount);\\n    }\\n\\n    /**\\n     * @dev Redeems collateral from a vault after meeting specific conditions.\\n     * @param _vault The address of the vault from which collateral is redeemed.\\n     * @param _collateral The address of the collateral token to redeem.\\n     * @param _collateralAmount The amount of collateral to redeem.\\n     * @param _to The address where the redeemed collateral is transferred.\\n     */\\n    function redeem(\\n        address _vault,\\n        address _collateral,\\n        uint256 _collateralAmount,\\n        address _to\\n    ) external nonReentrant {\\n        require(publicRedemptions || isAddressRedemptionAllowed[_msgSender()], 'redemption-not-allowed');\\n        require(containsVault(_vault), 'vault-not-found');\\n        require(_to != address(0x0), 'to-is-0');\\n\\n        require(isReedemable(_vault, _collateral), 'not-redeemable');\\n\\n        (uint256 _debtRepaid, uint256 _feeCollected) = Vault(_vault).redeem(\\n            _collateral,\\n            _collateralAmount\\n        );\\n\\n        totalDebt -= _debtRepaid;\\n        collateral[_collateral] -= _collateralAmount;\\n\\n        IMintableToken(stable).safeTransferFrom(\\n            _msgSender(),\\n            address(this),\\n            _debtRepaid + _feeCollected\\n        );\\n        IMintableToken(stable).burn(_debtRepaid);\\n        IMintableToken(stable).transfer(redemptionFeeRecipient, _feeCollected);\\n\\n        IERC20(_collateral).safeTransfer(_to, _collateralAmount);\\n    }\\n\\n    /**\\n     * @dev Liquidates a specific vault if it is eligible for liquidation.\\n     * @param _vault The address of the vault to be liquidated.\\n     */\\n    function liquidate(address _vault) external nonReentrant {\\n        require(containsVault(_vault), 'vault-not-found');\\n\\n        address _vaultOwner = Vault(_vault).vaultOwner();\\n        uint256 _forgivenDebt = Vault(_vault).liquidate();\\n\\n        totalDebt -= _forgivenDebt;\\n\\n        _removeVault(_vaultOwner, _vault);\\n    }\\n\\n    /**\\n     * @dev Checks if a vault is eligible for liquidation.\\n     * @param _vault The address of the vault to check for liquidation eligibility.\\n     * @return A boolean indicating whether the vault is liquidatable.\\n     */\\n    function isLiquidatable(address _vault) external view returns (bool) {\\n        require(containsVault(_vault), 'vault-not-found');\\n        return Vault(_vault).healthFactor(true) < DECIMAL_PRECISION;\\n    }\\n\\n    /**\\n     * @dev Checks if a specific collateral can be redeemed from a vault based on conditions.\\n     * @param _vault The address of the vault to check for collateral redemption.\\n     * @param _collateral The address of the collateral token to check for redemption.\\n     * @notice Collateral with higher MCR can be redeemed first\\n     * @return A boolean indicating whether the collateral is redeemable.\\n     */\\n    function isReedemable(\\n        address _vault,\\n        address _collateral\\n    ) public view returns (bool) {\\n        require(\\n            _isCollateralSupported(_collateral),\\n            'collateral-not-supported'\\n        );\\n        if (!Vault(_vault).containsCollateral(_collateral)) {\\n            return false;\\n        }\\n        uint256 _healthFactor = Vault(_vault).healthFactor(false);\\n        if (_healthFactor >= redemptionHealthFactorLimit) {\\n            return false;\\n        }\\n\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(priceFeed);\\n        uint256 _collateralMcr = _priceFeed.mcr(_collateral);\\n\\n        address[] memory _collaterals = Vault(_vault).collaterals();\\n        uint256 _length = _collaterals.length;\\n\\n        for (uint256 i; i < _length; i++) {\\n            if (_collaterals[i] != _collateral) {\\n                uint256 _mcr = _priceFeed.mcr(_collaterals[i]);\\n                if (_mcr > _collateralMcr) {\\n                    return false;\\n                }\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Updates the debt window with the newly incurred debt.\\n     * @param _newDebt The amount of new debt to update in the debt window.\\n     */\\n    function _updateDebtWindow(uint256 _newDebt) internal {\\n        require(totalDebt <= debtCeiling, 'debt-ceiling-reached');\\n\\n        if (block.timestamp > lastDebtWindow + debtWindowSize) {\\n            debtWindowAmount = _newDebt;\\n            lastDebtWindow = block.timestamp;\\n        } else {\\n            debtWindowAmount += _newDebt;\\n        }\\n        require(\\n            debtWindowAmount <= maxDebtPerWindow,\\n            'debt-window-amount-reached'\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultFactoryConfig.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\nimport './utils/constants.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\n\\nabstract contract VaultFactoryConfig is Constants, Ownable {\\n    event PriceFeedUpdated(address indexed priceFeed);\\n    event MaxTokensPerVaultUpdated(\\n        uint256 oldMaxTokensPerVault,\\n        uint256 newMaxTokensPerVault\\n    );\\n    event RedemptionRateUpdated(\\n        uint256 oldRedemptionRate,\\n        uint256 newRedemptionRate\\n    );\\n    event BorrowRateUpdated(address oldBorrowRate, address newBorrowRate);\\n    event RedemptionHealthFactorLimitUpdated(\\n        uint256 oldRedemptionHealthFactorLimit,\\n        uint256 newRedemptionHealthFactorLimit\\n    );\\n    event DebtCeilingUpdated(uint256 oldDebtCeiling, uint256 newDebtCeiling);\\n    event MaxDebtPerWindowUpdated(\\n        uint256 oldMaxDebtPerWindow,\\n        uint256 newMaxDebtPerWindow\\n    );\\n    event DebtWindowSizeUpdated(\\n        uint256 oldDebtWindowSize,\\n        uint256 newDebtWindowSize\\n    );\\n    event CollateralCapacityUpdated(\\n        address indexed collateral,\\n        uint256 oldCapacity,\\n        uint256 newCapacity\\n    );\\n    event liquidationRouterUpdated(address indexed liquidationRouter);\\n\\n    event publicRedemptionsUpdated(bool publicRedemptions);\\n\\n    // Various configuration parameters\\n    address public priceFeed;\\n    address public borrowRate;\\n\\n    uint256 public MAX_TOKENS_PER_VAULT = 5;\\n    uint256 public redemptionRate = PERCENT_05; // 0.5%\\n\\n    uint256 public redemptionHealthFactorLimit = 1.5 ether; // 1.5 HF\\n\\n    address public borrowFeeRecipient;\\n    address public redemptionFeeRecipient;\\n\\n    mapping(address => uint256) public collateralCap;\\n\\n    uint256 public debtCeiling = type(uint256).max; // max stablecoin debt issued by the protocol\\n\\n    uint256 public maxDebtPerWindow = 200_000 ether; // 200K\\n    uint256 public debtWindowSize = 1 hours;\\n    uint256 public lastDebtWindow;\\n    uint256 public debtWindowAmount;\\n\\n    address public vaultDeployer;\\n    address public liquidationRouter;\\n\\n    bool public publicRedemptions;\\n\\n    mapping(address => bool) public isAddressRedemptionAllowed;\\n\\n    /**\\n     * @dev Set the public redemptions flag\\n     * @param _publicRedemptions The new public redemptions flag to be set.\\n     */\\n    function setPublicRedemptions(bool _publicRedemptions) external onlyOwner {\\n        publicRedemptions = _publicRedemptions;\\n        emit publicRedemptionsUpdated(_publicRedemptions);\\n    }\\n\\n    /**\\n     * @dev Set the redemption allowed for a specific address\\n     * @param _address Address of the account\\n     * @param _allowed The new redemption allowed flag to be set.\\n     */\\n    function setRedemptionAllowed(address _address, bool _allowed)\\n        external\\n        onlyOwner\\n    {\\n        isAddressRedemptionAllowed[_address] = _allowed;\\n    }\\n\\n    /**\\n     * @dev Set the address for the Vault Deployer\\n     * @param _vaultDeployer Address of the Vault Deployer\\n     */\\n    function setVaultDeployer(address _vaultDeployer) external onlyOwner {\\n        require(_vaultDeployer != address(0x0), 'vault-deployer-is-0');\\n        vaultDeployer = _vaultDeployer;\\n    }\\n\\n    /**\\n     * @dev Set the address for the Liquidation Router\\n     * @param _liquidationRouter Address of the Liquidation Router\\n     */\\n    function setLiquidationRouter(\\n        address _liquidationRouter\\n    ) external onlyOwner {\\n        require(_liquidationRouter != address(0x0), 'liquidation-router-is-0');\\n        liquidationRouter = _liquidationRouter;\\n        emit liquidationRouterUpdated(_liquidationRouter);\\n    }\\n\\n    /**\\n     * @dev Set the collateral capacity for a specific collateral token\\n     * @param _collateral Address of the collateral token\\n     * @param _cap The new capacity for the collateral token\\n     */\\n    function setCollateralCapacity(\\n        address _collateral,\\n        uint256 _cap\\n    ) external onlyOwner {\\n        require(_collateral != address(0x0), 'collateral-is-0');\\n        emit CollateralCapacityUpdated(\\n            _collateral,\\n            collateralCap[_collateral],\\n            _cap\\n        );\\n        collateralCap[_collateral] = _cap;\\n    }\\n\\n    /**\\n     * @dev Set the debt ceiling value.\\n     * @param _debtCeiling The new debt ceiling value to be set.\\n     */\\n    function setDebtCeiling(uint256 _debtCeiling) external onlyOwner {\\n        emit DebtCeilingUpdated(debtCeiling, _debtCeiling);\\n        debtCeiling = _debtCeiling;\\n    }\\n\\n    /**\\n     * @dev Set the maximum debt allowed per window.\\n     * @param _maxDebtPerWindow The new maximum debt per window value to be set.\\n     */\\n    function setMaxDebtPerWindow(uint256 _maxDebtPerWindow) external onlyOwner {\\n        emit MaxDebtPerWindowUpdated(maxDebtPerWindow, _maxDebtPerWindow);\\n        maxDebtPerWindow = _maxDebtPerWindow;\\n    }\\n\\n    /**\\n     * @dev Set the window size for debt.\\n     * @param _debtWindowSize The new debt window size value to be set.\\n     */\\n    function setDebtWindowSize(uint256 _debtWindowSize) external onlyOwner {\\n        emit DebtWindowSizeUpdated(debtWindowSize, _debtWindowSize);\\n        debtWindowSize = _debtWindowSize;\\n    }\\n\\n    /**\\n     * @dev Set the maximum tokens allowed per vault.\\n     * @param _maxTokensPerVault The new maximum tokens per vault value to be set.\\n     */\\n    function setMaxTokensPerVault(\\n        uint256 _maxTokensPerVault\\n    ) external onlyOwner {\\n        require(_maxTokensPerVault > 0, 'max-tokens-per-vault-is-0');\\n        emit MaxTokensPerVaultUpdated(MAX_TOKENS_PER_VAULT, _maxTokensPerVault);\\n        MAX_TOKENS_PER_VAULT = _maxTokensPerVault;\\n    }\\n\\n    /**\\n     * @dev Set the address for the price feed.\\n     * @param _priceFeed Address of the new price feed contract.\\n     */\\n    function setPriceFeed(address _priceFeed) external onlyOwner {\\n        require(_priceFeed != address(0x0), 'pricefeed-is-0');\\n        priceFeed = _priceFeed;\\n        emit PriceFeedUpdated(_priceFeed);\\n    }\\n\\n    /**\\n     * @dev Set the redemption rate for the protocol.\\n     * @param _redemptionRate The new redemption rate value to be set.\\n     */\\n    function setRedemptionRate(uint256 _redemptionRate) external onlyOwner {\\n        require(\\n            _redemptionRate <= MAX_REDEMPTION_RATE,\\n            'redemption-rate-too-high'\\n        );\\n        emit RedemptionRateUpdated(redemptionRate, _redemptionRate);\\n        redemptionRate = _redemptionRate;\\n    }\\n\\n    /**\\n     * @dev Set the address for the borrow rate.\\n     * @param _borrowRate Address of the new borrow rate contract.\\n     */\\n    function setBorrowRate(address _borrowRate) external onlyOwner {\\n        require(_borrowRate != address(0), 'borrow-rate-is-0');\\n        emit BorrowRateUpdated(borrowRate, _borrowRate);\\n        borrowRate = _borrowRate;\\n    }\\n\\n    /**\\n     * @dev Set the redemption health factor limit.\\n     * @param _redemptionHealthFactorLimit The new redemption health factor limit to be set.\\n     */\\n    function setRedemptionHealthFactorLimit(\\n        uint256 _redemptionHealthFactorLimit\\n    ) external onlyOwner {\\n        emit RedemptionHealthFactorLimitUpdated(\\n            redemptionHealthFactorLimit,\\n            _redemptionHealthFactorLimit\\n        );\\n        redemptionHealthFactorLimit = _redemptionHealthFactorLimit;\\n    }\\n\\n    /**\\n     * @dev Set the address for the borrow fee recipient.\\n     * @param _borrowFeeRecipient Address of the new borrow fee recipient.\\n     */\\n    function setBorrowFeeRecipient(\\n        address _borrowFeeRecipient\\n    ) external onlyOwner {\\n        require(\\n            _borrowFeeRecipient != address(0x0),\\n            'borrow-fee-recipient-is-0'\\n        );\\n        borrowFeeRecipient = _borrowFeeRecipient;\\n    }\\n\\n    /**\\n     * @dev Set the address for the redemption fee recipient.\\n     * @param _redemptionFeeRecipient Address of the new redemption fee recipient.\\n     */\\n    function setRedemptionFeeRecipient(\\n        address _redemptionFeeRecipient\\n    ) external onlyOwner {\\n        require(\\n            _redemptionFeeRecipient != address(0x0),\\n            'redemption-fee-recipient-is-0'\\n        );\\n        redemptionFeeRecipient = _redemptionFeeRecipient;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the configuration settings upon deployment\\n     * @param _vaultDeployer Address of the Vault Deployer\\n     * @param _liquidationRouter Address of the Liquidation Router\\n     */\\n    constructor(address _vaultDeployer, address _liquidationRouter) {\\n        require(_vaultDeployer != address(0x0), 'vault-deployer-is-0');\\n        require(_liquidationRouter != address(0x0), 'liquidation-factory-is-0');\\n        vaultDeployer = _vaultDeployer;\\n        borrowFeeRecipient = _msgSender();\\n        redemptionFeeRecipient = _msgSender();\\n        lastDebtWindow = block.timestamp;\\n        liquidationRouter = _liquidationRouter;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultFactoryHelper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport './interfaces/IVaultFactory.sol';\\nimport './interfaces/IVault.sol';\\nimport './interfaces/ITokenPriceFeed.sol';\\n\\n/**\\n * @title VaultFactoryHelper\\n * @notice Helper contract providing various functions to retrieve information about vaults in a vault factory\\n */\\ncontract VaultFactoryHelper {\\n    uint256 public constant DECIMAL_PRECISION = 1e18;\\n\\n    /**\\n     * @notice Retrieves all vault addresses within a vault factory\\n     * @param _vaultFactory Address of the vault factory\\n     * @return An array of vault addresses\\n     */\\n    function getAllVaults(\\n        address _vaultFactory\\n    ) public view returns (address[] memory) {\\n        IVaultFactory vaultFactory = IVaultFactory(_vaultFactory);\\n        uint256 vaultCount = vaultFactory.vaultCount();\\n        if (vaultCount == 0) {\\n            return new address[](0);\\n        } else {\\n            address[] memory vaults = new address[](vaultCount);\\n            vaults[0] = vaultFactory.firstVault();\\n            for (uint256 i = 1; i < vaultCount; i++) {\\n                vaults[i] = vaultFactory.nextVault(vaults[i - 1]);\\n            }\\n            return vaults;\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves the Total Value Locked (TVL) of a specific vault based on a single collateral type\\n     * @param _vaultAddress Address of the vault\\n     * @param _collateralAddress Address of the collateral asset\\n     * @return The TVL of the vault for the given collateral\\n     */\\n    function getVaultTvlByCollateral(\\n        address _vaultAddress,\\n        address _collateralAddress\\n    ) public view returns (uint256) {\\n        IVault _vault = IVault(_vaultAddress);\\n        uint256 _collateralAmount = _vault.collateral(_collateralAddress);\\n        ITokenPriceFeed _priceFeed = ITokenPriceFeed(\\n            IVaultFactory(_vault.factory()).priceFeed()\\n        );\\n        uint256 _price = _priceFeed.tokenPrice(_collateralAddress);\\n        uint256 _normalizedCollateralAmount = _collateralAmount *\\n            (10 ** (18 - _priceFeed.decimals(_collateralAddress)));\\n        uint256 _tvl = (_normalizedCollateralAmount * _price) /\\n            DECIMAL_PRECISION;\\n        return _tvl;\\n    }\\n\\n    /**\\n     * @notice Retrieves the Total Value Locked (TVL) of a vault across all collateral types it holds\\n     * @param _vault Address of the vault\\n     * @return The total TVL of the vault across all collateral types\\n     */\\n    function getVaultTvl(address _vault) public view returns (uint256) {\\n        IVault vault = IVault(_vault);\\n        uint256 tvl = 0;\\n        for (uint256 i = 0; i < vault.collateralsLength(); i++) {\\n            address _collateralAddress = vault.collateralAt(i);\\n            tvl += getVaultTvlByCollateral(_vault, _collateralAddress);\\n        }\\n        return tvl;\\n    }\\n\\n    /**\\n     * @notice Retrieves an array of liquidatable vault addresses within a vault factory\\n     * @param _vaultFactory Address of the vault factory\\n     * @return An array of liquidatable vault addresses\\n     */\\n    function getLiquidatableVaults(\\n        address _vaultFactory\\n    ) public view returns (address[] memory) {\\n        IVaultFactory vaultFactory = IVaultFactory(_vaultFactory);\\n        uint256 vaultCount = vaultFactory.vaultCount();\\n        uint256 liquidatableVaultCount = 0;\\n        if (vaultCount == 0) {\\n            return new address[](0);\\n        } else {\\n            address[] memory _vaults = getAllVaults(_vaultFactory);\\n            address[] memory _liquidatableVaults = new address[](vaultCount);\\n\\n            for (uint256 i = 0; i < vaultCount; i++) {\\n                IVault _vault = IVault(_vaults[i]);\\n                if (vaultFactory.isLiquidatable(address(_vault))) {\\n                    _liquidatableVaults[liquidatableVaultCount] = address(\\n                        _vault\\n                    );\\n                    liquidatableVaultCount++;\\n                }\\n            }\\n\\n            address[] memory liquidatableVaults = new address[](\\n                liquidatableVaultCount\\n            );\\n            for (uint256 i = 0; i < liquidatableVaultCount; i++) {\\n                liquidatableVaults[i] = _liquidatableVaults[i];\\n            }\\n\\n            return liquidatableVaults;\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves an array of redeemable vault addresses and their corresponding redeemable collaterals\\n     * @param _vaultFactory Address of the vault factory\\n     * @param _useMlr Boolean indicating whether to use MLR for health factor calculation\\n     * @return redeemableVaults An array of redeemable vault addresses\\n     * @return redeemableCollaterals An array of corresponding redeemable collateral addresses\\n     */\\n    function getRedeemableVaults(\\n        address _vaultFactory,\\n        bool _useMlr\\n    )\\n        public\\n        view\\n        returns (\\n            address[] memory redeemableVaults,\\n            address[] memory redeemableCollaterals\\n        )\\n    {\\n        IVaultFactory vaultFactory = IVaultFactory(_vaultFactory);\\n        uint256 vaultCount = vaultFactory.vaultCount();\\n        uint256 redeemableVaultCount = 0;\\n        uint256 healthFactorLimit = vaultFactory.redemptionHealthFactorLimit();\\n        if (vaultCount == 0) {\\n            return (new address[](0), new address[](0));\\n        } else {\\n            address[] memory _vaults = getAllVaults(_vaultFactory);\\n            address[] memory _redeemableVaults = new address[](vaultCount);\\n            address[] memory _redeemableCollaterals = new address[](vaultCount);\\n\\n            for (uint256 i = 0; i < vaultCount; i++) {\\n                IVault _vault = IVault(_vaults[i]);\\n                if (_vault.healthFactor(_useMlr) < healthFactorLimit) {\\n                    _redeemableVaults[redeemableVaultCount] = address(_vault);\\n\\n                    address[] memory _collaterals = getVaultCollaterals(\\n                        address(_vault)\\n                    );\\n\\n                    for (uint256 j = 0; j < _collaterals.length; j++) {\\n                        if (\\n                            vaultFactory.isReedemable(\\n                                address(_vault),\\n                                _collaterals[j]\\n                            )\\n                        ) {\\n                            _redeemableCollaterals[\\n                                redeemableVaultCount\\n                            ] = _collaterals[j];\\n                            break;\\n                        }\\n                    }\\n\\n                    redeemableVaultCount++;\\n                }\\n            }\\n\\n            redeemableVaults = new address[](redeemableVaultCount);\\n            redeemableCollaterals = new address[](redeemableVaultCount);\\n\\n            for (uint256 i = 0; i < redeemableVaultCount; i++) {\\n                redeemableVaults[i] = _redeemableVaults[i];\\n                redeemableCollaterals[i] = _redeemableCollaterals[i];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Retrieves an array of collateral asset addresses held by a specific vault\\n     * @param _vault Address of the vault\\n     * @return An array of collateral asset addresses\\n     */\\n    function getVaultCollaterals(\\n        address _vault\\n    ) public view returns (address[] memory) {\\n        IVault vault = IVault(_vault);\\n        uint256 collateralsLength = vault.collateralsLength();\\n        if (collateralsLength == 0) {\\n            return new address[](0);\\n        } else {\\n            address[] memory collaterals = new address[](collateralsLength);\\n            for (uint256 i = 0; i < collateralsLength; i++) {\\n                collaterals[i] = vault.collateralAt(i);\\n            }\\n            return collaterals;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates the Total Value Locked (TVL) across all vaults within a vault factory\\n     * @param _vaultFactory Address of the vault factory\\n     * @return The total TVL across all vaults in the factory\\n     */\\n    function getProtocolTvl(\\n        address _vaultFactory\\n    ) public view returns (uint256) {\\n        IVaultFactory vaultFactory = IVaultFactory(_vaultFactory);\\n        uint256 vaultCount = vaultFactory.vaultCount();\\n        uint256 tvl = 0;\\n        if (vaultCount == 0) {\\n            return 0;\\n        } else {\\n            address[] memory _vaults = getAllVaults(_vaultFactory);\\n            for (uint256 i = 0; i < vaultCount; i++) {\\n                tvl += getVaultTvl(_vaults[i]);\\n            }\\n            return tvl;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultFactoryList.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\nimport './utils/constants.sol';\\nimport './utils/linked-address-list.sol';\\n// import openzeppelin context\\nimport '@openzeppelin/contracts/utils/Context.sol';\\nimport '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\\n\\n/**\\n * @title VaultFactoryList\\n * @dev Manages a list of vaults by their owners, allowing addition, removal, and transfer of vaults.\\n */\\nabstract contract VaultFactoryList is Context {\\n    using LinkedAddressList for LinkedAddressList.List;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    LinkedAddressList.List _vaults;\\n    mapping(address => EnumerableSet.AddressSet) private _vaultsByOwner;\\n\\n    function vaultsByOwnerLength(\\n        address _owner\\n    ) external view returns (uint256) {\\n        return _vaultsByOwner[_owner].length();\\n    }\\n\\n    function vaultsByOwner(\\n        address _owner,\\n        uint256 _index\\n    ) external view returns (address) {\\n        return _vaultsByOwner[_owner].at(_index);\\n    }\\n\\n    function _addVault(address _owner, address _vault) internal {\\n        require(\\n            _vaults.add(_vault, address(0x0), false),\\n            'vault-could-not-be-added'\\n        );\\n        _vaultsByOwner[_owner].add(_vault);\\n    }\\n\\n    function _transferVault(\\n        address _from,\\n        address _to,\\n        address _vault\\n    ) internal {\\n        _vaultsByOwner[_from].remove(_vault);\\n        _vaultsByOwner[_to].add(_vault);\\n    }\\n\\n    function _removeVault(address _owner, address _vault) internal {\\n        require(_vaults.remove(_vault), 'vault-could-not-be-removed');\\n        _vaultsByOwner[_owner].remove(_vault);\\n    }\\n\\n    /**\\n     * @dev returns the number of vaults for specific token\\n     */\\n    function vaultCount() public view returns (uint256) {\\n        return _vaults._size;\\n    }\\n\\n    /**\\n     * @dev returns the last vault by maximum collaterization ratio\\n     */\\n    function lastVault() public view returns (address) {\\n        return _vaults._last;\\n    }\\n\\n    /**\\n     * @dev returns the first vault by minimal collaterization ratio\\n     */\\n    function firstVault() public view returns (address) {\\n        return _vaults._first;\\n    }\\n\\n    /**\\n     * @dev returns the next vault by collaterization ratio\\n     */\\n    function nextVault(address _vault) public view returns (address) {\\n        return _vaults._values[_vault].next;\\n    }\\n\\n    /**\\n     * @dev returns the previous vault by collaterization ratio\\n     */\\n    function prevVault(address _vault) public view returns (address) {\\n        return _vaults._values[_vault].prev;\\n    }\\n\\n    /**\\n     * @dev Checks if a vault exists for a specific token.\\n     * @param _vault The address of the vault to check.\\n     * @return A boolean indicating whether the vault exists.\\n     */\\n    function containsVault(address _vault) public view returns (bool) {\\n        return _vaults._values[_vault].next != address(0x0);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/VaultFactoryZapper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport './interfaces/IVaultFactory.sol';\\nimport './interfaces/IVault.sol';\\nimport './interfaces/ITokenPriceFeed.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\\n\\n/**\\n * @title VaultFactoryZapper\\n * @dev A contract that facilitates the creation of Vaults and manages their operations.\\n */\\ncontract VaultFactoryZapper is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    IVaultFactory public vaultFactory; // Interface for interacting with VaultFactory\\n    string public prefix = 'MyVault'; // Prefix for the Vault name\\n\\n    receive() external payable {} // Fallback function to receive Matic\\n\\n    /**\\n     * @dev Sets the VaultFactory contract address.\\n     * @param _vaultFactory Address of the VaultFactory contract.\\n     */\\n    function setVaultFactory(address _vaultFactory) public onlyOwner {\\n        require(_vaultFactory != address(0), 'VaultFactory: zero address');\\n        vaultFactory = IVaultFactory(_vaultFactory);\\n    }\\n\\n    /**\\n     * @dev Sets the prefix for Vault names.\\n     * @param _prefix New prefix for Vault names.\\n     */\\n    function setPrefix(string memory _prefix) public onlyOwner {\\n        prefix = _prefix;\\n    }\\n\\n    /**\\n     * @dev Constructor to initialize the contract with the VaultFactory address.\\n     * @param _vaultFactory Address of the VaultFactory contract.\\n     */\\n    constructor(address _vaultFactory) Ownable(msg.sender) {\\n        setVaultFactory(_vaultFactory);\\n    }\\n\\n    /**\\n     * @dev Internal function to generate the name for the next Vault.\\n     * @param _owner Address of the Vault owner.\\n     * @return Name for the next Vault.\\n     */\\n    function _getNextVaultName(\\n        address _owner\\n    ) internal view returns (string memory) {\\n        uint256 vaultCount = vaultFactory.vaultsByOwnerLength(_owner) + 1;\\n        return string.concat(prefix, uint2str(vaultCount));\\n    }\\n\\n    /**\\n     * @dev Creates a new Vault.\\n     * @param _collateralToken Address of the collateral token.\\n     * @param _collateralAmount Amount of collateral tokens to be deposited.\\n     * @param _borrowAmount Amount of tokens to be borrowed against the collateral.\\n     * @return _vault Address of the newly created Vault.\\n     */\\n    function createVault(\\n        address _collateralToken,\\n        uint256 _collateralAmount,\\n        uint256 _borrowAmount\\n    ) external returns (address _vault) {\\n        _vault = vaultFactory.createVault(_getNextVaultName(msg.sender));\\n\\n        if (_collateralAmount > 0) {\\n            IERC20(_collateralToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                _collateralAmount\\n            );\\n            IERC20(_collateralToken).safeIncreaseAllowance(\\n                address(vaultFactory),\\n                _collateralAmount\\n            );\\n            vaultFactory.addCollateral(\\n                _vault,\\n                _collateralToken,\\n                _collateralAmount\\n            );\\n            if (_borrowAmount > 0) {\\n                vaultFactory.borrow(_vault, _borrowAmount, msg.sender);\\n            }\\n        }\\n\\n        vaultFactory.transferVaultOwnership(_vault, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Creates a new Vault with native (Matic) collateral.\\n     * @param _borrowAmount Amount of tokens to be borrowed against the collateral.\\n     * @return _vault Address of the newly created Vault.\\n     */\\n    function createVaultNative(\\n        uint256 _borrowAmount\\n    ) external payable returns (address _vault) {\\n        _vault = vaultFactory.createVault(_getNextVaultName(msg.sender));\\n\\n        if (msg.value > 0) {\\n            vaultFactory.addCollateralNative{value: msg.value}(_vault);\\n            if (_borrowAmount > 0) {\\n                vaultFactory.borrow(_vault, _borrowAmount, msg.sender);\\n            }\\n        }\\n        vaultFactory.transferVaultOwnership(_vault, msg.sender);\\n    }\\n\\n    /**\\n     * @dev Converts uint to a string.\\n     * @param _i Unsigned integer to be converted.\\n     * @return _uintAsString String representation of the input integer.\\n     */\\n    function uint2str(\\n        uint _i\\n    ) internal pure returns (string memory _uintAsString) {\\n        if (_i == 0) {\\n            return '0';\\n        }\\n        uint j = _i;\\n        uint len;\\n        while (j != 0) {\\n            len++;\\n            j /= 10;\\n        }\\n        bytes memory bstr = new bytes(len);\\n        uint k = len;\\n        while (_i != 0) {\\n            k = k - 1;\\n            uint8 temp = (48 + uint8(_i - (_i / 10) * 10));\\n            bytes1 b1 = bytes1(temp);\\n            bstr[k] = b1;\\n            _i /= 10;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\"\r\n    },\r\n    \"hardhat/console.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 1000\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_mintableTokenOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"FeeRecipientChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableFee\",\"type\":\"uint256\"}],\"name\":\"StabilizerBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"StabilizerMint\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintableTokenOwner\",\"outputs\":[{\"internalType\":\"contract IMintableTokenOwner\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"scalingFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeBps\",\"type\":\"uint256\"}],\"name\":\"setFeeBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"setFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stableToken\",\"outputs\":[{\"internalType\":\"contract IMintableToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Stabilizer", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "1000", "ConstructorArguments": "000000000000000000000000bdea8a2e648c2beb237bb1a48a13a2395b5058da000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000000000032", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}