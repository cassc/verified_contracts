{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/Depositor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.23;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary PoseidonUnit4L {\\n    function poseidon(uint256[4] calldata) public pure returns (uint256) {}\\n}\\n\\n/**\\n * @title Taprootized Atomic Swaps Contract\\n * @notice This contract facilitates atomic swaps using between Bitcoin and Ethereum, ensuring privacy and security for both parties.\\n *\\n * Functionality:\\n * - Users can deposit ETH into the contract, specifying a recipient, a Poseidon hash of a secret, and a lock time.\\n * - Deposits can only be withdrawn by the recipient if they provide the correct secret that matches the hash used at the time of deposit.\\n * - Deposits are locked for a minimum duration, defined by the contract, ensuring that the depositor cannot reclaim them before this period.\\n * - If the recipient does not withdraw the funds within the lock time, the depositor can reclaim them.\\n *\\n * Limitations:\\n * - The contract only supports ETH deposits and does not handle ERC20 tokens or other assets.\\n * - The lock time is fixed and cannot be modified after a deposit is made.\\n * - The contract does not support incremental deposits to the same secret hash; each deposit must have a unique secret hash.\\n */\\ncontract Depositor {\\n    /**\\n     * @notice Represents the minimum time (in seconds) that a deposit must be locked in the contract. Set to one hour.\\n     */\\n    uint256 public constant MIN_LOCK_TIME = 1 hours;\\n\\n    /**\\n     * @notice Struct to store details of each deposit.\\n     * @param sender The Ethereum address of the user who created the deposit.\\n     * @param recipient The Ethereum address of the user eligible to withdraw the deposit using the correct secret.\\n     * @param amount The amount of ETH deposited.\\n     * @param lockTime The UNIX timestamp until which the deposit is locked and cannot be withdrawn.\\n     * @param isWithdrawn Boolean flag indicating whether the deposit has been withdrawn. This helps prevent double spending.\\n     */\\n    struct Deposit {\\n        address sender;\\n        address recipient;\\n        uint256 amount;\\n        uint256 lockTime;\\n        bool isWithdrawn;\\n    }\\n\\n    /**\\n     * @notice Mapping of Poseidon hash of the secret to Deposit structs.\\n     */\\n    mapping(bytes32 => Deposit) public deposits;\\n\\n    /**\\n     * @notice Emitted when a new deposit is made.\\n     * @param sender The Ethereum address of the user who created the deposit.\\n     * @param recipient The Ethereum address of the user eligible to withdraw the deposit using the correct secret.\\n     * @param amount The amount of ETH deposited.\\n     * @param lockTime The UNIX timestamp until which the deposit is locked and cannot be withdrawn.\\n     * @param secretHash The Poseidon hash of the secret required to withdraw the deposit.\\n     */\\n    event Deposited(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount,\\n        uint256 lockTime,\\n        bytes32 secretHash\\n    );\\n\\n    /**\\n     * @notice Emitted when a deposit is successfully withdrawn.\\n     * @param recipient The Ethereum address of the user who withdrew the deposit.\\n     * @param amount The amount of ETH withdrawn.\\n     * @param secret The secret used to withdraw the deposit.\\n     * @param secretHash The Poseidon hash of the secret used to create the deposit.\\n     */\\n    event Withdrawn(address indexed recipient, uint256 amount, uint256 secret, bytes32 secretHash);\\n\\n    /**\\n     * @notice Emitted when deposited funds are restored to the sender after the lock time has expired.\\n     * @param sender The Ethereum address of the sender to whom the funds are restored.\\n     * @param amount The amount of ETH restored.\\n     * @param secretHash The Poseidon hash of the secret originally used for the deposit.\\n     */\\n    event Restored(address indexed sender, uint256 amount, bytes32 secretHash);\\n\\n    /**\\n     * @notice Error thrown when a deposit is attempted with an amount of 0 ETH.\\n     */\\n    error ZeroDepositAmount();\\n\\n    /**\\n     * @notice Error thrown when a deposit with the given secret hash already exists.\\n     * @param secretHash The Poseidon hash of the secret for which a deposit already exists.\\n     */\\n    error DepositAlreadyExists(bytes32 secretHash);\\n\\n    /**\\n     * @notice Error thrown when the provided lock time for a deposit is too short.\\n     * @param providedLockTime The lock time provided for the deposit.\\n     * @param minimumLockTime The minimum required lock time, typically one hour.\\n     */\\n    error LockTimeTooShort(uint256 providedLockTime, uint256 minimumLockTime);\\n\\n    /**\\n     * @notice Error thrown when an operation (like withdrawal or restoration) is attempted on a non-existent deposit.\\n     * @param secretHash The Poseidon hash of the secret for which the deposit does not exist.\\n     */\\n    error DepositDoesNotExist(bytes32 secretHash);\\n\\n    /**\\n     * @notice Error thrown when an attempt is made to withdraw or restore an already withdrawn deposit.\\n     * @param secretHash The Poseidon hash of the secret for the deposit that has already been withdrawn.\\n     */\\n    error DepositAlreadyWithdrawn(bytes32 secretHash);\\n\\n    /**\\n     * @notice Error thrown when an attempt is made to restore funds before the lock time has expired.\\n     * @param currentTime The current UNIX timestamp.\\n     * @param lockTime The UNIX timestamp until which the deposit is locked.\\n     */\\n    error TimeLockNotExpired(uint256 currentTime, uint256 lockTime);\\n\\n    /**\\n     * @notice Error thrown when an attempt is made to make a deposit with the zero Ethereum address as the recipient.\\n     */\\n    error ZeroAddressNotAllowed();\\n\\n    /**\\n     * @notice Allows a user to deposit ETH into the contract with a given recipient, secret hash, and lock time.\\n     * @dev Emits a `Deposited` event upon successful deposit. Checks for zero deposit amount, duplicate deposits,\\n     *      short lock times, and zero address recipient.\\n     * @param recipient_ The Ethereum address of the recipient eligible to withdraw the deposit using the correct secret.\\n     * @param secretHash_ The Poseidon hash of the secret required for the recipient to withdraw the deposit.\\n     * @param lockTime_ The duration (in seconds) for which the deposit is locked and cannot be withdrawn.\\n     */\\n    function deposit(address recipient_, bytes32 secretHash_, uint256 lockTime_) external payable {\\n        if (msg.value == 0) revert ZeroDepositAmount();\\n        if (deposits[secretHash_].amount != 0) revert DepositAlreadyExists(secretHash_);\\n        if (lockTime_ < MIN_LOCK_TIME) revert LockTimeTooShort(lockTime_, MIN_LOCK_TIME);\\n        if (recipient_ == address(0)) revert ZeroAddressNotAllowed();\\n\\n        deposits[secretHash_] = Deposit({\\n            sender: msg.sender,\\n            recipient: recipient_,\\n            amount: msg.value,\\n            lockTime: block.timestamp + lockTime_,\\n            isWithdrawn: false\\n        });\\n\\n        emit Deposited(msg.sender, recipient_, msg.value, lockTime_, secretHash_);\\n    }\\n\\n    /**\\n     * @notice Allows the recipient to withdraw a deposit using the correct secret.\\n     * @dev Emits a `Withdrawn` event upon successful withdrawal. Checks for non-existent or already withdrawn deposits.\\n     *      Uses the PoseidonUnit1L library to hash the provided secret.\\n     * @param secret_ The prototype of the `secretHash` used in the deposit function.\\n     */\\n    function withdraw(uint256 secret_) external {\\n        bytes32 secretHash_ = _getSecretHash(secret_);\\n\\n        Deposit storage userDeposit = deposits[secretHash_];\\n\\n        uint256 depositAmount_ = userDeposit.amount;\\n        address depositRecipient_ = userDeposit.recipient;\\n\\n        if (depositAmount_ == 0) revert DepositDoesNotExist(secretHash_);\\n        if (userDeposit.isWithdrawn) revert DepositAlreadyWithdrawn(secretHash_);\\n\\n        userDeposit.isWithdrawn = true;\\n\\n        (bool success_, bytes memory data_) = payable(depositRecipient_).call{\\n            value: depositAmount_\\n        }(\\\"\\\");\\n        Address.verifyCallResult(success_, data_);\\n\\n        emit Withdrawn(depositRecipient_, depositAmount_, secret_, secretHash_);\\n    }\\n\\n    /**\\n     * @notice Allows the sender to restore a deposit back to themselves after the lock time has expired.\\n     * @dev Emits a `Restored` event upon successful restoration. Checks for non-existent, already withdrawn,\\n     *      or not yet expired deposits.\\n     * @param secretHash_ The Poseidon hash of the secret used when the deposit was created.\\n     */\\n    function restore(bytes32 secretHash_) external {\\n        Deposit storage userDeposit = deposits[secretHash_];\\n\\n        uint256 depositAmount_ = userDeposit.amount;\\n\\n        if (depositAmount_ == 0) revert DepositDoesNotExist(secretHash_);\\n        if (userDeposit.isWithdrawn) revert DepositAlreadyWithdrawn(secretHash_);\\n        if (userDeposit.lockTime > block.timestamp)\\n            revert TimeLockNotExpired(block.timestamp, userDeposit.lockTime);\\n\\n        userDeposit.isWithdrawn = true;\\n\\n        (bool success_, bytes memory data_) = payable(userDeposit.sender).call{\\n            value: depositAmount_\\n        }(\\\"\\\");\\n        Address.verifyCallResult(success_, data_);\\n\\n        emit Restored(userDeposit.sender, depositAmount_, secretHash_);\\n    }\\n\\n    function _getSecretHash(uint256 secret_) private pure returns (bytes32) {\\n        uint256 part1 = secret_ >> 192;\\n        uint256 part2 = ((secret_ >> 128) & 0xFFFFFFFFFFFFFFFF);\\n        uint256 part3 = ((secret_ >> 64) & 0xFFFFFFFFFFFFFFFF);\\n        uint256 part4 = (secret_ & 0xFFFFFFFFFFFFFFFF);\\n\\n        return bytes32(PoseidonUnit4L.poseidon([part4, part3, part2, part1]));\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {\r\n      \"contracts/Depositor.sol\": {\r\n        \"PoseidonUnit4L\": \"0x76a166dae24961002d57ea3b9186df98f3101ef3\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"DepositAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"DepositAlreadyWithdrawn\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"DepositDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"providedLockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minimumLockTime\",\"type\":\"uint256\"}],\"name\":\"LockTimeTooShort\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"}],\"name\":\"TimeLockNotExpired\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroDepositAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"Restored\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"secret\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"secretHash\",\"type\":\"bytes32\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MIN_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"secretHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"lockTime_\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockTime\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWithdrawn\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"secretHash_\",\"type\":\"bytes32\"}],\"name\":\"restore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"secret_\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Depositor", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}