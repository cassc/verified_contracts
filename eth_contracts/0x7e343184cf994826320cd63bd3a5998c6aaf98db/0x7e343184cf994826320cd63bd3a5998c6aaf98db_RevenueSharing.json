{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n\r\n/**\r\n * @title RevenueSharing\r\n * @dev Depositing revenue defines an epoch. Each epoch creates a\r\n * snapshot of what the rewards are per staked token for that\r\n * epoch. Each stakeholder tracks the snapshot from which their\r\n * rewards are accumulated, and keeps this up to date as they claim\r\n * and adjust their staked balance. Stakeholder rewards are\r\n * accumulated for each epoch, and can be claimed in O(1) time.\r\n */\r\ncontract RevenueSharing {\r\n    IERC20 public immutable stakingToken;\r\n    IERC20 public immutable rewardToken;\r\n\r\n    mapping(address => uint) public staked;\r\n    mapping(address => uint) public lastStakeTime;\r\n    uint public totalStaked;\r\n\r\n    uint private constant MULTIPLIER = 1e18;\r\n    uint private rewardIndex;\r\n    mapping(address => uint) private rewardIndexOf;\r\n    mapping(address => uint) private earned;\r\n\r\n    // How much time must pass before we can withdraw\r\n    uint public unstakeCooldown;\r\n\r\n    // All revenue deposited to the contract.\r\n    uint public lifetimeRevenue;\r\n\r\n    constructor(address _stakingToken, address _rewardToken, uint256 _unstakeCooldown) {\r\n        stakingToken = IERC20(_stakingToken);\r\n        rewardToken = IERC20(_rewardToken);\r\n        unstakeCooldown = _unstakeCooldown;\r\n    }\r\n\r\n    function depositRevenue(uint reward) external {\r\n        require(totalStaked > 0, \"can't deposit without anything staked\");\r\n        require(reward > 0, \"can't deposit 0\");\r\n        require(rewardToken.allowance(msg.sender, address(this)) >= reward, \"not enough allowance\");\r\n        bool isSent = rewardToken.transferFrom(msg.sender, address(this), reward);\r\n        require(isSent, \"transfer failed\");\r\n        rewardIndex += (reward * MULTIPLIER) / totalStaked;\r\n\r\n        lifetimeRevenue += reward;\r\n    }\r\n\r\n    function _calculateRewards(address account) private view returns (uint) {\r\n        uint shares = staked[account];\r\n        return (shares * (rewardIndex - rewardIndexOf[account])) / MULTIPLIER;\r\n    }\r\n\r\n    function calculateRewardsEarned(address account) external view returns (uint) {\r\n        return earned[account] + _calculateRewards(account);\r\n    }\r\n\r\n    function _updateRewards(address account) private {\r\n        earned[account] += _calculateRewards(account);\r\n        rewardIndexOf[account] = rewardIndex;\r\n    }\r\n\r\n    function stake(uint amount) external {\r\n        require(amount > 0, \"can't stake 0\");\r\n\r\n        _updateRewards(msg.sender);\r\n\r\n        staked[msg.sender] += amount;\r\n        totalStaked += amount;\r\n\r\n        require(stakingToken.allowance(msg.sender, address(this)) >= amount, \"not enough allowance\");\r\n        bool isSent = stakingToken.transferFrom(msg.sender, address(this), amount);\r\n        require(isSent, \"transfer failed\");\r\n\r\n        lastStakeTime[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    function unstake(uint amount) external {\r\n        require(block.timestamp - lastStakeTime[msg.sender] > unstakeCooldown, \"can't unstake yet\");\r\n        require(amount > 0, \"can't unstake 0\");\r\n        require(amount <= staked[msg.sender], \"amount exceeds staked balance\");\r\n\r\n        _updateRewards(msg.sender);\r\n\r\n        staked[msg.sender] -= amount;\r\n        totalStaked -= amount;\r\n\r\n        bool isSent = stakingToken.transfer(msg.sender, amount);\r\n        require(isSent, \"transfer failed\");\r\n    }\r\n\r\n    function claim() external returns (uint) {\r\n        _updateRewards(msg.sender);\r\n\r\n        uint reward = earned[msg.sender];\r\n        if (reward > 0) {\r\n            earned[msg.sender] = 0;\r\n            rewardToken.transfer(msg.sender, reward);\r\n        }\r\n\r\n        return reward;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unstakeCooldown\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"calculateRewardsEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"depositRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastStakeTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lifetimeRevenue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"staked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStaked\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"unstake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unstakeCooldown\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "RevenueSharing", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000008ef32a03784c8fd63bbf027251b9620865bd54b60000000000000000000000008ef32a03784c8fd63bbf027251b9620865bd54b60000000000000000000000000000000000000000000000000000000000093a80", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://c7d7125ae839c8773f01bb624643be552a268ed25ce9ac87f488cac0596a80e5"}