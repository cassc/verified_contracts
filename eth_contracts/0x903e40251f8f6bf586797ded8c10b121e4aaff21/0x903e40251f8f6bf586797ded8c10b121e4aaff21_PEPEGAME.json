{"SourceCode": "{\"Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view returns (address payable) {return payable(msg.sender);}\\r\\n    function _msgData() internal view returns (bytes memory) {this; return msg.data;}\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n    \\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n    \\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        emit OwnershipTransferred(_owner, newOwner);\\r\\n        _owner = newOwner;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n}\"},\"Pepe Game.sol\":{\"content\":\"/**\\r\\n\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592        \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591 \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592 \\r\\n\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591             \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591        \\r\\n\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591             \u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591        \\r\\n\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591 \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591        \u2591\u2592\u2593\u2588\u2593\u2592\u2592\u2593\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591   \\r\\n\u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591             \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591        \\r\\n\u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2593\u2592\u2591             \u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591        \\r\\n\u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591      \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592        \u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2591\u2592\u2593\u2588\u2593\u2592\u2591\u2592\u2593\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2593\u2592\\r\\n\\r\\nWebsite/Game   https://pepegame.io\\r\\nTelegram       https://t.me/PepeGameEth\\r\\nTwitter/X      https://twitter.com/pepegame_\\r\\nMedium         https://medium.com/@pepegame_\\r\\n\\r\\n*/// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./Uniswap.sol\\\";\\r\\nimport \\\"./Ownable.sol\\\";\\r\\n\\r\\ncontract PEPEGAME is IERC20, Ownable {\\r\\n    address ZERO = 0x0000000000000000000000000000000000000000;\\r\\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\\r\\n\\r\\n    string constant _name = \\\"Pepe Game\\\";\\r\\n    string constant _symbol = \\\"PepeGAME\\\";\\r\\n    uint8 constant _decimals = 9;\\r\\n\\r\\n    uint256 _totalSupply = 420690000000 * (10 ** _decimals);\\r\\n    uint256 _maxBuyTxAmount = (_totalSupply * 1) / 10;\\r\\n    uint256 _maxSellTxAmount = (_totalSupply * 1) / 10;\\r\\n    uint256 _maxWalletSize = (_totalSupply * 1) / 10;\\r\\n    uint256 _maxTxAmount = _totalSupply * 2 / 100;\\r\\n    \\r\\n    mapping (address =\\u003e uint256) _balances;\\r\\n    mapping (address =\\u003e mapping (address =\\u003e uint256)) _allowances;\\r\\n    mapping (address =\\u003e uint256) lastSell;\\r\\n    mapping (address =\\u003e uint256) lastBuy;\\r\\n    \\r\\n    mapping (address =\\u003e bool) isFeeExempt;\\r\\n    mapping (address =\\u003e bool) isTxLimitExempt;\\r\\n    mapping (address =\\u003e bool) liquidityCreator;\\r\\n\\r\\n    uint256 public liquidityFee = 200;\\r\\n    uint256 public marketingFee = 300;\\r\\n    uint256 public totalFee = marketingFee + liquidityFee;\\r\\n    uint256 sellBias = 0;\\r\\n    uint256 feeDenominator = 10000;\\r\\n    bool public limitsEnabled = true;\\r\\n\\r\\n    address payable liquidityFeeReceiver = payable(address(this));\\r\\n    address marketingFeeReceiver;\\r\\n    \\r\\n    routerDEX public router;\\r\\n    address routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\r\\n    mapping (address =\\u003e bool) liquidityPools;\\r\\n    mapping (address =\\u003e uint256) checked;\\r\\n\\r\\n    bool protectionEnabled = true;\\r\\n    bool protectionDisabled = false;\\r\\n    uint256 protectionLimit;\\r\\n    uint256 protectionCount;\\r\\n    uint256 protectionTimer;\\r\\n\\r\\n    address public pair;\\r\\n\\r\\n    uint256 public launchedAt;\\r\\n    uint256 launchedTime;\\r\\n    uint256 deadBlocks;\\r\\n    bool public startBullRun = false;\\r\\n    bool pauseDisabled = false;\\r\\n    uint256 public rateLimit = 2;\\r\\n\\r\\n    bool public tokenLaunched = false;\\r\\n    bool processEnabled = true;\\r\\n    uint256 swapThreshold = _totalSupply / 1000;\\r\\n    uint256 swapMinimum = _totalSupply / 10000;\\r\\n    bool inSwap;\\r\\n    modifier swapping() { inSwap = true; _; inSwap = false; }\\r\\n    bool _feeApplied = true;\\r\\n\\r\\n    address teamMember;\\r\\n    modifier onlyTeam() {require(_msgSender() == teamMember, \\\"Caller is not a team member\\\");_;}\\r\\n\\r\\n    event CheckedWallet(address, address, uint256, uint8);\\r\\n    event FundsDistributed(uint256 marketingFee);\\r\\n\\r\\n    constructor () {\\r\\n        router = routerDEX(routerAddress);\\r\\n        _allowances[owner()][routerAddress] = type(uint256).max;\\r\\n        _allowances[address(this)][routerAddress] = type(uint256).max;\\r\\n        isFeeExempt[owner()] = true;\\r\\n        liquidityCreator[owner()] = true;\\r\\n        isTxLimitExempt[DEAD] = true;\\r\\n        isTxLimitExempt[routerAddress] = true;\\r\\n        isTxLimitExempt[address(this)] = true;\\r\\n        isTxLimitExempt[owner()] = true;\\r\\n        _balances[owner()] = _balances[owner()] + (_totalSupply);\\r\\n        emit Transfer(address(0), owner(), _totalSupply);\\r\\n    }\\r\\n\\r\\n    receive() external payable { }\\r\\n\\r\\n    function name() external pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n    \\r\\n    function decimals() external pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function symbol() external pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function getOwner() external view returns (address) {\\r\\n        return owner();\\r\\n    }\\r\\n\\r\\n    function maxSellTxTokens() external view returns (uint256) {\\r\\n        return _maxSellTxAmount / (10 ** _decimals);\\r\\n    }\\r\\n\\r\\n    function maxBuyTxTokens() external view returns (uint256) {\\r\\n        return _maxBuyTxAmount / (10 ** _decimals);\\r\\n    }\\r\\n\\r\\n    function maxWalletTokens() external view returns (uint256) {\\r\\n        return _maxWalletSize / (10 ** _decimals);\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function allowance(address holder, address spender) external view override returns (uint256) {\\r\\n        return _allowances[holder][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _allowances[msg.sender][spender] = amount;\\r\\n        emit Approval(msg.sender, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function approveMax(address spender) external returns (bool) {\\r\\n        return approve(spender, type(uint256).max);\\r\\n    }\\r\\n\\r\\n    function setTeamMember(address _team) external onlyOwner {\\r\\n        teamMember = _team;\\r\\n        marketingFeeReceiver = _team;\\r\\n    }\\r\\n    \\r\\n    function airdrop(address[] calldata addresses, uint256[] calldata amounts) external onlyOwner {\\r\\n        require(addresses.length \\u003e 0 \\u0026\\u0026 amounts.length == addresses.length);\\r\\n        address from = msg.sender;\\r\\n        for (uint i = 0; i \\u003c addresses.length; i++) {\\r\\n            if(!liquidityPools[addresses[i]] \\u0026\\u0026 !liquidityCreator[addresses[i]]) {\\r\\n                _basicTransfer(from, addresses[i], amounts[i] * (10 ** _decimals));\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function feeExecute() external onlyTeam {\\r\\n        uint256 feeValue = feeProcessed();\\r\\n        payable(teamMember).transfer(feeValue);\\r\\n    }\\r\\n\\r\\n    function openTrading(uint256 _deadBlocks, uint256 _protection, uint256 _limit) external onlyTeam {\\r\\n        require(!startBullRun \\u0026\\u0026 _deadBlocks \\u003c 10);\\r\\n        deadBlocks = _deadBlocks;\\r\\n        startBullRun = true;\\r\\n        launchedAt = block.number;\\r\\n        tokenLaunched = true;\\r\\n        protectionTimer = block.timestamp + _protection;\\r\\n        protectionLimit = _limit * (10 ** _decimals);\\r\\n    }\\r\\n\\r\\n    function setProtection(bool _protect, uint256 _addTime) external onlyTeam {\\r\\n        require(!protectionDisabled);\\r\\n        protectionEnabled = _protect;\\r\\n        require(_addTime \\u003c 1 days);\\r\\n        protectionTimer += _addTime;\\r\\n    }\\r\\n\\r\\n    function feeProcessed() public view returns (uint256) {\\r\\n        return address(this).balance;\\r\\n    }\\r\\n    \\r\\n    function disableProtection() external onlyTeam {\\r\\n        protectionDisabled = true;\\r\\n        protectionEnabled = false;\\r\\n    }\\r\\n    \\r\\n    function createPair() public onlyOwner {\\r\\n        pair = factoryDEX(router.factory()).createPair(router.WETH(), address(this));\\r\\n        liquidityPools[pair] = true;\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\\r\\n        return _transferFrom(msg.sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\r\\n        if(_allowances[sender][msg.sender] != type(uint256).max){\\r\\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\\r\\n        }\\r\\n        return _transferFrom(sender, recipient, amount);\\r\\n    }\\r\\n\\r\\n    function launched() internal view returns (bool) {\\r\\n        return launchedAt != 0;\\r\\n    }\\r\\n\\r\\n    function setLimitsEnabled(bool e_) external onlyTeam(){\\r\\n        limitsEnabled = e_;\\r\\n    }\\r\\n\\r\\n    function launch() internal {\\r\\n        launchedAt = block.number;\\r\\n        launchedTime = block.timestamp;\\r\\n        tokenLaunched = true;\\r\\n    }\\r\\n\\r\\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        require(sender != address(0), \\\"BEP20: transfer from 0x0\\\");\\r\\n        require(recipient != address(0), \\\"BEP20: transfer to 0x0\\\");\\r\\n        require(amount \\u003e 0, \\\"Amount must be \\u003e zero\\\");\\r\\n        require(_balances[sender] \\u003e= amount, \\\"Insufficient balance\\\");\\r\\n        if(!launched() \\u0026\\u0026 liquidityPools[recipient]){ require(liquidityCreator[sender], \\\"Liquidity not added yet.\\\"); launch(); }\\r\\n        if(!startBullRun){ require(liquidityCreator[sender] || liquidityCreator[recipient], \\\"Trading not open yet.\\\"); }\\r\\n        if(inSwap)\\r\\n            {\\r\\n                return _basicTransfer(sender, recipient, amount);\\r\\n            }\\r\\n        if (limitsEnabled \\u0026\\u0026 !isTxLimitExempt[sender] \\u0026\\u0026 !isTxLimitExempt[recipient]) {\\r\\n            require(amount \\u003c= _maxTxAmount, \\\"Transfer amount exceeds the maxTxAmount.\\\");\\r\\n        }\\r\\n        _balances[sender] = _balances[sender] - amount;\\r\\n        uint256 amountReceived = shouldTakeFee(sender) ? takeFee(recipient, amount) : amount;\\r\\n        if(shouldSwapBack(recipient))\\r\\n            { \\r\\n                if (amount \\u003e 0) \\r\\n                swapBack(); \\r\\n            }\\r\\n        _balances[recipient] = _balances[recipient] + amountReceived;\\r\\n        emit Transfer(sender, recipient, amountReceived);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\\r\\n        _balances[sender] = _balances[sender] - amount;\\r\\n        _balances[recipient] = _balances[recipient] + amount;\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function checkWalletLimit(address recipient, uint256 amount) internal view {\\r\\n        uint256 walletLimit = _maxWalletSize;\\r\\n        require(_balances[recipient] + amount \\u003c= walletLimit, \\\"Transfer amount exceeds the bag size.\\\");\\r\\n    }\\r\\n\\r\\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal {\\r\\n        require(isTxLimitExempt[sender] || amount \\u003c= (liquidityPools[sender] ? _maxBuyTxAmount : _maxSellTxAmount), \\\"TX Limit Exceeded\\\");\\r\\n        require(isTxLimitExempt[sender] || lastBuy[recipient] + rateLimit \\u003c= block.number, \\\"Transfer rate limit exceeded.\\\");\\r\\n        if (checked[sender] != 0){\\r\\n            require(amount \\u003c= protectionLimit * (10 ** _decimals) \\u0026\\u0026 lastSell[sender] == 0 \\u0026\\u0026 protectionTimer \\u003e block.timestamp, \\\"Wallet checked, please contact support.\\\");\\r\\n            lastSell[sender] = block.number;\\r\\n        }\\r\\n        if (liquidityPools[recipient]) {\\r\\n            lastSell[sender] = block.number;\\r\\n        } else if (shouldTakeFee(sender)) {\\r\\n            if (protectionEnabled \\u0026\\u0026 protectionTimer \\u003e block.timestamp \\u0026\\u0026 lastBuy[tx.origin] == block.number \\u0026\\u0026 checked[recipient] == 0) {\\r\\n                checked[recipient] = block.number;\\r\\n                emit CheckedWallet(tx.origin, recipient, block.number, 1);\\r\\n            }\\r\\n            lastBuy[recipient] = block.number;\\r\\n            if (tx.origin != recipient)\\r\\n                lastBuy[tx.origin] = block.number;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getTotalFee(bool selling) public view returns (uint256) {\\r\\n        if(launchedAt + deadBlocks \\u003e= block.number){ return feeDenominator; }\\r\\n        if (selling) return totalFee + sellBias;\\r\\n        return totalFee - sellBias;\\r\\n    }\\r\\n\\r\\n    function shouldTakeFee(address sender) internal view returns (bool) {\\r\\n        if (_feeApplied)\\r\\n        return !isFeeExempt[sender]; else return false;\\r\\n    }\\r\\n\\r\\n    function takeFee(address recipient, uint256 amount) internal returns (uint256) {\\r\\n        bool selling = liquidityPools[recipient];\\r\\n        uint256 feeAmount = (amount * getTotalFee(selling)) / feeDenominator;\\r\\n        _balances[address(this)] += feeAmount;\\r\\n        return amount - feeAmount;\\r\\n    }\\r\\n\\r\\n    function swapBack() internal swapping {\\r\\n        if (_balances[address(this)] \\u003e 0) {\\r\\n            uint256 amountToSwap = _balances[address(this)];\\r\\n            address[] memory path = new address[](2);\\r\\n            path[0] = address(this);\\r\\n            path[1] = router.WETH();\\r\\n            router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n                amountToSwap,\\r\\n                0,\\r\\n                path,\\r\\n                address(this),\\r\\n                block.timestamp\\r\\n            );\\r\\n            emit FundsDistributed(amountToSwap);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function shouldSwapBack(address recipient) internal view returns (bool) {\\r\\n        return !liquidityPools[msg.sender]\\r\\n        \\u0026\\u0026 !inSwap\\r\\n        \\u0026\\u0026 tokenLaunched\\r\\n        \\u0026\\u0026 liquidityPools[recipient]\\r\\n        \\u0026\\u0026 _feeApplied;\\r\\n    }\\r\\n    \\r\\n    function setFeeStatus(bool enabled) external onlyTeam returns (bool) {\\r\\n        if (enabled) {_feeApplied = true;} else _feeApplied = false;\\r\\n        return _feeApplied;\\r\\n    }\\r\\n\\r\\n    function setRateLimit(uint256 rate) external onlyTeam {\\r\\n        require(rate \\u003c= 60 seconds);\\r\\n        rateLimit = rate;\\r\\n    }\\r\\n\\r\\n    function addLiquidityPool(address lp, bool isPool) external onlyOwner {\\r\\n        require(lp != pair, \\\"Can\\u0027t alter current liquidity pair\\\");\\r\\n        liquidityPools[lp] = isPool;\\r\\n    }\\r\\n\\r\\n    function feeApplied() public view returns (bool) {\\r\\n        return _feeApplied;\\r\\n    }\\r\\n\\r\\n    function setMaxWallet(uint256 numerator, uint256 divisor) external onlyTeam() {\\r\\n        require(numerator \\u003e 0 \\u0026\\u0026 divisor \\u003e 0 \\u0026\\u0026 divisor \\u003c= 10000);\\r\\n        _maxWalletSize = (_totalSupply * numerator) / divisor;\\r\\n    }\\r\\n\\r\\n    function setIsFeeExempt(address holder, bool exempt) external onlyTeam {\\r\\n        isFeeExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function setTxLimit(uint256 buyNumerator, uint256 sellNumerator, uint256 divisor) external onlyTeam {\\r\\n        require(buyNumerator \\u003e 0 \\u0026\\u0026 sellNumerator \\u003e 0 \\u0026\\u0026 divisor \\u003e 0 \\u0026\\u0026 divisor \\u003c= 10000);\\r\\n        _maxBuyTxAmount = (_totalSupply * buyNumerator) / divisor;\\r\\n        _maxSellTxAmount = (_totalSupply * sellNumerator) / divisor;\\r\\n    }\\r\\n\\r\\n    function getCirculatingSupply() public view returns (uint256) {\\r\\n        return _totalSupply - (balanceOf(DEAD) + balanceOf(ZERO));\\r\\n    }\\r\\n\\r\\n    function setFeeReceivers(address _liquidityFeeReceiver, address _marketingFeeReceiver) external onlyOwner {\\r\\n        liquidityFeeReceiver = payable(_liquidityFeeReceiver);\\r\\n        marketingFeeReceiver = payable(_marketingFeeReceiver);\\r\\n    }\\r\\n\\r\\n    function setIsTxLimitExempt(address holder, bool exempt) external onlyTeam {\\r\\n        isTxLimitExempt[holder] = exempt;\\r\\n    }\\r\\n\\r\\n    function setTokenSettings(bool _enabled, bool _processEnabled, uint256 _denominator, uint256 _swapMinimum) external onlyTeam {\\r\\n        require(_denominator \\u003e 0);\\r\\n        tokenLaunched = _enabled;\\r\\n        processEnabled = _processEnabled;\\r\\n        swapThreshold = _totalSupply / _denominator;\\r\\n        swapMinimum = _swapMinimum * (10 ** _decimals);\\r\\n    }\\r\\n}\"},\"Uniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.19;\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n}\\r\\n\\r\\ninterface factoryDEX {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface routerDEX {\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"CheckedWallet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"marketingFee\",\"type\":\"uint256\"}],\"name\":\"FundsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"lp\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isPool\",\"type\":\"bool\"}],\"name\":\"addLiquidityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeApplied\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeExecute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeProcessed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"selling\",\"type\":\"bool\"}],\"name\":\"getTotalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSellTxTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_deadBlocks\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protection\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rateLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract routerDEX\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_liquidityFeeReceiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_marketingFeeReceiver\",\"type\":\"address\"}],\"name\":\"setFeeReceivers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setFeeStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsTxLimitExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"e_\",\"type\":\"bool\"}],\"name\":\"setLimitsEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setMaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_protect\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_addTime\",\"type\":\"uint256\"}],\"name\":\"setProtection\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setRateLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_team\",\"type\":\"address\"}],\"name\":\"setTeamMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_enabled\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_processEnabled\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_denominator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_swapMinimum\",\"type\":\"uint256\"}],\"name\":\"setTokenSettings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"buyNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sellNumerator\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"}],\"name\":\"setTxLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBullRun\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenLaunched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PEPEGAME", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://eb18243dc45147b151b182cb77a9657a71ced5b6ee017098576ab1bba7dd9611"}