{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/main/payment-plan/BendDaoMigrationLogic.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { Item, Plan } from \\\"./PaymentPlanTypes.sol\\\";\\nimport { AddressProvider } from \\\"../../main/AddressProvider.sol\\\";\\nimport { IWalletBendDao } from \\\"../../interfaces/core/IWalletBendDao.sol\\\";\\nimport { ICyanConduit } from \\\"../../interfaces/conduit/ICyanConduit.sol\\\";\\nimport { DataTypes as BDaoDataTypes } from \\\"../../thirdparty/benddao/DataTypes.sol\\\";\\nimport { ILendPoolLoan as IBDaoLendPoolLoan } from \\\"../../thirdparty/benddao/ILendPoolLoan.sol\\\";\\n\\nlibrary BendDaoMigrationLogic {\\n    AddressProvider private constant addressProvider = AddressProvider(0xCF9A19D879769aDaE5e4f31503AAECDa82568E55);\\n\\n    function migrateBendDaoPlan(\\n        Item calldata item,\\n        Plan calldata plan,\\n        address cyanWallet,\\n        address currency\\n    ) external {\\n        IBDaoLendPoolLoan bendDaoLendPoolLoan = IBDaoLendPoolLoan(addressProvider.addresses(\\\"BENDDAO_LEND_POOL_LOAN\\\"));\\n        uint256 loanId = bendDaoLendPoolLoan.getCollateralLoanId(item.contractAddress, item.tokenId);\\n        (, uint256 loanAmount) = bendDaoLendPoolLoan.getLoanReserveBorrowAmount(loanId);\\n\\n        BDaoDataTypes.LoanData memory loanData = bendDaoLendPoolLoan.getLoan(loanId);\\n        require(loanData.state == BDaoDataTypes.LoanState.Active, \\\"Loan not active\\\");\\n        require(loanData.borrower == msg.sender, \\\"Not owner of the loan\\\");\\n        require(\\n            loanData.reserveAsset == (currency == address(0) ? addressProvider.addresses(\\\"WETH\\\") : currency),\\n            \\\"invalid currency\\\"\\n        );\\n        require(plan.amount >= loanAmount, \\\"invalid amount\\\");\\n\\n        IWalletBendDao(cyanWallet).executeModule(\\n            abi.encodeWithSelector(\\n                IWalletBendDao.repayBendDaoLoan.selector,\\n                item.contractAddress,\\n                item.tokenId,\\n                loanAmount,\\n                currency\\n            )\\n        );\\n        ICyanConduit(addressProvider.addresses(\\\"CYAN_CONDUIT\\\")).transferERC721(\\n            loanData.borrower,\\n            cyanWallet,\\n            item.contractAddress,\\n            item.tokenId\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/core/IWalletBendDao.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./IWallet.sol\\\";\\n\\ninterface IWalletBendDao is IWallet {\\n    function repayBendDaoLoan(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address currency\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/conduit/ICyanConduit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nenum ConduitItemType {\\n    NATIVE, // unused\\n    ERC20,\\n    ERC721,\\n    ERC1155\\n}\\n\\nstruct ConduitTransfer {\\n    ConduitItemType itemType;\\n    address collection;\\n    address from;\\n    address to;\\n    uint256 identifier;\\n    uint256 amount;\\n}\\n\\nstruct ConduitBatch1155Transfer {\\n    address collection;\\n    address from;\\n    address to;\\n    uint256[] ids;\\n    uint256[] amounts;\\n}\\n\\ninterface ICyanConduit {\\n    error ChannelClosed(address channel);\\n    error ChannelStatusAlreadySet(address channel, bool isOpen);\\n    error InvalidItemType();\\n    error InvalidAdmin();\\n\\n    event ChannelUpdated(address indexed channel, bool open);\\n\\n    function execute(ConduitTransfer[] calldata transfers) external returns (bytes4 magicValue);\\n\\n    function executeBatch1155(ConduitBatch1155Transfer[] calldata batch1155Transfers)\\n        external\\n        returns (bytes4 magicValue);\\n\\n    function executeWithBatch1155(\\n        ConduitTransfer[] calldata standardTransfers,\\n        ConduitBatch1155Transfer[] calldata batch1155Transfers\\n    ) external returns (bytes4 magicValue);\\n\\n    function transferERC20(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function transferERC721(\\n        address from,\\n        address to,\\n        address collection,\\n        uint256 tokenId\\n    ) external;\\n\\n    function transferERC1155(\\n        address from,\\n        address to,\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n\\n    function updateChannel(address channel, bool isOpen) external;\\n}\\n\"\r\n    },\r\n    \"contracts/main/AddressProvider.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @title Cyan AddressProvider contract\\n/// @author Bulgantamir Gankhuyag - <bulgaa@usecyan.com>\\n/// @author Naranbayar Uuganbayar - <naba@usecyan.com>\\ncontract AddressProvider is Ownable {\\n    error AddressNotFound(bytes32 id);\\n\\n    event AddressSet(bytes32 id, address newAddress);\\n\\n    mapping(bytes32 => address) public addresses;\\n\\n    constructor(address owner) {\\n        transferOwnership(owner);\\n    }\\n\\n    // @dev Sets an address for an id replacing the address saved in the addresses map\\n    // @param id The id\\n    // @param newAddress The address to set\\n    function setAddress(bytes32 id, address newAddress) external onlyOwner {\\n        addresses[id] = newAddress;\\n        emit AddressSet(id, newAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/benddao/ILendPoolLoan.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nimport \\\"./DataTypes.sol\\\";\\n\\ninterface ILendPoolLoan {\\n    function getCollateralLoanId(address nftAsset, uint256 nftTokenId) external view returns (uint256);\\n\\n    function getLoan(uint256 loanId) external view returns (DataTypes.LoanData memory loanData);\\n\\n    function getLoanReserveBorrowAmount(uint256 loanId) external view returns (address, uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/main/payment-plan/PaymentPlanTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n// DataTypes\\nenum PaymentPlanStatus {\\n    BNPL_CREATED,\\n    BNPL_FUNDED,\\n    BNPL_ACTIVE,\\n    BNPL_DEFAULTED,\\n    BNPL_REJECTED,\\n    BNPL_COMPLETED,\\n    BNPL_LIQUIDATED,\\n    PAWN_ACTIVE,\\n    PAWN_DEFAULTED,\\n    PAWN_COMPLETED,\\n    PAWN_LIQUIDATED\\n}\\nstruct Plan {\\n    uint256 amount;\\n    uint32 downPaymentPercent;\\n    uint32 interestRate;\\n    uint32 serviceFeeRate;\\n    uint32 term;\\n    uint8 totalNumberOfPayments;\\n    uint8 counterPaidPayments;\\n    uint8 autoRepayStatus;\\n}\\nstruct PaymentPlan {\\n    Plan plan;\\n    uint256 createdDate;\\n    address cyanWalletAddress;\\n    PaymentPlanStatus status;\\n}\\n\\nstruct Item {\\n    uint256 amount;\\n    uint256 tokenId;\\n    address contractAddress;\\n    address cyanVaultAddress;\\n    // 1 -> ERC721\\n    // 2 -> ERC1155\\n    // 3 -> CryptoPunks\\n    uint8 itemType;\\n}\\n\\n// Errors\\nerror InvalidSender();\\nerror InvalidBlockNumber();\\nerror InvalidSignature();\\nerror InvalidServiceFeeRate();\\nerror InvalidTokenPrice();\\nerror InvalidInterestRate();\\nerror InvalidDownPaymentPercent();\\nerror InvalidDownPayment();\\nerror InvalidAmount();\\nerror InvalidTerm();\\nerror InvalidPaidCount();\\nerror InvalidStage();\\nerror InvalidAddress();\\nerror InvalidAutoRepaymentDate();\\nerror InvalidAutoRepaymentStatus();\\nerror InvalidTotalNumberOfPayments();\\nerror InvalidReviveDate();\\nerror InvalidItem();\\nerror InvalidBaseDiscountRate();\\nerror InvalidApeCoinPlan();\\nerror InvalidBendDaoPlan();\\nerror InvalidCurrency();\\n\\nerror EthTransferFailed();\\n\\nerror PaymentPlanAlreadyExists();\\nerror PaymentPlanNotFound();\\n\"\r\n    },\r\n    \"contracts/thirdparty/benddao/DataTypes.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\nlibrary DataTypes {\\n    struct ReserveData {\\n        //stores the reserve configuration\\n        ReserveConfigurationMap configuration;\\n        //the liquidity index. Expressed in ray\\n        uint128 liquidityIndex;\\n        //variable borrow index. Expressed in ray\\n        uint128 variableBorrowIndex;\\n        //the current supply rate. Expressed in ray\\n        uint128 currentLiquidityRate;\\n        //the current variable borrow rate. Expressed in ray\\n        uint128 currentVariableBorrowRate;\\n        uint40 lastUpdateTimestamp;\\n        //tokens addresses\\n        address bTokenAddress;\\n        address debtTokenAddress;\\n        //address of the interest rate strategy\\n        address interestRateAddress;\\n        //the id of the reserve. Represents the position in the list of the active reserves\\n        uint8 id;\\n    }\\n\\n    struct NftData {\\n        //stores the nft configuration\\n        NftConfigurationMap configuration;\\n        //address of the bNFT contract\\n        address bNftAddress;\\n        //the id of the nft. Represents the position in the list of the active nfts\\n        uint8 id;\\n        uint256 maxSupply;\\n        uint256 maxTokenId;\\n    }\\n\\n    struct ReserveConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 48-55: Decimals\\n        //bit 56: Reserve is active\\n        //bit 57: reserve is frozen\\n        //bit 58: borrowing is enabled\\n        //bit 59: stable rate borrowing enabled\\n        //bit 60-63: reserved\\n        //bit 64-79: reserve factor\\n        uint256 data;\\n    }\\n\\n    struct NftConfigurationMap {\\n        //bit 0-15: LTV\\n        //bit 16-31: Liq. threshold\\n        //bit 32-47: Liq. bonus\\n        //bit 56: NFT is active\\n        //bit 57: NFT is frozen\\n        uint256 data;\\n    }\\n\\n    /**\\n     * @dev Enum describing the current state of a loan\\n     * State change flow:\\n     *  Created -> Active -> Repaid\\n     *                    -> Auction -> Defaulted\\n     */\\n    enum LoanState {\\n        // We need a default that is not 'Created' - this is the zero value\\n        None,\\n        // The loan data is stored, but not initiated yet.\\n        Created,\\n        // The loan has been initialized, funds have been delivered to the borrower and the collateral is held.\\n        Active,\\n        // The loan is in auction, higest price liquidator will got chance to claim it.\\n        Auction,\\n        // The loan has been repaid, and the collateral has been returned to the borrower. This is a terminal state.\\n        Repaid,\\n        // The loan was delinquent and collateral claimed by the liquidator. This is a terminal state.\\n        Defaulted\\n    }\\n\\n    struct LoanData {\\n        //the id of the nft loan\\n        uint256 loanId;\\n        //the current state of the loan\\n        LoanState state;\\n        //address of borrower\\n        address borrower;\\n        //address of nft asset token\\n        address nftAsset;\\n        //the id of nft token\\n        uint256 nftTokenId;\\n        //address of reserve asset token\\n        address reserveAsset;\\n        //scaled borrow amount. Expressed in ray\\n        uint256 scaledAmount;\\n        //start time of first bid time\\n        uint256 bidStartTimestamp;\\n        //bidder address of higest bid\\n        address bidderAddress;\\n        //price of higest bid\\n        uint256 bidPrice;\\n        //borrow amount of loan\\n        uint256 bidBorrowAmount;\\n        //bidder address of first bid\\n        address firstBidderAddress;\\n    }\\n\\n    struct ExecuteDepositParams {\\n        address initiator;\\n        address asset;\\n        uint256 amount;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteWithdrawParams {\\n        address initiator;\\n        address asset;\\n        uint256 amount;\\n        address to;\\n    }\\n\\n    struct ExecuteBorrowParams {\\n        address initiator;\\n        address asset;\\n        uint256 amount;\\n        address nftAsset;\\n        uint256 nftTokenId;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteBatchBorrowParams {\\n        address initiator;\\n        address[] assets;\\n        uint256[] amounts;\\n        address[] nftAssets;\\n        uint256[] nftTokenIds;\\n        address onBehalfOf;\\n        uint16 referralCode;\\n    }\\n\\n    struct ExecuteRepayParams {\\n        address initiator;\\n        address nftAsset;\\n        uint256 nftTokenId;\\n        uint256 amount;\\n    }\\n\\n    struct ExecuteBatchRepayParams {\\n        address initiator;\\n        address[] nftAssets;\\n        uint256[] nftTokenIds;\\n        uint256[] amounts;\\n    }\\n\\n    struct ExecuteAuctionParams {\\n        address initiator;\\n        address nftAsset;\\n        uint256 nftTokenId;\\n        uint256 bidPrice;\\n        address onBehalfOf;\\n    }\\n\\n    struct ExecuteRedeemParams {\\n        address initiator;\\n        address nftAsset;\\n        uint256 nftTokenId;\\n        uint256 amount;\\n        uint256 bidFine;\\n    }\\n\\n    struct ExecuteLiquidateParams {\\n        address initiator;\\n        address nftAsset;\\n        uint256 nftTokenId;\\n        uint256 amount;\\n    }\\n\\n    struct ExecuteLendPoolStates {\\n        uint256 pauseStartTime;\\n        uint256 pauseDurationTime;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/core/IWallet.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\nimport \\\"../../thirdparty/opensea/ISeaport.sol\\\";\\n\\ninterface IWallet {\\n    function executeModule(bytes memory) external returns (bytes memory);\\n\\n    function transferNonLockedERC721(\\n        address,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function transferNonLockedERC1155(\\n        address,\\n        uint256,\\n        uint256,\\n        address\\n    ) external;\\n\\n    function transferNonLockedCryptoPunk(uint256, address) external;\\n\\n    function setLockedERC721Token(\\n        address,\\n        uint256,\\n        bool\\n    ) external;\\n\\n    function increaseLockedERC1155Token(\\n        address,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function decreaseLockedERC1155Token(\\n        address,\\n        uint256,\\n        uint256\\n    ) external;\\n\\n    function setLockedCryptoPunk(uint256, bool) external;\\n\\n    function autoPay(\\n        uint256,\\n        uint256,\\n        uint8\\n    ) external;\\n\\n    function earlyUnwind(\\n        uint256,\\n        uint256,\\n        address,\\n        uint256,\\n        ISeaport.OfferData memory\\n    ) external;\\n\\n    function isLockedNFT(address, uint256) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/thirdparty/opensea/ISeaport.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.19;\\n\\n/// @title Seaport Contract interface\\ninterface ISeaport {\\n    enum OrderType {\\n        FULL_OPEN,\\n        PARTIAL_OPEN,\\n        FULL_RESTRICTED,\\n        PARTIAL_RESTRICTED,\\n        CONTRACT\\n    }\\n    enum ItemType {\\n        NATIVE,\\n        ERC20,\\n        ERC721,\\n        ERC1155,\\n        ERC721_WITH_CRITERIA,\\n        ERC1155_WITH_CRITERIA\\n    }\\n    enum Side {\\n        OFFER,\\n        CONSIDERATION\\n    }\\n\\n    struct OfferItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n    }\\n    struct ConsiderationItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifierOrCriteria;\\n        uint256 startAmount;\\n        uint256 endAmount;\\n        address payable recipient;\\n    }\\n    struct OrderParameters {\\n        address offerer;\\n        address zone;\\n        OfferItem[] offer;\\n        ConsiderationItem[] consideration;\\n        OrderType orderType;\\n        uint256 startTime;\\n        uint256 endTime;\\n        bytes32 zoneHash;\\n        uint256 salt;\\n        bytes32 conduitKey;\\n        uint256 totalOriginalConsiderationItems;\\n    }\\n    struct FulfillmentComponent {\\n        uint256 orderIndex;\\n        uint256 itemIndex;\\n    }\\n    struct Fulfillment {\\n        FulfillmentComponent[] offerComponents;\\n        FulfillmentComponent[] considerationComponents;\\n    }\\n    struct CriteriaResolver {\\n        uint256 orderIndex;\\n        Side side;\\n        uint256 index;\\n        uint256 identifier;\\n        bytes32[] criteriaProof;\\n    }\\n    struct AdvancedOrder {\\n        OrderParameters parameters;\\n        uint120 numerator;\\n        uint120 denominator;\\n        bytes signature;\\n        bytes extraData;\\n    }\\n    struct ReceivedItem {\\n        ItemType itemType;\\n        address token;\\n        uint256 identifier;\\n        uint256 amount;\\n        address payable recipient;\\n    }\\n    struct Execution {\\n        ReceivedItem item;\\n        address offerer;\\n        bytes32 conduitKey;\\n    }\\n\\n    struct OfferData {\\n        AdvancedOrder[] orders;\\n        CriteriaResolver[] criteriaResolvers;\\n        Fulfillment[] fulfillments;\\n        address recipient;\\n    }\\n\\n    function matchAdvancedOrders(\\n        AdvancedOrder[] calldata orders,\\n        CriteriaResolver[] calldata criteriaResolvers,\\n        Fulfillment[] calldata fulfillments,\\n        address recipient\\n    ) external payable returns (Execution[] calldata executions);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 500\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[]", "ContractName": "BendDaoMigrationLogic", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "500", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}