{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Base64.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/AdventStars.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./StarSky.sol\\\";\\n\\n/*\\n *                               A celestial Advent Calendar,\\n *                   to accompany its holder throughout the advent days.\\n *\\n *              Every day until Dec. 24th, a new star will shine in the night\\n *                      sky, sometimes together with colorful nebulae.\\n *\\n *                 Each NFT will generate its own unique vibrant firmament.\\n *                Only at Christmas Eve the cosmic artwork will be complete.\\n *\\n *                 Next year? Restart it, and the magic will happen again.\\n *\\n *                                                                           %@@-\\n *                                                                          :%@@=\\n *\\n *\\n *    @@\\n *      @%\\n *      @@\\n *                                     .       . ...\\n *                          . .          ... .              .@:.\\n *                        . .   .\\n *                    .     . . .      ..       .\\n *      @                 .   . . . @ .    . .     .     .\\n *               .    .  .  . . ...*@-:.:... ....     .    .. .\\n *                  .-@- . .......     . .... ..  ..  . . .\\n *               .           ............: .... .. ..\\n *                  .. ..    .......... ..........   ..         ...    .               @@@\\n *                 . . .. @@ ...:......    ..........    .              .\\n *             .    .  .     ........::-%@:..........:.... ..    .\\n *                ...............::.::.    .:..:.. .....  ..  ..\\n *             .  ..  ........:.:.:::..::..:::..::.:..........  ...  ..\\n *               . .  ....:..:..::.:.::..:.....::...:........ ...  ...   ..\\n *                . .........:.:.::.:.::::...:...::::::.......... .   .    ..    .\\n *                . ...........::::....::::---::::::.::::.:........:.... ....\\n *            .   . ......:.:::.:::::::::.:...:.::::::::...::.:...... ...   ...  .      .\\n *            .    ............::.:..:::::::::::::-.::::::.:.::.:::..:....  .  ..       .\\n *             .    .............::::::::::    .::::::::.:.:.::::::.::. :-.... .  .\\n *        .    .  ..  ......:::::..:.:::::: @@ -:::::::::-:::::::-::::::... ...:.  .\\n *            . . ..  ..........:..:::.::::    ::::::::-:   :::-:::..:. :::.. ...\\n *                  .  ....    .:.:..::::.::.::::::-::--- @ ---:---:.    ..:..:: .: .   .. .\\n *           .    .  . .... @@ ..::::::::::-::::::-:--::-   --:-::---*@@=::::.::  :...\\n *                .  . ....    ....:.::::::.:::::::--:----::::------:.-.::::-.:.:  ...   ..\\n *            ..     . .  .........:.:...::::::--:--:----:   :-----:::...:.:-.::........ . .\\n *                . .  .   ..........:.::::::::::-:----:--:@%------:-:::----:::::::.. ..      .\\n *                    . ... ........:.:..:.:::::-:-:------:@=:-----=----:-:--:::::..-..:....\\n *                      .  ..   ...........:::::::-:--:------:  :----:-----:-:-:::::..:.. :\\n *                           .  .. . ..:.....::.:::-::    ----@@:--:-----:-:--::::::.::.: . ..\\n *                        .   ..  ............::::-:-- @@ ---:=+.--:---:-:--.   -:::.:.:.. ..   ..\\n *                          .       .  ..........::.::    ---::.:-------:---.=@ ::::::.:.....  .\\n *              :            ..   .   .. ....:::::::::::-:::-:-::---:---:--::   ::.:-::: ..... .\\n *                    .      .  .  ..    ...........::.:::-:------::::::   -:--::::::.:. ... . .\\n *                                 . .... . ... ::-:::::.::::::::.::-----@:--:::.:::-..:...  . .\\n *                                 .       . .::  ....:.::.:::-:-:-::..: ..::...::.-..      .\\n *                            .     . .  .       .   :. .:.:....:.::--::-::..:----.: .:-+- ...\\n *                                           .   .:..:-:...::::::::.::....::::..:.::..-#+::\\n *                                             ..... .   ..  ....:.:.. .:.::: ::... ..\\n *                                    @@   . .         .. . :.....  .::.:..:.... . .. ...  .\\n *                                                 . .. .  ..  ...::::.        . .:...\\n *                                                               .    .........\\n *\\n */\\n\\ncontract AdventStars is StarSky, ERC721, Ownable {\\n    uint256 public immutable MINT_END;\\n    uint256 public immutable PRICE;\\n    uint256 public constant MAX_SUPPLY = 432;\\n\\n    uint256 currentToken = 1;\\n\\n    mapping(uint256 => uint256) _seeds;\\n    mapping(uint256 => uint256) _tokenToYear;\\n    mapping(address => uint256) _discordUsersDiscount;\\n\\n    constructor(\\n        uint256 price,\\n        uint256 mintEnd\\n    ) ERC721(\\\"Advent Stars\\\", \\\"STARS\\\") {\\n        PRICE = price;\\n        MINT_END = mintEnd;\\n    }\\n\\n    /* Admin */\\n\\n    function withdraw() public onlyOwner {\\n        (bool success, ) = msg.sender.call{ value: address(this).balance }(\\\"\\\");\\n        require(success, \\\"fail\\\");\\n    }\\n\\n    function setDiscounts(\\n        address[] memory wallets,\\n        uint256[] memory discounts\\n    ) public onlyOwner {\\n        uint256 length = wallets.length;\\n        for (uint256 i = 0; i < length; ) {\\n            _discordUsersDiscount[wallets[i]] = discounts[i];\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /* Public Write */\\n\\n    function mint(uint256 amount) public payable {\\n        require(msg.value >= PRICE * amount, \\\"not enough ether\\\");\\n        require(block.timestamp < MINT_END, \\\"mint ended\\\");\\n        for (uint256 i = 0; i < amount; ) {\\n            _mint();\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    function restart(uint256 tokenId) public {\\n        require(msg.sender == ownerOf(tokenId), \\\"not the owner\\\");\\n        (uint256 month, uint256 day, uint256 year) = toDate(block.timestamp);\\n        require(2023 != year, \\\"not this year\\\");\\n        require(_tokenToYear[tokenId] != year, \\\"already restarted\\\");\\n        require((month == 11 && day > 23) || month == 12, \\\"too early\\\");\\n\\n        _tokenToYear[tokenId] = year;\\n        _seeds[tokenId] = uint256(\\n            keccak256(abi.encodePacked(blockhash(block.number - 1), tokenId))\\n        );\\n    }\\n\\n    function mintDiscount(uint256 amount) public payable {\\n        require(_discordUsersDiscount[msg.sender] > 0, \\\"you have no discount\\\");\\n        require(\\n            msg.value >=\\n                ((PRICE * amount) * 100) / _discordUsersDiscount[msg.sender],\\n            \\\"not enough ether\\\"\\n        );\\n        delete _discordUsersDiscount[msg.sender];\\n        require(block.timestamp < MINT_END, \\\"mint ended\\\");\\n        for (uint256 i = 0; i < amount; ) {\\n            _mint();\\n            unchecked {\\n                i++;\\n            }\\n        }\\n    }\\n\\n    /* Public Read */\\n\\n    function minted() public view returns (uint256) {\\n        return currentToken - 1;\\n    }\\n\\n    function tokenAtIndex(uint256 index) public view returns (uint256) {\\n        for (uint256 i = 1; i < currentToken; ) {\\n            if (msg.sender == ownerOf(i)) {\\n                if (index == 0) {\\n                    return i;\\n                } else {\\n                    index--;\\n                }\\n            }\\n\\n            unchecked {\\n                i = i + 1;\\n            }\\n        }\\n\\n        revert(\\\"you don't that many tokens\\\");\\n    }\\n\\n    function adventDay() public view returns (uint256) {\\n        (uint256 month, uint256 day, ) = toDate(block.timestamp);\\n\\n        if (month == 12 && day < 25) {\\n            return day;\\n        } else if (month == 12) {\\n            return 24;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function render(uint256 tokenId) public view returns (string memory) {\\n        (uint256 currentAdventDay, uint256 year) = _validateRequest(tokenId);\\n        return _render(_seeds[tokenId], currentAdventDay, year);\\n    }\\n\\n    function tokenURI(\\n        uint256 tokenId\\n    ) public view override returns (string memory) {\\n        (uint256 currentAdventDay, uint256 year) = _validateRequest(tokenId);\\n        return _json(tokenId, _seeds[tokenId], currentAdventDay, year);\\n    }\\n\\n    /* Possibly useful public utilities */\\n\\n    function toDate(\\n        uint256 s\\n    ) public pure returns (uint256 month, uint256 day, uint256 year) {\\n        uint256 z = s / 86400 + 719468;\\n        uint256 era = (z >= 0 ? z : z - 146096) / 146097;\\n        uint256 doe = z - era * 146097;\\n        uint256 yoe = (doe - doe / 1460 + doe / 36524 - doe / 146096) / 365;\\n        year = yoe + era * 400;\\n        uint256 doy = doe - (365 * yoe + yoe / 4 - yoe / 100);\\n        uint256 mp = (5 * doy + 2) / 153;\\n        day = doy - (153 * mp + 2) / 5 + 1;\\n        month = uint256(int256(mp) + (mp < 10 ? int256(3) : -9));\\n        year += (month <= 2 ? 1 : 0);\\n    }\\n\\n    /* Internal */\\n\\n    function _validateRequest(\\n        uint256 tokenId\\n    ) internal view returns (uint256 currentAdventDay, uint256 tokenYear) {\\n        require(_exists(tokenId), \\\"not a token\\\");\\n        tokenYear = _tokenToYear[tokenId];\\n        if (tokenYear == 0) {\\n            tokenYear = 2023;\\n        }\\n\\n        (uint256 month, uint256 day, uint256 currentYear) = toDate(\\n            block.timestamp\\n        );\\n\\n        if (tokenYear == currentYear && month == 12 && day <= 24) {\\n            currentAdventDay = day;\\n        } else if (tokenYear == currentYear && month < 12) {\\n            currentAdventDay = 0;\\n        } else {\\n            currentAdventDay = 24;\\n        }\\n    }\\n\\n    function _mint() internal {\\n        require(currentToken <= MAX_SUPPLY, \\\"beyond supply\\\");\\n        _seeds[currentToken] = uint256(\\n            keccak256(\\n                abi.encodePacked(blockhash(block.number - 1), currentToken)\\n            )\\n        );\\n        _mint(msg.sender, currentToken++);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/DynamicBuffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// Copyright (c) 2021 the ethier authors (github.com/divergencetech/ethier)\\n\\npragma solidity 0.8.22;\\n\\n/// @title DynamicBuffer\\n/// @author David Huber (@cxkoda) and Simon Fremaux (@dievardump). See also\\n///         https://raw.githubusercontent.com/dievardump/solidity-dynamic-buffer\\n/// @notice This library is used to allocate a big amount of container memory\\n//          which will be subsequently filled without needing to reallocate\\n///         memory.\\n/// @dev First, allocate memory.\\n///      Then use `buffer.appendUnchecked(theBytes)` or `appendSafe()` if\\n///      bounds checking is required.\\nlibrary DynamicBuffer {\\n    /// @notice Allocates container space for the DynamicBuffer\\n    /// @param capacity_ The intended max amount of bytes in the buffer\\n    /// @return buffer The memory location of the buffer\\n    /// @dev Allocates `capacity_ + 0x60` bytes of space\\n    ///      The buffer array starts at the first container data position,\\n    ///      (i.e. `buffer = container + 0x20`)\\n    function allocate(\\n        uint256 capacity_\\n    ) internal pure returns (bytes memory buffer) {\\n        assembly {\\n            // Get next-free memory address\\n            let container := mload(0x40)\\n\\n            // Allocate memory by setting a new next-free address\\n            {\\n                // Add 2 x 32 bytes in size for the two length fields\\n                // Add 32 bytes safety space for 32B chunked copy\\n                let size := add(capacity_, 0x60)\\n                let newNextFree := add(container, size)\\n                mstore(0x40, newNextFree)\\n            }\\n\\n            // Set the correct container length\\n            {\\n                let length := add(capacity_, 0x40)\\n                mstore(container, length)\\n            }\\n\\n            // The buffer starts at idx 1 in the container (0 is length)\\n            buffer := add(container, 0x20)\\n\\n            // Init content with length 0\\n            mstore(buffer, 0)\\n        }\\n\\n        return buffer;\\n    }\\n\\n    /// @notice Appends data to buffer, and update buffer length\\n    /// @param buffer the buffer to append the data to\\n    /// @param data the data to append\\n    /// @dev Does not perform out-of-bound checks (container capacity)\\n    ///      for efficiency.\\n    function appendUnchecked(\\n        bytes memory buffer,\\n        bytes memory data\\n    ) internal pure {\\n        assembly {\\n            let length := mload(data)\\n            for {\\n                data := add(data, 0x20)\\n                let dataEnd := add(data, length)\\n                let copyTo := add(buffer, add(mload(buffer), 0x20))\\n            } lt(data, dataEnd) {\\n                data := add(data, 0x20)\\n                copyTo := add(copyTo, 0x20)\\n            } {\\n                // Copy 32B chunks from data to buffer.\\n                // This may read over data array boundaries and copy invalid\\n                // bytes, which doesn't matter in the end since we will\\n                // later set the correct buffer length, and have allocated an\\n                // additional word to avoid buffer overflow.\\n                mstore(copyTo, mload(data))\\n            }\\n\\n            // Update buffer length\\n            mstore(buffer, add(mload(buffer), length))\\n        }\\n    }\\n\\n    /// @notice Appends data to buffer, and update buffer length\\n    /// @param buffer the buffer to append the data to\\n    /// @param data the data to append\\n    /// @dev Performs out-of-bound checks and calls `appendUnchecked`.\\n    function appendSafe(bytes memory buffer, bytes memory data) internal pure {\\n        checkOverflow(buffer, data.length);\\n        appendUnchecked(buffer, data);\\n    }\\n\\n    /// @notice Appends data encoded as Base64 to buffer.\\n    /// @param fileSafe  Whether to replace '+' with '-' and '/' with '_'.\\n    /// @param noPadding Whether to strip away the padding.\\n    /// @dev Encodes `data` using the base64 encoding described in RFC 4648.\\n    /// See: https://datatracker.ietf.org/doc/html/rfc4648\\n    /// Author: Modified from Solady (https://github.com/vectorized/solady/blob/main/src/utils/Base64.sol)\\n    /// Author: Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/Base64.sol)\\n    /// Author: Modified from (https://github.com/Brechtpd/base64/blob/main/base64.sol) by Brecht Devos.\\n    function appendSafeBase64(\\n        bytes memory buffer,\\n        bytes memory data,\\n        bool fileSafe,\\n        bool noPadding\\n    ) internal pure {\\n        uint256 dataLength = data.length;\\n\\n        if (data.length == 0) {\\n            return;\\n        }\\n\\n        uint256 encodedLength;\\n        uint256 r;\\n        assembly {\\n            // For each 3 bytes block, we will have 4 bytes in the base64\\n            // encoding: `encodedLength = 4 * divCeil(dataLength, 3)`.\\n            // The `shl(2, ...)` is equivalent to multiplying by 4.\\n            encodedLength := shl(2, div(add(dataLength, 2), 3))\\n\\n            r := mod(dataLength, 3)\\n            if noPadding {\\n                // if r == 0 => no modification\\n                // if r == 1 => encodedLength -= 2\\n                // if r == 2 => encodedLength -= 1\\n                encodedLength := sub(\\n                    encodedLength,\\n                    add(iszero(iszero(r)), eq(r, 1))\\n                )\\n            }\\n        }\\n\\n        checkOverflow(buffer, encodedLength);\\n\\n        assembly {\\n            let nextFree := mload(0x40)\\n\\n            // Store the table into the scratch space.\\n            // Offsetted by -1 byte so that the `mload` will load the character.\\n            // We will rewrite the free memory pointer at `0x40` later with\\n            // the allocated size.\\n            mstore(0x1f, \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdef\\\")\\n            mstore(\\n                0x3f,\\n                sub(\\n                    \\\"ghijklmnopqrstuvwxyz0123456789-_\\\",\\n                    // The magic constant 0x0230 will translate \\\"-_\\\" + \\\"+/\\\".\\n                    mul(iszero(fileSafe), 0x0230)\\n                )\\n            )\\n\\n            // Skip the first slot, which stores the length.\\n            let ptr := add(add(buffer, 0x20), mload(buffer))\\n            let end := add(data, dataLength)\\n\\n            // Run over the input, 3 bytes at a time.\\n            // prettier-ignore\\n            // solhint-disable-next-line no-empty-blocks\\n            for {} 1 {} {\\n                    data := add(data, 3) // Advance 3 bytes.\\n                    let input := mload(data)\\n\\n                    // Write 4 bytes. Optimized for fewer stack operations.\\n                    mstore8(    ptr    , mload(and(shr(18, input), 0x3F)))\\n                    mstore8(add(ptr, 1), mload(and(shr(12, input), 0x3F)))\\n                    mstore8(add(ptr, 2), mload(and(shr( 6, input), 0x3F)))\\n                    mstore8(add(ptr, 3), mload(and(        input , 0x3F)))\\n                    \\n                    ptr := add(ptr, 4) // Advance 4 bytes.\\n                    // prettier-ignore\\n                    if iszero(lt(data, end)) { break }\\n                }\\n\\n            if iszero(noPadding) {\\n                // Offset `ptr` and pad with '='. We can simply write over the end.\\n                mstore8(sub(ptr, iszero(iszero(r))), 0x3d) // Pad at `ptr - 1` if `r > 0`.\\n                mstore8(sub(ptr, shl(1, eq(r, 1))), 0x3d) // Pad at `ptr - 2` if `r == 1`.\\n            }\\n\\n            mstore(buffer, add(mload(buffer), encodedLength))\\n            mstore(0x40, nextFree)\\n        }\\n    }\\n\\n    /// @notice Returns the capacity of a given buffer.\\n    function capacity(bytes memory buffer) internal pure returns (uint256) {\\n        uint256 cap;\\n        assembly {\\n            cap := sub(mload(sub(buffer, 0x20)), 0x40)\\n        }\\n        return cap;\\n    }\\n\\n    /// @notice Reverts if the buffer will overflow after appending a given\\n    /// number of bytes.\\n    function checkOverflow(\\n        bytes memory buffer,\\n        uint256 addedLength\\n    ) internal pure {\\n        uint256 cap = capacity(buffer);\\n        uint256 newLength = buffer.length + addedLength;\\n        if (cap < newLength) {\\n            revert(\\\"DynamicBuffer: Appending out of bounds.\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/StarSky.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.22;\\n\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport \\\"./DynamicBuffer.sol\\\";\\n\\ncontract StarSky {\\n    using Strings for uint8;\\n    using Strings for uint16;\\n    using Strings for uint256;\\n\\n    string constant html1 =\\n        \\\"<!DOCTYPE html><html lang='en'> <head> <meta charset='UTF-8'> <meta name='viewport' content='width=device-width, initial-scale=1.0, viewport-fit=cover'> <title>Advent Stars</title> <style> * { margin: 0; padding: 0; border: 0; } body { overflow: hidden; } </style></head><body>\\\";\\n    string constant html2 = \\\"</body></html>\\\";\\n\\n    bytes constant svg1 =\\n        \\\"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 600 600' width='100%' height='100%'> <defs><style> @keyframes ifl { 0% { opacity: 1 } 40% { opacity: 0.3; }  100% { opacity: 0.8; } } #star { animation: ifl 20s infinite alternate-reverse; } #sky {transform-origin: center;} .year {font: 20px Times;fill: rgb(153,153,153);} .t {fill: transparent; } .sg { stroke: rgb(153,153,153) } .p { font: 25px Times; } .w { fill: white; }</style> <clipPath id='frame'><circle cx='300' cy='300' r='420' /></clipPath><filter id='blur' filterUnits='userSpaceOnUse' x='-50%' y='-50%' width='200%' height='200%'> <feGaussianBlur in='SourceGraphic' stdDeviation='5' result='blur5' /> <feGaussianBlur in='SourceGraphic' stdDeviation='10' result='blur10' /> <feGaussianBlur in='SourceGraphic' stdDeviation='20' result='blur30' /> <feMerge result='merged'> <feMergeNode in='blur10' /> <feMergeNode in='blur30' /> </feMerge> <feMerge > <feMergeNode in='blur5' /> <feMergeNode in='merged' /> </feMerge> </filter> \\\";\\n    bytes constant svg2 =\\n        \\\" </defs> <rect x='0' y='0' width='600' height='600' class='sg' fill='black' />  <g id='sky' transform='rotate(\\\";\\n    bytes constant svg3 = \\\") scale(0.7)' clip-path='url(#frame)'>\\\";\\n    bytes constant svg4 =\\n        \\\"</g> <circle cx='300' cy='300' r='294' class='t sg' />\\\";\\n    bytes constant svg5 =\\n        \\\"<line class='sg' x1='0' x2='40' y1='0' y2='40' /> <line class='sg' x1='600' x2='560' y1='0' y2='40' /> <line class='sg' x1='0' x2='40' y1='600' y2='560' /> <line class='sg' x1='600' x2='560' y1='600' y2='560' /></svg>\\\";\\n\\n    bytes constant text1 =\\n        \\\"<circle cx='49' cy='51' r='13' class='t sg' /><text class='year' x='44' y='57'>\\\";\\n    bytes constant text2 =\\n        \\\"<circle cx='551' cy='51' r='13' class='t sg' /><text class='year' x='546' y='57'>\\\";\\n    bytes constant text3 =\\n        \\\"<circle cx='49' cy='549' r='13' class='t sg' /><text class='year' x='44' y='556'>\\\";\\n    bytes constant text4 =\\n        \\\"<circle cx='551' cy='549' r='13' class='t sg' /><text class='year' x='546' y='556'>\\\";\\n    bytes constant textClose = \\\"</text>\\\";\\n    bytes constant frame =\\n        \\\"<rect x='0' y='0' width='600' height='600' class='t sg' />\\\";\\n\\n    bytes constant placeholder0 =\\n        \\\"<circle cx='300' cy='300' r='50' filter='url(#pb)' id='star' fill='hsl(\\\";\\n    bytes constant placeholder1 =\\n        \\\",100%,60%)' /><circle cx='300' cy='300' r='30' filter='url(#pbc)' id='star' fill='rgba(255,255,255,0.5)' /><text text-anchor='middle' x='50%' y='47%' width='600' heigh='50' class='p w'>The first Star will appear on the</text> <text text-anchor='middle' x='50%' y='53%' width='600' heigh='50' class='p w'>first of December</text>\\\";\\n    bytes constant placeholderBlur =\\n        \\\"<filter id='pb' filterUnits='userSpaceOnUse' x='-50%' y='-50%' width='200%' height='200%'> <feGaussianBlur in='SourceGraphic' stdDeviation='50' result='b1' /> <feGaussianBlur in='SourceGraphic' stdDeviation='70' result='b2' /> <feGaussianBlur in='SourceGraphic' stdDeviation='120' result='b3' /> <feMerge result='m'> <feMergeNode in='b1' /> <feMergeNode in='b2' /> </feMerge> <feMerge> <feMergeNode in='b3' /> <feMergeNode in='m' /> </feMerge> </filter><filter id='pbc' filterUnits='userSpaceOnUse' x='-50%' y='-50%' width='200%' height='200%'> <feGaussianBlur in='SourceGraphic' stdDeviation='10' result='b1' /> <feGaussianBlur in='SourceGraphic' stdDeviation='30' result='b2' /> <feGaussianBlur in='SourceGraphic' stdDeviation='40' result='b3' /> <feMerge result='m'> <feMergeNode in='b1' /> <feMergeNode in='b2' /> </feMerge> <feMerge> <feMergeNode in='b3' /> <feMergeNode in='m' /> </feMerge> </filter>\\\";\\n\\n    bytes constant star0 = \\\"<circle cx='\\\";\\n    bytes constant star1 = \\\"' cy='\\\";\\n    bytes constant star2 = \\\"' r='\\\";\\n    bytes constant star3 = \\\"' id='star' style='animation-duration:\\\";\\n    bytes constant star4 = \\\"s;' fill='rgba(\\\";\\n    bytes constant starComma = \\\",\\\";\\n    bytes constant star5 = \\\")' filter='url(#blur)' />\\\";\\n\\n    bytes constant starCore0 = \\\"<circle cx='\\\";\\n    bytes constant starCore1 = \\\"' cy='\\\";\\n    bytes constant starCore2 = \\\"' r='\\\";\\n    bytes constant starCore3 = \\\"' class='w' />\\\";\\n\\n    bytes constant dustFilter0 = \\\"<filter id='d\\\";\\n    bytes constant dustFilter1 =\\n        \\\"' filterUnits='userSpaceOnUse' x='-50%' y='-50%' width='200%' height='200%'> <feGaussianBlur in='SourceGraphic' stdDeviation='\\\";\\n    bytes constant dustFilter2 =\\n        \\\"' result='b1' /> <feGaussianBlur in='SourceGraphic' stdDeviation='\\\";\\n    bytes constant dustFilter3 =\\n        \\\"' result='b2' /> <feGaussianBlur in='SourceGraphic' stdDeviation='\\\";\\n    bytes constant dustFilter4 =\\n        \\\"' result='b3' /> <feMerge result='b'> <feMergeNode in='b1' /> <feMergeNode in='b2' /> <feMergeNode in='b3' /> </feMerge> <feColorMatrix result='cb' in='b' type='matrix' values=' \\\";\\n    bytes constant dustFilter5 = \\\" 0 0 0 0 0 \\\";\\n    bytes constant dustFilter6 = \\\" 0 0 0 0 0 \\\";\\n    bytes constant dustFilter7 = \\\" 0 0 0 0 0 \\\";\\n    bytes constant dustFilter8 = \\\" 0' /> </filter>\\\";\\n\\n    bytes constant dust0 = \\\"<path d='M \\\";\\n    bytes constant dust1 = \\\"' filter='url(#d\\\";\\n    bytes constant dust2 = \\\")' stroke='white' stroke-width='\\\";\\n    bytes constant dust3 = \\\"px' />\\\";\\n\\n    uint256 constant STAR_TRAITS = 8;\\n    uint256 constant STAR_TRAIT_SIZE = 256 / STAR_TRAITS;\\n    uint256 constant STAR_TRAIT_MASK = 2 ** STAR_TRAIT_SIZE - 1;\\n\\n    uint256 constant CONSTELLATION_TRAITS = 10;\\n    uint256 constant CONSTELLATION_TRAIT_SIZE = 256 / CONSTELLATION_TRAITS;\\n    uint256 constant CONSTELLATION_TRAIT_MASK =\\n        2 ** CONSTELLATION_TRAIT_SIZE - 1;\\n\\n    struct Star {\\n        uint8 r;\\n        uint8 g;\\n        uint8 b;\\n        uint8 a;\\n        uint16 xRand;\\n        uint16 yRand;\\n        uint16 radius;\\n        uint16 duration;\\n        uint256 seed;\\n    }\\n\\n    struct Constellation {\\n        bool incRand;\\n        uint8 keepProb;\\n        uint16 rotation;\\n        uint16 maxDust;\\n        uint16 startX;\\n        uint16 startY;\\n        uint16 minX;\\n        uint16 minY;\\n        uint16 maxX;\\n        uint16 maxY;\\n    }\\n\\n    constructor() {}\\n\\n    function _renderName(\\n        uint256 randomness\\n    ) internal pure returns (bytes memory) {\\n        uint256 lettersCount = (_starTrait(randomness, 0) % 4) + 1;\\n        uint256 numbersCount = (_starTrait(randomness, 1) % 5) + 1;\\n        bytes memory letters;\\n        for (uint8 i = 2; i < lettersCount + 2; i++) {\\n            letters = abi.encodePacked(\\n                letters,\\n                uint8((randomness >> i) % 25) + 65\\n            );\\n        }\\n        bytes memory numbers;\\n        for (uint8 i = 7; i < 7 + numbersCount; i++) {\\n            numbers = abi.encodePacked(\\n                numbers,\\n                uint8((randomness >> i) % 10) + 48\\n            );\\n        }\\n\\n        return abi.encodePacked(letters, \\\" \\\", numbers);\\n    }\\n\\n    function _renderFloat(bytes memory buffer, uint16 number) internal pure {\\n        bytes memory numberStr = bytes(number.toString());\\n        if (numberStr.length == 4) {\\n            DynamicBuffer.appendUnchecked(\\n                buffer,\\n                abi.encodePacked(\\n                    numberStr[0],\\n                    numberStr[1],\\n                    \\\".\\\",\\n                    numberStr[2],\\n                    numberStr[3]\\n                )\\n            );\\n        } else if (numberStr.length == 3) {\\n            DynamicBuffer.appendUnchecked(\\n                buffer,\\n                abi.encodePacked(numberStr[0], \\\".\\\", numberStr[1], numberStr[2])\\n            );\\n        } else if (numberStr.length == 2) {\\n            DynamicBuffer.appendUnchecked(\\n                buffer,\\n                abi.encodePacked(\\\"0.\\\", numberStr[0], numberStr[1])\\n            );\\n        } else {\\n            DynamicBuffer.appendUnchecked(\\n                buffer,\\n                abi.encodePacked(\\\"0.0\\\", numberStr[0])\\n            );\\n        }\\n    }\\n\\n    function _render(\\n        uint256 seed,\\n        uint256 day,\\n        uint256 year\\n    ) internal pure returns (string memory) {\\n        Constellation memory constellation = _constellation(seed);\\n        return string(_renderSVG(seed, day, year, constellation));\\n    }\\n\\n    function _json(\\n        uint256 tokenId,\\n        uint256 seed,\\n        uint256 day,\\n        uint256 year\\n    ) internal pure returns (string memory) {\\n        Constellation memory constellation = _constellation(seed);\\n        bytes memory attributes = abi.encodePacked(\\n            '\\\",\\\"attributes\\\":',\\n            '[{\\\"trait_type\\\":\\\"Cluster Density\\\",\\\"value\\\":\\\"',\\n            (6 - constellation.keepProb).toString(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Incremental\\\",\\\"value\\\":\\\"',\\n            (constellation.incRand ? \\\"True\\\" : \\\"False\\\"),\\n            '\\\"},{\\\"trait_type\\\":\\\"Rotation\\\",\\\"value\\\":\\\"',\\n            constellation.rotation.toString(),\\n            '\\\"},{\\\"trait_type\\\":\\\"Max Dust\\\",\\\"value\\\":\\\"',\\n            constellation.maxDust.toString(),\\n            '\\\"}]}'\\n        );\\n\\n        bytes memory image = _renderSVG(seed, day, year, constellation);\\n        string memory imageAnimated = Base64.encode(image);\\n        image[188] = \\\"c\\\";\\n        string memory imageStatic = Base64.encode(image);\\n\\n        bytes memory name = _renderName(seed);\\n        bytes memory description;\\n        if (day == 0) {\\n            description = abi.encodePacked(\\n                \\\"The Star Cluster **\\\",\\n                name,\\n                \\\"** will start forming on 1st Dec. \\\",\\n                year.toString()\\n            );\\n        } else {\\n            description = abi.encodePacked(\\n                \\\"View of the Star Cluster **\\\",\\n                name,\\n                \\\"** on \\\",\\n                day.toString(),\\n                \\\"/12/\\\",\\n                year.toString()\\n            );\\n        }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    \\\"data:application/json;base64,\\\",\\n                    Base64.encode(\\n                        abi.encodePacked(\\n                            '{\\\"name\\\":\\\"#',\\n                            tokenId.toString(),\\n                            \\\" - \\\",\\n                            name,\\n                            '\\\", \\\"description\\\":\\\"',\\n                            description,\\n                            '\\\",\\\"image\\\":\\\"data:image/svg+xml;base64,',\\n                            imageStatic,\\n                            '\\\",\\\"animation_url\\\":\\\"data:image/svg+xml;base64,',\\n                            imageAnimated,\\n                            attributes\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n    function _renderSVG(\\n        uint256 seed,\\n        uint256 day,\\n        uint256 year,\\n        Constellation memory constellation\\n    ) internal pure returns (bytes memory) {\\n        bytes memory starsRender = DynamicBuffer.allocate(100000);\\n        bytes memory filters = DynamicBuffer.allocate(100000);\\n        bytes memory dusts;\\n        bytes memory dustsFilters;\\n\\n        if (day > 0) {\\n            uint16[2][25] memory points;\\n            Star[] memory stars = new Star[](25);\\n            uint8 i = 0;\\n            for (; i < day; i++) {\\n                uint256 seedRound = uint256(\\n                    keccak256(abi.encodePacked(seed, i + 1))\\n                );\\n                Star memory star = _decode(seedRound);\\n                stars[i] = star;\\n\\n                uint16 newX;\\n                uint16 newY;\\n\\n                if (constellation.incRand) {\\n                    newX = star.xRand;\\n                    newY = star.yRand;\\n                } else {\\n                    constellation.startX =\\n                        ((constellation.startX +\\n                            (star.xRand % constellation.maxX) +\\n                            constellation.minX) % 581) +\\n                        10;\\n                    constellation.startY =\\n                        ((constellation.startY +\\n                            (star.yRand % constellation.maxY) +\\n                            constellation.minY) % 581) +\\n                        10;\\n                    newX = constellation.startX;\\n                    newY = constellation.startY;\\n                }\\n                points[i] = [newX, newY];\\n\\n                DynamicBuffer.appendUnchecked(starsRender, star0);\\n                DynamicBuffer.appendUnchecked(\\n                    starsRender,\\n                    bytes(newX.toString())\\n                );\\n                DynamicBuffer.appendUnchecked(starsRender, star1);\\n                DynamicBuffer.appendUnchecked(\\n                    starsRender,\\n                    bytes(newY.toString())\\n                );\\n                DynamicBuffer.appendUnchecked(starsRender, star2);\\n                _renderFloat(starsRender, star.radius + 300);\\n                DynamicBuffer.appendUnchecked(starsRender, star3);\\n                _renderFloat(starsRender, star.duration);\\n                DynamicBuffer.appendUnchecked(starsRender, star4);\\n                DynamicBuffer.appendUnchecked(\\n                    starsRender,\\n                    bytes(\\n                        (100 + (((uint256(star.r) * 1000) / 256) * 156) / 1000)\\n                            .toString()\\n                    )\\n                );\\n                DynamicBuffer.appendUnchecked(starsRender, starComma);\\n                DynamicBuffer.appendUnchecked(\\n                    starsRender,\\n                    bytes(\\n                        (100 + (((uint256(star.g) * 1000) / 256) * 156) / 1000)\\n                            .toString()\\n                    )\\n                );\\n                DynamicBuffer.appendUnchecked(starsRender, starComma);\\n                DynamicBuffer.appendUnchecked(\\n                    starsRender,\\n                    bytes(\\n                        (100 + (((uint256(star.b) * 1000) / 256) * 156) / 1000)\\n                            .toString()\\n                    )\\n                );\\n                DynamicBuffer.appendUnchecked(starsRender, starComma);\\n                _renderFloat(starsRender, star.a);\\n                DynamicBuffer.appendUnchecked(starsRender, star5);\\n\\n                DynamicBuffer.appendUnchecked(starsRender, starCore0);\\n                DynamicBuffer.appendUnchecked(\\n                    starsRender,\\n                    bytes(newX.toString())\\n                );\\n                DynamicBuffer.appendUnchecked(starsRender, starCore1);\\n                DynamicBuffer.appendUnchecked(\\n                    starsRender,\\n                    bytes(newY.toString())\\n                );\\n                DynamicBuffer.appendUnchecked(starsRender, starCore2);\\n                _renderFloat(starsRender, star.radius);\\n                DynamicBuffer.appendUnchecked(starsRender, starCore3);\\n            }\\n\\n            (dusts, dustsFilters) = _renderDust(\\n                points,\\n                i,\\n                stars,\\n                constellation\\n            );\\n        }\\n\\n        bytes memory svg = DynamicBuffer.allocate(1000000);\\n        DynamicBuffer.appendUnchecked(svg, svg1);\\n        if (day == 0) {\\n            DynamicBuffer.appendUnchecked(svg, placeholderBlur);\\n        }\\n        DynamicBuffer.appendUnchecked(svg, filters);\\n        DynamicBuffer.appendUnchecked(svg, dustsFilters);\\n        DynamicBuffer.appendUnchecked(svg, svg2);\\n        DynamicBuffer.appendUnchecked(\\n            svg,\\n            bytes(constellation.rotation.toString())\\n        );\\n        DynamicBuffer.appendUnchecked(svg, svg3);\\n        DynamicBuffer.appendUnchecked(svg, dusts);\\n        DynamicBuffer.appendUnchecked(svg, starsRender);\\n        DynamicBuffer.appendUnchecked(svg, svg4);\\n        DynamicBuffer.appendUnchecked(svg, _renderYear(year, day));\\n        if (day == 0) {\\n            uint16 h = uint16(seed % 360);\\n            DynamicBuffer.appendUnchecked(svg, placeholder0);\\n            DynamicBuffer.appendUnchecked(svg, bytes(h.toString()));\\n            DynamicBuffer.appendUnchecked(svg, placeholder1);\\n        }\\n        DynamicBuffer.appendUnchecked(svg, svg5);\\n\\n        return svg;\\n    }\\n\\n    function _renderYear(\\n        uint256 year,\\n        uint256 day\\n    ) internal pure returns (bytes memory) {\\n        bytes memory yearBytes = bytes(year.toString());\\n        bytes memory dayBytes = bytes(day.toString());\\n        bytes memory text = DynamicBuffer.allocate(320);\\n\\n        DynamicBuffer.appendUnchecked(text, text1);\\n        if (dayBytes.length == 2) {\\n            DynamicBuffer.appendUnchecked(text, abi.encodePacked(dayBytes[0]));\\n            DynamicBuffer.appendUnchecked(text, textClose);\\n            DynamicBuffer.appendUnchecked(text, text2);\\n            DynamicBuffer.appendUnchecked(text, abi.encodePacked(dayBytes[1]));\\n        } else {\\n            DynamicBuffer.appendUnchecked(text, bytes(\\\"0\\\"));\\n            DynamicBuffer.appendUnchecked(text, textClose);\\n            DynamicBuffer.appendUnchecked(text, text2);\\n            DynamicBuffer.appendUnchecked(text, abi.encodePacked(dayBytes[0]));\\n        }\\n        DynamicBuffer.appendUnchecked(text, textClose);\\n        DynamicBuffer.appendUnchecked(text, text3);\\n        DynamicBuffer.appendUnchecked(text, abi.encodePacked(yearBytes[2]));\\n        DynamicBuffer.appendUnchecked(text, textClose);\\n        DynamicBuffer.appendUnchecked(text, text4);\\n        DynamicBuffer.appendUnchecked(text, abi.encodePacked(yearBytes[3]));\\n        DynamicBuffer.appendUnchecked(text, textClose);\\n        DynamicBuffer.appendUnchecked(text, frame);\\n\\n        return text;\\n    }\\n\\n    function _renderDust(\\n        uint16[2][25] memory points,\\n        uint8 length,\\n        Star[] memory stars,\\n        Constellation memory constellation\\n    ) internal pure returns (bytes memory, bytes memory) {\\n        bytes memory dusts = DynamicBuffer.allocate(100000);\\n        bytes memory dustsFilters = DynamicBuffer.allocate(100000);\\n        points = _sortPointsByDistance(points, length, [uint16(0), 0]);\\n        for (uint16 i = 0; i < length; i++) {\\n            uint16[2][25] memory subarray = createSubArray(points, length, i);\\n            uint16[2][25] memory sortedPoints = _sortPointsByDistance(\\n                subarray,\\n                length - i,\\n                points[i]\\n            );\\n\\n            _buildDust(\\n                dusts,\\n                dustsFilters,\\n                sortedPoints,\\n                length - i,\\n                i,\\n                stars[i],\\n                constellation\\n            );\\n        }\\n\\n        return (dusts, dustsFilters);\\n    }\\n\\n    function _buildDust(\\n        bytes memory dusts,\\n        bytes memory dustsFilters,\\n        uint16[2][25] memory points,\\n        uint16 length,\\n        uint16 i,\\n        Star memory star,\\n        Constellation memory constellation\\n    ) internal pure {\\n        if (i % constellation.keepProb != 0) {\\n            return;\\n        }\\n\\n        bytes memory pathPoints = DynamicBuffer.allocate(3200);\\n        _constructPath(pathPoints, points[0][0], points[0][1]);\\n\\n        for (uint16 j = 1; j < length; j++) {\\n            uint16 diffX = absDiff(points[j][0], points[j - 1][0]);\\n            uint16 diffY = absDiff(points[j][1], points[j - 1][1]);\\n\\n            if (diffX <= 200 && diffY <= 200) {\\n                _constructPath(pathPoints, points[j][0], points[j][1]);\\n            } else if (j > 3) {\\n                _constructDust(dusts, pathPoints, i, j, constellation);\\n                _constructDustsFilters(dustsFilters, i, star);\\n                break;\\n            } else {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function _constellationTrait(\\n        uint256 randomness,\\n        uint8 index\\n    ) internal pure returns (uint256) {\\n        return ((randomness >> (CONSTELLATION_TRAIT_SIZE * index)) &\\n            CONSTELLATION_TRAIT_MASK);\\n    }\\n\\n    function _constellation(\\n        uint256 randomness\\n    ) internal pure returns (Constellation memory constellation) {\\n        constellation.rotation = uint16(\\n            _constellationTrait(randomness, 0) % 360\\n        );\\n        constellation.incRand = _constellationTrait(randomness, 1) % 2 == 0;\\n        constellation.maxDust = uint16(\\n            (_constellationTrait(randomness, 2) % 401) + 100\\n        );\\n        constellation.startX = uint16(\\n            (_constellationTrait(randomness, 3) % 581) + 10\\n        );\\n        constellation.startY = uint16(\\n            (_constellationTrait(randomness, 4) % 581) + 10\\n        );\\n        constellation.keepProb = uint8(\\n            (_constellationTrait(randomness, 5) % 6) + 1\\n        );\\n        constellation.minX = uint16(\\n            (_constellationTrait(randomness, 6) % 91) + 10\\n        );\\n        constellation.minY = uint16(\\n            (_constellationTrait(randomness, 7) % 91) + 10\\n        );\\n        constellation.maxX =\\n            uint16(\\n                (_constellationTrait(randomness, 8) %\\n                    (251 - constellation.minX))\\n            ) +\\n            1;\\n        constellation.maxY =\\n            uint16(\\n                (_constellationTrait(randomness, 9) %\\n                    (251 - constellation.minY))\\n            ) +\\n            1;\\n    }\\n\\n    function absDiff(uint16 a, uint16 b) private pure returns (uint16) {\\n        if (a > b) {\\n            return a - b;\\n        } else {\\n            return b - a;\\n        }\\n    }\\n\\n    function createSubArray(\\n        uint16[2][25] memory array,\\n        uint16 length,\\n        uint16 startIndex\\n    ) private pure returns (uint16[2][25] memory subArray) {\\n        uint16 newArrayLength = length - startIndex;\\n        for (uint16 i = 0; i < newArrayLength; i++) {\\n            subArray[i][0] = array[startIndex + i][0];\\n            subArray[i][1] = array[startIndex + i][1];\\n        }\\n    }\\n\\n    function _constructPath(\\n        bytes memory buffer,\\n        uint16 x,\\n        uint16 y\\n    ) internal pure {\\n        DynamicBuffer.appendUnchecked(buffer, bytes(\\\" \\\"));\\n        DynamicBuffer.appendUnchecked(buffer, bytes(x.toString()));\\n        DynamicBuffer.appendUnchecked(buffer, bytes(\\\",\\\"));\\n        DynamicBuffer.appendUnchecked(buffer, bytes(y.toString()));\\n    }\\n\\n    function _constructDust(\\n        bytes memory buffer,\\n        bytes memory path,\\n        uint16 index,\\n        uint16 pathLength,\\n        Constellation memory constellation\\n    ) internal pure {\\n        uint16 thickness = constellation.maxDust / pathLength;\\n\\n        DynamicBuffer.appendUnchecked(buffer, dust0);\\n        DynamicBuffer.appendUnchecked(buffer, path);\\n        DynamicBuffer.appendUnchecked(buffer, dust1);\\n        DynamicBuffer.appendUnchecked(buffer, bytes(index.toString()));\\n        DynamicBuffer.appendUnchecked(buffer, dust2);\\n        DynamicBuffer.appendUnchecked(buffer, bytes(thickness.toString()));\\n        DynamicBuffer.appendUnchecked(buffer, dust3);\\n    }\\n\\n    function _constructDustsFilters(\\n        bytes memory buffer,\\n        uint16 index,\\n        Star memory star\\n    ) internal pure {\\n        uint16 baseDust = uint16((star.seed % 80) + 40);\\n        DynamicBuffer.appendUnchecked(buffer, dustFilter0);\\n        DynamicBuffer.appendUnchecked(buffer, bytes(index.toString()));\\n        DynamicBuffer.appendUnchecked(buffer, dustFilter1);\\n        DynamicBuffer.appendUnchecked(buffer, bytes(baseDust.toString()));\\n        DynamicBuffer.appendUnchecked(buffer, dustFilter2);\\n        DynamicBuffer.appendUnchecked(\\n            buffer,\\n            bytes((baseDust + 50).toString())\\n        );\\n        DynamicBuffer.appendUnchecked(buffer, dustFilter3);\\n        DynamicBuffer.appendUnchecked(\\n            buffer,\\n            bytes((baseDust + 100).toString())\\n        );\\n        DynamicBuffer.appendUnchecked(buffer, dustFilter4);\\n        _renderFloat(buffer, (uint16(star.r) * 100) / 256);\\n        DynamicBuffer.appendUnchecked(buffer, dustFilter5);\\n        _renderFloat(buffer, (uint16(star.g) * 100) / 256);\\n        DynamicBuffer.appendUnchecked(buffer, dustFilter6);\\n        _renderFloat(buffer, (uint16(star.b) * 100) / 256);\\n        DynamicBuffer.appendUnchecked(buffer, dustFilter7);\\n        _renderFloat(buffer, star.a);\\n        DynamicBuffer.appendUnchecked(buffer, dustFilter8);\\n    }\\n\\n    function _sortPointsByDistance(\\n        uint16[2][25] memory points,\\n        uint16 length,\\n        uint16[2] memory origin\\n    ) internal pure returns (uint16[2][25] memory) {\\n        _quickSort(points, origin, 0, length - 1);\\n        return points;\\n    }\\n\\n    function _quickSort(\\n        uint16[2][25] memory arr,\\n        uint16[2] memory origin,\\n        uint16 left,\\n        uint16 right\\n    ) internal pure {\\n        int16 i = int16(left);\\n        int16 j = int16(right);\\n        if (i == j) return;\\n        int256 pivot = _distanceSquared(\\n            arr[uint16(left + (right - left) / 2)],\\n            origin\\n        );\\n        while (i <= j) {\\n            while (_distanceSquared(arr[uint16(i)], origin) < pivot) i++;\\n            while (pivot < _distanceSquared(arr[uint16(j)], origin)) j--;\\n            if (i <= j) {\\n                (arr[uint16(i)], arr[uint16(j)]) = (\\n                    arr[uint16(j)],\\n                    arr[uint16(i)]\\n                );\\n                i++;\\n                j--;\\n            }\\n        }\\n        if (int16(left) < j) _quickSort(arr, origin, left, uint16(j));\\n        if (i < int16(right)) _quickSort(arr, origin, uint16(i), right);\\n    }\\n\\n    function _distanceSquared(\\n        uint16[2] memory p,\\n        uint16[2] memory origin\\n    ) internal pure returns (int256) {\\n        return\\n            (int256(int16(p[0])) - int256(int16(origin[0]))) ** 2 +\\n            (int256(int16(p[1])) - int256(int16(origin[1]))) ** 2;\\n    }\\n\\n    function _starTrait(\\n        uint256 randomness,\\n        uint8 index\\n    ) internal pure returns (uint256) {\\n        return ((randomness >> (STAR_TRAIT_SIZE * index)) & STAR_TRAIT_MASK);\\n    }\\n\\n    function _decode(\\n        uint256 randomness\\n    ) internal pure returns (Star memory star) {\\n        star.r = uint8(_starTrait(randomness, 0) % 256);\\n        star.g = uint8(_starTrait(randomness, 1) % 256);\\n        star.b = uint8(_starTrait(randomness, 2) % 256);\\n        star.a = uint8((_starTrait(randomness, 3) % 101) + 1);\\n        star.xRand = uint16((_starTrait(randomness, 4) % 581) + 10);\\n        star.yRand = uint16((_starTrait(randomness, 5) % 581) + 10);\\n        star.radius = uint16((_starTrait(randomness, 6) % 500) + 100);\\n        star.duration = uint16((_starTrait(randomness, 7) % 1001) + 100);\\n        star.seed = randomness;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"mintEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_END\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adventDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintDiscount\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"render\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"restart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"discounts\",\"type\":\"uint256[]\"}],\"name\":\"setDiscounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"s\",\"type\":\"uint256\"}],\"name\":\"toDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenAtIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AdventStars", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000043a4c774860000000000000000000000000000000000000000000000000000000000006569304d", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}