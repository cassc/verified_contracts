{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/amo/helpers/AMOCommon.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (amo/helpers/AMOCommon.sol)\\n\\nlibrary AMOCommon {\\n    error NotOperator();\\n    error NotOperatorOrOwner();\\n    error ZeroSwapLimit();\\n    error OnlyAMO();\\n    error AboveCappedAmount(uint256 amountIn);\\n    error InsufficientBPTAmount(uint256 amount);\\n    error InvalidBPSValue(uint256 value);\\n    error InvalidMaxAmounts(uint256 bptMaxAmount, uint256 stableMaxAmount, uint256 templeMaxAmount);\\n    error InvalidBalancerVaultRequest();\\n    error NotEnoughCooldown();\\n    error NoRebalanceUp();\\n    error NoRebalanceDown();\\n    error HighSlippage();\\n    error Paused();\\n}\"\r\n    },\r\n    \"contracts/amo/helpers/BalancerPoolHelper.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (amo/helpers/BalancerPoolHelper.sol)\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IBalancerPoolHelper } from \\\"contracts/interfaces/amo/helpers/IBalancerPoolHelper.sol\\\";\\nimport { IBalancerVault } from \\\"contracts/interfaces/external/balancer/IBalancerVault.sol\\\";\\nimport { IBalancerHelpers } from \\\"contracts/interfaces/external/balancer/IBalancerHelpers.sol\\\";\\nimport { AMOCommon } from \\\"contracts/amo/helpers/AMOCommon.sol\\\";\\n\\ninterface IWeightPool2Tokens {\\n    function getNormalizedWeights() external view returns (uint256[] memory);\\n}\\n\\ncontract BalancerPoolHelper is IBalancerPoolHelper {\\n    using SafeERC20 for IERC20;\\n\\n    IBalancerVault public immutable override balancerVault;\\n    IBalancerHelpers public immutable override balancerHelpers;\\n    IERC20 public immutable override bptToken;\\n    IERC20 public immutable override protocolToken;\\n    IERC20 public immutable override quoteToken;\\n    address public immutable override amo;\\n    \\n    uint256 public constant override BPS_PRECISION = 10_000;\\n    uint256 public constant override PRICE_PRECISION = 1e18;\\n\\n    // @notice protocolToken index in balancer pool\\n    uint64 public immutable override protocolTokenIndexInBalancerPool;\\n\\n    bytes32 public immutable override balancerPoolId;\\n\\n    constructor(\\n      address _balancerVault,\\n      address _balancerHelpers,\\n      address _protocolToken,\\n      address _quoteToken,\\n      address _bptToken,\\n      address _amo,\\n      uint64 _protocolTokenIndexInPool,\\n      bytes32 _balancerPoolId\\n    ) {\\n      balancerPoolId = _balancerPoolId;\\n      balancerVault = IBalancerVault(_balancerVault);\\n      balancerHelpers = IBalancerHelpers(_balancerHelpers);\\n      protocolToken = IERC20(_protocolToken);\\n      quoteToken = IERC20(_quoteToken);\\n      bptToken = IERC20(_bptToken);\\n      amo = _amo;\\n      protocolTokenIndexInBalancerPool = _protocolTokenIndexInPool;\\n    }\\n\\n    function getBalances() public override view returns (uint256[] memory balances) {\\n      (, balances,) = balancerVault.getPoolTokens(balancerPoolId);\\n    }\\n\\n    function getPairBalances() public override view returns (uint256 protocolTokenBalance, uint256 quoteTokenBalance) {\\n      uint256[] memory balances = getBalances();\\n      (protocolTokenBalance, quoteTokenBalance) = (protocolTokenIndexInBalancerPool == 0) \\n        ? (balances[0], balances[1]) \\n        : (balances[1], balances[0]);\\n    }\\n\\n    /// @notice Return the spot price scaled to 1e18 \\n    function getSpotPrice() public override view returns (uint256) {\\n        (uint256 protocolTokenBalance, uint256 quoteTokenBalance) = getPairBalances();\\n        return (PRICE_PRECISION * quoteTokenBalance) / protocolTokenBalance;\\n    }\\n\\n    function isSpotPriceBelowTpi(uint256 treasuryPriceIndex) external override view returns (bool) {\\n        return getSpotPrice() < treasuryPriceIndex;\\n    }\\n\\n    // below TPI by a given slippage percentage\\n    function isSpotPriceBelowTpi(uint256 slippage, uint256 treasuryPriceIndex) public override view returns (bool) {\\n        uint256 slippageTpi = (slippage * treasuryPriceIndex) / BPS_PRECISION;\\n        return getSpotPrice() < (treasuryPriceIndex - slippageTpi);\\n    }\\n\\n    function isSpotPriceBelowTpiLowerBound(uint256 rebalancePercentageBoundLow, uint256 treasuryPriceIndex) public override view returns (bool) {\\n        return isSpotPriceBelowTpi(rebalancePercentageBoundLow, treasuryPriceIndex);\\n    }\\n\\n    function isSpotPriceAboveTpiUpperBound(uint256 rebalancePercentageBoundUp, uint256 treasuryPriceIndex) public override view returns (bool) {\\n        return isSpotPriceAboveTpi(rebalancePercentageBoundUp, treasuryPriceIndex);\\n    }\\n\\n    // slippage in bps\\n    // above TPI by a given slippage percentage\\n    function isSpotPriceAboveTpi(uint256 slippage, uint256 treasuryPriceIndex) public override view returns (bool) {\\n      uint256 slippageTpi = (slippage * treasuryPriceIndex) / BPS_PRECISION;\\n      return getSpotPrice() > (treasuryPriceIndex + slippageTpi);\\n    }\\n\\n    function isSpotPriceAboveTpi(uint256 treasuryPriceIndex) external override view returns (bool) {\\n        return getSpotPrice() > treasuryPriceIndex;\\n    }\\n\\n    // @notice will exit take price above TPI by a percentage\\n    // percentage in bps\\n    // tokensOut: expected min amounts out. for rebalance this is expected `ProtocolToken` tokens out\\n    function willExitTakePriceAboveTpiUpperBound(\\n        uint256 tokensOut,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 treasuryPriceIndex\\n    ) public override view returns (bool) {\\n        uint256 maxNewTpi = (BPS_PRECISION + rebalancePercentageBoundUp) * treasuryPriceIndex / BPS_PRECISION;\\n        (uint256 protocolTokenBalance, uint256 quoteTokenBalance) = getPairBalances();\\n\\n        // a ratio of quoteToken balances vs protocolToken balances\\n        uint256 newProtocolTokenBalance = protocolTokenBalance - tokensOut;\\n        uint256 spot = (quoteTokenBalance * PRICE_PRECISION ) / newProtocolTokenBalance;\\n        return spot > maxNewTpi;\\n    }\\n\\n    function willQuoteTokenJoinTakePriceAboveTpiUpperBound(\\n        uint256 tokensIn,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 treasuryPriceIndex\\n    ) public override view returns (bool) {\\n        uint256 maxNewTpi = (BPS_PRECISION + rebalancePercentageBoundUp) * treasuryPriceIndex / BPS_PRECISION;\\n        (uint256 protocolTokenBalance, uint256 quoteTokenBalance) = getPairBalances();\\n\\n        uint256 newQuoteTokenBalance = quoteTokenBalance + tokensIn;\\n        uint256 spot = (newQuoteTokenBalance * PRICE_PRECISION ) / protocolTokenBalance;\\n        return spot > maxNewTpi;\\n    }\\n\\n    function willQuoteTokenExitTakePriceBelowTpiLowerBound(\\n        uint256 tokensOut,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex\\n    ) public override view returns (bool) {\\n        uint256 minNewTpi = (BPS_PRECISION - rebalancePercentageBoundLow) * treasuryPriceIndex / BPS_PRECISION;\\n        (uint256 protocolTokenBalance, uint256 quoteTokenBalance) = getPairBalances();\\n\\n        uint256 newQuoteTokenBalance = quoteTokenBalance - tokensOut;\\n        uint256 spot = (newQuoteTokenBalance * PRICE_PRECISION) / protocolTokenBalance;\\n        return spot < minNewTpi;\\n    }\\n\\n    function willJoinTakePriceBelowTpiLowerBound(\\n        uint256 tokensIn,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex\\n    ) public override view returns (bool) {\\n        uint256 minNewTpi = (BPS_PRECISION - rebalancePercentageBoundLow) * treasuryPriceIndex / BPS_PRECISION;\\n        (uint256 protocolTokenBalance, uint256 quoteTokenBalance) = getPairBalances();\\n\\n        // a ratio of quoteToken balances vs ProtocolToken balances\\n        uint256 newProtocolTokenBalance = protocolTokenBalance + tokensIn;\\n        uint256 spot = (quoteTokenBalance * PRICE_PRECISION) / newProtocolTokenBalance;\\n        return spot < minNewTpi;\\n    }\\n\\n    // get the change between spot price before and spot price now\\n    function getSlippage(uint256 spotPriceBefore) public override view returns (uint256) {\\n        uint256 spotPriceNow = getSpotPrice();\\n\\n        // taking into account both rebalance up or down\\n        uint256 priceDifference;\\n        unchecked {\\n            priceDifference = (spotPriceNow > spotPriceBefore)\\n                ? spotPriceNow - spotPriceBefore\\n                : spotPriceBefore - spotPriceNow;\\n        }\\n        return (priceDifference * BPS_PRECISION) / spotPriceBefore;\\n    }\\n\\n    function createPoolExitRequest(\\n        uint256 bptAmountIn,\\n        uint256 minAmountOut,\\n        uint256 exitTokenIndex\\n    ) internal view returns (IBalancerVault.ExitPoolRequest memory request) {\\n        address[] memory assets = new address[](2);\\n        uint256[] memory minAmountsOut = new uint256[](2);\\n\\n        (assets[0], assets[1]) = protocolTokenIndexInBalancerPool == 0 ? (address(protocolToken), address(quoteToken)) : (address(quoteToken), address(protocolToken));\\n        (minAmountsOut[0], minAmountsOut[1]) = exitTokenIndex == uint256(0) ? (minAmountOut, uint256(0)) : (uint256(0), minAmountOut); \\n        // EXACT_BPT_IN_FOR_ONE_TOKEN_OUT index is 0 for exitKind\\n        bytes memory encodedUserdata = abi.encode(uint256(0), bptAmountIn, exitTokenIndex);\\n        request.assets = assets;\\n        request.minAmountsOut = minAmountsOut;\\n        request.userData = encodedUserdata;\\n        request.toInternalBalance = false;\\n    }\\n\\n    function createPoolJoinRequest(\\n        uint256 amountIn,\\n        uint256 tokenIndex,\\n        uint256 minTokenOut\\n    ) internal view returns (IBalancerVault.JoinPoolRequest memory request) {\\n        address[] memory assets = new address[](2);\\n        uint256[] memory maxAmountsIn = new uint256[](2);\\n    \\n        (assets[0], assets[1]) = protocolTokenIndexInBalancerPool == 0 ? (address(protocolToken), address(quoteToken)) : (address(quoteToken), address(protocolToken));\\n        (maxAmountsIn[0], maxAmountsIn[1]) = tokenIndex == uint256(0) ? (amountIn, uint256(0)) : (uint256(0), amountIn);\\n        //uint256 joinKind = 1; //EXACT_TOKENS_IN_FOR_BPT_OUT\\n        bytes memory encodedUserdata = abi.encode(uint256(1), maxAmountsIn, minTokenOut);\\n        request.assets = assets;\\n        request.maxAmountsIn = maxAmountsIn;\\n        request.userData = encodedUserdata;\\n        request.fromInternalBalance = false;\\n    }\\n\\n    function exitPool(\\n        uint256 bptAmountIn,\\n        uint256 minAmountOut,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 postRebalanceDelta,\\n        uint256 exitTokenIndex,\\n        uint256 treasuryPriceIndex,\\n        IERC20 exitPoolToken\\n    ) external override onlyAmo returns (uint256 amountOut) {\\n        exitPoolToken == protocolToken ? \\n            validateProtocolTokenExit(minAmountOut, rebalancePercentageBoundUp, rebalancePercentageBoundLow, treasuryPriceIndex) :\\n            validateQuoteTokenExit(minAmountOut, rebalancePercentageBoundUp, rebalancePercentageBoundLow, treasuryPriceIndex);\\n\\n        // create request\\n        IBalancerVault.ExitPoolRequest memory exitPoolRequest = createPoolExitRequest(bptAmountIn,\\n            minAmountOut, exitTokenIndex);\\n\\n        // execute call and check for sanity\\n        uint256 exitTokenBalanceBefore = exitPoolToken.balanceOf(msg.sender);\\n        uint256 spotPriceBefore = getSpotPrice();\\n        balancerVault.exitPool(balancerPoolId, address(this), msg.sender, exitPoolRequest);\\n        uint256 exitTokenBalanceAfter = exitPoolToken.balanceOf(msg.sender);\\n\\n        unchecked {\\n            amountOut = exitTokenBalanceAfter - exitTokenBalanceBefore;\\n        }\\n\\n        if (getSlippage(spotPriceBefore) > postRebalanceDelta) {\\n            revert AMOCommon.HighSlippage();\\n        }\\n    }\\n\\n    function joinPool(\\n        uint256 amountIn,\\n        uint256 minBptOut,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex,\\n        uint256 postRebalanceDelta,\\n        uint256 joinTokenIndex,\\n        IERC20 joinPoolToken\\n    ) external override onlyAmo returns (uint256 bptOut) {\\n        joinPoolToken == protocolToken ? \\n            validateProtocolTokenJoin(amountIn, rebalancePercentageBoundUp, rebalancePercentageBoundLow, treasuryPriceIndex) :\\n            validateQuoteTokenJoin(amountIn, rebalancePercentageBoundUp, rebalancePercentageBoundLow, treasuryPriceIndex);\\n\\n        // create request\\n        IBalancerVault.JoinPoolRequest memory joinPoolRequest = createPoolJoinRequest(amountIn, joinTokenIndex, minBptOut);\\n\\n        // approve\\n        uint256 joinPoolTokenAllowance = joinPoolToken.allowance(address(this), address(balancerVault));\\n        if (joinPoolTokenAllowance < amountIn) {\\n            // some tokens like bb-a-USD always set the max allowance for `balancerVault`\\n            // in this case, `safeIncreaseAllowance` will fail due to the arithmetic operation overflow issue\\n            joinPoolToken.safeDecreaseAllowance(address(balancerVault), joinPoolTokenAllowance);\\n            joinPoolToken.safeIncreaseAllowance(address(balancerVault), amountIn);\\n        }\\n\\n        // execute and sanity check\\n        uint256 bptAmountBefore = bptToken.balanceOf(msg.sender);\\n        uint256 spotPriceBefore = getSpotPrice();\\n        balancerVault.joinPool(balancerPoolId, address(this), msg.sender, joinPoolRequest);\\n        uint256 bptAmountAfter = bptToken.balanceOf(msg.sender);\\n\\n        unchecked {\\n            bptOut = bptAmountAfter - bptAmountBefore;\\n        }\\n\\n        // revert if high slippage after pool join\\n        if (getSlippage(spotPriceBefore) > postRebalanceDelta) {\\n            revert AMOCommon.HighSlippage();\\n        }\\n    }\\n\\n    function validateProtocolTokenJoin(\\n        uint256 amountIn,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex\\n    ) internal view {\\n        if (!isSpotPriceAboveTpiUpperBound(rebalancePercentageBoundUp, treasuryPriceIndex)) {\\n            revert AMOCommon.NoRebalanceDown();\\n        }\\n        // should rarely be the case, but a sanity check nonetheless\\n        if (willJoinTakePriceBelowTpiLowerBound(amountIn, rebalancePercentageBoundLow, treasuryPriceIndex)) {\\n            revert AMOCommon.HighSlippage();\\n        }\\n    }\\n\\n    function validateProtocolTokenExit(\\n        uint256 amountOut,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex\\n    ) internal view {\\n        // check spot price is below Tpi by lower bound\\n        if (!isSpotPriceBelowTpiLowerBound(rebalancePercentageBoundLow, treasuryPriceIndex)) {\\n            revert AMOCommon.NoRebalanceUp();\\n        }\\n\\n        // will exit take price above TPI + upper bound\\n        // should rarely be the case, but a sanity check nonetheless\\n        if (willExitTakePriceAboveTpiUpperBound(amountOut, rebalancePercentageBoundUp, treasuryPriceIndex)) {\\n            revert AMOCommon.HighSlippage();\\n        }\\n    }\\n\\n    function validateQuoteTokenJoin(\\n        uint256 amountIn,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex\\n    ) internal view {\\n        if (!isSpotPriceBelowTpiLowerBound(rebalancePercentageBoundLow, treasuryPriceIndex)) {\\n            revert AMOCommon.NoRebalanceUp();\\n        }\\n        // should rarely be the case, but a sanity check nonetheless\\n        if (willQuoteTokenJoinTakePriceAboveTpiUpperBound(amountIn, rebalancePercentageBoundUp, treasuryPriceIndex)) {\\n            revert AMOCommon.HighSlippage();\\n        }\\n    }\\n\\n    function validateQuoteTokenExit(\\n        uint256 amountOut,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex\\n    ) internal view {\\n        if (!isSpotPriceAboveTpiUpperBound(rebalancePercentageBoundUp, treasuryPriceIndex)) {\\n            revert AMOCommon.NoRebalanceDown();\\n        }\\n        // should rarely be the case, but a sanity check nonetheless\\n        if (willQuoteTokenExitTakePriceBelowTpiLowerBound(amountOut, rebalancePercentageBoundLow, treasuryPriceIndex)) {\\n            revert AMOCommon.HighSlippage();\\n        }\\n    }\\n\\n    /// @notice Get the quote used to add liquidity proportionally\\n    /// @dev Since this is not the view function, this should be called with `callStatic`\\n    function proportionalAddLiquidityQuote(\\n        uint256 quoteTokenAmount,\\n        uint256 slippageBps\\n    ) external override returns (\\n        uint256 protocolTokenAmount,\\n        uint256 expectedBptAmount,\\n        uint256 minBptAmount,\\n        IBalancerVault.JoinPoolRequest memory requestData\\n    ) {\\n        (uint256 protocolTokenBalanceInLP, uint256 quoteTokenBalanceInLP) = getPairBalances();\\n        // see Balancer SDK for the calculation\\n        // https://github.com/balancer/balancer-sdk/blob/be692be5d6057f5e44362667e47bd7ecf9a83b37/balancer-js/src/modules/pools/proportional-amounts/index.ts#L24\\n        protocolTokenAmount = quoteTokenBalanceInLP == 0\\n            ? quoteTokenAmount\\n            : (protocolTokenBalanceInLP * quoteTokenAmount / quoteTokenBalanceInLP);\\n\\n        requestData.assets = new address[](2);\\n        requestData.maxAmountsIn = new uint256[](2);\\n        \\n        (requestData.assets[0], requestData.assets[1]) = protocolTokenIndexInBalancerPool == 0 ? (address(protocolToken), address(quoteToken)) : (address(quoteToken), address(protocolToken));\\n        (requestData.maxAmountsIn[0], requestData.maxAmountsIn[1]) = protocolTokenIndexInBalancerPool == 0 ? (protocolTokenAmount, quoteTokenAmount) : (quoteTokenAmount, protocolTokenAmount);\\n        //uint256 joinKind = 1; //EXACT_TOKENS_IN_FOR_BPT_OUT\\n        bytes memory encodedUserdata = abi.encode(uint256(1), requestData.maxAmountsIn, 0);\\n        requestData.userData = encodedUserdata;\\n        requestData.fromInternalBalance = false;\\n\\n        (expectedBptAmount, ) = balancerHelpers.queryJoin(balancerPoolId, amo, amo, requestData);\\n        minBptAmount = applySlippage(expectedBptAmount, slippageBps);\\n\\n        // update `requestData` with the `minBptAmount` to which the slippage was applied\\n        encodedUserdata = abi.encode(uint256(1), requestData.maxAmountsIn, minBptAmount);\\n        requestData.userData = encodedUserdata;\\n    }\\n\\n    /// @notice Get the quote used to remove liquidity\\n    /// @dev Since this is not the view function, this should be called with `callStatic`\\n    function proportionalRemoveLiquidityQuote(\\n        uint256 bptAmount,\\n        uint256 slippageBps\\n    ) external override returns (\\n        uint256 expectedProtocolTokenAmount,\\n        uint256 expectedQuoteTokenAmount,\\n        uint256 minProtocolTokenAmount,\\n        uint256 minQuoteTokenAmount,\\n        IBalancerVault.ExitPoolRequest memory requestData\\n    ) {\\n        requestData.assets = new address[](2);\\n        requestData.minAmountsOut = new uint256[](2);\\n\\n        (requestData.assets[0], requestData.assets[1]) = protocolTokenIndexInBalancerPool == 0\\n            ? (address(protocolToken), address(quoteToken))\\n            : (address(quoteToken), address(protocolToken));\\n        // EXACT_BPT_IN_FOR_TOKENS_OUT index is 1 for exitKind\\n        bytes memory encodedUserdata = abi.encode(uint256(1), bptAmount);\\n        requestData.userData = encodedUserdata;\\n        requestData.toInternalBalance = false;\\n\\n        (, requestData.minAmountsOut) = balancerHelpers.queryExit(balancerPoolId, amo, amo, requestData);\\n        (expectedProtocolTokenAmount, expectedQuoteTokenAmount) = protocolTokenIndexInBalancerPool == 0\\n            ? (requestData.minAmountsOut[0], requestData.minAmountsOut[1])\\n            : (requestData.minAmountsOut[1], requestData.minAmountsOut[0]);\\n        minProtocolTokenAmount = applySlippage(expectedProtocolTokenAmount, slippageBps);\\n        minQuoteTokenAmount = applySlippage(expectedQuoteTokenAmount, slippageBps);\\n\\n        // update `requestData` with the `minAmountsOut` to which the slippage was applied\\n        (requestData.minAmountsOut[0], requestData.minAmountsOut[1]) = protocolTokenIndexInBalancerPool == 0\\n            ? (minProtocolTokenAmount, minQuoteTokenAmount)\\n            : (minQuoteTokenAmount, minProtocolTokenAmount);\\n    }\\n\\n    function applySlippage(uint256 amountIn, uint256 slippageBps) public override pure returns (uint256 amountOut) {\\n        amountOut = amountIn * (BPS_PRECISION - slippageBps) / BPS_PRECISION;\\n    }\\n\\n    modifier onlyAmo() {\\n        if (msg.sender != amo) {\\n            revert AMOCommon.OnlyAMO();\\n        }\\n        _;\\n    }\\n}\"\r\n    },\r\n    \"contracts/interfaces/amo/helpers/IBalancerPoolHelper.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/amo/helpers/IBalancerPoolHelper.sol)\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IBalancerVault } from \\\"contracts/interfaces/external/balancer/IBalancerVault.sol\\\";\\nimport { IBalancerHelpers } from \\\"contracts/interfaces/external/balancer/IBalancerHelpers.sol\\\";\\n\\ninterface IBalancerPoolHelper {\\n\\n    function balancerVault() external view returns (IBalancerVault);\\n    function balancerHelpers() external view returns (IBalancerHelpers);\\n    function bptToken() external view returns (IERC20);\\n    function protocolToken() external view returns (IERC20);\\n    function quoteToken() external view returns (IERC20);\\n    function amo() external view returns (address);\\n    \\n    function BPS_PRECISION() external view returns (uint256);\\n    function PRICE_PRECISION() external view returns (uint256);\\n\\n    // @notice protocolToken index in balancer pool\\n    function protocolTokenIndexInBalancerPool() external view returns (uint64);\\n    function balancerPoolId() external view returns (bytes32);\\n\\n    function getBalances() external view returns (uint256[] memory balances);\\n\\n    function getPairBalances() external view returns (uint256 protocolTokenBalance, uint256 quoteTokenBalance);\\n\\n    function getSpotPrice() external view returns (uint256 spotPriceScaled);\\n\\n    function isSpotPriceBelowTpi(uint256 treasuryPriceIndex) external view returns (bool);\\n\\n    function isSpotPriceBelowTpi(uint256 slippage, uint256 treasuryPriceIndex) external view returns (bool);\\n\\n    function isSpotPriceBelowTpiLowerBound(uint256 rebalancePercentageBoundLow, uint256 treasuryPriceIndex) external view returns (bool);\\n\\n    function isSpotPriceAboveTpiUpperBound(uint256 rebalancePercentageBoundUp, uint256 treasuryPriceIndex) external view returns (bool);\\n    \\n    function isSpotPriceAboveTpi(uint256 slippage, uint256 treasuryPriceIndex) external view returns (bool);\\n\\n    function isSpotPriceAboveTpi(uint256 treasuryPriceIndex) external view returns (bool);\\n\\n    // @notice will exit take price above TPI by a percentage\\n    // percentage in bps\\n    // tokensOut: expected min amounts out. for rebalance this is expected `ProtocolToken` tokens out\\n    function willExitTakePriceAboveTpiUpperBound(\\n        uint256 tokensOut,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 treasuryPriceIndex\\n    ) external view returns (bool);\\n\\n    function willQuoteTokenJoinTakePriceAboveTpiUpperBound(\\n        uint256 tokensIn,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 treasuryPriceIndex\\n    ) external view returns (bool);\\n\\n    function willQuoteTokenExitTakePriceBelowTpiLowerBound(\\n        uint256 tokensOut,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex\\n    ) external view returns (bool);\\n\\n    function willJoinTakePriceBelowTpiLowerBound(\\n        uint256 tokensIn,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex\\n    ) external view returns (bool);\\n\\n    function getSlippage(uint256 spotPriceBeforeScaled) external view returns (uint256);\\n\\n    function exitPool(\\n        uint256 bptAmountIn,\\n        uint256 minAmountOut,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 postRebalanceDelta,\\n        uint256 exitTokenIndex,\\n        uint256 treasuryPriceIndex,\\n        IERC20 exitPoolToken\\n    ) external returns (uint256 amountOut);\\n\\n    function joinPool(\\n        uint256 amountIn,\\n        uint256 minBptOut,\\n        uint256 rebalancePercentageBoundUp,\\n        uint256 rebalancePercentageBoundLow,\\n        uint256 treasuryPriceIndex,\\n        uint256 postRebalanceDelta,\\n        uint256 joinTokenIndex,\\n        IERC20 joinPoolToken\\n    ) external returns (uint256 bptIn);\\n\\n    /// @notice Get the quote used to add liquidity proportionally\\n    /// @dev Since this is not the view function, this should be called with `callStatic`\\n    function proportionalAddLiquidityQuote(\\n        uint256 quoteTokenAmount,\\n        uint256 slippageBps\\n    ) external returns (\\n        uint256 protocolTokenAmount,\\n        uint256 expectedBptAmount,\\n        uint256 minBptAmount,\\n        IBalancerVault.JoinPoolRequest memory requestData\\n    );\\n\\n    /// @notice Get the quote used to remove liquidity\\n    /// @dev Since this is not the view function, this should be called with `callStatic`\\n    function proportionalRemoveLiquidityQuote(\\n        uint256 bptAmount,\\n        uint256 slippageBps\\n    ) external returns (\\n        uint256 expectedProtocolTokenAmount,\\n        uint256 expectedQuoteTokenAmount,\\n        uint256 minProtocolTokenAmount,\\n        uint256 minQuoteTokenAmount,\\n        IBalancerVault.ExitPoolRequest memory requestData\\n    );\\n\\n    function applySlippage(uint256 amountIn, uint256 slippageBps) external view returns (uint256 amountOut);\\n\\n}\"\r\n    },\r\n    \"contracts/interfaces/external/balancer/IBalancerHelpers.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/external/balancer/IBalancerHelpers.sol)\\n\\nimport { IBalancerVault } from \\\"contracts/interfaces/external/balancer/IBalancerVault.sol\\\";\\n\\ninterface IBalancerHelpers {\\n    function queryJoin(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IBalancerVault.JoinPoolRequest memory request\\n    ) external returns (uint256 bptOut, uint256[] memory amountsIn);\\n\\n    function queryExit(\\n        bytes32 poolId,\\n        address sender,\\n        address recipient,\\n        IBalancerVault.ExitPoolRequest memory request\\n    ) external returns (uint256 bptIn, uint256[] memory amountsOut);\\n}\"\r\n    },\r\n    \"contracts/interfaces/external/balancer/IBalancerVault.sol\": {\r\n      \"content\": \"pragma solidity 0.8.19;\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n// Temple (interfaces/external/balancer/IBalancerVault.sol)\\n\\ninterface IBalancerVault {\\n\\n  struct JoinPoolRequest {\\n    address[] assets;\\n    uint256[] maxAmountsIn;\\n    bytes userData;\\n    bool fromInternalBalance;\\n  }\\n\\n  struct ExitPoolRequest {\\n    address[] assets;\\n    uint256[] minAmountsOut;\\n    bytes userData;\\n    bool toInternalBalance;\\n  }\\n\\n  struct BatchSwapStep {\\n    bytes32 poolId;\\n    uint256 assetInIndex;\\n    uint256 assetOutIndex;\\n    uint256 amount;\\n    bytes userData;\\n  }\\n\\n  struct FundManagement {\\n    address sender;\\n    bool fromInternalBalance;\\n    address payable recipient;\\n    bool toInternalBalance;\\n  }\\n\\n  enum JoinKind { \\n    INIT, \\n    EXACT_TOKENS_IN_FOR_BPT_OUT, \\n    TOKEN_IN_FOR_EXACT_BPT_OUT, \\n    ALL_TOKENS_IN_FOR_EXACT_BPT_OUT \\n  }\\n\\n  enum SwapKind {\\n    GIVEN_IN,\\n    GIVEN_OUT\\n  }\\n\\n  function batchSwap(\\n    SwapKind kind,\\n    BatchSwapStep[] memory swaps,\\n    address[] memory assets,\\n    FundManagement memory funds,\\n    int256[] memory limits,\\n    uint256 deadline\\n  ) external returns (int256[] memory assetDeltas);\\n\\n  function joinPool(\\n    bytes32 poolId,\\n    address sender,\\n    address recipient,\\n    JoinPoolRequest memory request\\n  ) external payable;\\n\\n  function exitPool( \\n    bytes32 poolId, \\n    address sender, \\n    address recipient, \\n    ExitPoolRequest memory request \\n  ) external;\\n\\n  function getPoolTokens(\\n    bytes32 poolId\\n  ) external view\\n    returns (\\n      address[] memory tokens,\\n      uint256[] memory balances,\\n      uint256 lastChangeBlock\\n  );\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 999999\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_balancerVault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_balancerHelpers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bptToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_amo\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_protocolTokenIndexInPool\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_balancerPoolId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"HighSlippage\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRebalanceDown\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoRebalanceUp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyAMO\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BPS_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PRICE_PRECISION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"}],\"name\":\"applySlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerHelpers\",\"outputs\":[{\"internalType\":\"contract IBalancerHelpers\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerPoolId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balancerVault\",\"outputs\":[{\"internalType\":\"contract IBalancerVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bptToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRebalanceDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"exitTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"exitPoolToken\",\"type\":\"address\"}],\"name\":\"exitPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"balances\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPairBalances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolTokenBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quoteTokenBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"spotPriceBefore\",\"type\":\"uint256\"}],\"name\":\"getSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSpotPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceAboveTpi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceAboveTpi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceAboveTpiUpperBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slippage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceBelowTpi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceBelowTpi\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"isSpotPriceBelowTpiLowerBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBptOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"postRebalanceDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"joinTokenIndex\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"joinPoolToken\",\"type\":\"address\"}],\"name\":\"joinPool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bptOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"quoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"}],\"name\":\"proportionalAddLiquidityQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"protocolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedBptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBptAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"maxAmountsIn\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"fromInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.JoinPoolRequest\",\"name\":\"requestData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bptAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slippageBps\",\"type\":\"uint256\"}],\"name\":\"proportionalRemoveLiquidityQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedProtocolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedQuoteTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minProtocolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minQuoteTokenAmount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"minAmountsOut\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"userData\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"toInternalBalance\",\"type\":\"bool\"}],\"internalType\":\"struct IBalancerVault.ExitPoolRequest\",\"name\":\"requestData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolTokenIndexInBalancerPool\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"quoteToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"willExitTakePriceAboveTpiUpperBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"willJoinTakePriceBelowTpiLowerBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundLow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"willQuoteTokenExitTakePriceBelowTpiLowerBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokensIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rebalancePercentageBoundUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"treasuryPriceIndex\",\"type\":\"uint256\"}],\"name\":\"willQuoteTokenJoinTakePriceAboveTpiUpperBound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "BalancerPoolHelper", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "999999", "ConstructorArguments": "000000000000000000000000ba12222222228d8ba445958a75a0704d566bf2c80000000000000000000000005addcca35b7a0d07c74063c48700c8590e87864e000000000000000000000000470ebf5f030ed85fc1ed4c2d36b9dd02e77cf1b70000000000000000000000006b175474e89094c44da98b954eedeac495271d0f0000000000000000000000008bd4a1e74a27182d23b98c10fd21d4fbb0ed4ba0000000000000000000000000ddf499e726bfde29ce035f6b355e55757f08b5ef00000000000000000000000000000000000000000000000000000000000000008bd4a1e74a27182d23b98c10fd21d4fbb0ed4ba00002000000000000000004ed", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}