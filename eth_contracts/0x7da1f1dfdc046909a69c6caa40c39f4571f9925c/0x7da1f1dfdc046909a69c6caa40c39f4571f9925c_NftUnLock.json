{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/NftUnLock.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface NFTCaller {\\n  function unrestrict(uint256 tokenId) external;\\n\\n  function burnByAdmin(uint256 tokenId) external;\\n\\n  function mint(address to, uint256 tokenId) external;\\n}\\n\\ncontract NftUnLock is Ownable {\\n  address private sazaAddress; //\uc0ac\uc790 \ucee8\ud2b8\ub799\ud2b8\\n  address private gazaAddress; //\uac00\uc790 \ucee8\ud2b8\ub799\ud2b8\\n\\n  constructor(address saza, address gaza) Ownable(msg.sender) {\\n    sazaAddress = saza;\\n    gazaAddress = gaza;\\n  }\\n\\n  // \ubb38\uc790\uc5f4 \ube44\uad50 \ud568\uc218\\n  function compareString(\\n    string memory str1,\\n    string memory str2\\n  ) private pure returns (bool) {\\n    return (keccak256(abi.encodePacked(str1)) ==\\n      keccak256(abi.encodePacked(str2)));\\n  }\\n\\n  // \ub77d\uc5c5\ud574\uc81c\\n  function nftUnrestrict(\\n    uint256[] calldata _id_list,\\n    string memory _tokenType\\n  ) public onlyOwner {\\n    address targetAddress;\\n    if (compareString(_tokenType, \\\"saza\\\")) {\\n      targetAddress = sazaAddress;\\n    } else if (compareString(_tokenType, \\\"gaza\\\")) {\\n      targetAddress = gazaAddress;\\n    } else {\\n      revert(\\\"Invalid token type\\\");\\n    }\\n\\n    for (uint256 i = 0; i < _id_list.length; i++) {\\n      NFTCaller(targetAddress).unrestrict(_id_list[i]);\\n    }\\n  }\\n\\n  // \uc18c\uac01\uacfc \ubbfc\ud2b8\uc640 \ub77d\uc5c5\ud574\uc81c\\n  function burnAndMintAndUnrestrict(\\n    address[] calldata _to_list,\\n    uint256[] calldata _id_list,\\n    string memory _tokenType\\n  ) public onlyOwner {\\n    require(\\n      _to_list.length == _id_list.length,\\n      \\\"to_list and id_list must be same length\\\"\\n    );\\n\\n    address targetAddress;\\n    if (compareString(_tokenType, \\\"saza\\\")) {\\n      targetAddress = sazaAddress;\\n    } else if (compareString(_tokenType, \\\"gaza\\\")) {\\n      targetAddress = gazaAddress;\\n    } else {\\n      revert(\\\"Invalid token type\\\");\\n    }\\n\\n    for (uint256 i = 0; i < _to_list.length; i++) {\\n      NFTCaller(targetAddress).burnByAdmin(_id_list[i]);\\n      NFTCaller(targetAddress).mint(_to_list[i], _id_list[i]);\\n      NFTCaller(targetAddress).unrestrict(_id_list[i]);\\n    }\\n  }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"saza\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gaza\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_to_list\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_id_list\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_tokenType\",\"type\":\"string\"}],\"name\":\"burnAndMintAndUnrestrict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_id_list\",\"type\":\"uint256[]\"},{\"internalType\":\"string\",\"name\":\"_tokenType\",\"type\":\"string\"}],\"name\":\"nftUnrestrict\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "NftUnLock", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000075e46bdc52d4a2064dc8850ee0f52ee93bfe337c0000000000000000000000003d049adb773faddef681fbe565466c4f9736a009", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}