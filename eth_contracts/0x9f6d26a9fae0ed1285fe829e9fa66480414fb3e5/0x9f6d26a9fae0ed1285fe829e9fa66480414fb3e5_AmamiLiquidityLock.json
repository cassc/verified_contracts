{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\nabstract contract Ownable {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"Only owner can execute the following\");\r\n        _;\r\n    }\r\n\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    function renounceOwnership() public onlyOwner {\r\n        owner = address(0);\r\n        emit OwnershipTransferred(address(0));\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n \r\ninterface IERC20 {  \r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);  \r\n    function transfer(address to, uint value) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n} \r\n\r\ncontract AmamiLiquidityLock is Ownable {\r\n    struct Lock {\r\n        uint256 amount;\r\n        uint256 releaseTime;\r\n        address owner;\r\n    }\r\n\r\n    uint256 public liquidityLockTime;\r\n    uint256 public reservesLockTime;\r\n\r\n    Lock public liquidityLock;\r\n    Lock public reservesLock;\r\n\r\n    IERC20 public token;\r\n    IERC20 public uniswapV2Pair;\r\n\r\n    constructor(address _token) Ownable(msg.sender) {\r\n        token = IERC20(_token);\r\n    }\r\n\r\n    function setUniswapV2Pair(address _pair) external onlyOwner {\r\n        uniswapV2Pair = IERC20(_pair);\r\n    }\r\n\r\n    function setLiquidityLockTime(uint256 _days) external onlyOwner {\r\n        liquidityLockTime = 86400 * _days;\r\n    }\r\n\r\n    function setReservesLockTime(uint256 _days) external onlyOwner {\r\n        reservesLockTime = 86400 * _days;\r\n    }\r\n\r\n    function lockLiquidityTokens(uint256 _amount) external onlyOwner {\r\n        require(address(uniswapV2Pair) != address(0), \"Uniswap V2 pair not set\");\r\n        require(_amount > 0, \"Amount must be greater than zero\");\r\n        require(liquidityLockTime > 0, \"V2 lock time not set\");\r\n\r\n        uniswapV2Pair.transferFrom(msg.sender, address(this), _amount);\r\n        liquidityLock = Lock({\r\n            amount: _amount,\r\n            releaseTime: block.timestamp + liquidityLockTime,\r\n            owner: msg.sender\r\n        });\r\n    }\r\n\r\n    function lockTeamReserves(uint256 _amount) external onlyOwner {\r\n        require(_amount > 0, \"Amount must be greater than zero\");\r\n        require(reservesLockTime > 0, \"Reserves lock time not set\");\r\n        token.transferFrom(msg.sender, address(this), _amount);\r\n        reservesLock = Lock({\r\n            amount: _amount,\r\n            releaseTime: block.timestamp + reservesLockTime,\r\n            owner: msg.sender\r\n        });\r\n    }\r\n\r\n    function withdrawLiquidityTokens() external onlyOwner {\r\n        require(block.timestamp >= liquidityLock.releaseTime, \"Liquidity tokens not released yet\");\r\n        uint256 amount = liquidityLock.amount;\r\n        uniswapV2Pair.transferFrom(address(this), liquidityLock.owner, amount);\r\n        delete liquidityLock;\r\n    }\r\n\r\n    function withdrawTeamReserves() external onlyOwner {\r\n        require(block.timestamp >= reservesLock.releaseTime, \"Team reserves not released yet\");\r\n        uint256 amount = reservesLock.amount;\r\n        token.transferFrom(address(this), reservesLock.owner, amount);\r\n        delete reservesLock;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockLiquidityTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"lockTeamReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservesLock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservesLockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setLiquidityLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"setReservesLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pair\",\"type\":\"address\"}],\"name\":\"setUniswapV2Pair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLiquidityTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTeamReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AmamiLiquidityLock", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "00000000000000000000000073a2e29356791c195102ff8a1dbba49281e93980", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1347a22fe06341ae14b501490e470ac8007b4e5a883afb4e87cd7d1853aa4ac5"}