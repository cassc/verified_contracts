{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/OwnerOf_Art.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport {ReentrancyGuard} from \\\"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {Ownable} from \\\"lib/openzeppelin-contracts/contracts/access/Ownable.sol\\\";\\nimport {IERC721} from \\\"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IPunkOwnerOf} from \\\"src/ref/IPunkOwnerOf.sol\\\";\\nimport {BytecodeStorageReader, BytecodeStorageWriter} from \\\"./lib/BytecodeStorageV1Fork.sol\\\";\\nimport {IDelegateRegistry} from \\\"lib/delegate-registry/src/IDelegateRegistry.sol\\\";\\nimport { LibZip } from \\\"lib/solady/src/utils/LibZip.sol\\\";\\n\\nimport {IOwnerOf_Art} from \\\"src/IOwnerOf_Art.sol\\\";\\n\\n/**\\n * @title OwnerOf_Art\\n * @author ryley.eth (ryley-o.eth)\\n * @notice Contract that enables posting of provenance messages from owners of ERC-721 tokens.\\n * Messages are intended to be used for provenance of art and other digital assets.\\n * Messages are stored in bytecode storage and may never be deleted or modified, but new messages may be posted.\\n * The contract is integrated with delegate.xyz v2 to allow owners to delegate posting messages to others.\\n * Only ERC-721 and cryptopunks tokens are supported.\\n * The ERC-1155 standard is intentionally not supported in this contract to prevent one owner from posting\\n * messages about another owner's token, potentially negatively impacting other owners' assets without their consent.\\n */\\ncontract OwnerOf_Art is IOwnerOf_Art, Ownable, ReentrancyGuard {\\n    using BytecodeStorageWriter for string;\\n    using BytecodeStorageWriter for bytes;\\n    using BytecodeStorageReader for address;\\n\\n    // integrate with delegate.xyz v2\\n    // @dev this is consistent across multiple networks\\n    address public constant DELEGATE_REGISTRY = 0x00000000000000447e69651d841bD8D104Bed493;\\n\\n    // Use the following rights if desire to only delegate message posting operations:\\n    // 0x3814eef715e47fefb0e782972afa908cd0f583157056c2497b8b05ca61c20a16\\n    bytes32 public constant DELEGATE_RIGHTS = keccak256(\\\"OWNER_OF_ART\\\");\\n\\n    // override cryptopunks ownerOf function\\n    // @dev Ethereum mainnet only\\n    address private constant _CRYPTOPUNKS = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\\n    \\n    mapping (address tokenAddress => mapping(uint tokenId => Message[])) private _messages;\\n\\n    /**\\n     * Assign the initial owner of the contract, as well as initialize the ReentrancyGuard.\\n     * @dev The owner's only role is to drain tips or update the owner. No other functionality is restricted to the owner,\\n     * and the owner cannot affect the posting or storage of messages.\\n     * @param initialOwner Address to be set as the owner of the contract\\n     */\\n    constructor(address initialOwner) Ownable(initialOwner) ReentrancyGuard() {}\\n\\n    /**\\n     * @notice Post a new message about an ERC721 token.\\n     * The function is payable to allow for tipping the owner of this contract for the service.\\n     * The function will revert if the sender is not the owner of the token or a delegate of the owner on delegate.xyz v2.\\n     * The message is stored in bytecode storage and the address of the storage contract is emitted in the MessagePosted event.\\n     * The message may never be deleted or modified, but new messages may be posted.\\n     * @dev Reentrant calls are prevented by the ReentrancyGuard modifier\\n     * @param tokenAddress Address of the ERC721 token contract being posted about\\n     * @param tokenId ID of the token being posted about\\n     * @param message Message to be posted about the token\\n     */\\n    function postMessage(address tokenAddress, uint256 tokenId, string memory message) external payable nonReentrant {\\n        // EFFECTS\\n        // write message to bytecode storage, push to messages storage array\\n        address bytecodeStorageAddress = message.writeToBytecode();\\n        _messages[tokenAddress][tokenId].push( Message({\\n            bytecodeStorageAddress: bytecodeStorageAddress,\\n            sender: msg.sender,\\n            timestamp: uint40(block.timestamp)\\n        }) );\\n\\n        // INTERACTIONS\\n        _verifyOwnerOrDelegateAndEmitEvent({\\n            tokenAddress: tokenAddress,\\n            tokenId: tokenId,\\n            bytecodeStorageAddress: bytecodeStorageAddress\\n        });\\n    }\\n\\n    /**\\n     * @notice Post a new message about an ERC721 token.\\n     * The function is payable to allow for tipping the owner of this contract for the service.\\n     * The function will revert if the sender is not the owner of the token or a delegate of the owner on delegate.xyz v2.\\n     * The message is stored in bytecode storage and the address of the storage contract is emitted in the MessagePosted event.\\n     * The message may never be deleted or modified, but new messages may be posted.\\n     * @dev Reentrant calls are prevented by the ReentrancyGuard modifier\\n     * @param tokenAddress Address of the ERC721 token contract being posted about\\n     * @param tokenId ID of the token being posted about\\n     * @param messageCompressed Message to be posted about the token, compressed with flz compress.\\n     * Pure function getCompressedMessage may be used off-chain to compress a message prior to calling this function.\\n     */\\n    function postMessageCompressed(address tokenAddress, uint256 tokenId, bytes memory messageCompressed) external payable nonReentrant {\\n        // EFFECTS\\n        // write message to bytecode storage, push to messages storage array\\n        address bytecodeStorageAddress = messageCompressed.writeToBytecodeCompressed();\\n        _messages[tokenAddress][tokenId].push( Message({\\n            bytecodeStorageAddress: bytecodeStorageAddress,\\n            sender: msg.sender,\\n            timestamp: uint40(block.timestamp)\\n        }) );\\n\\n        // INTERACTIONS\\n        _verifyOwnerOrDelegateAndEmitEvent({\\n            tokenAddress: tokenAddress,\\n            tokenId: tokenId,\\n            bytecodeStorageAddress: bytecodeStorageAddress\\n        });\\n    }\\n\\n    /**\\n     * Function to enable the owner to drain tips from the contract to a specified address.\\n     * Reverts if the caller is not the owner.\\n     * @param to Address to drain funds to\\n     */\\n    function drainTipsTo(address payable to) external onlyOwner {\\n        (bool success, ) = to.call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(success, \\\"drain payment failed\\\");\\n    }\\n\\n    /**\\n     * @notice Get all messages posted about an ERC721 token.\\n     * @dev This function is gas unbounded and should be used with caution. For pagination, use getMessageAtIndex.\\n     * @param tokenAddress Address of the ERC721 token contract posted about\\n     * @param tokenId ID of the token posted about\\n     * @return messagesView Array of MessageView structs containing the messages posted about the token\\n     */\\n    function getMessages(address tokenAddress, uint256 tokenId) external view returns (MessageView[] memory) {\\n        Message[] storage messages = _messages[tokenAddress][tokenId];\\n        uint256 messagesLength = messages.length;\\n        MessageView[] memory messagesView = new MessageView[](messagesLength);\\n        for (uint256 i = 0; i < messagesLength; i++) {\\n            Message storage message = messages[i];\\n            messagesView[i] = MessageView({\\n                bytecodeStorageAddress: message.bytecodeStorageAddress,\\n                sender: message.sender,\\n                timestamp: message.timestamp,\\n                message: message.bytecodeStorageAddress.readFromBytecode()\\n            });\\n        }\\n        return messagesView;\\n    }\\n\\n    /**\\n     * @notice Get the number of messages posted about an ERC721 token.\\n     * @param tokenAddress Address of the ERC721 token contract posted about\\n     * @param tokenId ID of the token posted about\\n     * @return count Number of messages posted about the token\\n     */\\n    function getMessageCount(address tokenAddress, uint256 tokenId) external view returns (uint256) {\\n        return _messages[tokenAddress][tokenId].length;\\n    }\\n\\n    /**\\n     * @notice Get a message posted about an ERC721 token at a specific index.\\n     * Reverts if the index is out of bounds.\\n     * @param tokenAddress Address of the ERC721 token contract posted about\\n     * @param tokenId ID of the token posted about\\n     * @param index Index of the message to retrieve\\n     * @return messageView MessageView struct containing the message posted about the token\\n     */\\n    function getMessageAtIndex(address tokenAddress, uint256 tokenId, uint256 index) external view returns (MessageView memory) {\\n        Message storage message = _messages[tokenAddress][tokenId][index];\\n        return MessageView({\\n            bytecodeStorageAddress: message.bytecodeStorageAddress,\\n            sender: message.sender,\\n            timestamp: message.timestamp,\\n            message: message.bytecodeStorageAddress.readFromBytecode()\\n        });\\n    }\\n\\n    /**\\n     * @notice Get the compressed form of a message string using flz compress. The compressed\\n     * form of the message may be used as the input to postMessageCompressed for a more gas efficient\\n     * way to post long messages.\\n     * @param message string to compress\\n     * @return bytes compressed form of the message\\n     */\\n    function getCompressedMessage(string memory message) external pure returns (bytes memory) {\\n        return LibZip.flzCompress(bytes(message));\\n    }\\n\\n    /**\\n     * Verify that the sender is the owner of the token or a delegate of the owner on delegate.xyz v2.\\n     * If the sender is the owner or a delegate, emit a MessagePosted event.\\n     * Reverts if the sender is not the owner or a delegate of the owner on delegate.xyz v2.\\n     * @dev This function is used to avoid code duplication in the postMessage and postMessageCompressed functions.\\n     * @dev This function should be called within the context of a nonReentrant modifier.\\n     * @param tokenAddress Address of the ERC721 token contract being posted about\\n     * @param tokenId ID of the token being posted about\\n     * @param bytecodeStorageAddress Address of the bytecode storage contract where the message was stored\\n     */\\n    function _verifyOwnerOrDelegateAndEmitEvent(address tokenAddress, uint256 tokenId, address bytecodeStorageAddress) internal {\\n        // INTERACTIONS\\n        // gate to owner of token\\n        // @dev add support for cryptopunks non-standard ownerOf function\\n        address tokenOwner = (tokenAddress == _CRYPTOPUNKS && block.chainid == 1)\\n            ? IPunkOwnerOf(_CRYPTOPUNKS).punkIndexToAddress(tokenId)\\n            : IERC721(tokenAddress).ownerOf(tokenId);\\n        if (tokenOwner != msg.sender) {\\n            // check delegate.xyz v2\\n            bool isDelegate = IDelegateRegistry(DELEGATE_REGISTRY).checkDelegateForERC721({\\n                to: msg.sender,\\n                from: tokenOwner,\\n                contract_: tokenAddress,\\n                tokenId: tokenId,\\n                rights: DELEGATE_RIGHTS\\n            });\\n            require(isDelegate, \\\"OwnerOf_Art: not owner or delegate\\\");\\n        }\\n\\n        // EVENTS\\n        emit MessagePosted({\\n            tokenAddress: tokenAddress,\\n            tokenId: tokenId,\\n            owner: tokenOwner,\\n            bytecodeStorageAddress: bytecodeStorageAddress,\\n            index: _messages[tokenAddress][tokenId].length - 1,\\n            tip: msg.value\\n        });\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/ref/IPunkOwnerOf.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title IPunkOwnerOf\\n * @dev Interface for CryptoPunks contract substitute for ownerOf function\\n */\\ninterface IPunkOwnerOf {\\n    // CryptoPunks use public mapping (uint256 => address) public punkIndexToAddress\\n    // instead of the ERC721 standard function ownerOf(uint256 tokenId) public view returns (address)\\n    function punkIndexToAddress(uint256 tokenId) external view returns (address);\\n}\"\r\n    },\r\n    \"src/lib/BytecodeStorageV1Fork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: LGPL-3.0-only\\n// Created By: Art Blocks Inc.\\n\\nimport { LibZip } from \\\"lib/solady/src/utils/LibZip.sol\\\";\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Forked Art Blocks Script Storage Library - forked with compression capabilities via solady ZipLib\\n * @notice Utilize contract bytecode as persistent storage for large chunks of script string data.\\n *         This library is intended to have an external deployed copy that is released in the future,\\n *         and, as such, has been designed to support both updated V1 (versioned, with purging removed)\\n *         reads as well as backwards-compatible reads for both a) the unversioned \\\"V0\\\" storage contracts\\n *         which were deployed by the original version of this libary and b) contracts that were deployed\\n *         using one of the SSTORE2 implementations referenced below.\\n *         For these pre-V1 storage contracts (which themselves did not have any explicit versioning semantics)\\n *         backwards-compatible reads are optimistic, and only expected to work for contracts actually\\n *         deployed by the original version of this library \u2013\u00a0and may fail ungracefully if attempted to be\\n *         used to read from other contracts.\\n *         This library is split into two components, intended to be updated in tandem, and thus included\\n *         here in the same source file. One component is an internal library that is intended to be embedded\\n *         directly into other contracts and provides all _write_ functionality. The other is a public library\\n *         that is intended to be deployed as a standalone contract and provides all _read_ functionality.\\n *\\n * @author Art Blocks Inc. - Forked by ryley-o.eth for separate OwnerOf.Art project\\n * @author Modified from 0xSequence (https://github.com/0xsequence/sstore2/blob/master/contracts/SSTORE2.sol)\\n * @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/SSTORE2.sol)\\n *\\n * @dev Compared to the above two rerferenced libraries, this contracts-as-storage implementation makes a few\\n *      notably different design decisions:\\n *      - uses the `string` data type for input/output on reads, rather than speaking in bytes directly\\n *      - stores the \\\"writer\\\" address (library user) in the deployed contract bytes, which is useful for\\n *        on-chain introspection and provenance purposes\\n *      - stores a very simple versioning string in the deployed contract bytes, which captures the version\\n *        of the library that was used to deploy the storage contract and useful for supporting future\\n *        compatibility management as this library evolves (e.g. in response to EOF v1 migration plans)\\n *      Also, given that much of this library is written in assembly, this library makes use of a slightly\\n *      different convention (when compared to the rest of the Art Blocks smart contract repo) around\\n *      pre-defining return values in some cases in order to simplify need to directly memory manage these\\n *      return values.\\n */\\n\\n/**\\n * @title Art Blocks Script Storage Library (Public, Reads)\\n * @author Art Blocks Inc.\\n * @notice The public library for reading from storage contracts. This library is intended to be deployed as a\\n *         standalone contract, and provides all _read_ functionality.\\n */\\nlibrary BytecodeStorageReader {\\n    // Define the set of known valid version strings that may be stored in the deployed storage contract bytecode\\n    // note: These are all intentionally exactly 32-bytes and are null-terminated. Null-termination is used due\\n    //       to this being the standard expected formatting in common web3 tooling such as ethers.js. Please see\\n    //       the following for additional context: https://docs.ethers.org/v5/api/utils/strings/#Bytes32String\\n    // Used for storage contracts that were deployed by an unknown source\\n    bytes32 public constant UNKNOWN_VERSION_STRING =\\n        \\\"UNKNOWN_VERSION_STRING_________ \\\";\\n    // Pre-dates versioning string, so this doesn't actually exist in any deployed contracts,\\n    // but is useful for backwards-compatible semantics with original version of this library\\n    bytes32 public constant V0_VERSION_STRING =\\n        \\\"BytecodeStorage_V0.0.0_________ \\\";\\n    // The first versioned storage contract, deployed by an updated version of this library\\n    bytes32 public constant V1_VERSION_STRING =\\n        \\\"BytecodeStorage_V1.0.0_________ \\\";\\n    // The first versioned storage contract, deployed by an updated version of this library\\n    bytes32 public constant V1FORK_VERSION_STRING =\\n        \\\"BytecodeStorage_V1Fork.0.0_____ \\\";\\n    // The current version of this library.\\n    bytes32 public constant CURRENT_VERSION = V1FORK_VERSION_STRING;\\n\\n    //---------------------------------------------------------------------------------------------------------------//\\n    // Starting Index | Size | Ending Index | Description                                                            //\\n    //---------------------------------------------------------------------------------------------------------------//\\n    // 0              | N/A  | 0            |                                                                        //\\n    // 0              | 1    | 1            | single byte opcode for making the storage contract non-executable      //\\n    // 1              | 32   | 33           | the 32 byte slot used for storing a basic versioning string            //\\n    // 33             | 32   | 65           | the 32 bytes for storing the deploying contract's (0-padded) address   //\\n    // 65             | 1    | 66           | single byte indicating if the stored data are compressed               //\\n    //---------------------------------------------------------------------------------------------------------------//\\n    // Define the offset for where the \\\"meta bytes\\\" end, and the \\\"data bytes\\\" begin. Note that this is a manually\\n    // calculated value, and must be updated if the above table is changed. It is expected that tests will fail\\n    // loudly if these values are not updated in-step with eachother.\\n    uint256 private constant VERSION_OFFSET = 1;\\n    uint256 private constant ADDRESS_OFFSET = 33;\\n    uint256 private constant COMPRESSION_OFFSET = 65;\\n    uint256 private constant DATA_OFFSET = 66;\\n\\n    // Define the set of known *historic* offset values for where the \\\"meta bytes\\\" end, and the \\\"data bytes\\\" begin.\\n    // SSTORE2 deployed storage contracts take the general format of:\\n    // concat(0x00, data)\\n    // note: this is true for both variants of the SSTORE2 library\\n    uint256 private constant SSTORE2_DATA_OFFSET = 1;\\n    // V0 deployed storage contracts take the general format of:\\n    // concat(gated-cleanup-logic, deployer-address, data)\\n    uint256 private constant V0_ADDRESS_OFFSET = 72;\\n    uint256 private constant V0_DATA_OFFSET = 104;\\n    // V1 deployed storage contracts take the general format of:\\n    // concat(invalid opcode, version, deployer-address, data)\\n    uint256 private constant V1_ADDRESS_OFFSET = 33;\\n    uint256 private constant V1_DATA_OFFSET = 65;\\n    // V1Fork deployed storage contracts take the general format of:\\n    // concat(invalid opcode, version, deployer-address, compression-bool, data)\\n    uint256 private constant V1FORK__ADDRESS_OFFSET = 33;\\n    uint256 private constant V1FORK_DATA_OFFSET = 66;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               READ LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Read a string from contract bytecode\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 or V1Fork format\\n     * @return data string read from contract bytecode\\n     * @dev This function performs input validation that the contract to read is in an expected format\\n     */\\n    function readFromBytecode(\\n        address _address\\n    ) public view returns (string memory data) {\\n        (uint256 dataOffset, bool isCompressed) = _bytecodeDataOffsetAndIsCompressedAt(_address);\\n        if (isCompressed) {\\n            return string(LibZip.flzDecompress(readBytesFromBytecode(_address, dataOffset)));\\n        } else {\\n            return string(readBytesFromBytecode(_address, dataOffset));\\n        }\\n    }\\n\\n    /**\\n     * @notice Read the bytes from contract bytecode that was written to the EVM using SSTORE2\\n     * @param _address address of deployed contract with bytecode stored in the SSTORE2 format\\n     * @return data bytes read from contract bytecode\\n     * @dev This function performs no input validation on the provided contract,\\n     *      other than that there is content to read (but not that its a \\\"storage contract\\\")\\n     */\\n    function readBytesFromSSTORE2Bytecode(\\n        address _address\\n    ) public view returns (bytes memory data) {\\n        return readBytesFromBytecode(_address, SSTORE2_DATA_OFFSET);\\n    }\\n\\n    /**\\n     * @notice Read the bytes from contract bytecode, with an explicitly provided starting offset\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 format\\n     * @param _offset offset to read from in contract bytecode, explicitly provided (not calculated)\\n     * @return data bytes read from contract bytecode\\n     * @dev This function performs no input validation on the provided contract,\\n     *      other than that there is content to read (but not that its a \\\"storage contract\\\")\\n     */\\n    function readBytesFromBytecode(\\n        address _address,\\n        uint256 _offset\\n    ) public view returns (bytes memory data) {\\n        // get the size of the bytecode\\n        uint256 bytecodeSize = _bytecodeSizeAt(_address);\\n        // handle case where address contains code < _offset\\n        if (bytecodeSize < _offset) {\\n            revert(\\\"ContractAsStorage: Read Error\\\");\\n        }\\n\\n        // handle case where address contains code >= dataOffset\\n        // decrement by dataOffset to account for header info\\n        uint256 size;\\n        unchecked {\\n            size = bytecodeSize - _offset;\\n        }\\n\\n        assembly {\\n            // allocate free memory\\n            data := mload(0x40)\\n            // update free memory pointer\\n            // use and(x, not(0x1f) as cheaper equivalent to sub(x, mod(x, 0x20)).\\n            // adding 0x1f to size + logic above ensures the free memory pointer\\n            // remains word-aligned, following the Solidity convention.\\n            mstore(0x40, add(data, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            // store length of data in first 32 bytes\\n            mstore(data, size)\\n            // copy code to memory, excluding the deployer-address\\n            extcodecopy(_address, add(data, 0x20), _offset, size)\\n        }\\n    }\\n\\n    /**\\n     * @notice Get address for deployer for given contract bytecode\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 format\\n     * @return writerAddress address read from contract bytecode\\n     */\\n    function getWriterAddressForBytecode(\\n        address _address\\n    ) public view returns (address) {\\n        // get the size of the data\\n        uint256 bytecodeSize = _bytecodeSizeAt(_address);\\n        // the dataOffset for the bytecode\\n        uint256 addressOffset = _bytecodeAddressOffsetAt(_address);\\n        // handle case where address contains code < addressOffset + 32 (address takes a whole slot)\\n        if (bytecodeSize < (addressOffset + 32)) {\\n            revert(\\\"ContractAsStorage: Read Error\\\");\\n        }\\n\\n        assembly {\\n            // allocate free memory\\n            let writerAddress := mload(0x40)\\n            // shift free memory pointer by one slot\\n            mstore(0x40, add(mload(0x40), 0x20))\\n            // copy the 32-byte address of the data contract writer to memory\\n            // note: this relies on the assumption noted at the top-level of\\n            //       this file that the storage layout for the deployed\\n            //       contracts-as-storage contract looks like::\\n            //       | invalid opcode | version-string (unless v0) | deployer-address (padded) | data |\\n            extcodecopy(\\n                _address,\\n                writerAddress,\\n                addressOffset,\\n                0x20 // full 32-bytes, as address is expected to be zero-padded\\n            )\\n            return(\\n                writerAddress,\\n                0x20 // return size is entire slot, as it is zero-padded\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice Get version for given contract bytecode\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 format\\n     * @return version version read from contract bytecode\\n     */\\n    function getLibraryVersionForBytecode(\\n        address _address\\n    ) public view returns (bytes32) {\\n        return _bytecodeVersionAt(_address);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                          INTERNAL HELPER LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Returns the size of the bytecode at address `_address`\\n     * @param _address address that may or may not contain bytecode\\n     * @return size size of the bytecode code at `_address`\\n     */\\n    function _bytecodeSizeAt(\\n        address _address\\n    ) private view returns (uint256 size) {\\n        assembly {\\n            size := extcodesize(_address)\\n        }\\n        if (size == 0) {\\n            revert(\\\"ContractAsStorage: Read Error\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the offset of the data in the bytecode at address `_address`\\n     * @param _address address that may or may not contain bytecode\\n     * @return dataOffset offset of data in bytecode if a known version, otherwise 0\\n     * @return isCompressed bool indicating if the stored data are compressed\\n     */\\n    function _bytecodeDataOffsetAndIsCompressedAt(\\n        address _address\\n    ) private view returns (uint256 dataOffset, bool isCompressed) {\\n        bytes32 version = _bytecodeVersionAt(_address);\\n        if (version == V1FORK_VERSION_STRING) {\\n            dataOffset = V1FORK_DATA_OFFSET;\\n            isCompressed = _isCompressedAt(_address, version);\\n        } else if (version == V1_VERSION_STRING) {\\n            dataOffset = V1_DATA_OFFSET;\\n            // isCompressed remains false, as V1 contracts do not support compression\\n        } else if (version == V0_VERSION_STRING) {\\n            dataOffset = V0_DATA_OFFSET;\\n            // isCompressed remains false, as V0 contracts do not support compression\\n        } else {\\n            // unknown version, revert\\n            revert(\\\"ContractAsStorage: Unsupported Version\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Returns the offset of the address in the bytecode at address `_address`\\n     * @param _address address that may or may not contain bytecode\\n     * @return addressOffset offset of address in bytecode if a known version, otherwise 0\\n     */\\n    function _bytecodeAddressOffsetAt(\\n        address _address\\n    ) private view returns (uint256 addressOffset) {\\n        bytes32 version = _bytecodeVersionAt(_address);\\n        if (version == V1FORK_VERSION_STRING) {\\n            addressOffset = V1FORK__ADDRESS_OFFSET;\\n        } else if (version == V1_VERSION_STRING) {\\n            addressOffset = V1_ADDRESS_OFFSET;\\n        } else if (version == V0_VERSION_STRING) {\\n            addressOffset = V0_ADDRESS_OFFSET;\\n        } else {\\n            // unknown version, revert\\n            revert(\\\"ContractAsStorage: Unsupported Version\\\");\\n        }\\n    }\\n\\n    /**\\n     * @notice Get version string for given contract bytecode\\n     * @param _address address of deployed contract with bytecode stored in the V0 or V1 format\\n     * @return version version string read from contract bytecode\\n     */\\n    function _bytecodeVersionAt(\\n        address _address\\n    ) private view returns (bytes32 version) {\\n        // get the size of the data\\n        uint256 bytecodeSize = _bytecodeSizeAt(_address);\\n        // handle case where address contains code < minimum expected version string size,\\n        // by returning early with the unknown version string\\n        if (bytecodeSize < (VERSION_OFFSET + 32)) {\\n            return UNKNOWN_VERSION_STRING;\\n        }\\n\\n        assembly {\\n            // allocate free memory\\n            let versionString := mload(0x40)\\n            // shift free memory pointer by one slot\\n            mstore(0x40, add(mload(0x40), 0x20))\\n            // copy the 32-byte version string of the bytecode library to memory\\n            // note: this relies on the assumption noted at the top-level of\\n            //       this file that the storage layout for the deployed\\n            //       contracts-as-storage contract looks like:\\n            //       | invalid opcode | version-string (unless v0) | deployer-address (padded) | data |\\n            extcodecopy(\\n                _address,\\n                versionString,\\n                VERSION_OFFSET,\\n                0x20 // 32-byte version string\\n            )\\n            // note: must check against literal strings, as Yul does not allow for\\n            //       dynamic strings in switch statements.\\n            switch mload(versionString)\\n            case \\\"BytecodeStorage_V1Fork.0.0_____ \\\" {\\n                version := V1FORK_VERSION_STRING\\n            }\\n            case \\\"BytecodeStorage_V1.0.0_________ \\\" {\\n                version := V1_VERSION_STRING\\n            }\\n            case 0x2060486000396000513314601057fe5b60013614601957fe5b6000357fff0000 {\\n                // the v0 variant of this library pre-dates formal versioning w/ version strings,\\n                // so we check the first 32 bytes of the execution bytecode itself which\\n                // is static and known across all storage contracts deployed with the first version\\n                // of this library.\\n                version := V0_VERSION_STRING\\n            }\\n            default {\\n                version := UNKNOWN_VERSION_STRING\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Get if stored data are compressed for given contract bytecode\\n     * @param _address address of deployed contract with bytecode stored\\n     * @param _version version string of the bytecode library used to deploy the contract at `_address`\\n     * @return isCompressed bool indicating if the stored data are compressed\\n     */\\n    function _isCompressedAt(\\n        address _address,\\n        bytes32 _version\\n    ) private view returns (bool isCompressed) {\\n        if (_version == V0_VERSION_STRING || _version == V1_VERSION_STRING || _version == UNKNOWN_VERSION_STRING) {\\n            // V0 and V1 and unknown contracts do not support compression\\n            return false;\\n        }\\n        if (_version != V1FORK_VERSION_STRING) {\\n            // unsupported version, throw error\\n            revert(\\\"ContractAsStorage: Unsupported Version\\\");\\n        }\\n        // get the size of the data\\n        uint256 bytecodeSize = _bytecodeSizeAt(_address);\\n        // handle case where address contains code < minimum expected version string size,\\n        // by returning early with false\\n        if (bytecodeSize < (COMPRESSION_OFFSET + 1)) {\\n            return false;\\n        }\\n\\n        assembly {\\n            // allocate free memory\\n            let compressedByte := mload(0x40)\\n            // shift free memory pointer by one byte\\n            mstore(0x40, add(mload(0x40), 0x20))\\n            // copy the 1-byte compressed flag of the bytecode library to memory\\n            // copy the 32-byte version string of the bytecode library to memory\\n            // note: this relies on the assumption noted at the top-level of\\n            //       this file that the storage layout for the deployed\\n            //       contracts-as-storage contract looks like:\\n            //       | invalid opcode | version-string (unless v0) | deployer-address (padded) | isCompressed | data |\\n            // TODO - maybe this needs to be offset in compressionByte to be a full slot, so shift 31 bytes?\\n            extcodecopy(\\n                _address,\\n                compressedByte,\\n                COMPRESSION_OFFSET,\\n                0x1 // 1-byte version string\\n            )\\n            // check if the compressed flag is set\\n            switch mload(compressedByte)\\n            case 0x00 {\\n                isCompressed := false\\n            }\\n            default {\\n                isCompressed := true\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * @title Art Blocks Script Storage Library (Internal, Writes)\\n * @author Art Blocks Inc.\\n * @notice The internal library for writing to storage contracts. This library is intended to be deployed\\n *         within library client contracts that use this library to perform _write_ operations on storage.\\n */\\nlibrary BytecodeStorageWriter {\\n    /*//////////////////////////////////////////////////////////////\\n                           WRITE LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /**\\n     * @notice Write a string to contract bytecode\\n     * @param _data string to be written to contract. No input validation is performed on this parameter.\\n     * @param address_ address of deployed contract with bytecode stored in the V0 or V1 format\\n     */\\n    function writeToBytecode(\\n        string memory _data\\n    ) internal returns (address address_) {\\n        // prefix bytecode with\\n        bytes memory creationCode = abi.encodePacked(\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // Opcode  | Opcode + Arguments  | Description  | Stack View                                                     //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // a.) creation code returns all code in the contract except for the first 11 (0B in hex) bytes, as these 11\\n            //     bytes are the creation code itself which we do not want to store in the deployed storage contract result\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x60_0B            | PUSH1 11     | codeOffset                                                     //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset                                                   //\\n            // 0x81    |  0x81               | DUP2         | codeOffset 0 codeOffset                                        //\\n            // 0x38    |  0x38               | CODESIZE     | codeSize codeOffset 0 codeOffset                               //\\n            // 0x03    |  0x03               | SUB          | (codeSize - codeOffset) 0 codeOffset                           //\\n            // 0x80    |  0x80               | DUP          | (codeSize - codeOffset) (codeSize - codeOffset) 0 codeOffset   //\\n            // 0x92    |  0x92               | SWAP3        | codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset)   //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset) //\\n            // 0x39    |  0x39               | CODECOPY     | 0 (codeSize - codeOffset)                                      //\\n            // 0xF3    |  0xF3               | RETURN       |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (11 bytes)\\n            hex\\\"60_0B_59_81_38_03_80_92_59_39_F3\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // b.) ensure that the deployed storage contract is non-executeable (first opcode is the `invalid` opcode)\\n            //---------------------------------------------------------------------------------------------------------------//\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0xFE    |  0xFE               | INVALID      |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (1 byte)\\n            hex\\\"FE\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // c.) store the version string, which is already represented as a 32-byte value\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (32 bytes)\\n            BytecodeStorageReader.CURRENT_VERSION,\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // d.) store the deploying-contract's address with 0-padding to fit a 20-byte address into a 32-byte slot\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (12 bytes)\\n            hex\\\"00_00_00_00_00_00_00_00_00_00_00_00\\\",\\n            // (20 bytes)\\n            address(this),\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // e.) store the bool indicating if the data is compressed. true for this function.\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (1 byte)\\n            hex\\\"00\\\",\\n            // uploaded data (stored as bytecode) comes last\\n            _data\\n        );\\n\\n        assembly {\\n            // deploy a new contract with the generated creation code.\\n            // start 32 bytes into creationCode to avoid copying the byte length.\\n            address_ := create(0, add(creationCode, 0x20), mload(creationCode))\\n        }\\n\\n        // address must be non-zero if contract was deployed successfully\\n        require(address_ != address(0), \\\"ContractAsStorage: Write Error\\\");\\n    }\\n\\n    /**\\n     * @notice Write a string to contract bytecode\\n     * @param _dataCompressed compressed bytes to be written to contract. No input validation is performed on this parameter.\\n     * @param address_ address of deployed contract with bytecode stored in the V0 or V1 format\\n     */\\n    function writeToBytecodeCompressed(\\n        bytes memory _dataCompressed\\n    ) internal returns (address address_) {\\n        // prefix bytecode with\\n        bytes memory creationCode = abi.encodePacked(\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // Opcode  | Opcode + Arguments  | Description  | Stack View                                                     //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // a.) creation code returns all code in the contract except for the first 11 (0B in hex) bytes, as these 11\\n            //     bytes are the creation code itself which we do not want to store in the deployed storage contract result\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0x60    |  0x60_0B            | PUSH1 11     | codeOffset                                                     //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset                                                   //\\n            // 0x81    |  0x81               | DUP2         | codeOffset 0 codeOffset                                        //\\n            // 0x38    |  0x38               | CODESIZE     | codeSize codeOffset 0 codeOffset                               //\\n            // 0x03    |  0x03               | SUB          | (codeSize - codeOffset) 0 codeOffset                           //\\n            // 0x80    |  0x80               | DUP          | (codeSize - codeOffset) (codeSize - codeOffset) 0 codeOffset   //\\n            // 0x92    |  0x92               | SWAP3        | codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset)   //\\n            // 0x59    |  0x59               | MSIZE        | 0 codeOffset (codeSize - codeOffset) 0 (codeSize - codeOffset) //\\n            // 0x39    |  0x39               | CODECOPY     | 0 (codeSize - codeOffset)                                      //\\n            // 0xF3    |  0xF3               | RETURN       |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (11 bytes)\\n            hex\\\"60_0B_59_81_38_03_80_92_59_39_F3\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // b.) ensure that the deployed storage contract is non-executeable (first opcode is the `invalid` opcode)\\n            //---------------------------------------------------------------------------------------------------------------//\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // 0xFE    |  0xFE               | INVALID      |                                                                //\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (1 byte)\\n            hex\\\"FE\\\",\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // c.) store the version string, which is already represented as a 32-byte value\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (32 bytes)\\n            BytecodeStorageReader.CURRENT_VERSION,\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // d.) store the deploying-contract's address with 0-padding to fit a 20-byte address into a 32-byte slot\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (12 bytes)\\n            hex\\\"00_00_00_00_00_00_00_00_00_00_00_00\\\",\\n            // (20 bytes)\\n            address(this),\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // e.) store the bool indicating if the data is compressed. true for this function.\\n            //---------------------------------------------------------------------------------------------------------------//\\n            // (1 byte)\\n            hex\\\"01\\\",\\n            // uploaded compressed data (stored as bytecode) comes last\\n            _dataCompressed\\n        );\\n\\n        assembly {\\n            // deploy a new contract with the generated creation code.\\n            // start 32 bytes into creationCode to avoid copying the byte length.\\n            address_ := create(0, add(creationCode, 0x20), mload(creationCode))\\n        }\\n\\n        // address must be non-zero if contract was deployed successfully\\n        require(address_ != address(0), \\\"ContractAsStorage: Write Error\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/delegate-registry/src/IDelegateRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.13;\\n\\n/**\\n * @title IDelegateRegistry\\n * @custom:version 2.0\\n * @custom:author foobar (0xfoobar)\\n * @notice A standalone immutable registry storing delegated permissions from one address to another\\n */\\ninterface IDelegateRegistry {\\n    /// @notice Delegation type, NONE is used when a delegation does not exist or is revoked\\n    enum DelegationType {\\n        NONE,\\n        ALL,\\n        CONTRACT,\\n        ERC721,\\n        ERC20,\\n        ERC1155\\n    }\\n\\n    /// @notice Struct for returning delegations\\n    struct Delegation {\\n        DelegationType type_;\\n        address to;\\n        address from;\\n        bytes32 rights;\\n        address contract_;\\n        uint256 tokenId;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Emitted when an address delegates or revokes rights for their entire wallet\\n    event DelegateAll(address indexed from, address indexed to, bytes32 rights, bool enable);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for a contract address\\n    event DelegateContract(address indexed from, address indexed to, address indexed contract_, bytes32 rights, bool enable);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an ERC721 tokenId\\n    event DelegateERC721(address indexed from, address indexed to, address indexed contract_, uint256 tokenId, bytes32 rights, bool enable);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an amount of ERC20 tokens\\n    event DelegateERC20(address indexed from, address indexed to, address indexed contract_, bytes32 rights, uint256 amount);\\n\\n    /// @notice Emitted when an address delegates or revokes rights for an amount of an ERC1155 tokenId\\n    event DelegateERC1155(address indexed from, address indexed to, address indexed contract_, uint256 tokenId, bytes32 rights, uint256 amount);\\n\\n    /// @notice Thrown if multicall calldata is malformed\\n    error MulticallFailed();\\n\\n    /**\\n     * -----------  WRITE -----------\\n     */\\n\\n    /**\\n     * @notice Call multiple functions in the current contract and return the data from all of them if they all succeed\\n     * @param data The encoded function data for each of the calls to make to this contract\\n     * @return results The results from each of the calls passed in via data\\n     */\\n    function multicall(bytes[] calldata data) external payable returns (bytes[] memory results);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for all contracts\\n     * @param to The address to act as delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateAll(address to, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific contract\\n     * @param to The address to act as delegate\\n     * @param contract_ The contract whose rights are being delegated\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateContract(address to, address contract_, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific ERC721 token\\n     * @param to The address to act as delegate\\n     * @param contract_ The contract whose rights are being delegated\\n     * @param tokenId The token id to delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param enable Whether to enable or disable this delegation, true delegates and false revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC721(address to, address contract_, uint256 tokenId, bytes32 rights, bool enable) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC20 tokens\\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\\n     * @param to The address to act as delegate\\n     * @param contract_ The address for the fungible token contract\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param amount The amount to delegate, > 0 delegates and 0 revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC20(address to, address contract_, bytes32 rights, uint256 amount) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * @notice Allow the delegate to act on behalf of `msg.sender` for a specific amount of ERC1155 tokens\\n     * @dev The actual amount is not encoded in the hash, just the existence of a amount (since it is an upper bound)\\n     * @param to The address to act as delegate\\n     * @param contract_ The address of the contract that holds the token\\n     * @param tokenId The token id to delegate\\n     * @param rights Specific subdelegation rights granted to the delegate, pass an empty bytestring to encompass all rights\\n     * @param amount The amount of that token id to delegate, > 0 delegates and 0 revokes\\n     * @return delegationHash The unique identifier of the delegation\\n     */\\n    function delegateERC1155(address to, address contract_, uint256 tokenId, bytes32 rights, uint256 amount) external payable returns (bytes32 delegationHash);\\n\\n    /**\\n     * ----------- CHECKS -----------\\n     */\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the entire wallet\\n     * @param to The potential delegate address\\n     * @param from The potential address who delegated rights\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on the from's behalf\\n     */\\n    function checkDelegateForAll(address to, address from, bytes32 rights) external view returns (bool);\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the specified `contract_` or the entire wallet\\n     * @param to The delegated address to check\\n     * @param contract_ The specific contract address being checked\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet or that specific contract\\n     */\\n    function checkDelegateForContract(address to, address from, address contract_, bytes32 rights) external view returns (bool);\\n\\n    /**\\n     * @notice Check if `to` is a delegate of `from` for the specific `contract` and `tokenId`, the entire `contract_`, or the entire wallet\\n     * @param to The delegated address to check\\n     * @param contract_ The specific contract address being checked\\n     * @param tokenId The token id for the token to delegating\\n     * @param from The wallet that issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return valid Whether delegate is granted to act on from's behalf for entire wallet, that contract, or that specific tokenId\\n     */\\n    function checkDelegateForERC721(address to, address from, address contract_, uint256 tokenId, bytes32 rights) external view returns (bool);\\n\\n    /**\\n     * @notice Returns the amount of ERC20 tokens the delegate is granted rights to act on the behalf of\\n     * @param to The delegated address to check\\n     * @param contract_ The address of the token contract\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\\n     */\\n    function checkDelegateForERC20(address to, address from, address contract_, bytes32 rights) external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the amount of a ERC1155 tokens the delegate is granted rights to act on the behalf of\\n     * @param to The delegated address to check\\n     * @param contract_ The address of the token contract\\n     * @param tokenId The token id to check the delegated amount of\\n     * @param from The cold wallet who issued the delegation\\n     * @param rights Specific rights to check for, pass the zero value to ignore subdelegations and check full delegations only\\n     * @return balance The delegated balance, which will be 0 if the delegation does not exist\\n     */\\n    function checkDelegateForERC1155(address to, address from, address contract_, uint256 tokenId, bytes32 rights) external view returns (uint256);\\n\\n    /**\\n     * ----------- ENUMERATIONS -----------\\n     */\\n\\n    /**\\n     * @notice Returns all enabled delegations a given delegate has received\\n     * @param to The address to retrieve delegations for\\n     * @return delegations Array of Delegation structs\\n     */\\n    function getIncomingDelegations(address to) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all enabled delegations an address has given out\\n     * @param from The address to retrieve delegations for\\n     * @return delegations Array of Delegation structs\\n     */\\n    function getOutgoingDelegations(address from) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * @notice Returns all hashes associated with enabled delegations an address has received\\n     * @param to The address to retrieve incoming delegation hashes for\\n     * @return delegationHashes Array of delegation hashes\\n     */\\n    function getIncomingDelegationHashes(address to) external view returns (bytes32[] memory delegationHashes);\\n\\n    /**\\n     * @notice Returns all hashes associated with enabled delegations an address has given out\\n     * @param from The address to retrieve outgoing delegation hashes for\\n     * @return delegationHashes Array of delegation hashes\\n     */\\n    function getOutgoingDelegationHashes(address from) external view returns (bytes32[] memory delegationHashes);\\n\\n    /**\\n     * @notice Returns the delegations for a given array of delegation hashes\\n     * @param delegationHashes is an array of hashes that correspond to delegations\\n     * @return delegations Array of Delegation structs, return empty structs for nonexistent or revoked delegations\\n     */\\n    function getDelegationsFromHashes(bytes32[] calldata delegationHashes) external view returns (Delegation[] memory delegations);\\n\\n    /**\\n     * ----------- STORAGE ACCESS -----------\\n     */\\n\\n    /**\\n     * @notice Allows external contracts to read arbitrary storage slots\\n     */\\n    function readSlot(bytes32 location) external view returns (bytes32);\\n\\n    /**\\n     * @notice Allows external contracts to read an arbitrary array of storage slots\\n     */\\n    function readSlots(bytes32[] calldata locations) external view returns (bytes32[] memory);\\n}\\n\"\r\n    },\r\n    \"lib/solady/src/utils/LibZip.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/// @notice Library for compressing and decompressing bytes.\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/utils/LibZip.sol)\\n/// @author Calldata compression by clabby (https://github.com/clabby/op-kompressor)\\n/// @author FastLZ by ariya (https://github.com/ariya/FastLZ)\\n///\\n/// @dev Note:\\n/// The accompanying solady.js library includes implementations of\\n/// FastLZ and calldata operations for convenience.\\nlibrary LibZip {\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                     FAST LZ OPERATIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    // LZ77 implementation based on FastLZ.\\n    // Equivalent to level 1 compression and decompression at the following commit:\\n    // https://github.com/ariya/FastLZ/commit/344eb4025f9ae866ebf7a2ec48850f7113a97a42\\n    // Decompression is backwards compatible.\\n\\n    /// @dev Returns the compressed `data`.\\n    function flzCompress(bytes memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            function ms8(d_, v_) -> _d {\\n                mstore8(d_, v_)\\n                _d := add(d_, 1)\\n            }\\n            function u24(p_) -> _u {\\n                _u := mload(p_)\\n                _u := or(shl(16, byte(2, _u)), or(shl(8, byte(1, _u)), byte(0, _u)))\\n            }\\n            function cmp(p_, q_, e_) -> _l {\\n                for { e_ := sub(e_, q_) } lt(_l, e_) { _l := add(_l, 1) } {\\n                    e_ := mul(iszero(byte(0, xor(mload(add(p_, _l)), mload(add(q_, _l))))), e_)\\n                }\\n            }\\n            function literals(runs_, src_, dest_) -> _o {\\n                for { _o := dest_ } iszero(lt(runs_, 0x20)) { runs_ := sub(runs_, 0x20) } {\\n                    mstore(ms8(_o, 31), mload(src_))\\n                    _o := add(_o, 0x21)\\n                    src_ := add(src_, 0x20)\\n                }\\n                if iszero(runs_) { leave }\\n                mstore(ms8(_o, sub(runs_, 1)), mload(src_))\\n                _o := add(1, add(_o, runs_))\\n            }\\n            function mt(l_, d_, o_) -> _o {\\n                for { d_ := sub(d_, 1) } iszero(lt(l_, 263)) { l_ := sub(l_, 262) } {\\n                    o_ := ms8(ms8(ms8(o_, add(224, shr(8, d_))), 253), and(0xff, d_))\\n                }\\n                if iszero(lt(l_, 7)) {\\n                    _o := ms8(ms8(ms8(o_, add(224, shr(8, d_))), sub(l_, 7)), and(0xff, d_))\\n                    leave\\n                }\\n                _o := ms8(ms8(o_, add(shl(5, l_), shr(8, d_))), and(0xff, d_))\\n            }\\n            function setHash(i_, v_) {\\n                let p_ := add(mload(0x40), shl(2, i_))\\n                mstore(p_, xor(mload(p_), shl(224, xor(shr(224, mload(p_)), v_))))\\n            }\\n            function getHash(i_) -> _h {\\n                _h := shr(224, mload(add(mload(0x40), shl(2, i_))))\\n            }\\n            function hash(v_) -> _r {\\n                _r := and(shr(19, mul(2654435769, v_)), 0x1fff)\\n            }\\n            function setNextHash(ip_, ipStart_) -> _ip {\\n                setHash(hash(u24(ip_)), sub(ip_, ipStart_))\\n                _ip := add(ip_, 1)\\n            }\\n            result := mload(0x40)\\n            codecopy(result, codesize(), 0x8000) // Zeroize the hashmap.\\n            let op := add(result, 0x8000)\\n            let a := add(data, 0x20)\\n            let ipStart := a\\n            let ipLimit := sub(add(ipStart, mload(data)), 13)\\n            for { let ip := add(2, a) } lt(ip, ipLimit) {} {\\n                let r := 0\\n                let d := 0\\n                for {} 1 {} {\\n                    let s := u24(ip)\\n                    let h := hash(s)\\n                    r := add(ipStart, getHash(h))\\n                    setHash(h, sub(ip, ipStart))\\n                    d := sub(ip, r)\\n                    if iszero(lt(ip, ipLimit)) { break }\\n                    ip := add(ip, 1)\\n                    if iszero(gt(d, 0x1fff)) { if eq(s, u24(r)) { break } }\\n                }\\n                if iszero(lt(ip, ipLimit)) { break }\\n                ip := sub(ip, 1)\\n                if gt(ip, a) { op := literals(sub(ip, a), a, op) }\\n                let l := cmp(add(r, 3), add(ip, 3), add(ipLimit, 9))\\n                op := mt(l, d, op)\\n                ip := setNextHash(setNextHash(add(ip, l), ipStart), ipStart)\\n                a := ip\\n            }\\n            // Copy the result to compact the memory, overwriting the hashmap.\\n            let end := sub(literals(sub(add(ipStart, mload(data)), a), a, op), 0x7fe0)\\n            let o := add(result, 0x20)\\n            mstore(result, sub(end, o)) // Store the length.\\n            for {} iszero(gt(o, end)) { o := add(o, 0x20) } { mstore(o, mload(add(o, 0x7fe0))) }\\n            mstore(end, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(end, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Returns the decompressed `data`.\\n    function flzDecompress(bytes memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := mload(0x40)\\n            let op := add(result, 0x20)\\n            let end := add(add(data, 0x20), mload(data))\\n            for { data := add(data, 0x20) } lt(data, end) {} {\\n                let w := mload(data)\\n                let c := byte(0, w)\\n                let t := shr(5, c)\\n                if iszero(t) {\\n                    mstore(op, mload(add(data, 1)))\\n                    data := add(data, add(2, c))\\n                    op := add(op, add(1, c))\\n                    continue\\n                }\\n                for {\\n                    let g := eq(t, 7)\\n                    let l := add(2, xor(t, mul(g, xor(t, add(7, byte(1, w)))))) // M\\n                    let s := add(add(shl(8, and(0x1f, c)), byte(add(1, g), w)), 1) // R\\n                    let r := sub(op, s)\\n                    let f := xor(s, mul(gt(s, 0x20), xor(s, 0x20)))\\n                    let j := 0\\n                } 1 {} {\\n                    mstore(add(op, j), mload(add(r, j)))\\n                    j := add(j, f)\\n                    if lt(j, l) { continue }\\n                    data := add(data, add(2, g))\\n                    op := add(op, l)\\n                    break\\n                }\\n            }\\n            mstore(result, sub(op, add(result, 0x20))) // Store the length.\\n            mstore(op, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(op, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\n    /*                    CALLDATA OPERATIONS                     */\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\n\\n    // Calldata compression and decompression using selective run length encoding:\\n    // - Sequences of 0x00 (up to 128 consecutive).\\n    // - Sequences of 0xff (up to 32 consecutive).\\n    //\\n    // A run length encoded block consists of two bytes:\\n    // (0) 0x00\\n    // (1) A control byte with the following bit layout:\\n    //     - [7]     `0: 0x00, 1: 0xff`.\\n    //     - [0..6]  `runLength - 1`.\\n    //\\n    // The first 4 bytes are bitwise negated so that the compressed calldata\\n    // can be dispatched into the `fallback` and `receive` functions.\\n\\n    /// @dev Returns the compressed `data`.\\n    function cdCompress(bytes memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            function rle(v_, o_, d_) -> _o, _d {\\n                mstore(o_, shl(240, or(and(0xff, add(d_, 0xff)), and(0x80, v_))))\\n                _o := add(o_, 2)\\n            }\\n            result := mload(0x40)\\n            let o := add(result, 0x20)\\n            let z := 0 // Number of consecutive 0x00.\\n            let y := 0 // Number of consecutive 0xff.\\n            for { let end := add(data, mload(data)) } iszero(eq(data, end)) {} {\\n                data := add(data, 1)\\n                let c := byte(31, mload(data))\\n                if iszero(c) {\\n                    if y { o, y := rle(0xff, o, y) }\\n                    z := add(z, 1)\\n                    if eq(z, 0x80) { o, z := rle(0x00, o, 0x80) }\\n                    continue\\n                }\\n                if eq(c, 0xff) {\\n                    if z { o, z := rle(0x00, o, z) }\\n                    y := add(y, 1)\\n                    if eq(y, 0x20) { o, y := rle(0xff, o, 0x20) }\\n                    continue\\n                }\\n                if y { o, y := rle(0xff, o, y) }\\n                if z { o, z := rle(0x00, o, z) }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            if y { o, y := rle(0xff, o, y) }\\n            if z { o, z := rle(0x00, o, z) }\\n            // Bitwise negate the first 4 bytes.\\n            mstore(add(result, 4), not(mload(add(result, 4))))\\n            mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n            mstore(o, 0) // Zeroize the slot after the string.\\n            mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n        }\\n    }\\n\\n    /// @dev Returns the decompressed `data`.\\n    function cdDecompress(bytes memory data) internal pure returns (bytes memory result) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            if mload(data) {\\n                result := mload(0x40)\\n                let o := add(result, 0x20)\\n                let s := add(data, 4)\\n                let v := mload(s)\\n                let end := add(data, mload(data))\\n                mstore(s, not(v)) // Bitwise negate the first 4 bytes.\\n                for {} lt(data, end) {} {\\n                    data := add(data, 1)\\n                    let c := byte(31, mload(data))\\n                    if iszero(c) {\\n                        data := add(data, 1)\\n                        let d := byte(31, mload(data))\\n                        // Fill with either 0xff or 0x00.\\n                        mstore(o, not(0))\\n                        if iszero(gt(d, 0x7f)) { codecopy(o, codesize(), add(d, 1)) }\\n                        o := add(o, add(and(d, 0x7f), 1))\\n                        continue\\n                    }\\n                    mstore8(o, c)\\n                    o := add(o, 1)\\n                }\\n                mstore(s, v) // Restore the first 4 bytes.\\n                mstore(result, sub(o, add(result, 0x20))) // Store the length.\\n                mstore(o, 0) // Zeroize the slot after the string.\\n                mstore(0x40, add(o, 0x20)) // Allocate the memory.\\n            }\\n        }\\n    }\\n\\n    /// @dev To be called in the `fallback` function.\\n    /// ```\\n    ///     fallback() external payable { LibZip.cdFallback(); }\\n    ///     receive() external payable {} // Silence compiler warning to add a `receive` function.\\n    /// ```\\n    /// For efficiency, this function will directly return the results, terminating the context.\\n    /// If called internally, it must be called at the end of the function.\\n    function cdFallback() internal {\\n        assembly {\\n            if iszero(calldatasize()) { return(calldatasize(), calldatasize()) }\\n            let o := 0\\n            let f := not(3) // For negating the first 4 bytes.\\n            for { let i := 0 } lt(i, calldatasize()) {} {\\n                let c := byte(0, xor(add(i, f), calldataload(i)))\\n                i := add(i, 1)\\n                if iszero(c) {\\n                    let d := byte(0, xor(add(i, f), calldataload(i)))\\n                    i := add(i, 1)\\n                    // Fill with either 0xff or 0x00.\\n                    mstore(o, not(0))\\n                    if iszero(gt(d, 0x7f)) { codecopy(o, codesize(), add(d, 1)) }\\n                    o := add(o, add(and(d, 0x7f), 1))\\n                    continue\\n                }\\n                mstore8(o, c)\\n                o := add(o, 1)\\n            }\\n            let success := delegatecall(gas(), address(), 0x00, o, codesize(), 0x00)\\n            returndatacopy(0x00, 0x00, returndatasize())\\n            if iszero(success) { revert(0x00, returndatasize()) }\\n            return(0x00, returndatasize())\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/IOwnerOf_Art.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\ninterface IOwnerOf_Art {\\n    /**\\n     * Message posted event emitted when a message is posted about an ERC721 token by its owner (or delegate)\\n     * @param tokenAddress Address of the ERC721 token contract being posted about\\n     * @param tokenId ID of the token being posted about\\n     * @param owner Address of the owner of the token sending the message\\n     * @param bytecodeStorageAddress Address of the bytecode storage contract where the message is stored\\n     * @param index Index of the message in the token's messages storage array\\n     * @param tip Amount of ETH sent with the message to tip the admin of this contract for the service\\n     */\\n    event MessagePosted(\\n        address indexed tokenAddress,\\n        uint256 indexed tokenId,\\n        address indexed owner,\\n        address bytecodeStorageAddress,\\n        uint256 index,\\n        uint256 tip\\n    );\\n\\n    struct Message {\\n        address bytecodeStorageAddress;\\n        address sender;\\n        uint40 timestamp;\\n    }\\n\\n    struct MessageView {\\n        address bytecodeStorageAddress;\\n        address sender;\\n        uint40 timestamp;\\n        string message;\\n    }\\n\\n    /**\\n     * @dev DELEGATE_REGISTRY is the address of the Delegate Registry contract\\n     */\\n    function DELEGATE_REGISTRY() external view returns (address);\\n\\n    /**\\n     * @dev DELEGATE_RIGHTS is the keccak256 hash of the string \\\"OWNER_OF_ART\\\", and may be used if the\\n     * token owner only wants to allow delegates to post messages on this contract\\n     */\\n    function DELEGATE_RIGHTS() external view returns (bytes32);\\n\\n    /**\\n     * @notice Post a new message about an ERC721 token.\\n     * The function is payable to allow for tipping the admin of this contract for the service.\\n     * The function will revert if the sender is not the owner of the token or a delegate of the owner on delegate.xyz v2.\\n     * The message is stored in bytecode storage and the address of the storage contract is emitted in the MessagePosted event.\\n     * The message may never be deleted or modified, but new messages may be posted.\\n     * @dev Reentrant calls are prevented by the ReentrancyGuard modifier\\n     * @param tokenAddress Address of the ERC721 token contract being posted about\\n     * @param tokenId ID of the token being posted about\\n     * @param message Message to be posted about the token\\n     */\\n    function postMessage(address tokenAddress, uint256 tokenId, string memory message) external payable;\\n\\n    /**\\n     * @notice Post a new message about an ERC721 token.\\n     * The function is payable to allow for tipping the admin of this contract for the service.\\n     * The function will revert if the sender is not the owner of the token or a delegate of the owner on delegate.xyz v2.\\n     * The message is stored in bytecode storage and the address of the storage contract is emitted in the MessagePosted event.\\n     * The message may never be deleted or modified, but new messages may be posted.\\n     * @dev Reentrant calls are prevented by the ReentrancyGuard modifier\\n     * @param tokenAddress Address of the ERC721 token contract being posted about\\n     * @param tokenId ID of the token being posted about\\n     * @param messageCompressed Message to be posted about the token, compressed with flz compress\\n     */\\n    function postMessageCompressed(address tokenAddress, uint256 tokenId, bytes memory messageCompressed) external payable;\\n\\n    /**\\n     * @notice Get all messages posted about an ERC721 token.\\n     * @dev This function is gas unbounded and should be used with caution. For pagination, use getMessageAtIndex.\\n     * @param tokenAddress Address of the ERC721 token contract posted about\\n     * @param tokenId ID of the token posted about\\n     * @return messagesView Array of MessageView structs containing the messages posted about the token\\n     */\\n    function getMessages(address tokenAddress, uint256 tokenId) external view returns (MessageView[] memory);\\n\\n    /**\\n     * @notice Get the number of messages posted about an ERC721 token.\\n     * @param tokenAddress Address of the ERC721 token contract posted about\\n     * @param tokenId ID of the token posted about\\n     * @return count Number of messages posted about the token\\n     */\\n    function getMessageCount(address tokenAddress, uint256 tokenId) external view returns (uint256);\\n\\n    /**\\n     * @notice Get a message posted about an ERC721 token at a specific index.\\n     * Reverts if the index is out of bounds.\\n     * @param tokenAddress Address of the ERC721 token contract posted about\\n     * @param tokenId ID of the token posted about\\n     * @param index Index of the message to retrieve\\n     * @return messageView MessageView struct containing the message posted about the token\\n     */\\n    function getMessageAtIndex(address tokenAddress, uint256 tokenId, uint256 index) external view returns (MessageView memory);\\n\\n    /**\\n     * @notice Get the compressed form of a message string using flz compress. The compressed\\n     * form of the message may be used as the input to postMessageCompressed for a more gas efficient\\n     * way to post long messages.\\n     * @param message string to compress\\n     * @return bytes compressed form of the message\\n     */\\n    function getCompressedMessage(string memory message) external pure returns (bytes memory);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"artblocks-contracts/=lib/artblocks-contracts/\",\r\n      \"delegate-registry/=lib/delegate-registry/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"murky/=lib/delegate-registry/lib/murky/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/delegate-registry/lib/openzeppelin-contracts/contracts/\",\r\n      \"solady/=lib/solady/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {\r\n      \"src/lib/BytecodeStorageV1Fork.sol\": {\r\n        \"BytecodeStorageReader\": \"0x00000000Ff04094962DE55805fA85B4e67CF3b8E\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bytecodeStorageAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tip\",\"type\":\"uint256\"}],\"name\":\"MessagePosted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DELEGATE_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DELEGATE_RIGHTS\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"drainTipsTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"getCompressedMessage\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getMessageAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bytecodeStorageAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"internalType\":\"struct IOwnerOf_Art.MessageView\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMessageCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMessages\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bytecodeStorageAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"internalType\":\"struct IOwnerOf_Art.MessageView[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"postMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"messageCompressed\",\"type\":\"bytes\"}],\"name\":\"postMessageCompressed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "OwnerOf_Art", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000002a98fcd155c9da4a28bdb32acc935836c233882a", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}