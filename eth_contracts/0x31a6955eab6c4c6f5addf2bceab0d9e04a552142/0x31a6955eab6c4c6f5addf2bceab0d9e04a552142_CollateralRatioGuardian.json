{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/lybra/helpers/CollateralRatioGuardian.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.17;\\n\\nimport \\\"../interfaces/Iconfigurator.sol\\\";\\nimport \\\"../interfaces/ILybra.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract CollateralRatioGuardian is Ownable {\\n    Iconfigurator public immutable configurator;\\n    AggregatorV3Interface immutable priceFeed;\\n\\n    mapping (address => mapping (address => RepaymentSetting)) public userRepaymentSettings;\\n    uint256 public fee = 100 * 1e18;\\n\\n    struct RepaymentSetting {\\n        uint256 triggerCollateralRatio;\\n        uint256 expectedCollateralRatio;\\n        bool active;\\n    }\\n\\n    event UserSetAutoRepayment(address indexed user, address indexed vault, uint256 triggerCollateralRatio, uint256 expectedCollateralRatio, bool status);\\n    event ServiceFeeChanged(uint256 newFee, uint256 time);\\n    event ExecuteAutoRepayment(address indexed user, address indexed vault, address keeper, uint256 repayAmount, uint256 fee, uint256 time);\\n\\n    constructor(address _config, address _priceFeed) {\\n        configurator = Iconfigurator(_config);\\n        priceFeed = AggregatorV3Interface(_priceFeed);\\n    }\\n\\n    /**\\n    * @notice Allows the admin to modify the service fee, with a maximum of 500 eUSD.\\n    * @dev Only the admin is allowed to call this function to modify the service fee.\\n    * @param _fee The new service fee amount. Must be between 100 and 500 eUSD.\\n    */\\n    function setFee(uint256 _fee) external onlyOwner {\\n        require(_fee <= 500 * 1e18 && _fee >= 100 * 1e18, \\\"Fee must be between 100 and 500 eUSD\\\");\\n        fee = _fee;\\n        emit ServiceFeeChanged(_fee, block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Sets the auto repayment settings for each of the user's vaults.\\n     * @param vaults The array of vault addresses for which to set the repayment settings.\\n     * @param settings The array of repayment settings corresponding to each vault.\\n     */\\n    function setAutoRepayment(address[] memory vaults, RepaymentSetting[] memory settings) external {\\n        require(vaults.length == settings.length, \\\"ALI\\\");\\n        for(uint i; i < vaults.length;i++) {\\n            require(settings[i].expectedCollateralRatio > settings[i].triggerCollateralRatio, \\\"The expectedCollateralRatio needs to be higher than the triggerCollateralRatio.\\\");\\n            require(settings[i].triggerCollateralRatio > configurator.getBadCollateralRatio(vaults[i]), \\\"The triggerCollateralRatio needs to be higher than lybra.badCollateralRatio.\\\");\\n            require(settings[i].expectedCollateralRatio >= configurator.getSafeCollateralRatio(vaults[i]), \\\"The expectedCollateralRatio needs to be greater than or equal to lybra.safeCollateralRatio\\\");\\n            userRepaymentSettings[msg.sender][vaults[i]] = settings[i];\\n            emit UserSetAutoRepayment(msg.sender, vaults[i], settings[i].triggerCollateralRatio, settings[i].expectedCollateralRatio, settings[i].active);\\n        }\\n    }\\n\\n    /**\\n    * @dev Allows any third-party keeper to trigger automatic repayment for a user.\\n    * Requirements:\\n    * `user` must have enabled the automatic repayment feature.\\n    * Current collateral ratio of the user must be less than or equal to userSetting.triggerCollateralRatio.\\n    * `user` must have authorized this contract to spend eUSD in an amount greater than the repayment amount + fee.\\n    */\\n    function execute(address user, address vault) external {\\n        RepaymentSetting memory userSetting = userRepaymentSettings[user][vault];\\n        require(userSetting.active == true, \\\"The user has not enabled the automatic repayment\\\");\\n        uint256 userCollateralRatio = getCollateralRatio(user, vault);\\n        require(userCollateralRatio <= userSetting.triggerCollateralRatio, \\\"The user's collateralRate is not below the trigger collateralRate\\\");\\n\\n        ILybra lybraPool = ILybra(vault);\\n        uint256 targetDebt = (lybraPool.depositedAsset(user) * getAssetPrice(vault)) * 100 / userSetting.expectedCollateralRatio;\\n        uint256 repayAmount = lybraPool.getBorrowedOf(user) - targetDebt ;\\n        IERC20 token = lybraPool.getVaultType() == 0 ? IERC20(configurator.getEUSDAddress()) : IERC20(configurator.peUSD());\\n        token.transferFrom(user, address(this), repayAmount + fee);\\n        lybraPool.burn(user, repayAmount);\\n        uint256 balance = token.balanceOf(address(this)) < fee ? token.balanceOf(address(this)) : fee;\\n        token.transfer(msg.sender, balance);\\n        emit ExecuteAutoRepayment(user, vault, msg.sender, repayAmount, balance, block.timestamp);\\n    }\\n\\n    /**\\n    * @dev Returns whether it is possible to invoke the automatic repayment function on behalf of `user`.\\n    * @return True if it is possible to invoke the automatic repayment function on behalf of `user`, otherwise false.\\n    */\\n    function checkExecutionFeasibility(address user, address vault) external view returns(bool) {\\n        RepaymentSetting memory userSetting = userRepaymentSettings[user][vault];\\n        if(userSetting.active != true) return false;\\n        uint256 userCollateralRatio = getCollateralRatio(user, vault);\\n        if(userCollateralRatio > userSetting.triggerCollateralRatio) return false;\\n\\n        ILybra lybraPool = ILybra(vault);\\n        uint256 targetDebt = (lybraPool.depositedAsset(user) * getAssetPrice(vault)) * 100 / userSetting.expectedCollateralRatio;\\n        uint256 totalAmount = lybraPool.getBorrowedOf(user) - targetDebt + fee;\\n        IERC20 token = lybraPool.getVaultType() == 0 ? IERC20(configurator.getEUSDAddress()) : IERC20(configurator.peUSD());\\n        if(token.allowance(user, address(this)) < totalAmount || token.balanceOf(user) < totalAmount) return false;\\n        return true;\\n    }\\n\\n    /**\\n    * @dev Retrieves the current collateral ratio of `user`.\\n    */\\n    function getCollateralRatio(address user, address vault) public view returns (uint256) {\\n        ILybra lybraPool = ILybra(vault);\\n        if (lybraPool.getBorrowedOf(user) == 0) return 1e69;\\n        return\\n            lybraPool.depositedAsset(user) * getAssetPrice(vault) * 100 /\\n            lybraPool.getBorrowedOf(user);\\n    }\\n\\n    function getAssetPrice(address vault) public view returns (uint256) {\\n        (,int price, , , ) = priceFeed.latestRoundData();\\n        return ILybra(vault).getAsset2EtherExchangeRate() * uint(price) / 1e8;\\n    }\\n    \\n}\"\r\n    },\r\n    \"contracts/lybra/interfaces/Iconfigurator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.8.17;\\n\\ninterface Iconfigurator {\\n    function mintVault(address pool) external view returns(bool);\\n    function mintVaultMaxSupply(address pool) external view returns(uint256);\\n    function vaultMintPaused(address pool) external view returns(bool);\\n    function vaultBurnPaused(address pool) external view returns(bool);\\n    function tokenMiner(address pool) external view returns(bool);\\n    function getSafeCollateralRatio(address pool) external view returns(uint256);\\n    function getBadCollateralRatio(address pool) external view returns(uint256);\\n    function getVaultWeight(address pool) external view returns (uint256);\\n    function vaultMintFeeApy(address pool) external view returns(uint256);\\n    function vaultKeeperRatio(address pool) external view returns(uint256);\\n    function redemptionFee() external view returns(uint256);\\n    function getEUSDAddress() external view returns(address);\\n    function peUSD() external view returns(address);\\n    function eUSDMiningIncentives() external view returns(address);\\n    function getProtocolRewardsPool() external view returns(address);\\n    function flashloanFee() external view returns(uint256);\\n    function getEUSDMaxLocked() external view returns (uint256);\\n    function stableToken() external view returns (address);\\n    function isRedemptionProvider(address user) external view returns (bool);\\n    function becomeRedemptionProvider(bool _bool) external;\\n    function refreshMintReward(address user) external;\\n    function distributeRewards() external;\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n}\"\r\n    },\r\n    \"contracts/lybra/interfaces/ILybra.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.17;\\n\\ninterface ILybra {\\n    function totalDepositedAsset() external view returns (uint256);\\n    function safeCollateralRatio() external view returns (uint256);\\n    function depositedAsset(address user) external view returns (uint256);\\n    function getBorrowedOf(address user) external view returns (uint256);\\n    function getVaultType() external view returns (uint8);\\n    function totaldepositedAsset() external view returns (uint256);\\n    function getPoolTotalCirculation() external view returns (uint256);\\n    function getAssetPrice() external view returns (uint256);\\n    function getAsset() external view returns (address);\\n    function getAsset2EtherExchangeRate() external view returns (uint256);\\n    function burn(address onBehalfOf, uint256 amount) external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_config\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"keeper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ExecuteAutoRepayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"name\":\"ServiceFeeChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"triggerCollateralRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"expectedCollateralRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UserSetAutoRepayment\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"checkExecutionFeasibility\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"configurator\",\"outputs\":[{\"internalType\":\"contract Iconfigurator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getAssetPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"vaults\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"triggerCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"internalType\":\"struct CollateralRatioGuardian.RepaymentSetting[]\",\"name\":\"settings\",\"type\":\"tuple[]\"}],\"name\":\"setAutoRepayment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRepaymentSettings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"triggerCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expectedCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "CollateralRatioGuardian", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c8353594eeedc5ce5a4544d3d9907b694c4690ff0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}