{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/DaoCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\nimport {SafeERC20} from \\\"openzeppelin-contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC20} from \\\"openzeppelin-contracts/token/ERC20/IERC20.sol\\\";\\nimport {EIP712Upgradeable} from\\n    \\\"openzeppelin-contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {IERC20Permit} from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {SignatureChecker} from \\\"@openzeppelin/contracts/utils/cryptography/SignatureChecker.sol\\\";\\n\\nimport {IERC20Metadata} from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {IERC20Permit} from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {Math} from \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from\\n    \\\"openzeppelin-contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {IERC20Permit} from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Permit.sol\\\";\\nimport {PausableUpgradeable} from \\\"openzeppelin-contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"openzeppelin-contracts-upgradeable/utils/NoncesUpgradeable.sol\\\";\\n\\nimport {IRegistryAccess} from \\\"src/interfaces/registry/IRegistryAccess.sol\\\";\\nimport {IUsd0} from \\\"src/interfaces/token/IUsd0.sol\\\";\\nimport {IRegistryContract} from \\\"src/interfaces/registry/IRegistryContract.sol\\\";\\nimport {ITokenMapping} from \\\"src/interfaces/tokenManager/ITokenMapping.sol\\\";\\nimport {IOracle} from \\\"src/interfaces/oracles/IOracle.sol\\\";\\nimport {IDaoCollateral, Approval, Intent} from \\\"src/interfaces/IDaoCollateral.sol\\\";\\nimport {CheckAccessControl} from \\\"src/utils/CheckAccessControl.sol\\\";\\nimport {Normalize} from \\\"src/utils/normalize.sol\\\";\\nimport {ISwapperEngine} from \\\"src/interfaces/ISwapperEngine.sol\\\";\\nimport {\\n    SCALAR_ONE,\\n    DEFAULT_ADMIN_ROLE,\\n    MAX_REDEEM_FEE,\\n    SCALAR_TEN_KWEI,\\n    CONTRACT_REGISTRY_ACCESS,\\n    CONTRACT_TOKEN_MAPPING,\\n    CONTRACT_ORACLE,\\n    CONTRACT_TREASURY,\\n    CONTRACT_USD0,\\n    ALLOWLISTED,\\n    CONTRACT_SWAPPER_ENGINE,\\n    INTENT_TYPE_HASH\\n} from \\\"src/constants.sol\\\";\\n\\nimport {\\n    NullContract,\\n    InvalidToken,\\n    AmountIsZero,\\n    AmountTooLow,\\n    AmountTooBig,\\n    ApprovalFailed,\\n    RedeemMustNotBePaused,\\n    RedeemMustBePaused,\\n    SwapMustNotBePaused,\\n    SwapMustBePaused,\\n    SameValue,\\n    CBRIsTooHigh,\\n    CBRIsNull,\\n    RedeemFeeTooBig,\\n    InvalidSigner,\\n    InvalidDeadline,\\n    ExpiredSignature,\\n    NoOrdersIdsProvided\\n} from \\\"src/errors.sol\\\";\\n\\n/// @title   DaoCollateral Contract\\n/// @notice  Manages the swapping of collateral tokens for stablecoins, with functionalities for swap (direct mint) and redeeming tokens\\n/// @dev     Provides mechanisms for token swap operations, fee management, called Dao Collateral for historical reasons\\n/// @author  Usual Tech team\\n/// @custom:oz-upgrades-from DaoCollateral\\ncontract DaoCollateral is\\n    IDaoCollateral,\\n    Initializable,\\n    ReentrancyGuardUpgradeable,\\n    PausableUpgradeable,\\n    NoncesUpgradeable,\\n    EIP712Upgradeable\\n{\\n    using SafeERC20 for IERC20Metadata;\\n    using CheckAccessControl for IRegistryAccess;\\n    using Normalize for uint256;\\n\\n    struct DaoCollateralStorageV0 {\\n        /// @notice Indicates if the redeem functionality is paused.\\n        bool _redeemPaused;\\n        /// @notice Indicates if the swap functionality is paused.\\n        bool _swapPaused;\\n        /// @notice Indicates if the Counter Bank Run (CBR) functionality is active.\\n        bool isCBROn;\\n        /// @notice The fee for redeeming tokens, in basis points.\\n        uint256 redeemFee;\\n        /// @notice The coefficient for calculating the returned rwaToken amount when CBR is active.\\n        uint256 cbrCoef;\\n        /// @notice The RegistryAccess contract instance for role checks.\\n        IRegistryAccess registryAccess;\\n        /// @notice The RegistryContract instance for contract interactions.\\n        IRegistryContract registryContract;\\n        /// @notice The TokenMapping contract instance for managing token mappings.\\n        ITokenMapping tokenMapping;\\n        /// @notice The USD0 token contract instance.\\n        IUsd0 usd0;\\n        /// @notice The Oracle contract instance for price feeds.\\n        IOracle oracle;\\n        /// @notice The address of treasury holding RWA tokens.\\n        address treasury;\\n        /// @notice The SwapperEngine contract instance for managing token swaps.\\n        ISwapperEngine swapperEngine;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"daoCollateral.storage.v0\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    // solhint-disable-next-line\\n    bytes32 public constant DaoCollateralStorageV0Location =\\n        0xb6b5806749b83e5a37ff64f3aa7a7ce3ac6e8a80a998e853c1d3efe545237c00;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                Events\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Emitted when tokens are swapped.\\n    event Swap(\\n        address indexed owner, address indexed tokenSwapped, uint256 amount, uint256 amountInUSD\\n    );\\n\\n    /// @notice Emitted when tokens are redeemed.\\n    event Redeem(\\n        address indexed redeemer,\\n        address indexed rwaToken,\\n        uint256 amountRedeemed,\\n        uint256 returnedRwaAmount,\\n        uint256 stableFeeAmount\\n    );\\n\\n    /// @notice Emitted when an intent is consumed.\\n    event IntentMatched(\\n        address indexed owner,\\n        uint256 indexed nonce,\\n        address indexed tokenSwapped,\\n        uint256 amountInTokenDecimals,\\n        uint256 amountInUSD\\n    );\\n\\n    event NonceInvalidated(address indexed signer, uint256 indexed nonceInvalidated);\\n\\n    /// @notice Emitted when redeem functionality is paused.\\n    event RedeemPaused();\\n\\n    /// @notice Emitted when redeem functionality is unpaused.\\n    event RedeemUnPaused();\\n\\n    /// @notice Emitted when swap functionality is paused.\\n    event SwapPaused();\\n\\n    /// @notice Emitted when swap functionality is unpaused.\\n    event SwapUnPaused();\\n\\n    /// @notice Emitted when the Counter Bank Run (CBR) mechanism is activated.\\n    /// @param cbrCoef The Counter Bank Run (CBR) coefficient.\\n    event CBRActivated(uint256 cbrCoef);\\n\\n    /// @notice Emitted when the Counter Bank Run (CBR) mechanism is deactivated.\\n    event CBRDeactivated();\\n\\n    /// @notice Emitted when the redeem fee is updated.\\n    /// @param redeemFee The new redeem fee.\\n    event RedeemFeeUpdated(uint256 redeemFee);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                                Modifiers\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Ensures the function is called only when the redeem is not paused.\\n    modifier whenRedeemNotPaused() {\\n        _requireRedeemNotPaused();\\n        _;\\n    }\\n\\n    /// @notice Ensures the function is called only when the redeem is paused.\\n    modifier whenRedeemPaused() {\\n        _requireRedeemPaused();\\n        _;\\n    }\\n\\n    /// @notice Ensures the function is called only when the swap is not paused.\\n    modifier whenSwapNotPaused() {\\n        _requireSwapNotPaused();\\n        _;\\n    }\\n\\n    /// @notice Ensures the function is called only when the swap is paused.\\n    modifier whenSwapPaused() {\\n        _requireSwapPaused();\\n        _;\\n    }\\n\\n    /// @notice  _requireRedeemNotPaused method will check if the redeem is not paused\\n    /// @dev Throws if the contract is paused.\\n    function _requireRedeemNotPaused() internal view virtual {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        if ($._redeemPaused) {\\n            revert RedeemMustNotBePaused();\\n        }\\n    }\\n\\n    /// @notice  _requireRedeemPaused method will check if the redeem is paused\\n    /// @dev Throws if the contract is not paused.\\n    function _requireRedeemPaused() internal view virtual {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        if (!$._redeemPaused) {\\n            revert RedeemMustBePaused();\\n        }\\n    }\\n\\n    /// @notice  _requireSwapNotPaused method will check if the redeem is not paused\\n    /// @dev Throws if the contract is paused.\\n\\n    function _requireSwapNotPaused() internal view virtual {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        if ($._swapPaused) {\\n            revert SwapMustNotBePaused();\\n        }\\n    }\\n\\n    /// @notice  _requireSwapPaused method will check if the redeem is paused\\n    /// @dev Throws if the contract is not paused.\\n    function _requireSwapPaused() internal view virtual {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        if (!$._swapPaused) {\\n            revert SwapMustBePaused();\\n        }\\n    }\\n\\n    /// @notice Ensures the caller is authorized as part of the Usual Tech team.\\n    function _requireOnlyAdmin() internal view {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        $.registryAccess.onlyMatchingRole(DEFAULT_ADMIN_ROLE);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             Constructor\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /// @notice Returns the storage struct of the contract.\\n    /// @return $ The pointer to the storage struct of the contract.\\n    function _daoCollateralStorageV0() internal pure returns (DaoCollateralStorageV0 storage $) {\\n        bytes32 position = DaoCollateralStorageV0Location;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            $.slot := position\\n        }\\n    }\\n\\n    /// @notice Initializes the DaoCollateral contract with registry information and initial configuration.\\n    /// @param _registryContract The address of the registry contract.\\n    /// @param _redeemFee The initial redeem fee, in basis points.\\n    function initialize(address _registryContract, uint256 _redeemFee) public initializer {\\n        // can't have a redeem fee greater than 25%\\n        if (_redeemFee > MAX_REDEEM_FEE) {\\n            revert RedeemFeeTooBig();\\n        }\\n\\n        if (_registryContract == address(0)) {\\n            revert NullContract();\\n        }\\n\\n        __EIP712_init_unchained(\\\"DaoCollateral\\\", \\\"1\\\");\\n        __Nonces_init_unchained();\\n        __Pausable_init_unchained();\\n        __ReentrancyGuard_init_unchained();\\n\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        $.redeemFee = _redeemFee;\\n\\n        IRegistryContract registryContract = IRegistryContract(_registryContract);\\n        $.registryAccess = IRegistryAccess(registryContract.getContract(CONTRACT_REGISTRY_ACCESS));\\n\\n        $.treasury = address(registryContract.getContract(CONTRACT_TREASURY));\\n        $.tokenMapping = ITokenMapping(registryContract.getContract(CONTRACT_TOKEN_MAPPING));\\n        $.usd0 = IUsd0(registryContract.getContract(CONTRACT_USD0));\\n\\n        $.oracle = IOracle(registryContract.getContract(CONTRACT_ORACLE));\\n\\n        $.swapperEngine = ISwapperEngine(registryContract.getContract(CONTRACT_SWAPPER_ENGINE));\\n    }\\n\\n    /// @notice Initializes the DaoCollateral contract with registry information and update configuration.\\n    /// @param _registryContract The address of the registry contract.\\n    /* cspell:disable-next-line */\\n    function initializeV1(address _registryContract) public reinitializer(2) {\\n        if (_registryContract == address(0)) {\\n            revert NullContract();\\n        }\\n\\n        __EIP712_init_unchained(\\\"DaoCollateral\\\", \\\"1\\\");\\n        __Nonces_init_unchained();\\n\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        $.registryContract = IRegistryContract(_registryContract);\\n        $.swapperEngine = ISwapperEngine(\\n            IRegistryContract(_registryContract).getContract(CONTRACT_SWAPPER_ENGINE)\\n        );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               Setters\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice Activates the Counter Bank Run (CBR) mechanism.\\n    /// @dev Enables the CBR\\n    /// @param coefficient the CBR coefficient to activate\\n    function activateCBR(uint256 coefficient) external {\\n        _requireOnlyAdmin();\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        $.isCBROn = true;\\n        // we should revert if the coef is greater than 1\\n        if (coefficient > SCALAR_ONE) {\\n            revert CBRIsTooHigh();\\n        } else if (coefficient == 0) {\\n            revert CBRIsNull();\\n        }\\n        $._swapPaused = true;\\n        $.cbrCoef = coefficient;\\n        emit CBRActivated($.cbrCoef);\\n        emit SwapPaused();\\n    }\\n\\n    /// @notice Deactivates the Counter Bank Run (CBR) mechanism.\\n    /// @dev Disables the CBR functionality.\\n    function deactivateCBR() external {\\n        _requireOnlyAdmin();\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        if ($.isCBROn == false) revert SameValue();\\n        $.isCBROn = false;\\n        emit CBRDeactivated();\\n    }\\n\\n    /// @notice Sets the redeem fee.\\n    /// @dev Updates the fee for redeeming tokens, in basis points.\\n    /// @param _redeemFee The new redeem fee to set.\\n    function setRedeemFee(uint256 _redeemFee) external {\\n        _requireOnlyAdmin();\\n        if (_redeemFee > MAX_REDEEM_FEE) revert RedeemFeeTooBig();\\n\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        if ($.redeemFee == _redeemFee) revert SameValue();\\n        $.redeemFee = _redeemFee;\\n        emit RedeemFeeUpdated(_redeemFee);\\n    }\\n\\n    /// @notice Pauses the redeem functionality.\\n    /// @dev Triggers the stopped state, preventing redeem operations.\\n    function pauseRedeem() external whenRedeemNotPaused {\\n        _requireOnlyAdmin();\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        $._redeemPaused = true;\\n        emit RedeemPaused();\\n    }\\n\\n    /// @notice Unpauses the redeem functionality.\\n    /// @dev Returns to normal state, allowing redeem operations.\\n    function unpauseRedeem() external whenRedeemPaused {\\n        _requireOnlyAdmin();\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        $._redeemPaused = false;\\n        emit RedeemUnPaused();\\n    }\\n\\n    /// @notice Pauses the swap functionality.\\n    /// @dev Triggers the stopped state, preventing swap operations.\\n    function pauseSwap() external whenSwapNotPaused {\\n        _requireOnlyAdmin();\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        $._swapPaused = true;\\n        emit SwapPaused();\\n    }\\n\\n    /// @notice Unpauses the swap functionality.\\n    /// @dev Returns to normal state, allowing swap operations.\\n    function unpauseSwap() external whenSwapPaused {\\n        _requireOnlyAdmin();\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        $._swapPaused = false;\\n        emit SwapUnPaused();\\n    }\\n\\n    /// @notice Pauses the contract.\\n    /// @dev Can be called by the DAO to pause all contract operations.\\n    function pause() external {\\n        _requireOnlyAdmin();\\n        _pause();\\n    }\\n\\n    /// @notice Unpauses the contract.\\n    /// @dev Can be called by the DAO to unpause all contract operations.\\n    function unpause() external {\\n        _requireOnlyAdmin();\\n        _unpause();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               Internal\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @notice  _swapCheckAndGetUSDQuote method will check if the token is a USD0-supported RWA token and if the amount is not 0\\n    /// @dev     Function that do sanity check on the inputs\\n    /// @dev      and return the normalized USD quoted price of RWA tokens for the given amount\\n    /// @param   rwaToken  address of the token to swap MUST be a rwa token.\\n    /// @param   amountInToken  amount of RWA token to swap.\\n    /// @return  wadQuoteInUSD The quoted amount in USD with 18 decimals for the specified token and amount.\\n    function _swapCheckAndGetUSDQuote(address rwaToken, uint256 amountInToken)\\n        internal\\n        view\\n        returns (uint256 wadQuoteInUSD)\\n    {\\n        if (amountInToken == 0) {\\n            revert AmountIsZero();\\n        }\\n\\n        // Amount can't be greater than uint128\\n        if (amountInToken > type(uint128).max) {\\n            revert AmountTooBig();\\n        }\\n\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        if (!$.tokenMapping.isUsd0Collateral(rwaToken)) {\\n            revert InvalidToken();\\n        }\\n        wadQuoteInUSD = _getQuoteInUsd(amountInToken, rwaToken);\\n        //slither-disable-next-line incorrect-equality\\n        if (wadQuoteInUSD == 0) {\\n            revert AmountTooLow();\\n        }\\n    }\\n\\n    /// @notice  transfers RWA Token And Mint Stable\\n    /// @dev     will transfer the RWA to the treasury and mints the corresponding stableAmount in USD0 stablecoin\\n    /// @param   rwaToken  address of the token to swap MUST be a RWA token.\\n    /// @param   amount  amount of rwa token to swap.\\n    /// @param   wadAmountInUSD amount of USD0 stablecoin to mint.\\n    function _transferRWATokenAndMintStable(\\n        address rwaToken,\\n        uint256 amount,\\n        uint256 wadAmountInUSD\\n    ) internal {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        // Should revert if balance is insufficient\\n        IERC20Metadata(address(rwaToken)).safeTransferFrom(msg.sender, $.treasury, amount);\\n        // Mint some stablecoin\\n        $.usd0.mint(msg.sender, wadAmountInUSD);\\n    }\\n\\n    /// @dev call the oracle to get the price in USD\\n    /// @param rwaToken the collateral token address\\n    /// @return wadPriceInUSD the price in USD with 18 decimals\\n    /// @return decimals number of decimals of the token\\n    function _getPriceAndDecimals(address rwaToken)\\n        internal\\n        view\\n        returns (uint256 wadPriceInUSD, uint8 decimals)\\n    {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        wadPriceInUSD = uint256($.oracle.getPrice(rwaToken));\\n        decimals = uint8(IERC20Metadata(rwaToken).decimals());\\n    }\\n\\n    /// @notice  get the price in USD of an `tokenAmount` of `rwaToken`\\n    /// @dev call the oracle to get the price in USD of `tokenAmount` of token with 18 decimals\\n    /// @param tokenAmount the amount of token to convert in USD with 18 decimals\\n    /// @param rwaToken the collateral token address\\n    /// @return wadAmountInUSD the amount in USD with 18 decimals\\n    function _getQuoteInUsd(uint256 tokenAmount, address rwaToken)\\n        internal\\n        view\\n        returns (uint256 wadAmountInUSD)\\n    {\\n        (uint256 wadPriceInUSD, uint8 decimals) = _getPriceAndDecimals(rwaToken);\\n        uint256 wadAmount = tokenAmount.tokenAmountToWad(decimals);\\n        wadAmountInUSD = Math.mulDiv(wadAmount, wadPriceInUSD, SCALAR_ONE, Math.Rounding.Floor);\\n    }\\n\\n    /// @notice  get the amount of token for an amount of USD\\n    /// @dev call the oracle to get the price in USD of `amount` of token with 18 decimals\\n    /// @param wadStableAmount the amount of USD with 18 decimals\\n    /// @param rwaToken the RWA token address\\n    /// @return amountInToken the amount in token corresponding to the amount of USD\\n    function _getQuoteInToken(uint256 wadStableAmount, address rwaToken)\\n        internal\\n        view\\n        returns (uint256 amountInToken)\\n    {\\n        (uint256 wadPriceInUSD, uint8 decimals) = _getPriceAndDecimals(rwaToken);\\n        // will result in an amount with the same 'decimals' as the token\\n        amountInToken = wadStableAmount.wadTokenAmountForPrice(wadPriceInUSD, decimals);\\n    }\\n\\n    /// @notice Calculates the returned amount of rwaToken give an amount of USD\\n    /// @dev return the amountInToken of token for `wadStableAmount` of USD at the current price\\n    /// @param wadStableAmount the amount of USD\\n    /// @param rwaToken the RWA token address\\n    /// @return amountInToken the amount of token that is worth `wadStableAmount` of USD with 18 decimals\\n    function _getTokenAmountForAmountInUSD(uint256 wadStableAmount, address rwaToken)\\n        internal\\n        view\\n        returns (uint256 amountInToken)\\n    {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        amountInToken = _getQuoteInToken(wadStableAmount, rwaToken);\\n        // if cbr is on we need to apply the coef to the rwa price\\n        // cbrCoef should be less than 1e18\\n        if ($.isCBROn) {\\n            amountInToken = Math.mulDiv(amountInToken, $.cbrCoef, SCALAR_ONE, Math.Rounding.Floor);\\n        }\\n    }\\n\\n    /// @notice  _transferFee method will transfer the fee to the treasury\\n    /// @dev     Function that transfer the fee to the treasury\\n    /// @dev     The fee is calculated as a percentage of the amount of USD0 stablecoin to redeem\\n    /// @dev     The fee is minted to avoid transfer and allowance as the whole USD0 amount is burnt afterwards\\n    /// @param   usd0Amount  Amount of USD0 to transfer to treasury.\\n    /// @param   rwaToken  address of the token to swap should be a rwa token.\\n    /// @return stableFee The amount of stablecoin minted as fees for the treasury.\\n    function _transferFee(uint256 usd0Amount, address rwaToken)\\n        internal\\n        returns (uint256 stableFee)\\n    {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        stableFee = Math.mulDiv(usd0Amount, $.redeemFee, SCALAR_TEN_KWEI, Math.Rounding.Floor);\\n        uint8 tokenDecimals = IERC20Metadata(rwaToken).decimals();\\n        // if the token has less decimals than USD0 we need to normalize the fee\\n        if (tokenDecimals < 18) {\\n            // we scale down the fee to the token decimals\\n            // and we scale it up to 18 decimals\\n            stableFee = Normalize.tokenAmountToWad(\\n                Normalize.wadAmountToDecimals(stableFee, tokenDecimals), tokenDecimals\\n            );\\n        }\\n        // transfer the fee to the treasury\\n        if (stableFee > 0) {\\n            $.usd0.mint($.treasury, stableFee);\\n        }\\n    }\\n\\n    /// @notice  _burnStableTokenAndTransferCollateral method will burn the stable token and transfer the collateral token\\n    /// @dev     Function that burns the stable token and transfer the collateral token\\n    /// @param   rwaToken  address of the token to swap should be a rwa token.\\n    /// @param   stableAmount  amount of token to swap.\\n    /// @param   stableFee  amount of fee in stablecoin.\\n    /// @return returnedCollateral The amount of collateral token returned.\\n    function _burnStableTokenAndTransferCollateral(\\n        address rwaToken,\\n        uint256 stableAmount,\\n        uint256 stableFee\\n    ) internal returns (uint256 returnedCollateral) {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        // we burn the remaining stable token\\n        uint256 burnedStable = stableAmount - stableFee;\\n        // we burn all the stable token USD0\\n        $.usd0.burnFrom(msg.sender, stableAmount);\\n\\n        // get the amount of collateral token for the amount of stablecoin burned by calling the oracle\\n        returnedCollateral = _getTokenAmountForAmountInUSD(burnedStable, rwaToken);\\n        if (returnedCollateral == 0) {\\n            revert AmountTooLow();\\n        }\\n\\n        // we distribute the collateral token from the treasury to the user\\n        // slither-disable-next-line arbitrary-send-erc20\\n        IERC20Metadata(rwaToken).safeTransferFrom($.treasury, msg.sender, returnedCollateral);\\n    }\\n\\n    /// @notice Swap RWA for USDC through offers on the SwapperContract\\n    /// @dev Takes USYC, mints USD0 and provides it to the Swapper Contract directly\\n    /// Sends USD0 to the offer's creator and sends USDC to the recipient\\n    /// @dev the recipient Address to receive the USDC is msg.sender\\n    /// @param caller Address of the caller (msg.sender or intent recipient)\\n    /// @param rwaToken Address of the RWA to swap for USDC\\n    /// @param amountInTokenDecimals Amount of the RWA to swap for USDC\\n    /// @param partialMatching flag to allow partial matching\\n    /// @param orderIdsToTake orderIds to be taken\\n    /// @param approval ERC20Permit approval data and signature of data\\n    /// @return matchedAmountInTokenDecimals The amount of RWA tokens which have been matched.\\n    /// @return matchedAmountInUSD           The net amount of USD0 tokens minted.\\n    // solhint-disable-next-line code-complexity\\n    function _swapRWAtoStbc(\\n        address caller,\\n        address rwaToken,\\n        uint256 amountInTokenDecimals,\\n        bool partialMatching,\\n        uint256[] calldata orderIdsToTake,\\n        Approval calldata approval\\n    ) internal returns (uint256 matchedAmountInTokenDecimals, uint256 matchedAmountInUSD) {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        // Permission launch\\n        $.registryAccess.onlyMatchingRole(ALLOWLISTED);\\n        // Check if the token is a USD0-supported RWA token\\n        if (!$.tokenMapping.isUsd0Collateral(rwaToken)) {\\n            revert InvalidToken();\\n        }\\n        if (amountInTokenDecimals == 0) {\\n            revert AmountIsZero();\\n        }\\n        if (amountInTokenDecimals > type(uint128).max) {\\n            revert AmountTooBig();\\n        }\\n        if (orderIdsToTake.length == 0) {\\n            revert NoOrdersIdsProvided();\\n        }\\n\\n        // Check if the approval isn't null, if it isn't, use it for the permit\\n        if (approval.deadline != 0 && approval.v != 0 && approval.r != 0 && approval.s != 0) {\\n            // Authorization transfer\\n            try IERC20Permit(rwaToken).permit(\\n                caller,\\n                address(this),\\n                amountInTokenDecimals,\\n                approval.deadline,\\n                approval.v,\\n                approval.r,\\n                approval.s\\n            ) {} catch {} // solhint-disable-line no-empty-blocks\\n        }\\n\\n        // Take the RWA token from the recipient\\n        IERC20Metadata(rwaToken).safeTransferFrom(caller, address(this), amountInTokenDecimals);\\n        // Get the price quote of the RWA token to mint USD0\\n        uint256 wadRwaQuoteInUSD = _getQuoteInUsd(amountInTokenDecimals, rwaToken);\\n        // Mint the corresponding amount of USD0 stablecoin\\n        $.usd0.mint(address(this), wadRwaQuoteInUSD);\\n        if (!IERC20($.usd0).approve(address($.swapperEngine), wadRwaQuoteInUSD)) {\\n            revert ApprovalFailed();\\n        }\\n        // Provide the USD0 to the SwapperEngine and receive USDC for the caller\\n        uint256 wadRwaNotTakenInUSD =\\n            $.swapperEngine.swapUsd0(caller, wadRwaQuoteInUSD, orderIdsToTake, partialMatching);\\n\\n        // Burn any unmatched USD0 and return the RWA\\n        if (wadRwaNotTakenInUSD > 0) {\\n            if (!IERC20($.usd0).approve(address($.swapperEngine), 0)) {\\n                revert ApprovalFailed();\\n            }\\n            $.usd0.burnFrom(address(this), wadRwaNotTakenInUSD);\\n\\n            // Get amount of RWA for the wadRwaNotTakenInUSD pricing\\n            uint256 rwaTokensToReturn = _getQuoteInToken(wadRwaNotTakenInUSD, rwaToken);\\n\\n            // Transfer back the remaining RWA tokens to the recipient\\n            IERC20Metadata(rwaToken).safeTransfer(caller, rwaTokensToReturn);\\n\\n            matchedAmountInTokenDecimals = amountInTokenDecimals - rwaTokensToReturn;\\n        } else {\\n            matchedAmountInTokenDecimals = amountInTokenDecimals;\\n        }\\n\\n        // Send the matched RWA to the treasury\\n        IERC20Metadata(rwaToken).safeTransfer($.treasury, matchedAmountInTokenDecimals);\\n\\n        matchedAmountInUSD = wadRwaQuoteInUSD - wadRwaNotTakenInUSD;\\n        emit Swap(caller, rwaToken, matchedAmountInTokenDecimals, matchedAmountInUSD);\\n\\n        return (matchedAmountInTokenDecimals, matchedAmountInUSD);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               External\\n    //////////////////////////////////////////////////////////////*/\\n\\n    /// @inheritdoc IDaoCollateral\\n    function swap(address rwaToken, uint256 amount, uint256 minAmountOut)\\n        public\\n        nonReentrant\\n        whenSwapNotPaused\\n        whenNotPaused\\n    {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        // Permission launch\\n        $.registryAccess.onlyMatchingRole(ALLOWLISTED);\\n        uint256 wadQuoteInUSD = _swapCheckAndGetUSDQuote(rwaToken, amount);\\n        // Check if the amount is greater than the minAmountOut\\n        if (wadQuoteInUSD < minAmountOut) {\\n            revert AmountTooLow();\\n        }\\n        _transferRWATokenAndMintStable(rwaToken, amount, wadQuoteInUSD);\\n        // Emit the event\\n        emit Swap(msg.sender, rwaToken, amount, wadQuoteInUSD);\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n    function swapWithPermit(\\n        address rwaToken,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external {\\n        // solhint-disable-next-line no-empty-blocks\\n        try IERC20Permit(rwaToken).permit(msg.sender, address(this), amount, deadline, v, r, s) {}\\n            catch {} // solhint-disable-line no-empty-blocks\\n        swap(rwaToken, amount, minAmountOut);\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n    function redeem(address rwaToken, uint256 amount, uint256 minAmountOut)\\n        external\\n        nonReentrant\\n        whenRedeemNotPaused\\n        whenNotPaused\\n    {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n\\n        // Permission launch\\n        $.registryAccess.onlyMatchingRole(ALLOWLISTED);\\n\\n        // Amount can't be 0\\n        if (amount == 0) {\\n            revert AmountIsZero();\\n        }\\n\\n        // check that rwaToken is a RWA token\\n        if (!_daoCollateralStorageV0().tokenMapping.isUsd0Collateral(rwaToken)) {\\n            revert InvalidToken();\\n        }\\n        uint256 stableFee = _transferFee(amount, rwaToken);\\n        uint256 returnedCollateral =\\n            _burnStableTokenAndTransferCollateral(rwaToken, amount, stableFee);\\n        // Check if the amount is greater than the minAmountOut\\n        if (returnedCollateral < minAmountOut) {\\n            revert AmountTooLow();\\n        }\\n        emit Redeem(msg.sender, rwaToken, amount, returnedCollateral, stableFee);\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n    function redeemDao(address rwaToken, uint256 amount) external nonReentrant {\\n        _requireOnlyAdmin();\\n        // Amount can't be 0\\n        if (amount == 0) {\\n            revert AmountIsZero();\\n        }\\n        // check that rwaToken is a RWA token\\n        if (!_daoCollateralStorageV0().tokenMapping.isUsd0Collateral(rwaToken)) {\\n            revert InvalidToken();\\n        }\\n        uint256 returnedCollateral = _burnStableTokenAndTransferCollateral(rwaToken, amount, 0);\\n        emit Redeem(msg.sender, rwaToken, amount, returnedCollateral, 0);\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n    function swapRWAtoStbc(\\n        address rwaToken,\\n        uint256 amountInTokenDecimals,\\n        bool partialMatching,\\n        uint256[] calldata orderIdsToTake,\\n        Approval calldata approval\\n    ) external nonReentrant whenNotPaused whenSwapNotPaused {\\n        _swapRWAtoStbc(\\n            msg.sender, rwaToken, amountInTokenDecimals, partialMatching, orderIdsToTake, approval\\n        );\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n    function invalidateNonce() external {\\n        uint256 nonceUsed = _useNonce(msg.sender);\\n        emit NonceInvalidated(msg.sender, nonceUsed);\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n    function swapRWAtoStbcIntent(\\n        uint256[] calldata orderIdsToTake,\\n        Approval calldata approval,\\n        Intent calldata intent,\\n        bool partialMatching\\n    ) external nonReentrant whenNotPaused whenSwapNotPaused {\\n        if (block.timestamp > intent.deadline) {\\n            revert ExpiredSignature(intent.deadline);\\n        }\\n        if (approval.deadline != intent.deadline) {\\n            revert InvalidDeadline(approval.deadline, intent.deadline);\\n        }\\n\\n        uint256 nonce = _useNonce(intent.recipient);\\n\\n        // check the signature w/ nonce\\n        bytes32 structHash = keccak256(\\n            abi.encode(\\n                INTENT_TYPE_HASH,\\n                intent.recipient,\\n                intent.rwaToken,\\n                intent.amountInTokenDecimals,\\n                nonce,\\n                intent.deadline\\n            )\\n        );\\n\\n        bytes32 hash = _hashTypedDataV4(structHash);\\n\\n        bytes memory signature = intent.signature;\\n        if (!SignatureChecker.isValidSignatureNow(intent.recipient, hash, signature)) {\\n            revert InvalidSigner(intent.recipient);\\n        }\\n        (uint256 amountInTokenDecimals, uint256 amountInUSD) = _swapRWAtoStbc(\\n            intent.recipient,\\n            intent.rwaToken,\\n            intent.amountInTokenDecimals,\\n            partialMatching,\\n            orderIdsToTake,\\n            approval\\n        );\\n        emit IntentMatched(\\n            intent.recipient, nonce, intent.rwaToken, amountInTokenDecimals, amountInUSD\\n        );\\n    }\\n\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n        return _domainSeparatorV4();\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n\\n    function isCBROn() external view returns (bool) {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        return $.isCBROn;\\n    }\\n\\n    /// @notice Returns the cbrCoef value.\\n    function cbrCoef() public view returns (uint256) {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        return $.cbrCoef;\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n    function redeemFee() public view returns (uint256) {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        return $.redeemFee;\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n    function isRedeemPaused() public view returns (bool) {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        return $._redeemPaused;\\n    }\\n\\n    /// @inheritdoc IDaoCollateral\\n    function isSwapPaused() public view returns (bool) {\\n        DaoCollateralStorageV0 storage $ = _daoCollateralStorageV0();\\n        return $._swapPaused;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/cryptography/EIP712Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {IERC5267} from \\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n\\n        string _name;\\n        string _version;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.EIP712\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\\n        assembly {\\n            $.slot := EIP712StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/SignatureChecker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/SignatureChecker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ECDSA} from \\\"./ECDSA.sol\\\";\\nimport {IERC1271} from \\\"../../interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @dev Signature verification helper that can be used instead of `ECDSA.recover` to seamlessly support both ECDSA\\n * signatures from externally owned accounts (EOAs) as well as ERC1271 signatures from smart contract wallets like\\n * Argent and Safe Wallet (previously Gnosis Safe).\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. If the signer is a smart contract, the\\n     * signature is validated against that smart contract using ERC1271, otherwise it's validated using `ECDSA.recover`.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidSignatureNow(address signer, bytes32 hash, bytes memory signature) internal view returns (bool) {\\n        (address recovered, ECDSA.RecoverError error, ) = ECDSA.tryRecover(hash, signature);\\n        return\\n            (error == ECDSA.RecoverError.NoError && recovered == signer) ||\\n            isValidERC1271SignatureNow(signer, hash, signature);\\n    }\\n\\n    /**\\n     * @dev Checks if a signature is valid for a given signer and data hash. The signature is validated\\n     * against the signer smart contract using ERC1271.\\n     *\\n     * NOTE: Unlike ECDSA signatures, contract signatures are revocable, and the outcome of this function can thus\\n     * change through time. It could return true at block N and false at block N+1 (or the opposite).\\n     */\\n    function isValidERC1271SignatureNow(\\n        address signer,\\n        bytes32 hash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        (bool success, bytes memory result) = signer.staticcall(\\n            abi.encodeCall(IERC1271.isValidSignature, (hash, signature))\\n        );\\n        return (success &&\\n            result.length >= 32 &&\\n            abi.decode(result, (bytes32)) == bytes32(IERC1271.isValidSignature.selector));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/PausableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/NoncesUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract NoncesUpgradeable is Initializable {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Nonces\\n    struct NoncesStorage {\\n        mapping(address account => uint256) _nonces;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Nonces\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant NoncesStorageLocation = 0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00;\\n\\n    function _getNoncesStorage() private pure returns (NoncesStorage storage $) {\\n        assembly {\\n            $.slot := NoncesStorageLocation\\n        }\\n    }\\n\\n    function __Nonces_init() internal onlyInitializing {\\n    }\\n\\n    function __Nonces_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        return $._nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return $._nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/registry/IRegistryAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\nimport {IAccessControlDefaultAdminRules} from\\n    \\\"openzeppelin-contracts/access/extensions/IAccessControlDefaultAdminRules.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ninterface IRegistryAccess is IAccessControlDefaultAdminRules {}\\n\"\r\n    },\r\n    \"src/interfaces/token/IUsd0.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\nimport {IERC20Metadata} from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IUsd0 is IERC20Metadata {\\n    /// @notice mint Usd0 token\\n    /// @dev Assume to address is allowlisted\\n    /// @dev Can only be called by USD0_MINT role\\n    /// @param to address of the account who want to mint their token\\n    /// @param amount the amount of tokens to mint\\n    function mint(address to, uint256 amount) external;\\n\\n    /// @notice burnFrom Usd0 token\\n    /// @dev Can only be called by USD0_BURN role\\n    /// @param account address of the account who want to burn\\n    /// @param amount the amount of tokens to burn\\n    function burnFrom(address account, uint256 amount) external;\\n\\n    /// @notice burn Usd0 token\\n    /// @dev Can only be called by USD0_BURN role\\n    /// @param amount the amount of tokens to burn\\n    function burn(uint256 amount) external;\\n\\n    /// @notice check if the account is allowlisted\\n    /// @param account address of the account to check\\n    /// @return bool\\n    function isBlacklisted(address account) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/registry/IRegistryContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\ninterface IRegistryContract {\\n    function setContract(bytes32 name, address contractAddress) external;\\n\\n    function getContract(bytes32 name) external view returns (address);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/tokenManager/ITokenMapping.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\ninterface ITokenMapping {\\n    /// @notice Links an RWA token to USD0 token.\\n    /// @dev Only the admin can link the RWA token to USD0 token.\\n    /// @dev Ensures the RWA token is valid and not already linked to USD0 token.\\n    /// @param rwa The address of the RWA token.\\n    /// @return A boolean value indicating success.\\n    function addUsd0Rwa(address rwa) external returns (bool);\\n\\n    /// @notice Retrieves the RWA token linked to USD0 token.\\n    /// @dev Returns the address of the Rwa token associated with USD0 token.\\n    /// @param rwaId The ID of the RWA token.\\n    /// @return The address of the associated Rwa token.\\n    function getUsd0RwaById(uint256 rwaId) external view returns (address);\\n\\n    /// @notice Retrieves all RWA tokens linked to USD0 token.\\n    /// @dev Returns an array of addresses of all RWA tokens associated with USD0 token.\\n    /// @dev the maximum number of RWA tokens that can be associated with USD0 token is 10.\\n    /// @return An array of addresses of associated RWA tokens.\\n    function getAllUsd0Rwa() external view returns (address[] memory);\\n\\n    /// @notice Retrieves the last RWA ID for USD0 token.\\n    /// @dev Returns the highest index used for the RWA tokens associated with the USD0 token.\\n    /// @return The last RWA ID used in the STBC to RWA mapping.\\n    function getLastUsd0RwaId() external view returns (uint256);\\n\\n    /// @notice Checks if the RWA token is linked to USD0 token.\\n    /// @dev Returns a boolean value indicating if the RWA token is linked to USD0 token.\\n    /// @param rwa The address of the RWA token.\\n    /// @return A boolean value indicating if the RWA token is linked to USD0 token.\\n    function isUsd0Collateral(address rwa) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"src/interfaces/oracles/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\ninterface IOracle {\\n    /// @notice Get the latest price of a token from the underlying oracle.\\n    /// @dev    View function which fetches the latest available oracle price from a Chainlink-compatible feed.\\n    /// @dev    The result is scaled to 18 decimals.\\n    /// @param  token The address of the token.\\n    /// @return The price of the token in USD with 18 decimals.\\n    function getPrice(address token) external view returns (uint256);\\n\\n    /// @notice Compute a quote for the specified token and amount.\\n    /// @dev    This function fetches the latest available price from a Chainlink-compatible feed for the token and computes the quote based on the given amount.\\n    /// @dev    The quote is computed by multiplying the amount of tokens by the token price.\\n    /// @dev    The result is returned with as many decimals as the input amount.\\n    /// @param  token  The address of the token to calculate the quote for.\\n    /// @param  amount The amount of tokens for which to compute the quote.\\n    /// @return The computed quote in USD with as many decimals as the input.\\n    function getQuote(address token, uint256 amount) external returns (uint256);\\n\\n    /// @notice Set the maximum allowed depeg threshold for stablecoins.\\n    /// @dev    The provided value should be in basis points relative to 1 USD.\\n    /// @dev    Valid values are from 0 (exact 1:1 peg required) to 10_000 ($0.00-$2.00 allowed).\\n    /// @dev    getPrice will revert if the price falls outside of this range.\\n    /// @param  maxAuthorizedDepegPrice The new maximum allowed depeg threshold.\\n    function setMaxDepegThreshold(uint256 maxAuthorizedDepegPrice) external;\\n}\\n\"\r\n    },\r\n    \"src/interfaces/IDaoCollateral.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\nstruct Approval {\\n    uint256 deadline;\\n    uint8 v; // Changes at each new signature because of ERC20 Permit nonce\\n    bytes32 r;\\n    bytes32 s;\\n}\\n\\nstruct Intent {\\n    address recipient;\\n    address rwaToken;\\n    uint256 amountInTokenDecimals;\\n    uint256 deadline;\\n    bytes signature;\\n}\\n\\ninterface IDaoCollateral {\\n    /// @notice  swap method\\n    /// @dev     Function that enable you to swap your rwaToken for stablecoin\\n    /// @dev     Will exchange RWA (rwaToken) for USD0 (stableToken)\\n    /// @param   rwaToken  address of the token to swap\\n    /// @param   amount  amount of rwaToken to swap\\n    /// @param   minAmountOut minimum amount of stableToken to receive\\n    function swap(address rwaToken, uint256 amount, uint256 minAmountOut) external;\\n\\n    /// @notice  swap method with permit\\n    /// @dev     Function that enable you to swap your rwaToken for stablecoin with permit\\n    /// @dev     Will exchange RWA (rwaToken) for USD0 (stableToken)\\n    /// @param   rwaToken  address of the token to swap\\n    /// @param   amount  amount of rwaToken to swap\\n    /// @param   deadline The deadline for the permit\\n    /// @param   v The v value for the permit\\n    /// @param   r The r value for the permit\\n    /// @param   s The s value for the permit\\n    function swapWithPermit(\\n        address rwaToken,\\n        uint256 amount,\\n        uint256 minAmountOut,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice  redeem method\\n    /// @dev     Function that enable you to redeem your stable token for rwaToken\\n    /// @dev     Will exchange USD0 (stableToken) for RWA (rwaToken)\\n    /// @param   rwaToken address of the token that will be sent to the you\\n    /// @param   amount  amount of stableToken to redeem\\n    /// @param   minAmountOut minimum amount of rwaToken to receive\\n    function redeem(address rwaToken, uint256 amount, uint256 minAmountOut) external;\\n\\n    /// @notice Swap RWA for USDC through offers on the SwapperContract\\n    /// @dev Takes USYC, mints USD0 and provides it to the Swapper Contract directly\\n    /// Sends USD0 to the offer's creator and sends USDC to the recipient\\n    /// @dev the recipient Address to receive the USDC is msg.sender\\n    /// @param rwaToken Address of the RWA to swap for USDC\\n    /// @param amountInTokenDecimals Address of the RWA to swap for USDC\\n    /// @param orderIdsToTake orderIds to be taken\\n    /// @param approval ERC20Permit approval data and signature of data\\n    /// @param partialMatching flag to allow partial matching\\n    function swapRWAtoStbc(\\n        address rwaToken,\\n        uint256 amountInTokenDecimals,\\n        bool partialMatching,\\n        uint256[] calldata orderIdsToTake,\\n        Approval calldata approval\\n    ) external;\\n\\n    /// @notice Swap RWA for USDC through offers on the SwapperContract\\n    /// @dev Takes USYC, mints USD0 and provides it to the Swapper Contract directly\\n    /// Sends USD0 to the offer's creator and sends USDC to the recipient\\n    /// @dev the recipient Address to receive the USDC is the offer's creator\\n    /// @param orderIdsToTake orderIds to be taken\\n    /// @param approval ERC20Permit approval data and signature of data\\n    /// @param intent Intent data and signature of data\\n    /// @param partialMatching flag to allow partial matching\\n    function swapRWAtoStbcIntent(\\n        uint256[] calldata orderIdsToTake,\\n        Approval calldata approval,\\n        Intent calldata intent,\\n        bool partialMatching\\n    ) external;\\n\\n    // * Getter functions\\n\\n    /// @notice get the redeem fee percentage\\n    /// @return the fee value\\n    function redeemFee() external view returns (uint256);\\n\\n    /// @notice check if the CBR (Counter Bank Run) is activated\\n    /// @dev flag indicate the status of the CBR (see documentation for more details)\\n    /// @return the status of the CBR\\n    function isCBROn() external view returns (bool);\\n\\n    /// @notice get the status of pause for the redeem function\\n    /// @return the status of the pause\\n    function isRedeemPaused() external view returns (bool);\\n\\n    /// @notice get the status of pause for the swap function\\n    /// @return the status of the pause\\n    function isSwapPaused() external view returns (bool);\\n\\n    // * Restricted functions\\n\\n    /// @notice  redeem method for DAO\\n    /// @dev     Function that enables DAO to redeem stableToken for rwaToken\\n    /// @dev     Will exchange USD0 (stableToken) for RWA (rwaToken)\\n    /// @param   rwaToken address of the token that will be sent to the you\\n    /// @param   amount  amount of stableToken to redeem\\n    function redeemDao(address rwaToken, uint256 amount) external;\\n\\n    /// @notice Invalidates the current nonce for the message sender\\n    /// @dev This function increments the nonce counter for the msg.sender and emits a NonceInvalidated event\\n    function invalidateNonce() external;\\n}\\n\"\r\n    },\r\n    \"src/utils/CheckAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\nimport {IRegistryAccess} from \\\"src/interfaces/registry/IRegistryAccess.sol\\\";\\n\\nimport {NotAuthorized} from \\\"src/errors.sol\\\";\\n\\n/// @title Check Access control library\\nlibrary CheckAccessControl {\\n    /// @dev Function to restrict to one access role.\\n    /// @param registryAccess The registry access contract.\\n    /// @param role The role being checked.\\n    function onlyMatchingRole(IRegistryAccess registryAccess, bytes32 role) internal view {\\n        if (!registryAccess.hasRole(role, msg.sender)) {\\n            revert NotAuthorized();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"src/utils/normalize.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\nimport {IERC20Metadata} from \\\"openzeppelin-contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {Math} from \\\"openzeppelin-contracts/utils/math/Math.sol\\\";\\nimport {SCALAR_ONE} from \\\"src/constants.sol\\\";\\n\\n/// @title Normalize decimals between tokens\\nlibrary Normalize {\\n    /// @notice Normalize token amount to target decimals\\n    /// @notice i.e 100 USDC with 6 decimals to 100e18 USDC with 18 decimals\\n    /// @param tokenAmount The token amount\\n    /// @param tokenDecimals The token decimals\\n    /// @param targetDecimals The target decimals\\n    function tokenAmountToDecimals(uint256 tokenAmount, uint8 tokenDecimals, uint8 targetDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (tokenDecimals < targetDecimals) {\\n            return tokenAmount * (10 ** uint256(targetDecimals - tokenDecimals));\\n        } else if (tokenDecimals > targetDecimals) {\\n            return tokenAmount / (10 ** uint256(tokenDecimals - targetDecimals));\\n        } else {\\n            return tokenAmount;\\n        }\\n    }\\n\\n    /// @notice Normalize token amount to 18 decimals\\n    /// @notice i.e 100 USDC with 6 decimals to 100e18 USDC with 18 decimals\\n    /// @param tokenAmount The token amount\\n    /// @param tokenDecimals The token decimals\\n    function tokenAmountToWad(uint256 tokenAmount, uint8 tokenDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return tokenAmountToDecimals(tokenAmount, tokenDecimals, 18);\\n    }\\n\\n    /// @notice Normalize token amount to wad\\n    /// @notice i.e 10e6 USYC with 6 decimals will result in wadAmount = 10e18 and  tokenDecimals = 6\\n    /// @param token The token address\\n    /// @param tokenAmount The token amount\\n    /// @return wadAmount The normalized token amount in wad\\n    /// @return tokenDecimals The token decimals\\n    function tokenAmountToWadWithTokenAddress(uint256 tokenAmount, address token)\\n        internal\\n        view\\n        returns (uint256, uint8)\\n    {\\n        uint8 tokenDecimals = uint8(IERC20Metadata(token).decimals());\\n        uint256 wadAmount = tokenAmountToWad(tokenAmount, uint8(tokenDecimals));\\n        return (wadAmount, tokenDecimals);\\n    }\\n\\n    /// @notice Returns wad amount of token at wad price.\\n    /// @notice i.e 10e6 USYC with 6 decimals will be wadAmount = 10e18\\n    /// @notice if wadPrice is 1e18 USD then 10e18 USD0 will be worth 10e18 USD\\n    /// @param wadAmount The wad amount (18 decimals)\\n    /// @param wadPrice The wad price (18 decimals)\\n    /// @return The normalized token amount for price\\n    function wadAmountByPrice(uint256 wadAmount, uint256 wadPrice)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.mulDiv(wadAmount, wadPrice, SCALAR_ONE, Math.Rounding.Floor);\\n    }\\n\\n    /// @notice return how much token we can have for stable amount.\\n    /// @notice i.e 10 (10e18) USD0 with 18 decimals worth 2$ each (2e18) will return 5e6 USYC with 6 decimals\\n    /// @param wadStableAmount The wad stable token amount\\n    /// @param wadPrice The wad price with for the token in stable\\n    /// @param tokenDecimals The token decimals\\n    /// @return The token amount for price with token decimals\\n    function wadTokenAmountForPrice(uint256 wadStableAmount, uint256 wadPrice, uint8 tokenDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return Math.mulDiv(wadStableAmount, 10 ** tokenDecimals, wadPrice, Math.Rounding.Floor);\\n    }\\n\\n    /// @dev Converts a WAD amount to a different number of decimals.\\n    /// @param wadAmount The WAD amount to convert.\\n    /// @param targetDecimals The number of decimals to convert to.\\n    /// @return The converted amount with the target number of decimals.\\n    function wadAmountToDecimals(uint256 wadAmount, uint8 targetDecimals)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        return tokenAmountToDecimals(wadAmount, 18, targetDecimals);\\n    }\\n}\\n\"\r\n    },\r\n    \"src/interfaces/ISwapperEngine.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\ninterface ISwapperEngine {\\n    /// @notice Allows a user to deposit USDC tokens and create a new order.\\n    /// @dev This function transfers the specified amount of USDC tokens from the caller to the contract\\n    ///      and creates a new order with the deposited amount and the caller as the requester.\\n    /// @param amountToDeposit The amount of USDC tokens to deposit.\\n    function depositUSDC(uint256 amountToDeposit) external;\\n\\n    /// @notice Allows a user to deposit USDC tokens with permit and create a new order.\\n    /// @dev This function transfers the specified amount of USDC tokens from the caller to the contract\\n    ///      and creates a new order with the deposited amount and the caller as the requester.\\n    /// @param amountToDeposit The amount of USDC tokens to deposit.\\n    /// @param deadline The deadline for the permit\\n    /// @param v The v value for the permit\\n    /// @param r The r value for the permit\\n    /// @param s The s value for the permit\\n    function depositUSDCWithPermit(\\n        uint256 amountToDeposit,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /// @notice Allows the requester of an order to withdraw their deposited USDC tokens and cancel the order.\\n    /// @dev This function deactivates the specified order, sets its token amount to zero, and transfers\\n    ///      the deposited USDC tokens back to the requester.\\n    /// @param orderToCancel The ID of the order to cancel and withdraw from.\\n    function withdrawUSDC(uint256 orderToCancel) external;\\n\\n    /// @notice Allows a user to provide USD0 tokens and receive USDC tokens by matching against existing orders.\\n    /// @dev This function allows users to specify an amount of USDC tokens they want, calculating the corresponding\\n    ///      USD0 tokens they need and exchanging it against active orders.\\n    /// @param recipient The address to receive the USDC tokens.\\n    /// @param amountUsdcToTakeInNativeDecimals The amount of USDC tokens to take, in the token's native decimal representation.\\n    /// @param orderIdsToTake An array of order IDs to match against.\\n    /// @param partialMatchingAllowed A flag indicating whether partial matching is allowed.\\n    /// @return The unmatched amount of USDC tokens.\\n    function provideUsd0ReceiveUSDC(\\n        address recipient,\\n        uint256 amountUsdcToTakeInNativeDecimals,\\n        uint256[] memory orderIdsToTake,\\n        bool partialMatchingAllowed\\n    ) external returns (uint256);\\n\\n    /// @notice provideUsd0ReceiveUSDC method with permit\\n    /// @dev This function allows users to to swap their USD0 for USDC with permit\\n    /// @param recipient The address to receive the USDC tokens.\\n    /// @param amountUsdcToTakeInNativeDecimals The amount of USDC tokens to take, in the token's native decimal representation.\\n    /// @param orderIdsToTake An array of order IDs to match against.\\n    /// @param partialMatchingAllowed A flag indicating whether partial matching is allowed.\\n    /// @param deadline The deadline for the permit\\n    /// @param usd0ToPermit The amount of USD0 tokens to permit, must be greater than the equivalent amount of USDC tokens to take.\\n    /// @param v The v value for the permit\\n    /// @param r The r value for the permit\\n    /// @param s The s value for the permit\\n    /// @return The unmatched amount of USDC tokens.\\n    function provideUsd0ReceiveUSDCWithPermit(\\n        address recipient,\\n        uint256 amountUsdcToTakeInNativeDecimals,\\n        uint256[] memory orderIdsToTake,\\n        bool partialMatchingAllowed,\\n        uint256 usd0ToPermit,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256);\\n\\n    /// @notice Allows users to specify an amount of USD0 tokens to swap and receive USDC tokens by matching against existing orders.\\n    /// @dev This function handles the precision differences between USD0 and USDC taking dust into account\\n    ///      to ensure accurate conversion. It returns the unmatched USD0 amount in WAD format, including the dust.\\n    /// @param recipient The address to receive the USDC tokens.\\n    /// @param amountUsd0ToProvideInWad The amount of USD0 to provide in WAD format.\\n    /// @param orderIdsToTake An array of order IDs to match against.\\n    /// @param partialMatchingAllowed A flag indicating whether partial matching is allowed.\\n    /// @return The unmatched amount of Usd0 tokens in WAD format.\\n    function swapUsd0(\\n        address recipient,\\n        uint256 amountUsd0ToProvideInWad,\\n        uint256[] memory orderIdsToTake,\\n        bool partialMatchingAllowed\\n    ) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"src/constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\nbytes32 constant ADMIN = keccak256(\\\"ADMIN\\\");\\nbytes32 constant DEFAULT_ADMIN_ROLE = 0x00;\\nbytes32 constant DAO_COLLATERAL = keccak256(\\\"DAO_COLLATERAL_CONTRACT\\\");\\nbytes32 constant USD0_MINT = keccak256(\\\"USD0_MINT\\\");\\nbytes32 constant USD0_BURN = keccak256(\\\"USD0_BURN\\\");\\nbytes32 constant ALLOWLISTED = keccak256(\\\"ALLOWLISTED\\\");\\nbytes32 constant ALLOWLISTED_ADMIN = keccak256(\\\"ALLOWLISTED_ADMIN\\\");\\nbytes32 constant SWAPPER_ENGINE = keccak256(\\\"SWAPPER_ENGINE\\\");\\nbytes32 constant INTENT_TYPE_HASH = keccak256(\\n    \\\"SwapIntent(address recipient,address rwaToken,uint256 amountInTokenDecimals,uint256 nonce,uint256 deadline)\\\"\\n);\\n/* Contracts */\\n\\nbytes32 constant CONTRACT_REGISTRY_ACCESS = keccak256(\\\"CONTRACT_REGISTRY_ACCESS\\\");\\nbytes32 constant CONTRACT_DAO_COLLATERAL = keccak256(\\\"CONTRACT_DAO_COLLATERAL\\\");\\nbytes32 constant CONTRACT_USD0PP = keccak256(\\\"CONTRACT_USD0PP\\\");\\nbytes32 constant CONTRACT_TOKEN_MAPPING = keccak256(\\\"CONTRACT_TOKEN_MAPPING\\\");\\nbytes32 constant CONTRACT_ORACLE = keccak256(\\\"CONTRACT_ORACLE\\\");\\nbytes32 constant CONTRACT_ORACLE_USUAL = keccak256(\\\"CONTRACT_ORACLE_USUAL\\\");\\nbytes32 constant CONTRACT_DATA_PUBLISHER = keccak256(\\\"CONTRACT_DATA_PUBLISHER\\\");\\nbytes32 constant CONTRACT_TREASURY = keccak256(\\\"CONTRACT_TREASURY\\\");\\nbytes32 constant CONTRACT_SWAPPER_ENGINE = keccak256(\\\"CONTRACT_SWAPPER_ENGINE\\\");\\n/* Contract tokens */\\nbytes32 constant CONTRACT_USD0 = keccak256(\\\"CONTRACT_USD0\\\");\\nbytes32 constant CONTRACT_USDC = keccak256(\\\"CONTRACT_USDC\\\");\\n/* Constants */\\nuint256 constant SCALAR_ONE = 1e18;\\nuint256 constant SCALAR_TEN_KWEI = 10_000;\\nuint256 constant MAX_REDEEM_FEE = 2500;\\nuint256 constant MINIMUM_USDC_PROVIDED = 100e6; //minimum of 100 USDC deposit;\\n// we take 12sec as the average block time\\n// 1 year = 3600sec * 24 hours * 365 days * 4 years  = 126144000 + 1 day // adding a leap day\\nuint256 constant BOND_DURATION_FOUR_YEAR = 126_230_400; //including a leap day;\\nuint256 constant BOND_START_DATE = 1_719_489_600; // Thu Jun 27 2024 12:00:00 GMT+0000\\nuint256 constant BASIS_POINT_BASE = 10_000;\\nuint64 constant ONE_WEEK = 604_800;\\nuint256 constant ONE_USDC = 1e6;\\n\\n/*\\n * The maximum relative price difference between two oracle responses allowed in order for the PriceFeed\\n * to return to using the Oracle oracle. 18-digit precision.\\n */\\n\\nuint256 constant INITIAL_MAX_DEPEG_THRESHOLD = 100;\\n\\n/* Maximum number of RWA tokens that can be associated with USD0 */\\nuint256 constant MAX_RWA_COUNT = 10;\\n\"\r\n    },\r\n    \"src/errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.8.20;\\n\\nerror AlreadyClaimed();\\nerror AlreadyWhitelisted();\\nerror AmountTooBig();\\nerror AmountTooLow();\\nerror AmountIsZero();\\nerror Blacklisted();\\n\\nerror NotAllowlisted(address);\\n\\nerror Empty();\\nerror ExpiredSignature(uint256 deadline);\\nerror SameValue();\\n\\nerror Invalid();\\nerror InvalidToken();\\nerror InvalidName();\\nerror InvalidSigner(address owner);\\nerror InvalidDeadline(uint256 approvalDeadline, uint256 intentDeadline);\\nerror NoOrdersIdsProvided();\\nerror InvalidSymbol();\\n\\nerror LockedOffer();\\n\\nerror NotAuthorized();\\nerror NotClaimableYet();\\nerror NullAddress();\\nerror NullContract();\\n\\nerror OracleNotWorkingNotCurrent();\\nerror OracleNotInitialized();\\nerror OutOfBounds();\\nerror InvalidTimeout();\\n\\nerror RedeemMustNotBePaused();\\nerror RedeemMustBePaused();\\nerror SwapMustNotBePaused();\\nerror SwapMustBePaused();\\n\\nerror StablecoinDepeg();\\nerror DepegThresholdTooHigh();\\n\\nerror TokenNotWhitelist();\\n\\nerror BondNotStarted();\\nerror BondFinished();\\nerror BondNotFinished();\\n\\nerror BeginInPast();\\n\\nerror CBRIsTooHigh();\\nerror CBRIsNull();\\n\\nerror RedeemFeeTooBig();\\nerror CancelFeeTooBig();\\nerror MinterRewardTooBig();\\nerror CollateralProviderRewardTooBig();\\nerror DistributionRatioInvalid();\\nerror TooManyRWA();\\nerror FailingTransfer();\\n\\nerror InsufficientUSD0Balance();\\nerror USDCAmountNotFullyMatched();\\nerror OrderNotActive();\\nerror NotRequester();\\nerror InsufficientUSD0Allowance();\\nerror ApprovalFailed();\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC5267.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/cryptography/ECDSA.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/interfaces/IERC1271.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/extensions/IAccessControlDefaultAdminRules.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlDefaultAdminRules.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlDefaultAdminRules declared to support ERC165 detection.\\n */\\ninterface IAccessControlDefaultAdminRules is IAccessControl {\\n    /**\\n     * @dev The new default admin is not a valid default admin.\\n     */\\n    error AccessControlInvalidDefaultAdmin(address defaultAdmin);\\n\\n    /**\\n     * @dev At least one of the following rules was violated:\\n     *\\n     * - The `DEFAULT_ADMIN_ROLE` must only be managed by itself.\\n     * - The `DEFAULT_ADMIN_ROLE` must only be held by one account at the time.\\n     * - Any `DEFAULT_ADMIN_ROLE` transfer must be in two delayed steps.\\n     */\\n    error AccessControlEnforcedDefaultAdminRules();\\n\\n    /**\\n     * @dev The delay for transferring the default admin delay is enforced and\\n     * the operation must wait until `schedule`.\\n     *\\n     * NOTE: `schedule` can be 0 indicating there's no transfer scheduled.\\n     */\\n    error AccessControlEnforcedDefaultAdminDelay(uint48 schedule);\\n\\n    /**\\n     * @dev Emitted when a {defaultAdmin} transfer is started, setting `newAdmin` as the next\\n     * address to become the {defaultAdmin} by calling {acceptDefaultAdminTransfer} only after `acceptSchedule`\\n     * passes.\\n     */\\n    event DefaultAdminTransferScheduled(address indexed newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdmin} is reset if it was never accepted, regardless of its schedule.\\n     */\\n    event DefaultAdminTransferCanceled();\\n\\n    /**\\n     * @dev Emitted when a {defaultAdminDelay} change is started, setting `newDelay` as the next\\n     * delay to be applied between default admin transfer after `effectSchedule` has passed.\\n     */\\n    event DefaultAdminDelayChangeScheduled(uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Emitted when a {pendingDefaultAdminDelay} is reset if its schedule didn't pass.\\n     */\\n    event DefaultAdminDelayChangeCanceled();\\n\\n    /**\\n     * @dev Returns the address of the current `DEFAULT_ADMIN_ROLE` holder.\\n     */\\n    function defaultAdmin() external view returns (address);\\n\\n    /**\\n     * @dev Returns a tuple of a `newAdmin` and an accept schedule.\\n     *\\n     * After the `schedule` passes, the `newAdmin` will be able to accept the {defaultAdmin} role\\n     * by calling {acceptDefaultAdminTransfer}, completing the role transfer.\\n     *\\n     * A zero value only in `acceptSchedule` indicates no pending admin transfer.\\n     *\\n     * NOTE: A zero address `newAdmin` means that {defaultAdmin} is being renounced.\\n     */\\n    function pendingDefaultAdmin() external view returns (address newAdmin, uint48 acceptSchedule);\\n\\n    /**\\n     * @dev Returns the delay required to schedule the acceptance of a {defaultAdmin} transfer started.\\n     *\\n     * This delay will be added to the current timestamp when calling {beginDefaultAdminTransfer} to set\\n     * the acceptance schedule.\\n     *\\n     * NOTE: If a delay change has been scheduled, it will take effect as soon as the schedule passes, making this\\n     * function returns the new delay. See {changeDefaultAdminDelay}.\\n     */\\n    function defaultAdminDelay() external view returns (uint48);\\n\\n    /**\\n     * @dev Returns a tuple of `newDelay` and an effect schedule.\\n     *\\n     * After the `schedule` passes, the `newDelay` will get into effect immediately for every\\n     * new {defaultAdmin} transfer started with {beginDefaultAdminTransfer}.\\n     *\\n     * A zero value only in `effectSchedule` indicates no pending delay change.\\n     *\\n     * NOTE: A zero value only for `newDelay` means that the next {defaultAdminDelay}\\n     * will be zero after the effect schedule.\\n     */\\n    function pendingDefaultAdminDelay() external view returns (uint48 newDelay, uint48 effectSchedule);\\n\\n    /**\\n     * @dev Starts a {defaultAdmin} transfer by setting a {pendingDefaultAdmin} scheduled for acceptance\\n     * after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminRoleChangeStarted event.\\n     */\\n    function beginDefaultAdminTransfer(address newAdmin) external;\\n\\n    /**\\n     * @dev Cancels a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * A {pendingDefaultAdmin} not yet accepted can also be cancelled with this function.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminTransferCanceled event.\\n     */\\n    function cancelDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Completes a {defaultAdmin} transfer previously started with {beginDefaultAdminTransfer}.\\n     *\\n     * After calling the function:\\n     *\\n     * - `DEFAULT_ADMIN_ROLE` should be granted to the caller.\\n     * - `DEFAULT_ADMIN_ROLE` should be revoked from the previous holder.\\n     * - {pendingDefaultAdmin} should be reset to zero values.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the {pendingDefaultAdmin}'s `newAdmin`.\\n     * - The {pendingDefaultAdmin}'s `acceptSchedule` should've passed.\\n     */\\n    function acceptDefaultAdminTransfer() external;\\n\\n    /**\\n     * @dev Initiates a {defaultAdminDelay} update by setting a {pendingDefaultAdminDelay} scheduled for getting\\n     * into effect after the current timestamp plus a {defaultAdminDelay}.\\n     *\\n     * This function guarantees that any call to {beginDefaultAdminTransfer} done between the timestamp this\\n     * method is called and the {pendingDefaultAdminDelay} effect schedule will use the current {defaultAdminDelay}\\n     * set before calling.\\n     *\\n     * The {pendingDefaultAdminDelay}'s effect schedule is defined in a way that waiting until the schedule and then\\n     * calling {beginDefaultAdminTransfer} with the new delay will take at least the same as another {defaultAdmin}\\n     * complete transfer (including acceptance).\\n     *\\n     * The schedule is designed for two scenarios:\\n     *\\n     * - When the delay is changed for a larger one the schedule is `block.timestamp + newDelay` capped by\\n     * {defaultAdminDelayIncreaseWait}.\\n     * - When the delay is changed for a shorter one, the schedule is `block.timestamp + (current delay - new delay)`.\\n     *\\n     * A {pendingDefaultAdminDelay} that never got into effect will be canceled in favor of a new scheduled change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * Emits a DefaultAdminDelayChangeScheduled event and may emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function changeDefaultAdminDelay(uint48 newDelay) external;\\n\\n    /**\\n     * @dev Cancels a scheduled {defaultAdminDelay} change.\\n     *\\n     * Requirements:\\n     *\\n     * - Only can be called by the current {defaultAdmin}.\\n     *\\n     * May emit a DefaultAdminDelayChangeCanceled event.\\n     */\\n    function rollbackDefaultAdminDelay() external;\\n\\n    /**\\n     * @dev Maximum time in seconds for an increase to {defaultAdminDelay} (that is scheduled using {changeDefaultAdminDelay})\\n     * to take effect. Default to 5 days.\\n     *\\n     * When the {defaultAdminDelay} is scheduled to be increased, it goes into effect after the new delay has passed with\\n     * the purpose of giving enough time for reverting any accidental change (i.e. using milliseconds instead of seconds)\\n     * that may lock the contract. However, to avoid excessive schedules, the wait is capped by this function and it can\\n     * be overrode for a custom {defaultAdminDelay} increase scheduling.\\n     *\\n     * IMPORTANT: Make sure to add a reasonable amount of time while overriding this value, otherwise,\\n     * there's a risk of setting a high new delay that goes into effect almost immediately without the\\n     * possibility of human intervention in the case of an input error (eg. set milliseconds instead of seconds).\\n     */\\n    function defaultAdminDelayIncreaseWait() external view returns (uint48);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\r\n      \"utils/=lib/utils/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\r\n      \"openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/\",\r\n      \"src/=src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"shanghai\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {\r\n      \"scripts/deployment/utils/DeploymentHelpers.sol\": {\r\n        \"DeploymentHelpers\": \"0x3ed0b258C176BB3414bd2D646b83d8E94092Ba83\"\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApprovalFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CBRIsNull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CBRIsTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"approvalDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intentDeadline\",\"type\":\"uint256\"}],\"name\":\"InvalidDeadline\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"InvalidSigner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOrdersIdsProvided\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NullContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemFeeTooBig\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemMustBePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemMustNotBePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapMustBePaused\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SwapMustNotBePaused\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cbrCoef\",\"type\":\"uint256\"}],\"name\":\"CBRActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"CBRDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSwapped\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInTokenDecimals\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"IntentMatched\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nonceInvalidated\",\"type\":\"uint256\"}],\"name\":\"NonceInvalidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rwaToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountRedeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"returnedRwaAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stableFeeAmount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemFee\",\"type\":\"uint256\"}],\"name\":\"RedeemFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RedeemPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"RedeemUnPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenSwapped\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInUSD\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SwapPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"SwapUnPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DaoCollateralStorageV0Location\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coefficient\",\"type\":\"uint256\"}],\"name\":\"activateCBR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cbrCoef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deactivateCBR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_redeemFee\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_registryContract\",\"type\":\"address\"}],\"name\":\"initializeV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"invalidateNonce\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCBROn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRedeemPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isSwapPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rwaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rwaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_redeemFee\",\"type\":\"uint256\"}],\"name\":\"setRedeemFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rwaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"}],\"name\":\"swap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rwaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"partialMatching\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"orderIdsToTake\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Approval\",\"name\":\"approval\",\"type\":\"tuple\"}],\"name\":\"swapRWAtoStbc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderIdsToTake\",\"type\":\"uint256[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct Approval\",\"name\":\"approval\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rwaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountInTokenDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"internalType\":\"bool\",\"name\":\"partialMatching\",\"type\":\"bool\"}],\"name\":\"swapRWAtoStbcIntent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rwaToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"swapWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseRedeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpauseSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DaoCollateral", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "shanghai", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}