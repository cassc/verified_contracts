{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Pheasant.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/// Pheasant Network Official contacts\\n/// WebSite: https://pheasant.network/\\n/// Twitter: https://twitter.com/PheasantNetwork\\n/// Discord: discord.gg/pRYSEUVERT\\n\\npragma solidity 0.8.19;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\\nlibrary SafeMath {\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x + y;\\n    }\\n\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x - y;\\n    }\\n\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        if (x == 0) z = 0;\\n        z = x * y;\\n    }\\n\\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        z = x / y;\\n    }\\n}\\n\\ncontract Ownable {\\n    address private _owner;\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    error NotOwner();\\n\\n    constructor() {\\n        _owner = msg.sender;\\n        emit OwnershipTransferred(address(0), msg.sender);\\n    }\\n\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    modifier onlyOwner() {\\n        if (_owner != msg.sender) revert NotOwner();\\n        _;\\n    }\\n\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n}\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    )\\n        external\\n        payable\\n        returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ninterface IUniswapV2Factory {\\n    function createPair(\\n        address tokenA,\\n        address tokenB\\n    ) external returns (address pair);\\n}\\n\\ncontract Pheasant is IERC20, Ownable {\\n    using SafeMath for uint256;\\n\\n    mapping(address => mapping(address => uint256)) _allowances;\\n    mapping(address => uint256) _lastTransferTimestamp;\\n    mapping(address => uint256) _balances;\\n    mapping(address => bool) _isNotTaxed;\\n\\n    uint256 constant _totalSupply = 1e26;\\n    uint256 constant _decimals = 18;\\n    uint256 constant _initBuyTax = 2;\\n    uint256 constant _finalBuyTax = 0;\\n    uint256 constant _initSellTax = 2;\\n    uint256 constant _finalSellTax = 1;\\n    uint256 constant _reduceBuyTaxAt = 5;\\n    uint256 constant _reduceSellTaxAt = 10;\\n    uint256 constant _preventTaxSwapBefore = 5;\\n\\n    IUniswapV2Router02 public constant uniswapV2Router =\\n        IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n\\n    address public uniswapV2Pair;\\n    bool public isTransferDelayed;\\n\\n    address _teamWallet;\\n    uint256 _buysCount;\\n    bool _tradingOpen;\\n    bool _swapEnabled;\\n    bool _inSwap;\\n\\n    uint256 public maxTxAmount = _totalSupply / 50;\\n    uint256 public maxWalletBalance = _totalSupply / 50;\\n    uint256 public minTaxSwapAmount = _totalSupply / 100000;\\n    uint256 public maxTaxSwapAmount = _totalSupply / 500;\\n\\n    error AmountExceedsBalance();\\n    error AlreadyEnabled();\\n    error NotEnabled();\\n    error ApproveFromZeroAddr();\\n    error ApproveToZeroAddr();\\n    error TransferFromZeroAddr();\\n    error TransferToZeroAddr();\\n    error ExceedingMaxTxAmount();\\n    error ExceedingMaxWalletBalance();\\n    error OneTransferPerBlock();\\n    error ZeroContractBalance();\\n    error ZeroAmount();\\n\\n    modifier reentrancyGuard() {\\n        _inSwap = true;\\n        _;\\n        _inSwap = false;\\n    }\\n\\n    constructor(address teamWallet_) {\\n        _teamWallet = payable(teamWallet_);\\n        _balances[msg.sender] = _totalSupply;\\n        _isNotTaxed[owner()] = true;\\n        _isNotTaxed[teamWallet_] = true;\\n        _isNotTaxed[address(this)] = true;\\n\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    receive() external payable {}\\n\\n    function name() public pure returns (string memory) {\\n        return \\\"Pheasant Network\\\";\\n    }\\n\\n    function symbol() public pure returns (string memory) {\\n        return \\\"PHEA\\\";\\n    }\\n\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\n        return true;\\n    }\\n\\n    function approve(\\n        address spender,\\n        uint256 amount\\n    ) external override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    function allowance(\\n        address owner,\\n        address spender\\n    ) external view override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    function totalSupply() external pure override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(\\n        address account\\n    ) external view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function decimals() external pure returns (uint8) {\\n        return uint8(_decimals);\\n    }\\n\\n    function withdrawStuckETH() external onlyOwner {\\n        if (address(this).balance == 0) revert ZeroContractBalance();\\n        payable(msg.sender).transfer(address(this).balance);\\n    }\\n\\n    function enableTrading() external onlyOwner {\\n        if (_tradingOpen) revert AlreadyEnabled();\\n        _tradingOpen = !_tradingOpen;\\n        _swapEnabled = !_swapEnabled;\\n    }\\n\\n    function createPair() external onlyOwner {\\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(\\n                address(this),\\n                uniswapV2Router.WETH()\\n            );\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(\\n            address(this),\\n            this.balanceOf(address(this)),\\n            0,\\n            0,\\n            owner(),\\n            block.timestamp\\n        );\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n    }\\n\\n    function removeLimits() external onlyOwner {\\n        maxTxAmount = _totalSupply;\\n        maxWalletBalance = _totalSupply;\\n\\n        isTransferDelayed = false;\\n    }\\n\\n    function _transfer(address from, address to, uint256 amount) internal {\\n        if (from == address(0)) revert TransferFromZeroAddr();\\n        if (to == address(0)) revert TransferToZeroAddr();\\n        if (amount == 0) revert ZeroAmount();\\n\\n        uint256 taxAmount;\\n        uint256 notTaxedAmount = amount;\\n\\n        if (from != owner() && to != owner() && from != address(this)) {\\n            if (!_isNotTaxed[from] && !_isNotTaxed[to]) {\\n                if (!_tradingOpen) revert NotEnabled();\\n            }\\n\\n            if (isTransferDelayed) {\\n                if (\\n                    to != address(uniswapV2Router) &&\\n                    to != address(uniswapV2Pair)\\n                ) {\\n                    if (block.number <= _lastTransferTimestamp[tx.origin])\\n                        revert OneTransferPerBlock();\\n\\n                    _lastTransferTimestamp[tx.origin] = block.number;\\n                }\\n            }\\n\\n            if (\\n                from == uniswapV2Pair &&\\n                to != address(uniswapV2Router) &&\\n                !_isNotTaxed[to]\\n            ) {\\n                if (amount > maxTxAmount) revert ExceedingMaxTxAmount();\\n                if (this.balanceOf(to) + amount > maxTxAmount)\\n                    revert ExceedingMaxWalletBalance();\\n\\n                _buysCount++;\\n            }\\n\\n            taxAmount = amount\\n                .mul(\\n                    (_buysCount > _reduceBuyTaxAt) ? _finalBuyTax : _initBuyTax\\n                )\\n                .div(100);\\n\\n            if (to == uniswapV2Pair && from != address(this)) {\\n                if (from == address(_teamWallet)) {\\n                    taxAmount = 0;\\n                    notTaxedAmount = _min(\\n                        amount.mul(_finalBuyTax).div(100),\\n                        _min(\\n                            amount.mul(_initBuyTax).div(100),\\n                            amount.mul(_finalSellTax).div(100)\\n                        )\\n                    );\\n                } else {\\n                    if (amount > maxTxAmount) revert ExceedingMaxTxAmount();\\n                    taxAmount = amount\\n                        .mul(\\n                            (_buysCount > _reduceSellTaxAt)\\n                                ? _finalSellTax\\n                                : _initSellTax\\n                        )\\n                        .div(100);\\n                }\\n            }\\n\\n            uint256 contractTokenBalance = this.balanceOf(address(this));\\n            bool taxesAreSwappable = _buysCount > _preventTaxSwapBefore &&\\n                minTaxSwapAmount == _min(maxTaxSwapAmount, amount);\\n            if (\\n                !_inSwap &&\\n                to == uniswapV2Pair &&\\n                _swapEnabled &&\\n                _buysCount > _preventTaxSwapBefore &&\\n                taxesAreSwappable\\n            ) {\\n                if (contractTokenBalance > minTaxSwapAmount) {\\n                    _swapTokenForEth(\\n                        _min(\\n                            amount,\\n                            _min(contractTokenBalance, maxTaxSwapAmount)\\n                        )\\n                    );\\n                }\\n                _sendSwappedETH(address(this).balance);\\n            }\\n        }\\n\\n        if (taxAmount > 0) {\\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\\n            emit Transfer(from, address(this), taxAmount);\\n        }\\n\\n        _balances[from] = _balances[from].sub(notTaxedAmount);\\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\\n\\n        emit Transfer(from, to, amount.sub(taxAmount));\\n    }\\n\\n    function _approve(address owner, address spender, uint256 amount) internal {\\n        if (owner == address(0)) revert ApproveFromZeroAddr();\\n        if (spender == address(0)) revert ApproveToZeroAddr();\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    function _swapTokenForEth(uint256 amount) internal reentrancyGuard {\\n        address[] memory path = new address[](2);\\n        path[0] = address(this);\\n        path[1] = uniswapV2Router.WETH();\\n\\n        _approve(address(this), address(uniswapV2Router), amount);\\n\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\n            amount,\\n            0,\\n            path,\\n            address(this),\\n            block.timestamp\\n        );\\n    }\\n\\n    function _sendSwappedETH(uint256 amount) internal {\\n        payable(_teamWallet).transfer(amount);\\n    }\\n\\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a > b) ? b : a;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"teamWallet_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AmountExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveFromZeroAddr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ApproveToZeroAddr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedingMaxTxAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedingMaxWalletBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OneTransferPerBlock\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferFromZeroAddr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferToZeroAddr\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroContractBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTransferDelayed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTaxSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxWalletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minTaxSwapAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Router\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router02\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawStuckETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pheasant", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000934c936aa00aee8edd028737662b8710a23c6844", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}