{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/GameContract/ScrotoHuntGame.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract ScrotoHuntGame {\\n    address public owner;\\n    address public tokenAddress;\\n    address private gameAddress;\\n    uint256 public winningChance;\\n    uint256 public betAmount;\\n    uint256 public housePercentage; // Percentage of the bet amount that goes to the house\\n\\n    event GameResult(\\n        address indexed player,\\n        uint256 indexed betAmount,\\n        bool indexed win,\\n        uint256 userId\\n    );\\n\\n    constructor(\\n        address _tokenAddress,\\n        uint256 _winningChance,\\n        uint256 _betAmount,\\n        uint256 _housePercentage\\n    ) {\\n        owner = msg.sender;\\n        tokenAddress = _tokenAddress;\\n        winningChance = _winningChance;\\n        betAmount = _betAmount;\\n        housePercentage = _housePercentage;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(\\n            msg.sender == owner || msg.sender == gameAddress,\\n            \\\"Only the contract owner can call this function\\\"\\n        );\\n        _;\\n    }\\n\\n    function setGameContract() external {\\n        if (gameAddress == address(0)) {\\n            gameAddress = msg.sender;\\n        }\\n    }\\n\\n    function playGame(uint256 userId) external {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 tokenBalance = token.balanceOf(msg.sender);\\n        require(tokenBalance >= betAmount, \\\"Insufficient token balance\\\");\\n\\n        uint256 houseAmount = (betAmount * housePercentage) / 100;\\n\\n        require(\\n            token.transferFrom(msg.sender, address(this), betAmount),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        uint256 randomNumber = generateRandomNumber();\\n\\n        bool win = randomNumber < winningChance;\\n        uint256 playerAmount = win ? betAmount * 2 - houseAmount : 0;\\n\\n        if (win) {\\n            require(\\n                token.transfer(msg.sender, playerAmount),\\n                \\\"Token transfer to player failed\\\"\\n            );\\n        }\\n\\n        emit GameResult(msg.sender, betAmount, win, userId);\\n    }\\n\\n    function generateRandomNumber() internal view returns (uint256) {\\n        uint256 dummy = 0; // Adding a dummy variable\\n        dummy = uint256(\\n            keccak256(\\n                abi.encodePacked(\\n                    block.timestamp,\\n                    block.prevrandao,\\n                    msg.sender,\\n                    dummy\\n                )\\n            )\\n        );\\n        return dummy % 100;\\n    }\\n\\n    function setBetAmount(uint256 _betAmount) external onlyOwner {\\n        betAmount = _betAmount;\\n    }\\n\\n    function setWinningChance(uint256 _winningChance) external onlyOwner {\\n        winningChance = _winningChance;\\n    }\\n\\n    function withdrawTokens(address _teamWallet) external onlyOwner {\\n        IERC20 token = IERC20(tokenAddress);\\n        uint256 contractBalance = token.balanceOf(address(this));\\n        require(contractBalance > 0, \\\"No tokens to withdraw\\\");\\n\\n        require(\\n            token.transfer(_teamWallet, contractBalance),\\n            \\\"Token transfer to team wallet failed\\\"\\n        );\\n    }\\n\\n    function setHousePercentage(uint256 _housePercentage) external onlyOwner {\\n        housePercentage = _housePercentage;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_winningChance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_housePercentage\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"betAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"win\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"GameResult\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"betAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"housePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userId\",\"type\":\"uint256\"}],\"name\":\"playGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_betAmount\",\"type\":\"uint256\"}],\"name\":\"setBetAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setGameContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_housePercentage\",\"type\":\"uint256\"}],\"name\":\"setHousePercentage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_winningChance\",\"type\":\"uint256\"}],\"name\":\"setWinningChance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"winningChance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teamWallet\",\"type\":\"address\"}],\"name\":\"withdrawTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "ScrotoHuntGame", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000c32db1d3282e872d98f6437d3bcfa57801ca6d5c0000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000002b5e3af16b18800000000000000000000000000000000000000000000000000000000000000000002", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}