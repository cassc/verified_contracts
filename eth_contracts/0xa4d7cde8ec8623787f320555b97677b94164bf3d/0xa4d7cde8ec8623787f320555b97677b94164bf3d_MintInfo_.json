{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/libs/MintInfo_.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\n// mapping: NFT tokenId => MintInfo_.sol (used in tokenURI generation)\\n// MintInfo_.sol encoded as:\\n//      term (uint16)\\n//      | maturityTs (uint64)\\n//      | rank (uint128)\\n//      | amp (uint16)\\n//      | eaa (uint16)\\n//      | class (uint8):\\n//          [7] isApex\\n//          [6] isLimited\\n//          [0-5] powerGroupIdx\\n//      | redeemed (uint8)\\nlibrary MintInfo_ {\\n    /**\\n        @dev helper to convert Bool to U256 type and make compiler happy\\n     */\\n    function toU256(bool x) internal pure returns (uint256 r) {\\n        assembly {\\n            r := x\\n        }\\n    }\\n\\n    /**\\n        @dev encodes MintInfo_.sol record from its props\\n     */\\n    function encodeMintInfo(\\n        uint256 term,\\n        uint256 maturityTs,\\n        uint256 rank,\\n        uint256 amp,\\n        uint256 eaa,\\n        uint256 class_,\\n        bool redeemed\\n    ) public pure returns (uint256 info) {\\n        info = info | (toU256(redeemed) & 0xFF);\\n        info = info | ((class_ & 0xFF) << 8);\\n        info = info | ((eaa & 0xFFFF) << 16);\\n        info = info | ((amp & 0xFFFF) << 32);\\n        info = info | ((rank & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) << 48);\\n        info = info | ((maturityTs & 0xFFFFFFFFFFFFFFFF) << 176);\\n        info = info | ((term & 0xFFFF) << 240);\\n    }\\n\\n    /**\\n        @dev decodes MintInfo_.sol record and extracts all of its props\\n     */\\n    function decodeMintInfo(uint256 info)\\n        public\\n        pure\\n        returns (\\n            uint256 term,\\n            uint256 maturityTs,\\n            uint256 rank,\\n            uint256 amp,\\n            uint256 eaa,\\n            uint256 class,\\n            bool apex,\\n            bool limited,\\n            bool redeemed\\n        )\\n    {\\n        term = uint16(info >> 240);\\n        maturityTs = uint64(info >> 176);\\n        rank = uint128(info >> 48);\\n        amp = uint16(info >> 32);\\n        eaa = uint16(info >> 16);\\n        class = uint8(info >> 8) & 0x3F;\\n        apex = (uint8(info >> 8) & 0x80) > 0;\\n        limited = (uint8(info >> 8) & 0x40) > 0;\\n        redeemed = uint8(info) == 1;\\n    }\\n\\n    /**\\n        @dev extracts `term` prop from encoded MintInfo_.sol\\n     */\\n    function getTerm(uint256 info) public pure returns (uint256 term) {\\n        (term, , , , , , , , ) = decodeMintInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `maturityTs` prop from encoded MintInfo_.sol\\n     */\\n    function getMaturityTs(uint256 info) public pure returns (uint256 maturityTs) {\\n        (, maturityTs, , , , , , , ) = decodeMintInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `rank` prop from encoded MintInfo_.sol\\n     */\\n    function getRank(uint256 info) public pure returns (uint256 rank) {\\n        (, , rank, , , , , , ) = decodeMintInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `AMP` prop from encoded MintInfo_.sol\\n     */\\n    function getAMP(uint256 info) public pure returns (uint256 amp) {\\n        (, , , amp, , , , , ) = decodeMintInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `EAA` prop from encoded MintInfo_.sol\\n     */\\n    function getEAA(uint256 info) public pure returns (uint256 eaa) {\\n        (, , , , eaa, , , , ) = decodeMintInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `redeemed` prop from encoded MintInfo_.sol\\n     */\\n    function getClass(uint256 info)\\n        public\\n        pure\\n        returns (\\n            uint256 class_,\\n            bool apex,\\n            bool limited\\n        )\\n    {\\n        (, , , , , class_, apex, limited, ) = decodeMintInfo(info);\\n    }\\n\\n    /**\\n        @dev extracts `redeemed` prop from encoded MintInfo_.sol\\n     */\\n    function getRedeemed(uint256 info) public pure returns (bool redeemed) {\\n        (, , , , , , , , redeemed) = decodeMintInfo(info);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 20\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"decodeMintInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eaa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"class\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"apex\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limited\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"redeemed\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eaa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"class_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"redeemed\",\"type\":\"bool\"}],\"name\":\"encodeMintInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getAMP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getClass\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"class_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"apex\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"limited\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getEAA\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"eaa\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getMaturityTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maturityTs\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getRank\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rank\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getRedeemed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"redeemed\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"info\",\"type\":\"uint256\"}],\"name\":\"getTerm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"term\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "MintInfo_", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "20", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}