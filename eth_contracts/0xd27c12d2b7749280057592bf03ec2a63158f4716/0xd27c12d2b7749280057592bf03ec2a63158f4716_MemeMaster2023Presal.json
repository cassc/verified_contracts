{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/MMPRESALE.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.8.19 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\ncontract MemeMaster2023Presale is ReentrancyGuard, Ownable {\\n  uint256 public presaleId;\\n  uint256 public BASE_MULTIPLIER;\\n\\n  struct Presale {\\n    address saleToken;\\n    uint256 startTime;\\n    uint256 endTime;\\n    uint256 price;\\n    uint256 tokensToSell;\\n    uint256 baseDecimals;\\n    uint256 inSale;\\n    uint256 vestingStartTime;\\n    uint256 vestingCliff;\\n    uint256 enableBuyWithEth;\\n    uint256 enableBuyWithUsdt;\\n    address payout;\\n  }\\n\\n  struct Vesting {\\n    uint256 totalAmount;\\n    uint256 claimedAmount;\\n    uint256 claimStart;\\n  }\\n\\n  IERC20 public USDTInterface;\\n  AggregatorV3Interface internal aggregatorInterface; // https://docs.chain.link/docs/ethereum-addresses/ => (ETH / USD)\\n\\n  mapping(uint256 => bool) public paused;\\n  mapping(uint256 => Presale) public presale;\\n  mapping(address => mapping(uint256 => Vesting)) public userVesting;\\n\\n  event PresaleCreated(\\n    uint256 indexed _id,\\n    uint256 _totalTokens,\\n    uint256 _startTime,\\n    uint256 _endTime,\\n    uint256 enableBuyWithEth,\\n    uint256 enableBuyWithUsdt,\\n    address _payout\\n  );\\n\\n  event PresaleUpdated(bytes32 indexed key, uint256 prevValue, uint256 newValue, uint256 timestamp);\\n\\n  event TokensBought(\\n    address indexed user,\\n    uint256 indexed id,\\n    address indexed purchaseToken,\\n    uint256 tokensBought,\\n    uint256 amountPaid,\\n    uint256 timestamp\\n  );\\n\\n  event TokensClaimed(address indexed user, uint256 indexed id, uint256 amount, uint256 timestamp);\\n\\n  event PresaleTokenAddressUpdated(address indexed prevValue, address indexed newValue, uint256 timestamp);\\n\\n  event PresalePayoutAddressUpdated(address indexed prevValue, address indexed newValue, uint256 timestamp);\\n\\n  event PresalePaused(uint256 indexed id, uint256 timestamp);\\n  event PresaleUnpaused(uint256 indexed id, uint256 timestamp);\\n\\n  /**\\n   * @dev Initializes the contract and sets key parameters\\n   * @param _oracle Oracle contract to fetch ETH/USDT price\\n   * @param _usdt USDT token contract address\\n   */\\n  constructor(address _oracle, address _usdt) {\\n    require(_oracle != address(0), \\\"Zero aggregator address\\\");\\n    require(_usdt != address(0), \\\"Zero USDT address\\\");\\n\\n    aggregatorInterface = AggregatorV3Interface(_oracle);\\n    USDTInterface = IERC20(_usdt);\\n    BASE_MULTIPLIER = (10**18);\\n  }\\n\\n  /**\\n   * @dev Creates a new presale\\n   * @param _startTime start time of the sale\\n   * @param _endTime end time of the sale\\n   * @param _price Per token price multiplied by (10**18)\\n   * @param _tokensToSell No of tokens to sell without denomination. If 1 million tokens to be sold then - 1_000_000 has to be passed\\n   * @param _baseDecimals No of decimals for the token. (10**18), for 18 decimal token\\n   * @param _vestingStartTime Start time for the vesting - UNIX timestamp\\n   * @param _vestingCliff Cliff period for vesting in seconds\\n   * @param _enableBuyWithEth Enable/Disable buy of tokens with ETH\\n   * @param _enableBuyWithUsdt Enable/Disable buy of tokens with USDT\\n   * @param _payout Ethereum address where presale contributions will be moved\\n   */\\n  function createPresale(\\n    uint256 _startTime,\\n    uint256 _endTime,\\n    uint256 _price,\\n    uint256 _tokensToSell,\\n    uint256 _baseDecimals,\\n    uint256 _vestingStartTime,\\n    uint256 _vestingCliff,\\n    uint256 _enableBuyWithEth,\\n    uint256 _enableBuyWithUsdt,\\n    address _payout\\n  ) external onlyOwner {\\n    require(_startTime > block.timestamp && _endTime > _startTime, \\\"Invalid time\\\");\\n    require(_price > 0, \\\"Zero price\\\");\\n    require(_tokensToSell > 0, \\\"Zero tokens to sell\\\");\\n    require(_baseDecimals > 0, \\\"Zero decimals for the token\\\");\\n    require(_vestingStartTime >= _endTime, \\\"Vesting starts before Presale ends\\\");\\n\\n    presaleId++;\\n\\n    presale[presaleId] = Presale(\\n      address(0),\\n      _startTime,\\n      _endTime,\\n      _price,\\n      _tokensToSell,\\n      _baseDecimals,\\n      _tokensToSell,\\n      _vestingStartTime,\\n      _vestingCliff,\\n      _enableBuyWithEth,\\n      _enableBuyWithUsdt,\\n      _payout\\n    );\\n\\n    emit PresaleCreated(presaleId, _tokensToSell, _startTime, _endTime, _enableBuyWithEth, _enableBuyWithUsdt, _payout);\\n  }\\n\\n  /**\\n   * @dev To update the oracle address address\\n   * @param _newAddress oracle address\\n   */\\n\\n  function changeOracleAddress(address _newAddress) external onlyOwner {\\n    require(_newAddress != address(0), \\\"Zero token address\\\");\\n    aggregatorInterface = AggregatorV3Interface(_newAddress);\\n  }\\n\\n\\n  /**\\n   * @dev To update the usdt token address\\n   * @param _newAddress Sale token address\\n   */\\n  function changeUsdtAddress(address _newAddress) external onlyOwner {\\n    require(_newAddress != address(0), \\\"Zero token address\\\");\\n    USDTInterface = IERC20(_newAddress);\\n  }\\n\\n  /**\\n   * @dev To update the sale times before presale starts\\n   * @param _id Presale id to update\\n   * @param _startTime New start time\\n   * @param _endTime New end time\\n   */\\n  function changeSaleTimes(\\n    uint256 _id,\\n    uint256 _startTime,\\n    uint256 _endTime\\n  ) external checkPresaleId(_id) onlyOwner {\\n    require(_startTime > 0 || _endTime > 0, \\\"Invalid parameters\\\");\\n    if (_startTime > 0) {\\n      require(block.timestamp < presale[_id].startTime, \\\"Sale already started\\\");\\n      require(block.timestamp < _startTime, \\\"Sale time in past\\\");\\n      uint256 prevValue = presale[_id].startTime;\\n      presale[_id].startTime = _startTime;\\n      emit PresaleUpdated(bytes32(\\\"START\\\"), prevValue, _startTime, block.timestamp);\\n    }\\n\\n    if (_endTime > 0) {\\n      require(block.timestamp < _endTime, \\\"End time in the past\\\");\\n      require(_endTime > presale[_id].startTime, \\\"Invalid endTime\\\");\\n      uint256 prevValue = presale[_id].endTime;\\n      presale[_id].endTime = _endTime;\\n      emit PresaleUpdated(bytes32(\\\"END\\\"), prevValue, _endTime, block.timestamp);\\n    }\\n  }\\n\\n\\n  /**\\n   * @dev To update the end time of presale after it starts\\n   * @param _id Presale id to update\\n   * @param _newEndTime New end time\\n   */\\n  function changePresaleEndtime(\\n    uint256 _id,\\n    uint256 _newEndTime\\n  ) external checkPresaleId(_id) onlyOwner {\\n\\n    if (_newEndTime > 0) {\\n      require(block.timestamp < _newEndTime, \\\"End time in the past\\\");\\n      require(_newEndTime > presale[_id].startTime, \\\"Invalid endTime\\\");\\n      uint256 prevValue = presale[_id].endTime;\\n      presale[_id].endTime = _newEndTime;\\n      emit PresaleUpdated(bytes32(\\\"END\\\"), prevValue, _newEndTime, block.timestamp);\\n    }\\n  }\\n\\n  /**\\n   * @dev To update the vesting start time\\n   * @param _id Presale id to update\\n   * @param _vestingStartTime New vesting start time\\n   */\\n  function changeVestingStartTime(uint256 _id, uint256 _vestingStartTime) external checkPresaleId(_id) onlyOwner {\\n    require(_vestingStartTime >= presale[_id].endTime, \\\"Vesting starts before Presale ends\\\");\\n    uint256 prevValue = presale[_id].vestingStartTime;\\n    presale[_id].vestingStartTime = _vestingStartTime;\\n    emit PresaleUpdated(bytes32(\\\"VESTING_START_TIME\\\"), prevValue, _vestingStartTime, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev To update the sale token address\\n   * @param _id Presale id to update\\n   * @param _newAddress Sale token address\\n   */\\n  function changeSaleTokenAddress(uint256 _id, address _newAddress) external checkPresaleId(_id) onlyOwner {\\n    require(_newAddress != address(0), \\\"Zero token address\\\");\\n    address prevValue = presale[_id].saleToken;\\n    presale[_id].saleToken = _newAddress;\\n    emit PresaleTokenAddressUpdated(prevValue, _newAddress, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev To update the payout address\\n   * @param _id Presale id to update\\n   * @param _newAddress payout address\\n   */\\n  function changePayoutAddress(uint256 _id, address _newAddress) external checkPresaleId(_id) onlyOwner {\\n    require(_newAddress != address(0), \\\"Zero token address\\\");\\n    address prevValue = presale[_id].payout;\\n    presale[_id].payout = _newAddress;\\n    emit PresalePayoutAddressUpdated(prevValue, _newAddress, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev To update the price\\n   * @param _id Presale id to update\\n   * @param _newPrice New sale price of the token\\n   */\\n  function changePrice(uint256 _id, uint256 _newPrice) external checkPresaleId(_id) onlyOwner {\\n    require(_newPrice > 0, \\\"Zero price\\\");\\n    require(presale[_id].startTime > block.timestamp, \\\"Sale already started\\\");\\n    uint256 prevValue = presale[_id].price;\\n    presale[_id].price = _newPrice;\\n    emit PresaleUpdated(bytes32(\\\"PRICE\\\"), prevValue, _newPrice, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev To update possibility to buy with ETH\\n   * @param _id Presale id to update\\n   * @param _enableToBuyWithEth New value of enable to buy with ETH\\n   */\\n  function changeEnableBuyWithEth(uint256 _id, uint256 _enableToBuyWithEth) external checkPresaleId(_id) onlyOwner {\\n    uint256 prevValue = presale[_id].enableBuyWithEth;\\n    presale[_id].enableBuyWithEth = _enableToBuyWithEth;\\n    emit PresaleUpdated(bytes32(\\\"ENABLE_BUY_WITH_ETH\\\"), prevValue, _enableToBuyWithEth, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev To update possibility to buy with Usdt\\n   * @param _id Presale id to update\\n   * @param _enableToBuyWithUsdt New value of enable to buy with Usdt\\n   */\\n  function changeEnableBuyWithUsdt(uint256 _id, uint256 _enableToBuyWithUsdt) external checkPresaleId(_id) onlyOwner {\\n    uint256 prevValue = presale[_id].enableBuyWithUsdt;\\n    presale[_id].enableBuyWithUsdt = _enableToBuyWithUsdt;\\n    emit PresaleUpdated(bytes32(\\\"ENABLE_BUY_WITH_USDT\\\"), prevValue, _enableToBuyWithUsdt, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev To pause the presale\\n   * @param _id Presale id to update\\n   */\\n  function pausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\\n    require(!paused[_id], \\\"Already paused\\\");\\n    paused[_id] = true;\\n    emit PresalePaused(_id, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev To unpause the presale\\n   * @param _id Presale id to update\\n   */\\n  function unPausePresale(uint256 _id) external checkPresaleId(_id) onlyOwner {\\n    require(paused[_id], \\\"Not paused\\\");\\n    paused[_id] = false;\\n    emit PresaleUnpaused(_id, block.timestamp);\\n  }\\n\\n  /**\\n   * @dev To get latest ethereum price in 10**18 format\\n   */\\n  function getLatestPrice() public view returns (uint256) {\\n    (, int256 price, , , ) = aggregatorInterface.latestRoundData();\\n    price = (price * (10**10));\\n    return uint256(price);\\n  }\\n\\n  modifier checkPresaleId(uint256 _id) {\\n    require(_id > 0 && _id <= presaleId, \\\"Invalid presale id\\\");\\n    _;\\n  }\\n\\n  modifier checkSaleState(uint256 _id, uint256 amount) {\\n    require(block.timestamp >= presale[_id].startTime && block.timestamp <= presale[_id].endTime, \\\"Invalid time for buying\\\");\\n    require(amount > 0 && amount <= presale[_id].inSale, \\\"Invalid sale amount\\\");\\n    _;\\n  }\\n\\n  /**\\n   * @dev To buy into a presale using USDT\\n   * @param _id Presale id\\n   * @param amount No of tokens to buy\\n   */\\n  function buyWithUSDT(uint256 _id, uint256 amount) external checkPresaleId(_id) checkSaleState(_id, amount) returns (bool) {\\n    require(!paused[_id], \\\"Presale paused\\\");\\n    require(presale[_id].enableBuyWithUsdt > 0, \\\"Not allowed to buy with USDT\\\");\\n    uint256 usdPrice = amount * presale[_id].price;\\n    usdPrice = usdPrice / (10**12);\\n    presale[_id].inSale -= amount;\\n\\n    Presale memory _presale = presale[_id];\\n\\n    if (userVesting[_msgSender()][_id].totalAmount > 0) {\\n      userVesting[_msgSender()][_id].totalAmount += (amount * _presale.baseDecimals);\\n    } else {\\n      userVesting[_msgSender()][_id] = Vesting((amount * _presale.baseDecimals), 0, _presale.vestingStartTime + _presale.vestingCliff);\\n    }\\n\\n    uint256 ourAllowance = USDTInterface.allowance(_msgSender(), address(this));\\n    require(usdPrice <= ourAllowance, \\\"Make sure to add enough allowance\\\");\\n    (bool success, ) = address(USDTInterface).call(\\n      abi.encodeWithSignature(\\\"transferFrom(address,address,uint256)\\\", _msgSender(), _presale.payout, usdPrice)\\n    );\\n    require(success, \\\"Token payment failed\\\");\\n    emit TokensBought(_msgSender(), _id, address(USDTInterface), amount, usdPrice, block.timestamp);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev To buy into a presale using ETH\\n   * @param _id Presale id\\n   * @param amount No of tokens to buy\\n   */\\n  function buyWithEth(uint256 _id, uint256 amount) external payable checkPresaleId(_id) checkSaleState(_id, amount) nonReentrant returns (bool) {\\n    require(!paused[_id], \\\"Presale paused\\\");\\n    require(presale[_id].enableBuyWithEth > 0, \\\"Not allowed to buy with ETH\\\");\\n    uint256 usdPrice = amount * presale[_id].price;\\n    uint256 ethAmount = (usdPrice * BASE_MULTIPLIER) / getLatestPrice();\\n    require(msg.value >= ethAmount, \\\"Less payment\\\");\\n    uint256 excess = msg.value - ethAmount;\\n    presale[_id].inSale -= amount;\\n    Presale memory _presale = presale[_id];\\n\\n    if (userVesting[_msgSender()][_id].totalAmount > 0) {\\n      userVesting[_msgSender()][_id].totalAmount += (amount * _presale.baseDecimals);\\n    } else {\\n      userVesting[_msgSender()][_id] = Vesting((amount * _presale.baseDecimals), 0, _presale.vestingStartTime + _presale.vestingCliff);\\n    }\\n    sendValue(payable(_presale.payout), ethAmount);\\n    if (excess > 0) sendValue(payable(_msgSender()), excess);\\n    emit TokensBought(_msgSender(), _id, address(0), amount, ethAmount, block.timestamp);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Helper funtion to get ETH price for given amount\\n   * @param _id Presale id\\n   * @param amount No of tokens to buy\\n   */\\n  function ethBuyHelper(uint256 _id, uint256 amount) external view checkPresaleId(_id) returns (uint256 ethAmount) {\\n    uint256 usdPrice = amount * presale[_id].price;\\n    ethAmount = (usdPrice * BASE_MULTIPLIER) / getLatestPrice();\\n  }\\n\\n  /**\\n   * @dev Helper funtion to get USDT price for given amount\\n   * @param _id Presale id\\n   * @param amount No of tokens to buy\\n   */\\n  function usdtBuyHelper(uint256 _id, uint256 amount) external view checkPresaleId(_id) returns (uint256 usdPrice) {\\n    usdPrice = amount * presale[_id].price;\\n    usdPrice = usdPrice / (10**12);\\n  }\\n\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Low balance\\\");\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"ETH Payment failed\\\");\\n  }\\n\\n  /**\\n   * @dev To get total tokens user can claim for a given presale based on their contributions.\\n   * @param user User address\\n   * @param _id Presale id\\n   */\\n  function tokenRewards(address user, uint256 _id) public view checkPresaleId(_id) returns (uint256) {\\n    Vesting memory _user = userVesting[user][_id];\\n    uint256 amount = _user.totalAmount - _user.claimedAmount;\\n\\n    return amount / presale[_id].baseDecimals;\\n  }\\n\\n  /**\\n   * @dev Helper funtion to get claimable tokens for a given presale after vesting period when presale claiming for claimning has started.\\n   * @param user User address\\n   * @param _id Presale id\\n   */\\n  function claimableAmount(address user, uint256 _id) public view checkPresaleId(_id) returns (uint256) {\\n    Vesting memory _user = userVesting[user][_id];\\n    require(_user.totalAmount > 0, \\\"Nothing to claim\\\");\\n    uint256 amount = _user.totalAmount - _user.claimedAmount;\\n    require(amount > 0, \\\"Already claimed\\\");\\n\\n    if (block.timestamp < _user.claimStart) return 0;\\n\\n    uint256 amountToClaim = amount * (10 ** presale[_id].baseDecimals);\\n\\n    return amountToClaim / presale[_id].baseDecimals;\\n  }\\n\\n  /**\\n   * @dev To claim tokens after vesting cliff from a presale\\n   * @param user User address\\n   * @param _id Presale id\\n   */\\n  function claim(address user, uint256 _id) public returns (bool) {\\n    uint256 amount = claimableAmount(user, _id);\\n    require(amount > 0, \\\"Zero claim amount\\\");\\n    require(presale[_id].saleToken != address(0), \\\"Presale token address not set\\\");\\n    require(amount <= IERC20(presale[_id].saleToken).balanceOf(address(this)), \\\"Not enough tokens in the contract\\\");\\n\\n    uint256 claimedAmount = (amount * presale[_id].baseDecimals) / (10 ** presale[_id].baseDecimals);\\n\\n    userVesting[user][_id].claimedAmount += claimedAmount;\\n    bool status = IERC20(presale[_id].saleToken).transfer(user, amount);\\n    require(status, \\\"Token transfer failed\\\");\\n    emit TokensClaimed(user, _id, amount, block.timestamp);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev To claim tokens after vesting cliff from a presale\\n   * @param users Array of user addresses\\n   * @param _id Presale id\\n   */\\n  function claimMultipleAccounts(address[] calldata users, uint256 _id) external returns (bool) {\\n    require(users.length > 0, \\\"Zero users length\\\");\\n    for (uint256 i; i < users.length; i++) {\\n      require(claim(users[i], _id), \\\"Claim failed\\\");\\n    }\\n    return true;\\n  }\\n\\n\\n  /**\\n   * @dev To claim tokens after vesting cliff from multiple presales\\n   * @param _ids Array of presale ids\\n   * @param _user Address of user\\n   */\\n  function claimMultipleStages(uint256[] calldata _ids, address _user) external returns (bool) {\\n    require(_ids.length > 0, \\\"Zero users length\\\");\\n    for (uint256 i; i < _ids.length; i++) {\\n      require(claim(_user, _ids[i]), \\\"Claim failed\\\");\\n    }\\n    return true;\\n  }\\n\\n  //Use this in case Coins are sent to the contract by mistake\\n  function rescueETH(uint256 weiAmount) external onlyOwner {\\n    require(address(this).balance >= weiAmount, \\\"insufficient Token balance\\\");\\n    payable(msg.sender).transfer(weiAmount);\\n  }\\n\\n  function rescueAnyERC20Tokens(\\n    address _tokenAddr,\\n    address _to,\\n    uint256 _amount\\n  ) public onlyOwner {\\n    IERC20(_tokenAddr).transfer(_to, _amount);\\n  }\\n\\n  receive() external payable {}\\n\\n  //override ownership renounce function from ownable contract\\n  function renounceOwnership() public pure override(Ownable) {\\n    revert(\\\"Unfortunately you cannot renounce Ownership of this contract!\\\");\\n  }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_usdt\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalTokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enableBuyWithEth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"enableBuyWithUsdt\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_payout\",\"type\":\"address\"}],\"name\":\"PresaleCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresalePayoutAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleTokenAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUnpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"key\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"prevValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PresaleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"purchaseToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensBought\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountPaid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDTInterface\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithEth\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyWithUSDT\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableToBuyWithEth\",\"type\":\"uint256\"}],\"name\":\"changeEnableBuyWithEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableToBuyWithUsdt\",\"type\":\"uint256\"}],\"name\":\"changeEnableBuyWithUsdt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeOracleAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changePayoutAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newEndTime\",\"type\":\"uint256\"}],\"name\":\"changePresaleEndtime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"changePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"changeSaleTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeSaleTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAddress\",\"type\":\"address\"}],\"name\":\"changeUsdtAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"}],\"name\":\"changeVestingStartTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimMultipleAccounts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimMultipleStages\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"claimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableBuyWithEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_enableBuyWithUsdt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payout\",\"type\":\"address\"}],\"name\":\"createPresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ethBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ethAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"pausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"presale\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"saleToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokensToSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"baseDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inSale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enableBuyWithEth\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"enableBuyWithUsdt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"payout\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"presaleId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"rescueAnyERC20Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"weiAmount\",\"type\":\"uint256\"}],\"name\":\"rescueETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"tokenRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"unPausePresale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"usdtBuyHelper\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"usdPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userVesting\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimStart\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "MemeMaster2023Presale", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000005f4ec3df9cbd43714fe2740f5e3616155c5b8419000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}