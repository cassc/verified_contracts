{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external;\r\n}\r\n\r\ncontract GasRelayWithdrawalSystem {\r\n    address public owner;\r\n    IERC20 public token;\r\n    address public gasFeeCoverWallet;\r\n    \r\n    uint public feeUsdt = 15 * 10**6;// USDT for withdraw fees\r\n    uint public minWithdrawLimit = 100 * 10**6;// Min USDT for withdraw\r\n\r\n    constructor(address _tokenAddress, address _gasFeeCoverWallet) {\r\n        owner = msg.sender;\r\n        token = IERC20(_tokenAddress);\r\n        gasFeeCoverWallet = _gasFeeCoverWallet;\r\n    }\r\n\r\n    // Event to log withdrawals\r\n    event Withdrawal(address indexed from, address indexed to, uint256 value);\r\n    event InternalTransfer(address indexed from, address indexed to, uint256 value);\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == owner, \"Caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    modifier onlyFeeCoverWallet() {\r\n        require(msg.sender == gasFeeCoverWallet || msg.sender == owner, \"Caller is not the owner or fee cover wallet\");\r\n        _;\r\n    }\r\n\r\n    function setOwner(address _newOwner) external onlyOwner {\r\n        owner = _newOwner;\r\n    }\r\n\r\n    // Function to allow the owner to change the gas fee cover wallet\r\n    function setGasFeeCoverWallet(address _newWallet) external onlyOwner {\r\n        gasFeeCoverWallet = _newWallet;\r\n    }\r\n\r\n    function setWithdrawUsdtFees(uint256 _feeUsdt) external onlyOwner {\r\n        require(minWithdrawLimit > _feeUsdt, \"Fees should be less than minimum withdrawal\");\r\n        feeUsdt = _feeUsdt;\r\n    }\r\n\r\n    function setWithdrawUsdtMinLimit(uint256 _minWithdrawLimit) external onlyOwner {\r\n        require(_minWithdrawLimit > feeUsdt, \"Minimum withdrawal limit should be greater than fees\");\r\n        minWithdrawLimit = _minWithdrawLimit;\r\n    }\r\n\r\n    // Withdraw function called by the user or backend on behalf of the user\r\n    // It requires pre-approval of the token transfer from the user's wallet\r\n    function withdraw(address userWallet, address recipient, uint256 amount) external onlyFeeCoverWallet {\r\n        require(minWithdrawLimit <= amount, \"Withdraw amount should be greater than or equal minimum withdrawal\");\r\n        token.transferFrom(userWallet, recipient, amount - feeUsdt);\r\n        token.transferFrom(userWallet, gasFeeCoverWallet, feeUsdt);\r\n        emit Withdrawal(userWallet, recipient, amount);\r\n    }\r\n\r\n    function internalTransfer(address userWallet, address recipient, uint256 amount) external onlyFeeCoverWallet {\r\n        require(0 < amount, \"Amount should be greater than zero\");\r\n        token.transferFrom(userWallet, recipient, amount);\r\n        emit InternalTransfer(userWallet, recipient, amount);\r\n    }\r\n\r\n\r\n    // Emergency function to allow owner to withdraw tokens (for safety and contract migration purposes)\r\n    function ownerWithdrawERC20(address _tokenContract, uint256 _amount) external onlyOwner {\r\n        IERC20 tokenContract = IERC20(_tokenContract);\r\n        require(tokenContract.transfer(msg.sender, _amount), \"Withdraw failed\");\r\n    }\r\n    \r\n    /**\r\n     * @dev Withdraws Eth (Ether) from the contract.\r\n     * @param _amount Amount of Eth to withdraw.\r\n     */\r\n    function withdrawEth(uint _amount) external onlyOwner {\r\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\r\n        require(success, \"Withdrawal failed\");\r\n    }\r\n\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_gasFeeCoverWallet\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"InternalTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"feeUsdt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFeeCoverWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"internalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"ownerWithdrawERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"setGasFeeCoverWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeUsdt\",\"type\":\"uint256\"}],\"name\":\"setWithdrawUsdtFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minWithdrawLimit\",\"type\":\"uint256\"}],\"name\":\"setWithdrawUsdtMinLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GasRelayWithdrawalSystem", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec70000000000000000000000002108c0621ab885255c3688bb85ec4adb7f15b51c", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f3c9680c15923dc17dcfa5c89149b113d5392b53f0160d3689bea22e240b22cc"}