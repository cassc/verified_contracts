{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.10;\r\n\r\n// solhint-disable-next-line compiler-version\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize, which returns 0 for contracts in\r\n        // construction, since the code is only stored at the end of the\r\n        // constructor execution.\r\n\r\n        uint256 size;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly { size := extcodesize(account) }\r\n        return size > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{ value: amount }(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain`call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n      return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        require(isContract(target), \"Address: call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\r\n        require(isContract(target), \"Address: static call to non-contract\");\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return _verifyCallResult(success, returndata, errorMessage);\r\n    }\r\n\r\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n */\r\nabstract contract Initializable {\r\n\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     */\r\n    bool private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Modifier to protect an initializer function from being invoked twice.\r\n     */\r\n    modifier initializer() {\r\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\r\n\r\n        bool isTopLevelCall = !_initializing;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n            _initialized = true;\r\n        }\r\n\r\n        _;\r\n\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Contract module that helps prevent reentrant calls to a function.\r\n *\r\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\r\n * available, which can be applied to functions to make sure there are no nested\r\n * (reentrant) calls to them.\r\n *\r\n * Note that because there is a single `nonReentrant` guard, functions marked as\r\n * `nonReentrant` may not call one another. This can be worked around by making\r\n * those functions `private`, and then adding `external` `nonReentrant` entry\r\n * points to them.\r\n *\r\n * TIP: If you would like to learn more about reentrancy and alternative ways\r\n * to protect against it, check out our blog post\r\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\r\n */\r\nabstract contract ReentrancyGuardUpgradeable is Initializable {\r\n    // Booleans are more expensive than uint256 or any type that takes up a full\r\n    // word because each write operation emits an extra SLOAD to first read the\r\n    // slot's contents, replace the bits taken up by the boolean, and then write\r\n    // back. This is the compiler's defense against contract upgrades and\r\n    // pointer aliasing, and it cannot be disabled.\r\n\r\n    // The values being non-zero value makes deployment a bit more expensive,\r\n    // but in exchange the refund on every call to nonReentrant will be lower in\r\n    // amount. Since refunds are capped to a percentage of the total\r\n    // transaction's gas, it is best to keep them low in cases like this one, to\r\n    // increase the likelihood of the full refund coming into effect.\r\n    uint256 private constant _NOT_ENTERED = 1;\r\n    uint256 private constant _ENTERED = 2;\r\n\r\n    uint256 private _status;\r\n\r\n    function __ReentrancyGuard_init() internal initializer {\r\n        __ReentrancyGuard_init_unchained();\r\n    }\r\n\r\n    function __ReentrancyGuard_init_unchained() internal initializer {\r\n        _status = _NOT_ENTERED;\r\n    }\r\n\r\n    /**\r\n     * @dev Prevents a contract from calling itself, directly or indirectly.\r\n     * Calling a `nonReentrant` function from another `nonReentrant`\r\n     * function is not supported. It is possible to prevent this from happening\r\n     * by making the `nonReentrant` function external, and make it call a\r\n     * `private` function that does the actual work.\r\n     */\r\n    modifier nonReentrant() {\r\n        // On the first call to nonReentrant, _notEntered will be true\r\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\r\n\r\n        // Any calls to nonReentrant after this point will fail\r\n        _status = _ENTERED;\r\n\r\n        _;\r\n\r\n        // By storing the original value once again, a refund is triggered (see\r\n        // https://eips.ethereum.org/EIPS/eip-2200)\r\n        _status = _NOT_ENTERED;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal initializer {\r\n        __Context_init_unchained();\r\n    }\r\n\r\n    function __Context_init_unchained() internal initializer {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n    uint256[50] private __gap;\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin guidelines: functions revert instead\r\n * of returning `false` on failure. This behavior is nonetheless conventional\r\n * and does not conflict with the expectations of ERC20 applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\r\n    mapping (address => uint256) private _balances;\r\n\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The defaut value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All three of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\r\n        __Context_init_unchained();\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overloaded;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        _approve(sender, _msgSender(), currentAllowance - amount);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\r\n     *\r\n     * This is internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        _balances[sender] = senderBalance - amount;\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        _balances[account] = accountBalance - amount;\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be to transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\r\n    uint256[45] private __gap;\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20Upgradeable {\r\n    using AddressUpgradeable for address;\r\n\r\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        // solhint-disable-next-line max-line-length\r\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n    }\r\n\r\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            uint256 newAllowance = oldAllowance - value;\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        if (returndata.length > 0) { // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\r\n * deploying minimal proxy contracts, also known as \"clones\".\r\n *\r\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\r\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\r\n *\r\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\r\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\r\n * deterministic method.\r\n *\r\n * _Available since v3.4._\r\n */\r\nlibrary ClonesUpgradeable {\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create opcode, which should never revert.\r\n     */\r\n    function clone(address implementation) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create(0, ptr, 0x37)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\r\n     *\r\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\r\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\r\n     * the clones cannot be deployed twice at the same address.\r\n     */\r\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\r\n            instance := create2(0, ptr, 0x37, salt)\r\n        }\r\n        require(instance != address(0), \"ERC1167: create2 failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt, address deployer) internal pure returns (address predicted) {\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            let ptr := mload(0x40)\r\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\r\n            mstore(add(ptr, 0x14), shl(0x60, implementation))\r\n            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\r\n            mstore(add(ptr, 0x38), shl(0x60, deployer))\r\n            mstore(add(ptr, 0x4c), salt)\r\n            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\r\n            predicted := keccak256(add(ptr, 0x37), 0x55)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\r\n     */\r\n    function predictDeterministicAddress(address implementation, bytes32 salt) internal view returns (address predicted) {\r\n        return predictDeterministicAddress(implementation, salt, address(this));\r\n    }\r\n}\r\n\r\n// Modified from: https://github.com/OpenZeppelin/openzeppelin-contracts-upgradeable/blob/25aabd286e002a1526c345c8db259d57bdf0ad28/contracts/interfaces/IERC4626Upgradeable.sol\r\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\r\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\r\n *\r\n * _Available since v4.7._\r\n */\r\ninterface IERC4626Upgradeable is IERC20Upgradeable {\r\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\r\n\r\n    event Withdraw(\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        address indexed owner,\r\n        uint256 assets,\r\n        uint256 shares\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\r\n     *\r\n     * - MUST be an ERC-20 token contract.\r\n     * - MUST NOT revert.\r\n     */\r\n    function asset() external view returns (address assetTokenAddress);\r\n\r\n    /**\r\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\r\n     *\r\n     * - SHOULD include any compounding that occurs from yield.\r\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT revert.\r\n     */\r\n    function totalAssets() external view returns (uint256 totalManagedAssets);\r\n\r\n    /**\r\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\r\n     * through a deposit call.\r\n     *\r\n     * - MUST return a limited value if receiver is subject to some deposit limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\r\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\r\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   deposit execution, and are accounted for during deposit.\r\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\r\n     * - MUST return a limited value if receiver is subject to some mint limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxMint(address receiver) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\r\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\r\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\r\n     */\r\n    function previewMint(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\r\n     *   execution, and are accounted for during mint.\r\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\r\n     * Vault, through a withdraw call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\r\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\r\n     *   called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\r\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   withdraw execution, and are accounted for during withdraw.\r\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner\r\n    ) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\r\n     * through a redeem call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\r\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\r\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\r\n     */\r\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   redeem execution, and are accounted for during redeem.\r\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner\r\n    ) external returns (uint256 assets);\r\n}\r\n\r\npragma abicoder v2;\r\n\r\n/// @title Callback for IUniswapV3PoolActions#swap\r\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\r\ninterface IUniswapV3SwapCallback {\r\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\r\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\r\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\r\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\r\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\r\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\r\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\r\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\r\n    function uniswapV3SwapCallback(\r\n        int256 amount0Delta,\r\n        int256 amount1Delta,\r\n        bytes calldata data\r\n    ) external;\r\n}\r\n\r\n/// @title Router token swapping functionality\r\n/// @notice Functions for swapping tokens via Uniswap V3\r\ninterface ISwapRouter is IUniswapV3SwapCallback {\r\n    struct ExactInputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactInputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountIn;\r\n        uint256 amountOutMinimum;\r\n    }\r\n\r\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\r\n    /// @return amountOut The amount of the received token\r\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\r\n\r\n    struct ExactOutputSingleParams {\r\n        address tokenIn;\r\n        address tokenOut;\r\n        uint24 fee;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n        uint160 sqrtPriceLimitX96;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\r\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\r\n\r\n    struct ExactOutputParams {\r\n        bytes path;\r\n        address recipient;\r\n        uint256 deadline;\r\n        uint256 amountOut;\r\n        uint256 amountInMaximum;\r\n    }\r\n\r\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\r\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\r\n    /// @return amountIn The amount of the input token\r\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n    function removeLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETH(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function removeLiquidityWithPermit(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint liquidity,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountA, uint amountB);\r\n    function removeLiquidityETHWithPermit(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountToken, uint amountETH);\r\n    function swapExactTokensForTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapTokensForExactTokens(\r\n        uint amountOut,\r\n        uint amountInMax,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint[] memory amounts);\r\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\r\n        external\r\n        returns (uint[] memory amounts);\r\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\r\n        external\r\n        payable\r\n        returns (uint[] memory amounts);\r\n\r\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\r\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\r\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\r\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountETH);\r\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n        address token,\r\n        uint liquidity,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline,\r\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\r\n    ) external returns (uint amountETH);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\n/**\r\n * @dev Contract module which allows children to implement an emergency stop\r\n * mechanism that can be triggered by an authorized account.\r\n *\r\n * This module is used through inheritance. It will make available the\r\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\r\n * the functions of your contract. Note that they will not be pausable by\r\n * simply including this module, only once the modifiers are put in place.\r\n */\r\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\r\n    /**\r\n     * @dev Emitted when the pause is triggered by `account`.\r\n     */\r\n    event Paused(address account);\r\n\r\n    /**\r\n     * @dev Emitted when the pause is lifted by `account`.\r\n     */\r\n    event Unpaused(address account);\r\n\r\n    bool private _paused;\r\n\r\n    /**\r\n     * @dev Initializes the contract in unpaused state.\r\n     */\r\n    function __Pausable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Pausable_init_unchained();\r\n    }\r\n\r\n    function __Pausable_init_unchained() internal initializer {\r\n        _paused = false;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the contract is paused, and false otherwise.\r\n     */\r\n    function paused() public view virtual returns (bool) {\r\n        return _paused;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is not paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    modifier whenNotPaused() {\r\n        require(!paused(), \"Pausable: paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to make a function callable only when the contract is paused.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    modifier whenPaused() {\r\n        require(paused(), \"Pausable: not paused\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Triggers stopped state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must not be paused.\r\n     */\r\n    function _pause() internal virtual whenNotPaused {\r\n        _paused = true;\r\n        emit Paused(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Returns to normal state.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The contract must be paused.\r\n     */\r\n    function _unpause() internal virtual whenPaused {\r\n        _paused = false;\r\n        emit Unpaused(_msgSender());\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\ninterface IIdleCDOStrategy {\r\n  function strategyToken() external view returns(address);\r\n  function token() external view returns(address);\r\n  function tokenDecimals() external view returns(uint256);\r\n  function oneToken() external view returns(uint256);\r\n  function redeemRewards(bytes calldata _extraData) external returns(uint256[] memory);\r\n  function pullStkAAVE() external returns(uint256);\r\n  function price() external view returns(uint256);\r\n  function getRewardTokens() external view returns(address[] memory);\r\n  function deposit(uint256 _amount) external returns(uint256);\r\n  // _amount in `strategyToken`\r\n  function redeem(uint256 _amount) external returns(uint256);\r\n  // _amount in `token`\r\n  function redeemUnderlying(uint256 _amount) external returns(uint256);\r\n  function getApr() external view returns(uint256);\r\n}\r\n\r\ninterface IERC20Detailed is IERC20Upgradeable {\r\n  function name() external view returns(string memory);\r\n  function symbol() external view returns(string memory);\r\n  function decimals() external view returns(uint256);\r\n}\r\n\r\ninterface IIdleCDOTrancheRewards {\r\n  function stake(uint256 _amount) external;\r\n  function stakeFor(address _user, uint256 _amount) external;\r\n  function unstake(uint256 _amount) external;\r\n  function depositReward(address _reward, uint256 _amount) external;\r\n}\r\n\r\ninterface IStakedAave {\r\n  function COOLDOWN_SECONDS() external view returns (uint256);\r\n  function UNSTAKE_WINDOW() external view returns (uint256);\r\n  function redeem(address to, uint256 amount) external;\r\n  function transfer(address to, uint256 amount) external returns (bool);\r\n  function cooldown() external;\r\n  function balanceOf(address) external view returns (uint256);\r\n  function stakersCooldowns(address) external view returns (uint256);\r\n}\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal initializer {\r\n        __Context_init_unchained();\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal initializer {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n    uint256[49] private __gap;\r\n}\r\n\r\n/// @notice This abstract contract is used to add an updatable limit on the total value locked\r\n/// that the contract can have. It also have an emergency method that allows the owner to pull\r\n/// funds into predefined recovery address\r\n/// @dev Inherit this contract and add the _guarded method to the child contract\r\nabstract contract GuardedLaunchUpgradable is Initializable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\r\n  using SafeERC20Upgradeable for IERC20Upgradeable;\r\n\r\n  // ERROR MESSAGES:\r\n  // 0 = is 0\r\n  // 1 = already initialized\r\n  // 2 = Contract limit reached\r\n\r\n  // TVL limit in underlying value\r\n  uint256 public limit;\r\n  // recovery address\r\n  address public governanceRecoveryFund;\r\n\r\n  /// @param _limit TVL limit. (0 means unlimited)\r\n  /// @param _governanceRecoveryFund recovery address\r\n  /// @param _owner owner address\r\n  function __GuardedLaunch_init(uint256 _limit, address _governanceRecoveryFund, address _owner) internal {\r\n    require(_governanceRecoveryFund != address(0), '0');\r\n    require(_owner != address(0), '0');\r\n    // Initialize inherited contracts\r\n    OwnableUpgradeable.__Ownable_init();\r\n    ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\r\n    // Initialize state variables\r\n    limit = _limit;\r\n    governanceRecoveryFund = _governanceRecoveryFund;\r\n    // Transfer ownership\r\n    transferOwnership(_owner);\r\n  }\r\n\r\n  /// @notice this check should be called inside the child contract on deposits to check that the\r\n  /// TVL didn't exceed a threshold\r\n  /// @param _amount new amount to deposit\r\n  function _guarded(uint256 _amount) internal view {\r\n    uint256 _limit = limit;\r\n    if (_limit == 0) {\r\n      return;\r\n    }\r\n    require(getContractValue() + _amount <= _limit, '2');\r\n  }\r\n\r\n  /// @dev Check that the second function is not called in the same tx from the same tx.origin\r\n  function _checkOnlyOwner() internal view {\r\n    require(owner() == msg.sender, '6');\r\n  }\r\n\r\n  /// @notice abstract method, should return the TVL in underlyings\r\n  function getContractValue() public virtual view returns (uint256);\r\n\r\n  /// @notice set contract TVL limit\r\n  /// @param _limit limit in underlying value, 0 means no limit\r\n  function _setLimit(uint256 _limit) external {\r\n    _checkOnlyOwner();\r\n    limit = _limit;\r\n  }\r\n\r\n  /// @notice Emergency method, tokens gets transferred to the governanceRecoveryFund address\r\n  /// @param _token address of the token to transfer\r\n  /// @param _value amount to transfer\r\n  function transferToken(address _token, uint256 _value) external {\r\n    _checkOnlyOwner();\r\n    IERC20Upgradeable(_token).safeTransfer(governanceRecoveryFund, _value);\r\n  }\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `recipient` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` and `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``sender``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n\r\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\r\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\r\n        unchecked {\r\n            _approve(sender, _msgSender(), currentAllowance - amount);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `sender` cannot be the zero address.\r\n     * - `recipient` cannot be the zero address.\r\n     * - `sender` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\r\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(sender, recipient, amount);\r\n\r\n        uint256 senderBalance = _balances[sender];\r\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[sender] = senderBalance - amount;\r\n        }\r\n        _balances[recipient] += amount;\r\n\r\n        emit Transfer(sender, recipient, amount);\r\n\r\n        _afterTokenTransfer(sender, recipient, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        _balances[account] += amount;\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n        }\r\n        _totalSupply -= amount;\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n}\r\n\r\n/// @dev ERC20 representing a tranche token\r\ncontract IdleCDOTranche is ERC20 {\r\n  // allowed minter address\r\n  address public minter;\r\n\r\n  /// @param _name tranche name\r\n  /// @param _symbol tranche symbol\r\n  constructor(\r\n    string memory _name, // eg. IdleDAI\r\n    string memory _symbol // eg. IDLEDAI\r\n  ) ERC20(_name, _symbol) {\r\n    // minter is msg.sender which is IdleCDO (in initialize)\r\n    minter = msg.sender;\r\n  }\r\n\r\n  /// @param account that should receive the tranche tokens\r\n  /// @param amount of tranche tokens to mint\r\n  function mint(address account, uint256 amount) external {\r\n    require(msg.sender == minter, 'TRANCHE:!AUTH');\r\n    _mint(account, amount);\r\n  }\r\n\r\n  /// @param account that should have the tranche tokens burned\r\n  /// @param amount of tranche tokens to burn\r\n  function burn(address account, uint256 amount) external {\r\n    require(msg.sender == minter, 'TRANCHE:!AUTH');\r\n    _burn(account, amount);\r\n  }\r\n}\r\n\r\ncontract IdleCDOStorage {\r\n  // constant to represent 100%\r\n  uint256 public constant FULL_ALLOC = 100000;\r\n  // max fee, relative to FULL_ALLOC\r\n  uint256 public constant MAX_FEE = 20000;\r\n  // one token\r\n  uint256 public constant ONE_TRANCHE_TOKEN = 10**18;\r\n  // variable used to save the last tx.origin and block.number\r\n  bytes32 internal _lastCallerBlock;\r\n  // variable used to save the block of the latest harvest\r\n  uint256 internal latestHarvestBlock;\r\n  // WETH address\r\n  address public weth;\r\n  // [DEPRECATED] tokens used to incentivize the idle tranche ideal ratio\r\n  address[] public incentiveTokens;\r\n  // underlying token (eg DAI)\r\n  address public token;\r\n  // address that can only pause/unpause the contract in case of emergency\r\n  address public guardian;\r\n  // one `token` (eg for DAI 10**18)\r\n  uint256 public oneToken;\r\n  // address that can call the 'harvest' method and lend pool assets\r\n  address public rebalancer;\r\n  // address of the uniswap v2 router\r\n  IUniswapV2Router02 internal uniswapRouterV2;\r\n\r\n  // Flag for allowing AA withdraws\r\n  bool public allowAAWithdraw;\r\n  // Flag for allowing BB withdraws\r\n  bool public allowBBWithdraw;\r\n  // Flag for allowing to enable reverting in case the strategy gives back less\r\n  // amount than the requested one\r\n  bool public revertIfTooLow;\r\n  // Flag to enable the `Default Check` (related to the emergency shutdown)\r\n  bool public skipDefaultCheck;\r\n\r\n  // address of the strategy used to lend funds\r\n  address public strategy;\r\n  // address of the strategy token which represent the position in the lending provider\r\n  address public strategyToken;\r\n  // address of AA Tranche token contract\r\n  address public AATranche;\r\n  // address of BB Tranche token contract\r\n  address public BBTranche;\r\n  // [DEPRECATED] address of AA Staking reward token contract\r\n  address public AAStaking;\r\n  // [DEPRECATED] address of BB Staking reward token contract\r\n  address public BBStaking;\r\n\r\n  // Apr split ratio for AA tranches\r\n  // (relative to FULL_ALLOC so 50% => 50000 => 50% of the interest to tranche AA)\r\n  uint256 public trancheAPRSplitRatio; //\r\n  // [DEPRECATED] Ideal tranche split ratio in `token` value\r\n  // (relative to FULL_ALLOC so 50% => 50000 means 50% of tranches (in value) should be AA)\r\n  uint256 public trancheIdealWeightRatio;\r\n  // Price for minting AA tranche, in underlyings\r\n  uint256 public priceAA;\r\n  // Price for minting BB tranche, in underlyings\r\n  uint256 public priceBB;\r\n  // last saved net asset value (in `token`) for AA tranches\r\n  uint256 public lastNAVAA;\r\n  // last saved net asset value (in `token`) for BB tranches\r\n  uint256 public lastNAVBB;\r\n  // last saved lending provider price\r\n  uint256 public lastStrategyPrice;\r\n  // Keeps track of unclaimed fees for feeReceiver\r\n  uint256 public unclaimedFees;\r\n  // Keeps an unlent balance both for cheap redeem and as 'insurance of last resort'\r\n  uint256 public unlentPerc;\r\n\r\n  // Fee amount (relative to FULL_ALLOC)\r\n  uint256 public fee;\r\n  // address of the fee receiver\r\n  address public feeReceiver;\r\n\r\n  // [DEPRECATED] trancheIdealWeightRatio \u00b1 idealRanges, used in updateIncentives\r\n  uint256 public idealRange;\r\n  // period, in blocks, for progressively releasing harvested rewards to users\r\n  uint256 public releaseBlocksPeriod;\r\n  // amount of rewards sold in the last harvest (in `token`)\r\n  uint256 internal harvestedRewards;\r\n  // stkAave address\r\n  address internal constant stkAave = address(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\r\n  // aave address\r\n  address internal constant AAVE = address(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);\r\n  // [DEPRECATED] if the cdo receive stkAAVE\r\n  bool internal isStkAAVEActive;\r\n  // referral address of the strategy developer\r\n  address public referral;\r\n  // amount of fee for feeReceiver. Max is FULL_ALLOC\r\n  uint256 public feeSplit;\r\n\r\n  // if Adaptive Yield Split is active\r\n  bool public isAYSActive;\r\n  // constant to represent 99% (for ADS AA ratio upper limit)\r\n  uint256 internal constant AA_RATIO_LIM_UP = 99000;\r\n  // constant to represent 50% (for ADS AA ratio lower limit)\r\n  uint256 internal constant AA_RATIO_LIM_DOWN = 50000;\r\n\r\n  // Referral event\r\n  event Referral(uint256 _amount, address _ref);\r\n  // tolerance in underlyings when redeeming\r\n  uint256 public liquidationTolerance;\r\n\r\n  // Add new variables here. For each storage slot\r\n  // used, reduce the __gap length by 1. \r\n  // ####################### \r\n  // Min apr ratio for AA tranches when using AYS\r\n  uint256 public minAprSplitAYS;\r\n  // Max strategy price decrease before triggering a default\r\n  uint256 public maxDecreaseDefault;\r\n  // uint256 public test;\r\n\r\n  // ####################### \r\n  // This is empty reserved space in storage that is put \r\n  // in place in Upgradeable contracts. It allows us to \r\n  // freely add new state variables in the future without \r\n  // compromising the storage compatibility with existing \r\n  // deployments.\r\n  // The size of the __gap array is calculated so that the \r\n  // amount of storage used by a contract always adds up to \r\n  // always the same number, 50 in this case.\r\n  uint256[48] private __gap;\r\n  // uint256[47] private __gap; -> after adding `test`\r\n  // #######################\r\n  // IMPORTANT: Do not add any variables below `__gap`\r\n}\r\n\r\nlibrary console {\r\n    address constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\r\n\r\n    function _sendLogPayload(bytes memory payload) private view {\r\n        uint256 payloadLength = payload.length;\r\n        address consoleAddress = CONSOLE_ADDRESS;\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            let payloadStart := add(payload, 32)\r\n            let r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\r\n        }\r\n    }\r\n\r\n    function log() internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log()\"));\r\n    }\r\n\r\n    function logInt(int p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\r\n    }\r\n\r\n    function logUint(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function logString(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function logBool(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function logAddress(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function logBytes(bytes memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\r\n    }\r\n\r\n    function logBytes1(bytes1 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\r\n    }\r\n\r\n    function logBytes2(bytes2 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\r\n    }\r\n\r\n    function logBytes3(bytes3 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\r\n    }\r\n\r\n    function logBytes4(bytes4 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\r\n    }\r\n\r\n    function logBytes5(bytes5 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\r\n    }\r\n\r\n    function logBytes6(bytes6 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\r\n    }\r\n\r\n    function logBytes7(bytes7 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\r\n    }\r\n\r\n    function logBytes8(bytes8 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\r\n    }\r\n\r\n    function logBytes9(bytes9 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\r\n    }\r\n\r\n    function logBytes10(bytes10 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\r\n    }\r\n\r\n    function logBytes11(bytes11 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\r\n    }\r\n\r\n    function logBytes12(bytes12 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\r\n    }\r\n\r\n    function logBytes13(bytes13 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\r\n    }\r\n\r\n    function logBytes14(bytes14 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\r\n    }\r\n\r\n    function logBytes15(bytes15 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\r\n    }\r\n\r\n    function logBytes16(bytes16 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\r\n    }\r\n\r\n    function logBytes17(bytes17 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\r\n    }\r\n\r\n    function logBytes18(bytes18 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\r\n    }\r\n\r\n    function logBytes19(bytes19 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\r\n    }\r\n\r\n    function logBytes20(bytes20 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\r\n    }\r\n\r\n    function logBytes21(bytes21 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\r\n    }\r\n\r\n    function logBytes22(bytes22 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\r\n    }\r\n\r\n    function logBytes23(bytes23 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\r\n    }\r\n\r\n    function logBytes24(bytes24 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\r\n    }\r\n\r\n    function logBytes25(bytes25 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\r\n    }\r\n\r\n    function logBytes26(bytes26 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\r\n    }\r\n\r\n    function logBytes27(bytes27 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\r\n    }\r\n\r\n    function logBytes28(bytes28 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\r\n    }\r\n\r\n    function logBytes29(bytes29 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\r\n    }\r\n\r\n    function logBytes30(bytes30 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\r\n    }\r\n\r\n    function logBytes31(bytes31 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\r\n    }\r\n\r\n    function logBytes32(bytes32 p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\r\n    }\r\n\r\n    function log(uint p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\r\n    }\r\n\r\n    function log(string memory p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\r\n    }\r\n\r\n    function log(bool p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\r\n    }\r\n\r\n    function log(address p0) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\r\n    }\r\n\r\n    function log(uint p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(string memory p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(bool p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, uint p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, string memory p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, bool p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\r\n    }\r\n\r\n    function log(address p0, address p1) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(uint p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(string memory p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(bool p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, uint p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, string memory p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, bool p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, uint p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, string memory p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, bool p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, uint p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, string memory p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, bool p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\r\n    }\r\n\r\n    function log(address p0, address p1, address p2, address p3) internal view {\r\n        _sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\r\n    }\r\n\r\n}\r\n\r\n/// @title A perpetual tranche implementation\r\n/// @author Idle Labs Inc.\r\n/// @notice More info and high level overview in the README\r\n/// @dev The contract is upgradable, to add storage slots, create IdleCDOStorageVX and inherit from IdleCDOStorage, then update the definitaion below\r\ncontract IdleCDO is PausableUpgradeable, GuardedLaunchUpgradable, IdleCDOStorage {\r\n  using SafeERC20Upgradeable for IERC20Detailed;\r\n\r\n  // ERROR MESSAGES:\r\n  // 0 = is 0\r\n  // 1 = already initialized\r\n  // 2 = Contract limit reached\r\n  // 3 = Tranche withdraw not allowed (Paused or in shutdown)\r\n  // 4 = Default, wait shutdown\r\n  // 5 = Amount too low\r\n  // 6 = Not authorized\r\n  // 7 = Amount too high\r\n  // 8 = Same block\r\n\r\n  // Used to prevent initialization of the implementation contract\r\n  /// @custom:oz-upgrades-unsafe-allow constructor\r\n  constructor() {\r\n    token = address(1);\r\n  }\r\n\r\n  // ###################\r\n  // Initializer\r\n  // ###################\r\n\r\n  /// @notice can only be called once\r\n  /// @dev Initialize the upgradable contract\r\n  /// @param _limit contract value limit, can be 0\r\n  /// @param _guardedToken underlying token\r\n  /// @param _governanceFund address where funds will be sent in case of emergency\r\n  /// @param _owner guardian address (can pause, unpause and call emergencyShutdown)\r\n  /// @param _rebalancer rebalancer address\r\n  /// @param _strategy strategy address\r\n  /// @param _trancheAPRSplitRatio trancheAPRSplitRatio value\r\n  /// @param // deprecated\r\n  /// @param _incentiveTokens array of addresses for incentive tokens\r\n  function initialize(\r\n    uint256 _limit, address _guardedToken, address _governanceFund, address _owner, // GuardedLaunch args\r\n    address _rebalancer,\r\n    address _strategy,\r\n    uint256 _trancheAPRSplitRatio, // for AA tranches, so eg 10000 means 10% interest to AA and 90% BB\r\n    uint256, // Deprecated\r\n    address[] memory _incentiveTokens\r\n  ) external initializer {\r\n    require(token == address(0), '1');\r\n    require(_rebalancer != address(0) && _strategy != address(0) && _guardedToken != address(0), \"0\");\r\n    require( _trancheAPRSplitRatio <= FULL_ALLOC, '7');\r\n    // Initialize contracts\r\n    PausableUpgradeable.__Pausable_init();\r\n    // check for _governanceFund and _owner != address(0) are inside GuardedLaunchUpgradable\r\n    GuardedLaunchUpgradable.__GuardedLaunch_init(_limit, _governanceFund, _owner);\r\n    // Deploy Tranches tokens\r\n    address _strategyToken = IIdleCDOStrategy(_strategy).strategyToken();\r\n    // get strategy token symbol (eg. idleDAI)\r\n    string memory _symbol = IERC20Detailed(_strategyToken).symbol();\r\n    // create tranche tokens (concat strategy token symbol in the name and symbol of the tranche tokens)\r\n    AATranche = address(new IdleCDOTranche(_concat(string(\"IdleCDO AA Tranche - \"), _symbol), _concat(string(\"AA_\"), _symbol)));\r\n    BBTranche = address(new IdleCDOTranche(_concat(string(\"IdleCDO BB Tranche - \"), _symbol), _concat(string(\"BB_\"), _symbol)));\r\n    // Set CDO params\r\n    token = _guardedToken;\r\n    strategy = _strategy;\r\n    strategyToken = _strategyToken;\r\n    rebalancer = _rebalancer;\r\n    trancheAPRSplitRatio = _trancheAPRSplitRatio;\r\n    uint256 _oneToken = 10**(IERC20Detailed(_guardedToken).decimals());\r\n    oneToken = _oneToken;\r\n    uniswapRouterV2 = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\r\n    incentiveTokens = _incentiveTokens;\r\n    priceAA = _oneToken;\r\n    priceBB = _oneToken;\r\n    unlentPerc = 2000; // 2%\r\n    // # blocks, after an harvest, during which harvested rewards gets progressively unlocked\r\n    releaseBlocksPeriod = 6400; // about 1 day\r\n    // Set flags\r\n    allowAAWithdraw = true;\r\n    allowBBWithdraw = true;\r\n    revertIfTooLow = true;\r\n    // skipDefaultCheck = false is the default value\r\n    // Set allowance for strategy\r\n    _allowUnlimitedSpend(_guardedToken, _strategy);\r\n    _allowUnlimitedSpend(strategyToken, _strategy);\r\n    // Save current strategy price\r\n    lastStrategyPrice = _strategyPrice();\r\n    // Fee params\r\n    fee = 15000; // 10% performance fee\r\n    feeReceiver = address(0xFb3bD022D5DAcF95eE28a6B07825D4Ff9C5b3814); // treasury multisig\r\n    guardian = _owner;\r\n    // feeSplit = 0; // default all to feeReceiver\r\n    isAYSActive = true; // adaptive yield split\r\n    minAprSplitAYS = AA_RATIO_LIM_DOWN; // AA tranche will get min 50% of the yield\r\n\r\n    _additionalInit();\r\n  }\r\n\r\n  /// @notice used by child contracts if anything needs to be done on/after init\r\n  function _additionalInit() internal virtual {}\r\n\r\n  // ###############\r\n  // Public methods\r\n  // ###############\r\n\r\n  /// @notice pausable\r\n  /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\r\n  /// @param _amount amount of `token` to deposit\r\n  /// @return AA tranche tokens minted\r\n  function depositAA(uint256 _amount) external returns (uint256) {\r\n    return _deposit(_amount, AATranche, address(0));\r\n  }\r\n\r\n  /// @notice pausable in _deposit\r\n  /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\r\n  /// @param _amount amount of `token` to deposit\r\n  /// @return BB tranche tokens minted\r\n  function depositBB(uint256 _amount) external returns (uint256) {\r\n    return _deposit(_amount, BBTranche, address(0));\r\n  }\r\n\r\n  /// @notice pausable\r\n  /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\r\n  /// @param _amount amount of `token` to deposit\r\n  /// @param _referral address of the referral\r\n  /// @return AA tranche tokens minted\r\n  function depositAARef(uint256 _amount, address _referral) external returns (uint256) {\r\n    return _deposit(_amount, AATranche, _referral);\r\n  }\r\n\r\n  /// @notice pausable in _deposit\r\n  /// @dev msg.sender should approve this contract first to spend `_amount` of `token`\r\n  /// @param _amount amount of `token` to deposit\r\n  /// @param _referral address of the referral\r\n  /// @return BB tranche tokens minted\r\n  function depositBBRef(uint256 _amount, address _referral) external returns (uint256) {\r\n    return _deposit(_amount, BBTranche, _referral);\r\n  }\r\n\r\n  /// @notice pausable in _deposit\r\n  /// @param _amount amount of AA tranche tokens to burn\r\n  /// @return underlying tokens redeemed\r\n  function withdrawAA(uint256 _amount) external returns (uint256) {\r\n    require(!paused() || allowAAWithdraw, '3');\r\n    return _withdraw(_amount, AATranche);\r\n  }\r\n\r\n  /// @notice pausable\r\n  /// @param _amount amount of BB tranche tokens to burn\r\n  /// @return underlying tokens redeemed\r\n  function withdrawBB(uint256 _amount) external returns (uint256) {\r\n    require(!paused() || allowBBWithdraw, '3');\r\n    return _withdraw(_amount, BBTranche);\r\n  }\r\n\r\n  // ###############\r\n  // Views\r\n  // ###############\r\n\r\n  /// @param _tranche tranche address\r\n  /// @return tranche price\r\n  function tranchePrice(address _tranche) external view returns (uint256) {\r\n    return _tranchePrice(_tranche);\r\n  }\r\n\r\n  /// @notice calculates the current total value locked (in `token` terms)\r\n  /// @dev unclaimed rewards (gov tokens) are not counted.\r\n  /// NOTE: `unclaimedFees` are not included in the contract value\r\n  /// NOTE2: fees that *will* be taken (in the next _updateAccounting call) are counted\r\n  function getContractValue() public override view returns (uint256) {\r\n    address _strategyToken = strategyToken;\r\n\r\n    // We hardcode the value to 18 for eTokens as the decimals() call is reverting\r\n    // this is needed for non staked euler deposits\r\n    uint256 strategyTokenDecimals = 18;\r\n    // uint256 strategyTokenDecimals = IERC20Detailed(_strategyToken).decimals();\r\n    \r\n    // TVL is the sum of unlent balance in the contract + the balance in lending - the reduction for harvested rewards - unclaimedFees\r\n    // the balance in lending is the value of the interest bearing assets (strategyTokens) in this contract\r\n    // TVL = (strategyTokens * strategy token price) + unlent balance - lockedRewards - unclaimedFees\r\n    return (_contractTokenBalance(_strategyToken) * _strategyPrice() / (10**(strategyTokenDecimals))) +\r\n            _contractTokenBalance(token) -\r\n            _lockedRewards() -\r\n            unclaimedFees;\r\n  }\r\n\r\n  /// @param _tranche tranche address\r\n  /// @return actual apr given current ratio between AA and BB tranches\r\n  function getApr(address _tranche) external view returns (uint256) {\r\n    return _getApr(_tranche, getCurrentAARatio());\r\n  }\r\n\r\n  /// @notice calculates the current AA tranches ratio\r\n  /// @dev _virtualBalance is used to have a more accurate/recent value for the AA ratio\r\n  /// because it calculates the balance after splitting the accrued interest since the\r\n  /// last depositXX/withdrawXX/harvest\r\n  /// @return AA tranches ratio (in underlying value) considering all interest\r\n  function getCurrentAARatio() public view returns (uint256) {\r\n    return _getAARatio(false);\r\n  }\r\n\r\n  /// @notice calculates the current tranches price considering the interest that is yet to be splitted\r\n  /// ie the interest generated since the last update of priceAA and priceBB (done on depositXX/withdrawXX/harvest)\r\n  /// useful for showing updated gains on frontends\r\n  /// @dev this should always be >= of _tranchePrice(_tranche)\r\n  /// @param _tranche address of the requested tranche\r\n  /// @return _virtualPrice tranche price considering all interest\r\n  function virtualPrice(address _tranche) public virtual view returns (uint256 _virtualPrice) {\r\n    // get both NAVs, because we need the total NAV anyway\r\n    uint256 _lastNAVAA = lastNAVAA;\r\n    uint256 _lastNAVBB = lastNAVBB;\r\n\r\n    (_virtualPrice, ) = _virtualPricesAux(\r\n      _tranche,\r\n      getContractValue(), // nav\r\n      _lastNAVAA + _lastNAVBB, // lastNAV\r\n      _tranche == AATranche ? _lastNAVAA : _lastNAVBB, // lastTrancheNAV\r\n      trancheAPRSplitRatio\r\n    );\r\n  }\r\n\r\n  /// @notice returns an array of tokens used to incentive tranches via IIdleCDOTrancheRewards\r\n  /// @return array with addresses of incentiveTokens (can be empty)\r\n  function getIncentiveTokens() external view returns (address[] memory) {\r\n    return incentiveTokens;\r\n  }\r\n\r\n  // ###############\r\n  // Internal\r\n  // ###############\r\n\r\n  /// @notice method used to deposit `token` and mint tranche tokens\r\n  /// Ideally users should deposit right after an `harvest` call to maximize profit\r\n  /// @dev this contract must be approved to spend at least _amount of `token` before calling this method\r\n  /// automatically reverts on lending provider default (_strategyPrice decreased)\r\n  /// @param _amount amount of underlyings (`token`) to deposit\r\n  /// @param _tranche tranche address\r\n  /// @param _referral referral address\r\n  /// @return _minted number of tranche tokens minted\r\n  function _deposit(uint256 _amount, address _tranche, address _referral) internal virtual whenNotPaused returns (uint256 _minted) {\r\n    if (_amount == 0) {\r\n      return _minted;\r\n    }\r\n    // check that we are not depositing more than the contract available limit\r\n    _guarded(_amount);\r\n    // set _lastCallerBlock hash\r\n    _updateCallerBlock();\r\n    // check if _strategyPrice decreased\r\n    _checkDefault();\r\n    // interest accrued since last depositXX/withdrawXX/harvest is splitted between AA and BB\r\n    // according to trancheAPRSplitRatio. NAVs of AA and BB are updated and tranche\r\n    // prices adjusted accordingly\r\n    _updateAccounting();\r\n    // get underlyings from sender\r\n    IERC20Detailed(token).safeTransferFrom(msg.sender, address(this), _amount);\r\n    // mint tranche tokens according to the current tranche price\r\n    _minted = _mintShares(_amount, msg.sender, _tranche);\r\n    // update trancheAPRSplitRatio\r\n    _updateSplitRatio();\r\n\r\n    if (_referral != address(0)) {\r\n      emit Referral(_amount, _referral);\r\n    }\r\n  }\r\n\r\n  /// @notice this method is called on depositXX/withdrawXX/harvest and\r\n  /// updates the accounting of the contract and effectively splits the yield between the\r\n  /// AA and BB tranches\r\n  /// @dev this method:\r\n  /// - update tranche prices (priceAA and priceBB)\r\n  /// - update net asset value for both tranches (lastNAVAA and lastNAVBB)\r\n  /// - update fee accounting (unclaimedFees)\r\n  function _updateAccounting() internal virtual {\r\n    uint256 _lastNAVAA = lastNAVAA;\r\n    uint256 _lastNAVBB = lastNAVBB;\r\n    uint256 _lastNAV = _lastNAVAA + _lastNAVBB;\r\n    uint256 nav = getContractValue();\r\n    uint256 _aprSplitRatio = trancheAPRSplitRatio;\r\n\r\n    // If gain is > 0, then collect some fees in `unclaimedFees`\r\n    if (nav > _lastNAV) {\r\n      unclaimedFees += (nav - _lastNAV) * fee / FULL_ALLOC;\r\n    }\r\n\r\n    (uint256 _priceAA, uint256 _totalAAGain) = _virtualPricesAux(AATranche, nav, _lastNAV, _lastNAVAA, _aprSplitRatio);\r\n    (uint256 _priceBB, uint256 _totalBBGain) = _virtualPricesAux(BBTranche, nav, _lastNAV, _lastNAVBB, _aprSplitRatio);\r\n\r\n    lastNAVAA += _totalAAGain;\r\n    lastNAVBB += _totalBBGain;\r\n    priceAA = _priceAA;\r\n    priceBB = _priceBB;\r\n  }\r\n\r\n  /// @notice calculates the NAV for a tranche considering the interest that is yet to be splitted\r\n  /// @param _tranche address of the requested tranche\r\n  /// @return net asset value, in underlying tokens, for _tranche considering all nav\r\n  function _virtualBalance(address _tranche) internal view returns (uint256) {\r\n    // balance is: tranche supply * virtual tranche price\r\n    return IdleCDOTranche(_tranche).totalSupply() * virtualPrice(_tranche) / ONE_TRANCHE_TOKEN;\r\n  }\r\n\r\n  /// @notice calculates the NAV for a tranche without considering the interest that is yet to be splitted\r\n  /// @param _tranche address of the requested tranche\r\n  /// @return net asset value, in underlying tokens, for _tranche\r\n  function _instantBalance(address _tranche) internal view returns (uint256) {\r\n    return IdleCDOTranche(_tranche).totalSupply() * _tranchePrice(_tranche) / ONE_TRANCHE_TOKEN;\r\n  }\r\n\r\n  /// @notice calculates the current tranches price considering the interest that is yet to be splitted and the\r\n  /// total gain for a specific tranche\r\n  /// @param _tranche address of the requested tranche\r\n  /// @param _nav current NAV\r\n  /// @param _lastNAV last saved NAV\r\n  /// @param _lastTrancheNAV last saved tranche NAV\r\n  /// @param _trancheAPRSplitRatio APR split ratio for AA tranche\r\n  /// @return _virtualPrice tranche price considering all interest\r\n  /// @return _totalTrancheGain tranche gain since last update\r\n  function _virtualPricesAux(\r\n    address _tranche,\r\n    uint256 _nav,\r\n    uint256 _lastNAV,\r\n    uint256 _lastTrancheNAV,\r\n    uint256 _trancheAPRSplitRatio\r\n  ) internal view returns (uint256 _virtualPrice, uint256 _totalTrancheGain) {\r\n    // If there is no gain return the current price\r\n    if (_nav <= _lastNAV) {\r\n      return (_tranchePrice(_tranche), 0);\r\n    }\r\n    // Check if there are tranche holders\r\n    uint256 trancheSupply = IdleCDOTranche(_tranche).totalSupply();\r\n    if (_lastNAV == 0 || trancheSupply == 0) {\r\n      return (oneToken, 0);\r\n    }\r\n    // In order to correctly split the interest generated between AA and BB tranche holders\r\n    // (according to the trancheAPRSplitRatio) we need to know how much interest we gained\r\n    // since the last price update (during a depositXX/withdrawXX/harvest)\r\n    // To do that we need to get the current value of the assets in this contract\r\n    // and the last saved one (always during a depositXX/withdrawXX/harvest)\r\n\r\n    // Calculate the total gain\r\n    uint256 totalGain = _nav - _lastNAV;\r\n    // Remove performance fee\r\n    totalGain -= totalGain * fee / FULL_ALLOC;\r\n\r\n    address _AATranche = AATranche;\r\n    bool _isAATranche = _tranche == _AATranche;\r\n    // Get the supply of the other tranche and\r\n    // if it's 0 then give all gain to the current `_tranche` holders\r\n    if (IdleCDOTranche(_isAATranche ? BBTranche : _AATranche).totalSupply() == 0) {\r\n      _totalTrancheGain = totalGain;\r\n    } else {\r\n      // Split the net gain, with precision loss favoring the AA tranche.\r\n      uint256 totalBBGain = totalGain * (FULL_ALLOC - _trancheAPRSplitRatio) / FULL_ALLOC;\r\n      // The new NAV for the tranche is old NAV + total gain for the tranche\r\n      _totalTrancheGain = _isAATranche ? (totalGain - totalBBGain) : totalBBGain;\r\n    }\r\n    // Split the new NAV (_lastTrancheNAV + _totalTrancheGain) per tranche token\r\n    _virtualPrice = (_lastTrancheNAV + _totalTrancheGain) * ONE_TRANCHE_TOKEN / trancheSupply;\r\n  }\r\n\r\n  /// @notice mint tranche tokens and updates tranche last NAV\r\n  /// @param _amount, in underlyings, to convert in tranche tokens\r\n  /// @param _to receiver address of the newly minted tranche tokens\r\n  /// @param _tranche tranche address\r\n  /// @return _minted number of tranche tokens minted\r\n  function _mintShares(uint256 _amount, address _to, address _tranche) internal virtual returns (uint256 _minted) {\r\n    // calculate # of tranche token to mint based on current tranche price: _amount / tranchePrice\r\n    _minted = _amount * ONE_TRANCHE_TOKEN / _tranchePrice(_tranche);\r\n    IdleCDOTranche(_tranche).mint(_to, _minted);\r\n    // update NAV with the _amount of underlyings added\r\n    if (_tranche == AATranche) {\r\n      lastNAVAA += _amount;\r\n    } else {\r\n      lastNAVBB += _amount;\r\n    }\r\n  }\r\n\r\n  /// @notice convert fees (`unclaimedFees`) in AA tranche tokens\r\n  /// Tranche tokens are then automatically staked in the relative IdleCDOTrancheRewards contact if present\r\n  /// @dev this will be called only during harvests\r\n  function _depositFees() internal {\r\n    uint256 _amount = unclaimedFees;\r\n    if (_amount > 0) {\r\n      address stakingRewards = AAStaking;\r\n      bool isStakingRewardsActive = stakingRewards != address(0);\r\n      address _feeReceiver = feeReceiver;\r\n\r\n      // mint tranches tokens to this contract\r\n      uint256 _minted = _mintShares(\r\n        _amount,\r\n        isStakingRewardsActive ? address(this) : _feeReceiver,\r\n        // Mint AA tranche tokens as fees\r\n        AATranche\r\n      );\r\n      // reset unclaimedFees counter\r\n      unclaimedFees = 0;\r\n\r\n      // auto stake fees in staking contract for feeReceiver\r\n      if (isStakingRewardsActive) {\r\n        IIdleCDOTrancheRewards(stakingRewards).stakeFor(_feeReceiver, _minted);\r\n      }\r\n    }\r\n  }\r\n\r\n  /// @notice It allows users to burn their tranche token and redeem their principal + interest back\r\n  /// @dev automatically reverts on lending provider default (_strategyPrice decreased).\r\n  /// @param _amount in tranche tokens\r\n  /// @param _tranche tranche address\r\n  /// @return toRedeem number of underlyings redeemed\r\n  function _withdraw(uint256 _amount, address _tranche) virtual internal nonReentrant returns (uint256 toRedeem) {\r\n    // check if a deposit is made in the same block from the same user\r\n    _checkSameTx();\r\n    // check if _strategyPrice decreased\r\n    _checkDefault();\r\n    // accrue interest to tranches and updates tranche prices\r\n    _updateAccounting();\r\n    // redeem all user balance if 0 is passed as _amount\r\n    if (_amount == 0) {\r\n      _amount = IERC20Detailed(_tranche).balanceOf(msg.sender);\r\n    }\r\n    require(_amount > 0, '0');\r\n    address _token = token;\r\n    // get current available unlent balance\r\n    uint256 balanceUnderlying = _contractTokenBalance(_token);\r\n    // Calculate the amount to redeem\r\n    toRedeem = _amount * _tranchePrice(_tranche) / ONE_TRANCHE_TOKEN;\r\n    if (toRedeem > balanceUnderlying) {\r\n      // if the unlent balance is not enough we try to redeem what's missing directly from the strategy\r\n      // and then add it to the current unlent balance\r\n      // NOTE: A difference of up to 100 wei due to rounding is tolerated\r\n      toRedeem = _liquidate(toRedeem - balanceUnderlying, revertIfTooLow) + balanceUnderlying;\r\n    }\r\n    // burn tranche token\r\n    IdleCDOTranche(_tranche).burn(msg.sender, _amount);\r\n    // send underlying to msg.sender\r\n    IERC20Detailed(_token).safeTransfer(msg.sender, toRedeem);\r\n\r\n    // update NAV with the _amount of underlyings removed\r\n    if (_tranche == AATranche) {\r\n      lastNAVAA -= toRedeem;\r\n    } else {\r\n      lastNAVBB -= toRedeem;\r\n    }\r\n\r\n    // update trancheAPRSplitRatio\r\n    _updateSplitRatio();\r\n  }\r\n\r\n  /// @notice updates trancheAPRSplitRatio based on the current tranches TVL ratio between AA and BB\r\n  /// @dev the idea here is to limit the min and max APR that the senior tranche can get\r\n  function _updateSplitRatio() internal {\r\n    if (isAYSActive) {\r\n      uint256 tvlAARatio = _getAARatio(true);\r\n      uint256 aux;\r\n      if (tvlAARatio >= AA_RATIO_LIM_UP) {\r\n        aux = AA_RATIO_LIM_UP;\r\n      } else if (tvlAARatio > minAprSplitAYS) {\r\n        aux = tvlAARatio;\r\n      } else {\r\n        aux = minAprSplitAYS;\r\n      }\r\n      trancheAPRSplitRatio = aux * tvlAARatio / FULL_ALLOC;\r\n    }\r\n  }\r\n\r\n  /// @notice calculates the current AA tranches ratio\r\n  /// @dev it does count accrued interest not yet split since last\r\n  /// depositXX/withdrawXX/harvest only if _instant flag is true\r\n  /// @param _instant if true, it returns the current ratio without accrued interest\r\n  /// @return AA tranches ratio (in underlying value) considering all interest\r\n  function _getAARatio(bool _instant) internal view returns (uint256) {\r\n    function(address) internal view returns (uint256) _getNAV =\r\n      _instant ? _instantBalance : _virtualBalance;\r\n    uint256 AABal = _getNAV(AATranche);\r\n    uint256 contractVal = AABal + _getNAV(BBTranche);\r\n    if (contractVal == 0) {\r\n      return 0;\r\n    }\r\n    // Current AA tranche split ratio = AABal * FULL_ALLOC / (AABal + BBBal)\r\n    return AABal * FULL_ALLOC / contractVal;\r\n  }\r\n\r\n  /// @dev check if _strategyPrice is decreased since last update and updates last saved strategy price\r\n  function _checkDefault() virtual internal {\r\n    uint256 currPrice = _strategyPrice();\r\n    if (!skipDefaultCheck) {\r\n      require(lastStrategyPrice <= currPrice, \"4\");\r\n    }\r\n    lastStrategyPrice = currPrice;\r\n  }\r\n\r\n  /// @return strategy price, in underlyings\r\n  function _strategyPrice() internal view returns (uint256) {\r\n    return IIdleCDOStrategy(strategy).price();\r\n  }\r\n\r\n  /// @dev this should liquidate at least _amount of `token` from the lending provider or revertIfNeeded\r\n  /// @param _amount in underlying tokens\r\n  /// @param _revertIfNeeded flag whether to revert or not if the redeemed amount is not enough\r\n  /// @return _redeemedTokens number of underlyings redeemed\r\n  function _liquidate(uint256 _amount, bool _revertIfNeeded) internal virtual returns (uint256 _redeemedTokens) {\r\n    _redeemedTokens = IIdleCDOStrategy(strategy).redeemUnderlying(_amount);\r\n    if (_revertIfNeeded) {\r\n      uint256 _tolerance = liquidationTolerance;\r\n      if (_tolerance == 0) {\r\n        _tolerance = 100;\r\n      }\r\n      // keep `_tolerance` wei as margin for rounding errors\r\n      require(_redeemedTokens + _tolerance >= _amount, '5');\r\n    }\r\n\r\n    if (_redeemedTokens > _amount) {\r\n      _redeemedTokens = _amount;\r\n    }\r\n  }\r\n\r\n  /// @notice method used to sell `_rewardToken` for `_token` on uniswap\r\n  /// @param _rewardToken address of the token to sell\r\n  /// @param _path to buy\r\n  /// @param _amount of `_rewardToken` to sell\r\n  /// @param _minAmount min amount of `_token` to buy\r\n  /// @return _amount of _rewardToken sold\r\n  /// @return _amount received for the sell\r\n  function _sellReward(address _rewardToken, bytes memory _path, uint256 _amount, uint256 _minAmount)\r\n    internal\r\n    returns (uint256, uint256) {\r\n    // If 0 is passed as sell amount, we get the whole contract balance\r\n    if (_amount == 0) {\r\n      _amount = _contractTokenBalance(_rewardToken);\r\n    }\r\n    if (_amount == 0) {\r\n      return (0, 0);\r\n    }\r\n  \r\n    if (_path.length > 0) {\r\n      // Uni v3 swap\r\n      ISwapRouter _swapRouter = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\r\n      IERC20Detailed(_rewardToken).safeIncreaseAllowance(address(_swapRouter), _amount);\r\n      // multi hop swap params\r\n      ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\r\n        path: _path,\r\n        recipient: address(this),\r\n        deadline: block.timestamp + 100,\r\n        amountIn: _amount,\r\n        amountOutMinimum: _minAmount\r\n      });\r\n      // do the swap and return the amount swapped and the amount received\r\n      return (_amount, _swapRouter.exactInput(params));\r\n    } else {\r\n      // Uni v2 swap\r\n      IUniswapV2Router02 _uniRouter = uniswapRouterV2;\r\n      // approve the uniswap router to spend our reward\r\n      IERC20Detailed(_rewardToken).safeIncreaseAllowance(address(_uniRouter), _amount);\r\n      // do the trade with all `_rewardToken` in this contract\r\n      address[] memory _pathUniv2 = new address[](3);\r\n      _pathUniv2[0] = _rewardToken;\r\n      _pathUniv2[1] = weth;\r\n      _pathUniv2[2] = token;\r\n      uint256[] memory _amounts = _uniRouter.swapExactTokensForTokens(\r\n        _amount,\r\n        _minAmount,\r\n        _pathUniv2,\r\n        address(this),\r\n        block.timestamp + 100\r\n      );\r\n      // return the amount swapped and the amount received\r\n      return (_amounts[0], _amounts[_amounts.length - 1]);\r\n    }\r\n  }\r\n\r\n  /// @notice method used to sell all sellable rewards for `_token` on uniswap\r\n  /// @param _strategy IIdleCDOStrategy stategy instance\r\n  /// @param _sellAmounts array with amounts of rewards to sell\r\n  /// @param _minAmount array with amounts of _token buy for each reward sold. (should have the same length as _sellAmounts)\r\n  /// @param _skipReward array of flags for skipping the market sell of specific rewards (should have the same length as _sellAmounts)\r\n  /// @return _soldAmounts array with amounts of rewards actually sold\r\n  /// @return _swappedAmounts array with amounts of _token actually bought\r\n  /// @return _totSold total rewards sold in `_token`\r\n  function _sellAllRewards(IIdleCDOStrategy _strategy, uint256[] memory _sellAmounts, uint256[] memory _minAmount, bool[] memory _skipReward, bytes memory _extraData)\r\n    internal\r\n    returns (uint256[] memory _soldAmounts, uint256[] memory _swappedAmounts, uint256 _totSold) {\r\n    // Fetch state variables once to save gas\r\n    address[] memory _incentiveTokens = incentiveTokens;\r\n    // get all rewards addresses\r\n    address[] memory _rewards = _strategy.getRewardTokens();\r\n    address _rewardToken;\r\n    bytes[] memory _paths = new bytes[](_rewards.length);\r\n    if (_extraData.length > 0) {\r\n      _paths = abi.decode(_extraData, (bytes[]));\r\n    }\r\n    // Initialize the return array, containing the amounts received after swapping reward tokens\r\n    _soldAmounts = new uint256[](_rewards.length);\r\n    _swappedAmounts = new uint256[](_rewards.length);\r\n    // loop through all reward tokens\r\n    for (uint256 i = 0; i < _rewards.length; i++) {\r\n      _rewardToken = _rewards[i];\r\n      // check if it should be sold or not\r\n      if (_skipReward[i] || _includesAddress(_incentiveTokens, _rewardToken)) { continue; }\r\n      // do not sell stkAAVE but only AAVE if present\r\n      if (_rewardToken == stkAave) {\r\n        _rewardToken = AAVE;\r\n      }\r\n      // Market sell _rewardToken in this contract for _token\r\n      (_soldAmounts[i], _swappedAmounts[i]) = _sellReward(_rewardToken, _paths[i], _sellAmounts[i], _minAmount[i]);\r\n      _totSold += _swappedAmounts[i];\r\n    }\r\n  }\r\n\r\n  /// @param _tranche tranche address\r\n  /// @return last saved tranche price, in underlyings\r\n  function _tranchePrice(address _tranche) internal view returns (uint256) {\r\n    if (IdleCDOTranche(_tranche).totalSupply() == 0) {\r\n      return oneToken;\r\n    }\r\n    return _tranche == AATranche ? priceAA : priceBB;\r\n  }\r\n\r\n  /// @notice returns the current apr for a tranche based on trancheAPRSplitRatio and the provided AA ratio\r\n  /// @dev the apr for a tranche can be higher than the strategy apr\r\n  /// @param _tranche tranche token address\r\n  /// @param _AATrancheSplitRatio AA split ratio used for calculations\r\n  /// @return apr for the specific tranche\r\n  function _getApr(address _tranche, uint256 _AATrancheSplitRatio) internal view returns (uint256) {\r\n    uint256 stratApr = IIdleCDOStrategy(strategy).getApr();\r\n    uint256 _trancheAPRSplitRatio = trancheAPRSplitRatio;\r\n    bool isAATranche = _tranche == AATranche;\r\n    if (_AATrancheSplitRatio == 0) {\r\n      // if there are no AA tranches, apr for AA is 0 (all apr to BB and it will be equal to stratApr)\r\n      return isAATranche ? 0 : stratApr;\r\n    }\r\n    return isAATranche ?\r\n      // AA apr is: stratApr * AAaprSplitRatio / AASplitRatio\r\n      stratApr * _trancheAPRSplitRatio / _AATrancheSplitRatio :\r\n      // BB apr is: stratApr * BBaprSplitRatio / BBSplitRatio -> where\r\n      // BBaprSplitRatio is: (FULL_ALLOC - _trancheAPRSplitRatio) and\r\n      // BBSplitRatio is: (FULL_ALLOC - _AATrancheSplitRatio)\r\n      stratApr * (FULL_ALLOC - _trancheAPRSplitRatio) / (FULL_ALLOC - _AATrancheSplitRatio);\r\n  }\r\n\r\n  /// @return _locked amount of harvested rewards that are still not available to be redeemed\r\n  function _lockedRewards() internal view returns (uint256 _locked) {\r\n    uint256 _releaseBlocksPeriod = releaseBlocksPeriod;\r\n    uint256 _blocksSinceLastHarvest = block.number - latestHarvestBlock;\r\n    uint256 _harvestedRewards = harvestedRewards;\r\n\r\n    // NOTE: _harvestedRewards is never set to 0, but rather to 1 to save some gas\r\n    if (_harvestedRewards > 1 && _blocksSinceLastHarvest < _releaseBlocksPeriod) {\r\n      // progressively release harvested rewards\r\n      _locked = _harvestedRewards * (_releaseBlocksPeriod - _blocksSinceLastHarvest) / _releaseBlocksPeriod;\r\n    }\r\n  }\r\n\r\n  // ###################\r\n  // Protected\r\n  // ###################\r\n\r\n  /// @notice This method is used to lend user funds in the lending provider through the IIdleCDOStrategy and update tranches incentives.\r\n  /// The method:\r\n  /// - redeems rewards (if any) from the lending provider\r\n  /// - converts the rewards NOT present in the `incentiveTokens` array, in underlyings through uniswap v2\r\n  /// - calls _updateAccounting to update the accounting of the system with the new underlyings received\r\n  /// - it then convert fees in tranche tokens and stake tranche tokens in the IdleCDOTrancheRewards if any\r\n  /// - sends the correct amount of `incentiveTokens` to the each of the IdleCDOTrancheRewards contracts\r\n  /// - Finally it deposits the (initial unlent balance + the underlyings get from uniswap - fees) in the\r\n  ///   lending provider through the IIdleCDOStrategy `deposit` call\r\n  /// The method will be called by an external, whitelisted, keeper bot which will call the method sistematically (eg once a day)\r\n  /// @dev can be called only by the rebalancer or the owner\r\n  /// @param _skipFlags array of flags, [0] = skip reward redemption, [1] = skip incentives update, [2] = skip fee deposit, [3] = skip all\r\n  /// @param _skipReward array of flags for skipping the market sell of specific rewards. Length should be equal to the `IIdleCDOStrategy(strategy).getRewardTokens()` array\r\n  /// @param _minAmount array of min amounts for uniswap trades. Lenght should be equal to the _skipReward array\r\n  /// @param _sellAmounts array of amounts (of reward tokens) to sell on uniswap. Lenght should be equal to the _minAmount array\r\n  /// if a sellAmount is 0 the whole contract balance for that token is swapped\r\n  /// @param _extraData bytes to be passed to the redeemRewards call\r\n  /// @return _res array of arrays with the following elements:\r\n  ///   [0] _soldAmounts array with amounts of rewards actually sold\r\n  ///   [1] _swappedAmounts array with amounts of _token actually bought\r\n  ///   [2] _redeemedRewards array with amounts of rewards redeemed\r\n  function harvest(\r\n    // _skipFlags[0] _skipRedeem,\r\n    // _skipFlags[1] _skipIncentivesUpdate, [DEPRECATED]\r\n    // _skipFlags[2] _skipFeeDeposit,\r\n    // _skipFlags[3] _skipRedeem && _skipIncentivesUpdate && _skipFeeDeposit,\r\n    bool[] calldata _skipFlags,\r\n    bool[] calldata _skipReward,\r\n    uint256[] calldata _minAmount,\r\n    uint256[] calldata _sellAmounts,\r\n    bytes[] calldata _extraData\r\n  ) public\r\n    virtual\r\n    returns (uint256[][] memory _res) {\r\n    _checkOnlyOwnerOrRebalancer();\r\n    // initalize the returned array (elements will be [_soldAmounts, _swappedAmounts, _redeemedRewards])\r\n    _res = new uint256[][](3);\r\n    // Fetch state variable once to save gas\r\n    IIdleCDOStrategy _strategy = IIdleCDOStrategy(strategy);\r\n    // Check whether to redeem rewards from strategy or not\r\n    if (!_skipFlags[3]) {\r\n      uint256 _totSold;\r\n\r\n      if (!_skipFlags[0]) {\r\n        // Redeem all rewards associated with the strategy\r\n        _res[2] = _strategy.redeemRewards(_extraData[0]);\r\n        // Sell rewards\r\n        (_res[0], _res[1], _totSold) = _sellAllRewards(_strategy, _sellAmounts, _minAmount, _skipReward, _extraData[1]);\r\n      }\r\n      // update last saved harvest block number\r\n      latestHarvestBlock = block.number;\r\n      // update harvested rewards value (avoid setting it to 0 to save some gas)\r\n      harvestedRewards = _totSold == 0 ? 1 : _totSold;\r\n\r\n      // split converted rewards if any and update tranche prices\r\n      // NOTE: harvested rewards won't be counted directly but released over time\r\n      _updateAccounting();\r\n\r\n      if (!_skipFlags[2]) {\r\n        // Get fees in the form of totalSupply diluition\r\n        _depositFees();\r\n      }\r\n    }\r\n\r\n    // Deposit the remaining balance in the lending provider and \r\n    // keep some unlent balance for cheap redeems and as reserve of last resort\r\n    uint256 underlyingBal = _contractTokenBalance(token);\r\n    uint256 idealUnlent = getContractValue() * unlentPerc / FULL_ALLOC;\r\n    if (underlyingBal > idealUnlent) {\r\n      // Put unlent balance at work in the lending provider\r\n      _strategy.deposit(underlyingBal - idealUnlent);\r\n    }\r\n  }\r\n\r\n  /// @notice method used to redeem underlyings from the lending provider\r\n  /// @dev can be called only by the rebalancer or the owner\r\n  /// @param _amount in underlyings to liquidate from lending provider\r\n  /// @param _revertIfNeeded flag to revert if amount liquidated is too low\r\n  /// @return liquidated amount in underlyings\r\n  function liquidate(uint256 _amount, bool _revertIfNeeded) external returns (uint256) {\r\n    _checkOnlyOwnerOrRebalancer();\r\n    return _liquidate(_amount, _revertIfNeeded);\r\n  }\r\n\r\n  // ###################\r\n  // onlyOwner\r\n  // ###################\r\n\r\n  /// @param _active flag to allow Adaptive Yield Split\r\n  function setIsAYSActive(bool _active) external {\r\n    _checkOnlyOwner();\r\n    isAYSActive = _active;\r\n  }\r\n\r\n  /// @param _allowed flag to allow AA withdraws\r\n  function setAllowAAWithdraw(bool _allowed) external {\r\n    _checkOnlyOwner();\r\n    allowAAWithdraw = _allowed;\r\n  }\r\n\r\n  /// @param _allowed flag to allow BB withdraws\r\n  function setAllowBBWithdraw(bool _allowed) external {\r\n    _checkOnlyOwner();\r\n    allowBBWithdraw = _allowed;\r\n  }\r\n\r\n  /// @param _allowed flag to enable the 'default' check (whether _strategyPrice decreased or not)\r\n  function setSkipDefaultCheck(bool _allowed) external {\r\n    _checkOnlyOwner();\r\n    skipDefaultCheck = _allowed;\r\n  }\r\n\r\n  /// @param _allowed flag to enable the check if redeemed amount during liquidations is enough\r\n  function setRevertIfTooLow(bool _allowed) external {\r\n    _checkOnlyOwner();\r\n    revertIfTooLow = _allowed;\r\n  }\r\n\r\n  /// @param _rebalancer new rebalancer address\r\n  function setRebalancer(address _rebalancer) external {\r\n    _checkOnlyOwner();\r\n    require((rebalancer = _rebalancer) != address(0), '0');\r\n  }\r\n\r\n  /// @param _feeReceiver new fee receiver address\r\n  function setFeeReceiver(address _feeReceiver) external {\r\n    _checkOnlyOwner();\r\n    require((feeReceiver = _feeReceiver) != address(0), '0');\r\n  }\r\n\r\n  /// @param _guardian new guardian (pauser) address\r\n  function setGuardian(address _guardian) external {\r\n    _checkOnlyOwner();\r\n    require((guardian = _guardian) != address(0), '0');\r\n  }\r\n\r\n  /// @param _diff max liquidation diff tolerance in underlyings\r\n  function setLiquidationTolerance(uint256 _diff) external {\r\n    _checkOnlyOwner();\r\n    liquidationTolerance = _diff;\r\n  }\r\n\r\n  /// @param _aprSplit apr split for AA, considering FULL_ALLOC = 100%\r\n  function setMinAprSplitAYS(uint256 _aprSplit) external {\r\n    _checkOnlyOwner();\r\n    require((minAprSplitAYS = _aprSplit) <= FULL_ALLOC, '7');\r\n    minAprSplitAYS = _aprSplit;\r\n  }\r\n\r\n  /// @param _fee new fee\r\n  function setFee(uint256 _fee) external {\r\n    _checkOnlyOwner();\r\n    require((fee = _fee) <= MAX_FEE, '7');\r\n  }\r\n\r\n  /// @param _unlentPerc new unlent percentage\r\n  function setUnlentPerc(uint256 _unlentPerc) external {\r\n    _checkOnlyOwner();\r\n    require((unlentPerc = _unlentPerc) <= FULL_ALLOC, '7');\r\n  }\r\n\r\n  /// @param _releaseBlocksPeriod new # of blocks after an harvest during which\r\n  /// harvested rewards gets progressively redistriburted to users\r\n  function setReleaseBlocksPeriod(uint256 _releaseBlocksPeriod) external {\r\n    _checkOnlyOwner();\r\n    releaseBlocksPeriod = _releaseBlocksPeriod;\r\n  }\r\n\r\n  /// @param _trancheAPRSplitRatio new apr split ratio\r\n  function setTrancheAPRSplitRatio(uint256 _trancheAPRSplitRatio) external {\r\n    _checkOnlyOwner();\r\n    require((trancheAPRSplitRatio = _trancheAPRSplitRatio) <= FULL_ALLOC, '7');\r\n  }\r\n\r\n  /// @dev it's REQUIRED to transfer out any incentive tokens accrued before\r\n  /// @param _incentiveTokens array with new incentive tokens\r\n  function setIncentiveTokens(address[] memory _incentiveTokens) external {\r\n    _checkOnlyOwner();\r\n    incentiveTokens = _incentiveTokens;\r\n  }\r\n\r\n  /// @notice Set tranche Rewards contract addresses (for tranches incentivization)\r\n  /// @param _AAStaking IdleCDOTrancheRewards contract address for AA tranches\r\n  /// @param _BBStaking IdleCDOTrancheRewards contract address for BB tranches\r\n  function setStakingRewards(address _AAStaking, address _BBStaking) external {\r\n    _checkOnlyOwner();\r\n    // Read state variable once\r\n    address _AATranche = AATranche;\r\n    address _BBTranche = BBTranche;\r\n    address[] memory _incentiveTokens = incentiveTokens;\r\n    address _currAAStaking = AAStaking;\r\n    address _currBBStaking = BBStaking;\r\n    bool _isAAStakingActive = _currAAStaking != address(0);\r\n    bool _isBBStakingActive = _currBBStaking != address(0);\r\n    address _incentiveToken;\r\n    // Remove allowance for incentive tokens for current staking contracts\r\n    for (uint256 i = 0; i < _incentiveTokens.length; i++) {\r\n      _incentiveToken = _incentiveTokens[i];\r\n      if (_isAAStakingActive) {\r\n        _removeAllowance(_incentiveToken, _currAAStaking);\r\n      }\r\n      if (_isBBStakingActive) {\r\n        _removeAllowance(_incentiveToken, _currBBStaking);\r\n      }\r\n    }\r\n    // Remove allowace for tranche tokens (used for staking fees)\r\n    if (_isAAStakingActive && _AATranche != address(0)) {\r\n      _removeAllowance(_AATranche, _currAAStaking);\r\n    }\r\n    if (_isBBStakingActive && _BBTranche != address(0)) {\r\n      _removeAllowance(_BBTranche, _currBBStaking);\r\n    }\r\n\r\n    // Update staking contract addresses\r\n    AAStaking = _AAStaking;\r\n    BBStaking = _BBStaking;\r\n\r\n    _isAAStakingActive = _AAStaking != address(0);\r\n    _isBBStakingActive = _BBStaking != address(0);\r\n\r\n    // Increase allowance for incentiveTokens\r\n    for (uint256 i = 0; i < _incentiveTokens.length; i++) {\r\n      _incentiveToken = _incentiveTokens[i];\r\n      // Approve each staking contract to spend each incentiveToken on beahlf of this contract\r\n      if (_isAAStakingActive) {\r\n        _allowUnlimitedSpend(_incentiveToken, _AAStaking);\r\n      }\r\n      if (_isBBStakingActive) {\r\n        _allowUnlimitedSpend(_incentiveToken, _BBStaking);\r\n      }\r\n    }\r\n\r\n    // Increase allowance for tranche tokens (used for staking fees)\r\n    if (_isAAStakingActive && _AATranche != address(0)) {\r\n      _allowUnlimitedSpend(_AATranche, _AAStaking);\r\n    }\r\n    if (_isBBStakingActive && _BBTranche != address(0)) {\r\n      _allowUnlimitedSpend(_BBTranche, _BBStaking);\r\n    }\r\n  }\r\n\r\n  /// @notice pause deposits and redeems for all classes of tranches\r\n  /// @dev can be called by both the owner and the guardian\r\n  function emergencyShutdown() external {\r\n    _checkOnlyOwnerOrGuardian();\r\n    _emergencyShutdown();\r\n  }\r\n\r\n  function _emergencyShutdown() internal {\r\n    // prevent deposits\r\n    _pause();\r\n    // prevent withdraws\r\n    allowAAWithdraw = false;\r\n    allowBBWithdraw = false;\r\n    // Allow deposits/withdraws (once selectively re-enabled, eg for AA holders)\r\n    // without checking for lending protocol default\r\n    skipDefaultCheck = true;\r\n    revertIfTooLow = true;\r\n  }\r\n\r\n  /// @notice allow deposits and redeems for all classes of tranches\r\n  /// @dev can be called by the owner only\r\n  function restoreOperations() external {\r\n    _checkOnlyOwner();\r\n    // restore deposits\r\n    _unpause();\r\n    // restore withdraws\r\n    allowAAWithdraw = true;\r\n    allowBBWithdraw = true;\r\n    // Allow deposits/withdraws but checks for lending protocol default\r\n    skipDefaultCheck = false;\r\n    revertIfTooLow = true;\r\n  }\r\n\r\n  /// @notice allow redeems of remaining funds, if any, after default/losses\r\n  /// @dev can be called by the owner only\r\n  function setRedemptionRates() external {\r\n    _checkOnlyOwner();\r\n\r\n    address _token = token;\r\n    address _AATranche = AATranche;\r\n\r\n    // get underlying token balance\r\n    // uint256 _amount = IERC20Detailed(_token).balanceOf(address(this)); \r\n    uint256 _AASupply = IERC20(_AATranche).totalSupply();\r\n    uint256 _lastAAPrice = _tranchePrice(_AATranche);\r\n    console.log('lastAAPrice', _lastAAPrice);\r\n    console.log('lastBBPrice', _tranchePrice(BBTranche));\r\n    // Get all underlyings in the contract\r\n    uint256 _underlyingBalance = IERC20(_token).balanceOf(address(this));\r\n    // Set redeem price as if everything is going to AA \r\n    uint256 redeemPrice = _underlyingBalance * ONE_TRANCHE_TOKEN / _AASupply;\r\n    // Check if rate is too high compared to the last saved price\r\n    if (redeemPrice > _lastAAPrice) {\r\n      // if yes set it to the last saved price\r\n      redeemPrice = _lastAAPrice;\r\n      // calculate funds for AA and BB\r\n      uint256 fundsAA = _AASupply * redeemPrice / ONE_TRANCHE_TOKEN;\r\n      uint256 fundsBB = _underlyingBalance - fundsAA;\r\n      // set final redeem prices\r\n      priceBB = fundsBB * ONE_TRANCHE_TOKEN / IERC20(BBTranche).totalSupply();\r\n    } else {\r\n      priceBB = 0;\r\n    }\r\n    priceAA = redeemPrice;\r\n    console.log('newAAPrice ', priceAA);\r\n    console.log('newBBPrice ', priceBB);\r\n  }\r\n\r\n  /// @notice Pauses deposits and redeems\r\n  /// @dev can be called by both the owner and the guardian\r\n  function pause() external  {\r\n    _checkOnlyOwnerOrGuardian();\r\n    _pause();\r\n  }\r\n\r\n  /// @notice Unpauses deposits and redeems\r\n  /// @dev can be called by both the owner and the guardian\r\n  function unpause() external {\r\n    _checkOnlyOwnerOrGuardian();\r\n    _unpause();\r\n  }\r\n\r\n  // ###################\r\n  // Helpers\r\n  // ###################\r\n\r\n  /// @dev Check that the msg.sender is the either the owner or the guardian\r\n  function _checkOnlyOwnerOrGuardian() internal view {\r\n    require(msg.sender == guardian || msg.sender == owner(), \"6\");\r\n  }\r\n\r\n  /// @dev Check that the msg.sender is the either the owner or the rebalancer\r\n  function _checkOnlyOwnerOrRebalancer() internal view {\r\n    require(msg.sender == rebalancer || msg.sender == owner(), \"6\");\r\n  }\r\n\r\n  /// @notice returns the current balance of this contract for a specific token\r\n  /// @param _token token address\r\n  /// @return balance of `_token` for this contract\r\n  function _contractTokenBalance(address _token) internal view returns (uint256) {\r\n    return IERC20Detailed(_token).balanceOf(address(this));\r\n  }\r\n\r\n  /// @dev Set allowance for _token to 0 for _spender\r\n  /// @param _token token address\r\n  /// @param _spender spender address\r\n  function _removeAllowance(address _token, address _spender) internal {\r\n    IERC20Detailed(_token).safeApprove(_spender, 0);\r\n  }\r\n\r\n  /// @dev Set allowance for _token to unlimited for _spender\r\n  /// @param _token token address\r\n  /// @param _spender spender address\r\n  function _allowUnlimitedSpend(address _token, address _spender) internal {\r\n    IERC20Detailed(_token).safeIncreaseAllowance(_spender, type(uint256).max);\r\n  }\r\n\r\n  /// @dev Set last caller and block.number hash. This should be called at the beginning of the first function to protect\r\n  function _updateCallerBlock() internal {\r\n    _lastCallerBlock = keccak256(abi.encodePacked(tx.origin, block.number));\r\n  }\r\n\r\n  /// @dev Check that the second function is not called in the same tx from the same tx.origin\r\n  function _checkSameTx() internal view {\r\n    require(keccak256(abi.encodePacked(tx.origin, block.number)) != _lastCallerBlock, \"8\");\r\n  }\r\n\r\n  /// @dev this method is only used to check whether a token is an incentive tokens or not\r\n  /// in the harvest call. The maximum number of element in the array will be a small number (eg at most 3-5)\r\n  /// @param _array array of addresses to search for an element\r\n  /// @param _val address of an element to find\r\n  /// @return flag if the _token is an incentive token or not\r\n  function _includesAddress(address[] memory _array, address _val) internal pure returns (bool) {\r\n    for (uint256 i = 0; i < _array.length; i++) {\r\n      if (_array[i] == _val) {\r\n        return true;\r\n      }\r\n    }\r\n    // explicit return to fix linter\r\n    return false;\r\n  }\r\n\r\n  /// @notice concat 2 strings in a single one\r\n  /// @param a first string\r\n  /// @param b second string\r\n  /// @return new string with a and b concatenated\r\n  function _concat(string memory a, string memory b) internal pure returns (string memory) {\r\n    return string(abi.encodePacked(a, b));\r\n  }\r\n}\r\n\r\ncontract TrancheWrapper is ReentrancyGuardUpgradeable, ERC20Upgradeable, IERC4626Upgradeable {\r\n    using SafeERC20Upgradeable for ERC20Upgradeable;\r\n    error AmountZero();\r\n\r\n    event CloneCreated(address indexed instance);\r\n\r\n    uint256 internal constant ONE_TRANCHE_TOKEN = 1e18;\r\n\r\n    /// @dev flag to check if the contract has been cloned via minimal proxy or not\r\n    /// @notice original contract set the flag to true.\r\n    bool public isOriginal;\r\n\r\n    IdleCDO public idleCDO;\r\n    address public token;\r\n    address public tranche;\r\n    bool internal isAATranche;\r\n\r\n    /// @dev constructor doesn't run if the contract is cloned via minimal proxy\r\n    ///      proxy executes the runtime code that does not include the constructor\r\n    constructor() {\r\n        isOriginal = true;\r\n    }\r\n\r\n    function initialize(IdleCDO _idleCDO, address _tranche) public virtual initializer {\r\n        __ReentrancyGuard_init();\r\n        __ERC20_init(\r\n            string(abi.encodePacked(ERC20Upgradeable(_tranche).name(), \"4626Adapter\")),\r\n            string(abi.encodePacked(ERC20Upgradeable(_tranche).symbol(), \"4626\"))\r\n        );\r\n        idleCDO = _idleCDO;\r\n        tranche = _tranche; // 18 decimals\r\n        token = idleCDO.token();\r\n        isAATranche = idleCDO.AATranche() == _tranche;\r\n\r\n        ERC20Upgradeable(token).safeApprove(address(_idleCDO), type(uint256).max); // Vaults are trusted\r\n    }\r\n\r\n    /// @dev clone the contract via minimal proxy. proxy contract must be deployed by the original contract.\r\n    /// @notice the clone is created with the same code of the original contract\r\n    function clone(IdleCDO _idleCDO, address _tranche) external returns (address instance) {\r\n        require(isOriginal, \"!clone\");\r\n        bytes32 salt = keccak256(abi.encodePacked(address(_idleCDO), _tranche));\r\n        instance = ClonesUpgradeable.cloneDeterministic(address(this), salt);\r\n        TrancheWrapper(instance).initialize(_idleCDO, _tranche);\r\n\r\n        emit CloneCreated(instance);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\r\n     */\r\n    function asset() external view returns (address) {\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\r\n     */\r\n    function totalAssets() external view returns (uint256) {\r\n        return idleCDO.getContractValue();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     */\r\n    function convertToShares(uint256 assets) public virtual view returns (uint256) {\r\n        return ((assets * ONE_TRANCHE_TOKEN) / idleCDO.virtualPrice(tranche));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     */\r\n    function convertToAssets(uint256 shares) public virtual view returns (uint256) {\r\n        return (shares * idleCDO.virtualPrice(tranche)) / ONE_TRANCHE_TOKEN;\r\n    }\r\n\r\n    /** @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\r\n     * current on-chain conditions.\r\n     */\r\n    function previewDeposit(uint256 assets) external view returns (uint256) {\r\n        return convertToShares(assets);\r\n    }\r\n\r\n    function previewMint(uint256 shares) public view returns (uint256) {\r\n        return convertToAssets(shares);\r\n    }\r\n\r\n    function previewWithdraw(uint256 assets) public view returns (uint256) {\r\n        return convertToShares(assets);\r\n    }\r\n\r\n    function previewRedeem(uint256 shares) public view returns (uint256) {\r\n        return convertToAssets(shares);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                      DEPOSIT/WITHDRAWAL LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\r\n     */\r\n    function deposit(uint256 assets, address receiver) external nonReentrant returns (uint256 shares) {\r\n        (assets, shares) = _deposit(assets, receiver, msg.sender);\r\n\r\n        emit Deposit(msg.sender, receiver, assets, shares);\r\n    }\r\n\r\n    /**\r\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\r\n     * @notice revert if all of shares cannot be minted.\r\n     */\r\n    function mint(uint256 shares, address receiver) external nonReentrant returns (uint256) {\r\n        if (shares == 0) revert AmountZero();\r\n        uint256 assets = previewMint(shares); // No need to check for rounding error, previewMint rounds up.\r\n\r\n        (uint256 assetsUsed, uint256 mintedShares) = _deposit(assets, receiver, msg.sender);\r\n\r\n        emit Deposit(msg.sender, receiver, assetsUsed, mintedShares);\r\n        return assetsUsed;\r\n    }\r\n\r\n    /// @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\r\n    /// @notice Due to rounding errors, it is possible that less than amount of underlying tokens are sent.\r\n    /// @param assets amount of assets to redeem. If it is equal to type(uint256).max, redeem all shares\r\n    /// @param receiver address to send redeemed assets to\r\n    /// @param owner address to burn shares from\r\n    /// @return shares burned\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner\r\n    ) external nonReentrant returns (uint256) {\r\n        if (assets == 0) revert AmountZero();\r\n\r\n        uint256 shares = (assets == type(uint256).max) ? balanceOf(owner) : previewWithdraw(assets);\r\n\r\n        (uint256 _withdrawn, uint256 _burntShares) = _redeem(shares, receiver, owner);\r\n\r\n        emit Withdraw(msg.sender, receiver, owner, _withdrawn, _burntShares);\r\n        return _burntShares;\r\n    }\r\n\r\n    /// @notice Redeems shares from owner and sends assets of underlying tokens to receiver.\r\n    /// @notice Due to rounding errors, redeem may return less than requested.\r\n    /// @param shares amount of shares to redeem. If shares == type(uint256).max, redeem all shares.\r\n    /// @param receiver address to send redeemed assets to\r\n    /// @param owner address to burn shares from\r\n    /// @return amount of assets withdrawn\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner\r\n    ) external nonReentrant returns (uint256) {\r\n        if (shares == type(uint256).max) shares = balanceOf(owner);\r\n\r\n        (uint256 _withdrawn, uint256 _burntShares) = _redeem(shares, receiver, owner);\r\n\r\n        emit Withdraw(msg.sender, receiver, owner, _withdrawn, _burntShares);\r\n        return _withdrawn;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    DEPOSIT/WITHDRAWAL LIMIT LOGIC\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\r\n     * through a deposit call.\r\n     */\r\n    function maxDeposit(\r\n        address /* receiver */\r\n    ) public view returns (uint256) {\r\n        IdleCDO _idleCDO = idleCDO;\r\n\r\n        uint256 _depositLimit = _idleCDO.limit(); // TVL limit in underlying value\r\n        uint256 _totalAssets = _idleCDO.getContractValue(); // TVL in underlying value\r\n        if (_depositLimit == 0) return type(uint256).max; // 0 means unlimited\r\n        if (_totalAssets >= _depositLimit) return 0;\r\n        return _depositLimit - _totalAssets;\r\n    }\r\n\r\n    function maxMint(address receiver) external view returns (uint256) {\r\n        uint256 _maxDeposit = maxDeposit(receiver);\r\n        if (_maxDeposit == type(uint256).max) return type(uint256).max;\r\n        return convertToShares(_maxDeposit);\r\n    }\r\n\r\n    function maxWithdraw(address owner) external view returns (uint256) {\r\n        bool withdrawable = isAATranche ? idleCDO.allowAAWithdraw() : idleCDO.allowBBWithdraw();\r\n        if (!withdrawable) return 0;\r\n        return convertToAssets(balanceOf(owner));\r\n    }\r\n\r\n    function maxRedeem(address owner) external view returns (uint256) {\r\n        bool withdrawable = isAATranche ? idleCDO.allowAAWithdraw() : idleCDO.allowBBWithdraw();\r\n        if (!withdrawable) return 0;\r\n        return balanceOf(owner);\r\n    }\r\n\r\n    /// @notice Deposit underlying tokens into IdleCDO\r\n    /// @dev This function SHOULD be guarded to prevent potential reentrancy\r\n    /// @param amount Amount of underlying tokens to deposit\r\n    /// @param receiver receiver of tranche shares\r\n    /// @param depositor depositor of underlying tokens\r\n    function _deposit(\r\n        uint256 amount,\r\n        address receiver,\r\n        address depositor\r\n    ) internal virtual returns (uint256 deposited, uint256 mintedShares) {\r\n        IdleCDO _idleCDO = idleCDO;\r\n        ERC20Upgradeable _token = ERC20Upgradeable(token);\r\n\r\n        SafeERC20Upgradeable.safeTransferFrom(_token, depositor, address(this), amount);\r\n\r\n        uint256 beforeBal = _token.balanceOf(address(this));\r\n\r\n        if (isAATranche) {\r\n            mintedShares = _idleCDO.depositAA(amount);\r\n        } else {\r\n            mintedShares = _idleCDO.depositBB(amount);\r\n        }\r\n        uint256 afterBal = _token.balanceOf(address(this));\r\n        deposited = beforeBal - afterBal;\r\n\r\n        _mint(receiver, mintedShares);\r\n    }\r\n\r\n    /// @notice Withdraw underlying tokens from IdleCDO\r\n    /// @dev This function SHOULD be guarded to prevent potential reentrancy\r\n    /// @param shares shares to withdraw\r\n    /// @param receiver receiver of underlying tokens withdrawn from IdleCDO\r\n    /// @param sender sender of tranche shares\r\n    function _redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address sender\r\n    ) internal virtual returns (uint256 withdrawn, uint256 burntShares) {\r\n        IdleCDO _idleCDO = idleCDO;\r\n        ERC20Upgradeable _tranche = ERC20Upgradeable(tranche);\r\n\r\n        // withdraw from idleCDO\r\n        uint256 beforeBal = _tranche.balanceOf(address(this));\r\n\r\n        if (isAATranche) {\r\n            withdrawn = _idleCDO.withdrawAA(shares);\r\n        } else {\r\n            withdrawn = _idleCDO.withdrawBB(shares);\r\n        }\r\n\r\n        burntShares = beforeBal - _tranche.balanceOf(address(this));\r\n        _burnFrom(sender, burntShares);\r\n        SafeERC20Upgradeable.safeTransfer(ERC20Upgradeable(token), receiver, withdrawn);\r\n    }\r\n\r\n    function _burnFrom(address account, uint256 amount) internal {\r\n        if (account != msg.sender) {\r\n            uint256 currentAllowance = allowance(account, msg.sender);\r\n            require(currentAllowance >= amount, \"tw: burn amount exceeds allowance\");\r\n            unchecked {\r\n                _approve(account, msg.sender, currentAllowance - amount);\r\n            }\r\n        }\r\n        _burn(account, amount);\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AmountZero\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"name\":\"CloneCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IdleCDO\",\"name\":\"_idleCDO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tranche\",\"type\":\"address\"}],\"name\":\"clone\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"instance\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"convertToAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"convertToShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"idleCDO\",\"outputs\":[{\"internalType\":\"contract IdleCDO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IdleCDO\",\"name\":\"_idleCDO\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tranche\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isOriginal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maxDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"maxMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"maxWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"previewRedeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"}],\"name\":\"previewWithdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tranche\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"assets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "TrancheWrapper", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "20000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1c8ad5e05d3760b33bd1e33ba487e0690fdf557ae061dba68d0f66d3afc6af0d"}