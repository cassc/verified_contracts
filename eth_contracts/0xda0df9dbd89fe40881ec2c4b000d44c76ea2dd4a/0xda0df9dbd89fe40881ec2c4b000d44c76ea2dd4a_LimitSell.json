{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity =0.8.10;\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetActionsUtilAddresses {\r\n    address internal constant DFS_REG_CONTROLLER_ADDR = 0xF8f8B3C98Cf2E63Df3041b73f80F362a4cf3A576;\r\n    address internal constant REGISTRY_ADDR = 0x287778F121F134C66212FB16c9b53eC991D32f5b;\r\n    address internal constant DFS_LOGGER_ADDR = 0xcE7a977Cac4a481bc84AC06b2Da0df614e621cf3;\r\n    address internal constant SUB_STORAGE_ADDR = 0x1612fc28Ee0AB882eC99842Cde0Fc77ff0691e90;\r\n    address internal constant PROXY_AUTH_ADDR = 0x149667b6FAe2c63D1B4317C716b0D0e4d3E2bD70;\r\n    address internal constant LSV_PROXY_REGISTRY_ADDRESS = 0xa8a3c86c4A2DcCf350E84D2b3c46BDeBc711C16e;\r\n    address internal constant TRANSIENT_STORAGE = 0x2F7Ef2ea5E8c97B8687CA703A0e50Aa5a49B7eb2;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ActionsUtilHelper is MainnetActionsUtilAddresses {\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetAuthAddresses {\r\n    address internal constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\r\n    address internal constant DSGUARD_FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\r\n    address internal constant ADMIN_ADDR = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9; // USED IN ADMIN VAULT CONSTRUCTOR\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract AuthHelper is MainnetAuthAddresses {\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminVault is AuthHelper {\r\n    address public owner;\r\n    address public admin;\r\n\r\n    error SenderNotAdmin();\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        admin = ADMIN_ADDR;\r\n    }\r\n\r\n    /// @notice Admin is able to change owner\r\n    /// @param _owner Address of new owner\r\n    function changeOwner(address _owner) public {\r\n        if (admin != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        owner = _owner;\r\n    }\r\n\r\n    /// @notice Admin is able to set new admin\r\n    /// @param _admin Address of multisig that becomes new admin\r\n    function changeAdmin(address _admin) public {\r\n        if (admin != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        admin = _admin;\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IERC20 {\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint256 digits);\r\n    function totalSupply() external view returns (uint256 supply);\r\n\r\n    function balanceOf(address _owner) external view returns (uint256 balance);\r\n\r\n    function transfer(address _to, uint256 _value) external returns (bool success);\r\n\r\n    function transferFrom(\r\n        address _from,\r\n        address _to,\r\n        uint256 _value\r\n    ) external returns (bool success);\r\n\r\n    function approve(address _spender, uint256 _value) external returns (bool success);\r\n\r\n    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\r\n\r\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary Address {\r\n    //insufficient balance\r\n    error InsufficientBalance(uint256 available, uint256 required);\r\n    //unable to send value, recipient may have reverted\r\n    error SendingValueFail();\r\n    //insufficient balance for call\r\n    error InsufficientBalanceForCall(uint256 available, uint256 required);\r\n    //call to non-contract\r\n    error NonContractCall();\r\n    \r\n    function isContract(address account) internal view returns (bool) {\r\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\r\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\r\n        // for accounts without code, i.e. `keccak256('')`\r\n        bytes32 codehash;\r\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\r\n        // solhint-disable-next-line no-inline-assembly\r\n        assembly {\r\n            codehash := extcodehash(account)\r\n        }\r\n        return (codehash != accountHash && codehash != 0x0);\r\n    }\r\n\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        uint256 balance = address(this).balance;\r\n        if (balance < amount){\r\n            revert InsufficientBalance(balance, amount);\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        if (!(success)){\r\n            revert SendingValueFail();\r\n        }\r\n    }\r\n\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCall(target, data, \"Address: low-level call failed\");\r\n    }\r\n\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return _functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return\r\n            functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        uint256 balance = address(this).balance;\r\n        if (balance < value){\r\n            revert InsufficientBalanceForCall(balance, value);\r\n        }\r\n        return _functionCallWithValue(target, data, value, errorMessage);\r\n    }\r\n\r\n    function _functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 weiValue,\r\n        string memory errorMessage\r\n    ) private returns (bytes memory) {\r\n        if (!(isContract(target))){\r\n            revert NonContractCall();\r\n        }\r\n\r\n        // solhint-disable-next-line avoid-low-level-calls\r\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            // Look for revert reason and bubble it up if present\r\n            if (returndata.length > 0) {\r\n                // The easiest way to bubble the revert reason is using memory via assembly\r\n\r\n                // solhint-disable-next-line no-inline-assembly\r\n                assembly {\r\n                    let returndata_size := mload(returndata)\r\n                    revert(add(32, returndata), returndata_size)\r\n                }\r\n            } else {\r\n                revert(errorMessage);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n        // benefit is lost if 'b' is also tested.\r\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n\r\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return mod(a, b, \"SafeMath: modulo by zero\");\r\n    }\r\n\r\n    function mod(\r\n        uint256 a,\r\n        uint256 b,\r\n        string memory errorMessage\r\n    ) internal pure returns (uint256) {\r\n        require(b != 0, errorMessage);\r\n        return a % b;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary SafeERC20 {\r\n    using SafeMath for uint256;\r\n    using Address for address;\r\n\r\n    function safeTransfer(\r\n        IERC20 token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        IERC20 token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\r\n        );\r\n    }\r\n\r\n    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\r\n    function safeApprove(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    function safeIncreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function safeDecreaseAllowance(\r\n        IERC20 token,\r\n        address spender,\r\n        uint256 value\r\n    ) internal {\r\n        uint256 newAllowance = token.allowance(address(this), spender).sub(\r\n            value,\r\n            \"SafeERC20: decreased allowance below zero\"\r\n        );\r\n        _callOptionalReturn(\r\n            token,\r\n            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\r\n        );\r\n    }\r\n\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        bytes memory returndata = address(token).functionCall(\r\n            data,\r\n            \"SafeERC20: low-level call failed\"\r\n        );\r\n        if (returndata.length > 0) {\r\n            // Return data is optional\r\n            // solhint-disable-next-line max-line-length\r\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract AdminAuth is AuthHelper {\r\n    using SafeERC20 for IERC20;\r\n\r\n    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\r\n\r\n    error SenderNotOwner();\r\n    error SenderNotAdmin();\r\n\r\n    modifier onlyOwner() {\r\n        if (adminVault.owner() != msg.sender){\r\n            revert SenderNotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        if (adminVault.admin() != msg.sender){\r\n            revert SenderNotAdmin();\r\n        }\r\n        _;\r\n    }\r\n\r\n    /// @notice withdraw stuck funds\r\n    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\r\n        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\r\n            payable(_receiver).transfer(_amount);\r\n        } else {\r\n            IERC20(_token).safeTransfer(_receiver, _amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Destroy the contract\r\n    function kill() public onlyAdmin {\r\n        selfdestruct(payable(msg.sender));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSRegistry is AdminAuth {\r\n    error EntryAlreadyExistsError(bytes4);\r\n    error EntryNonExistentError(bytes4);\r\n    error EntryNotInChangeError(bytes4);\r\n    error ChangeNotReadyError(uint256,uint256);\r\n    error EmptyPrevAddrError(bytes4);\r\n    error AlreadyInContractChangeError(bytes4);\r\n    error AlreadyInWaitPeriodChangeError(bytes4);\r\n\r\n    event AddNewContract(address,bytes4,address,uint256);\r\n    event RevertToPreviousAddress(address,bytes4,address,address);\r\n    event StartContractChange(address,bytes4,address,address);\r\n    event ApproveContractChange(address,bytes4,address,address);\r\n    event CancelContractChange(address,bytes4,address,address);\r\n    event StartWaitPeriodChange(address,bytes4,uint256);\r\n    event ApproveWaitPeriodChange(address,bytes4,uint256,uint256);\r\n    event CancelWaitPeriodChange(address,bytes4,uint256,uint256);\r\n\r\n    struct Entry {\r\n        address contractAddr;\r\n        uint256 waitPeriod;\r\n        uint256 changeStartTime;\r\n        bool inContractChange;\r\n        bool inWaitPeriodChange;\r\n        bool exists;\r\n    }\r\n\r\n    mapping(bytes4 => Entry) public entries;\r\n    mapping(bytes4 => address) public previousAddresses;\r\n\r\n    mapping(bytes4 => address) public pendingAddresses;\r\n    mapping(bytes4 => uint256) public pendingWaitTimes;\r\n\r\n    /// @notice Given an contract id returns the registered address\r\n    /// @dev Id is keccak256 of the contract name\r\n    /// @param _id Id of contract\r\n    function getAddr(bytes4 _id) public view returns (address) {\r\n        return entries[_id].contractAddr;\r\n    }\r\n\r\n    /// @notice Helper function to easily query if id is registered\r\n    /// @param _id Id of contract\r\n    function isRegistered(bytes4 _id) public view returns (bool) {\r\n        return entries[_id].exists;\r\n    }\r\n\r\n    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\r\n\r\n    /// @notice Adds a new contract to the registry\r\n    /// @param _id Id of contract\r\n    /// @param _contractAddr Address of the contract\r\n    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\r\n    function addNewContract(\r\n        bytes4 _id,\r\n        address _contractAddr,\r\n        uint256 _waitPeriod\r\n    ) public onlyOwner {\r\n        if (entries[_id].exists){\r\n            revert EntryAlreadyExistsError(_id);\r\n        }\r\n\r\n        entries[_id] = Entry({\r\n            contractAddr: _contractAddr,\r\n            waitPeriod: _waitPeriod,\r\n            changeStartTime: 0,\r\n            inContractChange: false,\r\n            inWaitPeriodChange: false,\r\n            exists: true\r\n        });\r\n\r\n        emit AddNewContract(msg.sender, _id, _contractAddr, _waitPeriod);\r\n    }\r\n\r\n    /// @notice Reverts to the previous address immediately\r\n    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\r\n    /// @param _id Id of contract\r\n    function revertToPreviousAddress(bytes4 _id) public onlyOwner {\r\n        if (!(entries[_id].exists)){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (previousAddresses[_id] == address(0)){\r\n            revert EmptyPrevAddrError(_id);\r\n        }\r\n\r\n        address currentAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = previousAddresses[_id];\r\n\r\n        emit RevertToPreviousAddress(msg.sender, _id, currentAddr, previousAddresses[_id]);\r\n    }\r\n\r\n    /// @notice Starts an address change for an existing entry\r\n    /// @dev Can override a change that is currently in progress\r\n    /// @param _id Id of contract\r\n    /// @param _newContractAddr Address of the new contract\r\n    function startContractChange(bytes4 _id, address _newContractAddr) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (entries[_id].inWaitPeriodChange){\r\n            revert AlreadyInWaitPeriodChangeError(_id);\r\n        }\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inContractChange = true;\r\n\r\n        pendingAddresses[_id] = _newContractAddr;\r\n\r\n        emit StartContractChange(msg.sender, _id, entries[_id].contractAddr, _newContractAddr);\r\n    }\r\n\r\n    /// @notice Changes new contract address, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveContractChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inContractChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){// solhint-disable-line\r\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\r\n        }\r\n\r\n        address oldContractAddr = entries[_id].contractAddr;\r\n        entries[_id].contractAddr = pendingAddresses[_id];\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        previousAddresses[_id] = oldContractAddr;\r\n\r\n        emit ApproveContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\r\n    }\r\n\r\n    /// @notice Cancel pending change\r\n    /// @param _id Id of contract\r\n    function cancelContractChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inContractChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n\r\n        address oldContractAddr = pendingAddresses[_id];\r\n\r\n        pendingAddresses[_id] = address(0);\r\n        entries[_id].inContractChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        emit CancelContractChange(msg.sender, _id, oldContractAddr, entries[_id].contractAddr);\r\n    }\r\n\r\n    /// @notice Starts the change for waitPeriod\r\n    /// @param _id Id of contract\r\n    /// @param _newWaitPeriod New wait time\r\n    function startWaitPeriodChange(bytes4 _id, uint256 _newWaitPeriod) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (entries[_id].inContractChange){\r\n            revert AlreadyInContractChangeError(_id);\r\n        }\r\n\r\n        pendingWaitTimes[_id] = _newWaitPeriod;\r\n\r\n        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\r\n        entries[_id].inWaitPeriodChange = true;\r\n\r\n        emit StartWaitPeriodChange(msg.sender, _id, _newWaitPeriod);\r\n    }\r\n\r\n    /// @notice Changes new wait period, correct time must have passed\r\n    /// @param _id Id of contract\r\n    function approveWaitPeriodChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inWaitPeriodChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n        if (block.timestamp < (entries[_id].changeStartTime + entries[_id].waitPeriod)){ // solhint-disable-line\r\n            revert ChangeNotReadyError(block.timestamp, (entries[_id].changeStartTime + entries[_id].waitPeriod));\r\n        }\r\n\r\n        uint256 oldWaitTime = entries[_id].waitPeriod;\r\n        entries[_id].waitPeriod = pendingWaitTimes[_id];\r\n        \r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n\r\n        emit ApproveWaitPeriodChange(msg.sender, _id, oldWaitTime, entries[_id].waitPeriod);\r\n    }\r\n\r\n    /// @notice Cancel wait period change\r\n    /// @param _id Id of contract\r\n    function cancelWaitPeriodChange(bytes4 _id) public onlyOwner {\r\n        if (!entries[_id].exists){\r\n            revert EntryNonExistentError(_id);\r\n        }\r\n        if (!entries[_id].inWaitPeriodChange){\r\n            revert EntryNotInChangeError(_id);\r\n        }\r\n\r\n        uint256 oldWaitPeriod = pendingWaitTimes[_id];\r\n\r\n        pendingWaitTimes[_id] = 0;\r\n        entries[_id].inWaitPeriodChange = false;\r\n        entries[_id].changeStartTime = 0;\r\n\r\n        emit CancelWaitPeriodChange(msg.sender, _id, oldWaitPeriod, entries[_id].waitPeriod);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract DSAuthority {\r\n    function canCall(\r\n        address src,\r\n        address dst,\r\n        bytes4 sig\r\n    ) public view virtual returns (bool);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DSAuthEvents {\r\n    event LogSetAuthority(address indexed authority);\r\n    event LogSetOwner(address indexed owner);\r\n}\r\n\r\ncontract DSAuth is DSAuthEvents {\r\n    DSAuthority public authority;\r\n    address public owner;\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n        emit LogSetOwner(msg.sender);\r\n    }\r\n\r\n    function setOwner(address owner_) public auth {\r\n        owner = owner_;\r\n        emit LogSetOwner(owner);\r\n    }\r\n\r\n    function setAuthority(DSAuthority authority_) public auth {\r\n        authority = authority_;\r\n        emit LogSetAuthority(address(authority));\r\n    }\r\n\r\n    modifier auth {\r\n        require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\r\n        _;\r\n    }\r\n\r\n    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\r\n        if (src == address(this)) {\r\n            return true;\r\n        } else if (src == owner) {\r\n            return true;\r\n        } else if (authority == DSAuthority(address(0))) {\r\n            return false;\r\n        } else {\r\n            return authority.canCall(src, address(this), sig);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DSNote {\r\n    event LogNote(\r\n        bytes4 indexed sig,\r\n        address indexed guy,\r\n        bytes32 indexed foo,\r\n        bytes32 indexed bar,\r\n        uint256 wad,\r\n        bytes fax\r\n    ) anonymous;\r\n\r\n    modifier note {\r\n        bytes32 foo;\r\n        bytes32 bar;\r\n\r\n        assembly {\r\n            foo := calldataload(4)\r\n            bar := calldataload(36)\r\n        }\r\n\r\n        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\r\n\r\n        _;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract DSProxy is DSAuth, DSNote {\r\n    DSProxyCache public cache; // global cache for contracts\r\n\r\n    constructor(address _cacheAddr) {\r\n        if (!(setCache(_cacheAddr))){\r\n            require(isAuthorized(msg.sender, msg.sig), \"Not authorized\");\r\n        }\r\n    }\r\n\r\n    // solhint-disable-next-line no-empty-blocks\r\n    receive() external payable {}\r\n\r\n    // use the proxy to execute calldata _data on contract _code\r\n    function execute(bytes memory _code, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (address target, bytes32 response);\r\n\r\n    function execute(address _target, bytes memory _data)\r\n        public\r\n        payable\r\n        virtual\r\n        returns (bytes32 response);\r\n\r\n    //set new cache\r\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\r\n}\r\n\r\ncontract DSProxyCache {\r\n    mapping(bytes32 => address) cache;\r\n\r\n    function read(bytes memory _code) public view returns (address) {\r\n        bytes32 hash = keccak256(_code);\r\n        return cache[hash];\r\n    }\r\n\r\n    function write(bytes memory _code) public returns (address target) {\r\n        assembly {\r\n            target := create(0, add(_code, 0x20), mload(_code))\r\n            switch iszero(extcodesize(target))\r\n                case 1 {\r\n                    // throw if contract failed to deploy\r\n                    revert(0, 0)\r\n                }\r\n        }\r\n        bytes32 hash = keccak256(_code);\r\n        cache[hash] = target;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract DefisaverLogger {\r\n    event RecipeEvent(\r\n        address indexed caller,\r\n        string indexed logName\r\n    );\r\n\r\n    event ActionDirectEvent(\r\n        address indexed caller,\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    function logRecipeEvent(\r\n        string memory _logName\r\n    ) public {\r\n        emit RecipeEvent(msg.sender, _logName);\r\n    }\r\n\r\n    function logActionDirectEvent(\r\n        string memory _logName,\r\n        bytes memory _data\r\n    ) public {\r\n        emit ActionDirectEvent(msg.sender, _logName, _data);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nabstract contract ActionBase is AdminAuth, ActionsUtilHelper {\r\n    event ActionEvent(\r\n        string indexed logName,\r\n        bytes data\r\n    );\r\n\r\n    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\r\n\r\n    DefisaverLogger public constant logger = DefisaverLogger(\r\n        DFS_LOGGER_ADDR\r\n    );\r\n\r\n    //Wrong sub index value\r\n    error SubIndexValueError();\r\n    //Wrong return index value\r\n    error ReturnIndexValueError();\r\n\r\n    /// @dev Subscription params index range [128, 255]\r\n    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\r\n    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\r\n\r\n    /// @dev Return params index range [1, 127]\r\n    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\r\n    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\r\n\r\n    /// @dev If the input value should not be replaced\r\n    uint8 public constant NO_PARAM_MAPPING = 0;\r\n\r\n    /// @dev We need to parse Flash loan actions in a different way\r\n    enum ActionType { FL_ACTION, STANDARD_ACTION, FEE_ACTION, CHECK_ACTION, CUSTOM_ACTION }\r\n\r\n    /// @notice Parses inputs and runs the implemented action through a proxy\r\n    /// @dev Is called by the RecipeExecutor chaining actions together\r\n    /// @param _callData Array of input values each value encoded as bytes\r\n    /// @param _subData Array of subscribed vales, replaces input values if specified\r\n    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\r\n    /// @param _returnValues Returns values from actions before, which can be injected in inputs\r\n    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\r\n    function executeAction(\r\n        bytes memory _callData,\r\n        bytes32[] memory _subData,\r\n        uint8[] memory _paramMapping,\r\n        bytes32[] memory _returnValues\r\n    ) public payable virtual returns (bytes32);\r\n\r\n    /// @notice Parses inputs and runs the single implemented action through a proxy\r\n    /// @dev Used to save gas when executing a single action directly\r\n    function executeActionDirect(bytes memory _callData) public virtual payable;\r\n\r\n    /// @notice Returns the type of action we are implementing\r\n    function actionType() public pure virtual returns (uint8);\r\n\r\n\r\n    //////////////////////////// HELPER METHODS ////////////////////////////\r\n\r\n    /// @notice Given an uint256 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can replace the input value with\r\n    /// @param _returnValues Array of subscription data we can replace the input value with\r\n    function _parseParamUint(\r\n        uint _param,\r\n        uint8 _mapType,\r\n        bytes32[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (uint) {\r\n        if (isReplaceable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = uint(_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = uint256(_subData[getSubIndex(_mapType)]);\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n\r\n    /// @notice Given an addr input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can replace the input value with\r\n    /// @param _returnValues Array of subscription data we can replace the input value with\r\n    function _parseParamAddr(\r\n        address _param,\r\n        uint8 _mapType,\r\n        bytes32[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal view returns (address) {\r\n        if (isReplaceable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\r\n            } else {\r\n                /// @dev The last two values are specially reserved for proxy addr and owner addr\r\n                if (_mapType == 254) return address(this); //DSProxy address\r\n                if (_mapType == 255) return DSProxy(payable(address(this))).owner(); // owner of DSProxy\r\n\r\n                _param = address(uint160(uint256(_subData[getSubIndex(_mapType)])));\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Given an bytes32 input, injects return/sub values if specified\r\n    /// @param _param The original input value\r\n    /// @param _mapType Indicated the type of the input in paramMapping\r\n    /// @param _subData Array of subscription data we can replace the input value with\r\n    /// @param _returnValues Array of subscription data we can replace the input value with\r\n    function _parseParamABytes32(\r\n        bytes32 _param,\r\n        uint8 _mapType,\r\n        bytes32[] memory _subData,\r\n        bytes32[] memory _returnValues\r\n    ) internal pure returns (bytes32) {\r\n        if (isReplaceable(_mapType)) {\r\n            if (isReturnInjection(_mapType)) {\r\n                _param = (_returnValues[getReturnIndex(_mapType)]);\r\n            } else {\r\n                _param = _subData[getSubIndex(_mapType)];\r\n            }\r\n        }\r\n\r\n        return _param;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value indicated that we need to inject values\r\n    /// @param _type Indicated the type of the input\r\n    function isReplaceable(uint8 _type) internal pure returns (bool) {\r\n        return _type != NO_PARAM_MAPPING;\r\n    }\r\n\r\n    /// @notice Checks if the paramMapping value is in the return value range\r\n    /// @param _type Indicated the type of the input\r\n    function isReturnInjection(uint8 _type) internal pure returns (bool) {\r\n        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in return array value\r\n    /// @param _type Indicated the type of the input\r\n    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\r\n        if (!(isReturnInjection(_type))){\r\n            revert SubIndexValueError();\r\n        }\r\n\r\n        return (_type - RETURN_MIN_INDEX_VALUE);\r\n    }\r\n\r\n    /// @notice Transforms the paramMapping value to the index in sub array value\r\n    /// @param _type Indicated the type of the input\r\n    function getSubIndex(uint8 _type) internal pure returns (uint8) {\r\n        if (_type < SUB_MIN_INDEX_VALUE){\r\n            revert ReturnIndexValueError();\r\n        }\r\n        return (_type - SUB_MIN_INDEX_VALUE);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract DSMath {\r\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x + y;\r\n    }\r\n\r\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x - y;\r\n    }\r\n\r\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = x * y;\r\n    }\r\n\r\n    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x / y;\r\n    }\r\n\r\n    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    function imin(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x <= y ? x : y;\r\n    }\r\n\r\n    function imax(int256 x, int256 y) internal pure returns (int256 z) {\r\n        return x >= y ? x : y;\r\n    }\r\n\r\n    uint256 constant WAD = 10**18;\r\n    uint256 constant RAY = 10**27;\r\n\r\n    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), WAD / 2) / WAD;\r\n    }\r\n\r\n    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, y), RAY / 2) / RAY;\r\n    }\r\n\r\n    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, WAD), y / 2) / y;\r\n    }\r\n\r\n    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\r\n        z = add(mul(x, RAY), y / 2) / y;\r\n    }\r\n\r\n    // This famous algorithm is called \"exponentiation by squaring\"\r\n    // and calculates x^n with x as fixed-point and n as regular unsigned.\r\n    //\r\n    // It's O(log n), instead of O(n) for naive repeated multiplication.\r\n    //\r\n    // These facts are why it works:\r\n    //\r\n    //  If n is even, then x^n = (x^2)^(n/2).\r\n    //  If n is odd,  then x^n = x * x^(n-1),\r\n    //   and applying the equation for even x gives\r\n    //    x^n = x * (x^2)^((n-1) / 2).\r\n    //\r\n    //  Also, EVM division is flooring and\r\n    //    floor[(n-1) / 2] = floor[n / 2].\r\n    //\r\n    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\r\n        z = n % 2 != 0 ? x : RAY;\r\n\r\n        for (n /= 2; n != 0; n /= 2) {\r\n            x = rmul(x, x);\r\n\r\n            if (n % 2 != 0) {\r\n                z = rmul(z, x);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract FeeRecipient is AdminAuth {\r\n\r\n    address public wallet;\r\n\r\n    constructor(address _newWallet) {\r\n        wallet = _newWallet;\r\n    }\r\n\r\n    function getFeeAddr() public view returns (address) {\r\n        return wallet;\r\n    }\r\n\r\n    function changeWalletAddr(address _newWallet) public onlyOwner {\r\n        wallet = _newWallet;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface ILendingPoolAddressesProviderV2 {\r\n  event LendingPoolUpdated(address indexed newAddress);\r\n  event ConfigurationAdminUpdated(address indexed newAddress);\r\n  event EmergencyAdminUpdated(address indexed newAddress);\r\n  event LendingPoolConfiguratorUpdated(address indexed newAddress);\r\n  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\r\n  event PriceOracleUpdated(address indexed newAddress);\r\n  event LendingRateOracleUpdated(address indexed newAddress);\r\n  event ProxyCreated(bytes32 id, address indexed newAddress);\r\n  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\r\n\r\n  function setAddress(bytes32 id, address newAddress) external;\r\n\r\n  function setAddressAsProxy(bytes32 id, address impl) external;\r\n\r\n  function getAddress(bytes32 id) external view returns (address);\r\n\r\n  function getLendingPool() external view returns (address);\r\n\r\n  function setLendingPoolImpl(address pool) external;\r\n\r\n  function getLendingPoolConfigurator() external view returns (address);\r\n\r\n  function setLendingPoolConfiguratorImpl(address configurator) external;\r\n\r\n  function getLendingPoolCollateralManager() external view returns (address);\r\n\r\n  function setLendingPoolCollateralManager(address manager) external;\r\n\r\n  function getPoolAdmin() external view returns (address);\r\n\r\n  function setPoolAdmin(address admin) external;\r\n\r\n  function getEmergencyAdmin() external view returns (address);\r\n\r\n  function setEmergencyAdmin(address admin) external;\r\n\r\n  function getPriceOracle() external view returns (address);\r\n\r\n  function setPriceOracle(address priceOracle) external;\r\n\r\n  function getLendingRateOracle() external view returns (address);\r\n\r\n  function setLendingRateOracle(address lendingRateOracle) external;\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IPriceOracleGetterAave {\r\n    function getAssetPrice(address _asset) external virtual view returns (uint256);\r\n    function getAssetsPrices(address[] calldata _assets) external virtual view returns(uint256[] memory);\r\n    function getSourceOfAsset(address _asset) external virtual view returns(address);\r\n    function getFallbackOracle() external virtual view returns(address);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IAggregatorV3 {\r\n    function decimals() external view returns (uint8);\r\n\r\n    function description() external view returns (string memory);\r\n\r\n    function version() external view returns (uint256);\r\n\r\n    // getRoundData and latestRoundData should both raise \"No data present\"\r\n    // if they do not have data to report, instead of returning unset values\r\n    // which could be misinterpreted as actual reported values.\r\n    function getRoundData(uint80 _roundId)\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestRoundData()\r\n        external\r\n        view\r\n        returns (\r\n            uint80 roundId,\r\n            int256 answer,\r\n            uint256 startedAt,\r\n            uint256 updatedAt,\r\n            uint80 answeredInRound\r\n        );\r\n\r\n    function latestAnswer() external view returns (uint256);\r\n\r\n    function getTimestamp(uint256 _roundId) external view returns (uint256);\r\n\r\n    function phaseId() external view returns (uint16);\r\n\r\n    function phaseAggregators(uint16 _phaseId) external view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\ninterface IFeedRegistry {\r\n  struct Phase {\r\n    uint16 phaseId;\r\n    uint80 startingAggregatorRoundId;\r\n    uint80 endingAggregatorRoundId;\r\n  }\r\n\r\n  event FeedProposed(\r\n    address indexed asset,\r\n    address indexed denomination,\r\n    address indexed proposedAggregator,\r\n    address currentAggregator,\r\n    address sender\r\n  );\r\n  event FeedConfirmed(\r\n    address indexed asset,\r\n    address indexed denomination,\r\n    address indexed latestAggregator,\r\n    address previousAggregator,\r\n    uint16 nextPhaseId,\r\n    address sender\r\n  );\r\n\r\n  // V3 AggregatorV3Interface\r\n\r\n  function decimals(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint8\r\n    );\r\n\r\n  function description(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      string memory\r\n    );\r\n\r\n  function version(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256\r\n    );\r\n\r\n  function latestRoundData(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function getRoundData(\r\n    address base,\r\n    address quote,\r\n    uint80 _roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 roundId,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  // V2 AggregatorInterface\r\n\r\n  function latestAnswer(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      int256 answer\r\n    );\r\n\r\n  function latestTimestamp(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 timestamp\r\n    );\r\n\r\n  function latestRound(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 roundId\r\n    );\r\n\r\n  function getAnswer(\r\n    address base,\r\n    address quote,\r\n    uint256 roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      int256 answer\r\n    );\r\n\r\n  function getTimestamp(\r\n    address base,\r\n    address quote,\r\n    uint256 roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint256 timestamp\r\n    );\r\n\r\n\r\n  function isFeedEnabled(\r\n    address aggregator\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      bool\r\n    );\r\n\r\n  function getPhase(\r\n    address base,\r\n    address quote,\r\n    uint16 phaseId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      Phase memory phase\r\n    );\r\n\r\n  // Round helpers\r\n\r\n\r\n  function getPhaseRange(\r\n    address base,\r\n    address quote,\r\n    uint16 phaseId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 startingRoundId,\r\n      uint80 endingRoundId\r\n    );\r\n\r\n  function getPreviousRoundId(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  ) external\r\n    view\r\n    returns (\r\n      uint80 previousRoundId\r\n    );\r\n\r\n  function getNextRoundId(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  ) external\r\n    view\r\n    returns (\r\n      uint80 nextRoundId\r\n    );\r\n\r\n  // Feed management\r\n\r\n  function proposeFeed(\r\n    address base,\r\n    address quote,\r\n    address aggregator\r\n  ) external;\r\n\r\n  function confirmFeed(\r\n    address base,\r\n    address quote,\r\n    address aggregator\r\n  ) external;\r\n\r\n  // Proposed aggregator\r\n\r\n  function proposedGetRoundData(\r\n    address base,\r\n    address quote,\r\n    uint80 roundId\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 id,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  function proposedLatestRoundData(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint80 id,\r\n      int256 answer,\r\n      uint256 startedAt,\r\n      uint256 updatedAt,\r\n      uint80 answeredInRound\r\n    );\r\n\r\n  // Phases\r\n  function getCurrentPhaseId(\r\n    address base,\r\n    address quote\r\n  )\r\n    external\r\n    view\r\n    returns (\r\n      uint16 currentPhaseId\r\n    );\r\n\r\n    function getFeed(address base, address quote) external view returns (address);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IWStEth {\r\n    function wrap(uint256 _stETHAmount) external returns (uint256);\r\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\r\n    function stEthPerToken() external view returns (uint256);\r\n    function tokensPerStEth() external view returns (uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nlibrary Denominations {\r\n  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n  address public constant BTC = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\r\n\r\n  // Fiat currencies follow https://en.wikipedia.org/wiki/ISO_4217\r\n  address public constant USD = address(840);\r\n  address public constant GBP = address(826);\r\n  address public constant EUR = address(978);\r\n  address public constant JPY = address(392);\r\n  address public constant KRW = address(410);\r\n  address public constant CNY = address(156);\r\n  address public constant AUD = address(36);\r\n  address public constant CAD = address(124);\r\n  address public constant CHF = address(756);\r\n  address public constant ARS = address(32);\r\n  address public constant PHP = address(608);\r\n  address public constant NZD = address(554);\r\n  address public constant SGD = address(702);\r\n  address public constant NGN = address(566);\r\n  address public constant ZAR = address(710);\r\n  address public constant RUB = address(643);\r\n  address public constant INR = address(356);\r\n  address public constant BRL = address(986);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetUtilAddresses {\r\n    address internal refillCaller = 0x33fDb79aFB4456B604f376A45A546e7ae700e880;\r\n    address internal feeAddr = 0x76720aC2574631530eC8163e4085d6F98513fb27;\r\n\r\n    address internal constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\r\n    address internal constant UNI_V2_ROUTER = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\r\n    address internal constant MKR_PROXY_REGISTRY = 0x4678f0a6958e4D2Bc4F1BAF7Bc52E8F3564f3fE4;\r\n    address internal constant AAVE_MARKET = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\r\n    address internal constant AAVE_V3_MARKET = 0x2f39d218133AFaB8F2B819B1066c7E434Ad94E9e;\r\n    address internal constant SPARK_MARKET = 0x02C3eA4e34C0cBd694D2adFa2c690EECbC1793eE;\r\n\r\n    address internal constant PROXY_FACTORY_ADDR = 0xA26e15C895EFc0616177B7c1e7270A4C7D51C997;\r\n    address internal constant DFS_PROXY_REGISTRY_ADDR = 0x29474FdaC7142f9aB7773B8e38264FA15E3805ed;\r\n\r\n    address internal constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address internal constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address internal constant WSTETH_ADDR = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\r\n    address internal constant STETH_ADDR = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\r\n    address internal constant WBTC_ADDR = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\r\n    address internal constant CHAINLINK_WBTC_ADDR = 0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB;\r\n    address internal constant DAI_ADDR = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\r\n\r\n    address internal constant FEE_RECEIVER_ADMIN_ADDR = 0xA74e9791D7D66c6a14B2C571BdA0F2A1f6D64E06;\r\n\r\n    address internal constant UNI_V3_ROUTER = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\r\n    address internal constant UNI_V3_QUOTER = 0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6;\r\n\r\n    address internal constant FEE_RECIPIENT = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\r\n\r\n    // not needed on mainnet\r\n    address internal constant DEFAULT_BOT = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    address public constant CHAINLINK_FEED_REGISTRY = 0x47Fb2585D2C56Fe188D0E6ec628a38b74fCeeeDf;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract UtilHelper is MainnetUtilAddresses{\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract TokenPriceHelper is DSMath, UtilHelper {\r\n    IFeedRegistry public constant feedRegistry = IFeedRegistry(CHAINLINK_FEED_REGISTRY);\r\n\r\n    /// @dev Helper function that returns chainlink price data\r\n    /// @param _inputTokenAddr Token address we are looking the usd price for\r\n    /// @param _roundId Chainlink roundId, if 0 uses the latest\r\n    function getRoundInfo(address _inputTokenAddr, uint80 _roundId, IAggregatorV3 aggregator)\r\n        public\r\n        view\r\n        returns (uint256, uint256 updateTimestamp)\r\n    {\r\n        int256 price;\r\n\r\n        if (_roundId == 0) {\r\n            (, price, , updateTimestamp, ) = aggregator.latestRoundData();\r\n        } else {\r\n            (, price, , updateTimestamp, ) = aggregator.getRoundData(_roundId);\r\n        }\r\n\r\n        // no price for wsteth, can calculate from steth\r\n        if (_inputTokenAddr == WSTETH_ADDR) price = getWStEthPrice(price);\r\n\r\n        return (uint256(price), updateTimestamp);\r\n    }\r\n\r\n    /// @dev Helper function that returns chainlink price data\r\n    /// @param _inputTokenAddr Token address we are looking the usd price for\r\n    /// @param _roundId Chainlink roundId, if 0 uses the latest\r\n    function getRoundInfo(address _inputTokenAddr, uint80 _roundId)\r\n        public\r\n        view\r\n        returns (uint256, uint256 updateTimestamp)\r\n    {\r\n        address tokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\r\n        IAggregatorV3 aggregator = IAggregatorV3(feedRegistry.getFeed(tokenAddr, Denominations.USD));\r\n\r\n        return getRoundInfo(_inputTokenAddr, _roundId, aggregator);\r\n    }\r\n\r\n    /// @dev helper function that returns latest token price in USD\r\n    /// @dev 1. Chainlink USD feed\r\n    /// @dev 2. Chainlink ETH feed\r\n    /// @dev 3. Aave feed\r\n    /// @dev if no price found return 0\r\n    function getPriceInUSD(address _inputTokenAddr) public view returns (uint256) {\r\n        address chainlinkTokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\r\n\r\n        int256 price;\r\n        price = getChainlinkPriceInUSD(chainlinkTokenAddr, true);\r\n        if (price == 0){\r\n            price = int256(getAaveTokenPriceInUSD(_inputTokenAddr));\r\n        }\r\n        if (price == 0){\r\n            price = int256(getAaveV3TokenPriceInUSD(_inputTokenAddr));\r\n        }\r\n        if (price == 0){\r\n            price = int256(getSparkTokenPriceInUSD(_inputTokenAddr));\r\n        }\r\n        if (price == 0){\r\n            return 0;\r\n        }\r\n\r\n        if (_inputTokenAddr == WSTETH_ADDR) price = getWStEthPrice(price);\r\n        if (_inputTokenAddr == WBTC_ADDR) price = getWBtcPrice(price);\r\n        return uint256(price);\r\n    }\r\n\r\n    /// @dev helper function that returns latest token price in USD\r\n    /// @dev 1. Chainlink USD feed\r\n    /// @dev 2. Chainlink ETH feed\r\n    /// @dev 3. Aave feed\r\n    /// @dev if no price found return 0\r\n    /// @dev expect WBTC and WSTETH to have chainlink USD price\r\n    function getPriceInETH(address _inputTokenAddr) public view returns (uint256) {\r\n        address chainlinkTokenAddr = getAddrForChainlinkOracle(_inputTokenAddr);\r\n\r\n        uint256 chainlinkPriceInUSD = uint256(getChainlinkPriceInUSD(chainlinkTokenAddr, false));\r\n        if (chainlinkPriceInUSD != 0){\r\n            uint256 chainlinkETHPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\r\n            uint256 priceInEth = wdiv(chainlinkPriceInUSD, chainlinkETHPriceInUSD);\r\n            if (_inputTokenAddr == WSTETH_ADDR) return uint256(getWStEthPrice(int256(priceInEth)));\r\n            if (_inputTokenAddr == WBTC_ADDR) return uint256(getWBtcPrice(int256(priceInEth)));\r\n            return priceInEth;\r\n        }\r\n\r\n        uint256 chainlinkPriceInETH = uint256(getChainlinkPriceInETH(chainlinkTokenAddr));\r\n        if (chainlinkPriceInETH != 0) return chainlinkPriceInETH;\r\n\r\n        uint256 aavePriceInETH = getAaveTokenPriceInETH(_inputTokenAddr);\r\n        if (aavePriceInETH != 0) return aavePriceInETH;\r\n\r\n        uint256 aaveV3PriceInETH = getAaveV3TokenPriceInETH(_inputTokenAddr);\r\n        if (aaveV3PriceInETH != 0) return aaveV3PriceInETH;\r\n\r\n        uint256 sparkPriceInETH = getSparkTokenPriceInETH(_inputTokenAddr);\r\n        if (sparkPriceInETH != 0) return sparkPriceInETH;\r\n        \r\n        return 0;\r\n    }\r\n\r\n    /// @dev If there's no USD price feed can fallback to ETH price feed, if there's no USD or ETH price feed return 0\r\n    function getChainlinkPriceInUSD(address _inputTokenAddr, bool _useFallback) public view returns (int256 chainlinkPriceInUSD) {\r\n        try feedRegistry.latestRoundData(_inputTokenAddr, Denominations.USD) returns (uint80, int256 answer, uint256, uint256, uint80){\r\n            chainlinkPriceInUSD = answer;\r\n        } catch {\r\n            if (_useFallback){\r\n                uint256 chainlinkPriceInETH = uint256(getChainlinkPriceInETH(_inputTokenAddr));\r\n                uint256 chainlinkETHPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\r\n                chainlinkPriceInUSD = int256(wmul(chainlinkPriceInETH, chainlinkETHPriceInUSD));\r\n            } else {\r\n                chainlinkPriceInUSD = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /// @dev If there's no ETH price feed returns 0\r\n    function getChainlinkPriceInETH(address _inputTokenAddr) public view returns (int256 chainlinkPriceInETH) {\r\n        try feedRegistry.latestRoundData(_inputTokenAddr, Denominations.ETH) returns (uint80, int256 answer, uint256, uint256, uint80){\r\n            chainlinkPriceInETH = answer;\r\n        } catch {\r\n            chainlinkPriceInETH = 0;\r\n        }\r\n    }\r\n    \r\n    /// @dev chainlink uses different addresses for WBTC and ETH\r\n    /// @dev there is only STETH price feed so we use that for WSTETH and handle later \r\n    function getAddrForChainlinkOracle(address _inputTokenAddr)\r\n        public\r\n        pure\r\n        returns (address tokenAddrForChainlinkUsage)\r\n    {\r\n        if (_inputTokenAddr == WETH_ADDR) {\r\n            tokenAddrForChainlinkUsage = ETH_ADDR;\r\n        } else if (_inputTokenAddr == WSTETH_ADDR) {\r\n            tokenAddrForChainlinkUsage = STETH_ADDR;\r\n        } else if (_inputTokenAddr == WBTC_ADDR) {\r\n            tokenAddrForChainlinkUsage = CHAINLINK_WBTC_ADDR;\r\n        } else {\r\n            tokenAddrForChainlinkUsage = _inputTokenAddr;\r\n        }\r\n    }\r\n\r\n    function getWStEthPrice(int256 _stEthPrice) public view returns (int256 wStEthPrice) {\r\n        wStEthPrice = int256(wmul(uint256(_stEthPrice), IWStEth(WSTETH_ADDR).stEthPerToken()));\r\n    }\r\n\r\n    function getWBtcPrice(int256 _btcPrice) public view returns (int256 wBtcPrice) {\r\n        (, int256 wBtcPriceToPeg, , , ) = feedRegistry.latestRoundData(WBTC_ADDR, CHAINLINK_WBTC_ADDR);\r\n        wBtcPrice = (_btcPrice * wBtcPriceToPeg + 1e8 / 2) / 1e8;\r\n    }\r\n\r\n    /// @dev if price isn't found this returns 0\r\n    function getAaveTokenPriceInETH(address _tokenAddr) public view returns (uint256 price) {\r\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(AAVE_MARKET).getPriceOracle();\r\n\r\n        try IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr) returns (uint256 tokenPrice){\r\n            price = tokenPrice;\r\n        } catch {\r\n            price = 0;\r\n        }\r\n    }\r\n\r\n    /// @dev if price isn't found this returns 0\r\n    function getAaveTokenPriceInUSD(address _tokenAddr) public view returns (uint256) {\r\n        uint256 tokenAavePriceInETH = getAaveTokenPriceInETH(_tokenAddr);\r\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\r\n\r\n        return wmul(tokenAavePriceInETH, ethPriceInUSD);\r\n    }\r\n\r\n    function getAaveV3TokenPriceInUSD(address _tokenAddr) public view returns (uint256 price) {\r\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(AAVE_V3_MARKET).getPriceOracle();\r\n\r\n        try IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr) returns (uint256 tokenPrice) {\r\n            price = tokenPrice;\r\n        } catch {\r\n            price = 0;\r\n        }\r\n    }\r\n\r\n    /// @dev if price isn't found this returns 0\r\n    function getAaveV3TokenPriceInETH(address _tokenAddr) public view returns (uint256) {\r\n        uint256 tokenAavePriceInUSD = getAaveV3TokenPriceInUSD(_tokenAddr);\r\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\r\n\r\n        return wdiv(tokenAavePriceInUSD, ethPriceInUSD);\r\n    }\r\n\r\n    function getSparkTokenPriceInUSD(address _tokenAddr) public view returns (uint256 price) {\r\n        address priceOracleAddress = ILendingPoolAddressesProviderV2(SPARK_MARKET).getPriceOracle();\r\n\r\n        try IPriceOracleGetterAave(priceOracleAddress).getAssetPrice(_tokenAddr) returns (uint256 tokenPrice) {\r\n            price = tokenPrice;\r\n        } catch {\r\n            price = 0;\r\n        }\r\n    }\r\n\r\n    /// @dev if price isn't found this returns 0\r\n    function getSparkTokenPriceInETH(address _tokenAddr) public view returns (uint256) {\r\n        uint256 tokenSparkPriceInUSD = getSparkTokenPriceInUSD(_tokenAddr);\r\n        uint256 ethPriceInUSD = uint256(getChainlinkPriceInUSD(ETH_ADDR, false));\r\n\r\n        return wdiv(tokenSparkPriceInUSD, ethPriceInUSD);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IWETH {\r\n    function allowance(address, address) public virtual view returns (uint256);\r\n\r\n    function balanceOf(address) public virtual view returns (uint256);\r\n\r\n    function approve(address, uint256) public virtual;\r\n\r\n    function transfer(address, uint256) public virtual returns (bool);\r\n\r\n    function transferFrom(\r\n        address,\r\n        address,\r\n        uint256\r\n    ) public virtual returns (bool);\r\n\r\n    function deposit() public payable virtual;\r\n\r\n    function withdraw(uint256) public virtual;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nlibrary TokenUtils {\r\n    using SafeERC20 for IERC20;\r\n\r\n    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\r\n    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n\r\n    function approveToken(\r\n        address _tokenAddr,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal {\r\n        if (_tokenAddr == ETH_ADDR) return;\r\n\r\n        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\r\n            IERC20(_tokenAddr).safeApprove(_to, _amount);\r\n        }\r\n    }\r\n\r\n    function pullTokensIfNeeded(\r\n        address _token,\r\n        address _from,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        // handle max uint amount\r\n        if (_amount == type(uint256).max) {\r\n            _amount = getBalance(_token, _from);\r\n        }\r\n\r\n        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\r\n            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function withdrawTokens(\r\n        address _token,\r\n        address _to,\r\n        uint256 _amount\r\n    ) internal returns (uint256) {\r\n        if (_amount == type(uint256).max) {\r\n            _amount = getBalance(_token, address(this));\r\n        }\r\n\r\n        if (_to != address(0) && _to != address(this) && _amount != 0) {\r\n            if (_token != ETH_ADDR) {\r\n                IERC20(_token).safeTransfer(_to, _amount);\r\n            } else {\r\n                (bool success, ) = _to.call{value: _amount}(\"\");\r\n                require(success, \"Eth send fail\");\r\n            }\r\n        }\r\n\r\n        return _amount;\r\n    }\r\n\r\n    function depositWeth(uint256 _amount) internal {\r\n        IWETH(WETH_ADDR).deposit{value: _amount}();\r\n    }\r\n\r\n    function withdrawWeth(uint256 _amount) internal {\r\n        IWETH(WETH_ADDR).withdraw(_amount);\r\n    }\r\n\r\n    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\r\n        if (_tokenAddr == ETH_ADDR) {\r\n            return _acc.balance;\r\n        } else {\r\n            return IERC20(_tokenAddr).balanceOf(_acc);\r\n        }\r\n    }\r\n\r\n    function getTokenDecimals(address _token) internal view returns (uint256) {\r\n        if (_token == ETH_ADDR) return 18;\r\n\r\n        return IERC20(_token).decimals();\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract GasFeeHelper is DSMath, TokenPriceHelper {\r\n    using TokenUtils for address;\r\n\r\n    FeeRecipient public constant feeRecipient = FeeRecipient(FEE_RECIPIENT);\r\n\r\n    uint256 public constant SANITY_GAS_PRICE = 1000 gwei;\r\n\r\n    /// @dev Divider for input amount, 5 bps\r\n    uint256 public constant MAX_DFS_FEE = 2000;\r\n\r\n    function calcGasCost(uint256 _gasUsed, address _feeToken, uint256 _l1GasCostInEth) public view returns (uint256 txCost) {\r\n        uint256 gasPrice = tx.gasprice;\r\n\r\n        // gas price must be in a reasonable range\r\n        if (tx.gasprice > SANITY_GAS_PRICE) {\r\n            gasPrice = SANITY_GAS_PRICE;\r\n        }\r\n\r\n        // can't use more gas than the block gas limit\r\n        if (_gasUsed > block.gaslimit) {\r\n            _gasUsed = block.gaslimit;\r\n        }\r\n\r\n        // calc gas used\r\n        txCost = (_gasUsed * gasPrice) + _l1GasCostInEth;\r\n\r\n        // convert to token amount\r\n        if (_feeToken != TokenUtils.WETH_ADDR) {\r\n            uint256 price = getPriceInETH(_feeToken);\r\n            uint256 tokenDecimals = _feeToken.getTokenDecimals();\r\n\r\n            require(tokenDecimals <= 18, \"Token decimal too big\");\r\n\r\n            if (price > 0) {\r\n                txCost = wdiv(txCost, uint256(price)) / (10**(18 - tokenDecimals));\r\n            } else {\r\n                txCost = 0;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract DFSExchangeData {\r\n\r\n    // first is empty to keep the legacy order in place\r\n    // EMPTY was _, but in >0.8.x using underscore as name is forbidden\r\n    enum ExchangeType { EMPTY, OASIS, KYBER, UNISWAP, ZEROX }\r\n\r\n    enum ExchangeActionType { SELL, BUY }\r\n\r\n    struct OffchainData {\r\n        address wrapper;\r\n        address exchangeAddr;\r\n        address allowanceTarget;\r\n        uint256 price;\r\n        uint256 protocolFee;\r\n        bytes callData;\r\n    }\r\n\r\n    struct ExchangeData {\r\n        address srcAddr;\r\n        address destAddr;\r\n        uint256 srcAmount;\r\n        uint256 destAmount;\r\n        uint256 minPrice;\r\n        uint256 dfsFeeDivider; // service fee divider\r\n        address user; // user to check special fee\r\n        address wrapper;\r\n        bytes wrapperData;\r\n        OffchainData offchainData;\r\n    }\r\n\r\n    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\r\n        return abi.encode(_exData);\r\n    }\r\n\r\n    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\r\n        _exData = abi.decode(_data, (ExchangeData));\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\ncontract Discount {\r\n    address public owner;\r\n    mapping(address => CustomServiceFee) public serviceFees;\r\n\r\n    uint256 constant MAX_SERVICE_FEE = 400;\r\n\r\n    error OnlyOwner();\r\n    error WrongFeeValue();\r\n\r\n    struct CustomServiceFee {\r\n        bool active;\r\n        uint256 amount;\r\n    }\r\n\r\n    constructor() {\r\n        owner = msg.sender;\r\n    }\r\n\r\n    function isCustomFeeSet(address _user) public view returns (bool) {\r\n        return serviceFees[_user].active;\r\n    }\r\n\r\n    function getCustomServiceFee(address _user) public view returns (uint256) {\r\n        return serviceFees[_user].amount;\r\n    }\r\n\r\n    function setServiceFee(address _user, uint256 _fee) public {\r\n        if (msg.sender != owner){\r\n            revert OnlyOwner();\r\n        }\r\n\r\n        if (!(_fee >= MAX_SERVICE_FEE || _fee == 0)){\r\n            revert WrongFeeValue();\r\n        }\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\r\n    }\r\n\r\n    function disableServiceFee(address _user) public {\r\n        if (msg.sender != owner){\r\n            revert OnlyOwner();\r\n        }\r\n\r\n        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSExchangeHelper {\r\n    \r\n    using TokenUtils for address;\r\n    \r\n    error InvalidOffchainData();\r\n    error OutOfRangeSlicingError();\r\n\r\n    using SafeERC20 for IERC20;\r\n\r\n    function sendLeftover(\r\n        address _srcAddr,\r\n        address _destAddr,\r\n        address payable _to\r\n    ) internal {\r\n        // clean out any eth leftover\r\n        TokenUtils.ETH_ADDR.withdrawTokens(_to, type(uint256).max);\r\n\r\n        _srcAddr.withdrawTokens(_to, type(uint256).max);\r\n        _destAddr.withdrawTokens(_to, type(uint256).max);\r\n    }\r\n\r\n    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\r\n        if (bs.length < start + 32){\r\n            revert OutOfRangeSlicingError();\r\n        }\r\n\r\n\r\n        uint256 x;\r\n        assembly {\r\n            x := mload(add(bs, add(0x20, start)))\r\n        }\r\n\r\n        return x;\r\n    }\r\n\r\n    function writeUint256(\r\n        bytes memory _b,\r\n        uint256 _index,\r\n        uint256 _input\r\n    ) internal pure {\r\n        if (_b.length < _index + 32) {\r\n            revert InvalidOffchainData();\r\n        }\r\n\r\n        bytes32 input = bytes32(_input);\r\n\r\n        _index += 32;\r\n\r\n        // Read the bytes32 from array memory\r\n        assembly {\r\n            mstore(add(_b, _index), input)\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract MainnetExchangeAddresses {\r\n\r\n    address internal constant FEE_RECIPIENT_ADDRESS = 0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A;\r\n    address internal constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\r\n    address internal constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\r\n    address internal constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\r\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\r\n    address internal constant TOKEN_GROUP_REGISTRY = 0xcA49e64FE1FE8be40ED30F682edA1b27a6c8611c;\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ExchangeHelper is MainnetExchangeAddresses {\r\n}\r\n\r\n\r\n\r\n\r\ncontract SaverExchangeRegistry is AdminAuth {\r\n\r\n\tmapping(address => bool) private wrappers;\r\n\r\n\tfunction addWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = true;\r\n\t}\r\n\r\n\tfunction removeWrapper(address _wrapper) public onlyOwner {\r\n\t\twrappers[_wrapper] = false;\r\n\t}\r\n\r\n\tfunction isWrapper(address _wrapper) public view returns(bool) {\r\n\t\treturn wrappers[_wrapper];\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\ninterface IExchangeV3 {\r\n    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\r\n\r\n    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external returns(uint);\r\n\r\n    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\r\n\r\n    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IOffchainWrapper is DFSExchangeData {\r\n    function takeOrder(\r\n        ExchangeData memory _exData,\r\n        ExchangeActionType _type\r\n    ) virtual public payable returns (bool success, uint256);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract ZrxAllowlist is AdminAuth {\r\n    mapping(address => bool) public zrxAllowlist;\r\n\r\n    constructor() {\r\n        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\r\n        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\r\n        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\r\n        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\r\n    }\r\n\r\n    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\r\n        zrxAllowlist[_zrxAddr] = _state;\r\n    }\r\n\r\n    function isZrxAddr(address _zrxAddr) public view returns (bool) {\r\n        return zrxAllowlist[_zrxAddr];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData, ExchangeHelper {\r\n    using SafeERC20 for IERC20;\r\n    using TokenUtils for address;\r\n\r\n    error SlippageHitError(uint256, uint256);\r\n    error DestAmountMissingError();\r\n    error InvalidWrapperError();\r\n    //Zerox exchange invalid\r\n    error InvalidExchangeZeroXError();\r\n\r\n    /// @notice Internal method that preforms a sell on 0x/on-chain\r\n    /// @dev Useful for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and destAmount\r\n    function _sell(ExchangeData memory exData) internal returns (address, uint256) {\r\n        uint256 amountWithoutFee = exData.srcAmount;\r\n        address wrapper = exData.offchainData.wrapper;\r\n        bool offChainSwapSuccess;\r\n\r\n        uint256 destBalanceBefore = exData.destAddr.getBalance(address(this));\r\n\r\n        // Takes DFS exchange fee\r\n        if (exData.dfsFeeDivider != 0) {\r\n            exData.srcAmount = sub(exData.srcAmount, getFee(\r\n                exData.srcAmount,\r\n                exData.user,\r\n                exData.srcAddr,\r\n                exData.dfsFeeDivider\r\n            ));\r\n        }\r\n\r\n        // Try 0x first and then fallback on specific wrapper\r\n        if (exData.offchainData.price > 0) {\r\n            (offChainSwapSuccess, ) = offChainSwap(exData, ExchangeActionType.SELL);\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!offChainSwapSuccess) {\r\n            onChainSwap(exData, ExchangeActionType.SELL);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        uint256 destBalanceAfter = exData.destAddr.getBalance(address(this));\r\n        uint256 amountBought = destBalanceAfter - destBalanceBefore;\r\n\r\n        // check slippage\r\n        if (amountBought < wmul(exData.minPrice, exData.srcAmount)){\r\n            revert SlippageHitError(amountBought, wmul(exData.minPrice, exData.srcAmount));\r\n        }\r\n\r\n        // revert back exData changes to keep it consistent\r\n        exData.srcAmount = amountWithoutFee;\r\n\r\n        return (wrapper, amountBought);\r\n    }\r\n\r\n    /// @notice Internal method that preforms a buy on 0x/on-chain\r\n    /// @dev Useful for other DFS contract to integrate for exchanging\r\n    /// @param exData Exchange data struct\r\n    /// @return (address, uint) Address of the wrapper used and srcAmount\r\n    function _buy(ExchangeData memory exData) internal returns (address, uint256) {\r\n        if (exData.destAmount == 0){\r\n            revert DestAmountMissingError();\r\n        }\r\n\r\n        uint256 amountWithoutFee = exData.srcAmount;\r\n        address wrapper = exData.offchainData.wrapper;\r\n        bool offChainSwapSuccess;\r\n\r\n        uint256 destBalanceBefore = exData.destAddr.getBalance(address(this));\r\n\r\n        // Takes DFS exchange fee\r\n        if (exData.dfsFeeDivider != 0) {\r\n            exData.srcAmount = sub(exData.srcAmount, getFee(\r\n                exData.srcAmount,\r\n                exData.user,\r\n                exData.srcAddr,\r\n                exData.dfsFeeDivider\r\n            ));\r\n        }\r\n\r\n        // Try 0x first and then fallback on specific wrapper\r\n        if (exData.offchainData.price > 0) {\r\n            (offChainSwapSuccess, ) = offChainSwap(exData, ExchangeActionType.BUY);\r\n        }\r\n\r\n        // fallback to desired wrapper if 0x failed\r\n        if (!offChainSwapSuccess) {\r\n            onChainSwap(exData, ExchangeActionType.BUY);\r\n            wrapper = exData.wrapper;\r\n        }\r\n\r\n        uint256 destBalanceAfter = exData.destAddr.getBalance(address(this));\r\n        uint256 amountBought = destBalanceAfter - destBalanceBefore;\r\n\r\n        // check slippage\r\n        if (amountBought < exData.destAmount){\r\n            revert SlippageHitError(amountBought, exData.destAmount);\r\n        }\r\n\r\n        // revert back exData changes to keep it consistent\r\n        exData.srcAmount = amountWithoutFee;\r\n\r\n        return (wrapper, amountBought);\r\n    }\r\n\r\n    /// @notice Takes order from 0x and returns bool indicating if it is successful\r\n    /// @param _exData Exchange data\r\n    function offChainSwap(ExchangeData memory _exData, ExchangeActionType _type)\r\n        private\r\n        returns (bool success, uint256)\r\n    {\r\n        if (!ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\r\n            return (false, 0);\r\n        }\r\n\r\n        if (\r\n            !SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)\r\n        ) {\r\n            return (false, 0);\r\n        }\r\n\r\n        // send src amount\r\n        IERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\r\n\r\n        return\r\n            IOffchainWrapper(_exData.offchainData.wrapper).takeOrder{\r\n                value: _exData.offchainData.protocolFee\r\n            }(_exData, _type);\r\n    }\r\n\r\n    /// @notice Calls wrapper contract for exchange to preform an on-chain swap\r\n    /// @param _exData Exchange data struct\r\n    /// @param _type Type of action SELL|BUY\r\n    /// @return swappedTokens For Sell that the destAmount, for Buy thats the srcAmount\r\n    function onChainSwap(ExchangeData memory _exData, ExchangeActionType _type)\r\n        internal\r\n        returns (uint256 swappedTokens)\r\n    {\r\n        if (!(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper))){\r\n            revert InvalidWrapperError();\r\n        }\r\n\r\n        IERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\r\n\r\n        if (_type == ExchangeActionType.SELL) {\r\n            swappedTokens = IExchangeV3(_exData.wrapper).sell(\r\n                _exData.srcAddr,\r\n                _exData.destAddr,\r\n                _exData.srcAmount,\r\n                _exData.wrapperData\r\n            );\r\n        } else {\r\n            swappedTokens = IExchangeV3(_exData.wrapper).buy(\r\n                _exData.srcAddr,\r\n                _exData.destAddr,\r\n                _exData.destAmount,\r\n                _exData.wrapperData\r\n            );\r\n        }\r\n    }\r\n\r\n    /// @notice Takes a feePercentage and sends it to wallet\r\n    /// @param _amount Dai amount of the whole trade\r\n    /// @param _user Address of the user\r\n    /// @param _token Address of the token\r\n    /// @param _dfsFeeDivider Dfs fee divider\r\n    /// @return feeAmount Amount in Dai owner earned on the fee\r\n    function getFee(\r\n        uint256 _amount,\r\n        address _user,\r\n        address _token,\r\n        uint256 _dfsFeeDivider\r\n    ) internal returns (uint256 feeAmount) {\r\n        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\r\n            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\r\n        }\r\n\r\n        if (_dfsFeeDivider == 0) {\r\n            feeAmount = 0;\r\n        } else {\r\n            feeAmount = _amount / _dfsFeeDivider;\r\n\r\n            // fee can't go over 10% of the whole amount\r\n            if (feeAmount > (_amount / 10)) {\r\n                feeAmount = _amount / 10;\r\n            }\r\n\r\n            address walletAddr = FeeRecipient(FEE_RECIPIENT_ADDRESS).getFeeAddr();\r\n\r\n            _token.withdrawTokens(walletAddr, feeAmount);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\nabstract contract IDSProxy {\r\n    // function execute(bytes memory _code, bytes memory _data)\r\n    //     public\r\n    //     payable\r\n    //     virtual\r\n    //     returns (address, bytes32);\r\n\r\n    function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);\r\n\r\n    function setCache(address _cacheAddr) public payable virtual returns (bool);\r\n\r\n    function owner() public view virtual returns (address);\r\n}\r\n\r\n\r\n\r\n\r\n\r\ncontract TransientStorage {\r\n    mapping (string => bytes32) public tempStore;\r\n\r\n    /// @notice Set a bytes32 value by a string key\r\n    /// @dev Anyone can add a value because it's only used per tx\r\n    function setBytes32(string memory _key, bytes32 _value) public {\r\n        tempStore[_key] = _value;\r\n    }\r\n\r\n\r\n    /// @dev Can't enforce per tx usage so caller must be careful reading the value\r\n    function getBytes32(string memory _key) public view returns (bytes32) {\r\n        return tempStore[_key];\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\ncontract LimitSell is ActionBase, DFSExchangeCore, GasFeeHelper {\r\n\r\n    using TokenUtils for address;\r\n\r\n    TransientStorage public constant tempStorage = TransientStorage(TRANSIENT_STORAGE);\r\n\r\n    error WrongPriceFromTrigger(uint256 expected, uint256 actual);\r\n\r\n    struct Params {\r\n        ExchangeData exchangeData;\r\n        address from;\r\n        address to;\r\n        uint256 gasUsed;\r\n    }\r\n\r\n    /// @inheritdoc ActionBase\r\n    function executeAction(\r\n        bytes memory _callData,\r\n        bytes32[] memory _subData,\r\n        uint8[] memory _paramMapping,\r\n        bytes32[] memory _returnValues\r\n    ) public virtual override payable returns (bytes32) {\r\n        Params memory params = parseInputs(_callData);\r\n\r\n        params.exchangeData.srcAddr = _parseParamAddr(\r\n            params.exchangeData.srcAddr,\r\n            _paramMapping[0],\r\n            _subData,\r\n            _returnValues\r\n        );\r\n        params.exchangeData.destAddr = _parseParamAddr(\r\n            params.exchangeData.destAddr,\r\n            _paramMapping[1],\r\n            _subData,\r\n            _returnValues\r\n        );\r\n\r\n        params.exchangeData.srcAmount = _parseParamUint(\r\n            params.exchangeData.srcAmount,\r\n            _paramMapping[2],\r\n            _subData,\r\n            _returnValues\r\n        );\r\n        params.from = _parseParamAddr(params.from, _paramMapping[3], _subData, _returnValues);\r\n        params.to = _parseParamAddr(params.to, _paramMapping[4], _subData, _returnValues);\r\n\r\n        (uint256 exchangedAmount, bytes memory logData) = _dfsSell(params.exchangeData, params.from, params.to, params.gasUsed);\r\n        emit ActionEvent(\"LimitSell\", logData);\r\n        return bytes32(exchangedAmount);\r\n    }\r\n\r\n    /// @inheritdoc ActionBase\r\n    /// @dev No direct action as it's a part of the limit order strategy\r\n    function executeActionDirect(bytes memory _callData) public virtual override payable   {}\r\n\r\n    /// @inheritdoc ActionBase\r\n    function actionType() public virtual override pure returns (uint8) {\r\n        return uint8(ActionType.STANDARD_ACTION);\r\n    }\r\n\r\n    //////////////////////////// ACTION LOGIC ////////////////////////////\r\n\r\n    /// @notice Sells a specified srcAmount for the dest token\r\n    /// @param _exchangeData DFS Exchange data struct\r\n    /// @param _from Address from which we'll pull the srcTokens\r\n    /// @param _to Address where we'll send the _to token\r\n    /// @param _gasUsed Gas used for this strategy so we can take the fee\r\n    function _dfsSell(\r\n        ExchangeData memory _exchangeData,\r\n        address _from,\r\n        address _to,\r\n        uint256 _gasUsed\r\n    ) internal returns (uint256, bytes memory) {\r\n        // if we set srcAmount to max, take the whole proxy balance\r\n        if (_exchangeData.srcAmount == type(uint256).max) {\r\n            _exchangeData.srcAmount = _exchangeData.srcAddr.getBalance(address(this));\r\n        }\r\n\r\n        // Validate price that is set in the trigger\r\n        uint256 currPrice = uint256(tempStorage.getBytes32(\"CURR_PRICE\"));\r\n        require(currPrice > 0, \"LimitSell: Price not set\");\r\n\r\n        // Reset the current price for the next strategy\r\n        tempStorage.setBytes32(\"CURR_PRICE\", bytes32(0));\r\n        _exchangeData.dfsFeeDivider = 0;\r\n\r\n        if (_exchangeData.minPrice != currPrice) {\r\n            revert WrongPriceFromTrigger(currPrice, _exchangeData.minPrice);\r\n        }\r\n     \r\n        _exchangeData.srcAddr.pullTokensIfNeeded(_from, _exchangeData.srcAmount);\r\n\r\n        // set owner of the proxy as the user that is selling for offchain orders\r\n        _exchangeData.user = getUserAddress();\r\n        \r\n        (address wrapper, uint256 exchangedAmount) = _sell(_exchangeData);\r\n\r\n        {\r\n            uint256 amountAfterFee = _takeGasFee(_gasUsed, exchangedAmount, _exchangeData.destAddr);\r\n\r\n            address tokenAddr = _exchangeData.destAddr;\r\n            if (tokenAddr == WETH_ADDR) {\r\n                TokenUtils.withdrawWeth(amountAfterFee);\r\n                tokenAddr = ETH_ADDR;\r\n            }\r\n\r\n            tokenAddr.withdrawTokens(_to, amountAfterFee);\r\n        }\r\n\r\n        bytes memory logData = abi.encode(\r\n            wrapper,\r\n            _exchangeData.srcAddr,\r\n            _exchangeData.destAddr,\r\n            _exchangeData.srcAmount,\r\n            exchangedAmount,\r\n            _exchangeData.dfsFeeDivider\r\n        );\r\n        return (exchangedAmount, logData);\r\n    }\r\n\r\n    function parseInputs(bytes memory _callData) public pure returns (Params memory params) {\r\n        params = abi.decode(_callData, (Params));\r\n    }\r\n\r\n    /// @notice Returns the owner of the DSProxy that called the contract\r\n    function getUserAddress() internal view returns (address) {\r\n        IDSProxy proxy = IDSProxy(payable(address(this)));\r\n\r\n        return proxy.owner();\r\n    }\r\n\r\n    function _takeGasFee(uint256 _gasUsed, uint256 _soldAmount, address _feeToken) internal returns (uint256 amountAfterFee) {\r\n        uint256 txCost = calcGasCost(_gasUsed, _feeToken, 0);\r\n\r\n        // cap at 20% of the max amount\r\n        if (txCost >= (_soldAmount / 5)) {\r\n            txCost = _soldAmount / 5;\r\n        }\r\n\r\n        _feeToken.withdrawTokens(feeRecipient.getFeeAddr(), txCost);\r\n\r\n        return _soldAmount - txCost;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"name\":\"DestAmountMissingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExchangeZeroXError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOffchainData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidWrapperError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonContractCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OutOfRangeSlicingError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReturnIndexValueError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotAdmin\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SenderNotOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"SlippageHitError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SubIndexValueError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actual\",\"type\":\"uint256\"}],\"name\":\"WrongPriceFromTrigger\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"string\",\"name\":\"logName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"ActionEvent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CHAINLINK_FEED_REGISTRY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DFS_FEE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NO_PARAM_MAPPING\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETURN_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SANITY_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MAX_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUB_MIN_INDEX_VALUE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"actionType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminVault\",\"outputs\":[{\"internalType\":\"contract AdminVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasUsed\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l1GasCostInEth\",\"type\":\"uint256\"}],\"name\":\"calcGasCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"txCost\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"_subData\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_paramMapping\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"_returnValues\",\"type\":\"bytes32[]\"}],\"name\":\"executeAction\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"executeActionDirect\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeRecipient\",\"outputs\":[{\"internalType\":\"contract FeeRecipient\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feedRegistry\",\"outputs\":[{\"internalType\":\"contract IFeedRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveTokenPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveTokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveV3TokenPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getAaveV3TokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getAddrForChainlinkOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddrForChainlinkUsage\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getChainlinkPriceInETH\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"chainlinkPriceInETH\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_useFallback\",\"type\":\"bool\"}],\"name\":\"getChainlinkPriceInUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"chainlinkPriceInUSD\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"},{\"internalType\":\"contract IAggregatorV3\",\"name\":\"aggregator\",\"type\":\"address\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_inputTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint80\",\"name\":\"_roundId\",\"type\":\"uint80\"}],\"name\":\"getRoundInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updateTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getSparkTokenPriceInETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddr\",\"type\":\"address\"}],\"name\":\"getSparkTokenPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_btcPrice\",\"type\":\"int256\"}],\"name\":\"getWBtcPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"wBtcPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_stEthPrice\",\"type\":\"int256\"}],\"name\":\"getWStEthPrice\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"wStEthPrice\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"kill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"logger\",\"outputs\":[{\"internalType\":\"contract DefisaverLogger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"name\":\"packExchangeData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"parseInputs\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"exchangeData\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gasUsed\",\"type\":\"uint256\"}],\"internalType\":\"struct LimitSell.Params\",\"name\":\"params\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registry\",\"outputs\":[{\"internalType\":\"contract DFSRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tempStorage\",\"outputs\":[{\"internalType\":\"contract TransientStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"unpackExchangeData\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"srcAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"srcAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"destAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"dfsFeeDivider\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"wrapperData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"wrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"allowanceTarget\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct DFSExchangeData.OffchainData\",\"name\":\"offchainData\",\"type\":\"tuple\"}],\"internalType\":\"struct DFSExchangeData.ExchangeData\",\"name\":\"_exData\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStuckFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "LimitSell", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://f0253e850b7224889f38a0aa6affe3d821221c196241abae450750b513669f82"}