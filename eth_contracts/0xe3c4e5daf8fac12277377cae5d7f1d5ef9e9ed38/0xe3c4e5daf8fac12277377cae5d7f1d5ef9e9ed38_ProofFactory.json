{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProofFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IProofFactory {\\n    struct ProofToken {\\n        bool status;\\n        address pair;\\n        address owner;\\n        uint256 unlockTime;\\n        uint256 lockId;\\n    }\\n\\n    struct WhitelistAdd_ {\\n        address[] whitelists;\\n    }\\n\\n    struct TokenParam {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint256 initialSupply;\\n        uint256 percentToLP;\\n        address reflectionToken;\\n        address devWallet;\\n        uint256 initialReflectionFee;\\n        uint256 initialReflectionFeeOnSell;\\n        uint256 initialLpFee;\\n        uint256 initialLpFeeOnSell;\\n        uint256 initialDevFee;\\n        uint256 initialDevFeeOnSell;\\n        uint256 unlockTime;\\n        uint256 whitelistPeriod;\\n        address[] whitelists;\\n    }\\n\\n    event TokenCreated(address _address);\\n\\n    function createToken(TokenParam memory _tokenParam) external payable;\\n    function addmoreWhitelist(address tokenAddress, WhitelistAdd_ memory _WhitelistAdd) external;\\n    function finalizeToken(address tokenAddress) external payable;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProofFactoryGate.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"./IProofFactory.sol\\\";\\n\\ninterface IProofFactoryGate {\\n    function updateProofFactory(address _newFactory) external;\\n\\n    function createToken(\\n        IProofFactory.TokenParam memory _tokenParam,\\n        address _routerAddress,\\n        address _proofAdmin,\\n        address _owner\\n    ) external returns (address);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IProofFactoryTokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"../libraries/ProofFactoryFees.sol\\\";\\n\\ninterface IProofFactoryTokenCutter is IERC20, IERC20Metadata {\\n    struct BaseData {\\n        string tokenName;\\n        string tokenSymbol;\\n        uint256 initialSupply;\\n        uint256 percentToLP;\\n        uint256 whitelistPeriod;\\n        address owner;\\n        address devWallet;\\n        address reflectionToken;\\n        address routerAddress;\\n        address initialProofAdmin;\\n        address[] whitelists;\\n        address nftWhitelist;\\n    }\\n\\n    struct WhitelistAdd_ {\\n        address [] whitelists;\\n    }\\n\\n    function setBasicData(\\n        BaseData memory _baseData,\\n        ProofFactoryFees.allFees memory fees\\n    ) external;\\n\\n    function pair() external view returns (address);\\n\\n    function swapTradingStatus() external;\\n\\n    function updateProofFactory(address _newFactory) external;\\n\\n    function addMoreToWhitelist(\\n        WhitelistAdd_ memory _WhitelistAdd\\n    ) external;\\n\\n    function updateWhitelistPeriod(\\n        uint256 _whitelistPeriod\\n    ) external;\\n\\n    function changeIsTxLimitExempt(\\n        address holder,\\n        bool exempt\\n    ) external;\\n\\n    function addNFTSnapshot() external;\\n\\n    event DistributorFail();\\n\\n            function changeFees(\\n        uint256 initialMainFee,\\n        uint256 initialMainFeeOnSell,\\n        uint256 initialLpFee,\\n        uint256 initialLpFeeOnSell,\\n        uint256 initialDevFee,\\n        uint256 initialDevFeeOnSell\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ITeamFinanceLocker.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface ITeamFinanceLocker {\\n    function lockToken(\\n        address _tokenAddress,\\n        address _withdrawalAddress,\\n        uint256 _amount,\\n        uint256 _unlockTime,\\n        bool _mintNFT, \\n        address referrer\\n    ) external payable returns (uint256 _id);\\n}\"\r\n    },\r\n    \"contracts/interfaces/ITokenCutter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface ITokenCutter {\\n    function swapTradingStatus() external;\\n\\n    function setLaunchedAt() external;\\n\\n    function cancelToken() external;\\n}\"\r\n    },\r\n    \"contracts/interfaces/IUniswapV2Router02.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external;\\n\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable;\\n\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n}\"\r\n    },\r\n    \"contracts/libraries/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"./Context.sol\\\";\\n\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner\\n    );\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(\\n            newOwner != address(0),\\n            \\\"new owner is the zero address\\\"\\n        );\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\"\r\n    },\r\n    \"contracts/libraries/ProofFactoryFees.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nlibrary ProofFactoryFees {\\n    struct allFees {\\n        uint256 reflectionFee;\\n        uint256 reflectionFeeOnSell;\\n        uint256 lpFee;\\n        uint256 lpFeeOnSell;\\n        uint256 devFee;\\n        uint256 devFeeOnSell;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/proofFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: None\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./interfaces/ITeamFinanceLocker.sol\\\";\\nimport \\\"./interfaces/ITokenCutter.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"./interfaces/IProofFactoryTokenCutter.sol\\\";\\nimport \\\"./interfaces/IProofFactoryGate.sol\\\";\\nimport \\\"./interfaces/IProofFactory.sol\\\";\\n\\n\\ncontract ProofFactory is Ownable, IProofFactory {\\n    mapping(address => ProofToken) public validatedPairs;\\n    mapping(address => bool) private whitelisted;\\n\\n    // struct WhitelistAdd_ {\\n    //     address[] whitelists;\\n    // }\\n\\n    address public proofAdmin;\\n    address public routerAddress;\\n    address public lockerAddress;\\n    address public factoryGate;\\n    address payable public revenueAddress;\\n    address payable public rewardPoolAddress;\\n    uint256 private minLiq = 0;\\n\\n    constructor(\\n        address _initialRouterAddress,\\n        address _initialLockerAddress,\\n        address _initialRewardPoolAddress,\\n        address _initialRevenueAddress,\\n        address _factoryGate\\n    ) {\\n        require(_initialRouterAddress != address(0), \\\"zero router\\\");\\n        require(_initialLockerAddress != address(0), \\\"zero locker\\\");\\n        require(\\n            _initialRewardPoolAddress != address(0),\\n            \\\"zero rewardPool\\\"\\n        );\\n        require(_initialRevenueAddress != address(0), \\\"zero revenue\\\");\\n        require(_factoryGate != address(0), \\\"zero factory gate\\\");\\n\\n        routerAddress = _initialRouterAddress;\\n        lockerAddress = _initialLockerAddress;\\n        proofAdmin = msg.sender;\\n        revenueAddress = payable(_initialRevenueAddress);\\n        rewardPoolAddress = payable(_initialRewardPoolAddress);\\n        factoryGate = _factoryGate;\\n    }\\n\\n    function updateProofFactory(\\n        address _tokenAddress,\\n        address _newFactory\\n    ) external onlyOwner {\\n        require(\\n            validatedPairs[_tokenAddress].owner != address(0),\\n            \\\"invalid tokenAddress\\\"\\n        );\\n        IProofFactoryTokenCutter(_tokenAddress).updateProofFactory(_newFactory);\\n    }\\n\\n    function createToken(TokenParam memory _tokenParam) external payable{\\n        require(\\n            _tokenParam.unlockTime >= block.timestamp + 30 days,\\n            \\\"unlock too short\\\"\\n        );\\n        require(msg.value >= minLiq, \\\"not enough liquidity\\\");\\n\\n        address newToken = IProofFactoryGate(factoryGate).createToken(\\n            _tokenParam,\\n            routerAddress,\\n            proofAdmin,\\n            msg.sender\\n        );\\n\\n        if (msg.value != 0) {\\n            IERC20(newToken).approve(routerAddress, type(uint256).max);\\n\\n            IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\\n            router.addLiquidityETH{value: msg.value}(\\n                address(newToken),\\n                IERC20(newToken).balanceOf(address(this)),\\n                0,\\n                0,\\n                address(this),\\n                block.timestamp\\n            );\\n        }\\n\\n        // disable trading\\n        IProofFactoryTokenCutter(newToken).swapTradingStatus();\\n\\n        validatedPairs[newToken] = ProofToken(\\n            false,\\n            IProofFactoryTokenCutter(newToken).pair(),\\n            msg.sender,\\n            _tokenParam.unlockTime,\\n            0\\n        );\\n\\n        emit TokenCreated(newToken);\\n    }\\n\\n    function finalizeToken(address tokenAddress) external override payable {\\n        _checkTokenStatus(tokenAddress);\\n\\n        address _pair = validatedPairs[tokenAddress].pair;\\n        uint256 _unlockTime = validatedPairs[tokenAddress].unlockTime;\\n        IERC20(_pair).approve(lockerAddress, type(uint256).max);\\n\\n        uint256 lpBalance = IERC20(_pair).balanceOf(address(this));\\n\\n        uint256 _lockId = ITeamFinanceLocker(lockerAddress).lockToken{\\n            value: msg.value\\n        }(_pair, msg.sender, lpBalance, _unlockTime, false, 0x0000000000000000000000000000000000000000);\\n        validatedPairs[tokenAddress].lockId = _lockId;\\n\\n        IProofFactoryTokenCutter(tokenAddress).addNFTSnapshot();\\n\\n        //enable trading\\n        ITokenCutter(tokenAddress).swapTradingStatus();\\n        ITokenCutter(tokenAddress).setLaunchedAt();\\n\\n        validatedPairs[tokenAddress].status = true;\\n    }\\n\\n    function addmoreWhitelist(address tokenAddress, WhitelistAdd_ memory _WhitelistAdd) external override {\\n        _checkTokenStatus(tokenAddress);\\n\\n        IProofFactoryTokenCutter(tokenAddress).addMoreToWhitelist(IProofFactoryTokenCutter.WhitelistAdd_(_WhitelistAdd.whitelists));\\n        \\n    }\\n\\n    function cancelToken(address tokenAddress) external {\\n        _checkTokenStatus(tokenAddress);\\n\\n        address _pair = validatedPairs[tokenAddress].pair;\\n        address _owner = validatedPairs[tokenAddress].owner;\\n\\n        IUniswapV2Router02 router = IUniswapV2Router02(routerAddress);\\n        IERC20(_pair).approve(routerAddress, type(uint256).max);\\n        uint256 _lpBalance = IERC20(_pair).balanceOf(address(this));\\n\\n        // enable transfer and allow router to exceed tx limit to remove liquidity\\n        ITokenCutter(tokenAddress).cancelToken();\\n        router.removeLiquidityETH(\\n            address(tokenAddress),\\n            _lpBalance,\\n            0,\\n            0,\\n            _owner,\\n            block.timestamp\\n        );\\n\\n        // disable transfer of token\\n        ITokenCutter(tokenAddress).swapTradingStatus();\\n\\n        delete validatedPairs[tokenAddress];\\n    }\\n\\n    function factoryRevenue() external payable virtual {\\n        if (address(this).balance >= 0) {\\n            uint256 bal = address(this).balance / 2;\\n            revenueAddress.transfer(bal);\\n            rewardPoolAddress.transfer(bal);\\n        }\\n    }\\n\\n\\n    function initializeMinLiq() external onlyOwner {\\n        require(minLiq == 0, \\\"already executed\\\");\\n        minLiq = 1 ether;\\n    }\\n\\n    function setWhitelist(address[] memory users, bool[] memory statuses) external onlyOwner {\\n        uint256 len = users.length;\\n        require(len == statuses.length, \\\"list mismatch\\\");\\n        for (uint256 i; i < len; i++) {\\n            whitelisted[users[i]] = statuses[i];\\n        }\\n    }\\n\\n    function setProofAdmin(address newProofAdmin) external onlyOwner {\\n        proofAdmin = newProofAdmin;\\n    }\\n\\n    function setLockerAddress(address newlockerAddress) external onlyOwner {\\n        lockerAddress = newlockerAddress;\\n    }\\n\\n    function setRouterAddress(address newRouterAddress) external onlyOwner {\\n        routerAddress = payable(newRouterAddress);\\n    }\\n\\n    function setRevenueAddress(address newRevenueAddress) external onlyOwner {\\n        revenueAddress = payable(newRevenueAddress);\\n    }\\n\\n    function setRewardPoolAddress(\\n        address newRewardPoolAddress\\n    ) external onlyOwner {\\n        rewardPoolAddress = payable(newRewardPoolAddress);\\n    }\\n\\n    function proofRevenueAddress() external view returns (address) {\\n        return revenueAddress;\\n    }\\n\\n    function proofRewardPoolAddress() external view returns (address) {\\n        return rewardPoolAddress;\\n    }\\n\\n    function _checkTokenStatus(address tokenAddress) internal view {\\n        require(validatedPairs[tokenAddress].owner == msg.sender, \\\"!owner\\\");\\n        require(validatedPairs[tokenAddress].status == false, \\\"validated\\\");\\n    }\\n\\n    function isWhitelisted(address user) external view returns(bool) {\\n        return whitelisted[user];\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200,\r\n      \"details\": {\r\n        \"yul\": true\r\n      }\r\n    },\r\n    \"viaIR\": true,\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_initialRouterAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialLockerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialRewardPoolAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialRevenueAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_factoryGate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"TokenCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"internalType\":\"struct IProofFactory.WhitelistAdd_\",\"name\":\"_WhitelistAdd\",\"type\":\"tuple\"}],\"name\":\"addmoreWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"cancelToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"initialSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percentToLP\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"reflectionToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"devWallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialReflectionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialReflectionFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialLpFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialDevFeeOnSell\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"whitelistPeriod\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"whitelists\",\"type\":\"address[]\"}],\"internalType\":\"struct IProofFactory.TokenParam\",\"name\":\"_tokenParam\",\"type\":\"tuple\"}],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryGate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRevenue\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"finalizeToken\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializeMinLiq\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofRevenueAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofRewardPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revenueAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPoolAddress\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newlockerAddress\",\"type\":\"address\"}],\"name\":\"setLockerAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newProofAdmin\",\"type\":\"address\"}],\"name\":\"setProofAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRevenueAddress\",\"type\":\"address\"}],\"name\":\"setRevenueAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRewardPoolAddress\",\"type\":\"address\"}],\"name\":\"setRewardPoolAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newRouterAddress\",\"type\":\"address\"}],\"name\":\"setRouterAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"statuses\",\"type\":\"bool[]\"}],\"name\":\"setWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newFactory\",\"type\":\"address\"}],\"name\":\"updateProofFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"validatedPairs\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"unlockTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockId\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ProofFactory", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d000000000000000000000000e2fe530c047f2d85298b07d9333c05737f1435fb000000000000000000000000377e168af6a06075423aede50856de177efaac3e000000000000000000000000e9b4d32f829951a3ce145d2caa84cf66af56ca5e000000000000000000000000581d41c897ed2113b8525e03a22e1807541ae8c1", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}