{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"/contracts/AssetsInteraction.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n// solhint-disable-next-line\\npragma solidity 0.8.12;\\n\\nimport \\\"./interface/IMasterContract.sol\\\";\\nimport \\\"./interface/ITraits.sol\\\";\\nimport \\\"./reduced_interfaces/BAPApesInterface.sol\\\";\\nimport \\\"./reduced_interfaces/BAPTeenBullsInterface.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\n/// @title Bulls and Apes Project - Assets Interactions\\n/// @author BAP Dev Team\\n/// @notice Handle the use of the Assets inside BAP ecosystem\\ncontract AssetsInteraction is Ownable, IERC721Receiver {\\n    using Strings for uint256;\\n    /// @notice Master contract instance\\n    IMasterContract public masterContract;\\n    /// @notice OG Bulls contract instance\\n    BAPApesInterface public bapApes;\\n    /// @notice Teen Bulls contract instance\\n    BAPTeenBullsInterface public bapTeenBulls;\\n\\n    /// @notice Address of the wallet that signs messages\\n    address public secret;\\n\\n    /// @notice Last token received, Used for resurrecting\\n    uint256 private lastTokenReceived;\\n\\n    /// @notice Boolean to prevent Teens being sent to the contract, only allowed when reviving\\n    bool private isReviving = false;\\n\\n    /// @notice Mapping to check if a Teen has been resurrected\\n    mapping(uint256 => bool) public isResurrected;\\n    /// @notice Mapping for contracts allowed to use this contract\\n    mapping(address => bool) public isAuthorized;\\n\\n    /// @notice Resurrection event\\n    event TeenResurrected(\\n        address user,\\n        uint256 sacrificed,\\n        uint256 resurrected,\\n        uint256 newlyMinted,\\n        uint256 offChainUtility\\n    );\\n\\n    /// @notice Event for Utility burned off chain\\n    event UtilityBurnedOffChain(\\n        address user,\\n        uint256 utilityId,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice Event emited when assets are burned for GAC / type 1 = Teens, type 2 = Apes\\n    event AssetsBurned(address user, uint256[] tokenIds, uint256 typeOfAsset, uint256 timestamp);\\n\\n    /// @notice Deploys the contract and sets the instances addresses\\n    /// @param masterContractAddress: Address of the Master Contract\\n    /// @param apesAddress: Address of the OG Bulls contract\\n    /// @param teensAddress: Address of the Teen Bulls contract\\n    constructor(\\n        address masterContractAddress,\\n        address apesAddress,\\n        address teensAddress\\n    ) {\\n        masterContract = IMasterContract(masterContractAddress);\\n        bapApes = BAPApesInterface(apesAddress);\\n        bapTeenBulls = BAPTeenBullsInterface(teensAddress);\\n    }\\n\\n    modifier onlyAuthorized() {\\n        require(isAuthorized[msg.sender], \\\"Not Authorized\\\");\\n        _;\\n    }\\n\\n    /// @notice function used to burn teens for GAC\\n    /// @param tokenIds: IDs of the teens to burn\\n    /// @dev Only the owner of the assets can burn them and first needs to approve this contract\\n    function burnTeens(uint256[] memory tokenIds) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            _burnTeen(tokenIds[i]);\\n        }\\n\\n        emit AssetsBurned(msg.sender, tokenIds, 1, block.timestamp);\\n    }\\n\\n    // @notice function used to burn apes for GAC\\n    /// @param tokenIds: IDs of the apes to burn\\n    /// @dev Only the owner of the assets can burn them and first needs to approve this contract\\n    function burnApes(uint256[] memory tokenIds) external {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            // transfer to dead address to burn\\n            bapApes.transferFrom(msg.sender, address(this), tokenIds[i]);\\n        }\\n\\n        emit AssetsBurned(msg.sender, tokenIds, 2, block.timestamp);\\n    }\\n\\n    function resurrectApe(uint256 tokenId, address recipient) external onlyAuthorized {\\n        require(recipient != address(0), \\\"resurrectApe: Invalid recipient\\\");\\n        require(bapApes.ownerOf(tokenId) == address(this), \\\"resurrectApe: Invalid owner\\\");        \\n\\n        bapApes.transferFrom(address(this), recipient, tokenId);\\n    }\\n\\n    /// @notice Handle the resurrection of a Teen Bull\\n    /// @param utilityId: ID of the utility used to resurrect\\n    /// @param sacrificed: ID of the Teen Bull sacrificed\\n    /// @param resurrected: ID of the Teen Bull to resurrect\\n    /// @param timeOut: Time out for the signature\\n    /// @param offChainUtility: Boolean to check if the utility is on-chain or off-chain\\n    /// @param signature: Signature to check above parameters\\n    function teenResurrect(\\n        uint256 utilityId,\\n        uint256 sacrificed,\\n        uint256 resurrected,\\n        uint256 timeOut,\\n        uint256 offChainUtility,\\n        bytes memory signature\\n    ) external {\\n        require(\\n            utilityId >= 30 && utilityId < 34,\\n            \\\"teenResurrect: Wrong utilityId id\\\"\\n        );\\n        require(\\n            timeOut > block.timestamp,\\n            \\\"teenResurrect: Signature is expired\\\"\\n        );\\n        require(\\n            _verifyHashSignature(\\n                keccak256(\\n                    abi.encode(\\n                        msg.sender,\\n                        utilityId,\\n                        sacrificed,\\n                        resurrected,\\n                        timeOut,\\n                        offChainUtility // 0 for on-chain, 1 for off-chain\\n                    )\\n                ),\\n                signature\\n            ),\\n            \\\"teenResurrect: Signature is invalid\\\"\\n        );\\n        require(\\n            !isResurrected[sacrificed],\\n            \\\"teenResurrect: Can't sacrifice a resurrected Teen Bull\\\"\\n        );\\n        require(\\n            !isResurrected[resurrected],\\n            \\\"teenResurrect: Can't resurrect an already resurrected Teen Bull\\\"\\n        );\\n        if (offChainUtility == 0) {\\n            masterContract.burn(utilityId, 1);\\n        } else {\\n            emit UtilityBurnedOffChain(msg.sender, utilityId, block.timestamp);\\n        }\\n\\n        _burnTeen(sacrificed);\\n\\n        isReviving = true;\\n\\n        bapTeenBulls.airdrop(address(this), 1);\\n\\n        isReviving = false;\\n\\n        isResurrected[lastTokenReceived] = true;\\n        isResurrected[resurrected] = true;\\n\\n        bapTeenBulls.safeTransferFrom(\\n            address(this),\\n            msg.sender,\\n            lastTokenReceived\\n        );\\n\\n        emit TeenResurrected(\\n            msg.sender,\\n            sacrificed,\\n            resurrected,\\n            lastTokenReceived,\\n            offChainUtility\\n        );\\n\\n        lastTokenReceived = 0;\\n    }\\n\\n    /// @notice Handle the generation of Teen Bulls\\n    /// @dev Needs to pay METH and burn an Incubator\\n    function generateTeenBull() external {\\n        masterContract.pay(600, 300);\\n        masterContract.burn(1, 1);\\n        bapTeenBulls.airdrop(msg.sender, 1);\\n    }\\n\\n    /// @notice Internal function to burn a Teen Bull\\n    /// @param tokenId: ID of the Teen Bull to burn\\n    /// @dev Only the owner of the Teen Bull can burn it and resurrected Teen Bulls cannot be burned\\n    function _burnTeen(uint256 tokenId) internal {\\n        require(\\n            bapTeenBulls.ownerOf(tokenId) == msg.sender,\\n            \\\"Only the owner can burn\\\"\\n        );\\n        require(!isResurrected[tokenId], \\\"Can't burn resurrected teens\\\");\\n\\n        bapTeenBulls.burnTeenBull(tokenId);\\n    }\\n\\n    /// @notice authorise a new address to use this contract\\n    /// @param operator Address to be set\\n    /// @param status Can use this contract or not\\n    /// @dev Only contract owner can call this function\\n    function setAuthorized(address operator, bool status) external onlyOwner {\\n        isAuthorized[operator] = status;\\n    }\\n\\n    /// @notice Internal function to set isResurrected status on previously resurrected Teen Bulls\\n    /// @param tokenIds: Array of Teen Bull IDs to set isResurrected status\\n    /// @param boolean: Boolean to set isResurrected status\\n    /// @dev Only used to set isResurrected status on Teen Bulls resurrected before the contract deployment\\n    function setIsResurrected(\\n        uint256[] memory tokenIds,\\n        bool boolean\\n    ) external onlyOwner {\\n        for (uint256 i = 0; i < tokenIds.length; i++) {\\n            isResurrected[tokenIds[i]] = boolean;\\n        }\\n    }\\n\\n    /// @notice Internal function to set a new signer\\n    /// @param newSigner: Address of the new signer\\n    /// @dev Only the owner can set a new signer\\n    function setSigner(address newSigner) external onlyOwner {\\n        require(newSigner != address(0), \\\"Invalid address\\\");\\n        secret = newSigner;\\n    }\\n\\n    /// @notice Internal function to handle the transfer of a Teen Bull during the resurrection process\\n    /// @param tokenId: ID of the Teen Bull to transfer\\n    /// @dev Only accept transfers from BAP Teens and only while reviving\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256 tokenId,\\n        bytes memory\\n    ) external virtual override returns (bytes4) {\\n        require(\\n            msg.sender == address(bapTeenBulls),\\n            \\\"Only receive from BAP Teens\\\"\\n        );\\n        require(isReviving, \\\"Only accept transfers while reviving\\\");\\n        lastTokenReceived = tokenId;\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice Transfer ownership from external contracts owned by this contract\\n    /// @param _contract Address of the external contract\\n    /// @param _newOwner New owner\\n    /// @dev Only contract owner can call this function\\n    function transferOwnershipExternalContract(\\n        address _contract,\\n        address _newOwner\\n    ) external onlyOwner {\\n        Ownable(_contract).transferOwnership(_newOwner);\\n    }\\n\\n    /// @notice Set new contracts addresses\\n    /// @param  masterContractAddress, Address of the new master contract\\n    /// @param  apesAddress, Address of the new BAP OG contract\\n    /// @param  teensAddress, Address of the new BAP Teens contract\\n    /// @dev Only contract owner can call this function\\n    function setContractsAddresses(\\n        address masterContractAddress,\\n        address apesAddress,\\n        address teensAddress\\n    ) external onlyOwner {\\n        masterContract = IMasterContract(masterContractAddress);\\n        bapApes = BAPApesInterface(apesAddress);\\n        bapTeenBulls = BAPTeenBullsInterface(teensAddress);\\n    }\\n\\n    /// @notice Internal function to check if a signature is valid\\n    /// @param freshHash: Hash to check\\n    /// @param signature: Signature to check\\n    function _verifyHashSignature(\\n        bytes32 freshHash,\\n        bytes memory signature\\n    ) internal view returns (bool) {\\n        bytes32 hash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", freshHash)\\n        );\\n\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        if (signature.length != 65) {\\n            return false;\\n        }\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        address signer = address(0);\\n        if (v == 27 || v == 28) {\\n            // solium-disable-next-line arg-overflow\\n            signer = ecrecover(hash, v, r, s);\\n        }\\n        return secret == signer;\\n    }\\n}\\n\"\r\n    },\r\n    \"/contracts/reduced_interfaces/BAPTeenBullsInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface BAPTeenBullsInterface {\\r\\n    function generateTeenBull() external;\\r\\n\\r\\n    function generateMergerOrb() external;\\r\\n\\r\\n    function ownerOf(uint256) external view returns (address);\\r\\n\\r\\n    function burnTeenBull(uint256) external;\\r\\n\\r\\n    function airdrop(address, uint256) external;\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address,\\r\\n        address,\\r\\n        uint256\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/reduced_interfaces/BAPApesInterface.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface BAPApesInterface {\\r\\n    function ownerOf(uint256) external view returns (address);\\r\\n\\r\\n   function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interface/ITraits.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n// solhint-disable-next-line\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface ITraits {\\r\\n    function mintBatch(\\r\\n        address to,\\r\\n        uint256[] memory ids,\\r\\n        uint256[] memory amounts\\r\\n    ) external;\\r\\n\\r\\n    function safeBatchTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256[] calldata ids,\\r\\n        uint256[] calldata amounts,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n\\r\\n    function mint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function burn(\\r\\n        address account,\\r\\n        uint256 id,\\r\\n        uint256 value\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"/contracts/interface/IMasterContract.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\r\\n// solhint-disable-next-line\\r\\npragma solidity 0.8.12;\\r\\n\\r\\ninterface IMasterContract {\\r\\n    // METH functions\\r\\n\\r\\n    function claim(address to, uint256 amount) external;\\r\\n\\r\\n    function pay(uint256 payment, uint256 fee) external;\\r\\n\\r\\n    // Teens functions\\r\\n\\r\\n    function airdrop(address to, uint256 amount) external;\\r\\n\\r\\n    function burnTeenBull(uint256 tokenId) external;\\r\\n\\r\\n    // Utilities functions\\r\\n\\r\\n    function burn(uint256 id, uint256 amount) external;\\r\\n\\r\\n    function airdrop(\\r\\n        address to,\\r\\n        uint256 amount,\\r\\n        uint256 id\\r\\n    ) external;\\r\\n}\\r\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {},\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"apesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teensAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"typeOfAsset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AssetsBurned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sacrificed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"resurrected\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newlyMinted\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offChainUtility\",\"type\":\"uint256\"}],\"name\":\"TeenResurrected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"utilityId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"UtilityBurnedOffChain\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bapApes\",\"outputs\":[{\"internalType\":\"contract BAPApesInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bapTeenBulls\",\"outputs\":[{\"internalType\":\"contract BAPTeenBullsInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnApes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"burnTeens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"generateTeenBull\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"isResurrected\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterContract\",\"outputs\":[{\"internalType\":\"contract IMasterContract\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"resurrectApe\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"secret\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setAuthorized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"masterContractAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"apesAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teensAddress\",\"type\":\"address\"}],\"name\":\"setContractsAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"boolean\",\"type\":\"bool\"}],\"name\":\"setIsResurrected\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newSigner\",\"type\":\"address\"}],\"name\":\"setSigner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"utilityId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"sacrificed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"resurrected\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offChainUtility\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"teenResurrect\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipExternalContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AssetsInteraction", "CompilerVersion": "v0.8.12+commit.f00d7308", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000d8162d9703d1c13476fee3f20adf2c6468683f0e0000000000000000000000007f29b85834d6a2ba4bb1c64325686c6057b1b3c5000000000000000000000000cf099445347f0f006c19b90f1c1933eb9413682b", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}