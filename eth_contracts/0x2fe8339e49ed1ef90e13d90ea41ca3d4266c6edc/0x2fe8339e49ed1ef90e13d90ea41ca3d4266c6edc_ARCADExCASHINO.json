{"SourceCode": "//SPDX-License-Identifier: MIT\r\npragma solidity 0.8.21;\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed _owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal _owner;\r\n    event OwnershipTransferred(address _owner);\r\n    constructor(address creatorOwner) { _owner = creatorOwner; }\r\n    modifier onlyOwner() { require(msg.sender == _owner, \"Only owner can call this\"); _; }\r\n    function owner() public view returns (address) { return _owner; }\r\n    function transferOwnership(address newOwner) external onlyOwner { \r\n        _owner = newOwner; \r\n        emit OwnershipTransferred(newOwner); \r\n    }\r\n    function renounceOwnership() external onlyOwner { \r\n        _owner = address(0); \r\n        emit OwnershipTransferred(address(0)); \r\n    }\r\n}\r\n\r\ncontract ARCADExCASHINO is IERC20, Auth {\r\n    string private constant _name         = \"ARCADE x CASHINO\";\r\n    string private constant _symbol       = \"CASH\";\r\n    uint8 private constant _decimals      = 9;\r\n    uint256 private constant _totalSupply = 1_000_000_000_000 * (10**_decimals);\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n\r\n    uint256 private _launchTimestamp;\r\n    \r\n    uint8 private _buyTaxRate  = 5;\r\n    uint8 private _sellTaxRate = 5;\r\n\r\n    address payable private constant _walletMarketing = payable(0xDC8e4916c16290f20119BFeEA261e1867c416C46);\r\n\r\n    uint256 private _maxTxAmount     = _totalSupply / 100; \r\n    uint256 private _maxWalletAmount = _totalSupply / 100;\r\n    uint256 private constant _taxSwapMin =  1 * _totalSupply / 100000;\r\n    uint256 private constant _taxSwapMax = 25 * _totalSupply / 10000;\r\n\r\n    mapping (address => bool) private _noFees;\r\n    mapping (address => bool) private _noLimits;\r\n\r\n    address private constant _swapRouterAddress = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n    IUniswapV2Router02 private _primarySwapRouter = IUniswapV2Router02(_swapRouterAddress);\r\n    address private _primaryLP;\r\n    mapping (address => bool) private _isLP;\r\n\r\n    bool private _tradingOpen;\r\n\r\n    bool private _inTaxSwap = false;\r\n    modifier lockTaxSwap { \r\n        _inTaxSwap = true; \r\n        _; \r\n        _inTaxSwap = false; \r\n    }\r\n\r\n    event TokensAirdropped(uint256 totalWallets, uint256 totalTokens);\r\n\r\n    constructor() Auth(msg.sender) {\r\n        _balances[_owner] = _totalSupply;\r\n        emit Transfer(address(0), _owner, _balances[_owner]);\r\n\r\n        _noFees[_owner]             = true;\r\n        _noFees[address(this)]      = true;\r\n        _noFees[_swapRouterAddress] = true;\r\n        _noFees[_walletMarketing]   = true;\r\n\r\n        _noLimits[_owner]             = true;\r\n        _noLimits[address(this)]      = true;\r\n        _noLimits[_swapRouterAddress] = true;\r\n        _noLimits[_walletMarketing]   = true;\r\n\r\n        _maxTxAmount     = (_totalSupply / 100) + (10**_decimals);\r\n        _maxWalletAmount = (_totalSupply / 100) + (10**_decimals); \r\n    }\r\n\r\n    receive() external payable {}\r\n    \r\n    function totalSupply() external pure override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(msg.sender), \"Trading not open\");\r\n        return _transfer(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        require(_checkTradingOpen(sender), \"Trading not open\");\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] -= amount;\r\n        }\r\n        return _transfer(sender, recipient, amount);\r\n    }\r\n\r\n    function _approveRouter(uint256 _tokenAmount) internal {\r\n        if ( _allowances[address(this)][_swapRouterAddress] < _tokenAmount ) {\r\n            _allowances[address(this)][_swapRouterAddress] = type(uint256).max;\r\n            emit Approval(address(this), _swapRouterAddress, type(uint256).max);\r\n        }\r\n    }\r\n\r\n    function addLiquidity() external payable onlyOwner lockTaxSwap {\r\n        require(_primaryLP == address(0), \"LP exists\");\r\n        require(!_tradingOpen, \"trading is open\");\r\n        require(msg.value > 0 || address(this).balance>0, \"No ETH in contract or message\");\r\n        require(_balances[address(this)]>0, \"No tokens in contract\");\r\n        _primaryLP = IUniswapV2Factory(_primarySwapRouter.factory()).createPair(address(this), _primarySwapRouter.WETH());\r\n        _addLiquidity(_balances[address(this)], address(this).balance);\r\n        _isLP[_primaryLP] = true;\r\n        _openTrading();\r\n    }\r\n\r\n    function _openTrading() private {\r\n        require(!_tradingOpen, \"trading is open\");\r\n        _tradingOpen = true;\r\n        _launchTimestamp = block.timestamp;\r\n    }\r\n\r\n    function _addLiquidity(uint256 _tokenAmount, uint256 _ethAmountWei) internal {\r\n        _approveRouter(_tokenAmount);\r\n        _primarySwapRouter.addLiquidityETH{value: _ethAmountWei} ( address(this), _tokenAmount, 0, 0, _owner, block.timestamp );\r\n    }\r\n\r\n    function _transfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        require(sender != address(0), \"No transfers from Zero wallet\");\r\n\r\n        if (!_tradingOpen) { require(_noFees[sender] && _noLimits[sender], \"Trading not open\"); }\r\n        if ( !_inTaxSwap && _isLP[recipient] ) { _swapTaxAndLiquify(); }\r\n        if ( sender != address(this) && recipient != address(this) ) { require(_checkLimits(sender, recipient, amount), \"TX exceeds limits\"); }\r\n\r\n        uint256 _taxAmount = _calculateTax(sender, recipient, amount);\r\n        uint256 _transferAmount = amount - _taxAmount;\r\n        _balances[sender] -= amount;\r\n        if ( _taxAmount > 0 ) { _balances[address(this)] += _taxAmount; }\r\n        _balances[recipient] += _transferAmount;\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function _checkLimits(address sender, address recipient, uint256 transferAmount) internal view returns (bool) {\r\n        bool limitCheckPassed = true;\r\n        if ( _tradingOpen && !_noLimits[sender] && !_noLimits[recipient] ) {\r\n            if ( transferAmount > _maxTxAmount ) { limitCheckPassed = false; }\r\n            else if ( !_isLP[recipient] && (_balances[recipient] + transferAmount > _maxWalletAmount) ) { limitCheckPassed = false; }\r\n        }\r\n        return limitCheckPassed;\r\n    }\r\n\r\n    function _checkTradingOpen(address sender) private view returns (bool){\r\n        bool checkResult = false;\r\n        if ( _tradingOpen ) { checkResult = true; } \r\n        else if (_noFees[sender]) { checkResult = true; } \r\n\r\n        return checkResult;\r\n    }\r\n\r\n    function exemptions(address wallet) external view returns (bool noFees, bool noLimits) {\r\n        return (_noFees[wallet], _noLimits[wallet]);\r\n    }\r\n\r\n    function setExemptions(address[] calldata wallets, bool nofees, bool nolimits) external onlyOwner {\r\n        for(uint i=0; i < wallets.length; i++){\r\n            _noFees[wallets[i]]   = nofees;\r\n            _noLimits[wallets[i]] = nolimits;\r\n        }\r\n    }\r\n\r\n    function limits() external view returns (uint256 maxTX, uint256 maxWallet ) {\r\n        return ( _maxTxAmount, _maxWalletAmount);\r\n    }\r\n    function increaseLimits(uint16 maxTxAmtPermile, uint16 maxWalletAmtPermile) external onlyOwner {\r\n        uint256 newTxAmt = (_totalSupply * maxTxAmtPermile / 1000) + (10**_decimals);\r\n        require(newTxAmt >= _maxTxAmount, \"tx limit too low\");\r\n        _maxTxAmount = newTxAmt;\r\n        uint256 newWalletAmt = (_totalSupply * maxWalletAmtPermile / 1000) + (10**_decimals);\r\n        require(newWalletAmt >= _maxWalletAmount, \"wallet limit too low\");\r\n        _maxWalletAmount = newWalletAmt;\r\n\r\n        if(_maxTxAmount > _totalSupply) { _maxTxAmount = _totalSupply; }\r\n        if(_maxWalletAmount > _totalSupply) { _maxWalletAmount = _totalSupply; }\r\n    }\r\n\r\n    function fees() external view returns (uint8 buy, uint8 sell ) {\r\n        return getTimedTax();\r\n    }\r\n\r\n    function setTax(uint8 newBuyTax, uint8 newSellTax) external onlyOwner {\r\n        require(newBuyTax+newSellTax<=15,\"tax too high\");\r\n        _buyTaxRate = newBuyTax;\r\n        _sellTaxRate = newSellTax;\r\n    }\r\n\r\n\r\n    function getTimedTax() private view returns (uint8 buyTax, uint8 sellTax) {\r\n        uint8 bTax;\r\n        uint8 sTax;\r\n        uint256 launchedAt = _launchTimestamp;\r\n        if ( block.timestamp > launchedAt + 1800) {\r\n            //normal tax (5/5) from 30 minutes after launch\r\n            bTax = _buyTaxRate;\r\n            sTax = _sellTaxRate;\r\n        } else if ( block.timestamp > launchedAt + 1020) { \r\n            //10% for 13 minutes\r\n            bTax = 10;\r\n            sTax = 10;\r\n        } else if ( block.timestamp > launchedAt + 420) { \r\n            //20% for 10 minutes\r\n            bTax = 20;\r\n            sTax = 20;\r\n        } else if ( block.timestamp > launchedAt + 120) { \r\n            //45% for 5 minutes\r\n            bTax = 45;\r\n            sTax = 45;\r\n        } else if ( block.timestamp >= launchedAt) { \r\n            //99% for 2 minutes\r\n            bTax = 99;\r\n            sTax = 99;\r\n        }\r\n\r\n        if (launchedAt == 0) {\r\n            // no tax before trading starts\r\n            bTax = 0;\r\n            sTax = 0;\r\n        }\r\n        return (bTax, sTax);\r\n    }\r\n\r\n    function _calculateTax(address sender, address recipient, uint256 amount) internal view returns (uint256) {\r\n        uint256 taxAmount = 0;\r\n        if ( !_tradingOpen || _noFees[sender] || _noFees[recipient] ) { \r\n            taxAmount = 0; \r\n        } else {\r\n            (uint8 buyRate, uint8 sellRate) = getTimedTax();\r\n            if ( _isLP[sender] ) { taxAmount = amount * buyRate / 100; } \r\n            else if ( _isLP[recipient] ) { taxAmount = amount * sellRate / 100; }\r\n        }\r\n        return taxAmount;\r\n    }\r\n\r\n    function marketingWallet() external pure returns (address) {\r\n        return _walletMarketing;\r\n    }\r\n\r\n    function _swapTaxAndLiquify() private lockTaxSwap {\r\n        uint256 _taxTokensAvailable = balanceOf(address(this));\r\n\r\n        if ( _taxTokensAvailable >= _taxSwapMin && _tradingOpen ) {\r\n            if ( _taxTokensAvailable >= _taxSwapMax ) { _taxTokensAvailable = _taxSwapMax; }\r\n            _swapTaxTokensForEth(_taxTokensAvailable);\r\n            uint256 _contractETHBalance = address(this).balance;\r\n            if(_contractETHBalance > 0) { \r\n                (bool sent, bytes memory data) = _walletMarketing.call{value: _contractETHBalance}(\"\");\r\n                if (!sent) { data = bytes(\"\"); }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _swapTaxTokensForEth(uint256 tokenAmount) private {\r\n        _approveRouter(tokenAmount);\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = _primarySwapRouter.WETH();\r\n        _primarySwapRouter.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount,0,path,address(this),block.timestamp);\r\n    }\r\n}\r\n\r\ninterface IUniswapV2Factory { \r\n    function createPair(address tokenA, address tokenB) external returns (address pair); \r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n    function WETH() external pure returns (address);\r\n    function factory() external pure returns (address);\r\n    function addLiquidityETH(address token, uint amountTokenDesired, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWallets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTokens\",\"type\":\"uint256\"}],\"name\":\"TokensAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"exemptions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"noFees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"noLimits\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fees\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buy\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"sell\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"maxTxAmtPermile\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"maxWalletAmtPermile\",\"type\":\"uint16\"}],\"name\":\"increaseLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxWallet\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"nofees\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"nolimits\",\"type\":\"bool\"}],\"name\":\"setExemptions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newBuyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"newSellTax\",\"type\":\"uint8\"}],\"name\":\"setTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ARCADExCASHINO", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://9737e07fbeecc69343427348496e759fa0713a47e46f0169fa08e19e57fb558f"}