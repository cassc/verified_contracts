{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/RelayReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ncontract RelayReceiver {\\n    // --- Structs ---\\n\\n    struct Call {\\n        address to;\\n        bytes data;\\n        uint256 value;\\n    }\\n\\n    // --- Errors ---\\n\\n    error CallFailed();\\n    error NativeTransferFailed();\\n    error Unauthorized();\\n\\n    // --- Events ---\\n\\n    event FundsForwardedWithData(bytes data);\\n\\n    // --- Fields ---\\n\\n    address private immutable SOLVER;\\n\\n    // --- Constructor ---\\n\\n    constructor(address solver) {\\n        SOLVER = solver;\\n    }\\n\\n    // --- Public methods ---\\n\\n    fallback() external payable {\\n        send(SOLVER, msg.value);\\n        emit FundsForwardedWithData(msg.data);\\n    }\\n\\n    function forward(bytes calldata data) external payable {\\n        send(SOLVER, msg.value);\\n        emit FundsForwardedWithData(data);\\n    }\\n\\n    // --- Restricted methods ---\\n\\n    function makeCalls(Call[] calldata calls) external payable {\\n        if (msg.sender != SOLVER) {\\n            revert Unauthorized();\\n        }\\n\\n        unchecked {\\n            uint256 length = calls.length;\\n            for (uint256 i; i < length; i++) {\\n                Call memory c = calls[i];\\n\\n                (bool success, ) = c.to.call{value: c.value}(c.data);\\n                if (!success) {\\n                    revert CallFailed();\\n                }\\n            }\\n        }\\n    }\\n\\n    // --- Internal methods ---\\n\\n    function send(address to, uint256 value) internal {\\n        bool success;\\n        assembly {\\n            // Save gas by avoiding copying the return data to memory.\\n            // Provide at most 100k gas to the internal call, which is\\n            // more than enough to cover common use-cases of logic for\\n            // receiving native tokens (eg. SCW payable fallbacks).\\n            success := call(100000, to, value, 0, 0, 0, 0)\\n        }\\n\\n        if (!success) {\\n            revert NativeTransferFailed();\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/contracts/\",\r\n      \"solady/=lib/solady/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": true,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NativeTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"FundsForwardedWithData\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct RelayReceiver.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"makeCalls\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "RelayReceiver", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f70da97812cb96acdf810712aa562db8dfa3dbef", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}