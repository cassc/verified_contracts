{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/DerivativeOracles/WBTC.oracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\n/**\\n * @author Christoph Krpoun\\n */\\n\\n/**\\n * @dev Pricefeed contract for WBTC token.\\n * Takes ChainLink oracle values for WBTC -> BTC\\n * and BTC -> USD on ETH mainnet and combines them.\\n * Can be deployed on any chain with both\\n * ChainLink price feeds.\\n *\\n * NOTE: No need for {phaseId} or {getRoundData}\\n * implementation because no heartbeat calibration\\n * inside oracleHub. Heartbeat checks work with\\n * underlying heartbeats of BTC -> USD and\\n * WBTC -> BTC oracle.\\n */\\n\\nimport \\\"../InterfaceHub/IPriceFeed.sol\\\";\\n\\ncontract WBTCOracle {\\n\\n    constructor(\\n        IPriceFeed _IPriceFeedBTC,\\n        IPriceFeed _IPriceFeedWBTC\\n    )\\n    {\\n        BTC_FEED = _IPriceFeedBTC;\\n        WBTC_FEED = _IPriceFeedWBTC;\\n\\n        decimalsPriceBTC = BTC_FEED.decimals();\\n    }\\n\\n    // ---- Interfaces ----\\n\\n    // Pricefeed for BTC in USD\\n    IPriceFeed immutable public BTC_FEED;\\n    IPriceFeed immutable public WBTC_FEED; // Pricefeed for WBTC in BTC\\n\\n    // -- Immutable values --\\n    uint8 immutable public decimalsPriceBTC;\\n\\n    // -- Constant values --\\n    uint8 constant _decimals = 8;\\n\\n    /**\\n     * @dev Read function returning latest USD value for WBTC.\\n     * Uses answer from BTC ChainLink pricefeed and combines it with\\n     * the result from WBTC ChainLink price feed to get the USD value of WBTC.\\n     */\\n    function latestAnswer()\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        (\\n            ,\\n            int256 answerBTC,\\n            ,\\n            ,\\n\\n        ) = BTC_FEED.latestRoundData();\\n\\n        (\\n            ,\\n            int256 answerWBTC,\\n            ,\\n            ,\\n\\n        ) = WBTC_FEED.latestRoundData();\\n\\n        return uint256(answerBTC)\\n            * uint256(answerWBTC)\\n            / 10 ** decimalsPriceBTC;\\n    }\\n\\n    /**\\n     * @dev Returns priceFeed decimals.\\n     */\\n    function decimals()\\n        external\\n        pure\\n        returns (uint8)\\n    {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Read function mimicking the latest round data\\n     * for our WBTC price feed.\\n     * Needed for latest {latestResolver} implementation\\n     * of the oracleHub (Former implementation used\\n     * {latestAnswer}).\\n     */\\n    function latestRoundData()\\n        public\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        )\\n    {\\n        return (\\n            roundId,\\n            int256(latestAnswer()),\\n            startedAt,\\n            updatedAt,\\n            answeredInRound\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/InterfaceHub/IPriceFeed.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: -- WISE --\\n\\npragma solidity =0.8.21;\\n\\ninterface IPriceFeed {\\n\\n    function decimals()\\n        external\\n        view\\n        returns (uint8);\\n\\n    function description()\\n        external\\n        view\\n        returns (string memory);\\n\\n    function version()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (\\n            uint80 roundId,\\n            int256 answer,\\n            uint256 startedAt,\\n            uint256 updatedAt,\\n            uint80 answeredInRound\\n        );\\n\\n    function latestAnswer()\\n        external\\n        view\\n        returns (uint256);\\n\\n    function phaseId()\\n        external\\n        view\\n        returns(\\n            uint16 phaseId\\n        );\\n\\n    function aggregator()\\n        external\\n        view\\n        returns (address);\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"_IPriceFeedBTC\",\"type\":\"address\"},{\"internalType\":\"contract IPriceFeed\",\"name\":\"_IPriceFeedWBTC\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"BTC_FEED\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WBTC_FEED\",\"outputs\":[{\"internalType\":\"contract IPriceFeed\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimalsPriceBTC\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestRoundData\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"roundId\",\"type\":\"uint80\"},{\"internalType\":\"int256\",\"name\":\"answer\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"startedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"updatedAt\",\"type\":\"uint256\"},{\"internalType\":\"uint80\",\"name\":\"answeredInRound\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "WBTCOracle", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000f4030086522a5beea4988f8ca5b36dbc97bee88c000000000000000000000000fdfd9c85ad200c506cf9e21f1fd8dd01932fbb23", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}