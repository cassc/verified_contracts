{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@solidstate/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20Internal } from './IERC20Internal.sol';\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ninterface IERC20 is IERC20Internal {\\n    /**\\n     * @notice query the total minted token supply\\n     * @return token supply\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice query the token balance of given account\\n     * @param account address to query\\n     * @return token balance\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @notice query the allowance granted from given holder to given spender\\n     * @param holder approver of allowance\\n     * @param spender recipient of allowance\\n     * @return token allowance\\n     */\\n    function allowance(\\n        address holder,\\n        address spender\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice grant approval to spender to spend tokens\\n     * @dev prefer ERC20Extended functions to avoid transaction-ordering vulnerability (see https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729)\\n     * @param spender recipient of allowance\\n     * @param amount quantity of tokens approved for spending\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transfer(\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @notice transfer tokens to given recipient on behalf of given holder\\n     * @param holder holder of tokens prior to transfer\\n     * @param recipient beneficiary of token transfer\\n     * @param amount quantity of tokens to transfer\\n     * @return success status (always true; otherwise function should revert)\\n     */\\n    function transferFrom(\\n        address holder,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/interfaces/IERC20Internal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title Partial ERC20 interface needed by internal functions\\n */\\ninterface IERC20Internal {\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport { IERC20MetadataInternal } from './IERC20MetadataInternal.sol';\\n\\n/**\\n * @title ERC20 metadata interface\\n */\\ninterface IERC20Metadata is IERC20MetadataInternal {\\n    /**\\n     * @notice return token name\\n     * @return token name\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @notice return token symbol\\n     * @return token symbol\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @notice return token decimals, generally used only for display purposes\\n     * @return token decimals\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@solidstate/contracts/token/ERC20/metadata/IERC20MetadataInternal.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\n/**\\n * @title ERC20 metadata internal interface\\n */\\ninterface IERC20MetadataInternal {\\n\\n}\\n\"\r\n    },\r\n    \"contracts/valuers/Erc20Valuer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from '@solidstate/contracts/interfaces/IERC20.sol';\\nimport { IERC20Metadata } from '@solidstate/contracts/token/ERC20/metadata/IERC20Metadata.sol';\\n\\nimport { IValuer } from '../valuers/IValuer.sol';\\n\\ncontract Erc20Valuer is IValuer {\\n    function getVaultValue(\\n        address vault,\\n        address asset,\\n        int256 unitPrice\\n    ) external view returns (uint256 minValue, uint256 maxValue) {\\n        return _getVaultValue(vault, asset, unitPrice);\\n    }\\n\\n    function getAssetValue(\\n        uint amount,\\n        address asset,\\n        int256 unitPrice\\n    ) external view returns (uint256 minValue, uint256 maxValue) {\\n        return _getAssetValue(amount, asset, unitPrice);\\n    }\\n\\n    function getAssetBreakdown(\\n        address vault,\\n        address asset,\\n        int256 unitPrice\\n    ) external view returns (AssetValue memory) {\\n        (uint min, uint max) = _getVaultValue(vault, asset, unitPrice);\\n        uint balance = IERC20(asset).balanceOf(vault);\\n        AssetBreakDown[] memory ab = new AssetBreakDown[](1);\\n        ab[0] = AssetBreakDown(asset, balance, min, max);\\n        return AssetValue(asset, min, max, ab);\\n    }\\n\\n    function getAssetActive(\\n        address vault,\\n        address asset\\n    ) external view returns (bool) {\\n        return IERC20(asset).balanceOf(vault) > 0;\\n    }\\n\\n    function _getVaultValue(\\n        address vault,\\n        address asset,\\n        int256 unitPrice\\n    ) internal view returns (uint256 minValue, uint256 maxValue) {\\n        uint balance = IERC20(asset).balanceOf(vault);\\n        return _getAssetValue(balance, asset, unitPrice);\\n    }\\n\\n    function _getAssetValue(\\n        uint amount,\\n        address asset,\\n        int256 unitPrice\\n    ) internal view returns (uint256 minValue, uint256 maxValue) {\\n        uint decimals = IERC20Metadata(asset).decimals();\\n        uint value = (uint(unitPrice) * amount) / (10 ** decimals);\\n        return (value, value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/valuers/IValuer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity ^0.8.0;\\n\\ninterface IValuer {\\n    struct AssetValue {\\n        address asset;\\n        uint256 totalMinValue;\\n        uint256 totalMaxValue;\\n        AssetBreakDown[] breakDown;\\n    }\\n\\n    struct AssetBreakDown {\\n        address asset;\\n        uint256 balance;\\n        uint256 minValue;\\n        uint256 maxValue;\\n    }\\n\\n    function getVaultValue(\\n        address vault,\\n        address asset,\\n        int256 unitPrice\\n    ) external view returns (uint256 minValue, uint256 maxValue);\\n\\n    function getAssetValue(\\n        uint amount,\\n        address asset,\\n        int256 unitPrice\\n    ) external view returns (uint256 minValue, uint256 maxValue);\\n\\n    // This returns an array because later on we may support assets that have multiple tokens\\n    // Or we may want to break GMX down into individual positions\\n    function getAssetBreakdown(\\n        address vault,\\n        address asset,\\n        int256 unitPrice\\n    ) external view returns (AssetValue memory);\\n\\n    function getAssetActive(\\n        address vault,\\n        address asset\\n    ) external view returns (bool);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"}],\"name\":\"getAssetActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"unitPrice\",\"type\":\"int256\"}],\"name\":\"getAssetBreakdown\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"totalMinValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalMaxValue\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"internalType\":\"struct IValuer.AssetBreakDown[]\",\"name\":\"breakDown\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IValuer.AssetValue\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"unitPrice\",\"type\":\"int256\"}],\"name\":\"getAssetValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"int256\",\"name\":\"unitPrice\",\"type\":\"int256\"}],\"name\":\"getVaultValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Erc20Valuer", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}