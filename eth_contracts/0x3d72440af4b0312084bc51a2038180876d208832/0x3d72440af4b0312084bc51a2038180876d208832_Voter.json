{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Voter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport {AccessManaged, IAccessManager, Context} from \\\"@openzeppelin/contracts/access/manager/AccessManaged.sol\\\";\\nimport {ERC2771Context} from \\\"@openzeppelin/contracts/metatx/ERC2771Context.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport {VelodromeTimeLibrary} from \\\"./libraries/VelodromeTimeLibrary.sol\\\";\\nimport {IVotingRewardsFactory} from \\\"./interfaces/factories/IVotingRewardsFactory.sol\\\";\\nimport {IVotingReward} from \\\"./interfaces/IVotingReward.sol\\\";\\nimport {IVoter} from \\\"./interfaces/IVoter.sol\\\";\\nimport {IVotingEscrow} from \\\"./interfaces/IVotingEscrow.sol\\\";\\nimport {IGovernanceRegistry} from \\\"./interfaces/IGovernanceRegistry.sol\\\";\\n\\n/// @title Voter\\n/// @notice Manage votes, emission distribution, and voting rewards creation within the Spectra ecosystem.\\ncontract Voter is IVoter, AccessManaged, ERC2771Context, ReentrancyGuard {\\n    /// @inheritdoc IVoter\\n    address public immutable dao;\\n    /// @inheritdoc IVoter\\n    address public immutable forwarder;\\n    /// @inheritdoc IVoter\\n    address public immutable ve;\\n    /// @inheritdoc IVoter\\n    address public immutable governanceRegistry;\\n    /// @notice Rewards are released over 7 days\\n    uint256 internal constant DURATION = 7 days;\\n\\n    /// @inheritdoc IVoter\\n    uint256 public totalWeight;\\n    /// @inheritdoc IVoter\\n    uint256 public maxVotingNum;\\n    /// @notice minimum value for maxVotingNum\\n    uint256 internal constant MIN_MAXVOTINGNUM = 10;\\n\\n    /// @inheritdoc IVoter\\n    uint256 public defaultFeesRewardsDaoFee;\\n    /// @inheritdoc IVoter\\n    uint256 public defaultBribeRewardsDaoFee;\\n    /// @notice equivalent to 100% fee\\n    uint256 internal constant MAX_DEFAULT_FEE = 10000;\\n\\n    /// @dev All pools eligible for incentives\\n    uint160[] public poolIds;\\n    /// @inheritdoc IVoter\\n    mapping(uint160 => bool) public hasVotingRewards;\\n    /// @inheritdoc IVoter\\n    mapping(uint160 => address) public poolToFees;\\n    /// @inheritdoc IVoter\\n    mapping(uint160 => address) public poolToBribe;\\n    /// @inheritdoc IVoter\\n    mapping(uint160 => uint256) public weights;\\n    /// @inheritdoc IVoter\\n    mapping(address => mapping(uint160 => uint256)) public votes;\\n    /// @dev List of pools voted for by user\\n    mapping(address => uint160[]) public poolVote;\\n    /// @inheritdoc IVoter\\n    mapping(address => uint256) public usedWeights;\\n    /// @inheritdoc IVoter\\n    mapping(address => uint256) public lastVoted;\\n    /// @inheritdoc IVoter\\n    mapping(address => bool) public isWhitelistedBribeToken;\\n    /// @inheritdoc IVoter\\n    mapping(address => bool) public isWhitelistedUser;\\n    /// @inheritdoc IVoter\\n    mapping(uint160 => bool) public isVoteAuthorized;\\n    /// @inheritdoc IVoter\\n    mapping(address => bool) public voted;\\n    /// @inheritdoc IVoter\\n    mapping(address => bool) public isRestrictedUser;\\n\\n    constructor(\\n        address _dao,\\n        address _initialAuthority,\\n        address _forwarder,\\n        address _ve,\\n        address _governanceRegistry,\\n        uint256 _defaultFeesRewardsDaoFee,\\n        uint256 _defaultBribeRewardsDaoFee\\n    ) AccessManaged(_initialAuthority) ERC2771Context(_forwarder) {\\n        dao = _dao;\\n        forwarder = _forwarder;\\n        ve = _ve;\\n        governanceRegistry = _governanceRegistry;\\n        maxVotingNum = 30;\\n        if (_defaultFeesRewardsDaoFee > 10000 || _defaultBribeRewardsDaoFee > 10000) revert FeeTooHigh();\\n        defaultFeesRewardsDaoFee = _defaultFeesRewardsDaoFee;\\n        defaultBribeRewardsDaoFee = _defaultBribeRewardsDaoFee;\\n    }\\n\\n    modifier onlyNewEpoch(address _user) {\\n        // ensure new epoch since last vote\\n        if (VelodromeTimeLibrary.epochStart(block.timestamp) <= lastVoted[_user]) {\\n            revert AlreadyVotedOrDeposited();\\n        }\\n        if (block.timestamp <= VelodromeTimeLibrary.epochVoteStart(block.timestamp)) revert DistributeWindow();\\n        _;\\n    }\\n\\n    function _msgData() internal view override(Context, ERC2771Context) returns (bytes calldata) {\\n        return ERC2771Context._msgData();\\n    }\\n\\n    function _msgSender() internal view override(Context, ERC2771Context) returns (address) {\\n        return ERC2771Context._msgSender();\\n    }\\n\\n    function _contextSuffixLength() internal view override(Context, ERC2771Context) returns (uint256) {\\n        return ERC2771Context._contextSuffixLength();\\n    }\\n\\n    function epochStart(uint256 _timestamp) external pure returns (uint256) {\\n        return VelodromeTimeLibrary.epochStart(_timestamp);\\n    }\\n\\n    function epochNext(uint256 _timestamp) external pure returns (uint256) {\\n        return VelodromeTimeLibrary.epochNext(_timestamp);\\n    }\\n\\n    function epochVoteStart(uint256 _timestamp) external pure returns (uint256) {\\n        return VelodromeTimeLibrary.epochVoteStart(_timestamp);\\n    }\\n\\n    function epochVoteEnd(uint256 _timestamp) external pure returns (uint256) {\\n        return VelodromeTimeLibrary.epochVoteEnd(_timestamp);\\n    }\\n\\n    function initialize(address[] calldata _tokens) external restricted {\\n        uint256 _length = _tokens.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            _whitelistBribeToken(_tokens[i], true);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setMaxVotingNum(uint256 _maxVotingNum) external restricted {\\n        if (_maxVotingNum < MIN_MAXVOTINGNUM) revert MaximumVotingNumberTooLow();\\n        if (_maxVotingNum == maxVotingNum) revert SameValue();\\n        maxVotingNum = _maxVotingNum;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setDefaultFeesRewardsDaoFee(uint256 _defaultFeesRewardsDaoFee) external restricted {\\n        if (_defaultFeesRewardsDaoFee > MAX_DEFAULT_FEE) {\\n            revert FeeTooHigh();\\n        }\\n        defaultFeesRewardsDaoFee = _defaultFeesRewardsDaoFee;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setDefaultBribeRewardsDaoFee(uint256 _defaultBribeRewardsDaoFee) external restricted {\\n        if (_defaultBribeRewardsDaoFee > MAX_DEFAULT_FEE) revert FeeTooHigh();\\n        defaultBribeRewardsDaoFee = _defaultBribeRewardsDaoFee;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setPoolsVotingRewardsDaoFee(\\n        uint160[] calldata _poolIds,\\n        uint256 _feesRewardsDaoFee,\\n        uint256 _bribeRewardsDaoFee\\n    ) external restricted {\\n        uint256 _length = _poolIds.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            uint160 _poolId = _poolIds[i];\\n            if (!hasVotingRewards[_poolId]) revert VotingRewardsNotDeployed();\\n            IVotingReward(poolToFees[_poolId]).setDaoFee(_feesRewardsDaoFee);\\n            IVotingReward(poolToBribe[_poolId]).setDaoFee(_bribeRewardsDaoFee);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setVotingRewardsDaoFee(\\n        address[] calldata _fees,\\n        uint256 _feesRewardsDaoFee,\\n        address[] calldata _bribes,\\n        uint256 _bribeRewardsDaoFee\\n    ) external restricted {\\n        uint256 _length = _fees.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            IVotingReward(_fees[i]).setDaoFee(_feesRewardsDaoFee);\\n        }\\n        _length = _bribes.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            IVotingReward(_bribes[i]).setDaoFee(_bribeRewardsDaoFee);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setRestrictedUser(address _user, bool _bool) external restricted {\\n        isRestrictedUser[_user] = _bool;\\n    }\\n\\n    // function moved from the VotingEscrow to the Voter contract\\n    function _voting(address _user, bool _voted) internal {\\n        voted[_user] = _voted;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function reset(address _user) external onlyNewEpoch(_user) nonReentrant {\\n        if (!isApprovedOrOwner(msg.sender, _user)) revert NotApprovedOrOwner();\\n        _reset(_user);\\n    }\\n\\n    function _reset(address _user) internal {\\n        uint160[] memory _poolVote = poolVote[_user];\\n        uint256 _poolVoteCnt = _poolVote.length;\\n        uint256 _totalWeight = 0;\\n\\n        for (uint256 i = 0; i < _poolVoteCnt; i++) {\\n            uint160 _poolId = _poolVote[i];\\n            uint256 _votes = votes[_user][_poolId];\\n\\n            if (_votes != 0) {\\n                weights[_poolId] -= _votes;\\n                delete votes[_user][_poolId];\\n                IVotingReward(poolToFees[_poolId])._withdraw(_votes, _user);\\n                IVotingReward(poolToBribe[_poolId])._withdraw(_votes, _user);\\n                _totalWeight += _votes;\\n                emit Abstained(_msgSender(), _poolId, _user, _votes, weights[_poolId], block.timestamp);\\n            }\\n        }\\n        _voting(_user, false);\\n        totalWeight -= _totalWeight;\\n        usedWeights[_user] = 0;\\n        delete poolVote[_user];\\n    }\\n\\n    function _poke(address _user, uint256 _weight) internal {\\n        uint160[] memory _poolVote = poolVote[_user];\\n        uint256 _poolCnt = _poolVote.length;\\n        uint256[] memory _weights = new uint256[](_poolCnt);\\n\\n        for (uint256 i = 0; i < _poolCnt; i++) {\\n            _weights[i] = votes[_user][_poolVote[i]];\\n        }\\n        _vote(_user, _weight, _poolVote, _weights);\\n    }\\n\\n    function _vote(address _user, uint256 _weight, uint160[] memory _poolVote, uint256[] memory _weights) internal {\\n        _reset(_user);\\n        uint256 _poolCnt = _poolVote.length;\\n        uint256 _totalVoteWeight = 0;\\n        uint256 _usedWeight = 0;\\n\\n        for (uint256 i = 0; i < _poolCnt; i++) {\\n            _totalVoteWeight += _weights[i];\\n        }\\n\\n        for (uint256 i = 0; i < _poolCnt; i++) {\\n            uint160 _poolId = _poolVote[i];\\n            if (!hasVotingRewards[_poolId]) revert VotingRewardsNotDeployed();\\n            if (!isVoteAuthorized[_poolId]) revert VoteUnauthorized();\\n\\n            uint256 _poolWeight = (_weights[i] * _weight) / _totalVoteWeight;\\n            if (votes[_user][_poolId] != 0) revert NonZeroVotes();\\n            if (_poolWeight == 0) revert ZeroBalance();\\n\\n            poolVote[_user].push(_poolId);\\n\\n            weights[_poolId] += _poolWeight;\\n            votes[_user][_poolId] += _poolWeight;\\n            IVotingReward(poolToFees[_poolId])._deposit(_poolWeight, _user);\\n            IVotingReward(poolToBribe[_poolId])._deposit(_poolWeight, _user);\\n            _usedWeight += _poolWeight;\\n            emit Voted(_msgSender(), _poolId, _user, _poolWeight, weights[_poolId], block.timestamp);\\n        }\\n        if (_usedWeight > 0) _voting(_user, true);\\n        totalWeight += _usedWeight;\\n        usedWeights[_user] = _usedWeight;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function poke(address _user) external nonReentrant {\\n        if (block.timestamp <= VelodromeTimeLibrary.epochVoteStart(block.timestamp)) revert DistributeWindow();\\n        uint256 _weight = IVotingEscrow(ve).balanceOf(_user);\\n        _poke(_user, _weight);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function vote(\\n        address _user,\\n        uint160[] calldata _poolVote,\\n        uint256[] calldata _weights\\n    ) external onlyNewEpoch(_user) nonReentrant {\\n        if (!isApprovedOrOwner(_msgSender(), _user)) revert NotApprovedOrOwner();\\n        if (_poolVote.length != _weights.length) revert UnequalLengths();\\n        if (_poolVote.length > maxVotingNum) revert TooManyPools();\\n        if (isRestrictedUser[_user]) revert UserRestricted();\\n        uint256 _timestamp = block.timestamp;\\n        if ((_timestamp > VelodromeTimeLibrary.epochVoteEnd(_timestamp)) && !isWhitelistedUser[_user]) {\\n            revert NotWhitelistedUser();\\n        }\\n        lastVoted[_user] = _timestamp;\\n        uint256 _weight = IVotingEscrow(ve).balanceOf(_user);\\n        _vote(_user, _weight, _poolVote, _weights);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function batchPoke(address[] calldata _users) external nonReentrant {\\n        if (block.timestamp <= VelodromeTimeLibrary.epochVoteStart(block.timestamp)) revert DistributeWindow();\\n        uint256 _length = _users.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            uint256 _weight = IVotingEscrow(ve).balanceOf(_users[i]);\\n            _poke(_users[i], _weight);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function batchVote(\\n        address[] calldata _users,\\n        uint160[] calldata _poolVote,\\n        uint256[] calldata _weights\\n    ) external nonReentrant {\\n        uint256 _timestamp = block.timestamp;\\n        if (_timestamp <= VelodromeTimeLibrary.epochVoteStart(_timestamp)) revert DistributeWindow();\\n        if (_poolVote.length != _weights.length) revert UnequalLengths();\\n        if (_poolVote.length > maxVotingNum) revert TooManyPools();\\n        uint256 _length = _users.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            if (VelodromeTimeLibrary.epochStart(_timestamp) <= lastVoted[_users[i]]) {\\n                revert AlreadyVotedOrDeposited();\\n            }\\n            if ((_timestamp > VelodromeTimeLibrary.epochVoteEnd(_timestamp)) && !isWhitelistedUser[_users[i]]) {\\n                revert NotWhitelistedUser();\\n            }\\n            if (!isApprovedOrOwner(_msgSender(), _users[i])) revert NotApprovedOrOwner();\\n            if (isRestrictedUser[_users[i]]) revert UserRestricted();\\n            lastVoted[_users[i]] = _timestamp;\\n            uint256 _weight = IVotingEscrow(ve).balanceOf(_users[i]);\\n            _vote(_users[i], _weight, _poolVote, _weights);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function whitelistBribeToken(address _token, bool _bool) external restricted {\\n        _whitelistBribeToken(_token, _bool);\\n    }\\n\\n    function _whitelistBribeToken(address _token, bool _bool) internal {\\n        isWhitelistedBribeToken[_token] = _bool;\\n        emit WhitelistBribeToken(_msgSender(), _token, _bool);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function whitelistUser(address _user, bool _bool) external restricted {\\n        isWhitelistedUser[_user] = _bool;\\n        emit WhitelistUser(_msgSender(), _user, _bool);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function createVotingRewards(uint160 _poolId) external nonReentrant returns (address fees, address bribe) {\\n        if (hasVotingRewards[_poolId]) {\\n            revert VotingRewardsAlreadyDeployed();\\n        }\\n        if (!IGovernanceRegistry(governanceRegistry).isPoolRegistered(_poolId)) {\\n            revert NotARegisteredPool();\\n        }\\n\\n        address votingRewardsFactory = IGovernanceRegistry(governanceRegistry).votingRewardsFactory();\\n        address accessManager = authority();\\n\\n        (fees, bribe) = IVotingRewardsFactory(votingRewardsFactory).createRewards(\\n            _poolId,\\n            dao,\\n            accessManager,\\n            forwarder,\\n            address(0),\\n            defaultFeesRewardsDaoFee,\\n            defaultBribeRewardsDaoFee\\n        );\\n\\n        poolToFees[_poolId] = fees;\\n        poolToBribe[_poolId] = bribe;\\n        hasVotingRewards[_poolId] = true;\\n        isVoteAuthorized[_poolId] = true;\\n        poolIds.push(_poolId);\\n\\n        emit VotingRewardsCreated(votingRewardsFactory, _poolId, bribe, fees, _msgSender());\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function banVote(uint160 _poolId) external restricted {\\n        if (!hasVotingRewards[_poolId]) revert VotingRewardsNotDeployed();\\n        if (!isVoteAuthorized[_poolId]) revert VoteAlreadyBanned();\\n        isVoteAuthorized[_poolId] = false;\\n        emit VoteBanned(_poolId);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function reauthorizeVote(uint160 _poolId) external restricted {\\n        if (!hasVotingRewards[_poolId]) revert VotingRewardsNotDeployed();\\n        if (isVoteAuthorized[_poolId]) revert VoteAlreadyAuthorized();\\n        isVoteAuthorized[_poolId] = true;\\n        emit VoteReauthorized(_poolId);\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function length() external view returns (uint256) {\\n        return poolIds.length;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function getAllPoolIds() external view returns (uint160[] memory) {\\n        return poolIds;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function claimBribes(address[] calldata _bribes, address[][] calldata _tokens, address _user) external {\\n        if (!isApprovedOrOwner(_msgSender(), _user)) revert NotApprovedOrOwner();\\n        uint256 _length = _bribes.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            IVotingReward(_bribes[i]).getRewards(_user, _tokens[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function claimFees(address[] calldata _fees, address[][] calldata _tokens, address _user) external {\\n        if (!isApprovedOrOwner(_msgSender(), _user)) revert NotApprovedOrOwner();\\n        uint256 _length = _fees.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            IVotingReward(_fees[i]).getRewards(_user, _tokens[i]);\\n        }\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function claimPoolsVotingRewards(\\n        uint160[] calldata _poolIds,\\n        address[][] calldata _bribeTokens,\\n        address[][] calldata _feeTokens,\\n        address _user\\n    ) external {\\n        if (!isApprovedOrOwner(_msgSender(), _user)) revert NotApprovedOrOwner();\\n        uint256 _length = _poolIds.length;\\n        for (uint256 i = 0; i < _length; i++) {\\n            IVotingReward(poolToBribe[_poolIds[i]]).getRewards(_user, _bribeTokens[i]);\\n            IVotingReward(poolToFees[_poolIds[i]]).getRewards(_user, _feeTokens[i]);\\n        }\\n    }\\n\\n    //////////////////////////////////////////////////////////////*/\\n\\n    // Delegation:\\n    // Let another address execute the functions available in Voter\\n\\n    /// @dev Mapping from owner address to mapping of operator addresses.\\n    mapping(address => mapping(address => bool)) internal ownerToOperators;\\n\\n    /// @inheritdoc IVoter\\n    function isApprovedOrOwner(address _operator, address _user) public view returns (bool) {\\n        bool spenderIsOwner = _user == _operator;\\n        bool spenderIsApproved = ownerToOperators[_user][_operator];\\n        return spenderIsOwner || spenderIsApproved;\\n    }\\n\\n    /// @inheritdoc IVoter\\n    function setApprovalForAll(address _operator, bool _approved) external {\\n        address sender = _msgSender();\\n        // Throws if `_operator` is the `_msgSender()`\\n        if (_operator == sender) revert SameAddress();\\n        ownerToOperators[sender][_operator] = _approved;\\n        emit Approval(sender, _operator, _approved);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/manager/AccessManaged.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\nimport {AuthorityUtils} from \\\"./AuthorityUtils.sol\\\";\\nimport {IAccessManager} from \\\"./IAccessManager.sol\\\";\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev This contract module makes available a {restricted} modifier. Functions decorated with this modifier will be\\n * permissioned according to an \\\"authority\\\": a contract like {AccessManager} that follows the {IAuthority} interface,\\n * implementing a policy that allows certain callers to access certain functions.\\n *\\n * IMPORTANT: The `restricted` modifier should never be used on `internal` functions, judiciously used in `public`\\n * functions, and ideally only used in `external` functions. See {restricted}.\\n */\\nabstract contract AccessManaged is Context, IAccessManaged {\\n    address private _authority;\\n\\n    bool private _consumingSchedule;\\n\\n    /**\\n     * @dev Initializes the contract connected to an initial authority.\\n     */\\n    constructor(address initialAuthority) {\\n        _setAuthority(initialAuthority);\\n    }\\n\\n    /**\\n     * @dev Restricts access to a function as defined by the connected Authority for this contract and the\\n     * caller and selector of the function that entered the contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * In general, this modifier should only be used on `external` functions. It is okay to use it on `public`\\n     * functions that are used as external entry points and are not called internally. Unless you know what you're\\n     * doing, it should never be used on `internal` functions. Failure to follow these rules can have critical security\\n     * implications! This is because the permissions are determined by the function that entered the contract, i.e. the\\n     * function at the bottom of the call stack, and not the function where the modifier is visible in the source code.\\n     * ====\\n     *\\n     * [WARNING]\\n     * ====\\n     * Avoid adding this modifier to the https://docs.soliditylang.org/en/v0.8.20/contracts.html#receive-ether-function[`receive()`]\\n     * function or the https://docs.soliditylang.org/en/v0.8.20/contracts.html#fallback-function[`fallback()`]. These\\n     * functions are the only execution paths where a function selector cannot be unambiguosly determined from the calldata\\n     * since the selector defaults to `0x00000000` in the `receive()` function and similarly in the `fallback()` function\\n     * if no calldata is provided. (See {_checkCanCall}).\\n     *\\n     * The `receive()` function will always panic whereas the `fallback()` may panic depending on the calldata length.\\n     * ====\\n     */\\n    modifier restricted() {\\n        _checkCanCall(_msgSender(), _msgData());\\n        _;\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function authority() public view virtual returns (address) {\\n        return _authority;\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function setAuthority(address newAuthority) public virtual {\\n        address caller = _msgSender();\\n        if (caller != authority()) {\\n            revert AccessManagedUnauthorized(caller);\\n        }\\n        if (newAuthority.code.length == 0) {\\n            revert AccessManagedInvalidAuthority(newAuthority);\\n        }\\n        _setAuthority(newAuthority);\\n    }\\n\\n    /// @inheritdoc IAccessManaged\\n    function isConsumingScheduledOp() public view returns (bytes4) {\\n        return _consumingSchedule ? this.isConsumingScheduledOp.selector : bytes4(0);\\n    }\\n\\n    /**\\n     * @dev Transfers control to a new authority. Internal function with no access restriction. Allows bypassing the\\n     * permissions set by the current authority.\\n     */\\n    function _setAuthority(address newAuthority) internal virtual {\\n        _authority = newAuthority;\\n        emit AuthorityUpdated(newAuthority);\\n    }\\n\\n    /**\\n     * @dev Reverts if the caller is not allowed to call the function identified by a selector. Panics if the calldata\\n     * is less than 4 bytes long.\\n     */\\n    function _checkCanCall(address caller, bytes calldata data) internal virtual {\\n        (bool immediate, uint32 delay) = AuthorityUtils.canCallWithDelay(\\n            authority(),\\n            caller,\\n            address(this),\\n            bytes4(data[0:4])\\n        );\\n        if (!immediate) {\\n            if (delay > 0) {\\n                _consumingSchedule = true;\\n                IAccessManager(authority()).consumeScheduledOp(caller, data);\\n                _consumingSchedule = false;\\n            } else {\\n                revert AccessManagedUnauthorized(caller);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/metatx/ERC2771Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (metatx/ERC2771Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Context variant with ERC2771 support.\\n *\\n * WARNING: Avoid using this pattern in contracts that rely in a specific calldata length as they'll\\n * be affected by any forwarder whose `msg.data` is suffixed with the `from` address according to the ERC2771\\n * specification adding the address size in bytes (20) to the calldata size. An example of an unexpected\\n * behavior could be an unintended fallback (or another function) invocation while trying to invoke the `receive`\\n * function only accessible if `msg.data.length == 0`.\\n *\\n * WARNING: The usage of `delegatecall` in this contract is dangerous and may result in context corruption.\\n * Any forwarded request to this contract triggering a `delegatecall` to itself will result in an invalid {_msgSender}\\n * recovery.\\n */\\nabstract contract ERC2771Context is Context {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    address private immutable _trustedForwarder;\\n\\n    /**\\n     * @dev Initializes the contract with a trusted forwarder, which will be able to\\n     * invoke functions on this contract on behalf of other accounts.\\n     *\\n     * NOTE: The trusted forwarder can be replaced by overriding {trustedForwarder}.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(address trustedForwarder_) {\\n        _trustedForwarder = trustedForwarder_;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the trusted forwarder.\\n     */\\n    function trustedForwarder() public view virtual returns (address) {\\n        return _trustedForwarder;\\n    }\\n\\n    /**\\n     * @dev Indicates whether any particular address is the trusted forwarder.\\n     */\\n    function isTrustedForwarder(address forwarder) public view virtual returns (bool) {\\n        return forwarder == trustedForwarder();\\n    }\\n\\n    /**\\n     * @dev Override for `msg.sender`. Defaults to the original `msg.sender` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgSender() internal view virtual override returns (address) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return address(bytes20(msg.data[calldataLength - contextSuffixLength:]));\\n        } else {\\n            return super._msgSender();\\n        }\\n    }\\n\\n    /**\\n     * @dev Override for `msg.data`. Defaults to the original `msg.data` whenever\\n     * a call is not performed by the trusted forwarder or the calldata length is less than\\n     * 20 bytes (an address length).\\n     */\\n    function _msgData() internal view virtual override returns (bytes calldata) {\\n        uint256 calldataLength = msg.data.length;\\n        uint256 contextSuffixLength = _contextSuffixLength();\\n        if (isTrustedForwarder(msg.sender) && calldataLength >= contextSuffixLength) {\\n            return msg.data[:calldataLength - contextSuffixLength];\\n        } else {\\n            return super._msgData();\\n        }\\n    }\\n\\n    /**\\n     * @dev ERC-2771 specifies the context as being a single address (20 bytes).\\n     */\\n    function _contextSuffixLength() internal view virtual override returns (uint256) {\\n        return 20;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/VelodromeTimeLibrary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.20;\\n\\n/// @title VelodromeTime Library\\n/// @author velodrome.finance\\n/// @notice Utilities to compute start / end of epochs and voting windows\\nlibrary VelodromeTimeLibrary {\\n    uint256 internal constant WEEK = 7 days;\\n\\n    /// @dev Returns start of epoch based on current timestamp\\n    function epochStart(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK);\\n        }\\n    }\\n\\n    /// @dev Returns start of next epoch / end of current epoch\\n    function epochNext(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK) + WEEK;\\n        }\\n    }\\n\\n    /// @dev Returns start of voting window\\n    function epochVoteStart(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK) + 1 hours;\\n        }\\n    }\\n\\n    /// @dev Returns end of voting window / beginning of unrestricted voting window\\n    function epochVoteEnd(uint256 timestamp) internal pure returns (uint256) {\\n        unchecked {\\n            return timestamp - (timestamp % WEEK) + WEEK - 1 hours;\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/factories/IVotingRewardsFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IVotingRewardsFactory {\\n    /// @notice creates a BribeVotingReward and a FeesVotingReward contract for a pool\\n    /// @param _poolId              Identifier of the pool\\n    /// @param _dao                 Address of the DAO\\n    /// @param _initialAuthority    Address of access manager\\n    /// @param _forwarder           Address of trusted forwarder\\n    /// @param _initialRewardToken  Addresses of initial reward token\\n    /// @param _feesDaoFee          Default value of fees voting rewards to be sent to the DAO, in basis points\\n    /// @param _bribeDaoFee         Default value of bribe voting rewards to be sent to the DAO, in basis points\\n    /// @return feesVotingReward    Address of FeesVotingReward contract created\\n    /// @return bribeVotingReward   Address of BribeVotingReward contract created\\n    function createRewards(\\n        uint160 _poolId,\\n        address _dao,\\n        address _initialAuthority,\\n        address _forwarder,\\n        address _initialRewardToken,\\n        uint256 _feesDaoFee,\\n        uint256 _bribeDaoFee\\n    ) external returns (address feesVotingReward, address bribeVotingReward);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotingReward.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IVotingReward {\\n    error FeeTooHigh();\\n    error NotWhitelistedReward();\\n    error PoolBanned();\\n    error ZeroAmount();\\n\\n    event Deposit(address indexed from, address indexed user, uint256 amount);\\n    event Withdraw(address indexed from, address indexed user, uint256 amount);\\n    event NotifyReward(address indexed from, address indexed reward, uint256 indexed epoch, uint256 amount);\\n    event ClaimRewards(address indexed from, address indexed reward, uint256 amount);\\n    event DaoFeeChange(uint256 indexed oldFee, uint256 indexed newFee);\\n\\n    /// @notice A checkpoint for marking balance\\n    struct Checkpoint {\\n        uint256 timestamp;\\n        uint256 balanceOf;\\n    }\\n\\n    /// @notice A checkpoint for marking supply\\n    struct SupplyCheckpoint {\\n        uint256 timestamp;\\n        uint256 supply;\\n    }\\n\\n    /// @notice Epoch duration constant (7 days)\\n    function DURATION() external view returns (uint256);\\n\\n    /// @notice Address of DAO\\n    function dao() external view returns (address);\\n\\n    /// @notice Address of Voter.sol\\n    function voter() external view returns (address);\\n\\n    /// @notice ID of the pool this contrat is associated with\\n    function poolId() external view returns (uint160);\\n\\n    /// @notice Total amount currently deposited via _deposit()\\n    function totalSupply() external view returns (uint256);\\n\\n    /// @notice Current amount deposited by address\\n    function balanceOf(address _user) external view returns (uint256);\\n\\n    /// @notice Amount of tokens to reward depositors for a given epoch\\n    /// @param _token Address of token to reward\\n    /// @param _epochStart Startime of rewards epoch\\n    /// @return Amount of token\\n    function tokenRewardsPerEpoch(address _token, uint256 _epochStart) external view returns (uint256);\\n\\n    /// @notice Most recent timestamp a user has claimed their rewards for given tokens\\n    /// @param  _token Address of token rewarded\\n    /// @param  _user address of the user\\n    /// @return Timestamp\\n    function lastEarn(address _token, address _user) external view returns (uint256);\\n\\n    /// @notice True if a token is or has been an active reward token, else false\\n    function isReward(address _token) external view returns (bool);\\n\\n    /// @notice Share of rewards to be sent to the DAO, in basis points\\n    function daoFee() external view returns (uint256);\\n\\n    /// @notice The number of checkpoints for each user address\\n    function numCheckpoints(address _user) external view returns (uint256);\\n\\n    /// @notice The total number of checkpoints\\n    function supplyNumCheckpoints() external view returns (uint256);\\n\\n    /// @notice Determine the prior balance for an account as of a block number\\n    /// @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\\n    /// @param _user        Address of the user to check\\n    /// @param _timestamp   The timestamp to get the balance at\\n    /// @return The balance the account had as of the given block\\n    function getPriorBalanceIndex(address _user, uint256 _timestamp) external view returns (uint256);\\n\\n    /// @notice Determine the prior index of supply staked by a given timestamp\\n    /// @dev Timestamp must be <= current timestamp\\n    /// @param _timestamp The timestamp to get the index at\\n    /// @return Index of supply checkpoint\\n    function getPriorSupplyIndex(uint256 _timestamp) external view returns (uint256);\\n\\n    /// @notice Get number of rewards tokens\\n    function rewardsListLength() external view returns (uint256);\\n\\n    /// @notice Get the list of rewards tokens\\n    function getAllRewards() external view returns (address[] memory);\\n\\n    /// @notice Calculate how much in rewards are earned for a specific token and voter\\n    /// @param _token   Address of token to fetch rewards of\\n    /// @param _user    Address of the user to check\\n    /// @return Amount of token earned in rewards\\n    function earned(address _token, address _user) external view returns (uint256);\\n\\n    /// @notice Deposit an amount into the rewards contract to earn future rewards\\n    /// @dev Internal notation used as only callable internally by `voter`.\\n    /// @param _amount  Amount deposited for the user\\n    /// @param _user    Address of the user\\n    function _deposit(uint256 _amount, address _user) external;\\n\\n    /// @notice Withdraw an amount from the rewards contract associated to a voter\\n    /// @dev Internal notation used as only callable internally by `voter`.\\n    /// @param _amount  Amount withdrawn for the user\\n    /// @param _user    Address of the user\\n    function _withdraw(uint256 _amount, address _user) external;\\n\\n    /// @notice Claim the rewards earned by a voter for a given token\\n    /// @param _user  Address of the user\\n    /// @param _token Token to claim rewards of\\n    function getReward(address _user, address _token) external;\\n\\n    /// @notice Claim the rewards earned by a voter for a given list of tokens\\n    /// @dev Utility to help batch reward claims.\\n    /// @param _user    Address of the user\\n    /// @param _tokens  Array of tokens to claim rewards of\\n    function getRewards(address _user, address[] calldata _tokens) external;\\n\\n    /// @notice Add rewards for voters to earn\\n    /// @param _token    Address of token to reward\\n    /// @param _amount   Amount of token to transfer to rewards\\n    function notifyRewardAmount(address _token, uint256 _amount) external;\\n\\n    /// @notice Add ETH rewards for voters to earn\\n    function notifyRewardAmountETH() external payable;\\n\\n    /// @notice Set the DAO fee on rewards\\n    /// @param _daoFee  New DAO fee, expressed in basis points\\n    function setDaoFee(uint256 _daoFee) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVoter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IVoter {\\n    error AlreadyVotedOrDeposited();\\n    error DistributeWindow();\\n    error FeeTooHigh();\\n    error UserRestricted();\\n    error MaximumVotingNumberTooLow();\\n    error NonZeroVotes();\\n    error NotARegisteredPool();\\n    error NotApprovedOrOwner();\\n    error NotWhitelistedUser();\\n    error SameAddress();\\n    error SameValue();\\n    error TooManyPools();\\n    error UnequalLengths();\\n    error VoteAlreadyAuthorized();\\n    error VoteAlreadyBanned();\\n    error VoteUnauthorized();\\n    error VotingRewardsAlreadyDeployed();\\n    error VotingRewardsNotDeployed();\\n    error ZeroBalance();\\n\\n    event VotingRewardsCreated(\\n        address indexed votingRewardsFactory,\\n        uint160 indexed poolId,\\n        address bribeVotingReward,\\n        address feesVotingReward,\\n        address creator\\n    );\\n    event Voted(\\n        address indexed voter,\\n        uint160 indexed poolId,\\n        address indexed user,\\n        uint256 weight,\\n        uint256 totalWeight,\\n        uint256 timestamp\\n    );\\n    event Abstained(\\n        address indexed voter,\\n        uint160 indexed poolId,\\n        address indexed user,\\n        uint256 weight,\\n        uint256 totalWeight,\\n        uint256 timestamp\\n    );\\n    event NotifyReward(address indexed sender, address indexed reward, uint256 amount);\\n    event VoteBanned(uint160 indexed poolId);\\n    event VoteReauthorized(uint160 indexed poolId);\\n    event WhitelistBribeToken(address indexed whitelister, address indexed token, bool indexed _bool);\\n    event WhitelistUser(address indexed whitelister, address indexed user, bool indexed _bool);\\n    event Approval(address indexed sender, address _operator, bool _approved);\\n\\n    /// @notice Address of DAO\\n    function dao() external view returns (address);\\n\\n    /// @notice Trusted forwarder address to pass into factories\\n    function forwarder() external view returns (address);\\n\\n    /// @notice The ve token that governs these contracts\\n    function ve() external view returns (address);\\n\\n    /// @notice Address of GovernanceRegistry\\n    function governanceRegistry() external view returns (address);\\n\\n    /// @dev Total Voting Weight\\n    function totalWeight() external view returns (uint256);\\n\\n    /// @dev Max number of pools one voter can vote for at once\\n    function maxVotingNum() external view returns (uint256);\\n\\n    /// @dev Default share of fees voting rewards to be sent to the DAO, in basis points\\n    function defaultFeesRewardsDaoFee() external view returns (uint256);\\n\\n    /// @dev Default share of bribe voting rewards to be sent to the DAO, in basis points\\n    function defaultBribeRewardsDaoFee() external view returns (uint256);\\n\\n    /// @dev Pool => Fees and Bribes voting rewards deployment status\\n    function hasVotingRewards(uint160 _poolId) external view returns (bool);\\n\\n    /// @dev Pool => Fees Voting Reward\\n    function poolToFees(uint160 _poolId) external view returns (address);\\n\\n    /// @dev Pool => Bribes Voting Reward\\n    function poolToBribe(uint160 _poolId) external view returns (address);\\n\\n    /// @dev Pool => Weights\\n    function weights(uint160 _poolId) external view returns (uint256);\\n\\n    /// @dev User => Pool => Votes\\n    function votes(address _user, uint160 _poolId) external view returns (uint256);\\n\\n    /// @dev User => Total voting weight\\n    function usedWeights(address _user) external view returns (uint256);\\n\\n    /// @dev User => Timestamp of last vote (ensures single vote per epoch)\\n    function lastVoted(address _user) external view returns (uint256);\\n\\n    /// @dev Token => Whitelisted status\\n    function isWhitelistedBribeToken(address token) external view returns (bool);\\n\\n    /// @dev User => Whitelisted status\\n    function isWhitelistedUser(address _user) external view returns (bool);\\n\\n    /// @dev User => Is voting authorized for pool\\n    function isVoteAuthorized(uint160 _poolId) external view returns (bool);\\n\\n    /// @dev User => Is currently voting\\n    function voted(address _user) external view returns (bool);\\n\\n    /// @dev User => Is restricted from voting\\n    function isRestrictedUser(address _user) external view returns (bool);\\n\\n    /// @notice Number of pools with associated voting rewards\\n    function length() external view returns (uint256);\\n\\n    /// @notice List of all poolIds for pools with associated voting rewards\\n    function getAllPoolIds() external view returns (uint160[] memory);\\n\\n    /// @notice initialize list of whitelisted tokens\\n    function initialize(address[] calldata _tokens) external;\\n\\n    /// @notice Called by users to vote for pools. Votes distributed proportionally based on weights.\\n    ///         Can only vote once per epoch.\\n    ///         Can only vote for registered pools with deployed voting rewards.\\n    /// @dev Weights are distributed proportional to the sum of the weights in the array.\\n    ///      Throws if length of _poolVote and _weights do not match.\\n    /// @param _user        Address of the user voting.\\n    /// @param _poolVote    Array of identifiers of pools that are voted for.\\n    /// @param _weights     Weights of pools.\\n    function vote(address _user, uint160[] calldata _poolVote, uint256[] calldata _weights) external;\\n\\n    /// @notice Called by users to update voting balances in voting rewards contracts.\\n    /// @param _user Address of the user whose balance are to be updated.\\n    function poke(address _user) external;\\n\\n    /// @notice Called by approved address to vote for multiple users for pools. For each user, votes are distributed proportionally based on weights.\\n    ///         Each user can only vote once per epoch.\\n    ///         Users can only vote for registered pools with deployed voting rewards.\\n    /// @dev Weights are distributed proportionally to the sum of the weights in the array.\\n    ///      Throws if length of _poolVote and _weights do not match.\\n    /// @param _users       Addresses of the users voting.\\n    /// @param _poolVote    Array of identifiers of pools that are voted for.\\n    /// @param _weights     Weights of pools.\\n    function batchVote(address[] calldata _users, uint160[] calldata _poolVote, uint256[] calldata _weights) external;\\n\\n    /// @notice Called by approved address to update voting balances for multiple users in voting rewards contracts.\\n    /// @param _users Addresses of the users whose balance are to be updated.\\n    function batchPoke(address[] calldata _users) external;\\n\\n    /// @notice Called by users to reset voting state.\\n    ///         Cannot reset in the same epoch that you voted in.\\n    ///         Can vote again after reset.\\n    /// @param _user Address of the user resetting.\\n    function reset(address _user) external;\\n\\n    /// @notice Bulk claim bribes for a given user address.\\n    /// @dev Utility to help batch bribe claims.\\n    /// @param _bribes  Array of BribeVotingReward contracts to collect from.\\n    /// @param _tokens  Array of tokens that are used as bribes.\\n    /// @param _user    Address of the user to claim bribe rewards for.\\n    function claimBribes(address[] calldata _bribes, address[][] calldata _tokens, address _user) external;\\n\\n    /// @notice Bulk claim fees for a given user address.\\n    /// @dev Utility to help batch fee claims.\\n    /// @param _fees    Array of FeesVotingReward contracts to collect from.\\n    /// @param _tokens  Array of tokens that are used as fees.\\n    /// @param _user    Address of the user to claim fees rewards for.\\n    function claimFees(address[] calldata _fees, address[][] calldata _tokens, address _user) external;\\n\\n    /// @notice Bulk claim bribes and fees for a given user address.\\n    /// @dev Utility to help batch claims for bribe and fees associated to a given list of pools.\\n    /// @param _poolIds     Array of pool identifiers to collect associated bribes and fees from.\\n    /// @param _bribeTokens Array of tokens that are used as bribes.\\n    /// @param _feeTokens   Array of tokens that are used as fees.\\n    /// @param _user        Address of the user to claim rewards for.\\n    function claimPoolsVotingRewards(\\n        uint160[] calldata _poolIds,\\n        address[][] calldata _bribeTokens,\\n        address[][] calldata _feeTokens,\\n        address _user\\n    ) external;\\n\\n    /// @notice Create voting rewards for a pool (unpermissioned).\\n    /// @dev Pool needs to be registered in governance registry.\\n    /// @param _poolId .\\n    function createVotingRewards(uint160 _poolId) external returns (address fees, address bribe);\\n\\n    /// @notice Set maximum number of pools that can be voted for.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if _maxVotingNum is too low.\\n    ///      Throws if the values are the same.\\n    /// @param _maxVotingNum .\\n    function setMaxVotingNum(uint256 _maxVotingNum) external;\\n\\n    /// @notice Set default share of fees voting rewards to be sent to the DAO.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if _defaultFeesRewardsDaoFee is too high.\\n    /// @param _defaultFeesRewardsDaoFee fee in basis points.\\n    function setDefaultFeesRewardsDaoFee(uint256 _defaultFeesRewardsDaoFee) external;\\n\\n    /// @notice Set default share of bribe voting rewards to be sent to the DAO.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if _defaultBribeRewardsDaoFee is too high.\\n    /// @param _defaultBribeRewardsDaoFee fee in basis points.\\n    function setDefaultBribeRewardsDaoFee(uint256 _defaultBribeRewardsDaoFee) external;\\n\\n    /// @notice Set for an array of pools the share of fees and bribe voting rewards to be sent to the DAO.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if _feesRewardsDaoFee or _bribeRewardsDaoFee is too high.\\n    /// @param _poolIds Array of pools to set fees and bribe voting rewards for.\\n    /// @param _feesRewardsDaoFee fees voting reward fee in basis points.\\n    /// @param _bribeRewardsDaoFee bribe voting reward fee in basis points.\\n    function setPoolsVotingRewardsDaoFee(\\n        uint160[] calldata _poolIds,\\n        uint256 _feesRewardsDaoFee,\\n        uint256 _bribeRewardsDaoFee\\n    ) external;\\n\\n    /// @notice Set fees and bribe voting rewards.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if _feesRewardsDaoFee or _bribeRewardsDaoFee is too high.\\n    /// @param _fees Array of FeesVotingReward contracts to set fees voting rewards for.\\n    /// @param _feesRewardsDaoFee fees voting reward fee in basis points.\\n    /// @param _bribes Array of BribeVotingReward contracts to set bribe voting rewards for.\\n    /// @param _bribeRewardsDaoFee bribe voting reward fee in basis points.\\n    function setVotingRewardsDaoFee(\\n        address[] calldata _fees,\\n        uint256 _feesRewardsDaoFee,\\n        address[] calldata _bribes,\\n        uint256 _bribeRewardsDaoFee\\n    ) external;\\n\\n    /// @notice Remove voting rights for user.\\n    /// @dev Throws if not called by governor.\\n    /// @param _user account to set voting rights for.\\n    function setRestrictedUser(address _user, bool _bool) external;\\n\\n    /// @notice Whitelist (or unwhitelist) token for use in bribes.\\n    /// @dev Throws if not called by governor.\\n    /// @param _token .\\n    /// @param _bool .\\n    function whitelistBribeToken(address _token, bool _bool) external;\\n\\n    /// @notice Whitelist (or unwhitelist) user address for voting in last hour prior to epoch flip.\\n    /// @dev Throws if not called by governor.\\n    ///      Throws if already whitelisted.\\n    /// @param _user .\\n    /// @param _bool .\\n    function whitelistUser(address _user, bool _bool) external;\\n\\n    /// @notice Ban voting for a pool\\n    /// @dev Throws if pool does not have associated voting rewards deployed\\n    ///      Throws if voting is already banned for this pool\\n    /// @param _poolId .\\n    function banVote(uint160 _poolId) external;\\n\\n    /// @notice Reauthorize voting for a pool\\n    /// @dev Throws if pool does not have associated voting rewards deployed\\n    ///      Throws if voting is already authorized for this pool\\n    /// @param _poolId .\\n    function reauthorizeVote(uint160 _poolId) external;\\n\\n    // Delegation\\n\\n    /// @notice Check wether _operator is owner or an approved operator for a given _user.\\n    /// @param _operator .\\n    /// @param _user .\\n    function isApprovedOrOwner(address _operator, address _user) external returns (bool);\\n\\n    /// @notice Give or take back approval for an operator to manage voting and rewards claiming on behalf of sender.\\n    /// @param _operator .\\n    /// @param _approved True to approve operator, false otherwise.\\n    function setApprovalForAll(address _operator, bool _approved) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IVotingEscrow.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.20;\\n\\n/**\\n * @title APW token contract interface\\n * @notice Governance token of the APWine protocol\\n */\\ninterface IVotingEscrow {\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    struct UserPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    struct GlobalPoint {\\n        int128 bias;\\n        int128 slope; // # -dweight / dt\\n        uint256 ts;\\n        uint256 blk; // block\\n    }\\n\\n    enum DepositType {\\n        DEPOSIT_FOR_TYPE,\\n        CREATE_LOCK_TYPE,\\n        INCREASE_LOCK_AMOUNT,\\n        INCREASE_UNLOCK_TIME\\n    }\\n\\n    /// @notice Address of token (APW) used to create a lock\\n    function token() external view returns (address);\\n\\n    /// @notice User -> lock amount and expiry\\n    function locked(address _addr) external view returns (LockedBalance memory);\\n\\n    /// @notice Current epoch\\n    function epoch() external view returns (uint256);\\n\\n    /// @notice Epoch -> unsigned point\\n    function point_history(uint256 _idx) external view returns (GlobalPoint memory);\\n\\n    /// @notice User -> Epoch -> unsigned point\\n    function user_point_history(address _userAddr, uint256 _idx) external view returns (UserPoint memory);\\n\\n    /// @notice User -> current epoch\\n    function user_point_epoch(address _addr) external view returns (uint256);\\n\\n    /// @notice Time -> signed slope change\\n    function slope_changes(uint256 _idx) external view returns (int128);\\n\\n    /// @notice Name of the token\\n    function name() external view returns (string memory);\\n\\n    /// @notice Symbol of the token\\n    function version() external view returns (string memory);\\n\\n    /// @notice Admin of the token\\n    function admin() external view returns (address);\\n\\n    /// @notice Calculate total voting power at some point in the past\\n    /// @param _block Block to calculate the total voting power at\\n    /// @return Total voting power at `_block`\\n    function totalSupplyAt(uint256 _block) external view returns (uint256);\\n\\n    /// @notice Measure voting power of `_addr`\\n    function balanceOf(address _addr) external view returns (uint256);\\n\\n    /// @notice Measure voting power of `_addr` at block height `_block`\\n    /// @dev Adheres to MiniMe `balanceOfAt` interface: https://github.com/Giveth/minime\\n    /// @param _addr User's wallet address\\n    /// @param _block Block to calculate the voting power at\\n    /// @return Voting power\\n    function balanceOfAt(address _addr, uint256 _block) external view returns (uint256);\\n\\n    /// @notice Get the timestamp for checkpoint `_idx` for `_addr`\\n    /// @param _addr User wallet address\\n    /// @param _idx User epoch number\\n    /// @return Epoch time of the checkpoint\\n    function user_point_history__ts(address _addr, uint256 _idx) external view returns (uint256);\\n\\n    /// @notice Deposit `_value` tokens for `_addr` and add to the lock\\n    /// @dev Anyone (even a smart contract) can deposit for someone else, but\\n    /// cannot extend their locktime and deposit for a brand new user\\n    /// @param _addr User's wallet address\\n    /// @param _value Amount to add to user's lock\\n    function deposit_for(address _addr, uint256 _value) external;\\n\\n    /// @notice Get timestamp when `_addr`'s lock finishes\\n    /// @param _addr User wallet\\n    /// @return Epoch time of the lock end\\n    function locked__end(address _addr) external returns (uint256);\\n\\n    /// @notice Deposit `_value` additional tokens for `msg.sender`\\n    /// without modifying the unlock time\\n    /// @param _value Amount of tokens to deposit and add to the lock\\n    function increase_amount(uint256 _value) external;\\n\\n    /// @notice Extend the unlock time for `msg.sender` to `_unlock_time`\\n    /// @param _unlock_time New epoch time for unlocking\\n    function increase_unlock_time(uint256 _unlock_time) external;\\n\\n    /// @notice Deposit `_value` tokens for `msg.sender` and lock until `_unlock_time`\\n    /// @param _value Amount to deposit\\n    /// @param _unlock_time Epoch time when tokens unlock, rounded down to whole weeks\\n    function create_lock(uint256 _value, uint256 _unlock_time) external;\\n\\n    /// @notice Withdraw all tokens for `msg.sender`\\n    /// @dev Only possible if the lock has expired\\n    function withdraw() external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IGovernanceRegistry.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IGovernanceRegistry {\\n    /* STRUCTS\\n     *****************************************************************************************************************/\\n    struct PoolNetworkData {\\n        address poolAddress;\\n        uint256 chainId;\\n        bool isRegistered;\\n    }\\n\\n    /* EVENTS\\n     *****************************************************************************************************************/\\n    event VotingRewardsFactoryChange(\\n        address indexed previousVotingRewardsFactory,\\n        address indexed newVotingRewardsFactory\\n    );\\n    event PoolRegistered(address indexed pool, uint256 indexed chainId, bool indexed isRegistered);\\n\\n    /* GETTERS\\n     *****************************************************************************************************************/\\n\\n    /// @notice Get the VotingReward factory.\\n    function votingRewardsFactory() external view returns (address);\\n\\n    /// @notice Get the pool data.\\n    /// @param _poolId The pool ID\\n    /// @return The pool address\\n    /// @return The chainId of the network on which the pool is deployed\\n    /// @return Boolean value, true if the pool is registered\\n    function poolsData(uint160 _poolId) external view returns (address, uint256, bool);\\n\\n    /// @notice Get the pool id for the given pool.\\n    /// @dev The pool ID is computed by XORing the pool address with the chainId of the network on which the pool is deployed.\\n    function getPoolId(address _pool, uint256 _chainId) external view returns (uint160);\\n\\n    /// @notice Returns wether the pool is registered.\\n    /// @param _poolId The pool ID\\n    function isPoolRegistered(uint160 _poolId) external view returns (bool);\\n\\n    /// @notice Returns wether the pool is registered.\\n    /// @param _pool The pool address\\n    /// @param _chainId The chainId of the network on which the pool is deployed\\n    function isPoolRegistered(address _pool, uint256 _chainId) external view returns (bool);\\n\\n    /* SETTERS\\n     *****************************************************************************************************************/\\n\\n    /// @notice Set the VotingReward factory.\\n    /// @param _votingRewardsFactory .\\n    function setVotingRewardsFactory(address _votingRewardsFactory) external;\\n\\n    /// @notice Set the pool registration.\\n    /// @param _pool The pool address\\n    /// @param _chainId The chainId of the network on which the pool is deployed\\n    /// @param _isRegistered True if pool needs to be registered, false otherwise\\n    function setPoolRegistration(address _pool, uint256 _chainId, bool _isRegistered) external;\\n\\n    /// @notice Set the registration for multiple pools.\\n    /// @dev Utility to batch pool registrations.\\n    /// @param _pools The array of pools\\n    /// @param _chainIds The chainIds of the respective networks on which each pool is deployed\\n    /// @param _isRegistered True if pool needs to be registered, false otherwise\\n    function setPoolsRegistration(address[] calldata _pools, uint256[] calldata _chainIds, bool _isRegistered) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/manager/IAuthority.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAuthority.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard interface for permissioning originally defined in Dappsys.\\n */\\ninterface IAuthority {\\n    /**\\n     * @dev Returns true if the caller can invoke on a target the function identified by a function selector.\\n     */\\n    function canCall(address caller, address target, bytes4 selector) external view returns (bool allowed);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/manager/AuthorityUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/AuthorityUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAuthority} from \\\"./IAuthority.sol\\\";\\n\\nlibrary AuthorityUtils {\\n    /**\\n     * @dev Since `AccessManager` implements an extended IAuthority interface, invoking `canCall` with backwards compatibility\\n     * for the preexisting `IAuthority` interface requires special care to avoid reverting on insufficient return data.\\n     * This helper function takes care of invoking `canCall` in a backwards compatible way without reverting.\\n     */\\n    function canCallWithDelay(\\n        address authority,\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) internal view returns (bool immediate, uint32 delay) {\\n        (bool success, bytes memory data) = authority.staticcall(\\n            abi.encodeCall(IAuthority.canCall, (caller, target, selector))\\n        );\\n        if (success) {\\n            if (data.length >= 0x40) {\\n                (immediate, delay) = abi.decode(data, (bool, uint32));\\n            } else if (data.length >= 0x20) {\\n                immediate = abi.decode(data, (bool));\\n            }\\n        }\\n        return (immediate, delay);\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/manager/IAccessManager.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManager.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessManaged} from \\\"./IAccessManaged.sol\\\";\\nimport {Time} from \\\"../../utils/types/Time.sol\\\";\\n\\ninterface IAccessManager {\\n    /**\\n     * @dev A delayed operation was scheduled.\\n     */\\n    event OperationScheduled(\\n        bytes32 indexed operationId,\\n        uint32 indexed nonce,\\n        uint48 schedule,\\n        address caller,\\n        address target,\\n        bytes data\\n    );\\n\\n    /**\\n     * @dev A scheduled operation was executed.\\n     */\\n    event OperationExecuted(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev A scheduled operation was canceled.\\n     */\\n    event OperationCanceled(bytes32 indexed operationId, uint32 indexed nonce);\\n\\n    /**\\n     * @dev Informational labelling for a roleId.\\n     */\\n    event RoleLabel(uint64 indexed roleId, string label);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `roleId`.\\n     *\\n     * NOTE: The meaning of the `since` argument depends on the `newMember` argument.\\n     * If the role is granted to a new member, the `since` argument indicates when the account becomes a member of the role,\\n     * otherwise it indicates the execution delay for this account and roleId is updated.\\n     */\\n    event RoleGranted(uint64 indexed roleId, address indexed account, uint32 delay, uint48 since, bool newMember);\\n\\n    /**\\n     * @dev Emitted when `account` membership or `roleId` is revoked. Unlike granting, revoking is instantaneous.\\n     */\\n    event RoleRevoked(uint64 indexed roleId, address indexed account);\\n\\n    /**\\n     * @dev Role acting as admin over a given `roleId` is updated.\\n     */\\n    event RoleAdminChanged(uint64 indexed roleId, uint64 indexed admin);\\n\\n    /**\\n     * @dev Role acting as guardian over a given `roleId` is updated.\\n     */\\n    event RoleGuardianChanged(uint64 indexed roleId, uint64 indexed guardian);\\n\\n    /**\\n     * @dev Grant delay for a given `roleId` will be updated to `delay` when `since` is reached.\\n     */\\n    event RoleGrantDelayChanged(uint64 indexed roleId, uint32 delay, uint48 since);\\n\\n    /**\\n     * @dev Target mode is updated (true = closed, false = open).\\n     */\\n    event TargetClosed(address indexed target, bool closed);\\n\\n    /**\\n     * @dev Role required to invoke `selector` on `target` is updated to `roleId`.\\n     */\\n    event TargetFunctionRoleUpdated(address indexed target, bytes4 selector, uint64 indexed roleId);\\n\\n    /**\\n     * @dev Admin delay for a given `target` will be updated to `delay` when `since` is reached.\\n     */\\n    event TargetAdminDelayUpdated(address indexed target, uint32 delay, uint48 since);\\n\\n    error AccessManagerAlreadyScheduled(bytes32 operationId);\\n    error AccessManagerNotScheduled(bytes32 operationId);\\n    error AccessManagerNotReady(bytes32 operationId);\\n    error AccessManagerExpired(bytes32 operationId);\\n    error AccessManagerLockedAccount(address account);\\n    error AccessManagerLockedRole(uint64 roleId);\\n    error AccessManagerBadConfirmation();\\n    error AccessManagerUnauthorizedAccount(address msgsender, uint64 roleId);\\n    error AccessManagerUnauthorizedCall(address caller, address target, bytes4 selector);\\n    error AccessManagerUnauthorizedConsume(address target);\\n    error AccessManagerUnauthorizedCancel(address msgsender, address caller, address target, bytes4 selector);\\n    error AccessManagerInvalidInitialAdmin(address initialAdmin);\\n\\n    /**\\n     * @dev Check if an address (`caller`) is authorised to call a given function on a given contract directly (with\\n     * no restriction). Additionally, it returns the delay needed to perform the call indirectly through the {schedule}\\n     * & {execute} workflow.\\n     *\\n     * This function is usually called by the targeted contract to control immediate execution of restricted functions.\\n     * Therefore we only return true if the call can be performed without any delay. If the call is subject to a\\n     * previously set delay (not zero), then the function should return false and the caller should schedule the operation\\n     * for future execution.\\n     *\\n     * If `immediate` is true, the delay can be disregarded and the operation can be immediately executed, otherwise\\n     * the operation can be executed if and only if delay is greater than 0.\\n     *\\n     * NOTE: The IAuthority interface does not include the `uint32` delay. This is an extension of that interface that\\n     * is backward compatible. Some contracts may thus ignore the second return argument. In that case they will fail\\n     * to identify the indirect workflow, and will consider calls that require a delay to be forbidden.\\n     *\\n     * NOTE: This function does not report the permissions of this manager itself. These are defined by the\\n     * {_canCallSelf} function instead.\\n     */\\n    function canCall(\\n        address caller,\\n        address target,\\n        bytes4 selector\\n    ) external view returns (bool allowed, uint32 delay);\\n\\n    /**\\n     * @dev Expiration delay for scheduled proposals. Defaults to 1 week.\\n     *\\n     * IMPORTANT: Avoid overriding the expiration with 0. Otherwise every contract proposal will be expired immediately,\\n     * disabling any scheduling usage.\\n     */\\n    function expiration() external view returns (uint32);\\n\\n    /**\\n     * @dev Minimum setback for all delay updates, with the exception of execution delays. It\\n     * can be increased without setback (and reset via {revokeRole} in the case event of an\\n     * accidental increase). Defaults to 5 days.\\n     */\\n    function minSetback() external view returns (uint32);\\n\\n    /**\\n     * @dev Get whether the contract is closed disabling any access. Otherwise role permissions are applied.\\n     */\\n    function isTargetClosed(address target) external view returns (bool);\\n\\n    /**\\n     * @dev Get the role required to call a function.\\n     */\\n    function getTargetFunctionRole(address target, bytes4 selector) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the admin delay for a target contract. Changes to contract configuration are subject to this delay.\\n     */\\n    function getTargetAdminDelay(address target) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the id of the role that acts as an admin for the given role.\\n     *\\n     * The admin permission is required to grant the role, revoke the role and update the execution delay to execute\\n     * an operation that is restricted to this role.\\n     */\\n    function getRoleAdmin(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role that acts as a guardian for a given role.\\n     *\\n     * The guardian permission allows canceling operations that have been scheduled under the role.\\n     */\\n    function getRoleGuardian(uint64 roleId) external view returns (uint64);\\n\\n    /**\\n     * @dev Get the role current grant delay.\\n     *\\n     * Its value may change at any point without an event emitted following a call to {setGrantDelay}.\\n     * Changes to this value, including effect timepoint are notified in advance by the {RoleGrantDelayChanged} event.\\n     */\\n    function getRoleGrantDelay(uint64 roleId) external view returns (uint32);\\n\\n    /**\\n     * @dev Get the access details for a given account for a given role. These details include the timepoint at which\\n     * membership becomes active, and the delay applied to all operation by this user that requires this permission\\n     * level.\\n     *\\n     * Returns:\\n     * [0] Timestamp at which the account membership becomes valid. 0 means role is not granted.\\n     * [1] Current execution delay for the account.\\n     * [2] Pending execution delay for the account.\\n     * [3] Timestamp at which the pending execution delay will become active. 0 means no delay update is scheduled.\\n     */\\n    function getAccess(uint64 roleId, address account) external view returns (uint48, uint32, uint32, uint48);\\n\\n    /**\\n     * @dev Check if a given account currently has the permission level corresponding to a given role. Note that this\\n     * permission might be associated with an execution delay. {getAccess} can provide more details.\\n     */\\n    function hasRole(uint64 roleId, address account) external view returns (bool, uint32);\\n\\n    /**\\n     * @dev Give a label to a role, for improved role discoverability by UIs.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleLabel} event.\\n     */\\n    function labelRole(uint64 roleId, string calldata label) external;\\n\\n    /**\\n     * @dev Add `account` to `roleId`, or change its execution delay.\\n     *\\n     * This gives the account the authorization to call any function that is restricted to this role. An optional\\n     * execution delay (in seconds) can be set. If that delay is non 0, the user is required to schedule any operation\\n     * that is restricted to members of this role. The user will only be able to execute the operation after the delay has\\n     * passed, before it has expired. During this period, admin and guardians can cancel the operation (see {cancel}).\\n     *\\n     * If the account has already been granted this role, the execution delay will be updated. This update is not\\n     * immediate and follows the delay rules. For example, if a user currently has a delay of 3 hours, and this is\\n     * called to reduce that delay to 1 hour, the new delay will take some time to take effect, enforcing that any\\n     * operation executed in the 3 hours that follows this update was indeed scheduled before this update.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - granted role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleGranted} event.\\n     */\\n    function grantRole(uint64 roleId, address account, uint32 executionDelay) external;\\n\\n    /**\\n     * @dev Remove an account from a role, with immediate effect. If the account does not have the role, this call has\\n     * no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be an admin for the role (see {getRoleAdmin})\\n     * - revoked role must not be the `PUBLIC_ROLE`\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function revokeRole(uint64 roleId, address account) external;\\n\\n    /**\\n     * @dev Renounce role permissions for the calling account with immediate effect. If the sender is not in\\n     * the role this call has no effect.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * Emits a {RoleRevoked} event if the account had the role.\\n     */\\n    function renounceRole(uint64 roleId, address callerConfirmation) external;\\n\\n    /**\\n     * @dev Change admin role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleAdminChanged} event\\n     */\\n    function setRoleAdmin(uint64 roleId, uint64 admin) external;\\n\\n    /**\\n     * @dev Change guardian role for a given role.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGuardianChanged} event\\n     */\\n    function setRoleGuardian(uint64 roleId, uint64 guardian) external;\\n\\n    /**\\n     * @dev Update the delay for granting a `roleId`.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {RoleGrantDelayChanged} event.\\n     */\\n    function setGrantDelay(uint64 roleId, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the role required to call functions identified by the `selectors` in the `target` contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetFunctionRoleUpdated} event per selector.\\n     */\\n    function setTargetFunctionRole(address target, bytes4[] calldata selectors, uint64 roleId) external;\\n\\n    /**\\n     * @dev Set the delay for changing the configuration of a given target contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetAdminDelayUpdated} event.\\n     */\\n    function setTargetAdminDelay(address target, uint32 newDelay) external;\\n\\n    /**\\n     * @dev Set the closed flag for a contract.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     *\\n     * Emits a {TargetClosed} event.\\n     */\\n    function setTargetClosed(address target, bool closed) external;\\n\\n    /**\\n     * @dev Return the timepoint at which a scheduled operation will be ready for execution. This returns 0 if the\\n     * operation is not yet scheduled, has expired, was executed, or was canceled.\\n     */\\n    function getSchedule(bytes32 id) external view returns (uint48);\\n\\n    /**\\n     * @dev Return the nonce for the latest scheduled operation with a given id. Returns 0 if the operation has never\\n     * been scheduled.\\n     */\\n    function getNonce(bytes32 id) external view returns (uint32);\\n\\n    /**\\n     * @dev Schedule a delayed operation for future execution, and return the operation identifier. It is possible to\\n     * choose the timestamp at which the operation becomes executable as long as it satisfies the execution delays\\n     * required for the caller. The special value zero will automatically set the earliest possible time.\\n     *\\n     * Returns the `operationId` that was scheduled. Since this value is a hash of the parameters, it can reoccur when\\n     * the same parameters are used; if this is relevant, the returned `nonce` can be used to uniquely identify this\\n     * scheduled operation from other occurrences of the same `operationId` in invocations of {execute} and {cancel}.\\n     *\\n     * Emits a {OperationScheduled} event.\\n     *\\n     * NOTE: It is not possible to concurrently schedule more than one operation with the same `target` and `data`. If\\n     * this is necessary, a random byte can be appended to `data` to act as a salt that will be ignored by the target\\n     * contract if it is using standard Solidity ABI encoding.\\n     */\\n    function schedule(address target, bytes calldata data, uint48 when) external returns (bytes32, uint32);\\n\\n    /**\\n     * @dev Execute a function that is delay restricted, provided it was properly scheduled beforehand, or the\\n     * execution delay is 0.\\n     *\\n     * Returns the nonce that identifies the previously scheduled operation that is executed, or 0 if the\\n     * operation wasn't previously scheduled (if the caller doesn't have an execution delay).\\n     *\\n     * Emits an {OperationExecuted} event only if the call was scheduled and delayed.\\n     */\\n    function execute(address target, bytes calldata data) external payable returns (uint32);\\n\\n    /**\\n     * @dev Cancel a scheduled (delayed) operation. Returns the nonce that identifies the previously scheduled\\n     * operation that is cancelled.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be the proposer, a guardian of the targeted function, or a global admin\\n     *\\n     * Emits a {OperationCanceled} event.\\n     */\\n    function cancel(address caller, address target, bytes calldata data) external returns (uint32);\\n\\n    /**\\n     * @dev Consume a scheduled operation targeting the caller. If such an operation exists, mark it as consumed\\n     * (emit an {OperationExecuted} event and clean the state). Otherwise, throw an error.\\n     *\\n     * This is useful for contract that want to enforce that calls targeting them were scheduled on the manager,\\n     * with all the verifications that it implies.\\n     *\\n     * Emit a {OperationExecuted} event.\\n     */\\n    function consumeScheduledOp(address caller, bytes calldata data) external;\\n\\n    /**\\n     * @dev Hashing function for delayed operations.\\n     */\\n    function hashOperation(address caller, address target, bytes calldata data) external view returns (bytes32);\\n\\n    /**\\n     * @dev Changes the authority of a target managed by this manager instance.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be a global admin\\n     */\\n    function updateAuthority(address target, address newAuthority) external;\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/access/manager/IAccessManaged.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/manager/IAccessManaged.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IAccessManaged {\\n    /**\\n     * @dev Authority that manages this contract was updated.\\n     */\\n    event AuthorityUpdated(address authority);\\n\\n    error AccessManagedUnauthorized(address caller);\\n    error AccessManagedRequiredDelay(address caller, uint32 delay);\\n    error AccessManagedInvalidAuthority(address authority);\\n\\n    /**\\n     * @dev Returns the current authority.\\n     */\\n    function authority() external view returns (address);\\n\\n    /**\\n     * @dev Transfers control to a new authority. The caller must be the current authority.\\n     */\\n    function setAuthority(address) external;\\n\\n    /**\\n     * @dev Returns true only in the context of a delayed restricted call, at the moment that the scheduled operation is\\n     * being consumed. Prevents denial of service for delayed restricted calls in the case that the contract performs\\n     * attacker controlled calls.\\n     */\\n    function isConsumingScheduledOp() external view returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/types/Time.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \u2193           \u2193       \u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\"\r\n    },\r\n    \"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"@openzeppelin/=lib/openzeppelin-contracts/\",\r\n      \"@opengsn/=lib/gsn/packages/\",\r\n      \"utils/=test/utils/\",\r\n      \"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\r\n      \"erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\r\n      \"gsn/=lib/gsn/\",\r\n      \"openzeppelin-contracts/=lib/openzeppelin-contracts/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"viaIR\": false,\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialAuthority\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_forwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_ve\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_governanceRegistry\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_defaultFeesRewardsDaoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_defaultBribeRewardsDaoFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AccessManagedInvalidAuthority\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"delay\",\"type\":\"uint32\"}],\"name\":\"AccessManagedRequiredDelay\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"AccessManagedUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AlreadyVotedOrDeposited\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DistributeWindow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaximumVotingNumberTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NonZeroVotes\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotARegisteredPool\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotApprovedOrOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotWhitelistedUser\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooManyPools\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnequalLengths\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UserRestricted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoteAlreadyAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoteAlreadyBanned\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VoteUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingRewardsAlreadyDeployed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VotingRewardsNotDeployed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"poolId\",\"type\":\"uint160\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Abstained\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NotifyReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"poolId\",\"type\":\"uint160\"}],\"name\":\"VoteBanned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"poolId\",\"type\":\"uint160\"}],\"name\":\"VoteReauthorized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"poolId\",\"type\":\"uint160\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWeight\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"votingRewardsFactory\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint160\",\"name\":\"poolId\",\"type\":\"uint160\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"bribeVotingReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feesVotingReward\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"VotingRewardsCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"WhitelistBribeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"whitelister\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"WhitelistUser\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_poolId\",\"type\":\"uint160\"}],\"name\":\"banVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"}],\"name\":\"batchPoke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint160[]\",\"name\":\"_poolVote\",\"type\":\"uint160[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"batchVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimBribes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"},{\"internalType\":\"address[][]\",\"name\":\"_tokens\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160[]\",\"name\":\"_poolIds\",\"type\":\"uint160[]\"},{\"internalType\":\"address[][]\",\"name\":\"_bribeTokens\",\"type\":\"address[][]\"},{\"internalType\":\"address[][]\",\"name\":\"_feeTokens\",\"type\":\"address[][]\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claimPoolsVotingRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_poolId\",\"type\":\"uint160\"}],\"name\":\"createVotingRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"fees\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"bribe\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultBribeRewardsDaoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultFeesRewardsDaoFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochNext\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochVoteEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"epochVoteStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolIds\",\"outputs\":[{\"internalType\":\"uint160[]\",\"name\":\"\",\"type\":\"uint160[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceRegistry\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"hasVotingRewards\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isConsumingScheduledOp\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isRestrictedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"isVoteAuthorized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistedBribeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isWhitelistedUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastVoted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"length\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxVotingNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"poke\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolIds\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"poolToBribe\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"poolToFees\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolVote\",\"outputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"_poolId\",\"type\":\"uint160\"}],\"name\":\"reauthorizeVote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultBribeRewardsDaoFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultBribeRewardsDaoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_defaultFeesRewardsDaoFee\",\"type\":\"uint256\"}],\"name\":\"setDefaultFeesRewardsDaoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxVotingNum\",\"type\":\"uint256\"}],\"name\":\"setMaxVotingNum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160[]\",\"name\":\"_poolIds\",\"type\":\"uint160[]\"},{\"internalType\":\"uint256\",\"name\":\"_feesRewardsDaoFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bribeRewardsDaoFee\",\"type\":\"uint256\"}],\"name\":\"setPoolsVotingRewardsDaoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setRestrictedUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_fees\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_feesRewardsDaoFee\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_bribes\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_bribeRewardsDaoFee\",\"type\":\"uint256\"}],\"name\":\"setVotingRewardsDaoFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalWeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usedWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ve\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint160[]\",\"name\":\"_poolVote\",\"type\":\"uint160[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"voted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint160\",\"name\":\"\",\"type\":\"uint160\"}],\"name\":\"weights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistBribeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"whitelistUser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Voter", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000dbbfc051d200438dd5847b093b22484b842de9e70000000000000000000000007ea3097e2af59ea705398544e0f58eddb7bd1852000000000000000000000000d187cb71fe8201935e6676ff872239fff552d4a5000000000000000000000000c5ca1ebf6e912e49a6a70bb0385ea065061a4f090000000000000000000000004425779f145f6599cfceaa9443b497a7a2dfdb1700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}