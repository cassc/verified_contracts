{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"XAVIERBOTV02M7e.sol\": {\r\n      \"content\": \"/**\\r\\n *Submitted for verification at Etherscan.io on 2023-07-27\\r\\n*/\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\n/** \\r\\n#Twitter - https://twitter.com/xavierboterc\\r\\n\\r\\n#Telegram - https://t.me/xavierboterc\\r\\n\\r\\n#Telegram BOT - https://t.me/xavierercbot\\r\\n\\r\\n#Medium - https://medium.com/@xavierbot\\r\\n\\r\\n#Linktree - https://linktr.ee/xavierboterc\\r\\n\\r\\n#Website - https://XavierBot.com\\r\\n\\r\\n**/\\r\\n\\r\\n\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface IERC20 {\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\\r\\nlibrary SafeMath {\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        uint256 c = a + b;\\r\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\r\\n    }\\r\\n\\r\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b <= a, errorMessage);\\r\\n        uint256 c = a - b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint256 c = a * b;\\r\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\r\\n    }\\r\\n\\r\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\r\\n        require(b > 0, errorMessage);\\r\\n        uint256 c = a / b;\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ncontract Ownable is Context {\\r\\n    address private _owner;\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    constructor () {\\r\\n        address msgSender = _msgSender();\\r\\n        _owner = msgSender;\\r\\n        emit OwnershipTransferred(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    function owner() public view returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        emit OwnershipTransferred(_owner, address(0));\\r\\n        _owner = address(0);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Factory {\\r\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\ninterface IUniswapV2Router02 {\\r\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n        uint amountIn,\\r\\n        uint amountOutMin,\\r\\n        address[] calldata path,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external;\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n}\\r\\n\\r\\ncontract XavierV02M7e is Context, IERC20, Ownable {\\r\\n    using SafeMath for uint256;\\r\\n    mapping (address => uint256) private _balances;\\r\\n    mapping (address => mapping (address => uint256)) private _allowances;\\r\\n    mapping (address => bool) private _isExcludedFromFee;\\r\\n    mapping (address => bool) private bots;\\r\\n    mapping(address => uint256) private _holderLastTransferTimestamp;\\r\\n    bool public transferDelayEnabled = true;\\r\\n    bool public isTradingEnabled = false;\\r\\n    address payable private _taxWallet;\\r\\n    address payable private _marketingWallet;\\r\\n    \\r\\n    bool private _isLimitExemptionActive; // Variable indicating whether the limit exemption is active\\r\\n    uint256 private _maxTxAmountOriginal; // Stores the original value of _maxTxAmount before exemption\\r\\n\\r\\n    \\r\\n\\r\\n    uint256 private _initialBuyTax=30;\\r\\n    uint256 private _initialSellTax=50;\\r\\n    uint256 private _finalBuyTax=5;\\r\\n    uint256 private _finalSellTax=5;\\r\\n    uint256 private _reduceBuyTaxAt=30;\\r\\n    uint256 private _reduceSellTaxAt=30;\\r\\n    uint256 private _preventSwapBefore=25;\\r\\n    uint256 private _buyCount=0;\\r\\n\\r\\n    uint8 private constant _decimals = 9;\\r\\n    uint256 private constant _tTotal = 10000000000000 * 10**9;\\r\\n    string private constant _name = unicode\\\"XAVIER\\\";\\r\\n    string private constant _symbol = unicode\\\"XAVI\\\";\\r\\n    uint256 public _maxTxAmount = 100000000000 * 10**_decimals;\\r\\n    uint256 public _maxWalletSize = 300000000000 * 10**_decimals;\\r\\n    uint256 public _taxSwapThreshold= 50000000001 * 10**_decimals;\\r\\n    uint256 public _maxTaxSwap= 50000000000 * 10**_decimals;\\r\\n    \\r\\n    \\r\\n    uint256 private constant _firstDayDuration = 1 days;  // Lottery duration on the first, second, third, fourth, fifth, sixth, and seventh day\\r\\n    uint256 private constant _nextDaysDuration = 2 days;  // Lottery duration from the eighth day onwards\\r\\n    uint256 private _nextLotteryTimestamp;\\r\\n\\r\\n\\r\\n    struct LotteryParticipant {\\r\\n        bool hasParticipated;\\r\\n        uint256 lastParticipationTimestamp;\\r\\n    }\\r\\n    mapping(address => LotteryParticipant) private _lotteryParticipants;\\r\\n    uint256 private _totalRewardsBalance;\\r\\n\\r\\n\\r\\n    uint256 private constant _lotteryDuration = 1 days; // Lottery duration changed to 1 day\\r\\n    uint256 private constant _minTokensToParticipate = 1000000000;\\r\\n    uint256 private constant _minHoldDuration = 0; // Minimum hold duration removed\\r\\n    \\r\\n\\r\\n    bool private _lotteryInProgress;\\r\\n\\r\\n    event LotteryParticipation(address indexed participant, uint256 timestamp);\\r\\n    event LotteryWinnersAnnounced(uint256 totalWinners, uint256 rewardAmount);\\r\\n\\r\\n\\r\\n    IUniswapV2Router02 private uniswapV2Router;\\r\\n    address private uniswapV2Pair;\\r\\n    bool private tradingOpen;\\r\\n    bool private inSwap = false;\\r\\n    bool private swapEnabled = false;\\r\\n\\r\\n    event MaxTxAmountUpdated(uint _maxTxAmount);\\r\\n    modifier lockTheSwap {\\r\\n        inSwap = true;\\r\\n        _;\\r\\n        inSwap = false;\\r\\n    }\\r\\n\\r\\n    constructor () {\\r\\n        _taxWallet = payable(_msgSender());\\r\\n        _marketingWallet = payable(0x943Cc80b6A4b9c86D74Aa13E35Ad4739A94FB6a0); // Replace with the actual marketing wallet address\\r\\n        _balances[_msgSender()] = _tTotal;\\r\\n        _isExcludedFromFee[owner()] = true;\\r\\n        _isExcludedFromFee[address(this)] = true;\\r\\n        _isExcludedFromFee[_taxWallet] = true;\\r\\n        _isExcludedFromFee[_marketingWallet] = true;\\r\\n        _nextLotteryTimestamp = block.timestamp + _lotteryDuration;\\r\\n        _lotteryInProgress = false;\\r\\n        _nextLotteryTimestamp = block.timestamp + _firstDayDuration;\\r\\n\\r\\n    \\r\\n\\r\\n        emit Transfer(address(0), _msgSender(), _tTotal);\\r\\n    }\\r\\n\\r\\n    function name() public pure returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() public pure returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() public pure returns (uint8) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\r\\n    function totalSupply() public pure override returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) public view override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(_msgSender(), recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\r\\n        _approve(_msgSender(), spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    modifier tradingEnabled() {\\r\\n        require(isTradingEnabled, \\\"Trading is currently disabled\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\r\\n        _transfer(sender, recipient, amount);\\r\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address owner, address spender, uint256 amount) private {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) private {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(amount > 0, \\\"Transfer amount must be greater than zero\\\");\\r\\n        uint256 taxAmount=0;\\r\\n        if (from != owner() && to != owner()) {\\r\\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\\r\\n\\r\\n\\r\\n            if (transferDelayEnabled) {\\r\\n                  if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\\r\\n                      require(\\r\\n                          _holderLastTransferTimestamp[tx.origin] <\\r\\n                              block.number,\\r\\n                          \\\"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\\\"\\r\\n                      );\\r\\n                      _holderLastTransferTimestamp[tx.origin] = block.number;\\r\\n                  }\\r\\n              }\\r\\n\\r\\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\\r\\n                require(amount <= _maxTxAmount, \\\"Exceeds the _maxTxAmount.\\\");\\r\\n                require(balanceOf(to) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\r\\n                _buyCount++;\\r\\n            }\\r\\n\\r\\n            if(to == uniswapV2Pair && from!= address(this) ){\\r\\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\\r\\n            }\\r\\n\\r\\n            uint256 contractTokenBalance = balanceOf(address(this));\\r\\n            if (!inSwap && to   == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\\r\\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\\r\\n                uint256 contractETHBalance = address(this).balance;\\r\\n                if(contractETHBalance > 50000000000000000) {\\r\\n                    sendETHToFee(address(this).balance);\\r\\n                }\\r\\n            }\\r\\n            // If the contract owner has an active limit exemption, we don't apply transaction limits\\r\\n        if (from == owner() && _isLimitExemptionActive) {\\r\\n            return;\\r\\n        }\\r\\n            \\r\\n        }\\r\\n\\r\\n        if(taxAmount>0){\\r\\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\\r\\n          emit Transfer(from, address(this),taxAmount);\\r\\n        }\\r\\n        _balances[from]=_balances[from].sub(amount);\\r\\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\\r\\n        emit Transfer(from, to, amount.sub(taxAmount));\\r\\n    }\\r\\n    \\r\\n\\r\\n     function enableTrading() public onlyOwner {\\r\\n        require(!isTradingEnabled, \\\"Trading is already enabled\\\");\\r\\n        isTradingEnabled = true;\\r\\n    }\\r\\n\\r\\n     function disableTrading() public onlyOwner {\\r\\n        require(isTradingEnabled, \\\"Trading is already disabled\\\"); // just emergency option :)\\r\\n        isTradingEnabled = false;\\r\\n    }\\r\\n  \\r\\n    function min(uint256 a, uint256 b) private pure returns (uint256){\\r\\n      return (a>b)?b:a;\\r\\n    }\\r\\n\\r\\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = uniswapV2Router.WETH();\\r\\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\\r\\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\\r\\n            tokenAmount,\\r\\n            0,\\r\\n            path,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n    }\\r\\n    function setMarketingLpWallet(address payable marketingLpWallet) external onlyOwner {\\r\\n        _taxWallet = marketingLpWallet;\\r\\n    }\\r\\n\\r\\n    function removeLimits() external onlyOwner{\\r\\n        _maxTxAmount = _tTotal;\\r\\n        _maxWalletSize=_tTotal;\\r\\n        transferDelayEnabled=false;\\r\\n        emit MaxTxAmountUpdated(_tTotal);\\r\\n    }\\r\\n\\r\\n    function sendETHToFee(uint256 amount) private {\\r\\n    // Calculate 10% of the amount as rewards\\r\\n    uint256 rewardsAmount = amount.mul(10).div(100);\\r\\n    // Calculate 90% of the amount to be sent to _marketingWallet\\r\\n    uint256 marketingAmount = amount.sub(rewardsAmount);\\r\\n\\r\\n    // Transfer 90% to _marketingWallet\\r\\n    _marketingWallet.transfer(marketingAmount);\\r\\n    // Add 10% as rewards to the contract balance\\r\\n    address payable contractAddress = payable(address(this));\\r\\n    contractAddress.transfer(rewardsAmount);\\r\\n    }\\r\\n\\r\\n    // Function to enable temporary limit exemption for the contract owner\\r\\n    function enableLimitExemption() external onlyOwner {\\r\\n        require(!_isLimitExemptionActive, \\\"Limit exemption is already active\\\");\\r\\n        _maxTxAmountOriginal = _maxTxAmount;\\r\\n        _isLimitExemptionActive = true;\\r\\n    }\\r\\n\\r\\n    function disableLimitExemption() external onlyOwner {\\r\\n        require(_isLimitExemptionActive, \\\"Limit exemption is not active\\\");\\r\\n        _maxTxAmount = _maxTxAmountOriginal;\\r\\n        _isLimitExemptionActive = false;\\r\\n    }\\r\\n\\r\\n\\r\\n    function openTrading() external onlyOwner() {\\r\\n        require(!tradingOpen,\\\"trading is already open\\\");\\r\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n        _approve(address(this), address(uniswapV2Router), _tTotal);\\r\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\r\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\r\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\r\\n        swapEnabled = true;\\r\\n        tradingOpen = true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {}\\r\\n\\r\\n      function manualSwap() external onlyOwner {\\r\\n        require(_msgSender() == _taxWallet);\\r\\n        uint256 tokenBalance = balanceOf(address(this));\\r\\n        if(tokenBalance > 0){\\r\\n            swapTokensForEth(tokenBalance);\\r\\n        }\\r\\n        uint256 ethBalance = address(this).balance;\\r\\n        if(ethBalance > 0){\\r\\n            sendETHToFee(ethBalance);\\r\\n        }\\r\\n    }\\r\\n    function lotteryParticipate() external tradingEnabled() {\\r\\n        require(isTradingEnabled, \\\"Trading is currently disabled\\\");\\r\\n        require(!_lotteryParticipants[_msgSender()].hasParticipated, \\\"Already participated in the current lottery\\\");\\r\\n        require(_balances[_msgSender()] >= _minTokensToParticipate, \\\"Not enough tokens to participate\\\");\\r\\n\\r\\n        if (_lotteryInProgress) {\\r\\n            require(block.timestamp >= _lotteryParticipants[_msgSender()].lastParticipationTimestamp + _minHoldDuration,\\r\\n                \\\"Must hold tokens for minimum duration to participate\\\");\\r\\n        }\\r\\n\\r\\n        _lotteryParticipants[_msgSender()].hasParticipated = true;\\r\\n        _lotteryParticipants[_msgSender()].lastParticipationTimestamp = block.timestamp;\\r\\n        emit LotteryParticipation(_msgSender(), block.timestamp);\\r\\n    }\\r\\n\\r\\n    function announceLotteryWinners() external onlyOwner() {\\r\\n        require(block.timestamp >= _nextLotteryTimestamp, \\\"It's not yet time to announce winners\\\");\\r\\n        require(_totalRewardsBalance >= 0.5 ether, \\\"Rewards balance is not sufficient to start the lottery\\\");\\r\\n        // Determine the number of winners (5 random winners)\\r\\n        uint256 totalWinners = 5;\\r\\n        uint256 rewardAmountPerWinner = _totalRewardsBalance / totalWinners;\\r\\n        require(address(this).balance >= rewardAmountPerWinner, \\\"Insufficient contract balance to reward winners\\\");\\r\\n\\r\\n        // Select random winners\\r\\n        address[] memory participants = new address[](totalWinners);\\r\\n        uint256 participantCount = 0;\\r\\n        for (uint256 i = 0; i < _tTotal; i++) {\\r\\n            address participant = address(uint160(uint256(uint160(address(this))) + i));\\r\\n            if (_lotteryParticipants[participant].hasParticipated) {\\r\\n                participants[participantCount] = participant;\\r\\n                participantCount++;\\r\\n                if (participantCount >= totalWinners) {\\r\\n                    break;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        // Reward the winners\\r\\n        for (uint256 i = 0; i < participantCount; i++) {\\r\\n            address winner = participants[i];\\r\\n            payable(winner).transfer(rewardAmountPerWinner);\\r\\n        }\\r\\n\\r\\n        // Reset lottery participants for the next round\\r\\n        for (uint256 i = 0; i < participantCount; i++) {\\r\\n            address participant = participants[i];\\r\\n            _lotteryParticipants[participant].hasParticipated = false;\\r\\n            _lotteryParticipants[participant].lastParticipationTimestamp = 0;\\r\\n        }\\r\\n\\r\\n        _nextLotteryTimestamp = block.timestamp + _lotteryDuration;\\r\\n        _totalRewardsBalance = 0;\\r\\n        _lotteryInProgress = true;\\r\\n\\r\\n        emit LotteryWinnersAnnounced(totalWinners, rewardAmountPerWinner);\\r\\n    }\\r\\n\\r\\n    \\r\\n    // Function to start the next lottery automatically\\r\\n    function startNextLottery() private {\\r\\n        if (block.timestamp >= _nextLotteryTimestamp) {\\r\\n            if (block.timestamp >= _nextLotteryTimestamp + _firstDayDuration) {\\r\\n                // Start the lottery for every 48 hours from the eighth day onwards\\r\\n                _nextLotteryTimestamp = _nextLotteryTimestamp + _nextDaysDuration;\\r\\n            } else {\\r\\n                // Start the lottery for every 24 hours for the first seven days\\r\\n                _nextLotteryTimestamp = _nextLotteryTimestamp + _firstDayDuration;\\r\\n            }\\r\\n\\r\\n            _lotteryInProgress = true;\\r\\n        }\\r\\n    }\\r\\n    function checkForNextLottery() private {\\r\\n        if (!_lotteryInProgress && block.timestamp >= _nextLotteryTimestamp) {\\r\\n            startNextLottery();\\r\\n        }\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    // Function to announce the lottery winners and start the next lottery automatically\\r\\n    function announceLotteryWinnersAndStartNext() external onlyOwner() {\\r\\n        // ... (Rest of the announceLotteryWinners function code, unchanged)\\r\\n\\r\\n        // After announcing the winners, start the next lottery automatically\\r\\n        startNextLottery();\\r\\n    }\\r\\n    \\r\\n\\r\\n    // Function that triggers the next lottery automatically\\r\\n    function lotteryTimer() external {\\r\\n        checkForNextLottery();\\r\\n    }\\r\\n\\r\\n\\r\\n\\r\\n    // The claim function for the winners to withdraw their rewards (ETH)\\r\\n    function claimLotteryReward() external tradingEnabled() {\\r\\n        require(_lotteryInProgress, \\\"Lottery is not in progress\\\");\\r\\n        require(_lotteryParticipants[_msgSender()].hasParticipated, \\\"Not eligible to claim lottery reward\\\");\\r\\n        require(address(this).balance > 0, \\\"No rewards available to claim\\\");\\r\\n\\r\\n        // Transfer the reward amount (ETH) to the winner\\r\\n        uint256 rewardAmount = address(this).balance;\\r\\n        payable(_msgSender()).transfer(rewardAmount);\\r\\n\\r\\n        // Reset participant's lottery participation for the next round\\r\\n        _lotteryParticipants[_msgSender()].hasParticipated = false;\\r\\n        _lotteryParticipants[_msgSender()].lastParticipationTimestamp = 0;\\r\\n\\r\\n        emit Transfer(address(this), _msgSender(), rewardAmount);\\r\\n    }    \\r\\n     function getBuyTax() public view returns (uint256) {\\r\\n        return _buyCount > _reduceBuyTaxAt ? _finalBuyTax : _initialBuyTax;\\r\\n    }\\r\\n\\r\\n    function getSellTax() public view returns (uint256) {\\r\\n        return _buyCount > _reduceSellTaxAt ? _finalSellTax : _initialSellTax;\\r\\n    }\\r\\n\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"participant\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"LotteryParticipation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalWinners\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"LotteryWinnersAnnounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"announceLotteryWinners\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"announceLotteryWinnersAndStartNext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimLotteryReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableLimitExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableLimitExemption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBuyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isTradingEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryParticipate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryTimer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"marketingLpWallet\",\"type\":\"address\"}],\"name\":\"setMarketingLpWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "XavierV02M7e", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}