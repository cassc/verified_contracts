{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/non-upgradeable/Vesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// File: @openzeppelin/contracts/utils/Context.sol\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\npragma solidity ^0.8.0;\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\\ninterface IERC20 {\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function allowance(address owner, address spender)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\\n\\npragma solidity 0.8.9;\\n\\ncontract Vesting is Pausable {\\n    uint256 public lock;\\n    address public owner;\\n    address public pauser;\\n    address public admin;\\n\\n    struct Vest {\\n        address token;\\n        uint256 amount;\\n        address owner;\\n        address receiver;\\n        uint256 startTime;\\n        uint256 endTime;\\n        uint256 claimed;\\n    }\\n\\n    mapping(uint256 => Vest) public vesting;\\n\\n    event LockCreated(\\n        uint256 indexed _id,\\n        address indexed _token,\\n        uint256 _amount,\\n        address indexed _owner,\\n        address _receiver,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    );\\n\\n    event TokensClaimed(\\n        uint256 indexed _id,\\n        address indexed _token,\\n        address indexed _receiver,\\n        uint256 _claimedAmount\\n    );\\n\\n    event ReceiverUpdated(\\n        address prevValue,\\n        address newValue,\\n        uint256 timestamp\\n    );\\n\\n    event PauserUpdated(address indexed by, address indexed oldPauser, address indexed newPauser, uint256 timestamp);\\n    event PauserRenounced(address indexed by, uint256 timestamp);\\n    event AdminUpdated(address indexed by, address indexed oldAdmin, address indexed newAdmin, uint256 timestamp);\\n\\n    constructor(address _owner, address _pauser, address _admin) {\\n        require(\\n            _owner != address(0) &&\\n            _pauser != address(0) &&\\n            _admin != address(0),\\n            \\\"Zero address\\\"\\n        );\\n        owner = _owner;\\n        pauser = _pauser;\\n        admin = _admin;\\n        emit PauserUpdated(msg.sender, address(0), _pauser, block.timestamp);\\n        emit AdminUpdated(msg.sender, address(0), _admin, block.timestamp);\\n    }\\n\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Zero address\\\");\\n        owner = _newOwner;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(msg.sender == pauser, 'Caller is not the pauser');\\n        _;\\n    }\\n\\n    modifier onlyAdminOrOwner() {\\n        require(\\n            msg.sender == owner ||\\n            msg.sender == admin,\\n            \\\"Callable by either admin or owner\\\"\\n        );\\n        _;\\n    }\\n\\n     /// @notice Function to pause the contract.\\n    function pause() external onlyPauser {\\n        _pause();\\n    }\\n\\n    /// @notice Function to unpause the contract.\\n    function unpause() external onlyPauser {\\n        _unpause();\\n    }\\n\\n    /**\\n    * @notice Function for owner or admin to update the pauser address.\\n    * @param _newPauser Address of the new pauser.\\n    */\\n    function updatePauser(address _newPauser) external onlyAdminOrOwner {\\n        require(_newPauser != address(0), 'Zero Address!');\\n        require(pauser != address(0), 'Pauser functionality is renounced!');\\n        address oldPauser = pauser;\\n        pauser = _newPauser;\\n        emit PauserUpdated(msg.sender, oldPauser, _newPauser, block.timestamp);\\n    }\\n\\n    /**\\n    * @notice Function for owner or admin to renounce the pauser functionality.\\n    * @dev This will make pause/unpause functionality unusable.\\n    */\\n    function renouncePauser() external onlyAdminOrOwner {\\n        pauser = address(0);\\n        emit PauserRenounced(msg.sender, block.timestamp);\\n    }\\n\\n    /**\\n     * @notice Function for owner to update admin address.\\n     * @param _admin Address of new admin\\n     */\\n    function updateAdmin(address _admin) external onlyOwner {\\n        require(_admin != address(0), \\\"Zero Address\\\");\\n        address oldAdmin = admin;\\n        admin = _admin;\\n        emit AdminUpdated(msg.sender, oldAdmin, _admin, block.timestamp);\\n    }\\n\\n    function createLock(\\n        address _token,\\n        uint256 _amount,\\n        address _receiver,\\n        uint256 _startTime,\\n        uint256 _endTime\\n    ) external onlyAdminOrOwner whenNotPaused returns (bool) {\\n        require(\\n            _token != address(0) && _receiver != address(0),\\n            \\\"Zero address\\\"\\n        );\\n        require(_amount > 0, \\\"Zero amount\\\");\\n        require(\\n            _startTime > block.timestamp && _endTime > _startTime,\\n            \\\"Invalid time\\\"\\n        );\\n        IERC20 ERC20Interface = IERC20(_token);\\n        lock++;\\n        vesting[lock] = Vest(\\n            _token,\\n            _amount,\\n            msg.sender,\\n            _receiver,\\n            _startTime,\\n            _endTime,\\n            0\\n        );\\n\\n        require(\\n            ERC20Interface.transferFrom(msg.sender, address(this), _amount),\\n            \\\"Token transfer failed\\\"\\n        );\\n\\n        emit LockCreated(\\n            lock,\\n            _token,\\n            _amount,\\n            msg.sender,\\n            _receiver,\\n            _startTime,\\n            _endTime\\n        );\\n        return true;\\n    }\\n\\n    function getClaimableAmount(uint256 _lock) public view returns (uint256) {\\n        require(_lock > 0 && _lock <= lock, \\\"Invalid lock id\\\");\\n        Vest memory _vest = vesting[_lock];\\n        if (_vest.amount == _vest.claimed) return 0;\\n\\n        if (block.timestamp <= _vest.startTime) return 0;\\n\\n        if (block.timestamp >= _vest.endTime)\\n            return _vest.amount - _vest.claimed;\\n\\n        uint256 timePassedRatio = ((block.timestamp - _vest.startTime) *\\n            10**18) / (_vest.endTime - _vest.startTime);\\n\\n        uint256 claimableAmount = (_vest.amount * timePassedRatio) / (10**18);\\n\\n        return claimableAmount - _vest.claimed;\\n    }\\n\\n    function claim(uint256 _lock) external onlyAdminOrOwner whenNotPaused returns (bool) {\\n        uint256 claimableAmount = getClaimableAmount(_lock);\\n        require(claimableAmount > 0, \\\"Zero claimable amount\\\");\\n\\n        vesting[_lock].claimed += claimableAmount;\\n        require(\\n            IERC20(vesting[_lock].token).transfer(\\n                vesting[_lock].receiver,\\n                claimableAmount\\n            )\\n        );\\n        emit TokensClaimed(\\n            _lock,\\n            vesting[_lock].token,\\n            vesting[_lock].receiver,\\n            claimableAmount\\n        );\\n        return true;\\n    }\\n\\n    function changeReceiver(uint256 _lock, address user)\\n        external\\n        onlyAdminOrOwner\\n        whenNotPaused\\n        returns (bool)\\n    {\\n        require(_lock > 0 && _lock <= lock, \\\"Invalid lock id\\\");\\n        require(user != address(0), \\\"Zero receiver address\\\");\\n        address prevValue = vesting[_lock].receiver;\\n        vesting[_lock].receiver = user;\\n        emit ReceiverUpdated(prevValue, user, block.timestamp);\\n        return true;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pauser\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AdminUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"LockCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PauserRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldPauser\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newPauser\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"PauserUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"prevValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newValue\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReceiverUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_claimedAmount\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"changeReceiver\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createLock\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lock\",\"type\":\"uint256\"}],\"name\":\"getClaimableAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauser\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renouncePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"name\":\"updateAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newPauser\",\"type\":\"address\"}],\"name\":\"updatePauser\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vesting\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"claimed\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "Vesting", "CompilerVersion": "v0.8.9+commit.e5eed63a", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000022535db804a219d16948e0feb7f21f32b4aaea0500000000000000000000000022535db804a219d16948e0feb7f21f32b4aaea0500000000000000000000000022535db804a219d16948e0feb7f21f32b4aaea05", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}