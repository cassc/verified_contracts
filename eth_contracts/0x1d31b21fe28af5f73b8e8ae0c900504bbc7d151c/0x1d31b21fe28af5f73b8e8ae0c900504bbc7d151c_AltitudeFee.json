{"SourceCode": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.18;\r\n\r\n/******************************************/\r\n/*           Context starts here          */\r\n/******************************************/\r\n\r\n// File: @openzeppelin/contracts/GSN/Context.sol\r\n\r\n/*\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\r\n        return msg.data;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*           Ownable starts here          */\r\n/******************************************/\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\n\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        emit OwnershipTransferred(_owner, newOwner);\r\n        _owner = newOwner;\r\n    }\r\n}\r\n\r\n/******************************************/\r\n/*         AltitudeFee starts here        */\r\n/******************************************/\r\n\r\ncontract AltitudeFee is Ownable {\r\n\r\n    // VARIABLES\r\n    uint256 private P = 50 * 1e14;\r\n    uint256 private D1 = 6000 * 1e14;\r\n    uint256 private D2 = 500 * 1e14;\r\n    uint256 private L1 = 40 * 1e14;\r\n    uint256 private L2 = 9960 * 1e14;\r\n\r\n    event FeeParametersUpdated(uint256 _protocolFee, uint256 _D1, uint256 _D2, uint256 _L1, uint256 _L2);\r\n\r\n    /**\r\n     * @dev Set the rebalance fee (denominator 1e18).\r\n     */\r\n    function setFeeParameters(uint256 _protocolFee, uint256 _D1, uint256 _D2, uint256 _L1, uint256 _L2) external onlyOwner {\r\n        P = _protocolFee;\r\n        D1 = _D1;\r\n        D2 = _D2;\r\n        L1 = _L1;\r\n        L2 = _L2;\r\n        emit FeeParametersUpdated(_protocolFee, _D1, _D2, _L1, _L2);\r\n    }\r\n\r\n    function getFeeParameters() external view returns (uint256, uint256, uint256, uint256, uint256) {\r\n        return (P, D1, D2, L1, L2);\r\n    }\r\n\r\n    function getRebalanceFee(uint256 idealBalance, uint256 preBalance, uint256 amount) external view returns (uint256 rebalanceFee) {\r\n        require(preBalance >= amount, \"Altitude: not enough balance\");\r\n        uint256 postBalance = preBalance - amount;\r\n        uint256 safeZoneMax = idealBalance * D1 / 1e18;\r\n        uint256 safeZoneMin = idealBalance * D2 / 1e18;\r\n        rebalanceFee = 0;\r\n        if (postBalance >= safeZoneMax) {\r\n        } else if (postBalance >= safeZoneMin) {\r\n            uint256 proxyPreBalance = preBalance < safeZoneMax ? preBalance : safeZoneMax;\r\n            rebalanceFee = _getTrapezoidArea(L1, 0, safeZoneMax, safeZoneMin, proxyPreBalance, postBalance);\r\n        } else {\r\n            if (preBalance >= safeZoneMin) {\r\n                uint256 proxyPreBalance = preBalance < safeZoneMax ? preBalance : safeZoneMax;\r\n                rebalanceFee = rebalanceFee + _getTrapezoidArea(L1, 0, safeZoneMax, safeZoneMin, proxyPreBalance, safeZoneMin);\r\n                rebalanceFee = rebalanceFee + _getTrapezoidArea(L2, L1, safeZoneMin, 0, safeZoneMin, postBalance);\r\n            } else {\r\n                rebalanceFee = rebalanceFee + _getTrapezoidArea(L2, L1, safeZoneMin, 0, preBalance, postBalance);\r\n            }\r\n        }\r\n        return rebalanceFee;\r\n    }\r\n\r\n    function _getTrapezoidArea(uint256 lambda, uint256 yOffset, uint256 xUpperBound, uint256 xLowerBound, uint256 xStart, uint256 xEnd) internal pure returns (uint256) {\r\n        require(xEnd >= xLowerBound && xStart <= xUpperBound, \"Altitude: balance out of bound\");\r\n        uint256 xBoundWidth = xUpperBound - xLowerBound;\r\n        uint256 yStart = (xUpperBound - xStart) * lambda / xBoundWidth + yOffset;\r\n        uint256 yEnd = (xUpperBound - xEnd) * lambda / xBoundWidth + yOffset;\r\n        uint256 deltaX = xStart - xEnd;\r\n        return (yStart + yEnd) * deltaX / 2 / 1e18;\r\n    }\r\n}", "ABI": "[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_D1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_D2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_L2\",\"type\":\"uint256\"}],\"name\":\"FeeParametersUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getFeeParameters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idealBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"preBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getRebalanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rebalanceFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_D1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_D2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_L1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_L2\",\"type\":\"uint256\"}],\"name\":\"setFeeParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "AltitudeFee", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://91277448d1e887a22f843831822c98bf5e5d293e950c56e2b48ed976a935da3e"}