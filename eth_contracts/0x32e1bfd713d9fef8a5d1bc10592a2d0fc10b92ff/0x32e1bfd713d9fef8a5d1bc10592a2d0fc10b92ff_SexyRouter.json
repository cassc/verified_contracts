{"SourceCode": "{\"Dependencies.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\\n\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``\\u0027s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\\n\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\\n\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size \\u003e 0;\\n    }\\n\\n    // /**\\n    //  * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\n    //  * `recipient`, forwarding all available gas and reverting on errors.\\n    //  *\\n    //  * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n    //  * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n    //  * imposed by `transfer`, making them unable to receive funds via\\n    //  * `transfer`. {sendValue} removes this limitation.\\n    //  *\\n    //  * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n    //  *\\n    //  * IMPORTANT: because control is transferred to `recipient`, care must be\\n    //  * taken to not create reentrancy vulnerabilities. Consider using\\n    //  * {ReentrancyGuard} or the\\n    //  * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n    //  */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    // /**\\n    //  * @dev Performs a Solidity function call using a low level `call`. A\\n    //  * plain `call` is an unsafe replacement for a function call: use this\\n    //  * function instead.\\n    //  *\\n    //  * If `target` reverts with a revert reason, it is bubbled up by this\\n    //  * function (like regular Solidity function calls).\\n    //  *\\n    //  * Returns the raw returned data. To convert to the expected return value,\\n    //  * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n    //  *\\n    //  * Requirements:\\n    //  *\\n    //  * - `target` must be a contract.\\n    //  * - calling `target` with `data` must not revert.\\n    //  *\\n    //  * _Available since v3.1._\\n    //  */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    // /**\\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n    //  * `errorMessage` as a fallback revert reason when `target` reverts.\\n    //  *\\n    //  * _Available since v3.1._\\n    //  */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    // /**\\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n    //  * but also transferring `value` wei to `target`.\\n    //  *\\n    //  * Requirements:\\n    //  *\\n    //  * - the calling contract must have an ETH balance of at least `value`.\\n    //  * - the called Solidity function must be `payable`.\\n    //  *\\n    //  * _Available since v3.1._\\n    //  */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    // *\\n    //  * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n    //  * with `errorMessage` as a fallback revert reason when `target` reverts.\\n    //  *\\n    //  * _Available since v3.1._\\n\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    // /**\\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n    //  * but performing a static call.\\n    //  *\\n    //  * _Available since v3.3._\\n    //  */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    // /**\\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n    //  * but performing a static call.\\n    //  *\\n    //  * _Available since v3.3._\\n    //  */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    // /**\\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n    //  * but performing a delegate call.\\n    //  *\\n    //  * _Available since v3.4._\\n    //  */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    // /**\\n    //  * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n    //  * but performing a delegate call.\\n    //  *\\n    //  * _Available since v3.4._\\n    //  */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    // /**\\n    //  * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\n    //  * revert reason using the provided one.\\n    //  *\\n    //  * _Available since v4.3._\\n    //  */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length \\u003e 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    // Don\\u0027t need these\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\\n\\n\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 =\\u003e address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address =\\u003e uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 =\\u003e address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address =\\u003e mapping(address =\\u003e bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"Nonexistent\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length \\u003e 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"Caller is not approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"Nonexistent\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Caller is not approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"Caller is not approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"Transfer to non implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"Nonexistent\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"Transfer to non implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"Mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"Already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"Transfer not own\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver(to).onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"Transfer to non implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``\\u0027s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``\\u0027s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\\n/// [MIT License]\\n/// @title Base64\\n/// @notice Provides a function for encoding some bytes in base64\\n/// @author Brecht Devos \\u003cbrecht@loopring.org\\u003e\\nlibrary Base64 {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"},\"SexyBaseURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n\\n /$$$$$$$$ /$$$$$$ /$$   /$$  /$$$$$$  /$$$$$$$$ /$$   /$$ /$$     /$$\\n| $$_____/|_  $$_/| $$$ | $$ /$$__  $$| $$_____/| $$  / $$|  $$   /$$/\\n| $$        | $$  | $$$$| $$| $$  \\\\__/| $$      |  $$/ $$/ \\\\  $$ /$$/\\n| $$$$$     | $$  | $$ $$ $$|  $$$$$$ | $$$$$    \\\\  $$$$/   \\\\  $$$$/\\n| $$__/     | $$  | $$  $$$$ \\\\____  $$| $$__/     \\u003e$$  $$    \\\\  $$/\\n| $$        | $$  | $$\\\\  $$$ /$$  \\\\ $$| $$       /$$/\\\\  $$    | $$\\n| $$       /$$$$$$| $$ \\\\  $$|  $$$$$$/| $$$$$$$$| $$  \\\\ $$    | $$\\n|__/      |______/|__/  \\\\__/ \\\\______/ |________/|__/  |__/    |__/\\n\\n\\nhttps://finsexy.com\\n\\nby steviep.eth\\n\\n*/\\n\\npragma solidity ^0.8.23;\\n\\ninterface ISexyRouter {\\n  function owner() external view returns (address);\\n}\\n\\ninterface IForwardedURI {\\n  function tokenURI(string memory name, string memory symbol, uint256 tokenId) external view returns (string memory);\\n  function isSpecial(uint256 tokenId) external view returns (bool);\\n}\\n\\ncontract SexyBaseURI {\\n  using IntToString for uint256;\\n\\n  ISexyRouter public router;\\n\\n  struct URIInfo {\\n    string baseURI;\\n    string description;\\n    string domName;\\n    uint256 maxImages;\\n  }\\n\\n  mapping(string =\\u003e URIInfo) public symbolToURIInfo;\\n  mapping(string =\\u003e address) public symbolToForwardedAddr;\\n\\n  constructor() {\\n    router = ISexyRouter(msg.sender);\\n\\n    _setURIString(\\u0027SEXY-CG\\u0027, \\u0027ipfs://QmXxuewooGfrtNno52sftykoAFLsBubPG8k3DeBXYbKNvr/\\u0027, \\u0027This token symbolizes your purge of profits profile, and embrace of the numismatic numina\\u0027, \\u0027CrystalGoddess\\u0027, 36);\\n    _setURIString(\\u0027SEXY-DM\\u0027, \\u0027ipfs://QmaH6ZdxNe2xkS7SjdkR2VHoYrHQtwms2GpsiyryZBJiqx/\\u0027, \\u0027The Tavern Key glissens in the sun, reminding you of the journey you took to acquire it\\u0027, \\u0027DungeonMistress\\u0027, 64);\\n    _setURIString(\\u0027SEXY-QJ\\u0027, \\u0027ipfs://Qme5RSzc1kxoUAc4cnwS6RBrF8Y5XQ8LCyUJq3FCLFrmcq/\\u0027, \\u0027Here\\\\\\u0027s my hot little pussy, idiot\\u0027, \\u0027QueenJessica\\u0027, 25);\\n    _setURIString(\\u0027SEXY-SJ\\u0027, \\u0027ipfs://QmYztV8Pi4GiCVbM8iiLtViGve85jsAAripLVy2CwLudBf/\\u0027, \\u0027Hopefully this gives you a little motivation to keep your taxes in poor standing.\\u0027, \\u0027SamanthaJones\\u0027, 36);\\n    _setURIString(\\u0027SEXY-XXA\\u0027, \\u0027ipfs://QmTgt6nxVB3rUBLhL8iWofWmHAXr22Ss6Q7AGuYPeoZcyR/\\u0027, \\u0027MODEL A\\u0027, \\u0027SexyXXXPress\\u0027, 200); // A\\n    _setURIString(\\u0027SEXY-XXB\\u0027, \\u0027ipfs://QmbTwHkcVzweEmZP6T2a1aLaJUv2Biwim7KcEhpfhZjBsN/\\u0027, \\u0027MODEL B\\u0027, \\u0027SexyXXXPress\\u0027, 100); // B\\n    _setURIString(\\u0027SEXY-XXC\\u0027, \\u0027ipfs://QmaZhCNAwpxePAexTgQAdpkcGWZsBUAKsu9P6jHVMp5sHq/\\u0027, \\u0027MODEL C\\u0027, \\u0027SexyXXXPress\\u0027, 50); // C\\n    _setURIString(\\u0027SEXY-HH\\u0027, \\u0027ipfs://QmcmSw7urQCHyiqsLxXJKPdJdHnRPhSRt3JWgUHESEkkLd/\\u0027, \\u0027you have \\\\\\u0027paypig\\\\\\u0027 written all over you ;)\\u0027, \\u0027heatherHot\\u0027, 81);\\n    _setURIString(\\u0027SEXY-KF\\u0027, \\u0027ipfs://QmQo8okVhKAreJv3kaauoCZ2h4H5i6niUtpKZDCgGAgfvF/\\u0027, \\u0027OMG, you really are a human ATM\\u0027, \\u0027katFischer\\u0027, 49);\\n    _setURIString(\\u0027SEXY-SP\\u0027, \\u0027ipfs://QmcHMVW79r3q1xaCmMnrDj64YTmxBp1yWvPo23ei3f6EN8/\\u0027, \\u0027pleasure doing business with you.\\u0027, \\u0027steviep\\u0027, 49);\\n  }\\n\\n  function isSpecial(string memory symbol, uint256 tokenId) public view returns (bool) {\\n    if (symbolToForwardedAddr[symbol] != address(0)) {\\n      return IForwardedURI(symbolToForwardedAddr[symbol]).isSpecial(tokenId);\\n    }\\n    return tokenId \\u003c symbolToURIInfo[symbol].maxImages;\\n  }\\n\\n\\n\\n  function tokenURI(string memory name, string memory symbol, uint256 tokenId) external view returns (string memory) {\\n    if (symbolToForwardedAddr[symbol] != address(0)) {\\n      return IForwardedURI(symbolToForwardedAddr[symbol]).tokenURI(name, symbol, tokenId);\\n    }\\n\\n    uint256 outputNum = tokenId % symbolToURIInfo[symbol].maxImages;\\n\\n    string memory tokenName = string.concat(name, \\u0027 #\\u0027, tokenId.toString());\\n    string memory imageURI = string.concat(symbolToURIInfo[symbol].baseURI, outputNum.toString(), \\u0027.png\\u0027);\\n    string memory specialness = isSpecial(symbol, tokenId) ? \\u0027True\\u0027 : \\u0027False\\u0027;\\n\\n    bytes memory json = abi.encodePacked(\\n      \\u0027data:application/json;utf8,\\u0027\\n      \\u0027{\\\"name\\\": \\\"\\u0027, tokenName,\\u0027\\\",\\u0027\\n      \\u0027\\\"description\\\": \\\"\\u0027, symbolToURIInfo[symbol].description, \\u0027\\\",\\u0027\\n      \\u0027\\\"external_url\\\": \\\"https://finsexy.com/doms/\\u0027, symbolToURIInfo[symbol].domName,\\u0027\\\",\\u0027\\n      \\u0027\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Output #\\\", \\\"value\\\": \\\"\\u0027, outputNum.toString(),\\u0027\\\"}, {\\\"trait_type\\\": \\\"Is Special\\\", \\\"value\\\": \\\"\\u0027, specialness, \\u0027\\\"}],\\u0027\\n      \\u0027\\\"image\\\": \\\"\\u0027, imageURI,\\n      \\u0027\\\"}\\u0027\\n    );\\n\\n    return string(json);\\n  }\\n\\n  function setURIString(\\n    string memory symbol,\\n    string memory baseURI,\\n    string memory description,\\n    string memory domName,\\n    uint256 maxImages\\n  ) external {\\n    require(msg.sender == router.owner(), \\u0027Ownable: caller is not the owner\\u0027);\\n    _setURIString(symbol, baseURI, description, domName, maxImages);\\n  }\\n\\n  function _setURIString(\\n    string memory symbol,\\n    string memory baseURI,\\n    string memory description,\\n    string memory domName,\\n    uint256 maxImages\\n  ) internal {\\n    symbolToURIInfo[symbol].baseURI = baseURI;\\n    symbolToURIInfo[symbol].description = description;\\n    symbolToURIInfo[symbol].domName = domName;\\n    symbolToURIInfo[symbol].maxImages = maxImages;\\n  }\\n\\n  function setURIAddr(string memory symbol, address addr) external {\\n    require(msg.sender == router.owner(), \\u0027Ownable: caller is not the owner\\u0027);\\n    symbolToForwardedAddr[symbol] = addr;\\n  }\\n}\\n\\n\\ncontract CandyCrushURI is IForwardedURI {\\n  using IntToString for uint256;\\n\\n  function tokenURI(string memory name, string memory, uint256 tokenId) external pure returns (string memory) {\\n    string memory tokenName = string.concat(name, \\u0027 #\\u0027, tokenId.toString());\\n\\n    bytes memory json = abi.encodePacked(\\n      \\u0027data:application/json;utf8,\\u0027\\n      \\u0027{\\\"name\\\": \\\"\\u0027, tokenName,\\u0027\\\",\\u0027\\n      \\u0027\\\"description\\\": \\\"All tattoos are non-transferable\\\",\\u0027\\n      \\u0027\\\"external_url\\\": \\\"https://finsexy.com/doms/CandyCrush\\\",\\u0027\\n      \\u0027\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Is Special\\\", \\\"value\\\": \\\"\\u0027, isSpecial(tokenId) ? \\u0027True\\u0027 : \\u0027False\\u0027,\\u0027\\\"}],\\u0027\\n      \\u0027\\\"image\\\": \\\"\\u0027, encodedSVG(tokenId),\\n      \\u0027\\\"}\\u0027\\n    );\\n\\n    return string(json);\\n  }\\n\\n  function isSpecial(uint256 tokenId) public pure returns (bool) {\\n    return tokenId \\u003c 60;\\n  }\\n\\n  function encodedSVG(uint256 tokenId) public pure returns (string memory) {\\n    return string(abi.encodePacked(\\n      \\u0027data:image/svg+xml;base64,\\u0027,\\n      Base64Encode.encode(rawSVG(tokenId))\\n    ));\\n  }\\n\\n  function rawSVG(uint256 tokenId) public pure returns (bytes memory) {\\n    string[10] memory bgColors = [\\n      \\u0027120211\\u0027, // bg\\n      \\u0027120211\\u0027, // bg\\n      \\u0027120211\\u0027, // bg\\n\\n      \\u0027fff8ff\\u0027, // primary\\n      \\u0027fff8ff\\u0027, // primary\\n      \\u0027fff8ff\\u0027, // primary\\n\\n      \\u0027ff00c7\\u0027, // light\\n      \\u0027ff00c7\\u0027, // light\\n\\n      \\u002700ffef\\u0027, // light link\\n      \\u002700ffef\\u0027 // light link\\n    ];\\n\\n    string[10] memory textColors = [\\n      \\u0027fff8ff\\u0027, // primary\\n      \\u0027ff00c7\\u0027, // light\\n      \\u002700ffef\\u0027, // light link\\n\\n      \\u0027120211\\u0027, // bg\\n      \\u0027ff00c7\\u0027, // light\\n      \\u002700ffef\\u0027, // light link\\n\\n      \\u0027120211\\u0027, // bg\\n      \\u0027fff8ff\\u0027, // primary\\n\\n      \\u0027120211\\u0027, // bg\\n      \\u0027fff8ff\\u0027 // primary\\n    ];\\n\\n    bytes[6] memory tattoos = [\\n      abi.encodePacked(\\\"I\\u0027m a little paypiggie\\\"),\\n      abi.encodePacked(\\u0027I \\u0027, unicode\\u0027\ud83d\udc96\\u0027, \\u0027 CandyCrush\\u0027),\\n      abi.encodePacked(\\u0027Property of CandyCrush\\u0027),\\n      abi.encodePacked(\\\"Cash Cow \\\",  unicode\\u0027\ud83d\udcb5\\u0027, unicode\\u0027\ud83d\udc04\\u0027),\\n      abi.encodePacked(\\\"Human ATM \\\",  unicode\\u0027\ud83d\ude47\\u0027, unicode\\u0027\ud83c\udfe7\\u0027),\\n      abi.encodePacked(\\\"Pay Pig \\\",  unicode\\u0027\ud83d\udcb8\\u0027, unicode\\u0027\ud83d\udc16\\u0027)\\n    ];\\n\\n    string memory bgColor = bgColors[(tokenId / tattoos.length) % bgColors.length];\\n    string memory textColor = textColors[(tokenId / tattoos.length) % textColors.length];\\n    bytes memory tattoo = tattoos[tokenId % tattoos.length];\\n\\n    return abi.encodePacked(\\n      \\u0027\\u003csvg viewBox=\\\"0 0 900 300\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\u003e\\u0027\\n        \\u0027\\u003crect x=\\\"0\\\" y=\\\"0\\\" width=\\\"900\\\" height=\\\"300\\\" fill=\\\"#\\u0027, bgColor, \\u0027\\\"\\u003e\\u003c/rect\\u003e\\u0027\\n        \\u0027\\u003ctext x=\\\"50%\\\" y=\\\"50%\\\" style=\\\"fill:#\\u0027, textColor, \\u0027;font-family:cursive;font-size:95px;dominant-baseline:middle;text-anchor: middle;\\\"\\u003e\\u0027, tattoo,\\u0027\\u003c/text\\u003e\\u0027\\n      \\u0027\\u003c/svg\\u003e\\u0027\\n    );\\n  }\\n}\\n\\n\\ninterface IDrAndy {\\n  function mintedBy(uint256) external view returns (address);\\n  function timestamp(uint256) external view returns (uint256);\\n  function tributes(address) external view returns (uint256);\\n}\\n\\ncontract DrAndyURI is IForwardedURI{\\n  using IntToString for uint256;\\n\\n  IDrAndy public ai;\\n\\n  constructor(address addr) {\\n    ai = IDrAndy(addr);\\n  }\\n\\n  function tokenURI(string memory name, string memory, uint256 tokenId) external view returns (string memory) {\\n    string memory tokenName = string.concat(name, \\u0027 #\\u0027, tokenId.toString());\\n\\n    address originalMinter = ai.mintedBy(tokenId);\\n    bool finalSessionPaid = ai.tributes(originalMinter) \\u003e= 0.05 ether;\\n\\n    bytes memory json = abi.encodePacked(\\n      \\u0027data:application/json;utf8,\\u0027\\n      \\u0027{\\\"name\\\": \\\"\\u0027, tokenName,\\u0027\\\",\\u0027\\n      \\u0027\\\"description\\\": \\\"Invoices must be paid within 90 business days with either ETH or SexyCredits.\\\",\\u0027\\n      \\u0027\\\"external_url\\\": \\\"https://finsexy.com/doms/DrAndy\\\",\\u0027\\n      \\u0027\\\"attributes\\\": [{\\\"trait_type\\\": \\\"Final Session Paid\\\", \\\"value\\\": \\\"\\u0027, finalSessionPaid ? \\u0027True\\u0027 : \\u0027False\\u0027,\\u0027\\\"},{\\\"trait_type\\\": \\\"Is Special\\\", \\\"value\\\": \\\"\\u0027, isSpecial(tokenId) ? \\u0027True\\u0027 : \\u0027False\\u0027,\\u0027\\\"}],\\u0027\\n      \\u0027\\\"image\\\": \\\"\\u0027, encodedSVG(tokenId),\\n      \\u0027\\\"}\\u0027\\n    );\\n\\n    return string(json);\\n  }\\n\\n  function isSpecial(uint256) public pure returns (bool) {\\n    return true;\\n  }\\n\\n  function encodedSVG(uint256 tokenId) public view returns (string memory) {\\n    return string(abi.encodePacked(\\n      \\u0027data:image/svg+xml;base64,\\u0027,\\n      Base64Encode.encode(rawSVG(tokenId))\\n    ));\\n  }\\n\\n  function rawSVG(uint256 tokenId) public view returns (bytes memory) {\\n    address originalMinter = ai.mintedBy(tokenId);\\n    bool finalSessionPaid = ai.tributes(originalMinter) \\u003e= 0.05 ether;\\n    uint256 taxId = uint256(keccak256(abi.encodePacked(originalMinter, tokenId))) % 1000000;\\n\\n    string memory header = string.concat(\\n      \\u0027\\u003csvg viewBox=\\\"0 0 850 1100\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\u003e\\u003cstyle\\u003e.c{dominant-baseline:hanging;text-anchor:middle}.e{text-anchor:end}text{font-size:25px}line{stroke:#000}\\u003c/style\\u003e\\u003crect x=\\\"0\\\" y=\\\"0\\\" width=\\\"850\\\" height=\\\"1100\\\" fill=\\\"#fff\\\"\\u003e\\u003c/rect\\u003e\\u003ctext class=\\\"c\\\" x=\\\"50%\\\" y=\\\"125\\\" style=\\\"font-size:60px\\\"\\u003eINVOICE\\u003c/text\\u003e\\u003ctext class=\\\"c\\\" x=\\\"50%\\\" y=\\\"183\\\" style=\\\"font-size:45px\\\"\\u003eDr. Andy Ingram\\u003c/text\\u003e\\u003ctext class=\\\"c s\\\" x=\\\"50%\\\" y=\\\"240\\\"\\u003e\\u0027,\\n      uint256(uint160(address(ai))).toHexString(),\\n      \\u0027\\u003c/text\\u003e\\u0027\\n    );\\n\\n    string memory middleSection = string.concat(\\n      \\u0027\\u003ctext x=\\\"100\\\" y=\\\"345\\\" class=\\\"s\\\"\\u003eInvoice # \\u0027,\\n      tokenId.toString(),\\n      \\u0027\\u003c/text\\u003e\\u003ctext x=\\\"750\\\" y=\\\"345\\\" class=\\\"s e\\\"\\u003eTax # \\u0027,\\n      taxId.toString(),\\n      \\u0027\\u003c/text\\u003e\\u003cline x1=\\\"100\\\" x2=\\\"750\\\" y1=\\\"350\\\" y2=\\\"350\\\"\\u003e\\u003c/line\\u003e\\u003ctext x=\\\"100\\\" y=\\\"410\\\" class=\\\"s\\\"\\u003eStatement Timestamp: \\u0027,\\n      ai.timestamp(tokenId).toString(),\\n      \\u0027\\u003c/text\\u003e\\u003ctext x=\\\"100\\\" y=\\\"445\\\" class=\\\"s\\\"\\u003ePatient:\\u003c/text\\u003e\\u003ctext x=\\\"185\\\" y=\\\"445\\\" class=\\\"s\\\"\\u003e\\u0027,\\n       uint256(uint160(originalMinter)).toHexString(),\\n      \\u0027\\u003c/text\\u003e\\u0027\\n    );\\n\\n    string memory feeSection = string.concat(\\n      \\u0027\\u003ctext x=\\\"100\\\" y=\\\"595\\\" class=\\\"s\\\"\\u003e# of Sessions: 4\\u003c/text\\u003e\\u003ctext x=\\\"750\\\" y=\\\"595\\\" class=\\\"s e\\\"\\u003eFee Per Session: 0.01 ETH\\u003c/text\\u003e\\u003cline x1=\\\"100\\\" x2=\\\"750\\\" y1=\\\"600\\\" y2=\\\"600\\\"\\u003e\\u003c/line\\u003e\\u003ctext x=\\\"150\\\" y=\\\"675\\\"\\u003eSession 1:\\u003c/text\\u003e\\u003ctext x=\\\"300\\\" y=\\\"675\\\"\\u003e0.01 ETH\\u003c/text\\u003e\\u003ctext x=\\\"450\\\" y=\\\"675\\\"\\u003ePAID\\u003c/text\\u003e\\u003ctext x=\\\"150\\\" y=\\\"715\\\"\\u003eSession 2:\\u003c/text\\u003e\\u003ctext x=\\\"300\\\" y=\\\"715\\\"\\u003e0.01 ETH\\u003c/text\\u003e\\u003ctext x=\\\"450\\\" y=\\\"715\\\"\\u003ePAID\\u003c/text\\u003e\\u003ctext x=\\\"150\\\" y=\\\"755\\\"\\u003eSession 3:\\u003c/text\\u003e\\u003ctext x=\\\"300\\\" y=\\\"755\\\"\\u003e0.01 ETH\\u003c/text\\u003e\\u003ctext x=\\\"450\\\" y=\\\"755\\\"\\u003ePAID\\u003c/text\\u003e\\u003ctext x=\\\"150\\\" y=\\\"795\\\"\\u003eSession 4:\\u003c/text\\u003e\\u003ctext x=\\\"300\\\" y=\\\"795\\\"\\u003e0.01 ETH\\u003c/text\\u003e\\u003ctext x=\\\"450\\\" y=\\\"795\\\" fill=\\\"\\u0027,\\n      finalSessionPaid ? \\u0027#000\\u0027 : \\u0027#f00\\u0027,\\n      \\u0027\\\"\\u003e\\u0027,\\n      finalSessionPaid ? \\u0027PAID\\u0027 : \\u0027UNPAID\\u0027,\\n      \\u0027\\u003c/text\\u003e\\u0027\\n    );\\n\\n    string memory end = string.concat(\\n      \\u0027\\u003ctext x=\\\"100\\\" y=\\\"935\\\"\\u003eBalance Paid: 0.0\\u0027,\\n      finalSessionPaid ? \\u00274\\u0027 : \\u00273\\u0027,\\n      \\u0027 ETH\\u003c/text\\u003e\\u003ctext x=\\\"100\\\" y=\\\"975\\\"\\u003eBalance Due: 0.0\\u0027,\\n       finalSessionPaid ? \\u00270\\u0027 : \\u00271\\u0027,\\n       \\u0027 ETH\\u003c/text\\u003e\\u003c/svg\\u003e\\u0027\\n    );\\n\\n    return abi.encodePacked(\\n      header,\\n      middleSection,\\n      feeSection,\\n      end\\n    );\\n  }\\n}\\n\\n\\n\\n\\n\\nlibrary IntToString {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp \\u003e\\u003e= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /*\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\n            value \\u003e\\u003e= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\\n\\nlibrary Base64Encode {\\n    bytes internal constant TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /// @notice Encodes some bytes to the base64 representation\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        uint256 len = data.length;\\n        if (len == 0) return \\\"\\\";\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((len + 2) / 3);\\n\\n        // Add some extra buffer at the end\\n        bytes memory result = new bytes(encodedLen + 32);\\n\\n        bytes memory table = TABLE;\\n\\n        assembly {\\n            let tablePtr := add(table, 1)\\n            let resultPtr := add(result, 32)\\n\\n            for {\\n                let i := 0\\n            } lt(i, len) {\\n\\n            } {\\n                i := add(i, 3)\\n                let input := and(mload(add(data, i)), 0xffffff)\\n\\n                let out := mload(add(tablePtr, and(shr(18, input), 0x3F)))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(12, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(shr(6, input), 0x3F))), 0xFF))\\n                out := shl(8, out)\\n                out := add(out, and(mload(add(tablePtr, and(input, 0x3F))), 0xFF))\\n                out := shl(224, out)\\n\\n                mstore(resultPtr, out)\\n\\n                resultPtr := add(resultPtr, 4)\\n            }\\n\\n            switch mod(len, 3)\\n            case 1 {\\n                mstore(sub(resultPtr, 2), shl(240, 0x3d3d))\\n            }\\n            case 2 {\\n                mstore(sub(resultPtr, 1), shl(248, 0x3d))\\n            }\\n\\n            mstore(result, encodedLen)\\n        }\\n\\n        return string(result);\\n    }\\n}\"},\"SexyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n\\n /$$$$$$$$ /$$$$$$ /$$   /$$  /$$$$$$  /$$$$$$$$ /$$   /$$ /$$     /$$\\n| $$_____/|_  $$_/| $$$ | $$ /$$__  $$| $$_____/| $$  / $$|  $$   /$$/\\n| $$        | $$  | $$$$| $$| $$  \\\\__/| $$      |  $$/ $$/ \\\\  $$ /$$/\\n| $$$$$     | $$  | $$ $$ $$|  $$$$$$ | $$$$$    \\\\  $$$$/   \\\\  $$$$/\\n| $$__/     | $$  | $$  $$$$ \\\\____  $$| $$__/     \\u003e$$  $$    \\\\  $$/\\n| $$        | $$  | $$\\\\  $$$ /$$  \\\\ $$| $$       /$$/\\\\  $$    | $$\\n| $$       /$$$$$$| $$ \\\\  $$|  $$$$$$/| $$$$$$$$| $$  \\\\ $$    | $$\\n|__/      |______/|__/  \\\\__/ \\\\______/ |________/|__/  |__/    |__/\\n\\n\\nhttps://finsexy.com\\n\\nby steviep.eth\\n\\n*/\\n\\npragma solidity ^0.8.23;\\n\\nimport \\\"./Dependencies.sol\\\";\\nimport \\\"./SexyVIP.sol\\\";\\nimport \\\"./SexyBaseURI.sol\\\";\\n\\n\\ncontract SexyRouter is Ownable {\\n  address public vip;\\n  address public baseURI;\\n  mapping(address =\\u003e uint256) private _premium;\\n\\n  constructor() {\\n    vip = address(new SexyVIP(msg.sender));\\n    baseURI = address(new SexyBaseURI());\\n  }\\n\\n  function premium(address user) external view returns (uint256) {\\n    return _premium[user] == 0 ? 1 : _premium[user];\\n  }\\n\\n  function applyPremium(uint256 p) external {\\n    require(p \\u003e 0 \\u0026\\u0026 p \\u003c 4, \\u0027Invalid Premium\\u0027);\\n    _premium[msg.sender] = p;\\n  }\\n\\n  function setBaseURI(address newBaseURI) external onlyOwner {\\n    baseURI = newBaseURI;\\n  }\\n\\n  function setVIP(address newVIP) external onlyOwner {\\n    vip = newVIP;\\n  }\\n}\\n\\n\"},\"SexyVIP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n\\n /$$$$$$$$ /$$$$$$ /$$   /$$  /$$$$$$  /$$$$$$$$ /$$   /$$ /$$     /$$\\n| $$_____/|_  $$_/| $$$ | $$ /$$__  $$| $$_____/| $$  / $$|  $$   /$$/\\n| $$        | $$  | $$$$| $$| $$  \\\\__/| $$      |  $$/ $$/ \\\\  $$ /$$/\\n| $$$$$     | $$  | $$ $$ $$|  $$$$$$ | $$$$$    \\\\  $$$$/   \\\\  $$$$/\\n| $$__/     | $$  | $$  $$$$ \\\\____  $$| $$__/     \\u003e$$  $$    \\\\  $$/\\n| $$        | $$  | $$\\\\  $$$ /$$  \\\\ $$| $$       /$$/\\\\  $$    | $$\\n| $$       /$$$$$$| $$ \\\\  $$|  $$$$$$/| $$$$$$$$| $$  \\\\ $$    | $$\\n|__/      |______/|__/  \\\\__/ \\\\______/ |________/|__/  |__/    |__/\\n\\n\\nhttps://finsexy.com\\n\\nby steviep.eth\\n\\n*/\\n\\npragma solidity ^0.8.23;\\n\\nimport \\\"./Dependencies.sol\\\";\\n\\n\\ninterface SexyDom {\\n  function creditTribute(address recipient, uint256 amount) external;\\n}\\n\\n\\ncontract SexyVIP is ERC721, Ownable {\\n  uint256 public totalSupply;\\n  uint256 public constant maxSupply = 101;\\n\\n  SexyVIPMinter public minter;\\n  SexyVIPTokenURI public uri;\\n\\n  mapping(uint256 =\\u003e bool) public isGold;\\n  mapping(uint256 =\\u003e string) public memberName;\\n\\n  mapping(uint256 =\\u003e uint256) public creditBalance;\\n  mapping(uint256 =\\u003e address) private _approvals;\\n\\n  event MetadataUpdate(uint256 _tokenId);\\n  event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n\\n  constructor(address newOwner) ERC721(\\u0027FinSexy VIP Membership\\u0027, \\u0027VIP\\u0027) {\\n    minter = new SexyVIPMinter();\\n    uri = new SexyVIPTokenURI();\\n\\n    isGold[0] = true;\\n    memberName[0] = \\u0027steviep\\u0027;\\n    creditBalance[0] = 25;\\n\\n    transferOwnership(newOwner);\\n    _mint(newOwner, 0);\\n    totalSupply++;\\n  }\\n\\n  function exists(uint256 tokenId) external view returns (bool) {\\n    return _exists(tokenId);\\n  }\\n\\n\\n  function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n    return uri.tokenURI(tokenId);\\n  }\\n\\n  function mint(address to, string memory name, bool isGold_) external {\\n    require(msg.sender == address(minter), \\u0027Incorrect minting address\\u0027);\\n    require(totalSupply \\u003c maxSupply, \\u0027Cannot mint more VIPs\\u0027);\\n\\n    if (isGold_) isGold[totalSupply] = true;\\n    memberName[totalSupply] = name;\\n    creditBalance[totalSupply] = 25;\\n\\n    _mint(to, totalSupply);\\n    totalSupply++;\\n  }\\n\\n  function spendCredit(uint256 tokenId, address domAddr, uint256 amount, address recipient) external {\\n    _spendCredit(tokenId, domAddr, amount, recipient);\\n  }\\n\\n  function spendCredit(uint256 tokenId, address domAddr, uint256 amount) external {\\n    _spendCredit(tokenId, domAddr, amount, msg.sender);\\n  }\\n\\n  function _spendCredit(uint256 tokenId, address domAddr, uint256 amount, address recipient) private {\\n    transferCredits(tokenId, 0, amount);\\n    SexyDom(domAddr).creditTribute(recipient, amount * 0.01 ether);\\n  }\\n\\n  function changeName(uint256 tokenId, string memory newName) external {\\n    require(ownerOf(tokenId) == msg.sender, \\u0027Only membership owner can update name\\u0027);\\n    memberName[tokenId] = newName;\\n    emit MetadataUpdate(tokenId);\\n  }\\n\\n  function transferCredits(uint256 fromTokenId, uint256 toTokenId, uint256 amount) public {\\n    require(\\n      ownerOf(fromTokenId) == msg.sender || _approvals[fromTokenId] == msg.sender,\\n      \\u0027Only VIP or operator can transfer credits\\u0027\\n    );\\n\\n    emit MetadataUpdate(fromTokenId);\\n    emit MetadataUpdate(toTokenId);\\n\\n    creditBalance[fromTokenId] -= amount;\\n    creditBalance[toTokenId] += amount;\\n  }\\n\\n  function approveCredits(uint256 tokenId, address operator) external {\\n    require(ownerOf(tokenId) == msg.sender, \\u0027Only VIP can approve own credits\\u0027);\\n    _approvals[tokenId] = operator;\\n  }\\n\\n  function getCreditApproval(uint256 tokenId) external view returns (address) {\\n    return  _approvals[tokenId];\\n  }\\n\\n  function _beforeTokenTransfer(address, address, uint256 tokenId) internal virtual override {\\n    _approvals[tokenId] = address(0);\\n  }\\n\\n  function setMinter(address newMinter) external onlyOwner {\\n    minter = SexyVIPMinter(newMinter);\\n  }\\n\\n  function setURI(address newURI) external onlyOwner {\\n    uri = SexyVIPTokenURI(newURI);\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721) returns (bool) {\\n    return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n  }\\n}\\n\\n\\ncontract SexyVIPMinter {\\n  uint256 public mintPrice = 0.1 ether;\\n  uint256 public goldPrice = 0.15 ether;\\n  SexyVIP public sexyVIP;\\n\\n  constructor() {\\n    sexyVIP = SexyVIP(msg.sender);\\n  }\\n\\n  function mint(string memory name, bool isGold) external payable {\\n    require(\\n      msg.value \\u003e= (isGold ? goldPrice : mintPrice),\\n      \\u0027Amount too low\\u0027\\n    );\\n    sexyVIP.mint(msg.sender, name, isGold);\\n  }\\n\\n  function setPrices(uint256 newPrice, uint256 newGoldPrice) external {\\n    require(msg.sender == sexyVIP.owner(), \\u0027Ownable: caller is not the owner\\u0027);\\n    mintPrice = newPrice;\\n    goldPrice = newGoldPrice;\\n  }\\n\\n  function withdraw() external {\\n    require(msg.sender == sexyVIP.owner(), \\u0027Ownable: caller is not the owner\\u0027);\\n    payable(sexyVIP.owner()).transfer(address(this).balance);\\n  }\\n}\\n\\ncontract SexyVIPTokenURI {\\n  using Strings for uint256;\\n  SexyVIP public sexyVIP;\\n\\n  constructor() {\\n    sexyVIP = SexyVIP(msg.sender);\\n  }\\n\\n  function tokenURI(uint256 tokenId) external view returns (string memory) {\\n    string memory description = \\u0027FinSexy V.I.P. Memberships grant the holder 25 SexyCredits, which they may send to sexy findoms on https://finsexy.com or transfer to other V.I.P. Members.\\u0027;\\n\\n    bytes memory json = abi.encodePacked(\\n      \\u0027data:application/json;utf8,\\u0027,\\n      \\u0027{\\\"name\\\": \\\"FinSexy VIP Membership #\\u0027, tokenId.toString(),\\u0027\\\",\\u0027\\n      \\u0027\\\"description\\\": \\\"\\u0027, description, \\u0027\\\",\\u0027\\n      \\u0027\\\"external_url\\\": \\\"https://finsexy.com\\\",\\u0027\\n      \\u0027\\\"attributes\\\": \\u0027, tokenAttrs(tokenId), \\u0027,\\u0027\\n      \\u0027\\\"image\\\": \\\"\\u0027, encodedSVG(tokenId),\\n      \\u0027\\\"}\\u0027\\n    );\\n\\n    return string(json);\\n  }\\n\\n  function encodedSVG(uint256 tokenId) public view returns (string memory) {\\n    return string(abi.encodePacked(\\n      \\u0027data:image/svg+xml;base64,\\u0027,\\n      Base64.encode(rawSVG(tokenId))\\n    ));\\n  }\\n\\n  function tokenAttrs(uint256 tokenId) public view returns (string memory) {\\n    bool isGold = sexyVIP.isGold(tokenId);\\n    string memory name = sexyVIP.memberName(tokenId);\\n    uint256 creditBalance = sexyVIP.creditBalance(tokenId);\\n\\n    return string.concat(\\n      \\u0027[{\\\"trait_type\\\": \\\"Member Name\\\", \\\"value\\\": \\\"\\u0027, name,\\u0027\\\"},{\\\"trait_type\\\": \\\"SexyCredits\\\", \\\"value\\\": \\\"\\u0027, creditBalance.toString(),\\u0027\\\"},{\\\"trait_type\\\": \\\"VIP Gold\\\", \\\"value\\\": \\\"\\u0027, isGold ? \\u0027true\\u0027 : \\u0027false\\u0027,\\u0027\\\"}]\\u0027\\n    );\\n  }\\n\\n  function rawSVG(uint256 tokenId) public view returns (bytes memory) {\\n    bool isGold = sexyVIP.isGold(tokenId);\\n    string memory name = sexyVIP.memberName(tokenId);\\n    uint256 creditBalance = sexyVIP.creditBalance(tokenId);\\n\\n    bytes memory str = abi.encodePacked(\\n      \\u0027\\u003csvg viewBox=\\\"0 0 850 525\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"\\u003e\\u003cdefs\\u003e\\u003clinearGradient id=\\\"Gradient1\\\" x1=\\\"0.8\\\" x2=\\\"0\\\" y1=\\\"-0.25\\\" y2=\\\"1.15\\\"\\u003e\\u003cstop stop-color=\\\"#ff00c7\\\" offset=\\\"0%\\\"\\u003e\\u003c/stop\\u003e\\u003cstop stop-color=\\\"#120211\\\" offset=\\\"20%\\\"\\u003e\\u003c/stop\\u003e\\u003cstop stop-color=\\\"#120211\\\" offset=\\\"58%\\\"\\u003e\\u003c/stop\\u003e\\u003cstop stop-color=\\\"#ff00c7\\\" offset=\\\"100%\\\"\\u003e\\u003c/stop\\u003e\\u003c/linearGradient\\u003e\\u003cfilter id=\\\"insetShadow\\\"\\u003e\\u003cfeOffset dx=\\\"0\\\" dy=\\\"0\\\"/\\u003e\\u003cfeGaussianBlur stdDeviation=\\\"10\\\" result=\\\"offset-blur\\\"/\\u003e\\u003cfeComposite operator=\\\"out\\\" in=\\\"SourceGraphic\\\" in2=\\\"offset-blur\\\" result=\\\"inverse\\\"/\\u003e\\u003cfeFlood flood-color=\\\"#888\\\" flood-opacity=\\\".95\\\" result=\\\"color\\\"/\\u003e\\u003cfeComposite operator=\\\"in\\\" in=\\\"color\\\" in2=\\\"inverse\\\" result=\\\"shadow\\\"/\\u003e\\u003cfeComposite operator=\\\"over\\\" in=\\\"shadow\\\" in2=\\\"SourceGraphic\\\"/\\u003e\\u003c/filter\\u003e\\u003c/defs\\u003e\\u003cstyle\\u003etext{fill:#\\u0027,\\n      isGold ? \\u0027f3ba00\\u0027 : \\u0027fff8ff;\\u0027,\\n      \\u0027;font-family:monospace;font-size: 35px;filter:drop-shadow(1px 1px 0px #ff00c7) drop-shadow(2px 2px 0px #120211)}.t{font-family:cursive;font-size:95px;dominant-baseline:middle;text-anchor:middle;filter:drop-shadow(4px 4px 1px #120211) drop-shadow(3px 3px 6px #ff00c7)}\\u003c/style\\u003e\\u003crect x=\\\"2\\\" y=\\\"2\\\" width=\\\"846\\\" height=\\\"521\\\" fill=\\\"url(#Gradient1)\\\" stroke=\\\"#524552\\\" stroke-width=\\\"4\\\" stroke-location=\\\"outside\\\" rx=\\\"15\\\" filter=\\\"url(#insetShadow)\\\"\\u003e\\u003c/rect\\u003e\\u003ctext x=\\\"50%\\\" y=\\\"26%\\\" class=\\\"t\\\" style=\\\"font-size:90px\\\"\\u003e\\u0027,\\n      unicode\\u0027\ud83d\udc8b\\u0027,\\n      \\u0027 FINSEXY V.I.P.\\u003c/text\\u003e\\u003ctext x=\\\"50%\\\" y=\\\"41%\\\" class=\\\"t\\\" style=\\\"font-size:50px\\\"\\u003eVery Important Paypig\\u003c/text\\u003e\\u0027\\n    );\\n\\n    str = abi.encodePacked(\\n      str,\\n      \\u0027\\u003ctext x=\\\"7%\\\" y=\\\"78%\\\"\\u003e\\u0027, name, \\u0027\\u003c/text\\u003e\\u0027,\\n      \\u0027\\u003ctext x=\\\"7%\\\" y=\\\"88%\\\"\\u003eSexyCredits: \\u0027, creditBalance.toString(), \\u0027\\u003c/text\\u003e\\u0027\\n    );\\n\\n    string memory tokenString;\\n    if (tokenId \\u003c 10) tokenString = string.concat(\\u002700\\u0027, tokenId.toString());\\n    else if (tokenId \\u003c 100) tokenString = string.concat(\\u00270\\u0027, tokenId.toString());\\n    else tokenString = tokenId.toString();\\n\\n    str = abi.encodePacked(str, \\u0027\\u003ctext x=\\\"73%\\\" y=\\\"88%\\\"\\u003eID: \\u0027, tokenString, \\u0027\\u003c/text\\u003e\\u0027);\\n\\n\\n    if (isGold) {\\n      str = abi.encodePacked(\\n        str,\\n        \\u0027\\u003ctext x=\\\"85%\\\" y=\\\"78%\\\" stroke=\\\"#f3ba00\\\" stroke-width=\\\"9\\\" style=\\\"filter: drop-shadow(0 0 20px #888) drop-shadow(0 0 15px #f3ba00)\\\"\\u003e\\u0027,\\n        unicode\\u0027\u2b51\\u0027,\\n        \\u0027\\u003c/text\\u003e\\u0027\\n      );\\n    }\\n\\n    return abi.encodePacked(str, \\u0027\\u003c/svg\\u003e\\u0027);\\n  }\\n\\n}\"}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"p\",\"type\":\"uint256\"}],\"name\":\"applyPremium\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"premium\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newBaseURI\",\"type\":\"address\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVIP\",\"type\":\"address\"}],\"name\":\"setVIP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vip\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SexyRouter", "CompilerVersion": "v0.8.23+commit.f704f362", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://3f7f991f885e581db15eb99e964971ed7fa32d9da0b54ff7a8322fbda78feb4d"}