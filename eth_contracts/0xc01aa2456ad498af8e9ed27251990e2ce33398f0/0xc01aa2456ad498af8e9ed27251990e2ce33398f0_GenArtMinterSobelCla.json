{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(\\n        uint256 tokenId,\\n        uint256 salePrice\\n    ) external view returns (address receiver, uint256 royaltyAmount);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/extensions/IERC721MetadataUpgradeable.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721EnumerableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721EnumerableUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/extensions/IERC721MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Upgradeable.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721MetadataUpgradeable is IERC721Upgradeable {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/proxy/Clones.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/access/GenArtAccess.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @dev This implements access control for owner and admins\\n */\\nabstract contract GenArtAccess is Ownable {\\n    mapping(address => bool) public admins;\\n    address public genartAdmin;\\n\\n    constructor() Ownable() {\\n        genartAdmin = _msgSender();\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyAdmin() {\\n        address sender = _msgSender();\\n        require(\\n            owner() == sender || admins[sender],\\n            \\\"GenArtAccess: caller is not the owner nor admin\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the GEN.ART admin.\\n     */\\n    modifier onlyGenArtAdmin() {\\n        address sender = _msgSender();\\n        require(\\n            genartAdmin == sender,\\n            \\\"GenArtAccess: caller is not genart admin\\\"\\n        );\\n        _;\\n    }\\n\\n    function setGenArtAdmin(address admin) public onlyGenArtAdmin {\\n        genartAdmin = admin;\\n    }\\n\\n    function setAdminAccess(address admin, bool access) public onlyGenArtAdmin {\\n        admins[admin] = access;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/app/GenArtCurated.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../access/GenArtAccess.sol\\\";\\nimport \\\"../storage/GenArtStorage.sol\\\";\\nimport \\\"../interface/IGenArtERC721.sol\\\";\\nimport \\\"../interface/IGenArtMinter.sol\\\";\\nimport \\\"../factory/GenArtCollectionFactory.sol\\\";\\nimport \\\"../factory/GenArtPaymentSplitterFactory.sol\\\";\\n\\n/**\\n * @dev GEN.ART Curated\\n * Admin of {GenArtCollectionFactory} and {GenArtPaymentSplitterFactory}\\n */\\n\\nstruct CreateCollectionParams {\\n    address artist;\\n    string name;\\n    string symbol;\\n    string script;\\n    uint8 collectionType;\\n    uint256 maxSupply;\\n    uint8 erc721Index;\\n    uint8 pricingMode;\\n    bytes pricingData;\\n    uint8 paymentSplitterIndex;\\n    address[] payeesMint;\\n    address[] payeesRoyalties;\\n    uint256[] sharesMint;\\n    uint256[] sharesRoyalties;\\n}\\nstruct PricingParams {\\n    uint8 mode;\\n    bytes data;\\n}\\n\\nstruct CollectionInfo {\\n    string name;\\n    string symbol;\\n    address minter;\\n    Collection collection;\\n    Artist artist;\\n}\\n\\ncontract GenArtCurated is GenArtAccess {\\n    address public collectionFactory;\\n    address public paymentSplitterFactory;\\n    GenArtStorage public store;\\n    mapping(uint8 => address) public minters;\\n\\n    event ScriptUpdated(address collection, string script);\\n\\n    constructor(\\n        address collectionFactory_,\\n        address paymentSplitterFactory_,\\n        address store_\\n    ) {\\n        collectionFactory = collectionFactory_;\\n        paymentSplitterFactory = paymentSplitterFactory_;\\n        store = GenArtStorage(payable(store_));\\n    }\\n\\n    /**\\n     * @dev Internal functtion to close the ERC721 implementation contract\\n     */\\n    function _cloneCollection(CollectionParams memory params)\\n        internal\\n        returns (address instance, uint256 id)\\n    {\\n        return\\n            GenArtCollectionFactory(collectionFactory).cloneCollectionContract(\\n                params\\n            );\\n    }\\n\\n    /**\\n     * @dev Internal functtion to create the collection and risgister to minter\\n     */\\n    function _createCollection(CollectionParams memory params)\\n        internal\\n        returns (address instance, uint256 id)\\n    {\\n        (instance, id) = _cloneCollection(params);\\n        store.setCollection(\\n            Collection(\\n                id,\\n                params.artist,\\n                instance,\\n                params.maxSupply,\\n                params.script,\\n                params.paymentSplitter\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Clones an ERC721 implementation contract\\n     * @param params params\\n     * @dev artist address of artist\\n     * @dev name name of collection\\n     * @dev symbol ERC721 symbol for collection\\n     * @dev script single html as string\\n     * @dev maxSupply max token supply\\n     * @dev erc721Index ERC721 implementation index\\n     * @dev pricingMode minter index\\n     * @dev pricingData calldata for `setPricing` function\\n     * @dev payeesMint address list of payees of mint proceeds\\n     * @dev payeesRoyalties address list of payees of royalties\\n     * @dev sharesMint list of shares for mint proceeds\\n     * @dev sharesRoyalties list of shares for royalties\\n     * Note payee and shares indices must be in respective order\\n     */\\n    function createCollection(CreateCollectionParams calldata params)\\n        external\\n        onlyAdmin\\n    {\\n        address artistAddress = params.artist;\\n        address minter = minters[params.pricingMode];\\n        _createArtist(artistAddress);\\n        address paymentSplitter = GenArtPaymentSplitterFactory(\\n            paymentSplitterFactory\\n        ).clone(\\n                genartAdmin,\\n                artistAddress,\\n                params.paymentSplitterIndex,\\n                params.payeesMint,\\n                params.payeesRoyalties,\\n                params.sharesMint,\\n                params.sharesRoyalties\\n            );\\n        address instance = GenArtCollectionFactory(collectionFactory)\\n            .predictDeterministicAddress(params.erc721Index);\\n        uint256 price = IGenArtMinter(minter).setPricing(\\n            instance,\\n            params.pricingData\\n        );\\n        _createCollection(\\n            CollectionParams(\\n                artistAddress,\\n                params.name,\\n                params.symbol,\\n                price,\\n                params.script,\\n                params.collectionType,\\n                params.maxSupply,\\n                params.erc721Index,\\n                minter,\\n                paymentSplitter\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @dev Internal helper method to create artist\\n     * @param artist address of artist\\n     */\\n    function _createArtist(address artist) internal {\\n        if (store.getArtist(artist).wallet != address(0)) return;\\n        address[] memory collections_;\\n        store.setArtist(Artist(artist, collections_));\\n    }\\n\\n    /**\\n     * @dev Set the {GenArtCollectionFactory} contract address\\n     */\\n    function setCollectionFactory(address factory) external onlyAdmin {\\n        collectionFactory = factory;\\n    }\\n\\n    /**\\n     * @dev Set the {GenArtPaymentSplitterFactory} contract address\\n     */\\n    function setPaymentSplitterFactory(address factory) external onlyAdmin {\\n        paymentSplitterFactory = factory;\\n    }\\n\\n    /**\\n     * @dev Add a minter contract and map by index\\n     */\\n    function addMinter(uint8 index, address minter) external onlyAdmin {\\n        minters[index] = minter;\\n    }\\n\\n    /**\\n     * @dev Get collection info\\n     * @param collection contract address of the collection\\n     */\\n    function getCollectionInfo(address collection)\\n        external\\n        view\\n        returns (CollectionInfo memory info)\\n    {\\n        (\\n            string memory name,\\n            string memory symbol,\\n            address artist,\\n            address minter,\\n            ,\\n            ,\\n\\n        ) = IGenArtERC721(collection).getInfo();\\n        Artist memory artist_ = store.getArtist(artist);\\n\\n        info = CollectionInfo(\\n            name,\\n            symbol,\\n            minter,\\n            store.getCollection(collection),\\n            artist_\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/factory/GenArtCollectionFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../access/GenArtAccess.sol\\\";\\nimport \\\"../interface/IGenArtMinter.sol\\\";\\n\\n/**\\n * GenArt ERC721 contract factory\\n */\\n\\nstruct CollectionParams {\\n    address artist;\\n    string name;\\n    string symbol;\\n    uint256 price;\\n    string script;\\n    uint8 collectionType;\\n    uint256 maxSupply;\\n    uint8 erc721Index;\\n    address minter;\\n    address paymentSplitter;\\n}\\nstruct CollectionType {\\n    string name;\\n    uint256 prefix;\\n    uint256 lastId;\\n}\\nstruct CollectionCreatedEvent {\\n    uint256 id;\\n    address contractAddress;\\n    uint8 collectionType;\\n    address artist;\\n    string name;\\n    string symbol;\\n    uint256 price;\\n    string script;\\n    uint256 maxSupply;\\n    address minter;\\n    address implementation;\\n    address paymentSplitter;\\n}\\n\\ncontract GenArtCollectionFactory is GenArtAccess {\\n    mapping(uint8 => address) public erc721Implementations;\\n    mapping(uint8 => CollectionType) public collectionTypes;\\n    string public uri;\\n\\n    event Created(CollectionCreatedEvent collection);\\n\\n    constructor(string memory uri_) GenArtAccess() {\\n        uri = uri_;\\n        collectionTypes[0] = CollectionType(\\\"js\\\", 30003, 0);\\n    }\\n\\n    /**\\n     * @dev Get next collection id\\n     */\\n    function _getNextCollectionId(uint8 collectioType)\\n        internal\\n        returns (uint256)\\n    {\\n        CollectionType memory obj = collectionTypes[collectioType];\\n        uint256 id = obj.prefix + obj.lastId + 1;\\n        collectionTypes[collectioType].lastId += 1;\\n        return id;\\n    }\\n\\n    /**\\n     * @dev Create initializer for clone\\n     * Note The method signature is created on chain to prevent malicious initialization args\\n     */\\n    function _createInitializer(\\n        uint256 id,\\n        address artist,\\n        string memory name,\\n        string memory symbol,\\n        uint256 maxSupply,\\n        address minter,\\n        address paymentSplitter\\n    ) internal view returns (bytes memory) {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"initialize(string,string,string,uint256,uint256,address,address,address,address)\\\",\\n                name,\\n                symbol,\\n                uri,\\n                id,\\n                maxSupply,\\n                genartAdmin,\\n                artist,\\n                minter,\\n                paymentSplitter\\n            );\\n    }\\n\\n    /**\\n     * @dev Cone an implementation contract\\n     */\\n    function cloneCollectionContract(CollectionParams memory params)\\n        external\\n        onlyAdmin\\n        returns (address, uint256)\\n    {\\n        address implementation = erc721Implementations[params.erc721Index];\\n        require(implementation != address(0), \\\"invalid erc721Index\\\");\\n        uint256 id = _getNextCollectionId(params.collectionType);\\n        bytes memory initializer = _createInitializer(\\n            id,\\n            params.artist,\\n            params.name,\\n            params.symbol,\\n            params.maxSupply,\\n            params.minter,\\n            params.paymentSplitter\\n        );\\n        address instance = Clones.cloneDeterministic(\\n            implementation,\\n            bytes32(block.number)\\n        );\\n        Address.functionCall(instance, initializer);\\n        emit Created(\\n            CollectionCreatedEvent(\\n                id,\\n                instance,\\n                params.collectionType,\\n                params.artist,\\n                params.name,\\n                params.symbol,\\n                params.price,\\n                params.script,\\n                params.maxSupply,\\n                params.minter,\\n                implementation,\\n                params.paymentSplitter\\n            )\\n        );\\n        return (instance, id);\\n    }\\n\\n    /**\\n     * @dev Add an ERC721 implementation contract and map by index\\n     */\\n    function addErc721Implementation(uint8 index, address implementation)\\n        external\\n        onlyAdmin\\n    {\\n        erc721Implementations[index] = implementation;\\n    }\\n\\n    /**\\n     * @dev Add a collectionType and map by index\\n     */\\n    function addCollectionType(\\n        uint8 index,\\n        string memory name,\\n        uint256 prefix,\\n        uint256 lastId\\n    ) external onlyAdmin {\\n        collectionTypes[index] = CollectionType(name, prefix, lastId);\\n    }\\n\\n    /**\\n     * @dev Sets the base tokenURI for collections\\n     */\\n    function setUri(string memory uri_) external onlyAdmin {\\n        uri = uri_;\\n    }\\n\\n    /**\\n     * @dev Predict contract address for new collection\\n     */\\n    function predictDeterministicAddress(uint8 erc721Index)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return\\n            Clones.predictDeterministicAddress(\\n                erc721Implementations[erc721Index],\\n                bytes32(block.number),\\n                address(this)\\n            );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/factory/GenArtPaymentSplitterFactory.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../access/GenArtAccess.sol\\\";\\n\\n/**\\n * GEN.ART {GenArtPaymentSplitter} contract factory\\n */\\n\\ncontract GenArtPaymentSplitterFactory is GenArtAccess {\\n    struct Payment {\\n        address[] payees;\\n        uint256[] shares;\\n    }\\n    mapping(uint8 => address) public implementations;\\n\\n    event Created(\\n        address contractAddress,\\n        address artist,\\n        address[] payeesMint,\\n        address[] payeesRoyalties,\\n        uint256[] sharesMint,\\n        uint256[] sharesRoyalties\\n    );\\n\\n    constructor(address implementation_) GenArtAccess() {\\n        implementations[0] = implementation_;\\n    }\\n\\n    /**\\n     * @dev Intenal helper method to create initializer\\n     */\\n    function _createInitializer(\\n        address owner,\\n        address[] memory payeesMint,\\n        address[] memory payeesRoyalties,\\n        uint256[] memory sharesMint,\\n        uint256[] memory sharesRoyalties\\n    ) internal pure returns (bytes memory) {\\n        return\\n            abi.encodeWithSignature(\\n                \\\"initialize(address,address[],address[],uint256[],uint256[])\\\",\\n                owner,\\n                payeesMint,\\n                payeesRoyalties,\\n                sharesMint,\\n                sharesRoyalties\\n            );\\n    }\\n\\n    /**\\n     * @dev Cone a {PaymentSplitter} implementation contract\\n     */\\n    function clone(\\n        address owner,\\n        address artist,\\n        uint8 implementation,\\n        address[] memory payeesMint,\\n        address[] memory payeesRoyalties,\\n        uint256[] memory sharesMint,\\n        uint256[] memory sharesRoyalties\\n    ) external onlyAdmin returns (address) {\\n        bytes memory initializer = _createInitializer(\\n            owner,\\n            payeesMint,\\n            payeesRoyalties,\\n            sharesMint,\\n            sharesRoyalties\\n        );\\n        address instance = Clones.clone(implementations[implementation]);\\n        Address.functionCall(instance, initializer);\\n        emit Created(\\n            instance,\\n            artist,\\n            payeesMint,\\n            payeesRoyalties,\\n            sharesMint,\\n            sharesRoyalties\\n        );\\n        return instance;\\n    }\\n\\n    /**\\n     * @dev Set the {GenArtPaymentSplitter} implementation\\n     */\\n    function setImplementation(uint8 index, address implementation_)\\n        external\\n        onlyAdmin\\n    {\\n        implementations[index] = implementation_;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGenArtERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC2981Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721EnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/interfaces/IERC721MetadataUpgradeable.sol\\\";\\n\\ninterface IGenArtERC721 is\\n    IERC721MetadataUpgradeable,\\n    IERC2981Upgradeable,\\n    IERC721EnumerableUpgradeable\\n{\\n    function initialize(\\n        string memory name,\\n        string memory symbol,\\n        string memory uri,\\n        uint256 id,\\n        uint256 maxSupply,\\n        address admin,\\n        address artist,\\n        address minter,\\n        address paymentSplitter\\n    ) external;\\n\\n    function getTokensByOwner(address _owner)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function getInfo()\\n        external\\n        view\\n        returns (\\n            string memory,\\n            string memory,\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function mint(address to, uint256 membershipId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGenArtInterfaceV4.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtInterfaceV4 {\\n    function isGoldToken(uint256 _membershipId) external view returns (bool);\\n\\n    function getMembershipsOf(address account)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    function ownerOfMembership(uint256 _membershipId)\\n        external\\n        view\\n        returns (address, bool);\\n\\n    function isVaulted(uint256 _membershipId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGenArtMintAllocator.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtMintAllocator {\\n    function init(address collection, uint8[3] memory mintAlloc) external;\\n\\n    function update(\\n        address collection,\\n        uint256 membershipId,\\n        uint256 amount\\n    ) external;\\n\\n    function getAvailableMintsForAccount(address collection, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAvailableMintsForMembership(\\n        address collection,\\n        uint256 membershipId\\n    ) external view returns (uint256);\\n\\n    function getMembershipMints(address collection, uint256 membershipId)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGenArtMinter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtMinter {\\n    function mintOne(address collection, uint256 membershipId) external payable;\\n\\n    function mint(address collection, uint256 amount) external payable;\\n\\n    function getPrice(address collection) external view returns (uint256);\\n\\n    function setPricing(address collection, bytes memory data)\\n        external\\n        returns (uint256);\\n\\n    function getAvailableMintsForAccount(address collection, address account)\\n        external\\n        view\\n        returns (uint256);\\n\\n    function getAvailableMintsForMembership(\\n        address collection,\\n        uint256 membershipId\\n    ) external view returns (uint256);\\n\\n    function getMembershipMints(address collection, uint256 membershipId)\\n        external\\n        view\\n        returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interface/IGenArtPaymentSplitterV5.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\ninterface IGenArtPaymentSplitterV5 {\\n    function splitPayment(uint256 mintValue) external payable;\\n\\n    function getTotalShares(uint8 _payment) external view returns (uint256);\\n\\n    function release(address account) external;\\n\\n    function updatePayee(\\n        uint8 paymentType,\\n        uint256 payeeIndex,\\n        address newPayee\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/minter/GenArtMinterBase.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../access/GenArtAccess.sol\\\";\\nimport \\\"../interface/IGenArtMinter.sol\\\";\\nimport \\\"../interface/IGenArtMintAllocator.sol\\\";\\n\\n/**\\n * @dev GEN.ART Default Minter\\n * Admin for collections deployed on {GenArtCurated}\\n */\\n\\nabstract contract GenArtMinterBase is GenArtAccess, IGenArtMinter {\\n    struct MintParams {\\n        uint256 startTime;\\n        address mintAllocContract;\\n    }\\n    address public genArtCurated;\\n    address public genartInterface;\\n    mapping(address => MintParams) public mintParams;\\n\\n    constructor(address genartInterface_, address genartCurated_)\\n        GenArtAccess()\\n    {\\n        genartInterface = genartInterface_;\\n        genArtCurated = genartCurated_;\\n    }\\n\\n    /**\\n     * @dev Set pricing for collection\\n     * @param collection contract address of the collection\\n     * @param startTime start time for minting\\n     * @param mintAllocContract contract address of {GenArtMintAllocator}\\n     */\\n    function _setMintParams(\\n        address collection,\\n        uint256 startTime,\\n        address mintAllocContract\\n    ) internal {\\n        require(\\n            mintParams[collection].startTime == 0,\\n            \\\"pricing already exists for collection\\\"\\n        );\\n        require(\\n            mintParams[collection].startTime < block.timestamp,\\n            \\\"mint already started for collection\\\"\\n        );\\n        require(startTime > block.timestamp, \\\"startTime too early\\\");\\n\\n        mintParams[collection] = MintParams(startTime, mintAllocContract);\\n    }\\n\\n    /**\\n     * @dev Set the {GenArtInferface} contract address\\n     */\\n    function setInterface(address genartInterface_) external onlyAdmin {\\n        genartInterface = genartInterface_;\\n    }\\n\\n    /**\\n     * @dev Set the {GenArtCurated} contract address\\n     */\\n    function setCurated(address genartCurated_) external onlyAdmin {\\n        genArtCurated = genartCurated_;\\n    }\\n\\n    /**\\n     * @dev Get all available mints for account\\n     * @param collection contract address of the collection\\n     * @param account address of account\\n     */\\n    function getAvailableMintsForAccount(address collection, address account)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            IGenArtMintAllocator(mintParams[collection].mintAllocContract)\\n                .getAvailableMintsForAccount(collection, account);\\n    }\\n\\n    /**\\n     * @dev Get available mints for a GEN.ART membership\\n     * @param collection contract address of the collection\\n     * @param membershipId owned GEN.ART membershipId\\n     */\\n    function getAvailableMintsForMembership(\\n        address collection,\\n        uint256 membershipId\\n    ) external view virtual override returns (uint256) {\\n        return\\n            IGenArtMintAllocator(mintParams[collection].mintAllocContract)\\n                .getAvailableMintsForMembership(collection, membershipId);\\n    }\\n\\n    /**\\n     * @dev Get amount of minted tokens for a GEN.ART membership\\n     * @param collection contract address of the collection\\n     * @param membershipId owned GEN.ART membershipId\\n     */\\n    function getMembershipMints(address collection, uint256 membershipId)\\n        external\\n        view\\n        virtual\\n        override\\n        returns (uint256)\\n    {\\n        return\\n            IGenArtMintAllocator(mintParams[collection].mintAllocContract)\\n                .getMembershipMints(collection, membershipId);\\n    }\\n\\n    /**\\n     * @dev Get collection {MintParams} object\\n     * @param collection contract address of the collection\\n     */\\n    function getMintParams(address collection)\\n        external\\n        view\\n        returns (MintParams memory)\\n    {\\n        return mintParams[collection];\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/minter/GenArtMinterSobelClaim.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport {GenArtAccess} from \\\"../access/GenArtAccess.sol\\\";\\nimport {GenArtCurated} from \\\"../app/GenArtCurated.sol\\\";\\nimport {IGenArtMintAllocator} from \\\"../interface/IGenArtMintAllocator.sol\\\";\\nimport {IGenArtInterfaceV4} from \\\"../interface/IGenArtInterfaceV4.sol\\\";\\nimport {IGenArtERC721} from \\\"../interface/IGenArtERC721.sol\\\";\\nimport {IGenArtPaymentSplitterV5} from \\\"../interface/IGenArtPaymentSplitterV5.sol\\\";\\nimport {GenArtMinterBase} from \\\"./GenArtMinterBase.sol\\\";\\n\\ncontract GenArtMinterSobelClaim is GenArtMinterBase {\\n    uint256 public startTime;\\n    address public mintAllocContract;\\n    address public sobelContract;\\n    uint256 public maxSobelId;\\n\\n    mapping(uint256 => bool) public mintedIds;\\n\\n    constructor(\\n        address genartInterface_,\\n        address genartCurated_,\\n        address sobelContract_,\\n        address mintAllocContract_,\\n        uint256 startTime_,\\n        uint256 maxSobelId_\\n    ) GenArtMinterBase(genartInterface_, genartCurated_) {\\n        startTime = startTime_;\\n        mintAllocContract = mintAllocContract_;\\n        sobelContract = sobelContract_;\\n        maxSobelId = maxSobelId_;\\n    }\\n\\n    function getPrice(address) public view virtual override returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev Helper function to check for mint price and start date\\n     */\\n    function _checkMint(uint256 amount) internal view {\\n        (, , , , , uint256 maxSupply, uint256 totalSupply) = IGenArtERC721(\\n            sobelContract\\n        ).getInfo();\\n        require(\\n            totalSupply + amount <= maxSupply,\\n            \\\"not enough mints available\\\"\\n        );\\n        require(startTime <= block.timestamp, \\\"mint not started yet\\\");\\n    }\\n\\n    /**\\n     * @dev Mint a token\\n     */\\n    function mintOne(address, uint256) external payable override {\\n        revert(\\\"not implemented\\\");\\n    }\\n\\n    /**\\n     * @dev Mint many tokens\\n     */\\n    function mint(address, uint256) external payable override {\\n        revert(\\\"not implemented\\\");\\n    }\\n\\n    /**\\n     * @dev Claim\\n     */\\n    function claim(uint256 amount) external {\\n        _checkMint(amount);\\n        address sender = msg.sender;\\n        uint256[] memory tokens = IGenArtERC721(sobelContract).getTokensByOwner(\\n            sender\\n        );\\n        uint256 minted;\\n        uint256 i;\\n        while (minted < amount && i < tokens.length) {\\n            uint256 token = tokens[i];\\n            if (!mintedIds[token] && token <= maxSobelId) {\\n                IGenArtERC721(sobelContract).mint(sender, 0);\\n                IGenArtMintAllocator(mintAllocContract).update(\\n                    sobelContract,\\n                    0,\\n                    1\\n                );\\n                minted++;\\n                mintedIds[token] = true;\\n            }\\n            i++;\\n        }\\n        require(minted > 0, \\\"no mints available\\\");\\n    }\\n\\n    function setPricing(\\n        address,\\n        bytes memory\\n    ) external pure override returns (uint256) {\\n        revert(\\\"not implemented\\\");\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/storage/GenArtStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../access/GenArtAccess.sol\\\";\\n\\nstruct Collection {\\n    uint256 id;\\n    address artist;\\n    address contractAddress;\\n    uint256 maxSupply;\\n    string script;\\n    address paymentSplitter;\\n}\\n\\nstruct Artist {\\n    address wallet;\\n    address[] collections;\\n}\\n\\ncontract GenArtStorage is GenArtAccess {\\n    mapping(address => Collection) public collections;\\n    mapping(address => Artist) public artists;\\n\\n    event ScriptUpdated(address collection, string script);\\n\\n    /**\\n     * @dev Helper function to get {PaymentSplitter} of artist\\n     */\\n    function getPaymentSplitterForCollection(address collection)\\n        external\\n        view\\n        returns (address)\\n    {\\n        return collections[collection].paymentSplitter;\\n    }\\n\\n    /**\\n     * @dev Update script of collection\\n     * @param collection contract address of the collection\\n     * @param script single html as string\\n     */\\n    function updateScript(address collection, string memory script) external {\\n        address sender = _msgSender();\\n        require(\\n            collections[collection].artist == sender ||\\n                admins[sender] ||\\n                owner() == sender,\\n            \\\"not allowed\\\"\\n        );\\n        collections[collection].script = script;\\n        emit ScriptUpdated(collection, script);\\n    }\\n\\n    /**\\n     * @dev set collection\\n     * @param collection contract object\\n     */\\n    function setCollection(Collection calldata collection) external onlyAdmin {\\n        collections[collection.contractAddress] = collection;\\n        artists[collection.artist].collections.push(collection.contractAddress);\\n    }\\n\\n    /**\\n     * @dev set collection\\n     * @param artist artist object\\n     */\\n    function setArtist(Artist calldata artist) external onlyAdmin {\\n        artists[artist.wallet] = artist;\\n    }\\n\\n    /**\\n     * @dev Get artist struct\\n     * @param artist adress of artist\\n     */\\n    function getArtist(address artist) external view returns (Artist memory) {\\n        return artists[artist];\\n    }\\n\\n    /**\\n     * @dev Get collection struct\\n     * @param collection collection address\\n     */\\n    function getCollection(address collection)\\n        external\\n        view\\n        returns (Collection memory)\\n    {\\n        return collections[collection];\\n    }\\n\\n    /**\\n     * @dev Update payment splitter for collection\\n     * @param paymentSplitter address of new payment splitter\\n     */\\n    function setPaymentSplitter(address collection, address paymentSplitter)\\n        external\\n        onlyAdmin\\n    {\\n        collections[collection].paymentSplitter = paymentSplitter;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genartInterface_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"genartCurated_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sobelContract_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"mintAllocContract_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSobelId_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"admins\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genArtCurated\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genartAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"genartInterface\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAvailableMintsForAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"getAvailableMintsForMembership\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"membershipId\",\"type\":\"uint256\"}],\"name\":\"getMembershipMints\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"}],\"name\":\"getMintParams\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintAllocContract\",\"type\":\"address\"}],\"internalType\":\"struct GenArtMinterBase.MintParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSobelId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintAllocContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintOne\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"mintAllocContract\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintedIds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"access\",\"type\":\"bool\"}],\"name\":\"setAdminAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genartCurated_\",\"type\":\"address\"}],\"name\":\"setCurated\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"}],\"name\":\"setGenArtAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"genartInterface_\",\"type\":\"address\"}],\"name\":\"setInterface\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"setPricing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sobelContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "GenArtMinterSobelClaim", "CompilerVersion": "v0.8.4+commit.c7e474f2", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000006bb38a82e3479f474d2985805b49b04881d8203c0000000000000000000000005cde7e4c35e3b65b146380403412dc2ef206a75d000000000000000000000000603efd5b941022ad759e9b8eb40b890062746b4600000000000000000000000024c8f3ed129352de8ef6bfc902c8c0c1d3f08d6d0000000000000000000000000000000000000000000000000000000064a81a6000000000000000000000000000000000000000000000000000000000b2d678a9", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}