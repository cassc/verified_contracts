{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/ERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.4;\\r\\n\\r\\n/// @notice Simple ERC20 + EIP-2612 implementation.\\r\\n/// @author Solady (https://github.com/vectorized/solady/blob/main/src/tokens/ERC20.sol)\\r\\n/// @author Modified from Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\r\\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/ERC20.sol)\\r\\n/// Note:\\r\\n/// The ERC20 standard allows minting and transferring to and from the zero address,\\r\\n/// minting and transferring zero tokens, as well as self-approvals.\\r\\n/// For performance, this implementation WILL NOT revert for such actions.\\r\\n/// Please add any checks with overrides if desired.\\r\\nabstract contract ERC20 {\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                       CUSTOM ERRORS                        */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev The total supply has overflowed.\\r\\n    error TotalSupplyOverflow();\\r\\n\\r\\n    /// @dev The allowance has overflowed.\\r\\n    error AllowanceOverflow();\\r\\n\\r\\n    /// @dev The allowance has underflowed.\\r\\n    error AllowanceUnderflow();\\r\\n\\r\\n    /// @dev Insufficient balance.\\r\\n    error InsufficientBalance();\\r\\n\\r\\n    /// @dev Insufficient allowance.\\r\\n    error InsufficientAllowance();\\r\\n\\r\\n    /// @dev The permit is invalid.\\r\\n    error InvalidPermit();\\r\\n\\r\\n    /// @dev The permit has expired.\\r\\n    error PermitExpired();\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                           EVENTS                           */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Emitted when `amount` tokens is transferred from `from` to `to`.\\r\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\r\\n\\r\\n    /// @dev Emitted when `amount` tokens is approved by `owner` to be used by `spender`.\\r\\n    event Approval(\\r\\n        address indexed owner,\\r\\n        address indexed spender,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// @dev `keccak256(bytes(\\\"Transfer(address,address,uint256)\\\"))`.\\r\\n    uint256 private constant _TRANSFER_EVENT_SIGNATURE =\\r\\n        0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\\r\\n\\r\\n    /// @dev `keccak256(bytes(\\\"Approval(address,address,uint256)\\\"))`.\\r\\n    uint256 private constant _APPROVAL_EVENT_SIGNATURE =\\r\\n        0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                          STORAGE                           */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev The storage slot for the total supply.\\r\\n    uint256 private constant _TOTAL_SUPPLY_SLOT = 0x05345cdf77eb68f44c;\\r\\n\\r\\n    /// @dev The balance slot of `owner` is given by:\\r\\n    /// ```\\r\\n    ///     mstore(0x0c, _BALANCE_SLOT_SEED)\\r\\n    ///     mstore(0x00, owner)\\r\\n    ///     let balanceSlot := keccak256(0x0c, 0x20)\\r\\n    /// ```\\r\\n    uint256 private constant _BALANCE_SLOT_SEED = 0x87a211a2;\\r\\n\\r\\n    /// @dev The allowance slot of (`owner`, `spender`) is given by:\\r\\n    /// ```\\r\\n    ///     mstore(0x20, spender)\\r\\n    ///     mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\r\\n    ///     mstore(0x00, owner)\\r\\n    ///     let allowanceSlot := keccak256(0x0c, 0x34)\\r\\n    /// ```\\r\\n    uint256 private constant _ALLOWANCE_SLOT_SEED = 0x7f5e9f20;\\r\\n\\r\\n    /// @dev The nonce slot of `owner` is given by:\\r\\n    /// ```\\r\\n    ///     mstore(0x0c, _NONCES_SLOT_SEED)\\r\\n    ///     mstore(0x00, owner)\\r\\n    ///     let nonceSlot := keccak256(0x0c, 0x20)\\r\\n    /// ```\\r\\n    uint256 private constant _NONCES_SLOT_SEED = 0x38377508;\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                       ERC20 METADATA                       */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Returns the name of the token.\\r\\n    function name() public view virtual returns (string memory);\\r\\n\\r\\n    /// @dev Returns the symbol of the token.\\r\\n    function symbol() public view virtual returns (string memory);\\r\\n\\r\\n    /// @dev Returns the decimals places of the token.\\r\\n    function decimals() public view virtual returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                           ERC20                            */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Returns the amount of tokens in existence.\\r\\n    function totalSupply() public view virtual returns (uint256 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := sload(_TOTAL_SUPPLY_SLOT)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the amount of tokens owned by `owner`.\\r\\n    function balanceOf(\\r\\n        address owner\\r\\n    ) public view virtual returns (uint256 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\r\\n            mstore(0x00, owner)\\r\\n            result := sload(keccak256(0x0c, 0x20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the amount of tokens that `spender` can spend on behalf of `owner`.\\r\\n    function allowance(\\r\\n        address owner,\\r\\n        address spender\\r\\n    ) public view virtual returns (uint256 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            mstore(0x20, spender)\\r\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\r\\n            mstore(0x00, owner)\\r\\n            result := sload(keccak256(0x0c, 0x34))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n    ///\\r\\n    /// Emits a {Approval} event.\\r\\n    function approve(\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) public virtual returns (bool) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Compute the allowance slot and store the amount.\\r\\n            mstore(0x20, spender)\\r\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\r\\n            mstore(0x00, caller())\\r\\n            sstore(keccak256(0x0c, 0x34), amount)\\r\\n            // Emit the {Approval} event.\\r\\n            mstore(0x00, amount)\\r\\n            log3(\\r\\n                0x00,\\r\\n                0x20,\\r\\n                _APPROVAL_EVENT_SIGNATURE,\\r\\n                caller(),\\r\\n                shr(96, mload(0x2c))\\r\\n            )\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n    ///\\r\\n    /// Emits a {Approval} event.\\r\\n    function increaseAllowance(\\r\\n        address spender,\\r\\n        uint256 difference\\r\\n    ) public virtual returns (bool) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Compute the allowance slot and load its value.\\r\\n            mstore(0x20, spender)\\r\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\r\\n            mstore(0x00, caller())\\r\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\r\\n            let allowanceBefore := sload(allowanceSlot)\\r\\n            // Add to the allowance.\\r\\n            let allowanceAfter := add(allowanceBefore, difference)\\r\\n            // Revert upon overflow.\\r\\n            if lt(allowanceAfter, allowanceBefore) {\\r\\n                mstore(0x00, 0xf9067066) // `AllowanceOverflow()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            // Store the updated allowance.\\r\\n            sstore(allowanceSlot, allowanceAfter)\\r\\n            // Emit the {Approval} event.\\r\\n            mstore(0x00, allowanceAfter)\\r\\n            log3(\\r\\n                0x00,\\r\\n                0x20,\\r\\n                _APPROVAL_EVENT_SIGNATURE,\\r\\n                caller(),\\r\\n                shr(96, mload(0x2c))\\r\\n            )\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n    ///\\r\\n    /// Emits a {Approval} event.\\r\\n    function decreaseAllowance(\\r\\n        address spender,\\r\\n        uint256 difference\\r\\n    ) public virtual returns (bool) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Compute the allowance slot and load its value.\\r\\n            mstore(0x20, spender)\\r\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\r\\n            mstore(0x00, caller())\\r\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\r\\n            let allowanceBefore := sload(allowanceSlot)\\r\\n            // Revert if will underflow.\\r\\n            if lt(allowanceBefore, difference) {\\r\\n                mstore(0x00, 0x8301ab38) // `AllowanceUnderflow()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            // Subtract and store the updated allowance.\\r\\n            let allowanceAfter := sub(allowanceBefore, difference)\\r\\n            sstore(allowanceSlot, allowanceAfter)\\r\\n            // Emit the {Approval} event.\\r\\n            mstore(0x00, allowanceAfter)\\r\\n            log3(\\r\\n                0x00,\\r\\n                0x20,\\r\\n                _APPROVAL_EVENT_SIGNATURE,\\r\\n                caller(),\\r\\n                shr(96, mload(0x2c))\\r\\n            )\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Transfer `amount` tokens from the caller to `to`.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - `from` must at least have `amount`.\\r\\n    ///\\r\\n    /// Emits a {Transfer} event.\\r\\n    function transfer(\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual returns (bool) {\\r\\n        _beforeTokenTransfer(msg.sender, to, amount);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Compute the balance slot and load its value.\\r\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\r\\n            mstore(0x00, caller())\\r\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\r\\n            let fromBalance := sload(fromBalanceSlot)\\r\\n            // Revert if insufficient balance.\\r\\n            if gt(amount, fromBalance) {\\r\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            // Subtract and store the updated balance.\\r\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\r\\n            // Compute the balance slot of `to`.\\r\\n            mstore(0x00, to)\\r\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\r\\n            // Add and store the updated balance of `to`.\\r\\n            // Will not overflow because the sum of all user balances\\r\\n            // cannot exceed the maximum uint256 value.\\r\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\r\\n            // Emit the {Transfer} event.\\r\\n            mstore(0x20, amount)\\r\\n            log3(\\r\\n                0x20,\\r\\n                0x20,\\r\\n                _TRANSFER_EVENT_SIGNATURE,\\r\\n                caller(),\\r\\n                shr(96, mload(0x0c))\\r\\n            )\\r\\n        }\\r\\n        _afterTokenTransfer(msg.sender, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /// @dev Transfers `amount` tokens from `from` to `to`.\\r\\n    ///\\r\\n    /// Note: does not update the allowance if it is the maximum uint256 value.\\r\\n    ///\\r\\n    /// Requirements:\\r\\n    /// - `from` must at least have `amount`.\\r\\n    /// - The caller must have at least `amount` of allowance to transfer the tokens of `from`.\\r\\n    ///\\r\\n    /// Emits a {Transfer} event.\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual returns (bool) {\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let from_ := shl(96, from)\\r\\n            // Compute the allowance slot and load its value.\\r\\n            mstore(0x20, caller())\\r\\n            mstore(0x0c, or(from_, _ALLOWANCE_SLOT_SEED))\\r\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\r\\n            let allowance_ := sload(allowanceSlot)\\r\\n            // If the allowance is not the maximum uint256 value.\\r\\n            if iszero(eq(allowance_, not(0))) {\\r\\n                // Revert if the amount to be transferred exceeds the allowance.\\r\\n                if gt(amount, allowance_) {\\r\\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\\r\\n                    revert(0x1c, 0x04)\\r\\n                }\\r\\n                // Subtract and store the updated allowance.\\r\\n                sstore(allowanceSlot, sub(allowance_, amount))\\r\\n            }\\r\\n            // Compute the balance slot and load its value.\\r\\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\\r\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\r\\n            let fromBalance := sload(fromBalanceSlot)\\r\\n            // Revert if insufficient balance.\\r\\n            if gt(amount, fromBalance) {\\r\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            // Subtract and store the updated balance.\\r\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\r\\n            // Compute the balance slot of `to`.\\r\\n            mstore(0x00, to)\\r\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\r\\n            // Add and store the updated balance of `to`.\\r\\n            // Will not overflow because the sum of all user balances\\r\\n            // cannot exceed the maximum uint256 value.\\r\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\r\\n            // Emit the {Transfer} event.\\r\\n            mstore(0x20, amount)\\r\\n            log3(\\r\\n                0x20,\\r\\n                0x20,\\r\\n                _TRANSFER_EVENT_SIGNATURE,\\r\\n                shr(96, from_),\\r\\n                shr(96, mload(0x0c))\\r\\n            )\\r\\n        }\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                          EIP-2612                          */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Returns the current nonce for `owner`.\\r\\n    /// This value is used to compute the signature for EIP-2612 permit.\\r\\n    function nonces(\\r\\n        address owner\\r\\n    ) public view virtual returns (uint256 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Compute the nonce slot and load its value.\\r\\n            mstore(0x0c, _NONCES_SLOT_SEED)\\r\\n            mstore(0x00, owner)\\r\\n            result := sload(keccak256(0x0c, 0x20))\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sets `value` as the allowance of `spender` over the tokens of `owner`,\\r\\n    /// authorized by a signed approval by `owner`.\\r\\n    ///\\r\\n    /// Emits a {Approval} event.\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) public virtual {\\r\\n        bytes32 domainSeparator = DOMAIN_SEPARATOR();\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Grab the free memory pointer.\\r\\n            let m := mload(0x40)\\r\\n            // Revert if the block timestamp greater than `deadline`.\\r\\n            if gt(timestamp(), deadline) {\\r\\n                mstore(0x00, 0x1a15a3cc) // `PermitExpired()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            // Clean the upper 96 bits.\\r\\n            owner := shr(96, shl(96, owner))\\r\\n            spender := shr(96, shl(96, spender))\\r\\n            // Compute the nonce slot and load its value.\\r\\n            mstore(0x0c, _NONCES_SLOT_SEED)\\r\\n            mstore(0x00, owner)\\r\\n            let nonceSlot := keccak256(0x0c, 0x20)\\r\\n            let nonceValue := sload(nonceSlot)\\r\\n            // Increment and store the updated nonce.\\r\\n            sstore(nonceSlot, add(nonceValue, 1))\\r\\n            // Prepare the inner hash.\\r\\n            // `keccak256(\\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\")`.\\r\\n            // forgefmt: disable-next-item\\r\\n            mstore(\\r\\n                m,\\r\\n                0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9\\r\\n            )\\r\\n            mstore(add(m, 0x20), owner)\\r\\n            mstore(add(m, 0x40), spender)\\r\\n            mstore(add(m, 0x60), value)\\r\\n            mstore(add(m, 0x80), nonceValue)\\r\\n            mstore(add(m, 0xa0), deadline)\\r\\n            // Prepare the outer hash.\\r\\n            mstore(0, 0x1901)\\r\\n            mstore(0x20, domainSeparator)\\r\\n            mstore(0x40, keccak256(m, 0xc0))\\r\\n            // Prepare the ecrecover calldata.\\r\\n            mstore(0, keccak256(0x1e, 0x42))\\r\\n            mstore(0x20, and(0xff, v))\\r\\n            mstore(0x40, r)\\r\\n            mstore(0x60, s)\\r\\n            pop(staticcall(gas(), 1, 0, 0x80, 0x20, 0x20))\\r\\n            // If the ecrecover fails, the returndatasize will be 0x00,\\r\\n            // `owner` will be be checked if it equals the hash at 0x00,\\r\\n            // which evaluates to false (i.e. 0), and we will revert.\\r\\n            // If the ecrecover succeeds, the returndatasize will be 0x20,\\r\\n            // `owner` will be compared against the returned address at 0x20.\\r\\n            if iszero(eq(mload(returndatasize()), owner)) {\\r\\n                mstore(0x00, 0xddafbaef) // `InvalidPermit()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            // Compute the allowance slot and store the value.\\r\\n            // The `owner` is already at slot 0x20.\\r\\n            mstore(0x40, or(shl(160, _ALLOWANCE_SLOT_SEED), spender))\\r\\n            sstore(keccak256(0x2c, 0x34), value)\\r\\n            // Emit the {Approval} event.\\r\\n            log3(add(m, 0x60), 0x20, _APPROVAL_EVENT_SIGNATURE, owner, spender)\\r\\n            mstore(0x40, m) // Restore the free memory pointer.\\r\\n            mstore(0x60, 0) // Restore the zero pointer.\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Returns the EIP-2612 domains separator.\\r\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32 result) {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            result := mload(0x40) // Grab the free memory pointer.\\r\\n        }\\r\\n        //  We simply calculate it on-the-fly to allow for cases where the `name` may change.\\r\\n        bytes32 nameHash = keccak256(bytes(name()));\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let m := result\\r\\n            // `keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")`.\\r\\n            // forgefmt: disable-next-item\\r\\n            mstore(\\r\\n                m,\\r\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f\\r\\n            )\\r\\n            mstore(add(m, 0x20), nameHash)\\r\\n            // `keccak256(\\\"1\\\")`.\\r\\n            // forgefmt: disable-next-item\\r\\n            mstore(\\r\\n                add(m, 0x40),\\r\\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6\\r\\n            )\\r\\n            mstore(add(m, 0x60), chainid())\\r\\n            mstore(add(m, 0x80), address())\\r\\n            result := keccak256(m, 0xa0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                  INTERNAL MINT FUNCTIONS                   */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Mints `amount` tokens to `to`, increasing the total supply.\\r\\n    ///\\r\\n    /// Emits a {Transfer} event.\\r\\n    function _mint(address to, uint256 amount) internal virtual {\\r\\n        _beforeTokenTransfer(address(0), to, amount);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let totalSupplyBefore := sload(_TOTAL_SUPPLY_SLOT)\\r\\n            let totalSupplyAfter := add(totalSupplyBefore, amount)\\r\\n            // Revert if the total supply overflows.\\r\\n            if lt(totalSupplyAfter, totalSupplyBefore) {\\r\\n                mstore(0x00, 0xe5cfe957) // `TotalSupplyOverflow()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            // Store the updated total supply.\\r\\n            sstore(_TOTAL_SUPPLY_SLOT, totalSupplyAfter)\\r\\n            // Compute the balance slot and load its value.\\r\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\r\\n            mstore(0x00, to)\\r\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\r\\n            // Add and store the updated balance.\\r\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\r\\n            // Emit the {Transfer} event.\\r\\n            mstore(0x20, amount)\\r\\n            log3(0x20, 0x20, _TRANSFER_EVENT_SIGNATURE, 0, shr(96, mload(0x0c)))\\r\\n        }\\r\\n        _afterTokenTransfer(address(0), to, amount);\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                  INTERNAL BURN FUNCTIONS                   */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Burns `amount` tokens from `from`, reducing the total supply.\\r\\n    ///\\r\\n    /// Emits a {Transfer} event.\\r\\n    function _burn(address from, uint256 amount) internal virtual {\\r\\n        _beforeTokenTransfer(from, address(0), amount);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Compute the balance slot and load its value.\\r\\n            mstore(0x0c, _BALANCE_SLOT_SEED)\\r\\n            mstore(0x00, from)\\r\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\r\\n            let fromBalance := sload(fromBalanceSlot)\\r\\n            // Revert if insufficient balance.\\r\\n            if gt(amount, fromBalance) {\\r\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            // Subtract and store the updated balance.\\r\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\r\\n            // Subtract and store the updated total supply.\\r\\n            sstore(_TOTAL_SUPPLY_SLOT, sub(sload(_TOTAL_SUPPLY_SLOT), amount))\\r\\n            // Emit the {Transfer} event.\\r\\n            mstore(0x00, amount)\\r\\n            log3(\\r\\n                0x00,\\r\\n                0x20,\\r\\n                _TRANSFER_EVENT_SIGNATURE,\\r\\n                shr(96, shl(96, from)),\\r\\n                0\\r\\n            )\\r\\n        }\\r\\n        _afterTokenTransfer(from, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                INTERNAL TRANSFER FUNCTIONS                 */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Moves `amount` of tokens from `from` to `to`.\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let from_ := shl(96, from)\\r\\n            // Compute the balance slot and load its value.\\r\\n            mstore(0x0c, or(from_, _BALANCE_SLOT_SEED))\\r\\n            let fromBalanceSlot := keccak256(0x0c, 0x20)\\r\\n            let fromBalance := sload(fromBalanceSlot)\\r\\n            // Revert if insufficient balance.\\r\\n            if gt(amount, fromBalance) {\\r\\n                mstore(0x00, 0xf4d678b8) // `InsufficientBalance()`.\\r\\n                revert(0x1c, 0x04)\\r\\n            }\\r\\n            // Subtract and store the updated balance.\\r\\n            sstore(fromBalanceSlot, sub(fromBalance, amount))\\r\\n            // Compute the balance slot of `to`.\\r\\n            mstore(0x00, to)\\r\\n            let toBalanceSlot := keccak256(0x0c, 0x20)\\r\\n            // Add and store the updated balance of `to`.\\r\\n            // Will not overflow because the sum of all user balances\\r\\n            // cannot exceed the maximum uint256 value.\\r\\n            sstore(toBalanceSlot, add(sload(toBalanceSlot), amount))\\r\\n            // Emit the {Transfer} event.\\r\\n            mstore(0x20, amount)\\r\\n            log3(\\r\\n                0x20,\\r\\n                0x20,\\r\\n                _TRANSFER_EVENT_SIGNATURE,\\r\\n                shr(96, from_),\\r\\n                shr(96, mload(0x0c))\\r\\n            )\\r\\n        }\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                INTERNAL ALLOWANCE FUNCTIONS                */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Updates the allowance of `owner` for `spender` based on spent `amount`.\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            // Compute the allowance slot and load its value.\\r\\n            mstore(0x20, spender)\\r\\n            mstore(0x0c, _ALLOWANCE_SLOT_SEED)\\r\\n            mstore(0x00, owner)\\r\\n            let allowanceSlot := keccak256(0x0c, 0x34)\\r\\n            let allowance_ := sload(allowanceSlot)\\r\\n            // If the allowance is not the maximum uint256 value.\\r\\n            if iszero(eq(allowance_, not(0))) {\\r\\n                // Revert if the amount to be transferred exceeds the allowance.\\r\\n                if gt(amount, allowance_) {\\r\\n                    mstore(0x00, 0x13be252b) // `InsufficientAllowance()`.\\r\\n                    revert(0x1c, 0x04)\\r\\n                }\\r\\n                // Subtract and store the updated allowance.\\r\\n                sstore(allowanceSlot, sub(allowance_, amount))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @dev Sets `amount` as the allowance of `spender` over the tokens of `owner`.\\r\\n    ///\\r\\n    /// Emits a {Approval} event.\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        /// @solidity memory-safe-assembly\\r\\n        assembly {\\r\\n            let owner_ := shl(96, owner)\\r\\n            // Compute the allowance slot and store the amount.\\r\\n            mstore(0x20, spender)\\r\\n            mstore(0x0c, or(owner_, _ALLOWANCE_SLOT_SEED))\\r\\n            sstore(keccak256(0x0c, 0x34), amount)\\r\\n            // Emit the {Approval} event.\\r\\n            mstore(0x00, amount)\\r\\n            log3(\\r\\n                0x00,\\r\\n                0x20,\\r\\n                _APPROVAL_EVENT_SIGNATURE,\\r\\n                shr(96, owner_),\\r\\n                shr(96, mload(0x2c))\\r\\n            )\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /*\u00b4:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0\u2022.*\u2022\u00b4.*:\u02da.\u00b0*.\u02da\u2022\u00b4.\u00b0:\u00b0\u2022.\u00b0+.*\u2022\u00b4.*:*/\\r\\n    /*                     HOOKS TO OVERRIDE                      */\\r\\n    /*.\u2022\u00b0:\u00b0.\u00b4+\u02da.*\u00b0.\u02da:*.\u00b4\u2022*.+\u00b0.\u2022\u00b0:\u00b4*.\u00b4\u2022*.\u2022\u00b0.\u2022\u00b0:\u00b0.\u00b4:\u2022\u02da\u00b0.*\u00b0.\u02da:*.\u00b4+\u00b0.\u2022*/\\r\\n\\r\\n    /// @dev Hook that is called before any transfer of tokens.\\r\\n    /// This includes minting and burning.\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /// @dev Hook that is called after any transfer of tokens.\\r\\n    /// This includes minting and burning.\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/Owned.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: AGPL-3.0-only\\r\\npragma solidity >=0.8.0;\\r\\n\\r\\n/// @notice Simple single owner authorization mixin.\\r\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\r\\nabstract contract Owned {\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                                 EVENTS\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                            OWNERSHIP STORAGE\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    modifier onlyOwner() virtual {\\r\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\r\\n\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                               CONSTRUCTOR\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    constructor(address _owner) {\\r\\n        owner = _owner;\\r\\n\\r\\n        emit OwnershipTransferred(address(0), _owner);\\r\\n    }\\r\\n\\r\\n    /*//////////////////////////////////////////////////////////////\\r\\n                             OWNERSHIP LOGIC\\r\\n    //////////////////////////////////////////////////////////////*/\\r\\n\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        owner = newOwner;\\r\\n\\r\\n        emit OwnershipTransferred(msg.sender, newOwner);\\r\\n    }\\r\\n}\\r\\n\"\r\n    },\r\n    \"contracts/sale.sol\": {\r\n      \"content\": \"pragma solidity ^0.8.13;\\r\\n\\r\\nimport \\\"./ERC20.sol\\\";\\r\\nimport \\\"./Owned.sol\\\";\\r\\n\\r\\n\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u281f\u281b\u281b\u2889\u28ed\u284d\u2809\u28cd\u28c9\u28db\u287b\u283f\u28ff\u285f\u28f8\u28fb\u28bb\u28b9\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u2809\u28a1\u28e4\u28ec\u28ff\u2837\u2812\u288b\u28c1\u28c0\u28c9\u28e1\u28c8\u2844\u28c0\u2836\u28a0\u284c\u280d\u2818\u2820\u28bc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u280b\u28a0\u283e\u28ff\u28ff\u2817\u28cb\u28e4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f4\u28eb\u28b0\u2882\u28cb\u2844\u2836\u28e4\u2858\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2887\u2824\u2880\u283f\u28e7\u281f\u28e0\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u28c4\u28db\u28a0\u28c7\u283b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\u285e\u2812\u2844\u28ca\u2835\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28cc\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2803\u28fe\u2804\u281b\u2810\u281f\u2804\u28ff\u287f\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u2888\u2857\u2844\u281b\u2880\u286f\u28e1\u281e\u2863\u285f\u283b\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c6\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28bf\u2847\u280a\u28b0\u2813\u2804\u2801\u28a0\u2854\u2802\u2814\u28bb\u28a7\u28fc\u28bf\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285b\u282f\u2819\u285f\u28a1\u2840\u2810\u2840\u2809\u288b\u284d\u28e0\u2836\u28ec\u2809\u286c\u2804\u28f2\u28fe\u28ff\u287f\u281b\u2869\u28f9\u28ff\u28c9\u28bb\u28db\u283b\u28ff\u28ff\u28f7\u28ec\u28ed\u28ed\u28ed\u28ed\u28db\u283f\u28bf\u28ff\u28ff\u28c6\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2845\u28ef\u2857\u2801\u2804\u280b\u284c\u2803\u28f6\u2846\u28a1\u2818\u28b8\u2808\u2801\u280b\u2809\u28bb\u28ff\u28ff\u28f7\u28ff\u28fe\u28ff\u2809\u2801\u2808\u2809\u2801\u2804\u2809\u28bb\u28ff\u28f7\u28f6\u28f6\u28f6\u28ed\u28ed\u28f6\u28fe\u28ff\u28ff\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u283f\u28db\u28ed\u28f5\u28f6\u28f6\u28f6\u28e6\u28ed\u28c5\u2849\u28d3\u28f2\u2804\u28ad\u2814\u2826\u28e4\u2804\u2894\u283e\u2820\u281e\u2841\u28fe\u28f5\u28fe\u28ff\u28ff\u28ff\u28ff\u2801\u2809\u28f4\u28e4\u28ff\u28f6\u28f6\u28e6\u28c4\u28c0\u2818\u281b\u283f\u28bf\u281f\u288f\u287f\u281b\u283f\u281b\u28cb\u28c5\u2809\u28e9\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u281f\u28e1\u28fe\u28ff\u28ff\u28f7\u28f6\u28f6\u28dd\u28bf\u28ff\u28ef\u28ed\u2842\u2808\u2804\u28e0\u28e5\u28e6\u28e4\u28c0\u2801\u281a\u2834\u2812\u28d2\u28bf\u28fe\u28ff\u28ff\u287f\u28ff\u2809\u28b8\u28f7\u28ff\u28ff\u280f\u2889\u28c0\u28c0\u28c0\u2828\u28ff\u28f6\u28e4\u28c4\u28b0\u28f7\u2845\u2824\u2852\u280d\u282d\u28ff\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u288b\u28fe\u28ff\u285f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284e\u28ff\u28ff\u28ff\u28ff\u2886\u28fe\u281f\u28cb\u28c9\u281b\u283b\u28e7\u28e4\u2804\u2815\u28f9\u28ff\u28ff\u28fe\u28ff\u287f\u28f6\u283f\u286e\u282d\u2809\u28a1\u28b0\u283f\u2801\u2808\u2819\u2837\u280c\u28ff\u28ff\u285f\u28ff\u28ff\u28ff\u2844\u283e\u28b9\u28bf\u28ee\u28a0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28a3\u28ff\u28ff\u287f\u28f8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2858\u28ff\u28ff\u28ff\u28b8\u28ef\u28ba\u289f\u285b\u281b\u2887\u2858\u28ff\u2804\u28ba\u28ff\u28bb\u28cd\u28ff\u28ff\u281b\u28bb\u28f6\u28ff\u28ef\u28e4\u28ee\u287b\u28fe\u28ff\u28ff\u287f\u283f\u280b\u28ff\u28ff\u28f7\u28ff\u28ff\u28ff\u28ff\u28f6\u28c4\u2832\u285f\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2883\u28fe\u28ff\u28ff\u2887\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u28bb\u28ff\u28ff\u2818\u28ff\u2846\u28fe\u28ff\u2804\u28b8\u28f7\u28fb\u2804\u28b8\u28ff\u287f\u28ff\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u28f6\u28e2\u28f6\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u28fe\u28ff\u28ff\u28ff\u28f8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285c\u28ff\u28ff\u2804\u28bf\u28f7\u28fe\u28f7\u28e4\u28c8\u28ff\u285f\u2820\u282c\u28ff\u28e7\u28bf\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u2879\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2838\u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u28bb\u28ff\u28b8\u2858\u28ff\u28ff\u287f\u283f\u28ff\u28ff\u28c0\u2804\u28a4\u283c\u281b\u28ff\u28bf\u28ff\u28ff\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2804\u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u28ff\u2848\u28ff\u284c\u28ff\u28e5\u28e4\u28ff\u285f\u2809\u2804\u28f0\u2881\u28f0\u28ef\u2820\u283d\u280f\u2888\u28db\u28ab\u28e3\u28fe\u28ff\u28fd\u28ff\u287f\u28bf\u28ff\u283f\u280b\u28e1\u28f6\u28f6\u28f6\u28f6\u285d\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2846\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28a3\u28ff\u28d8\u28ff\u284f\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28b8\u2847\u28bf\u28c7\u28bb\u28ff\u28ff\u28ff\u281b\u2840\u284f\u2829\u2805\u2810\u284b\u2890\u2854\u2835\u28bb\u282d\u2859\u28bf\u288b\u28e7\u28e5\u28f4\u283f\u289b\u28e5\u28d6\u28fc\u287f\u283f\u28bf\u28ff\u28ff\u28ff\u28e6\u28fd\u28df\u28ff\u28ff\u28ff\u28ff\u28e7\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u28ff\u28ff\u28ff\u28ff\u2847\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284e\u28f6\u28b8\u28ff\u2847\u28c9\u28db\u28ab\u2840\u2803\u28a0\u2840\u28cd\u284c\u2810\u282f\u280c\u2814\u28e4\u28f6\u2817\u2830\u281b\u2819\u2804\u28b4\u28fa\u2801\u2810\u281b\u28df\u28b7\u28e4\u28e4\u28e8\u28cd\u287b\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2804\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28b8\u28ff\u28ff\u28ff\u28ff\u2847\u2847\u284f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28b9\u28b8\u28ff\u28ff\u2879\u281b\u280c\u2858\u2820\u2808\u2864\u284b\u2880\u2849\u28ed\u2804\u2804\u2844\u2804\u2882\u2880\u2810\u2810\u2842\u2802\u28a1\u2810\u2803\u287c\u2829\u2880\u2809\u28a1\u28cc\u2819\u281b\u2852\u287b\u283f\u28bf\u28ff\u28ff\u28ff\u28ff\u28c0\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28b8\u28ff\u28ff\u28ff\u28ff\u2847\u28f7\u28f7\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u28e7\u281b\u284f\u2834\u2802\u28c4\u2880\u285c\u2840\u2837\u2804\u2813\u2804\u2810\u2804\u28fe\u28c9\u283b\u2837\u283f\u28e7\u28f6\u28e4\u28e4\u28f4\u28f6\u28f6\u28f6\u28ec\u28ff\u28f6\u2804\u280a\u28b9\u28f7\u28e6\u28c8\u283b\u28bf\u283f\u28c9\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28b8\u28ff\u28ff\u28ff\u28ff\u28f7\u28b9\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28b9\u28ff\u28ff\u28ef\u2804\u28bb\u281b\u2804\u2809\u2844\u2844\u28e5\u2844\u2818\u2845\u2804\u281a\u28e4\u28b8\u28ff\u2844\u28ff\u2847\u28a0\u28ec\u2819\u28bb\u28ff\u28ff\u28ff\u28ff\u28bb\u28ff\u285f\u2804\u2809\u28f7\u28fd\u28ff\u28ff\u28ff\u28f7\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2838\u28ff\u28ff\u28ff\u28ff\u28ff\u28b8\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2838\u28ff\u28ff\u28ff\u28ff\u285c\u2806\u283e\u2838\u2801\u2802\u283b\u2803\u283c\u2803\u2804\u2824\u2809\u28fd\u285f\u28f7\u28cc\u2804\u283f\u28df\u283c\u2877\u28e0\u28e4\u284d\u2804\u28f4\u28f6\u28b0\u28e6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2804\u28f7\u2879\u28bf\u28ff\u28ff\u28ff\u2878\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u28bf\u28ff\u28ff\u283f\u2803\u28be\u2886\u2818\u2848\u28f4\u2803\u281c\u28f2\u2803\u28df\u28a0\u2804\u2809\u28f7\u285c\u28bf\u28f7\u28c4\u2849\u2810\u2836\u2899\u285b\u28cb\u2804\u28b2\u2830\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u28c7\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284c\u28bf\u284f\u28c0\u28e4\u2849\u2818\u2806\u2804\u28fc\u28a1\u285c\u2804\u2808\u28a0\u2804\u28e4\u280f\u2889\u285f\u2820\u28d9\u28bf\u28ff\u28ff\u28f7\u28e6\u28e4\u28e5\u28f6\u28ff\u2803\u2804\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u287f\u28a1\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u28ff\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ce\u28b7\u28ff\u28bf\u2843\u2803\u280f\u284c\u28b0\u2808\u280d\u2836\u2880\u2844\u2856\u2804\u28e0\u2806\u2888\u2830\u2826\u2812\u2809\u281b\u283f\u283f\u283f\u281b\u28db\u2801\u2810\u2813\u28d2\u287f\u28db\u2889\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28a3\u28e7\u281b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f8\u285f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284e\u28ff\u28ce\u28f7\u2864\u2890\u2832\u2858\u281f\u2804\u28fc\u2804\u2844\u2880\u2812\u2826\u2830\u2830\u2802\u2804\u2809\u2852\u2802\u2820\u2804\u28f0\u2820\u2809\u2809\u2890\u285b\u28f0\u28f6\u28f4\u287f\u28f8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28f8\u28ff\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c7\u28e7\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e4\u28bb\u285c\u28f7\u2845\u28f6\u2846\u2808\u28c5\u2801\u2836\u2804\u280f\u2809\u2804\u2806\u2802\u2824\u2845\u2804\u2869\u2818\u2809\u28a0\u2844\u2804\u28e4\u28fe\u28ff\u28ff\u28ff\u281f\u28db\u2890\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28b8\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u28a7\u28bf\u28e7\u2878\u2807\u2860\u2844\u2804\u28ff\u2847\u28a0\u281b\u2803\u2823\u2804\u2804\u2844\u2804\u281c\u28a0\u2840\u2804\u2804\u28fc\u28ff\u28ff\u28ff\u28ff\u2803\u28fc\u28ff\u28ff\u2880\u28e4\u28e4\u285c\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28cf\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28c6\u28b8\u28ff\u28f7\u2874\u28f4\u288b\u2801\u28ff\u2802\u2804\u2804\u28fa\u2888\u2839\u2821\u2804\u28e4\u28b8\u2806\u2801\u28e0\u28fe\u28ff\u28ff\u28ff\u28ff\u28f5\u28f6\u2839\u28ed\u285d\u28fc\u28ff\u287f\u28c3\u28db\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f8\u285d\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u288b\u2812\u28f9\u285c\u28ff\u2801\u28fe\u2804\u2808\u2804\u2810\u281b\u2890\u2804\u2830\u2804\u2802\u28e8\u28f4\u28df\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u28ec\u28fc\u28ff\u28bb\u28fc\u28ff\u28ff\u283f\u28f8\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28f7\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e7\u28bb\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u289b\u28d8\u287b\u28ff\u28ff\u2840\u28a0\u28ff\u2837\u280f\u28c0\u28db\u28e3\u28f4\u28fe\u28ff\u28f6\u28d4\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28db\u28fb\u28ff\u28ff\u283f\u289f\u28f4\u28f6\u284c\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ce\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28db\u2881\u28f4\u28ff\u28ff\u28a3\u28e5\u28f6\u28f6\u28f6\u28f6\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ce\u28bf\u28ff\u28ff\u28ff\u28ff\u28cf\u28d9\u281b\u28db\u28eb\u28ed\u28ad\u28ff\u28ff\u28f6\u28ff\u287f\u283f\u28a3\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284e\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u28ff\u28ff\u28ff\u2883\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f9\u285c\u28ff\u28ff\u28ff\u28ff\u281f\u283b\u287f\u28db\u28bb\u289f\u28dd\u28bf\u284f\u28b0\u281d\u28ff\u2804\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e4\u28bb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u28b8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u28ff\u28ff\u28ff\u2804\u28ec\u2847\u28b0\u285d\u2847\u28f6\u28ed\u285c\u28ff\u28ff\u28f7\u28b1\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28e6\u287b\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28b9\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u284f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f9\u2833\u282f\u283d\u281f\u28f6\u28bf\u28ef\u28ff\u28ff\u2847\u28ff\u28ff\u2847\u2878\u287f\u2887\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u287d\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28a7\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u28c3\u28f5\u28ff\u28ff\u28ff\u28ff\u28f6\u28f6\u28f6\u28dd\u28db\u28e5\u28e5\u28e8\u28fc\u28ff\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n// \u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ce\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u285f\u28fc\u28ff\u28ff\u28ff\u28ff\u287f\u289f\u28f5\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\\r\\n//\\r\\n// https://twitter.com/ZOGworldorder\\r\\n// https://www.zogcoin.org/\\r\\n// https://t.me/zionistworldorder\\r\\n\\r\\ncontract Sale is Owned {\\r\\n    /*/////////////////////////////////////////////////\\r\\n                          EVENTS\\r\\n    /////////////////////////////////////////////////*/\\r\\n\\r\\n    event SaleEntered(address indexed user, uint256 amount);\\r\\n    event SaleClaimed(address indexed user, uint256 amount);\\r\\n    event TokensSupplied(uint256 amount);\\r\\n    event ProceedsWithdrawn(uint256 amount);\\r\\n\\r\\n    /*/////////////////////////////////////////////////\\r\\n                            STATE\\r\\n    /////////////////////////////////////////////////*/\\r\\n\\r\\n    /// @notice token being sold off\\r\\n    ERC20 public immutable token;\\r\\n\\r\\n    /// @notice if sale is live\\r\\n    bool public saleLive;\\r\\n\\r\\n    /// @notice max amount per address to mint\\r\\n    uint256 public immutable MAX_SALE = 5 ether / 10;\\r\\n\\r\\n    /// @notice maximum amount of total ether accepted for sale\\r\\n    uint256 public constant HARDCAP = 20 ether;\\r\\n\\r\\n    /// @notice internal accounting of tokens supplied to sale, can be upped before sale ends\\r\\n    uint256 public suppliedTokens;\\r\\n\\r\\n    /// @notice internal accounting of total deposits\\r\\n    /// @dev lp may be filled before everyone has claimed, so this maintains eth proceeds accounting\\r\\n    uint256 public totalDeposits;\\r\\n\\r\\n    /// @notice total eth deposits for each address, cannot exceed MAX_SALE\\r\\n    mapping(address => uint256) public deposits;\\r\\n\\r\\n    constructor(\\r\\n        ERC20 token_,\\r\\n        address owner_\\r\\n    ) Owned(owner_) {\\r\\n        token = token_;\\r\\n        saleLive = true;\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        if(isContract(msg.sender)) revert(\\\"Contracts cannot participate\\\");\\r\\n\\r\\n        if (!saleLive) revert(\\\"sale ended\\\");\\r\\n\\r\\n        if (deposits[msg.sender] + msg.value > MAX_SALE)\\r\\n            revert(\\\"max sale amount\\\");\\r\\n\\r\\n        if(HARDCAP < totalDeposits + msg.value)\\r\\n            revert(\\\"max sale amount\\\");\\r\\n\\r\\n        // The total supply of ether will never overflow\\r\\n        unchecked {\\r\\n            deposits[msg.sender] += msg.value;\\r\\n            totalDeposits += msg.value;\\r\\n        }\\r\\n\\r\\n        emit SaleEntered(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function claimTokens() external {\\r\\n        if (saleLive) revert(\\\"sale live\\\");\\r\\n\\r\\n        uint256 share = getCurrentShare(msg.sender);\\r\\n        delete deposits[msg.sender];\\r\\n\\r\\n        token.transfer(msg.sender, share);\\r\\n        emit SaleClaimed(msg.sender, share);\\r\\n    }\\r\\n\\r\\n    function getCurrentShare(address account) public view returns (uint256) {\\r\\n        return (suppliedTokens * deposits[account]) / totalDeposits;\\r\\n    }\\r\\n\\r\\n    function supplyTokens() external onlyOwner {\\r\\n        if (!saleLive) revert(\\\"sale ended\\\");\\r\\n        suppliedTokens = token.balanceOf(address(this));\\r\\n\\r\\n        emit TokensSupplied(token.balanceOf(address(this)));\\r\\n    }\\r\\n\\r\\n    function endSale() external onlyOwner {\\r\\n        saleLive = false;\\r\\n    }\\r\\n\\r\\n    function withdrawProceeds() external onlyOwner {\\r\\n        emit ProceedsWithdrawn(address(this).balance);\\r\\n        payable(owner).transfer(address(this).balance);\\r\\n    }\\r\\n\\r\\n    function isContract(address account) private view returns (bool) {\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n}\\r\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ProceedsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SaleClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SaleEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensSupplied\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"HARDCAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_SALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"deposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getCurrentShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"saleLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"suppliedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Sale", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000c83aedf16f508539763bb7c1d86ff6f9ae97d9e3000000000000000000000000da8d92a171aa99f1feb80e95cdc7a96923984c9f", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}