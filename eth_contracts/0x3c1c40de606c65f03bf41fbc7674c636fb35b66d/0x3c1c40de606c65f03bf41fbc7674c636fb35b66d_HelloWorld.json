{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/HelloWorld.sol\": {\r\n      \"content\": \"// Deployed with the Atlas IDE\\n// https://app.atlaszk.com/\\n// SPDX-License-Identifier: Unlicensed\\npragma solidity ^0.8.0;\\n\\ncontract HelloWorld {\\n    uint256 public storedInteger;\\n\\n    function increment() public {\\n        storedInteger += 1;\\n    }\\n\\n    // SPDX-License-Identifier: MIT\\n\\n    uint256 constant MAX_INT = type(uint256).max;\\n\\n    function adder(uint256 _a, uint256 _b) external pure returns (uint256 sum, bool error) {\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n        if (_b > MAX_INT - _a) {\\n            return (0, true); // Overflow occurred\\n        }\\n        return (_a + _b, false);\\n    }\\n\\n    function subtractor(uint256 _a, uint256 _b) external pure returns (uint256 difference, bool error) {\\n        if (_b > _a) {\\n            return (0, true); // Underflow occurred\\n        }\\n        return (_a - _b, false);\\n    }\\n\\n    function decement() public {\\n        storedInteger -= 1;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"forge-std/=lib/forge-std/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"viaIR\": false,\r\n    \"debug\": {\r\n      \"revertStrings\": \"default\"\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"adder\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"sum\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"error\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decement\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"storedInteger\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_a\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_b\",\"type\":\"uint256\"}],\"name\":\"subtractor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"difference\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"error\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}]", "ContractName": "HelloWorld", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}