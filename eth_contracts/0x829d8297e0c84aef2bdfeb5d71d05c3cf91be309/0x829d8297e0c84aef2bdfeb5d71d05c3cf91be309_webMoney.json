{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/WebMoney.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: UNLICENSED\\npragma solidity 0.8.19; \\n\\n\\n/*\\n    @dev the Interface require for the Standard ERC20 Token \\n\\n\\n*/ \\n\\n\\n\\ninterface IERC20 {\\n\\n    function totalSupply() external view returns(uint256); \\n    function balanceOf(address account) external view returns(uint256); \\n    function transfer(address recipient, uint256 amount) external returns(bool); \\n    function allowance(address owner, address spender) external view returns(uint256); \\n    function approve(address spender, uint256 amount) external returns(bool); \\n    function transferFrom(address sender, address recipient, uint256 amount) external returns(bool);\\n    event Transfer(address indexed owner, address indexed to, uint256 value);\\n    event Approval (address indexed owner, address spender, uint256 value); \\n}\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that throw on error\\n */\\n\\nlibrary safeMath {\\n\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256)\\n    {\\n        uint256 c = a + b; \\n        require(c >= a, \\\"SafeMath: Addition Overflow\\\");\\n        return c; \\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns(uint256)\\n    {\\n        require(b <= a, \\\"SafeMath Subraction Underflow\\\");\\n        uint256 c = a - b;\\n        return c; \\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns(uint256)\\n    {\\n        if (a == 0) {\\n            return 0;\\n        }\\n        uint256 c = a * b; \\n        require(c / a == b, \\\"SafeMath Mulipilication Overflow\\\");\\n        return c; \\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns(uint256)\\n    {\\n        require(b > 0, \\\"SafeMath Divison by Zero\\\" );\\n        uint256 c = a / b; \\n        return c; \\n    }\\n\\n}\\n\\n\\n/*\\n     @title Token Name and Implementation of the IERC20 Interface\\n    @title  This contract defines all essential token functions.\\n   \\n    @dev The Contract Functions provides methods to retrieve the total supply,\\n         balance, name, symbol, allowance, and approval status.\\n    \\n\\n\\n\\n*/ \\n\\n\\n\\ncontract webMoney is IERC20 {\\n\\n    using safeMath for uint256; \\n\\n    address public owner; \\n    uint256 private _totalSupply;\\n    string private _name; \\n    string private _symbol; \\n    uint256 private _decimals; \\n    mapping(address => uint256) private _balances; \\n    mapping(address => mapping(address => uint256)) private _allowances; \\n\\n    event Burn(address indexed burner, uint256); \\n\\n\\n    /*\\n        @dev the deployment only call once, when the contract is been deployed!\\n\\n        @dev the Name, symbol, decimal and the Transfer of the Token is been\\n            TRanfer when the contract being deployed!\\n\\n    */\\n\\n    constructor() {\\n        owner = msg.sender; \\n        _name = \\\"WebMoney\\\";\\n        _symbol = \\\"WEBM\\\";\\n        _decimals = 18; \\n        _totalSupply = 10000000 * 10 **uint256(_decimals);\\n        _balances[msg.sender] = _totalSupply;\\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n\\n    /*\\n\\n    @dev All the Basic Functions for the Token to Work!\\n\\n    */ \\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    function decimals() public view returns (uint256) {\\n        return _decimals;\\n    }\\n\\n    function totalSupply() public view override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(msg.sender, recipient, amount);\\n        return true;\\n    }\\n\\n    function allowance(address _owner, address spender) public view override returns (uint256) {\\n        return _allowances[_owner][spender];\\n    }\\n\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n\\n     function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\\n        return true;\\n    }\\n\\n    function burn(uint256 amount) public {\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function _transfer(address sender, address recipient, uint256 amount) internal {\\n        require(sender != address(0), \\\"ERC20: Transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: Transfer to the zero address\\\");\\n        require(_balances[sender] >= amount, \\\"ERC20: Insufficient balance\\\"); \\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        \\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    function _approve(address _owner, address spender, uint256 amount) internal {\\n        require(_owner != address(0), \\\"ERC20: Approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: Approve to the zero address\\\");\\n        \\n        _allowances[owner][spender] = amount;\\n        emit Approval(_owner, spender, amount);\\n    }\\n    \\n    function _burn(address burner, uint256 value) internal {\\n        require(burner != address(0), \\\"ERC20: Burn from the zero address\\\");\\n        require(_balances[burner] >= value, \\\"ERC20: Insufficient balance to burn\\\");\\n        \\n        _balances[burner] = _balances[burner].sub(value);\\n        _totalSupply = _totalSupply.sub(value);\\n        \\n        emit Burn(burner, value);\\n        emit Transfer(burner, address(0), value);\\n    }\\n\\n    /*\\n\\n    @dev the calling of specfic Contract that have restrictions!\\n\\n    */ \\n\\n    modifier onlyOnwer () {\\n\\n        require(msg.sender == owner, \\\"Only Owner can call this Function!\\\"); \\n        _;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"burner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"Burn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "webMoney", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}