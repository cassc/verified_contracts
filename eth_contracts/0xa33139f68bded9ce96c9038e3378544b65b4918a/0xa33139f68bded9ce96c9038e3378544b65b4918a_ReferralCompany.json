{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/interfaces/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/ReferralCompany.sol\": {\r\n      \"content\": \"pragma solidity 0.8.20;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\ncontract ReferralCompany {\\n    \\n    address public DATA_SETTER;\\n    uint256 public COUNT_PLACES;\\n    uint256[] public PRIZES_AMOUNTS;\\n    \\n    address[] public userPlaces;\\n\\n    IERC20 public constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    \\n    error AddressesLength();\\n    error WrongDataSetter();\\n    error WrongSender();\\n\\n    constructor(uint256[] memory _prizes, address _data_setter) {\\n        PRIZES_AMOUNTS = _prizes;\\n        COUNT_PLACES = _prizes.length;\\n        DATA_SETTER = _data_setter;\\n    }\\n\\n    function setPlaces(address[] memory _userAddresses) public {\\n        if (DATA_SETTER != msg.sender) {\\n            revert WrongDataSetter();\\n        }\\n        if (_userAddresses.length < COUNT_PLACES || _userAddresses.length > COUNT_PLACES) {\\n            revert AddressesLength();\\n        }\\n        userPlaces = _userAddresses;\\n    }\\n\\n    function sentPrizesToUsers() public {\\n        if (DATA_SETTER != msg.sender) {\\n            revert WrongDataSetter();\\n        }\\n        for(uint i = 0; i < userPlaces.length; i++) {\\n            USDC.transfer(userPlaces[i], PRIZES_AMOUNTS[i]);\\n        }\\n    }\\n}\\n\\n\\n\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_prizes\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"_data_setter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AddressesLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongDataSetter\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WrongSender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"COUNT_PLACES\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DATA_SETTER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"PRIZES_AMOUNTS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sentPrizesToUsers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"}],\"name\":\"setPlaces\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userPlaces\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "ReferralCompany", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000abb06caaa2dcd0f69df3278688af52769d2a8c85000000000000000000000000000000000000000000000000000000000000006400000000000000000000000000000000000000000000000000000004a817c80000000000000000000000000000000000000000000000000000000002540be400000000000000000000000000000000000000000000000000000000012a05f200000000000000000000000000000000000000000000000000000000009502f900000000000000000000000000000000000000000000000000000000003b9aca000000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee50000000000000000000000000000000000000000000000000000000026960ee5", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}