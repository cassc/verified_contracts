{"SourceCode": "/**\r\n                                                                       \r\n                                      =#+@@#                   \r\n                            +@@@@@@@@@@@@@@@.                  \r\n                            =@@@%        #@@                   \r\n                              *@@@       @@@                   \r\n                        @@%    #@@%      @@-                   \r\n                      #@@#   #@@#   :=  =@@:                   \r\n                    #@@%=  @@@@-  .%@%%%-@@                    \r\n                  @@@@.  +@%@:   #%@@+@%@@@                    \r\n         @%+    =%@@@   @%%@   =@@#    #@@%                    \r\n        *@@%@ +%%%%   #%@#   +@@%                              \r\n        @%%%@@@@@   #@@*   #@@%                                \r\n        @%=  ##   %@@%   =%@%.                                 \r\n       %@@      =@@@.   @%@                                    \r\n       #@@      .@@@%                                          \r\n       @@#        @@@%=                                        \r\n       @@%+@@@@@@@@@@@%                                        \r\n       @@@@#+%+                                                \r\n\r\n    Pier Protocol - A cutting-edge multi-chain peer-to-peer protocol.\r\n    Telegram: https://t.me/PierProtocolERC\r\n    Website:  https://pierprotocol.com/\r\n    dApp: https://pierprotocol.com/dashboard\r\n    Twitter:  https://twitter.com/protocolpier\r\n**/\r\n\r\n// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.19;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\n/// @title A ERC-20 token contract for Pier Protocol\r\ncontract Pier is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n\r\n    /// @notice Fallback function that allows the contract to receive ETH directly\r\n    receive() external payable {}\r\n\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n    /*                            constants                            */\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n\r\n    /// @dev Number of decimals the token uses.\r\n    uint8 private constant _decimals = 18;\r\n    /// @dev Total supply of the token.\r\n    uint256 private constant _tTotal = 10_000_000 * 10**_decimals;\r\n\r\n    /// @dev Name of the token.\r\n    string private constant _name = unicode\"Pier Protocol\";\r\n    /// @dev Symbol of the token.\r\n    string private constant _symbol = unicode\"Pier\";\r\n\r\n    /// @dev The threshold at which accumulated tokens will be swapped to ETH.\r\n    uint256 public _taxSwapThreshold = 5_000 * 10**_decimals;\r\n    /// @dev Maximum number of tokens to swap to ETH at once.\r\n    uint256 public _maxTaxSwap = 100_000 * 10**_decimals;\r\n    /// @dev Maximum amount that can be bought in a single transaction\r\n    uint256 public _maxTxAmount = 50_000 * 10**_decimals;\r\n    /// @dev Maximum amount a wallet can hold\r\n    uint256 public _maxWalletAmount = 50_000 * 10**_decimals;\r\n\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n    /*                            mappings                             */\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n\r\n    /// @dev Stores the balance of each address.\r\n    mapping (address => uint256) private _balances;\r\n    /// @dev Stores allowances one account has given to another.\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    /// @dev Records whether an account is excluded from paying fees.\r\n    mapping (address => bool) public _isExcludedFromFee;\r\n    /// @dev Records whether an address is considered a swap contract (and taxes are charged on transfers to/from it).\r\n    mapping (address => bool) private _isSwapContract;\r\n\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n    /*                            variables                            */\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n\r\n    /// @dev Addresses where collected taxes are sent.\r\n    address payable public _taxWallet;\r\n    address payable public _taxWallet2;\r\n\r\n    /// @dev Custom tax rate that can be updated, if 0, the default tax rate is used.\r\n    uint256 public _customTax = 0;\r\n    /// @dev The block number when trading was enabled.\r\n    uint256 public tradingOpenBlock;\r\n\r\n    /// @dev The Uniswap V2 Router for token swaps.\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    /// @dev The Uniswap V2 Pair address for Pier-ETH liquidity pool.\r\n    address public uniswapV2Pair;\r\n\r\n    /// @dev Indicates if trading is open and transfers (not from/to owner) are possible.\r\n    bool private tradingOpen;\r\n    /// @dev Indicates if currently in swap operation to prevent reentrancy.\r\n    bool private inSwap;\r\n    /// @dev Indicates if automatic swapping of taxes to ETH is enabled.\r\n    bool private swapEnabled;\r\n    /// @dev Indicates if the maxTxAmount and maxWalletAmount limits are enabled.\r\n    bool public _limitsEnabled = true;\r\n\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n    /*                         custom events                           */\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n\r\n    /// @dev Emmited when the tax percentage is updated\r\n    event TaxChanged(uint256 _oldTax, uint256 _newTax);\r\n    /// @dev Emmited when a swap contract is updated\r\n    event SwapContractUpdated(address _contract, bool _isSwapContract);\r\n\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n    /*                   modifiers and constructor                     */\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n\r\n    /// @dev Modifier to lock the swap during its execution to prevent reentrancy.\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    /// @notice Initializes contract with initial settings\r\n    constructor () {\r\n        _taxWallet = payable(0x37335beA9Fb09c94d5346c2030217445b05464b2);\r\n        _taxWallet2 = payable(0xAcE5e3c796Fd40f6a0D52964592CC885BAf71524);\r\n\r\n        _balances[_msgSender()] = _tTotal;\r\n\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n        _isExcludedFromFee[_taxWallet2] = true;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n\r\n        _isSwapContract[address(uniswapV2Router)] = true;\r\n        _isSwapContract[uniswapV2Pair] = true;\r\n\r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n    /*                 standard ERC-20 view functions                  */\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n    /*                    standard ERC-20 functions                    */\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n\r\n    /// @notice Sets amount as the allowance of spender over the caller\u2019s tokens\r\n    /// @param spender The address which will spend the funds\r\n    /// @param amount The amount of tokens to be spent\r\n    /// @return A boolean value indicating whether the operation was successful \r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /// @notice Transfers tokens from one address to another with allowance check\r\n    /// @dev Transfers tokens between two addresses and automatically deducts the allowance\r\n    /// @param sender The address to transfer tokens from\r\n    /// @param recipient The address to transfer tokens to\r\n    /// @param amount The amount of tokens to be transferred\r\n    /// @return A boolean value indicating whether the transfer was successful\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    /// @dev Approves spending of a specified amount of tokens by a spender\r\n    /// @param owner The address of the token holder\r\n    /// @param spender The address of the spender\r\n    /// @param amount The amount of tokens to approve\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /// @dev Handles the internal transfer logic, applying tax if necessary\r\n    /// @param from The address to transfer tokens from\r\n    /// @param to The address to transfer tokens to\r\n    /// @param amount The amount of tokens to transfer\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n\r\n        uint256 taxAmount = 0;\r\n        if (from != owner() && to != owner()) {\r\n            require(tradingOpen, \"ERC20: Trading is not enabled\");\r\n\r\n            if (_isSwapContract[from] && !_isExcludedFromFee[to] && _limitsEnabled){\r\n                require(amount <= _maxTxAmount, \"Transfer amount exceeds the maxTxAmount\");\r\n                require(_balances[to].add(amount) <= _maxWalletAmount, \"Transfer amount exceeds the maxWalletAmount\");\r\n            }\r\n               \r\n            if (_isSwapContract[to] && from != address(this)){\r\n                taxAmount = amount.mul(_getTax()).div(100);\r\n            } else if (_isSwapContract[from]){\r\n                taxAmount = amount.mul(_getTax()).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance > _taxSwapThreshold) {\r\n                swapTokensForEth(min(amount, min(contractTokenBalance, _maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if (contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]){\r\n            taxAmount = 0;\r\n        }\r\n\r\n        if (taxAmount > 0){\r\n            _balances[address(this)] = _balances[address(this)].add(taxAmount);\r\n            emit Transfer(from, address(this), taxAmount);\r\n        }\r\n\r\n        _balances[from] = _balances[from].sub(amount);\r\n        _balances[to] = _balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n    /*                     internal helper functions                   */\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n\r\n    /// @dev Calculates the tax rate based on the difference between current block number and trading open block\r\n    /// @return The current tax rate as a percentage\r\n    function _getTax() internal view returns (uint256) {\r\n        if (_customTax != 0) return _customTax;\r\n\r\n        if (block.number - tradingOpenBlock <= 5) {\r\n            return 25;\r\n        } else if (block.number - tradingOpenBlock <= 12) {\r\n            return 12;\r\n        } else {\r\n            return 2;\r\n        }\r\n    }\r\n\r\n    /// @dev Utility function to return the lesser of two values\r\n    /// @param a The first value\r\n    /// @param b The second value\r\n    /// @return The lesser of the two values\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n        return (a > b) ? b : a;\r\n    }\r\n\r\n    /// @dev Swaps tokens for ETH using the Uniswap V2 Router\r\n    /// @param tokenAmount The amount of tokens to swap for ETH\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if (!tradingOpen || tokenAmount == 0) return;\r\n\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    /// @dev Transfers ETH to the tax wallet\r\n    /// @param amount The amount of ETH to transfer\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount.mul(60).div(100));\r\n        _taxWallet2.transfer(amount.mul(40).div(100));\r\n    }\r\n\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n    /*                       protected functions                       */\r\n    /* .:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:._.:*~*:. */\r\n\r\n    /// @notice Manually triggers a swap from tokens to ETH and send the proceeds to the tax wallet\r\n    /// @dev Can only be called by the tax wallet address\r\n    function manualSwap() external {\r\n        require(_msgSender() == owner() || _msgSender() == _taxWallet || _msgSender() == _taxWallet2, \"only owner or tax wallets\");\r\n\r\n        uint256 tokenBalance = balanceOf(address(this));\r\n        if (tokenBalance > 0){\r\n            swapTokensForEth(tokenBalance);\r\n        }\r\n\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0){\r\n            sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    /// @notice Opens trading on the token, enabling swaps and transfers\r\n    /// @dev Can only be called by the contract owner\r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen, \"Trading is already open\");\r\n\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n        tradingOpenBlock = block.number;\r\n    }\r\n\r\n    /// @notice Sets a custom tax rate for token transfers\r\n    /// @dev Can only be called by the contract owner, tax rate must be <= 50%\r\n    /// @param tax The new tax rate as a percentage\r\n    function setCustomTax(uint256 tax) external onlyOwner {\r\n        require(tax <= 50, \"Tax must be less than or equal to 50%\");\r\n        emit TaxChanged(_customTax, tax);\r\n        _customTax = tax;\r\n    }\r\n\r\n    /// @notice Toggles if an address is excluded from paying taxes on buys and sells\r\n    function toggleIsExcludedFromFee(address account) external onlyOwner {\r\n        _isExcludedFromFee[account] = !_isExcludedFromFee[account];\r\n    }\r\n\r\n    /// @notice Recovers tokens or ETH mistakenly sent to the contract\r\n    /// @dev Can only be called by the contract owner\r\n    function recover(address token, uint256 amount) external {\r\n        require(_msgSender() == owner() || _msgSender() == _taxWallet || _msgSender() == _taxWallet2, \"only owner or tax wallets\");\r\n\r\n        if (token == address(0)){\r\n            (bool sent, bytes memory data) = payable(msg.sender).call{value: amount}(\"\");\r\n        } else {\r\n            IERC20(token).transfer(msg.sender, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Toggles a contract address as a recognized swap contract\r\n    /// @dev Can only be called by the contract owner\r\n    /// @param contractAddress The address of the contract to toggle\r\n    function toggleSwapContract(address contractAddress) external {\r\n        require(_msgSender() == owner() || _msgSender() == _taxWallet || _msgSender() == _taxWallet2, \"only owner or tax wallets\");\r\n\r\n        _isSwapContract[contractAddress] = !_isSwapContract[contractAddress];\r\n        emit SwapContractUpdated(contractAddress, _isSwapContract[contractAddress]);\r\n    }\r\n\r\n    /// @notice Toggles if the automatic swap of taxes to ETH is enabled\r\n    function toggleSwapEnabled() external {\r\n        require(_msgSender() == owner() || _msgSender() == _taxWallet || _msgSender() == _taxWallet2, \"only owner or tax wallets\");\r\n        swapEnabled = !swapEnabled;\r\n    }\r\n\r\n    /// @notice Sets the tax wallet address\r\n    function setTaxWallet(address payable wallet, address payable wallet2) external {\r\n        require(_msgSender() == owner() || _msgSender() == _taxWallet || _msgSender() == _taxWallet2, \"only owner or tax wallets\");\r\n        _taxWallet = wallet;\r\n        _taxWallet2 = wallet2;\r\n    }\r\n\r\n    /// @notice Toggles if the maxTxAmount and maxWalletAmount limits are enabled\r\n    function toggleLimits() external onlyOwner() {\r\n        _limitsEnabled = !_limitsEnabled;\r\n    }\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isSwapContract\",\"type\":\"bool\"}],\"name\":\"SwapContractUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldTax\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newTax\",\"type\":\"uint256\"}],\"name\":\"TaxChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_customTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"_isExcludedFromFee\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_limitsEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxWallet2\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tax\",\"type\":\"uint256\"}],\"name\":\"setCustomTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"wallet2\",\"type\":\"address\"}],\"name\":\"setTaxWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"toggleIsExcludedFromFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"toggleSwapContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleSwapEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingOpenBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapV2Pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Pier", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2ac5c9a71a0ad6b8f3aebe3a752bb7bc76ad69ccbceaabf3ddd0329354f62e54"}