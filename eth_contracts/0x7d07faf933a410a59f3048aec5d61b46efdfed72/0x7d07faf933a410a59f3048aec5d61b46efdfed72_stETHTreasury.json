{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMathUpgradeable {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/interfaces/IAssetStrategy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IAssetStrategy {\\n  /// @notice Withdraw assets from strategy to treasury.\\n  /// @param amount The amount of token to withdraw.\\n  function withdrawToTreasury(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/interfaces/IFractionalToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IFractionalToken {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the net asset value for the token.\\n  function nav() external view returns (uint256);\\n\\n  /// @notice Compute the new nav with multiple.\\n  /// @param multiple The multiplier used to update the nav, multiplied by 1e18.\\n  /// @return newNav The new net asset value of the token.\\n  function getNav(int256 multiple) external view returns (uint256 newNav);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Update the net asset value by times `(1 + multiple / 1e18)`.\\n  /// @param multiple The multiplier used to update the nav, multiplied by 1e18.\\n  /// @return newNav The new net asset value of the token.\\n  function updateNav(int256 multiple) external returns (uint256 newNav);\\n\\n  /// @notice Update the net asset value by direct setting.\\n  /// @param newNav The new net asset value, multiplied by 1e18.\\n  function setNav(uint256 newNav) external;\\n\\n  /// @notice Mint some token to someone.\\n  /// @param to The address of recipient.\\n  /// @param amount The amount of token to mint.\\n  function mint(address to, uint256 amount) external;\\n\\n  /// @notice Burn some token from someone.\\n  /// @param from The address of owner to burn.\\n  /// @param amount The amount of token to burn.\\n  function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/interfaces/ILeveragedToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ILeveragedToken {\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the net asset value for the token.\\n  function nav() external view returns (uint256);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint some token to someone.\\n  /// @param to The address of recipient.\\n  /// @param amount The amount of token to mint.\\n  function mint(address to, uint256 amount) external;\\n\\n  /// @notice Burn some token from someone.\\n  /// @param from The address of owner to burn.\\n  /// @param amount The amount of token to burn.\\n  function burn(address from, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/interfaces/IMarket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IMarket {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when fToken or xToken is minted.\\n  /// @param owner The address of base token owner.\\n  /// @param recipient The address of receiver for fToken or xToken.\\n  /// @param baseTokenIn The amount of base token deposited.\\n  /// @param fTokenOut The amount of fToken minted.\\n  /// @param xTokenOut The amount of xToken minted.\\n  /// @param mintFee The amount of mint fee charged.\\n  event Mint(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 baseTokenIn,\\n    uint256 fTokenOut,\\n    uint256 xTokenOut,\\n    uint256 mintFee\\n  );\\n\\n  /// @notice Emitted when someone redeem base token with fToken or xToken.\\n  /// @param owner The address of fToken and xToken owner.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param fTokenBurned The amount of fToken burned.\\n  /// @param xTokenBurned The amount of xToken burned.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  /// @param redeemFee The amount of redeem fee charged.\\n  event Redeem(\\n    address indexed owner,\\n    address indexed recipient,\\n    uint256 fTokenBurned,\\n    uint256 xTokenBurned,\\n    uint256 baseTokenOut,\\n    uint256 redeemFee\\n  );\\n\\n  /// @notice Emitted when someone add more base token.\\n  /// @param owner The address of base token owner.\\n  /// @param recipient The address of receiver for fToken or xToken.\\n  /// @param baseTokenIn The amount of base token deposited.\\n  /// @param xTokenMinted The amount of xToken minted.\\n  event AddCollateral(address indexed owner, address indexed recipient, uint256 baseTokenIn, uint256 xTokenMinted);\\n\\n  /// @notice Emitted when someone liquidate with fToken.\\n  /// @param owner The address of fToken and xToken owner.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param fTokenBurned The amount of fToken burned.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  event UserLiquidate(address indexed owner, address indexed recipient, uint256 fTokenBurned, uint256 baseTokenOut);\\n\\n  /// @notice Emitted when self liquidate with fToken.\\n  /// @param caller The address of caller.\\n  /// @param baseSwapAmt The amount of base token used to swap.\\n  /// @param baseTokenOut The amount of base token redeemed.\\n  /// @param fTokenBurned The amount of fToken liquidated.\\n  event SelfLiquidate(address indexed caller, uint256 baseSwapAmt, uint256 baseTokenOut, uint256 fTokenBurned);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint both fToken and xToken with some base token.\\n  /// @param baseIn The amount of base token supplied.\\n  /// @param recipient The address of receiver for fToken and xToken.\\n  /// @param minFTokenMinted The minimum amount of fToken should be received.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return fTokenMinted The amount of fToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  function mint(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minFTokenMinted,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 fTokenMinted, uint256 xTokenMinted);\\n\\n  /// @notice Mint some fToken with some base token.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for fToken.\\n  /// @param minFTokenMinted The minimum amount of fToken should be received.\\n  /// @return fTokenMinted The amount of fToken should be received.\\n  function mintFToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minFTokenMinted\\n  ) external returns (uint256 fTokenMinted);\\n\\n  /// @notice Mint some xToken with some base token.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for xToken.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  function mintXToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 xTokenMinted);\\n\\n  /// @notice Mint some xToken by add some base token as collateral.\\n  /// @param baseIn The amount of base token supplied, use `uint256(-1)` to supply all base token.\\n  /// @param recipient The address of receiver for xToken.\\n  /// @param minXTokenMinted The minimum amount of xToken should be received.\\n  /// @return xTokenMinted The amount of xToken should be received.\\n  function addBaseToken(\\n    uint256 baseIn,\\n    address recipient,\\n    uint256 minXTokenMinted\\n  ) external returns (uint256 xTokenMinted);\\n\\n  /// @notice Redeem base token with fToken and xToken.\\n  /// @param fTokenIn the amount of fToken to redeem, use `uint256(-1)` to redeem all fToken.\\n  /// @param xTokenIn the amount of xToken to redeem, use `uint256(-1)` to redeem all xToken.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param minBaseOut The minimum amount of base token should be received.\\n  /// @return baseOut The amount of base token should be received.\\n  function redeem(\\n    uint256 fTokenIn,\\n    uint256 xTokenIn,\\n    address recipient,\\n    uint256 minBaseOut\\n  ) external returns (uint256 baseOut);\\n\\n  /// @notice Permissionless liquidate some fToken to increase the collateral ratio.\\n  /// @param fTokenIn the amount of fToken to supply, use `uint256(-1)` to liquidate all fToken.\\n  /// @param recipient The address of receiver for base token.\\n  /// @param minBaseOut The minimum amount of base token should be received.\\n  /// @return baseOut The amount of base token should be received.\\n  function liquidate(\\n    uint256 fTokenIn,\\n    address recipient,\\n    uint256 minBaseOut\\n  ) external returns (uint256 baseOut);\\n\\n  /// @notice Self liquidate some fToken to increase the collateral ratio.\\n  /// @param baseSwapAmt The amount of base token to swap.\\n  /// @param minFTokenLiquidated The minimum amount of fToken should be liquidated.\\n  /// @param data The data used to swap base token to fToken.\\n  /// @return baseOut The amount of base token should be received.\\n  /// @return fTokenLiquidated the amount of fToken liquidated.\\n  function selfLiquidate(\\n    uint256 baseSwapAmt,\\n    uint256 minFTokenLiquidated,\\n    bytes calldata data\\n  ) external returns (uint256 baseOut, uint256 fTokenLiquidated);\\n\\n  /// @notice Callback to swap base token to fToken\\n  /// @param baseSwapAmt The amount of base token to swap.\\n  /// @param data The data passed to market contract.\\n  /// @return fTokenAmt The amount of fToken received.\\n  function onSelfLiquidate(uint256 baseSwapAmt, bytes calldata data) external returns (uint256 fTokenAmt);\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/interfaces/IRebalancePool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IRebalancePool {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when user deposit asset into this contract.\\n  /// @param owner The address of asset owner.\\n  /// @param reciever The address of recipient of the asset in this contract.\\n  /// @param amount The amount of asset deposited.\\n  event Deposit(address indexed owner, address indexed reciever, uint256 amount);\\n\\n  /// @notice Emitted when the amount of deposited asset changed due to liquidation or deposit or unlock.\\n  /// @param owner The address of asset owner.\\n  /// @param newDeposit The new amount of deposited asset.\\n  /// @param loss The amount of asset used by liquidation.\\n  event UserDepositChange(address indexed owner, uint256 newDeposit, uint256 loss);\\n\\n  /// @notice Emitted when the amount of unlocking asset changed due to liquidation or unlock or withdraw.\\n  /// @param owner The address of asset owner.\\n  /// @param newUnlock The new amount of unlocking asset.\\n  /// @param loss The amount of asset used by liquidation.\\n  event UserUnlockChange(address indexed owner, uint256 newUnlock, uint256 loss);\\n\\n  /// @notice Emitted when user unlock part of its deposition.\\n  /// @param amount The amount of token to unlock.\\n  /// @param unlockAt The timestamp in second when the asset will be unlocked.\\n  event Unlock(address indexed owner, uint256 amount, uint256 unlockAt);\\n\\n  /// @notice Emitted when user withdraw unlocked asset.\\n  /// @param owner The address of asset owner.\\n  /// @param amount The amount of token to withdraw.\\n  event WithdrawUnlocked(address indexed owner, uint256 amount);\\n\\n  /// @notice Emitted when new rewards are deposited to this contract.\\n  /// @param token The address of the token.\\n  /// @param amount The amount of token deposited.\\n  event DepositReward(address indexed token, uint256 amount);\\n\\n  /// @notice Emitted when user claim pending reward token.\\n  /// @param owner The address of asset owner.\\n  /// @param token The address of token.\\n  /// @param amount The amount of pending reward claimed.\\n  event Claim(address indexed owner, address indexed token, uint256 amount);\\n\\n  /// @notice Emitted when liquidation happens.\\n  /// @param liquidated The amount of asset liquidated.\\n  /// @param baseGained The amount of base token gained.\\n  event Liquidate(uint256 liquidated, uint256 baseGained);\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the address of underlying token of this contract.\\n  function asset() external view returns (address);\\n\\n  /// @notice Return the total amount of asset deposited to this contract.\\n  function totalSupply() external view returns (uint256);\\n\\n  /// @notice Return the amount of deposited asset for some specific user.\\n  /// @param account The address of user to query.\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /// @notice Return the amount of unlocked asset for some specific user.\\n  /// @param account The address of user to query.\\n  function unlockedBalanceOf(address account) external view returns (uint256);\\n\\n  /// @notice Return the amount of unlocking asset for some specific user.\\n  /// @param account The address of user to query.\\n  /// @return balance The amount of unlocking asset.\\n  /// @return unlockAt The timestamp in second when the asset is unlocked.\\n  function unlockingBalanceOf(address account) external view returns (uint256 balance, uint256 unlockAt);\\n\\n  /// @notice Return the amount of reward token can be claimed.\\n  /// @param account The address of user to query.\\n  /// @param token The address of reward token to query.\\n  function claimable(address account, address token) external view returns (uint256);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Deposit some asset to this contract.\\n  /// @dev Use `amount=uint256(-1)` if you want to deposit all asset held.\\n  /// @param amount The amount of asset to deposit.\\n  /// @param recipient The address of receiver for the deposited asset.\\n  function deposit(uint256 amount, address recipient) external;\\n\\n  /// @notice Unlock some deposited asset.\\n  /// @dev If the amount if larger than current deposited asset, all asset will be used.\\n  /// @param amount The amount of asset to unlock.\\n  function unlock(uint256 amount) external;\\n\\n  /// @notice Withdraw unlocked asset from this contract.\\n  /// @param _claim Whether the user want to claim pending rewards.\\n  /// @param unwrap Whether the user want to unwrap autocompounding rewards.\\n  function withdrawUnlocked(bool _claim, bool unwrap) external;\\n\\n  /// @notice Claim pending reward from this contract.\\n  /// @param token The address of token to claim.\\n  /// @param unwrap Whether the user want to unwrap autocompounding rewards.\\n  function claim(address token, bool unwrap) external;\\n\\n  /// @notice Claim multiple pending rewards from this contract.\\n  /// @param tokens The list of reward tokens to claim.\\n  /// @param unwrap Whether the user want to unwrap autocompounding rewards.\\n  function claim(address[] memory tokens, bool unwrap) external;\\n\\n  /// @notice Liquidate asset for base token.\\n  /// @param maxAmount The maximum amount of asset to liquidate.\\n  /// @param minBaseOut The minimum amount of base token should receive.\\n  /// @return liquidated The amount of asset liquidated.\\n  /// @return baseOut The amount of base token received.\\n  function liquidate(uint256 maxAmount, uint256 minBaseOut) external returns (uint256 liquidated, uint256 baseOut);\\n\\n  /// @notice Update the snapshot for some specific user.\\n  /// @param account The address of user to update.\\n  function updateAccountSnapshot(address account) external;\\n\\n  /// @notice Deposit some reward token to this contract.\\n  /// @param token The address of token to deposit.\\n  /// @param amount The amount of token to deposit.\\n  function depositReward(address token, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/interfaces/ITreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ITreasury {\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the net asset value is updated.\\n  /// @param price The new price of base token.\\n  /// @param fNav The new net asset value of fToken.\\n  event ProtocolSettle(uint256 price, uint256 fNav);\\n\\n  /*********\\n   * Enums *\\n   *********/\\n\\n  enum MintOption {\\n    Both,\\n    FToken,\\n    XToken\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @notice Return the address of base token.\\n  function baseToken() external view returns (address);\\n\\n  /// @notice Return the address fractional base token.\\n  function fToken() external view returns (address);\\n\\n  /// @notice Return the address leveraged base token.\\n  function xToken() external view returns (address);\\n\\n  /// @notice Return the address of strategy contract.\\n  function strategy() external view returns (address);\\n\\n  /// @notice The last updated permissioned base token price.\\n  function lastPermissionedPrice() external view returns (uint256);\\n\\n  /// @notice Return the total amount of base token deposited.\\n  function totalBaseToken() external view returns (uint256);\\n\\n  /// @notice Return the total amount of base token managed by strategy.\\n  function strategyUnderlying() external view returns (uint256);\\n\\n  /// @notice Return the current collateral ratio of fToken, multipled by 1e18.\\n  function collateralRatio() external view returns (uint256);\\n\\n  /// @notice Return current nav for base token, fToken and xToken.\\n  /// @return baseNav The nav for base token.\\n  /// @return fNav The nav for fToken.\\n  /// @return xNav The nav for xToken.\\n  function getCurrentNav()\\n    external\\n    view\\n    returns (\\n      uint256 baseNav,\\n      uint256 fNav,\\n      uint256 xNav\\n    );\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxFTokenMintable The amount of fToken can be minted.\\n  function maxMintableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxFTokenMintable);\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxXTokenMintable);\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio, with incentive.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @param incentiveRatio The extra incentive ratio, multipled by 1e18.\\n  /// @return maxBaseIn The amount of base token needed.\\n  /// @return maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXTokenWithIncentive(uint256 newCollateralRatio, uint256 incentiveRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseIn, uint256 maxXTokenMintable);\\n\\n  /// @notice Compute the amount of fToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of base token redeemed.\\n  /// @return maxFTokenRedeemable The amount of fToken needed.\\n  function maxRedeemableFToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxFTokenRedeemable);\\n\\n  /// @notice Compute the amount of xToken needed to reach the new collateral ratio.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return maxBaseOut The amount of base token redeemed.\\n  /// @return maxXTokenRedeemable The amount of xToken needed.\\n  function maxRedeemableXToken(uint256 newCollateralRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxXTokenRedeemable);\\n\\n  /// @notice Compute the maximum amount of fToken can be liquidated.\\n  /// @param newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @param incentiveRatio The extra incentive ratio, multipled by 1e18.\\n  /// @return maxBaseOut The maximum amount of base token can liquidate, without incentive.\\n  /// @return maxFTokenLiquidatable The maximum amount of fToken can be liquidated.\\n  function maxLiquidatable(uint256 newCollateralRatio, uint256 incentiveRatio)\\n    external\\n    view\\n    returns (uint256 maxBaseOut, uint256 maxFTokenLiquidatable);\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Mint fToken and xToken with some base token.\\n  /// @param baseIn The amount of base token deposited.\\n  /// @param recipient The address of receiver.\\n  /// @param option The mint option, xToken or fToken or both.\\n  /// @return fTokenOut The amount of fToken minted.\\n  /// @return xTokenOut The amount of xToken minted.\\n  function mint(\\n    uint256 baseIn,\\n    address recipient,\\n    MintOption option\\n  ) external returns (uint256 fTokenOut, uint256 xTokenOut);\\n\\n  /// @notice Redeem fToken and xToken to base tokne.\\n  /// @param fTokenIn The amount of fToken to redeem.\\n  /// @param xTokenIn The amount of xToken to redeem.\\n  /// @param owner The owner of the fToken or xToken.\\n  /// @param baseOut The amount of base token redeemed.\\n  function redeem(\\n    uint256 fTokenIn,\\n    uint256 xTokenIn,\\n    address owner\\n  ) external returns (uint256 baseOut);\\n\\n  /// @notice Add some base token to mint xToken with incentive.\\n  /// @param baseIn The amount of base token deposited.\\n  /// @param incentiveRatio The incentive ratio.\\n  /// @param recipient The address of receiver.\\n  /// @return xTokenOut The amount of xToken minted.\\n  function addBaseToken(\\n    uint256 baseIn,\\n    uint256 incentiveRatio,\\n    address recipient\\n  ) external returns (uint256 xTokenOut);\\n\\n  /// @notice Liquidate fToken to base token with incentive.\\n  /// @param fTokenIn The amount of fToken to liquidate.\\n  /// @param incentiveRatio The incentive ratio.\\n  /// @param owner The owner of the fToken.\\n  /// @param baseOut The amount of base token liquidated.\\n  function liquidate(\\n    uint256 fTokenIn,\\n    uint256 incentiveRatio,\\n    address owner\\n  ) external returns (uint256 baseOut);\\n\\n  /// @notice Self liquidate fToken to base token with incentive.\\n  /// @param baseSwapAmt The amount of base token used to buy fToken.\\n  /// @param incentiveRatio The incentive ratio.\\n  /// @param recipient The address of receiver of profited base token.\\n  /// @param data The calldata passed to market contract.\\n  /// @return baseOut The expected base token received.\\n  /// @return fAmt The amount of fToken liquidated.\\n  function selfLiquidate(\\n    uint256 baseSwapAmt,\\n    uint256 incentiveRatio,\\n    address recipient,\\n    bytes calldata data\\n  ) external returns (uint256 baseOut, uint256 fAmt);\\n\\n  /// @notice Settle the nav of base token, fToken and xToken.\\n  function protocolSettle() external;\\n\\n  /// @notice Transfer some base token to strategy contract.\\n  /// @param amount The amount of token to transfer.\\n  function transferToStrategy(uint256 amount) external;\\n\\n  /// @notice Notify base token profit from strategy contract.\\n  /// @param amount The amount of base token.\\n  function notifyStrategyProfit(uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/StableCoinMath.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\n\\nlibrary StableCoinMath {\\n  using SafeMathUpgradeable for uint256;\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The precision used to compute nav.\\n  uint256 internal constant PRECISION = 1e18;\\n\\n  /// @dev The precision used to compute nav.\\n  int256 internal constant PRECISION_I256 = 1e18;\\n\\n  /***********\\n   * Structs *\\n   ***********/\\n\\n  struct SwapState {\\n    // Current supply of base token\\n    uint256 baseSupply;\\n    // Current nav of base token\\n    uint256 baseNav;\\n    // The multiple used to compute current nav.\\n    int256 fMultiple;\\n    // Current supply of fractional token\\n    uint256 fSupply;\\n    // Current nav of fractional token\\n    uint256 fNav;\\n    // Current supply of leveraged token\\n    uint256 xSupply;\\n    // Current nav of leveraged token\\n    uint256 xNav;\\n  }\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  ///\\n  /// @dev If the current collateral ratio <= new collateral ratio, we should return 0.\\n  ///\\n  /// @param state The current state.\\n  /// @param _newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return _maxBaseIn The amount of base token needed.\\n  /// @return _maxFTokenMintable The amount of fToken can be minted.\\n  function maxMintableFToken(SwapState memory state, uint256 _newCollateralRatio)\\n    internal\\n    pure\\n    returns (uint256 _maxBaseIn, uint256 _maxFTokenMintable)\\n  {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n + dn) * v = (nf + df) * vf + nx * vx\\n    //  (n + dn) * v / ((nf + df) * vf) = ncr\\n    // =>\\n    //  n * v - ncr * nf * vf = (ncr - 1) * dn * v\\n    //  n * v - ncr * nf * vf = (ncr - 1) * df * vf\\n    // =>\\n    //  dn = (n * v - ncr * nf * vf) / ((ncr - 1) * v)\\n    //  df = (n * v - ncr * nf * vf) / ((ncr - 1) * vf)\\n\\n    uint256 _baseVal = state.baseSupply.mul(state.baseNav).mul(PRECISION);\\n    uint256 _fVal = _newCollateralRatio.mul(state.fSupply).mul(state.fNav);\\n\\n    if (_baseVal > _fVal) {\\n      _newCollateralRatio = _newCollateralRatio.sub(PRECISION);\\n      uint256 _delta = _baseVal - _fVal;\\n\\n      _maxBaseIn = _delta.div(state.baseNav.mul(_newCollateralRatio));\\n      _maxFTokenMintable = _delta.div(state.fNav.mul(_newCollateralRatio));\\n    }\\n  }\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio.\\n  ///\\n  /// @dev If the current collateral ratio >= new collateral ratio, we should return 0.\\n  ///\\n  /// @param state The current state.\\n  /// @param _newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return _maxBaseIn The amount of base token needed.\\n  /// @return _maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXToken(SwapState memory state, uint256 _newCollateralRatio)\\n    internal\\n    pure\\n    returns (uint256 _maxBaseIn, uint256 _maxXTokenMintable)\\n  {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n + dn) * v = nf * vf + (nx + dx) * vx\\n    //  (n + dn) * v / (nf * vf) = ncr\\n    // =>\\n    //  n * v + dn * v = ncr * nf * vf\\n    //  n * v + dx * vx = ncr * nf * vf\\n    // =>\\n    //  dn = (ncr * nf * vf - n * v) / v\\n    //  dx = (ncr * nf * vf - n * v) / vx\\n\\n    uint256 _baseVal = state.baseNav.mul(state.baseSupply).mul(PRECISION);\\n    uint256 _fVal = _newCollateralRatio.mul(state.fSupply).mul(state.fNav);\\n\\n    if (_fVal > _baseVal) {\\n      uint256 _delta = _fVal - _baseVal;\\n\\n      _maxBaseIn = _delta.div(state.baseNav.mul(PRECISION));\\n      _maxXTokenMintable = _delta.div(state.xNav.mul(PRECISION));\\n    }\\n  }\\n\\n  /// @notice Compute the amount of base token needed to reach the new collateral ratio, with incentive.\\n  ///\\n  /// @dev If the current collateral ratio >= new collateral ratio, we should return 0.\\n  ///\\n  /// @param state The current state.\\n  /// @param _newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @param _incentiveRatio The extra incentive ratio, multipled by 1e18.\\n  /// @return _maxBaseIn The amount of base token needed.\\n  /// @return _maxXTokenMintable The amount of xToken can be minted.\\n  function maxMintableXTokenWithIncentive(\\n    SwapState memory state,\\n    uint256 _newCollateralRatio,\\n    uint256 _incentiveRatio\\n  ) internal pure returns (uint256 _maxBaseIn, uint256 _maxXTokenMintable) {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n + dn) * v = nf * (vf - dvf) + (nx + dx) * vx\\n    //  (n + dn) * v / (nf * (vf - dvf)) = ncr\\n    //  nf * dvf = lambda * dn * v\\n    //  dx * vx = (1 + lambda) * dn * v\\n    // =>\\n    //  n * v + dn * v = ncr * nf * vf - lambda * nrc * dn * v\\n    // =>\\n    //  dn = (ncr * nf * vf - n * v) / (v * (1 + lambda * ncr))\\n    //  dx = ((1 + lambda) * dn * v) / vx\\n\\n    uint256 _baseVal = state.baseNav.mul(state.baseSupply).mul(PRECISION);\\n    uint256 _fVal = _newCollateralRatio.mul(state.fSupply).mul(state.fNav);\\n\\n    if (_fVal > _baseVal) {\\n      uint256 _delta = _fVal - _baseVal;\\n\\n      _maxBaseIn = _delta.div(state.baseNav.mul(PRECISION + (_incentiveRatio * _newCollateralRatio) / PRECISION));\\n      _maxXTokenMintable = _maxBaseIn.mul(state.baseNav).mul(PRECISION + _incentiveRatio).div(\\n        state.xNav.mul(PRECISION)\\n      );\\n    }\\n  }\\n\\n  /// @notice Compute the amount of fToken needed to reach the new collateral ratio.\\n  ///\\n  /// @dev If the current collateral ratio >= new collateral ratio, we should return 0.\\n  ///\\n  /// @param state The current state.\\n  /// @param _newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return _maxBaseOut The amount of base token redeemed.\\n  /// @return _maxFTokenRedeemable The amount of fToken needed.\\n  function maxRedeemableFToken(SwapState memory state, uint256 _newCollateralRatio)\\n    internal\\n    pure\\n    returns (uint256 _maxBaseOut, uint256 _maxFTokenRedeemable)\\n  {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n - dn) * v = (nf - df) * vf + nx * vx\\n    //  (n - dn) * v / ((nf - df) * vf) = ncr\\n    // =>\\n    //  n * v - dn * v = ncr * nf * vf - ncr * dn * v\\n    //  n * v - df * vf = ncr * nf * vf - ncr * df * vf\\n    // =>\\n    //  df = (ncr * nf * vf - n * v) / ((ncr - 1) * vf)\\n    //  dn = (ncr * nf * vf - n * v) / ((ncr - 1) * v)\\n\\n    uint256 _baseVal = state.baseSupply.mul(state.baseNav).mul(PRECISION);\\n    uint256 _fVal = _newCollateralRatio.mul(state.fSupply).mul(state.fNav);\\n\\n    if (_fVal > _baseVal) {\\n      uint256 _delta = _fVal - _baseVal;\\n      _newCollateralRatio = _newCollateralRatio.sub(PRECISION);\\n\\n      _maxFTokenRedeemable = _delta.div(_newCollateralRatio.mul(state.fNav));\\n      _maxBaseOut = _delta.div(_newCollateralRatio.mul(state.baseNav));\\n    }\\n  }\\n\\n  /// @notice Compute the amount of xToken needed to reach the new collateral ratio.\\n  ///\\n  /// @dev If the current collateral ratio <= new collateral ratio, we should return 0.\\n  ///\\n  /// @param state The current state.\\n  /// @param _newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @return _maxBaseOut The amount of base token redeemed.\\n  /// @return _maxXTokenRedeemable The amount of xToken needed.\\n  function maxRedeemableXToken(SwapState memory state, uint256 _newCollateralRatio)\\n    internal\\n    pure\\n    returns (uint256 _maxBaseOut, uint256 _maxXTokenRedeemable)\\n  {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n - dn) * v = nf * vf + (nx - dx) * vx\\n    //  (n - dn) * v / (nf * vf) = ncr\\n    // =>\\n    //  n * v - dn * v = ncr * nf * vf\\n    //  n * v - dx * vx = ncr * nf * vf\\n    // =>\\n    //  dn = (n * v - ncr * nf * vf) / v\\n    //  dx = (n * v - ncr * nf * vf) / vx\\n\\n    uint256 _baseVal = state.baseSupply.mul(state.baseNav).mul(PRECISION);\\n    uint256 _fVal = _newCollateralRatio.mul(state.fSupply).mul(state.fNav);\\n\\n    if (_baseVal > _fVal) {\\n      uint256 _delta = _baseVal - _fVal;\\n\\n      _maxXTokenRedeemable = _delta.div(state.xNav.mul(PRECISION));\\n      _maxBaseOut = _delta.div(state.baseNav.mul(PRECISION));\\n    }\\n  }\\n\\n  /// @notice Compute the maximum amount of fToken can be liquidated.\\n  ///\\n  /// @dev If the current collateral ratio >= new collateral ratio, we should return 0.\\n  ///\\n  /// @param state The current state.\\n  /// @param _newCollateralRatio The target collateral ratio, multipled by 1e18.\\n  /// @param _incentiveRatio The extra incentive ratio, multipled by 1e18.\\n  /// @return _maxBaseOut The maximum amount of base token can liquidate, without incentive.\\n  /// @return _maxFTokenLiquidatable The maximum amount of fToken can be liquidated.\\n  function maxLiquidatable(\\n    SwapState memory state,\\n    uint256 _newCollateralRatio,\\n    uint256 _incentiveRatio\\n  ) internal pure returns (uint256 _maxBaseOut, uint256 _maxFTokenLiquidatable) {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n - dn) * v = (nf - df) * (vf - dvf) + nx * vx\\n    //  (n - dn) * v / ((nf - df) * (vf - dvf)) = ncr\\n    //  dn * v = nf * dvf + df * (vf - dvf)\\n    //  dn * v = df * vf * (1 + lambda)\\n    // =>\\n    //  n * v - dn * v = ncf * nf * vf - ncr * dn * v\\n    // =>\\n    //  dn = (ncr * nf * vf - n * v) / ((ncr - 1) * v)\\n    //  df = (dn * v) / ((1 + lambda) * vf)\\n\\n    uint256 _fVal = _newCollateralRatio.mul(state.fSupply).mul(state.fNav);\\n    uint256 _baseVal = state.baseSupply.mul(state.baseNav).mul(PRECISION);\\n\\n    if (_fVal > _baseVal) {\\n      uint256 _delta = _fVal - _baseVal;\\n      _newCollateralRatio = _newCollateralRatio.sub(PRECISION);\\n\\n      _maxBaseOut = _delta.div(state.baseNav.mul(_newCollateralRatio));\\n      _maxFTokenLiquidatable = _delta.div(_newCollateralRatio).mul(PRECISION).div(\\n        (PRECISION + _incentiveRatio).mul(state.fNav)\\n      );\\n    }\\n  }\\n\\n  /// @notice Mint fToken and xToken according to current collateral ratio.\\n  /// @param state The current state.\\n  /// @param _baseIn The amount of base token supplied.\\n  /// @return _fTokenOut The amount of fToken expected.\\n  /// @return _xTokenOut The amount of xToken expected.\\n  function mint(SwapState memory state, uint256 _baseIn)\\n    internal\\n    pure\\n    returns (uint256 _fTokenOut, uint256 _xTokenOut)\\n  {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n + dn) * v = (nf + df) * vf + (nx + dx) * vx\\n    //  ((nf + df) * vf) / ((n + dn) * v) = (nf * vf) / (n * v)\\n    //  ((nx + dx) * vx) / ((n + dn) * v) = (nx * vx) / (n * v)\\n    // =>\\n    //   df = nf * dn / n\\n    //   dx = nx * dn / n\\n    _fTokenOut = state.fSupply.mul(_baseIn).div(state.baseSupply);\\n    _xTokenOut = state.xSupply.mul(_baseIn).div(state.baseSupply);\\n  }\\n\\n  /// @notice Mint fToken.\\n  /// @param state The current state.\\n  /// @param _baseIn The amount of base token supplied.\\n  /// @return _fTokenOut The amount of fToken expected.\\n  function mintFToken(SwapState memory state, uint256 _baseIn) internal pure returns (uint256 _fTokenOut) {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n + dn) * v = (nf + df) * vf + nx * vx\\n    // =>\\n    //  df = dn * v / vf\\n    _fTokenOut = _baseIn.mul(state.baseNav).div(state.fNav);\\n  }\\n\\n  /// @notice Mint xToken.\\n  /// @param state The current state.\\n  /// @param _baseIn The amount of base token supplied.\\n  /// @return _xTokenOut The amount of xToken expected.\\n  function mintXToken(SwapState memory state, uint256 _baseIn) internal pure returns (uint256 _xTokenOut) {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n + dn) * v = nf * vf + (nx + dx) * vx\\n    // =>\\n    //  dx = (dn * v * nx) / (n * v - nf * vf)\\n    _xTokenOut = _baseIn.mul(state.baseNav).mul(state.xSupply);\\n    _xTokenOut = _xTokenOut.div(state.baseSupply.mul(state.baseNav).sub(state.fSupply.mul(state.fNav)));\\n  }\\n\\n  /// @notice Mint xToken with given incentive.\\n  /// @param state The current state.\\n  /// @param _baseIn The amount of base token supplied.\\n  /// @param _incentiveRatio The extra incentive given, multiplied by 1e18.\\n  /// @return _xTokenOut The amount of xToken expected.\\n  /// @return _fDeltaNav The change for nav of fToken.\\n  function mintXToken(\\n    SwapState memory state,\\n    uint256 _baseIn,\\n    uint256 _incentiveRatio\\n  ) internal pure returns (uint256 _xTokenOut, uint256 _fDeltaNav) {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n + dn) * v = nf * (vf - dvf) + (nx + dx) * vx\\n    // =>\\n    //  dn * v = dx * vx - nf * dvf\\n    //  nf * dvf = lambda * dn * v\\n    // =>\\n    //  dx * vx = (1 + lambda) * dn * v\\n    //  dvf = lambda * dn * v / nf\\n\\n    uint256 _deltaVal = _baseIn.mul(state.baseNav);\\n\\n    _xTokenOut = _deltaVal.mul(PRECISION + _incentiveRatio).div(PRECISION);\\n    _xTokenOut = _xTokenOut.div(state.xNav);\\n\\n    _fDeltaNav = _deltaVal.mul(_incentiveRatio).div(PRECISION);\\n    _fDeltaNav = _fDeltaNav.div(state.fSupply);\\n  }\\n\\n  /// @notice Redeem base token with fToken and xToken.\\n  /// @param state The current state.\\n  /// @param _fTokenIn The amount of fToken supplied.\\n  /// @param _xTokenIn The amount of xToken supplied.\\n  /// @return _baseOut The amount of base token expected.\\n  function redeem(\\n    SwapState memory state,\\n    uint256 _fTokenIn,\\n    uint256 _xTokenIn\\n  ) internal pure returns (uint256 _baseOut) {\\n    uint256 _xVal = state.baseSupply.mul(state.baseNav).sub(state.fSupply.mul(state.fNav));\\n\\n    //  n * v = nf * vf + nx * vx\\n    //  (n - dn) * v = (nf - df) * vf + (nx - dx) * vx\\n    // =>\\n    //  dn = (df * vf + dx * (n * v - nf * vf) / nx) / v\\n\\n    if (state.xSupply == 0) {\\n      _baseOut = _fTokenIn.mul(state.fNav).div(state.baseNav);\\n    } else {\\n      _baseOut = _fTokenIn.mul(state.fNav);\\n      _baseOut = _baseOut.add(_xTokenIn.mul(_xVal).div(state.xSupply));\\n      _baseOut = _baseOut.div(state.baseNav);\\n    }\\n  }\\n\\n  /// @notice Redeem base token with fToken and given incentive.\\n  /// @param state The current state.\\n  /// @param _fTokenIn The amount of fToken supplied.\\n  /// @param _incentiveRatio The extra incentive given, multiplied by 1e18.\\n  /// @return _baseOut The amount of base token expected.\\n  /// @return _fDeltaNav The change for nav of fToken.\\n  function liquidateWithIncentive(\\n    SwapState memory state,\\n    uint256 _fTokenIn,\\n    uint256 _incentiveRatio\\n  ) internal pure returns (uint256 _baseOut, uint256 _fDeltaNav) {\\n    //  n * v = nf * vf + nx * vx\\n    //  (n - dn) * v = (nf - df) * (vf - dvf) + nx * vx\\n    // =>\\n    //  dn * v = nf * dvf + df * (vf - dvf)\\n    //  dn * v = df * vf * (1 + lambda)\\n    // =>\\n    //  dn = df * vf * (1 + lambda) / v\\n    //  dvf = lambda * (df * vf) / (nf - df)\\n\\n    uint256 _fDeltaVal = _fTokenIn.mul(state.fNav);\\n\\n    _baseOut = _fDeltaVal.mul(PRECISION + _incentiveRatio).div(PRECISION);\\n    _baseOut = _baseOut.div(state.baseNav);\\n\\n    _fDeltaNav = _fDeltaVal.mul(_incentiveRatio).div(PRECISION);\\n    _fDeltaNav = _fDeltaNav.div(state.fSupply.sub(_fTokenIn));\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/steth/stETHTreasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\n\\nimport { IRebalancePool } from \\\"../interfaces/IRebalancePool.sol\\\";\\nimport { ILidoWstETH } from \\\"../../interfaces/ILidoWstETH.sol\\\";\\n\\nimport { Treasury } from \\\"../Treasury.sol\\\";\\n\\n// solhint-disable const-name-snakecase\\n// solhint-disable contract-name-camelcase\\n\\ncontract stETHTreasury is Treasury {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using SafeMathUpgradeable for uint256;\\n\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when someone harvest pending stETH rewards.\\n  /// @param caller The address of caller.\\n  /// @param totalRewards The amount of total harvested rewards.\\n  /// @param stabilityPoolRewards The amount of harvested rewards distributed to stability pool.\\n  /// @param harvestBounty The amount of harvested rewards distributed to caller as harvest bounty.\\n  event Harvest(address indexed caller, uint256 totalRewards, uint256 stabilityPoolRewards, uint256 harvestBounty);\\n\\n  /// @notice Emitted when the reward distribute ratio is updated.\\n  /// @param stabilityPoolRatio The new ratio of rewards given to stability pool.\\n  /// @param harvestBountyRatio The new ratio of rewards given to harvester.\\n  event UpdateRewardRatio(uint256 stabilityPoolRatio, uint256 harvestBountyRatio);\\n\\n  /// @notice Emitted when the address of platform contract is updated.\\n  /// @param platform The new address of platform contract.\\n  event UpdatePlatform(address platform);\\n\\n  /// @notice Emitted when the address of stability pool contract is updated.\\n  /// @param stabilityPool The new address of stability pool contract.\\n  event UpdateStabilityPool(address stabilityPool);\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The address of Lido's stETH token.\\n  address private constant stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;\\n\\n  /// @dev The address of Lido's wstETH token.\\n  address private constant wstETH = 0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0;\\n\\n  /// @dev The maximum ratio for harvest bounty.\\n  uint256 private constant MAX_HARVEST_BOUNTY = 1e17; // at most 10%\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The address platform contract.\\n  address public platform;\\n\\n  /// @notice The address of StabilityPool contract.\\n  address public stabilityPool;\\n\\n  /// @notice The ratio of rewards given to harvester.\\n  uint128 public harvestBountyRatio;\\n\\n  /// @notice The ratio of rewards given to stability pool.\\n  uint128 public stabilityPoolRatio;\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(uint256 _initialMintRatio) Treasury(_initialMintRatio) {}\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @notice Harvest pending stETH rewards to stability pool.\\n  function harvest() external {\\n    // convert stETH to wstETH\\n    uint256 _totalRewards = IERC20Upgradeable(stETH).balanceOf(address(this)).sub(totalBaseToken);\\n    uint256 _harvestBounty = (harvestBountyRatio * _totalRewards) / PRECISION;\\n    uint256 _stabilityPoolRewards = (stabilityPoolRatio * _totalRewards) / PRECISION;\\n\\n    emit Harvest(msg.sender, _totalRewards, _stabilityPoolRewards, _harvestBounty);\\n\\n    if (_harvestBounty > 0) {\\n      _totalRewards = _totalRewards - _harvestBounty;\\n\\n      IERC20Upgradeable(stETH).safeTransfer(msg.sender, _harvestBounty);\\n    }\\n\\n    if (_stabilityPoolRewards > 0) {\\n      _totalRewards = _totalRewards - _stabilityPoolRewards;\\n\\n      _approve(stETH, wstETH, _stabilityPoolRewards);\\n      _stabilityPoolRewards = ILidoWstETH(wstETH).wrap(_stabilityPoolRewards);\\n\\n      address _stabilityPool = stabilityPool;\\n      // deposit rewards to stability pool\\n      _approve(wstETH, _stabilityPool, _stabilityPoolRewards);\\n      IRebalancePool(_stabilityPool).depositReward(wstETH, _stabilityPoolRewards);\\n    }\\n\\n    if (_totalRewards > 0) {\\n      IERC20Upgradeable(stETH).safeTransfer(platform, _totalRewards);\\n    }\\n  }\\n\\n  /************************\\n   * Restricted Functions *\\n   ************************/\\n\\n  /// @notice Update the address of stability pool.\\n  /// @param _stabilityPool The address of new stability pool.\\n  function updateStabilityPool(address _stabilityPool) external onlyOwner {\\n    require(_stabilityPool != address(0), \\\"zero stability pool\\\");\\n    stabilityPool = _stabilityPool;\\n\\n    emit UpdateStabilityPool(_stabilityPool);\\n  }\\n\\n  /// @notice Update the address of platform contract.\\n  /// @param _platform The address of new platform contract.\\n  function updatePlatform(address _platform) external onlyOwner {\\n    require(_platform != address(0), \\\"zero platform\\\");\\n    platform = _platform;\\n\\n    emit UpdatePlatform(_platform);\\n  }\\n\\n  /// @notice Update the reward distribution ratio.\\n  /// @param _stabilityPoolRatio The new stability pool ratio.\\n  /// @param _harvestBountyRatio The new harvest bounty ratio.\\n  function updateRewardRatio(uint128 _stabilityPoolRatio, uint128 _harvestBountyRatio) external onlyOwner {\\n    require(_harvestBountyRatio + _stabilityPoolRatio <= PRECISION, \\\"ratio sum too large\\\");\\n    require(_harvestBountyRatio <= MAX_HARVEST_BOUNTY, \\\"ratio too large\\\");\\n\\n    harvestBountyRatio = _harvestBountyRatio;\\n    stabilityPoolRatio = _stabilityPoolRatio;\\n\\n    emit UpdateRewardRatio(_stabilityPoolRatio, _harvestBountyRatio);\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  function _approve(\\n    address _token,\\n    address _spender,\\n    uint256 _amount\\n  ) internal {\\n    IERC20Upgradeable(_token).safeApprove(_spender, 0);\\n    IERC20Upgradeable(_token).safeApprove(_spender, _amount);\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/f(x)/Treasury.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport { OwnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport { SafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\\\";\\nimport { SignedSafeMathUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/math/SignedSafeMathUpgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\\\";\\n\\nimport { ITwapOracle } from \\\"../price-oracle/interfaces/ITwapOracle.sol\\\";\\nimport { IAssetStrategy } from \\\"./interfaces/IAssetStrategy.sol\\\";\\nimport { IFractionalToken } from \\\"./interfaces/IFractionalToken.sol\\\";\\nimport { ILeveragedToken } from \\\"./interfaces/ILeveragedToken.sol\\\";\\nimport { IMarket } from \\\"./interfaces/IMarket.sol\\\";\\nimport { ITreasury } from \\\"./interfaces/ITreasury.sol\\\";\\n\\nimport { StableCoinMath } from \\\"./StableCoinMath.sol\\\";\\n\\n// solhint-disable no-empty-blocks\\n// solhint-disable not-rely-on-time\\n\\ncontract Treasury is OwnableUpgradeable, ITreasury {\\n  using SafeERC20Upgradeable for IERC20Upgradeable;\\n  using SafeMathUpgradeable for uint256;\\n  using SignedSafeMathUpgradeable for int256;\\n  using StableCoinMath for StableCoinMath.SwapState;\\n\\n  /**********\\n   * Events *\\n   **********/\\n\\n  /// @notice Emitted when the whitelist status for settle is updated.\\n  /// @param account The address of account to change.\\n  /// @param status The new whitelist status.\\n  event UpdateSettleWhitelist(address account, bool status);\\n\\n  /// @notice Emitted when the price oracle contract is updated.\\n  /// @param priceOracle The address of new price oracle.\\n  event UpdatePriceOracle(address priceOracle);\\n\\n  /// @notice Emitted when the strategy contract is updated.\\n  /// @param strategy The address of new strategy.\\n  event UpdateStrategy(address strategy);\\n\\n  /// @notice Emitted when the beta for fToken is updated.\\n  /// @param beta The new value of beta.\\n  event UpdateBeta(uint256 beta);\\n\\n  /// @notice Emitted when the base token cap is updated.\\n  /// @param baseTokenCap The new base token cap.\\n  event UpdateBaseTokenCap(uint256 baseTokenCap);\\n\\n  /*************\\n   * Constants *\\n   *************/\\n\\n  /// @dev The precision used to compute nav.\\n  uint256 internal constant PRECISION = 1e18;\\n\\n  /// @dev The precision used to compute nav.\\n  int256 private constant PRECISION_I256 = 1e18;\\n\\n  /// @dev The initial mint ratio for fToken.\\n  uint256 private immutable initialMintRatio;\\n\\n  /*************\\n   * Variables *\\n   *************/\\n\\n  /// @notice The address of market contract.\\n  address public market;\\n\\n  /// @inheritdoc ITreasury\\n  address public override baseToken;\\n\\n  /// @inheritdoc ITreasury\\n  address public override fToken;\\n\\n  /// @inheritdoc ITreasury\\n  address public override xToken;\\n\\n  /// @notice The address of price oracle contract.\\n  address public priceOracle;\\n\\n  /// @notice The volitality multiple of fToken compare to base token.\\n  uint256 public beta;\\n\\n  /// @inheritdoc ITreasury\\n  uint256 public override lastPermissionedPrice;\\n\\n  /// @notice The maximum amount of base token can be deposited.\\n  uint256 public baseTokenCap;\\n\\n  /// @inheritdoc ITreasury\\n  uint256 public override totalBaseToken;\\n\\n  /// @inheritdoc ITreasury\\n  address public override strategy;\\n\\n  /// @inheritdoc ITreasury\\n  uint256 public override strategyUnderlying;\\n\\n  /// @notice Whether the sender is allowed to do settlement.\\n  mapping(address => bool) public settleWhitelist;\\n\\n  /// @dev Slots for future use.\\n  uint256[38] private _gap;\\n\\n  /************\\n   * Modifier *\\n   ************/\\n\\n  modifier onlyMarket() {\\n    require(msg.sender == market, \\\"Only market\\\");\\n    _;\\n  }\\n\\n  modifier onlyStrategy() {\\n    require(msg.sender == strategy, \\\"Only strategy\\\");\\n    _;\\n  }\\n\\n  /***************\\n   * Constructor *\\n   ***************/\\n\\n  constructor(uint256 _initialMintRatio) {\\n    require(0 < _initialMintRatio && _initialMintRatio < PRECISION, \\\"invalid initial mint ratio\\\");\\n    initialMintRatio = _initialMintRatio;\\n  }\\n\\n  function initialize(\\n    address _market,\\n    address _baseToken,\\n    address _fToken,\\n    address _xToken,\\n    address _priceOracle,\\n    uint256 _beta,\\n    uint256 _baseTokenCap\\n  ) external initializer {\\n    OwnableUpgradeable.__Ownable_init();\\n\\n    market = _market;\\n    baseToken = _baseToken;\\n    fToken = _fToken;\\n    xToken = _xToken;\\n    priceOracle = _priceOracle;\\n    beta = _beta;\\n    baseTokenCap = _baseTokenCap;\\n  }\\n\\n  /*************************\\n   * Public View Functions *\\n   *************************/\\n\\n  /// @inheritdoc ITreasury\\n  function collateralRatio() external view override returns (uint256) {\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n\\n    if (_state.baseSupply == 0) return PRECISION;\\n    if (_state.fSupply == 0 || _state.fNav == 0) return PRECISION * PRECISION;\\n\\n    return _state.baseSupply.mul(_state.baseNav).mul(PRECISION).div(_state.fSupply.mul(_state.fNav));\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  function getCurrentNav()\\n    external\\n    view\\n    override\\n    returns (\\n      uint256 _baseNav,\\n      uint256 _fNav,\\n      uint256 _xNav\\n    )\\n  {\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n\\n    _baseNav = _state.baseNav;\\n    _fNav = _state.fNav;\\n    _xNav = _state.xNav;\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  /// @dev If the current collateral ratio <= new collateral ratio, we should return 0.\\n  function maxMintableFToken(uint256 _newCollateralRatio)\\n    external\\n    view\\n    override\\n    returns (uint256 _maxBaseIn, uint256 _maxFTokenMintable)\\n  {\\n    require(_newCollateralRatio > PRECISION, \\\"collateral ratio too small\\\");\\n\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n    (_maxBaseIn, _maxFTokenMintable) = _state.maxMintableFToken(_newCollateralRatio);\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  /// @dev If the current collateral ratio >= new collateral ratio, we should return 0.\\n  function maxMintableXToken(uint256 _newCollateralRatio)\\n    external\\n    view\\n    override\\n    returns (uint256 _maxBaseIn, uint256 _maxXTokenMintable)\\n  {\\n    require(_newCollateralRatio > PRECISION, \\\"collateral ratio too small\\\");\\n\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n    (_maxBaseIn, _maxXTokenMintable) = _state.maxMintableXToken(_newCollateralRatio);\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  /// @dev If the current collateral ratio >= new collateral ratio, we should return 0.\\n  function maxMintableXTokenWithIncentive(uint256 _newCollateralRatio, uint256 _incentiveRatio)\\n    external\\n    view\\n    override\\n    returns (uint256 _maxBaseIn, uint256 _maxXTokenMintable)\\n  {\\n    require(_newCollateralRatio > PRECISION, \\\"collateral ratio too small\\\");\\n\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n    (_maxBaseIn, _maxXTokenMintable) = _state.maxMintableXTokenWithIncentive(_newCollateralRatio, _incentiveRatio);\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  /// @dev If the current collateral ratio >= new collateral ratio, we should return 0.\\n  function maxRedeemableFToken(uint256 _newCollateralRatio)\\n    external\\n    view\\n    override\\n    returns (uint256 _maxBaseOut, uint256 _maxFTokenRedeemable)\\n  {\\n    require(_newCollateralRatio > PRECISION, \\\"collateral ratio too small\\\");\\n\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n    (_maxBaseOut, _maxFTokenRedeemable) = _state.maxRedeemableFToken(_newCollateralRatio);\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  /// @dev If the current collateral ratio <= new collateral ratio, we should return 0.\\n  function maxRedeemableXToken(uint256 _newCollateralRatio)\\n    external\\n    view\\n    override\\n    returns (uint256 _maxBaseOut, uint256 _maxXTokenRedeemable)\\n  {\\n    require(_newCollateralRatio > PRECISION, \\\"collateral ratio too small\\\");\\n\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n    (_maxBaseOut, _maxXTokenRedeemable) = _state.maxRedeemableXToken(_newCollateralRatio);\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  /// @dev If the current collateral ratio >= new collateral ratio, we should return 0.\\n  function maxLiquidatable(uint256 _newCollateralRatio, uint256 _incentiveRatio)\\n    external\\n    view\\n    override\\n    returns (uint256 _maxBaseOut, uint256 _maxFTokenLiquidatable)\\n  {\\n    require(_newCollateralRatio > PRECISION, \\\"collateral ratio too small\\\");\\n\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n    (_maxBaseOut, _maxFTokenLiquidatable) = _state.maxLiquidatable(_newCollateralRatio, _incentiveRatio);\\n  }\\n\\n  /****************************\\n   * Public Mutated Functions *\\n   ****************************/\\n\\n  /// @inheritdoc ITreasury\\n  function mint(\\n    uint256 _baseIn,\\n    address _recipient,\\n    MintOption _option\\n  ) external override onlyMarket returns (uint256 _fTokenOut, uint256 _xTokenOut) {\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n\\n    if (_option == MintOption.FToken) {\\n      _fTokenOut = _state.mintFToken(_baseIn);\\n    } else if (_option == MintOption.XToken) {\\n      _xTokenOut = _state.mintXToken(_baseIn);\\n    } else {\\n      if (_state.baseSupply == 0) {\\n        uint256 _totalVal = _baseIn.mul(_state.baseNav);\\n        _fTokenOut = _totalVal.mul(initialMintRatio).div(PRECISION).div(PRECISION);\\n        _xTokenOut = _totalVal.div(PRECISION).sub(_fTokenOut);\\n      } else {\\n        (_fTokenOut, _xTokenOut) = _state.mint(_baseIn);\\n      }\\n    }\\n\\n    require(_state.baseSupply + _baseIn <= baseTokenCap, \\\"Exceed total cap\\\");\\n    totalBaseToken = _state.baseSupply + _baseIn;\\n\\n    if (_fTokenOut > 0) {\\n      IFractionalToken(fToken).mint(_recipient, _fTokenOut);\\n    }\\n    if (_xTokenOut > 0) {\\n      ILeveragedToken(xToken).mint(_recipient, _xTokenOut);\\n    }\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  function redeem(\\n    uint256 _fTokenIn,\\n    uint256 _xTokenIn,\\n    address _owner\\n  ) external override onlyMarket returns (uint256 _baseOut) {\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n\\n    _baseOut = _state.redeem(_fTokenIn, _xTokenIn);\\n\\n    if (_fTokenIn > 0) {\\n      IFractionalToken(fToken).burn(_owner, _fTokenIn);\\n    }\\n\\n    if (_xTokenIn > 0) {\\n      ILeveragedToken(xToken).burn(_owner, _xTokenIn);\\n    }\\n\\n    totalBaseToken = _state.baseSupply.sub(_baseOut);\\n\\n    _transferBaseToken(_baseOut, msg.sender);\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  function addBaseToken(\\n    uint256 _baseIn,\\n    uint256 _incentiveRatio,\\n    address _recipient\\n  ) external override onlyMarket returns (uint256 _xTokenOut) {\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n\\n    uint256 _fDeltaNav;\\n    (_xTokenOut, _fDeltaNav) = _state.mintXToken(_baseIn, _incentiveRatio);\\n\\n    require(_state.baseSupply + _baseIn <= baseTokenCap, \\\"Exceed total cap\\\");\\n    totalBaseToken = _state.baseSupply + _baseIn;\\n\\n    IFractionalToken(fToken).setNav(\\n      _state.fNav.sub(_fDeltaNav).mul(PRECISION).div(uint256(PRECISION_I256.add(_state.fMultiple)))\\n    );\\n\\n    if (_xTokenOut > 0) {\\n      ILeveragedToken(xToken).mint(_recipient, _xTokenOut);\\n    }\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  function liquidate(\\n    uint256 _fTokenIn,\\n    uint256 _incentiveRatio,\\n    address _owner\\n  ) external override onlyMarket returns (uint256 _baseOut) {\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n\\n    uint256 _fDeltaNav;\\n    (_baseOut, _fDeltaNav) = _state.liquidateWithIncentive(_fTokenIn, _incentiveRatio);\\n\\n    totalBaseToken = _state.baseSupply.sub(_baseOut);\\n\\n    address _fToken = fToken;\\n    IFractionalToken(_fToken).burn(_owner, _fTokenIn);\\n    IFractionalToken(_fToken).setNav(\\n      _state.fNav.sub(_fDeltaNav).mul(PRECISION).div(uint256(PRECISION_I256.add(_state.fMultiple)))\\n    );\\n\\n    if (_baseOut > 0) {\\n      _transferBaseToken(_baseOut, msg.sender);\\n    }\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  function selfLiquidate(\\n    uint256 _baseAmt,\\n    uint256 _incentiveRatio,\\n    address _recipient,\\n    bytes calldata _data\\n  ) external override onlyMarket returns (uint256 _baseOut, uint256 _fAmt) {\\n    // The supply are locked, so it is safe to use this memory variable.\\n    StableCoinMath.SwapState memory _state = _loadSwapState();\\n\\n    _transferBaseToken(_baseAmt, msg.sender);\\n    _fAmt = IMarket(msg.sender).onSelfLiquidate(_baseAmt, _data);\\n\\n    uint256 _fDeltaNav;\\n    (_baseOut, _fDeltaNav) = _state.liquidateWithIncentive(_fAmt, _incentiveRatio);\\n    require(_baseOut >= _baseAmt, \\\"self liquidate with loss\\\");\\n\\n    address _fToken = fToken;\\n    IFractionalToken(_fToken).burn(address(this), _fAmt);\\n    totalBaseToken = _state.baseSupply.sub(_baseOut);\\n\\n    IFractionalToken(_fToken).setNav(\\n      _state.fNav.sub(_fDeltaNav).mul(PRECISION).div(uint256(PRECISION_I256.add(_state.fMultiple)))\\n    );\\n\\n    if (_baseOut > _baseAmt) {\\n      _transferBaseToken(_baseOut - _baseAmt, _recipient);\\n    }\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  function protocolSettle() external override {\\n    require(settleWhitelist[msg.sender], \\\"only settle whitelist\\\");\\n    if (totalBaseToken == 0) return;\\n\\n    uint256 _newPrice = _fetchTwapPrice();\\n    int256 _fMultiple = _computeMultiple(_newPrice);\\n    uint256 _fNav = IFractionalToken(fToken).updateNav(_fMultiple);\\n\\n    emit ProtocolSettle(_newPrice, _fNav);\\n\\n    lastPermissionedPrice = _newPrice;\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  function transferToStrategy(uint256 _amount) external override onlyStrategy {\\n    IERC20Upgradeable(baseToken).safeTransfer(strategy, _amount);\\n    strategyUnderlying += _amount;\\n  }\\n\\n  /// @inheritdoc ITreasury\\n  /// @dev For future use.\\n  function notifyStrategyProfit(uint256 _amount) external override onlyStrategy {}\\n\\n  /*******************************\\n   * Public Restricted Functions *\\n   *******************************/\\n\\n  function initializePrice() external onlyOwner {\\n    require(lastPermissionedPrice == 0, \\\"only initialize price once\\\");\\n    uint256 _price = _fetchTwapPrice();\\n\\n    lastPermissionedPrice = _price;\\n\\n    IFractionalToken(fToken).setNav(PRECISION);\\n\\n    emit ProtocolSettle(_price, PRECISION);\\n  }\\n\\n  /// @notice Change address of strategy contract.\\n  /// @param _strategy The new address of strategy contract.\\n  function updateStrategy(address _strategy) external onlyOwner {\\n    strategy = _strategy;\\n\\n    emit UpdateStrategy(_strategy);\\n  }\\n\\n  /// @notice Change the value of fToken beta.\\n  /// @param _beta The new value of beta.\\n  function updateBeta(uint256 _beta) external onlyOwner {\\n    beta = _beta;\\n\\n    emit UpdateBeta(_beta);\\n  }\\n\\n  /// @notice Change address of price oracle contract.\\n  /// @param _priceOracle The new address of price oracle contract.\\n  function updatePriceOracle(address _priceOracle) external onlyOwner {\\n    priceOracle = _priceOracle;\\n\\n    emit UpdatePriceOracle(_priceOracle);\\n  }\\n\\n  /// @notice Update the whitelist status for settle account.\\n  /// @param _account The address of account to update.\\n  /// @param _status The status of the account to update.\\n  function updateSettleWhitelist(address _account, bool _status) external onlyOwner {\\n    settleWhitelist[_account] = _status;\\n\\n    emit UpdateSettleWhitelist(_account, _status);\\n  }\\n\\n  /// @notice Update the base token cap.\\n  /// @param _baseTokenCap The new base token cap.\\n  function updateBaseTokenCap(uint256 _baseTokenCap) external onlyOwner {\\n    baseTokenCap = _baseTokenCap;\\n\\n    emit UpdateBaseTokenCap(_baseTokenCap);\\n  }\\n\\n  /**********************\\n   * Internal Functions *\\n   **********************/\\n\\n  /// @dev Internal function to transfer base token to receiver.\\n  /// @param _amount The amount of base token to transfer.\\n  /// @param _recipient The address of receiver.\\n  function _transferBaseToken(uint256 _amount, address _recipient) internal {\\n    address _baseToken = baseToken;\\n    uint256 _balance = IERC20Upgradeable(_baseToken).balanceOf(address(this));\\n    if (_balance < _amount) {\\n      uint256 _diff = _amount - _balance;\\n      IAssetStrategy(strategy).withdrawToTreasury(_diff);\\n      strategyUnderlying = strategyUnderlying.sub(_diff);\\n\\n      // consider possible slippage here.\\n      _balance = IERC20Upgradeable(_baseToken).balanceOf(address(this));\\n      if (_amount > _balance) {\\n        _amount = _balance;\\n      }\\n    }\\n\\n    IERC20Upgradeable(_baseToken).safeTransfer(_recipient, _amount);\\n  }\\n\\n  /// @dev Internal function to load swap variable to memory\\n  function _loadSwapState() internal view returns (StableCoinMath.SwapState memory _state) {\\n    _state.baseSupply = totalBaseToken;\\n    _state.baseNav = _fetchTwapPrice();\\n\\n    if (_state.baseSupply == 0) {\\n      _state.fNav = PRECISION;\\n      _state.xNav = PRECISION;\\n    } else {\\n      _state.fMultiple = _computeMultiple(_state.baseNav);\\n      address _fToken = fToken;\\n      _state.fSupply = IERC20Upgradeable(_fToken).totalSupply();\\n      _state.fNav = IFractionalToken(_fToken).getNav(_state.fMultiple);\\n\\n      _state.xSupply = IERC20Upgradeable(xToken).totalSupply();\\n      if (_state.xSupply == 0) {\\n        // no xToken, treat the nav of xToken as 1.0\\n        _state.xNav = PRECISION;\\n      } else {\\n        _state.xNav = _state.baseSupply.mul(_state.baseNav).sub(_state.fSupply.mul(_state.fNav)).div(_state.xSupply);\\n      }\\n    }\\n  }\\n\\n  /// @dev Internal function to compute latest nav multiple based on current price.\\n  ///\\n  /// Below are some important formula to do the update.\\n  ///                newPrice\\n  /// ratio = --------------------- - 1\\n  ///         lastPermissionedPrice\\n  ///\\n  /// lastIntermediateFTokenNav = (1 + beta * ratio) * lastFTokenNav\\n  ///\\n  /// @param _newPrice The current price of base token.\\n  /// @return _fMultiple The multiple for fToken.\\n  function _computeMultiple(uint256 _newPrice) internal view returns (int256 _fMultiple) {\\n    int256 _lastPermissionedPrice = int256(lastPermissionedPrice);\\n\\n    int256 _ratio = int256(_newPrice).sub(_lastPermissionedPrice).mul(PRECISION_I256).div(_lastPermissionedPrice);\\n\\n    _fMultiple = _ratio.mul(int256(beta)).div(PRECISION_I256);\\n  }\\n\\n  /// @dev Internal function to fetch twap price.\\n  /// @return _price The twap price of the base token.\\n  function _fetchTwapPrice() internal view returns (uint256 _price) {\\n    _price = ITwapOracle(priceOracle).getTwap(block.timestamp);\\n\\n    require(_price > 0, \\\"invalid twap price\\\");\\n  }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ILidoWstETH.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ILidoWstETH {\\n  function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n  function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/price-oracle/interfaces/ITwapOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ITwapOracle {\\n  /// @notice Return TWAP with 18 decimal places in the epoch ending at the specified timestamp.\\n  ///         Zero is returned if TWAP in the epoch is not available.\\n  /// @param timestamp End Timestamp in seconds of the epoch\\n  /// @return TWAP (18 decimal places) in the epoch, or zero if not available\\n  function getTwap(uint256 timestamp) external view returns (uint256);\\n\\n  /// @notice Return the latest price with 18 decimal places.\\n  function getLatest() external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_initialMintRatio\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stabilityPoolRewards\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestBounty\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fNav\",\"type\":\"uint256\"}],\"name\":\"ProtocolSettle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"baseTokenCap\",\"type\":\"uint256\"}],\"name\":\"UpdateBaseTokenCap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"beta\",\"type\":\"uint256\"}],\"name\":\"UpdateBeta\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"platform\",\"type\":\"address\"}],\"name\":\"UpdatePlatform\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"}],\"name\":\"UpdatePriceOracle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"stabilityPoolRatio\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvestBountyRatio\",\"type\":\"uint256\"}],\"name\":\"UpdateRewardRatio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"UpdateSettleWhitelist\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"stabilityPool\",\"type\":\"address\"}],\"name\":\"UpdateStabilityPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"UpdateStrategy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incentiveRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"addBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_xTokenOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseTokenCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"beta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentNav\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseNav\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fNav\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xNav\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestBountyRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_baseToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_beta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseTokenCap\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initializePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPermissionedPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incentiveRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incentiveRatio\",\"type\":\"uint256\"}],\"name\":\"maxLiquidatable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBaseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFTokenLiquidatable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"maxMintableFToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBaseIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFTokenMintable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"maxMintableXToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBaseIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxXTokenMintable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCollateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incentiveRatio\",\"type\":\"uint256\"}],\"name\":\"maxMintableXTokenWithIncentive\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBaseIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxXTokenMintable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"maxRedeemableFToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBaseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxFTokenRedeemable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newCollateralRatio\",\"type\":\"uint256\"}],\"name\":\"maxRedeemableXToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBaseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxXTokenRedeemable\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"enum ITreasury.MintOption\",\"name\":\"_option\",\"type\":\"uint8\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xTokenOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"notifyStrategyProfit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platform\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolSettle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_xTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseOut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_incentiveRatio\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"selfLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fAmt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"settleWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stabilityPoolRatio\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBaseToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferToStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseTokenCap\",\"type\":\"uint256\"}],\"name\":\"updateBaseTokenCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_beta\",\"type\":\"uint256\"}],\"name\":\"updateBeta\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platform\",\"type\":\"address\"}],\"name\":\"updatePlatform\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"updatePriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_stabilityPoolRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_harvestBountyRatio\",\"type\":\"uint128\"}],\"name\":\"updateRewardRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateSettleWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stabilityPool\",\"type\":\"address\"}],\"name\":\"updateStabilityPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"updateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "stETHTreasury", "CompilerVersion": "v0.7.6+commit.7338295f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000000000000000000000000000006f05b59d3b20000", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}