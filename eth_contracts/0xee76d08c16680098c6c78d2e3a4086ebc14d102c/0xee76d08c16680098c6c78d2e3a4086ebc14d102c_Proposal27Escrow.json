{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/Proposal27Escrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.21;\\n\\nIGovernorAlpha constant governorAlpha = IGovernorAlpha(0x95129751769f99CC39824a0793eF4933DD8Bb74B);\\nDAI constant dai = DAI(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\naddress constant recipient = 0x284D72effa0a1a6E4801A682C464908c5716D697;\\n\\n// ETA of proposal #26\\n// https://etherscan.io/tx/0x9565f68623486c28c91fabd39443c63cd18a086075f7fe2a196bd6fb23c3a125#eventlog\\nuint256 constant proposal26Expiry = 1700947211;\\n\\n// Offer expires 3 hours before proposal 26 ETA\\nuint256 constant offerExpiry = proposal26Expiry - 3 hours;\\n\\n/**\\n * Our offer is 10,000 DAI in exchange for canceling proposal 27\\n * at least 3 hours before proposal 26 is ready to execute.\\n *\\n * If claim() has not been called by then, we will reclaim our DAI.\\n *\\n * To cancel the proposal, you must undelegate or transfer your NDX\\n * and then call cancel(27).\\n */\\ncontract Proposal27Escrow {\\n  address internal immutable offerer;\\n\\n  constructor() {\\n    offerer = msg.sender;\\n  }\\n\\n  function claim() external {\\n    // Call at least 3 hours before proposal 26 expires\\n    require(block.timestamp < offerExpiry);\\n    // Cancel proposal prior to calling claim()\\n    require(governorAlpha.state(27) == ProposalState.Canceled);\\n    dai.transfer(recipient, dai.balanceOf(address(this)));\\n  }\\n\\n  function refund() external {\\n    // If the expiry is reached without claim() having been called, we will reclaim our DAI\\n    require(block.timestamp > offerExpiry);\\n    dai.transfer(offerer, dai.balanceOf(address(this)));\\n  }\\n}\\n\\nenum ProposalState {\\n  Pending,\\n  Active,\\n  Canceled,\\n  Defeated,\\n  Succeeded,\\n  Queued,\\n  Expired,\\n  Executed\\n}\\n\\ninterface IGovernorAlpha {\\n  function state(uint256 proposalId) external view returns (ProposalState);\\n}\\n\\ninterface DAI {\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  function balanceOf(address account) external view returns (uint256);\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"src/=src/\",\r\n      \"forge-std/=lib/forge-std/src/\",\r\n      \"ds-test/=lib/forge-std/lib/ds-test/src/\",\r\n      \"vulcan/=lib/vulcan/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\",\r\n      \"appendCBOR\": true\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "Proposal27Escrow", "CompilerVersion": "v0.8.22+commit.4fc1097e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "Unlicense", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://1c99cd3307121fac0958c10e61b2ce5a2e8c1c8bef8c55a01f46cdd553cca273"}