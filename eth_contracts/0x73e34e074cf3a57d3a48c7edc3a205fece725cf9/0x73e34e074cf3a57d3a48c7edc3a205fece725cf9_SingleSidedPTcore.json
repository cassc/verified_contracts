{"SourceCode": "// SPDX-License-Identifier: GPL-3.0\r\npragma solidity 0.8.18;\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20Metadata is IERC20 {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    function _contextSuffixLength() internal view virtual returns (uint256) {\r\n        return 0;\r\n    }\r\n}\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * The default value of {decimals} is 18. To change this, you should override\r\n * this function so it returns a different value.\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the default value returned by this function, unless\r\n     * it's overridden.\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\n// TokenizedStrategy interface used for internal view delegateCalls.\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4626.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC4626 \"Tokenized Vault Standard\", as defined in\r\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\r\n *\r\n * _Available since v4.7._\r\n */\r\ninterface IERC4626 is IERC20, IERC20Metadata {\r\n    event Deposit(address indexed sender, address indexed owner, uint256 assets, uint256 shares);\r\n\r\n    event Withdraw(\r\n        address indexed sender,\r\n        address indexed receiver,\r\n        address indexed owner,\r\n        uint256 assets,\r\n        uint256 shares\r\n    );\r\n\r\n    /**\r\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\r\n     *\r\n     * - MUST be an ERC-20 token contract.\r\n     * - MUST NOT revert.\r\n     */\r\n    function asset() external view returns (address assetTokenAddress);\r\n\r\n    /**\r\n     * @dev Returns the total amount of the underlying asset that is \u201cmanaged\u201d by Vault.\r\n     *\r\n     * - SHOULD include any compounding that occurs from yield.\r\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT revert.\r\n     */\r\n    function totalAssets() external view returns (uint256 totalManagedAssets);\r\n\r\n    /**\r\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\r\n     * scenario where all the conditions are met.\r\n     *\r\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\r\n     * - MUST NOT show any variations depending on the caller.\r\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: This calculation MAY NOT reflect the \u201cper-user\u201d price-per-share, and instead should reflect the\r\n     * \u201caverage-user\u2019s\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\r\n     * from.\r\n     */\r\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\r\n     * through a deposit call.\r\n     *\r\n     * - MUST return a limited value if receiver is subject to some deposit limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\r\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\r\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   deposit execution, and are accounted for during deposit.\r\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\r\n     * - MUST return a limited value if receiver is subject to some mint limit.\r\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxMint(address receiver) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\r\n     * current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\r\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\r\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\r\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\r\n     */\r\n    function previewMint(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\r\n     *\r\n     * - MUST emit the Deposit event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\r\n     *   execution, and are accounted for during mint.\r\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\r\n     *   approving enough underlying tokens to the Vault contract, etc).\r\n     *\r\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\u2019s underlying asset token.\r\n     */\r\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\r\n     * Vault, through a withdraw call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\r\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\r\n     *   called\r\n     *   in the same transaction.\r\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\r\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\r\n     */\r\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   withdraw execution, and are accounted for during withdraw.\r\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\r\n\r\n    /**\r\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\r\n     * through a redeem call.\r\n     *\r\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\r\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\r\n     * - MUST NOT revert.\r\n     */\r\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\r\n\r\n    /**\r\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\r\n     * given current on-chain conditions.\r\n     *\r\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\r\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\r\n     *   same transaction.\r\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\r\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\r\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\r\n     * - MUST NOT revert.\r\n     *\r\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\r\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\r\n     */\r\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\r\n\r\n    /**\r\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\r\n     *\r\n     * - MUST emit the Withdraw event.\r\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\r\n     *   redeem execution, and are accounted for during redeem.\r\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\r\n     *   not having enough shares, etc).\r\n     *\r\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\r\n     * Those methods should be performed separately.\r\n     */\r\n    function redeem(uint256 shares, address receiver, address owner) external returns (uint256 assets);\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\r\n\r\n/**\r\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\r\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\r\n *\r\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\r\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\r\n * need to send a transaction, and thus is not required to hold Ether at all.\r\n *\r\n * ==== Security Considerations\r\n *\r\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\r\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\r\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\r\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\r\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\r\n * generally recommended is:\r\n *\r\n * ```solidity\r\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\r\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\r\n *     doThing(..., value);\r\n * }\r\n *\r\n * function doThing(..., uint256 value) public {\r\n *     token.safeTransferFrom(msg.sender, address(this), value);\r\n *     ...\r\n * }\r\n * ```\r\n *\r\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\r\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\r\n * {SafeERC20-safeTransferFrom}).\r\n *\r\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\r\n * contracts should have entry points that don't rely on permit.\r\n */\r\ninterface IERC20Permit {\r\n    /**\r\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\r\n     * given ``owner``'s signed approval.\r\n     *\r\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\r\n     * ordering also apply here.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `deadline` must be a timestamp in the future.\r\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\r\n     * over the EIP712-formatted function arguments.\r\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\r\n     *\r\n     * For more information on the signature format, see the\r\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\r\n     * section].\r\n     *\r\n     * CAUTION: See Security Considerations above.\r\n     */\r\n    function permit(\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) external;\r\n\r\n    /**\r\n     * @dev Returns the current nonce for `owner`. This value must be\r\n     * included whenever a signature is generated for {permit}.\r\n     *\r\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\r\n     * prevents a signature from being used multiple times.\r\n     */\r\n    function nonces(address owner) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\r\n}\r\n\r\n// Interface that implements the 4626 standard and the implementation functions\r\ninterface ITokenizedStrategy is IERC4626, IERC20Permit {\r\n    /*//////////////////////////////////////////////////////////////\r\n                                 EVENTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    event StrategyShutdown();\r\n\r\n    event NewTokenizedStrategy(\r\n        address indexed strategy,\r\n        address indexed asset,\r\n        string apiVersion\r\n    );\r\n\r\n    event Reported(\r\n        uint256 profit,\r\n        uint256 loss,\r\n        uint256 protocolFees,\r\n        uint256 performanceFees\r\n    );\r\n\r\n    event UpdatePerformanceFeeRecipient(\r\n        address indexed newPerformanceFeeRecipient\r\n    );\r\n\r\n    event UpdateKeeper(address indexed newKeeper);\r\n\r\n    event UpdatePerformanceFee(uint16 newPerformanceFee);\r\n\r\n    event UpdateManagement(address indexed newManagement);\r\n\r\n    event UpdateEmergencyAdmin(address indexed newEmergencyAdmin);\r\n\r\n    event UpdateProfitMaxUnlockTime(uint256 newProfitMaxUnlockTime);\r\n\r\n    event UpdatePendingManagement(address indexed newPendingManagement);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                           INITIALIZATION\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function initialize(\r\n        address _asset,\r\n        string memory _name,\r\n        address _management,\r\n        address _performanceFeeRecipient,\r\n        address _keeper\r\n    ) external;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    NON-STANDARD 4626 OPTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function withdraw(\r\n        uint256 assets,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    function redeem(\r\n        uint256 shares,\r\n        address receiver,\r\n        address owner,\r\n        uint256 maxLoss\r\n    ) external returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        MODIFIER HELPERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function requireManagement(address _sender) external view;\r\n\r\n    function requireKeeperOrManagement(address _sender) external view;\r\n\r\n    function requireEmergencyAuthorized(address _sender) external view;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        KEEPERS FUNCTIONS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function tend() external;\r\n\r\n    function report() external returns (uint256 _profit, uint256 _loss);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function MAX_FEE() external view returns (uint16);\r\n\r\n    function FACTORY() external view returns (address);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            GETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function apiVersion() external view returns (string memory);\r\n\r\n    function pricePerShare() external view returns (uint256);\r\n\r\n    function management() external view returns (address);\r\n\r\n    function pendingManagement() external view returns (address);\r\n\r\n    function keeper() external view returns (address);\r\n\r\n    function emergencyAdmin() external view returns (address);\r\n\r\n    function performanceFee() external view returns (uint16);\r\n\r\n    function performanceFeeRecipient() external view returns (address);\r\n\r\n    function fullProfitUnlockDate() external view returns (uint256);\r\n\r\n    function profitUnlockingRate() external view returns (uint256);\r\n\r\n    function profitMaxUnlockTime() external view returns (uint256);\r\n\r\n    function lastReport() external view returns (uint256);\r\n\r\n    function isShutdown() external view returns (bool);\r\n\r\n    function unlockedShares() external view returns (uint256);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            SETTERS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function setPendingManagement(address) external;\r\n\r\n    function acceptManagement() external;\r\n\r\n    function setKeeper(address _keeper) external;\r\n\r\n    function setEmergencyAdmin(address _emergencyAdmin) external;\r\n\r\n    function setPerformanceFee(uint16 _performanceFee) external;\r\n\r\n    function setPerformanceFeeRecipient(\r\n        address _performanceFeeRecipient\r\n    ) external;\r\n\r\n    function setProfitMaxUnlockTime(uint256 _profitMaxUnlockTime) external;\r\n\r\n    function shutdownStrategy() external;\r\n\r\n    function emergencyWithdraw(uint256 _amount) external;\r\n}\r\n\r\n/**\r\n * @title YearnV3 Base Strategy\r\n * @author yearn.finance\r\n * @notice\r\n *  BaseStrategy implements all of the required functionality to\r\n *  seamlessly integrate with the `TokenizedStrategy` implementation contract\r\n *  allowing anyone to easily build a fully permissionless ERC-4626 compliant\r\n *  Vault by inheriting this contract and overriding three simple functions.\r\n\r\n *  It utilizes an immutable proxy pattern that allows the BaseStrategy\r\n *  to remain simple and small. All standard logic is held within the\r\n *  `TokenizedStrategy` and is reused over any n strategies all using the\r\n *  `fallback` function to delegatecall the implementation so that strategists\r\n *  can only be concerned with writing their strategy specific code.\r\n *\r\n *  This contract should be inherited and the three main abstract methods\r\n *  `_deployFunds`, `_freeFunds` and `_harvestAndReport` implemented to adapt\r\n *  the Strategy to the particular needs it has to generate yield. There are\r\n *  other optional methods that can be implemented to further customize\r\n *  the strategy if desired.\r\n *\r\n *  All default storage for the strategy is controlled and updated by the\r\n *  `TokenizedStrategy`. The implementation holds a storage struct that\r\n *  contains all needed global variables in a manual storage slot. This\r\n *  means strategists can feel free to implement their own custom storage\r\n *  variables as they need with no concern of collisions. All global variables\r\n *  can be viewed within the Strategy by a simple call using the\r\n *  `TokenizedStrategy` variable. IE: TokenizedStrategy.globalVariable();.\r\n */\r\nabstract contract BaseStrategy {\r\n    /*//////////////////////////////////////////////////////////////\r\n                            MODIFIERS\r\n    //////////////////////////////////////////////////////////////*/\r\n    /**\r\n     * @dev Used on TokenizedStrategy callback functions to make sure it is post\r\n     * a delegateCall from this address to the TokenizedStrategy.\r\n     */\r\n    modifier onlySelf() {\r\n        _onlySelf();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from the strategies management.\r\n     */\r\n    modifier onlyManagement() {\r\n        TokenizedStrategy.requireManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from either the strategies\r\n     * management or the keeper.\r\n     */\r\n    modifier onlyKeepers() {\r\n        TokenizedStrategy.requireKeeperOrManagement(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Use to assure that the call is coming from either the strategies\r\n     * management or the emergency admin.\r\n     */\r\n    modifier onlyEmergencyAuthorized() {\r\n        TokenizedStrategy.requireEmergencyAuthorized(msg.sender);\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Require that the msg.sender is this address.\r\n     */\r\n    function _onlySelf() internal view {\r\n        require(msg.sender == address(this), \"!self\");\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            CONSTANTS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev This is the address of the TokenizedStrategy implementation\r\n     * contract that will be used by all strategies to handle the\r\n     * accounting, logic, storage etc.\r\n     *\r\n     * Any external calls to the that don't hit one of the functions\r\n     * defined in this base or the strategy will end up being forwarded\r\n     * through the fallback function, which will delegateCall this address.\r\n     *\r\n     * This address should be the same for every strategy, never be adjusted\r\n     * and always be checked before any integration with the Strategy.\r\n     */\r\n    address public constant tokenizedStrategyAddress =\r\n        0xBB51273D6c746910C7C06fe718f30c936170feD0;\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                            IMMUTABLES\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Underlying asset the Strategy is earning yield on.\r\n     * Stored here for cheap retrievals within the strategy.\r\n     */\r\n    ERC20 internal immutable asset;\r\n\r\n    /**\r\n     * @dev This variable is set to address(this) during initialization of each strategy.\r\n     *\r\n     * This can be used to retrieve storage data within the strategy\r\n     * contract as if it were a linked library.\r\n     *\r\n     *       i.e. uint256 totalAssets = TokenizedStrategy.totalAssets()\r\n     *\r\n     * Using address(this) will mean any calls using this variable will lead\r\n     * to a call to itself. Which will hit the fallback function and\r\n     * delegateCall that to the actual TokenizedStrategy.\r\n     */\r\n    ITokenizedStrategy internal immutable TokenizedStrategy;\r\n\r\n    /**\r\n     * @notice Used to initialize the strategy on deployment.\r\n     *\r\n     * This will set the `TokenizedStrategy` variable for easy\r\n     * internal view calls to the implementation. As well as\r\n     * initializing the default storage variables based on the\r\n     * parameters and using the deployer for the permissioned roles.\r\n     *\r\n     * @param _asset Address of the underlying asset.\r\n     * @param _name Name the strategy will use.\r\n     */\r\n    constructor(address _asset, string memory _name) {\r\n        asset = ERC20(_asset);\r\n\r\n        // Set instance of the implementation for internal use.\r\n        TokenizedStrategy = ITokenizedStrategy(address(this));\r\n\r\n        // Initialize the strategy's storage variables.\r\n        _delegateCall(\r\n            abi.encodeCall(\r\n                ITokenizedStrategy.initialize,\r\n                (_asset, _name, msg.sender, msg.sender, msg.sender)\r\n            )\r\n        );\r\n\r\n        // Store the tokenizedStrategyAddress at the standard implementation\r\n        // address storage slot so etherscan picks up the interface. This gets\r\n        // stored on initialization and never updated.\r\n        assembly {\r\n            sstore(\r\n                // keccak256('eip1967.proxy.implementation' - 1)\r\n                0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc,\r\n                tokenizedStrategyAddress\r\n            )\r\n        }\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                NEEDED TO BE OVERRIDDEN BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Can deploy up to '_amount' of 'asset' in the yield source.\r\n     *\r\n     * This function is called at the end of a {deposit} or {mint}\r\n     * call. Meaning that unless a whitelist is implemented it will\r\n     * be entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy can attempt\r\n     * to deposit in the yield source.\r\n     */\r\n    function _deployFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Should attempt to free the '_amount' of 'asset'.\r\n     *\r\n     * NOTE: The amount of 'asset' that is already loose has already\r\n     * been accounted for.\r\n     *\r\n     * This function is called during {withdraw} and {redeem} calls.\r\n     * Meaning that unless a whitelist is implemented it will be\r\n     * entirely permissionless and thus can be sandwiched or otherwise\r\n     * manipulated.\r\n     *\r\n     * Should not rely on asset.balanceOf(address(this)) calls other than\r\n     * for diff accounting purposes.\r\n     *\r\n     * Any difference between `_amount` and what is actually freed will be\r\n     * counted as a loss and passed on to the withdrawer. This means\r\n     * care should be taken in times of illiquidity. It may be better to revert\r\n     * if withdraws are simply illiquid so not to realize incorrect losses.\r\n     *\r\n     * @param _amount, The amount of 'asset' to be freed.\r\n     */\r\n    function _freeFunds(uint256 _amount) internal virtual;\r\n\r\n    /**\r\n     * @dev Internal function to harvest all rewards, redeploy any idle\r\n     * funds and return an accurate accounting of all funds currently\r\n     * held by the Strategy.\r\n     *\r\n     * This should do any needed harvesting, rewards selling, accrual,\r\n     * redepositing etc. to get the most accurate view of current assets.\r\n     *\r\n     * NOTE: All applicable assets including loose assets should be\r\n     * accounted for in this function.\r\n     *\r\n     * Care should be taken when relying on oracles or swap values rather\r\n     * than actual amounts as all Strategy profit/loss accounting will\r\n     * be done based on this returned value.\r\n     *\r\n     * This can still be called post a shutdown, a strategist can check\r\n     * `TokenizedStrategy.isShutdown()` to decide if funds should be\r\n     * redeployed or simply realize any profits/losses.\r\n     *\r\n     * @return _totalAssets A trusted and accurate account for the total\r\n     * amount of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function _harvestAndReport()\r\n        internal\r\n        virtual\r\n        returns (uint256 _totalAssets);\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                    OPTIONAL TO OVERRIDE BY STRATEGIST\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @dev Optional function for strategist to override that can\r\n     *  be called in between reports.\r\n     *\r\n     * If '_tend' is used tendTrigger() will also need to be overridden.\r\n     *\r\n     * This call can only be called by a permissioned role so may be\r\n     * through protected relays.\r\n     *\r\n     * This can be used to harvest and compound rewards, deposit idle funds,\r\n     * perform needed position maintenance or anything else that doesn't need\r\n     * a full report for.\r\n     *\r\n     *   EX: A strategy that can not deposit funds without getting\r\n     *       sandwiched can use the tend when a certain threshold\r\n     *       of idle to totalAssets has been reached.\r\n     *\r\n     * This will have no effect on PPS of the strategy till report() is called.\r\n     *\r\n     * @param _totalIdle The current amount of idle funds that are available to deploy.\r\n     */\r\n    function _tend(uint256 _totalIdle) internal virtual {}\r\n\r\n    /**\r\n     * @dev Optional trigger to override if tend() will be used by the strategy.\r\n     * This must be implemented if the strategy hopes to invoke _tend().\r\n     *\r\n     * @return . Should return true if tend() should be called by keeper or false if not.\r\n     */\r\n    function _tendTrigger() internal view virtual returns (bool) {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns if tend() should be called by a keeper.\r\n     *\r\n     * @return . Should return true if tend() should be called by keeper or false if not.\r\n     * @return . Calldata for the tend call.\r\n     */\r\n    function tendTrigger() external view virtual returns (bool, bytes memory) {\r\n        return (\r\n            // Return the status of the tend trigger.\r\n            _tendTrigger(),\r\n            // And the needed calldata either way.\r\n            abi.encodeWithSelector(ITokenizedStrategy.tend.selector)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that an address can deposit.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any deposit or mints to enforce\r\n     * any limits desired by the strategist. This can be used for either a\r\n     * traditional deposit limit or for implementing a whitelist etc.\r\n     *\r\n     *   EX:\r\n     *      if(isAllowed[_owner]) return super.availableDepositLimit(_owner);\r\n     *\r\n     * This does not need to take into account any conversion rates\r\n     * from shares to assets. But should know that any non max uint256\r\n     * amounts may be converted to shares. So it is recommended to keep\r\n     * custom amounts low enough as not to cause overflow when multiplied\r\n     * by `totalSupply`.\r\n     *\r\n     * @param . The address that is depositing into the strategy.\r\n     * @return . The available amount the `_owner` can deposit in terms of `asset`\r\n     */\r\n    function availableDepositLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @notice Gets the max amount of `asset` that can be withdrawn.\r\n     * @dev Defaults to an unlimited amount for any address. But can\r\n     * be overridden by strategists.\r\n     *\r\n     * This function will be called before any withdraw or redeem to enforce\r\n     * any limits desired by the strategist. This can be used for illiquid\r\n     * or sandwichable strategies. It should never be lower than `totalIdle`.\r\n     *\r\n     *   EX:\r\n     *       return TokenIzedStrategy.totalIdle();\r\n     *\r\n     * This does not need to take into account the `_owner`'s share balance\r\n     * or conversion rates from shares to assets.\r\n     *\r\n     * @param . The address that is withdrawing from the strategy.\r\n     * @return . The available amount that can be withdrawn in terms of `asset`\r\n     */\r\n    function availableWithdrawLimit(\r\n        address /*_owner*/\r\n    ) public view virtual returns (uint256) {\r\n        return type(uint256).max;\r\n    }\r\n\r\n    /**\r\n     * @dev Optional function for a strategist to override that will\r\n     * allow management to manually withdraw deployed funds from the\r\n     * yield source if a strategy is shutdown.\r\n     *\r\n     * This should attempt to free `_amount`, noting that `_amount` may\r\n     * be more than is currently deployed.\r\n     *\r\n     * NOTE: This will not realize any profits or losses. A separate\r\n     * {report} will be needed in order to record any profit/loss. If\r\n     * a report may need to be called after a shutdown it is important\r\n     * to check if the strategy is shutdown during {_harvestAndReport}\r\n     * so that it does not simply re-deploy all funds that had been freed.\r\n     *\r\n     * EX:\r\n     *   if(freeAsset > 0 && !TokenizedStrategy.isShutdown()) {\r\n     *       depositFunds...\r\n     *    }\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function _emergencyWithdraw(uint256 _amount) internal virtual {}\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                        TokenizedStrategy HOOKS\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Can deploy up to '_amount' of 'asset' in yield source.\r\n     * @dev Callback for the TokenizedStrategy to call during a {deposit}\r\n     * or {mint} to tell the strategy it can deploy funds.\r\n     *\r\n     * Since this can only be called after a {deposit} or {mint}\r\n     * delegateCall to the TokenizedStrategy msg.sender == address(this).\r\n     *\r\n     * Unless a whitelist is implemented this will be entirely permissionless\r\n     * and thus can be sandwiched or otherwise manipulated.\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy can\r\n     * attempt to deposit in the yield source.\r\n     */\r\n    function deployFunds(uint256 _amount) external virtual onlySelf {\r\n        _deployFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Should attempt to free the '_amount' of 'asset'.\r\n     * @dev Callback for the TokenizedStrategy to call during a withdraw\r\n     * or redeem to free the needed funds to service the withdraw.\r\n     *\r\n     * This can only be called after a 'withdraw' or 'redeem' delegateCall\r\n     * to the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @param _amount The amount of 'asset' that the strategy should attempt to free up.\r\n     */\r\n    function freeFunds(uint256 _amount) external virtual onlySelf {\r\n        _freeFunds(_amount);\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the accurate amount of all funds currently\r\n     * held by the Strategy.\r\n     * @dev Callback for the TokenizedStrategy to call during a report to\r\n     * get an accurate accounting of assets the strategy controls.\r\n     *\r\n     * This can only be called after a report() delegateCall to the\r\n     * TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * @return . A trusted and accurate account for the total amount\r\n     * of 'asset' the strategy currently holds including idle funds.\r\n     */\r\n    function harvestAndReport() external virtual onlySelf returns (uint256) {\r\n        return _harvestAndReport();\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_tend' when a keeper tends the strategy.\r\n     * @dev Callback for the TokenizedStrategy to initiate a _tend call in the strategy.\r\n     *\r\n     * This can only be called after a tend() delegateCall to the TokenizedStrategy\r\n     * so msg.sender == address(this).\r\n     *\r\n     * We name the function `tendThis` so that `tend` calls are forwarded to\r\n     * the TokenizedStrategy.\r\n\r\n     * @param _totalIdle The amount of current idle funds that can be\r\n     * deployed during the tend\r\n     */\r\n    function tendThis(uint256 _totalIdle) external virtual onlySelf {\r\n        _tend(_totalIdle);\r\n    }\r\n\r\n    /**\r\n     * @notice Will call the internal '_emergencyWithdraw' function.\r\n     * @dev Callback for the TokenizedStrategy during an emergency withdraw.\r\n     *\r\n     * This can only be called after a emergencyWithdraw() delegateCall to\r\n     * the TokenizedStrategy so msg.sender == address(this).\r\n     *\r\n     * We name the function `shutdownWithdraw` so that `emergencyWithdraw`\r\n     * calls are forwarded to the TokenizedStrategy.\r\n     *\r\n     * @param _amount The amount of asset to attempt to free.\r\n     */\r\n    function shutdownWithdraw(uint256 _amount) external virtual onlySelf {\r\n        _emergencyWithdraw(_amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Function used to delegate call the TokenizedStrategy with\r\n     * certain `_calldata` and return any return values.\r\n     *\r\n     * This is used to setup the initial storage of the strategy, and\r\n     * can be used by strategist to forward any other call to the\r\n     * TokenizedStrategy implementation.\r\n     *\r\n     * @param _calldata The abi encoded calldata to use in delegatecall.\r\n     * @return . The return value if the call was successful in bytes.\r\n     */\r\n    function _delegateCall(\r\n        bytes memory _calldata\r\n    ) internal returns (bytes memory) {\r\n        // Delegate call the tokenized strategy with provided calldata.\r\n        (bool success, bytes memory result) = tokenizedStrategyAddress\r\n            .delegatecall(_calldata);\r\n\r\n        // If the call reverted. Return the error.\r\n        if (!success) {\r\n            assembly {\r\n                let ptr := mload(0x40)\r\n                let size := returndatasize()\r\n                returndatacopy(ptr, 0, size)\r\n                revert(ptr, size)\r\n            }\r\n        }\r\n\r\n        // Return the result.\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Execute a function on the TokenizedStrategy and return any value.\r\n     *\r\n     * This fallback function will be executed when any of the standard functions\r\n     * defined in the TokenizedStrategy are called since they wont be defined in\r\n     * this contract.\r\n     *\r\n     * It will delegatecall the TokenizedStrategy implementation with the exact\r\n     * calldata and return any relevant values.\r\n     *\r\n     */\r\n    fallback() external {\r\n        // load our target address\r\n        address _tokenizedStrategyAddress = tokenizedStrategyAddress;\r\n        // Execute external function using delegatecall and return any value.\r\n        assembly {\r\n            // Copy function selector and any arguments.\r\n            calldatacopy(0, 0, calldatasize())\r\n            // Execute function delegatecall.\r\n            let result := delegatecall(\r\n                gas(),\r\n                _tokenizedStrategyAddress,\r\n                0,\r\n                calldatasize(),\r\n                0,\r\n                0\r\n            )\r\n            // Get any return value\r\n            returndatacopy(0, 0, returndatasize())\r\n            // Return any return value or error back to the caller\r\n            switch result\r\n            case 0 {\r\n                revert(0, returndatasize())\r\n            }\r\n            default {\r\n                return(0, returndatasize())\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n *   @title Base Health Check\r\n *   @author Yearn.finance\r\n *   @notice This contract can be inherited by any Yearn\r\n *   V3 strategy wishing to implement a health check during\r\n *   the `report` function in order to prevent any unexpected\r\n *   behavior from being permanently recorded as well as the\r\n *   `checkHealth` modifier.\r\n *\r\n *   A strategist simply needs to inherit this contract. Set\r\n *   the limit ratios to the desired amounts and then\r\n *   override `_harvestAndReport()` just as they otherwise\r\n *  would. If the profit or loss that would be recorded is\r\n *   outside the acceptable bounds the tx will revert.\r\n *\r\n *   The healthcheck does not prevent a strategy from reporting\r\n *   losses, but rather can make sure manual intervention is\r\n *   needed before reporting an unexpected loss or profit.\r\n */\r\nabstract contract BaseHealthCheck is BaseStrategy {\r\n    // Can be used to determine if a healthcheck should be called.\r\n    // Defaults to true;\r\n    bool public doHealthCheck = true;\r\n\r\n    uint256 internal constant MAX_BPS = 10_000;\r\n\r\n    // Default profit limit to 100%.\r\n    uint16 private _profitLimitRatio = uint16(MAX_BPS);\r\n\r\n    // Defaults loss limit to 0.\r\n    uint16 private _lossLimitRatio;\r\n\r\n    constructor(\r\n        address _asset,\r\n        string memory _name\r\n    ) BaseStrategy(_asset, _name) {}\r\n\r\n    /**\r\n     * @notice Returns the current profit limit ratio.\r\n     * @dev Use a getter function to keep the variable private.\r\n     * @return . The current profit limit ratio.\r\n     */\r\n    function profitLimitRatio() public view returns (uint256) {\r\n        return _profitLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Returns the current loss limit ratio.\r\n     * @dev Use a getter function to keep the variable private.\r\n     * @return . The current loss limit ratio.\r\n     */\r\n    function lossLimitRatio() public view returns (uint256) {\r\n        return _lossLimitRatio;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `profitLimitRatio`.\r\n     * @dev Denominated in basis points. I.E. 1_000 == 10%.\r\n     * @param _newProfitLimitRatio The mew profit limit ratio.\r\n     */\r\n    function setProfitLimitRatio(\r\n        uint256 _newProfitLimitRatio\r\n    ) external onlyManagement {\r\n        _setProfitLimitRatio(_newProfitLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Internally set the profit limit ratio. Denominated\r\n     * in basis points. I.E. 1_000 == 10%.\r\n     * @param _newProfitLimitRatio The mew profit limit ratio.\r\n     */\r\n    function _setProfitLimitRatio(uint256 _newProfitLimitRatio) internal {\r\n        require(_newProfitLimitRatio > 0, \"!zero profit\");\r\n        require(_newProfitLimitRatio <= type(uint16).max, \"!too high\");\r\n        _profitLimitRatio = uint16(_newProfitLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @notice Set the `lossLimitRatio`.\r\n     * @dev Denominated in basis points. I.E. 1_000 == 10%.\r\n     * @param _newLossLimitRatio The new loss limit ratio.\r\n     */\r\n    function setLossLimitRatio(\r\n        uint256 _newLossLimitRatio\r\n    ) external onlyManagement {\r\n        _setLossLimitRatio(_newLossLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @dev Internally set the loss limit ratio. Denominated\r\n     * in basis points. I.E. 1_000 == 10%.\r\n     * @param _newLossLimitRatio The new loss limit ratio.\r\n     */\r\n    function _setLossLimitRatio(uint256 _newLossLimitRatio) internal {\r\n        require(_newLossLimitRatio < MAX_BPS, \"!loss limit\");\r\n        _lossLimitRatio = uint16(_newLossLimitRatio);\r\n    }\r\n\r\n    /**\r\n     * @notice Turns the healthcheck on and off.\r\n     * @dev If turned off the next report will auto turn it back on.\r\n     * @param _doHealthCheck Bool if healthCheck should be done.\r\n     */\r\n    function setDoHealthCheck(bool _doHealthCheck) public onlyManagement {\r\n        doHealthCheck = _doHealthCheck;\r\n    }\r\n\r\n    /**\r\n     * @notice OVerrides the default {harvestAndReport} to include a healthcheck.\r\n     * @return _totalAssets New totalAssets post report.\r\n     */\r\n    function harvestAndReport()\r\n        external\r\n        override\r\n        onlySelf\r\n        returns (uint256 _totalAssets)\r\n    {\r\n        // Let the strategy report.\r\n        _totalAssets = _harvestAndReport();\r\n\r\n        // Run the healthcheck on the amount returned.\r\n        _executeHealthCheck(_totalAssets);\r\n    }\r\n\r\n    /**\r\n     * @dev To be called during a report to make sure the profit\r\n     * or loss being recorded is within the acceptable bound.\r\n     *\r\n     * @param _newTotalAssets The amount that will be reported.\r\n     */\r\n    function _executeHealthCheck(uint256 _newTotalAssets) internal virtual {\r\n        if (!doHealthCheck) {\r\n            doHealthCheck = true;\r\n            return;\r\n        }\r\n\r\n        // Get the current total assets from the implementation.\r\n        uint256 currentTotalAssets = TokenizedStrategy.totalAssets();\r\n\r\n        if (_newTotalAssets > currentTotalAssets) {\r\n            require(\r\n                ((_newTotalAssets - currentTotalAssets) <=\r\n                    (currentTotalAssets * uint256(_profitLimitRatio)) /\r\n                        MAX_BPS),\r\n                \"healthCheck\"\r\n            );\r\n        } else if (currentTotalAssets > _newTotalAssets) {\r\n            require(\r\n                (currentTotalAssets - _newTotalAssets <=\r\n                    ((currentTotalAssets * uint256(_lossLimitRatio)) /\r\n                        MAX_BPS)),\r\n                \"healthCheck\"\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\r\n\r\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary Address {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     *\r\n     * Furthermore, `isContract` will also return true if the target contract within\r\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\r\n     * which only has an effect at the end of a transaction.\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a delegate call.\r\n     *\r\n     * _Available since v3.4._\r\n     */\r\n    function functionDelegateCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.delegatecall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * @title SafeERC20\r\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\r\n * contract returns false). Tokens that return no value (and instead revert or\r\n * throw on failure) are also supported, non-reverting calls are assumed to be\r\n * successful.\r\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\r\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\r\n */\r\nlibrary SafeERC20 {\r\n    using Address for address;\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\r\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Deprecated. This function has issues similar to the ones found in\r\n     * {IERC20-approve}, and its usage is discouraged.\r\n     *\r\n     * Whenever possible, use {safeIncreaseAllowance} and\r\n     * {safeDecreaseAllowance} instead.\r\n     */\r\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\r\n        // safeApprove should only be called when setting an initial allowance,\r\n        // or when resetting it to zero. To increase and decrease it, use\r\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\r\n        require(\r\n            (value == 0) || (token.allowance(address(this), spender) == 0),\r\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\r\n        );\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\r\n    }\r\n\r\n    /**\r\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        uint256 oldAllowance = token.allowance(address(this), spender);\r\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\r\n    }\r\n\r\n    /**\r\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful.\r\n     */\r\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\r\n        unchecked {\r\n            uint256 oldAllowance = token.allowance(address(this), spender);\r\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\r\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\r\n     * to be set to zero before setting it to a non-zero value, such as USDT.\r\n     */\r\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\r\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\r\n\r\n        if (!_callOptionalReturnBool(token, approvalCall)) {\r\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\r\n            _callOptionalReturn(token, approvalCall);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\r\n     * Revert on invalid signature.\r\n     */\r\n    function safePermit(\r\n        IERC20Permit token,\r\n        address owner,\r\n        address spender,\r\n        uint256 value,\r\n        uint256 deadline,\r\n        uint8 v,\r\n        bytes32 r,\r\n        bytes32 s\r\n    ) internal {\r\n        uint256 nonceBefore = token.nonces(owner);\r\n        token.permit(owner, spender, value, deadline, v, r, s);\r\n        uint256 nonceAfter = token.nonces(owner);\r\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     */\r\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\r\n        // the target address contains contract code and also asserts for success in the low-level call.\r\n\r\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\r\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\r\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\r\n     * @param token The token targeted by the call.\r\n     * @param data The call data (encoded using abi.encode or one of its variants).\r\n     *\r\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\r\n     */\r\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\r\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\r\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\r\n        // and not revert is the subcall reverts.\r\n\r\n        (bool success, bytes memory returndata) = address(token).call(data);\r\n        return\r\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\r\n    }\r\n}\r\n\r\ninterface IPendleMarket {\r\n    function readTokens()\r\n        external\r\n        view\r\n        returns (address _SY, address _PT, address _YT);\r\n    function isExpired() external view returns (bool);\r\n}\r\n\r\ninterface ISY {\r\n    function deposit(\r\n        address receiver,\r\n        address tokenIn,\r\n        uint256 amountTokenToDeposit,\r\n        uint256 minSharesOut\r\n    ) external payable returns (uint256 amountSharesOut);\r\n    function redeem(\r\n        address receiver,\r\n        uint256 amountSharesToRedeem,\r\n        address tokenOut,\r\n        uint256 minTokenOut,\r\n        bool burnFromInternalBalance\r\n    ) external payable returns (uint256 amountTokenOut);\r\n    function isValidTokenIn(address) external view returns (bool);\r\n    function isValidTokenOut(address) external view returns (bool);\r\n    function previewRedeem(\r\n        address tokenOut,\r\n        uint256 amountSharesToRedeem\r\n    ) external view returns (uint256 amountTokenOut);\r\n}\r\n\r\ninterface IPendleRouter {\r\n    struct ApproxParams {\r\n        uint256 guessMin;\r\n        uint256 guessMax;\r\n        uint256 guessOffchain; // pass 0 in to skip this variable\r\n        uint256 maxIteration; // every iteration, the diff between guessMin and guessMax will be divided by 2\r\n        uint256 eps; // the max eps between the returned result & the correct result, base 1e18. Normally this number will be set\r\n        // to 1e15 (1e18/1000 = 0.1%)\r\n    }\r\n\r\n    struct LimitOrderData {\r\n        address limitRouter;\r\n        uint256 epsSkipMarket; // only used for swap operations, will be ignored otherwise\r\n        FillOrderParams[] normalFills;\r\n        FillOrderParams[] flashFills;\r\n        bytes optData;\r\n    }\r\n\r\n    struct FillOrderParams {\r\n        Order order;\r\n        bytes signature;\r\n        uint256 makingAmount;\r\n    }\r\n\r\n    struct Order {\r\n        uint256 salt;\r\n        uint256 expiry;\r\n        uint256 nonce;\r\n        OrderType orderType;\r\n        address token;\r\n        address YT;\r\n        address maker;\r\n        address receiver;\r\n        uint256 makingAmount;\r\n        uint256 lnImpliedRate;\r\n        uint256 failSafeRate;\r\n        bytes permit;\r\n    }\r\n\r\n    enum OrderType {\r\n        SY_FOR_PT,\r\n        PT_FOR_SY,\r\n        SY_FOR_YT,\r\n        YT_FOR_SY\r\n    }\r\n\r\n    function swapExactSyForPt(\r\n        address receiver,\r\n        address market,\r\n        uint256 exactSyIn,\r\n        uint256 minPtOut,\r\n        ApproxParams calldata guessPtOut,\r\n        LimitOrderData calldata limit\r\n    ) external returns (uint256 netPtOut, uint256 netSyFee);\r\n\r\n    function swapExactPtForSy(\r\n        address receiver,\r\n        address market,\r\n        uint256 exactPtIn,\r\n        uint256 minSyOut,\r\n        LimitOrderData calldata limit\r\n    ) external returns (uint256 netSyOut, uint256 netSyFee);\r\n\r\n    function redeemPyToSy(\r\n        address receiver,\r\n        address YT,\r\n        uint256 netPyIn,\r\n        uint256 minSyOut\r\n    ) external returns (uint256 netSyOut);\r\n}\r\n\r\ninterface IPendleOracle {\r\n    function getPtToSyRate(\r\n        address market,\r\n        uint32 oracleDuration\r\n    ) external view returns (uint256 rate);\r\n    function getOracleState(\r\n        address market,\r\n        uint32 oracleDuration\r\n    )\r\n        external\r\n        view\r\n        returns (\r\n            bool increaseCardinalityRequired,\r\n            uint16 cardinalityRequired,\r\n            bool oldestObservationSatisfied\r\n        );\r\n}\r\n\r\n/// @title yearn-v3-SingleSidedPTcore\r\n/// @author mil0x\r\n/// @notice yearn-v3 Strategy that invests into Pendle PT positions.\r\ncontract SingleSidedPTcore is BaseHealthCheck {\r\n    using SafeERC20 for ERC20;\r\n\r\n    ///@notice Address of our Pendle market.\r\n    address public market;\r\n    address internal immutable oracle;\r\n\r\n    ///@notice Oracle TWAP duration, in seconds.\r\n    uint32 public oracleDuration;\r\n\r\n    ///@notice Bool if the strategy is open for any depositors. Default = true.\r\n    bool public open = true;\r\n\r\n    ///@notice Mapping of addresses allowed to deposit.\r\n    mapping(address => bool) public allowed;\r\n\r\n    struct TradeParams {\r\n        ///@notice Set the minimum asset amount to be converted to PT. Set to max to prevent PT buying.\r\n        uint128 minAssetAmountToPT;\r\n        ///@notice The max in asset will be invested by the keeper at a time.\r\n        uint128 maxSingleTrade;\r\n    }\r\n\r\n    ///@notice Parameters used to contrin size of strategy investing into PT.\r\n    TradeParams public tradeParams;\r\n\r\n    ///@notice The total deposit limit for the strategy. Use in case we want to cap a given strategy.\r\n    uint256 public depositLimit = type(uint256).max;\r\n\r\n    address internal constant pendleRouter =\r\n        0x888888888889758F76e7103c6CbF23ABbF58F946;\r\n\r\n    ///@notice Parameters passed to Pendle's router for swaps in using binary search.\r\n    IPendleRouter.ApproxParams public routerParams;\r\n\r\n    ///@notice Address of this market's SY token.\r\n    address public immutable SY;\r\n\r\n    ///@notice Address of this market's PT token.\r\n    address public PT;\r\n    address internal YT;\r\n\r\n    ///@notice Amount in Basis Points to allow for slippage when reporting.\r\n    uint256 public swapSlippageBPS;\r\n\r\n    ///@notice Amount in Basis Points to account for as buffer when reporting. Can also manually account for bigger depeg scenarios.\r\n    uint256 public bufferSlippageBPS;\r\n\r\n    // Struct for all variables involved in tendTrigger\r\n    struct TendTriggerParams {\r\n        ///@notice The amount in asset that will trigger a tend if idle.\r\n        uint128 depositTrigger;\r\n        ///@notice The max amount the base fee can be for a tend to happen.\r\n        uint48 maxTendBaseFee;\r\n        ///@notice Minimum time between deposits to wait.\r\n        uint40 minDepositInterval;\r\n        ///@notice Time stamp of the last deployment of funds.\r\n        uint40 lastDeposit;\r\n    }\r\n\r\n    ///@notice Contains adjustable variables that govern when to tend this strategy.\r\n    TendTriggerParams public tendTriggerParams;\r\n\r\n    ///@notice Yearn governance\r\n    address public immutable GOV;\r\n\r\n    uint256 internal constant WAD = 1e18;\r\n\r\n    constructor(\r\n        address _asset,\r\n        address _market,\r\n        address _oracle,\r\n        address _GOV,\r\n        string memory _name\r\n    ) BaseHealthCheck(_asset, _name) {\r\n        market = _market;\r\n        require(!_isExpired(), \"expired\");\r\n        oracle = _oracle;\r\n        //Default oracle duration to 1 hour price smoothing recommendation by Pendle Finance\r\n        oracleDuration = 3600;\r\n\r\n        //Default maxSingleTrade to 15 ETH as a majority of markets are ETH based. Change this for non-ETH.\r\n        tradeParams.maxSingleTrade = 15e18;\r\n\r\n        (SY, PT, YT) = IPendleMarket(_market).readTokens();\r\n        require(ISY(SY).isValidTokenOut(_asset), \"!valid out\");\r\n        require(ISY(SY).isValidTokenIn(_asset), \"!valid in\");\r\n\r\n        // Default slippage to 0.5%.\r\n        swapSlippageBPS = 50;\r\n        bufferSlippageBPS = 50;\r\n\r\n        routerParams.guessMax = type(uint256).max;\r\n        routerParams.maxIteration = 256;\r\n        routerParams.eps = 1e15; // max 0.1% unused\r\n\r\n        TendTriggerParams memory _tendTriggerParams;\r\n        _tendTriggerParams.depositTrigger = 5e18; // The amount in asset that will trigger a tend if idle. Default to 5 ETH; update for non-ETH.\r\n        _tendTriggerParams.maxTendBaseFee = 20e9; // The max amount the base fee can be for a tend to happen. Default max tend fee to 20 gwei.\r\n        _tendTriggerParams.minDepositInterval = 43200; // Minimum time between deposits to wait. Default min deposit interval to 12 hours.\r\n        tendTriggerParams = _tendTriggerParams;\r\n\r\n        // Allow a 500% gain.\r\n        _setProfitLimitRatio(500_00);\r\n\r\n        GOV = _GOV;\r\n\r\n        //approvals:\r\n        ERC20(_asset).forceApprove(SY, type(uint256).max);\r\n        ERC20(SY).forceApprove(pendleRouter, type(uint256).max);\r\n        ERC20(PT).forceApprove(pendleRouter, type(uint256).max);\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                INTERNAL\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function _deployFunds(uint256 _amount) internal override {\r\n        //do nothing, we want to only have the keeper swap funds\r\n    }\r\n\r\n    function _invest(uint256 _amount) internal {\r\n        //asset --> SY\r\n        ISY(SY).deposit(address(this), address(asset), _amount, 0);\r\n        _amount = ERC20(SY).balanceOf(address(this));\r\n\r\n        //SY --> PT\r\n        IPendleRouter.LimitOrderData memory limit; //skip limit order by passing zero address\r\n        uint256 minPTout = (_SYtoPT(_amount) * (MAX_BPS - swapSlippageBPS)) /\r\n            MAX_BPS; //calculate minimum expected PT out\r\n        IPendleRouter(pendleRouter).swapExactSyForPt(\r\n            address(this),\r\n            market,\r\n            _amount,\r\n            minPTout,\r\n            routerParams,\r\n            limit\r\n        );\r\n\r\n        // Update the last time that we deposited.\r\n        tendTriggerParams.lastDeposit = uint40(block.timestamp);\r\n    }\r\n\r\n    function _freeFunds(uint256 _amount) internal override {\r\n        //Redeem PT shares proportional to the SSPT shares redeemed:\r\n        uint256 totalAssets = TokenizedStrategy.totalAssets();\r\n        uint256 totalDebt = totalAssets - _balanceOfAsset();\r\n        uint256 PTtoUninvest = (_balanceOfPT() * _amount) / totalDebt;\r\n        _uninvest(PTtoUninvest);\r\n    }\r\n\r\n    function _uninvest(uint256 currentBalance) internal returns (uint256) {\r\n        if (currentBalance == 0) return 0;\r\n        //PT --> SY\r\n        if (_isExpired()) {\r\n            //if expired, redeem PY to SY\r\n            currentBalance = IPendleRouter(pendleRouter).redeemPyToSy(\r\n                address(this),\r\n                YT,\r\n                currentBalance,\r\n                0\r\n            );\r\n        } else {\r\n            IPendleRouter.LimitOrderData memory limit; //skip limit order by passing zero address\r\n            // We don't enforce any min amount out since withdrawer's can use 'maxLoss'\r\n            (currentBalance, ) = IPendleRouter(pendleRouter).swapExactPtForSy(\r\n                address(this),\r\n                market,\r\n                currentBalance,\r\n                0,\r\n                limit\r\n            );\r\n            if (currentBalance == 0) return 0;\r\n        }\r\n        //SY --> asset\r\n        // We don't enforce any min amount out since withdrawers can use 'maxLoss'\r\n        return\r\n            ISY(SY).redeem(\r\n                address(this),\r\n                currentBalance,\r\n                address(asset),\r\n                0,\r\n                false\r\n            );\r\n    }\r\n\r\n    function _harvestAndReport()\r\n        internal\r\n        override\r\n        returns (uint256 _totalAssets)\r\n    {\r\n        if (!_isExpired() && !TokenizedStrategy.isShutdown()) {\r\n            uint256 assetBalance = _balanceOfAsset();\r\n            TradeParams memory _tradeParams = tradeParams;\r\n            if (assetBalance > _tradeParams.minAssetAmountToPT) {\r\n                _invest(_min(assetBalance, _tradeParams.maxSingleTrade));\r\n            }\r\n        }\r\n\r\n        _totalAssets =\r\n            _balanceOfAsset() +\r\n            (_PTtoAsset(_balanceOfPT()) * (MAX_BPS - bufferSlippageBPS)) /\r\n            MAX_BPS; //reduce PT balance by bufferSlippageBPS to account for the fact that it will need to be swapped back to asset\r\n    }\r\n\r\n    function _SYtoPT(uint256 _amount) internal view returns (uint256) {\r\n        return\r\n            (_amount * WAD) /\r\n            IPendleOracle(oracle).getPtToSyRate(market, oracleDuration);\r\n    }\r\n\r\n    function _PTtoSY(uint256 _amount) internal view returns (uint256) {\r\n        return\r\n            (_amount *\r\n                IPendleOracle(oracle).getPtToSyRate(market, oracleDuration)) /\r\n            WAD;\r\n    }\r\n\r\n    function _PTtoAsset(uint256 _amount) internal view returns (uint256) {\r\n        return ISY(SY).previewRedeem(address(asset), _PTtoSY(_amount));\r\n    }\r\n\r\n    function _tend(uint256) internal override {\r\n        _invest(_min(_balanceOfAsset(), tradeParams.maxSingleTrade));\r\n    }\r\n\r\n    function _tendTrigger() internal view override returns (bool _shouldTend) {\r\n        TendTriggerParams memory _tendTriggerParams = tendTriggerParams;\r\n        if (\r\n            !_isExpired() &&\r\n            block.timestamp - _tendTriggerParams.lastDeposit >\r\n            _tendTriggerParams.minDepositInterval &&\r\n            _balanceOfAsset() > _tendTriggerParams.depositTrigger &&\r\n            tradeParams.maxSingleTrade > 0 &&\r\n            !TokenizedStrategy.isShutdown()\r\n        ) {\r\n            _shouldTend = block.basefee < _tendTriggerParams.maxTendBaseFee;\r\n        }\r\n    }\r\n\r\n    function availableDepositLimit(\r\n        address _owner\r\n    ) public view override returns (uint256) {\r\n        // If the owner is whitelisted or the strategy is open.\r\n        if (allowed[_owner] || open) {\r\n            uint256 totalDeposits = TokenizedStrategy.totalAssets();\r\n            if (depositLimit > totalDeposits) {\r\n                return depositLimit - totalDeposits;\r\n            } else {\r\n                return 0;\r\n            }\r\n        } else {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    function _balanceOfAsset() internal view returns (uint256) {\r\n        return asset.balanceOf(address(this));\r\n    }\r\n\r\n    function _balanceOfPT() internal view returns (uint256) {\r\n        return ERC20(PT).balanceOf(address(this));\r\n    }\r\n\r\n    function _isExpired() internal view returns (bool) {\r\n        return IPendleMarket(market).isExpired();\r\n    }\r\n\r\n    function _checkOracle(\r\n        address _market,\r\n        uint32 _oracleDuration\r\n    ) internal view {\r\n        (\r\n            bool increaseCardinalityRequired,\r\n            ,\r\n            bool oldestObservationSatisfied\r\n        ) = IPendleOracle(oracle).getOracleState(_market, _oracleDuration);\r\n        if (increaseCardinalityRequired || !oldestObservationSatisfied) {\r\n            revert(\"oracle not ready\");\r\n        }\r\n    }\r\n\r\n    function _min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                EXTERNAL:\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    function balanceOfAsset() external view returns (uint256) {\r\n        return _balanceOfAsset();\r\n    }\r\n\r\n    function balanceOfPT() external view returns (uint256) {\r\n        return _balanceOfPT();\r\n    }\r\n\r\n    function isExpired() external view returns (bool) {\r\n        return _isExpired();\r\n    }\r\n\r\n    /**\r\n     * @notice Set oracle duration price smoothing\r\n     * @param _oracleDuration twap duration in seconds\r\n     */\r\n    function setOracleDuration(\r\n        uint32 _oracleDuration\r\n    ) external onlyEmergencyAuthorized {\r\n        require(_oracleDuration >= 900, \"duration too low\");\r\n        _checkOracle(market, _oracleDuration);\r\n        oracleDuration = _oracleDuration;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the tradeParams for the strategy to decide on minimum investment and maximum single investments for the keeper.\r\n     * @param _minAssetAmountToPT Set the minimum amount in asset that should be converted to PT. Set this to max in order to not trigger any PT buying.\r\n     * @param _maxSingleTrade Set the max in asset amount that will be invested by the keeper at a time. Can also be used to pause keeper investments.\r\n     */\r\n    function setTradeParams(\r\n        uint128 _minAssetAmountToPT,\r\n        uint128 _maxSingleTrade\r\n    ) external onlyManagement {\r\n        require(\r\n            _maxSingleTrade <= type(uint128).max &&\r\n                _minAssetAmountToPT <= type(uint128).max,\r\n            \"too large\"\r\n        );\r\n        require(_maxSingleTrade >= _minAssetAmountToPT, \"wrong order\");\r\n        require(tendTriggerParams.depositTrigger >= _minAssetAmountToPT, \"minAsset too large\");\r\n        TradeParams memory _tradeParams;\r\n        _tradeParams.minAssetAmountToPT = _minAssetAmountToPT;\r\n        _tradeParams.maxSingleTrade = _maxSingleTrade;\r\n        tradeParams = _tradeParams;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the routerParams for the pendleRouter. Pendle's AMM only supports the built-in swapSyForExactPt. To execute a swapExactSyForPt, the\r\n     *  router will conduct a binary search to determine the amount of PT to swap.\r\n     * @param _guessMin The minimum value for binary search. Default: 0.\r\n     * @param _guessMax The maximum value for binary search. Default: type(uint256).max.\r\n     * @param _maxIteration The maximum number of times binary search will be performed. Default: 256.\r\n     * @param _eps The precision of binary search - the maximum proportion of the input that can be unused. Default: 1e15 == max 0.1% unused.\r\n     *  Alternatively: 1e14 implies that no more than 0.01% unused.\r\n     */\r\n    function setRouterParams(\r\n        uint256 _guessMin,\r\n        uint256 _guessMax,\r\n        uint256 _maxIteration,\r\n        uint256 _eps\r\n    ) external onlyManagement {\r\n        routerParams.guessMin = _guessMin; // default: 0\r\n        routerParams.guessMax = _guessMax; // default: type(uint256).max\r\n        routerParams.maxIteration = _maxIteration; // default: 256\r\n        routerParams.eps = _eps; // default: 1e15 == max 0.1% unused. Alternatively: 1e14 implies that no more than 0.01% unused.\r\n    }\r\n\r\n    /**\r\n     * @notice Set the tendTriggerParams for all variables involved in tendTrigger.\r\n     * @param _depositTrigger The amount in asset that will trigger a tend if idle.\r\n     * @param _maxTendBaseFee The max amount the base fee can be for a tend to happen in wei.\r\n     * @param _minDepositInterval Minimum time between deposits to wait in seconds.\r\n     */\r\n    function setTendTriggerParams(\r\n        uint128 _depositTrigger,\r\n        uint48 _maxTendBaseFee,\r\n        uint40 _minDepositInterval\r\n    ) external onlyManagement {\r\n        require(_minDepositInterval > 0, \"interval too low\");\r\n        require(_depositTrigger <= type(uint128).max, \"too large\");\r\n        require(_depositTrigger >= tradeParams.minAssetAmountToPT, \"trigger too small\");\r\n        tendTriggerParams.depositTrigger = _depositTrigger;\r\n        tendTriggerParams.maxTendBaseFee = _maxTendBaseFee;\r\n        tendTriggerParams.minDepositInterval = _minDepositInterval;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the deposit limit in asset amount. Set this to 0 to disallow deposits.\r\n     * @param _depositLimit the deposit limit in asset units\r\n     */\r\n    function setDepositLimit(uint256 _depositLimit) external onlyManagement {\r\n        depositLimit = _depositLimit;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the slippage for keeper investments in basis points.\r\n     * @param _swapSlippageBPS the maximum slippage in basis points (BPS)\r\n     */\r\n    function setSwapSlippageBPS(\r\n        uint256 _swapSlippageBPS\r\n    ) external onlyManagement {\r\n        require(_swapSlippageBPS <= MAX_BPS);\r\n        swapSlippageBPS = _swapSlippageBPS;\r\n    }\r\n\r\n    /**\r\n     * @notice Set the buffer for reports in basis points. Can also be used to manually account for bigger depeg scenarios\r\n     * @param _bufferSlippageBPS the buffer slippage in basis points (BPS)\r\n     */\r\n    function setBufferSlippageBPS(\r\n        uint256 _bufferSlippageBPS\r\n    ) external onlyManagement {\r\n        require(_bufferSlippageBPS <= MAX_BPS);\r\n        bufferSlippageBPS = _bufferSlippageBPS;\r\n    }\r\n\r\n    /**\r\n     * @notice Change if anyone can deposit in or only white listed addresses\r\n     * @param _open the bool deciding if anyone can deposit (true) or only whitelisted addresses (false)\r\n     */\r\n    function setOpen(bool _open) external onlyManagement {\r\n        open = _open;\r\n    }\r\n\r\n    /**\r\n     * @notice Set or update an addresses whitelist status.\r\n     * @param _address the address for which to change the whitelist status\r\n     * @param _allowed the bool to set as whitelisted (true) or not (false)\r\n     */\r\n    function setAllowed(\r\n        address _address,\r\n        bool _allowed\r\n    ) external onlyManagement {\r\n        allowed[_address] = _allowed;\r\n    }\r\n\r\n    /*//////////////////////////////////////////////////////////////\r\n                EMERGENCY & GOVERNANCE:\r\n    //////////////////////////////////////////////////////////////*/\r\n\r\n    /**\r\n     * @notice Manually pull funds out from the PT stack without shuting down. This will also stop keeper investments.\r\n     * @param _amount the PT amount to uninvest into asset\r\n     * @param _expectedAssetAmountOut the minimum acceptable asset amount as a result of uninvestment\r\n     */\r\n    function manualWithdraw(\r\n        uint256 _amount,\r\n        uint256 _expectedAssetAmountOut\r\n    ) external onlyEmergencyAuthorized {\r\n        tradeParams.maxSingleTrade = 0;\r\n        uint256 currentBalance = _balanceOfPT();\r\n        if (_amount > currentBalance) {\r\n            _amount = currentBalance;\r\n        }\r\n        uint256 _amountOut = _uninvest(_amount);\r\n        require(_amountOut >= _expectedAssetAmountOut, \"too little amountOut\");\r\n    }\r\n\r\n    /**\r\n     * @notice Manually pull funds out from the PT stack after the strategy has been shutdown.\r\n     * @param _amount the PT amount to uninvest into asset\r\n     */\r\n    function _emergencyWithdraw(uint256 _amount) internal override {\r\n        uint256 currentBalance = _balanceOfPT();\r\n        if (_amount > currentBalance) {\r\n            _amount = currentBalance;\r\n        }\r\n        uint256 expectedAssetAmountOut = _PTtoAsset(_amount);\r\n        uint256 _amountOut = _uninvest(_amount);\r\n        require(\r\n            _amountOut >=\r\n                (expectedAssetAmountOut * (MAX_BPS - swapSlippageBPS)) /\r\n                    MAX_BPS,\r\n            \"too little amountOut\"\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Redeem all PT into asset and rollover the market into a new maturity. Only callable by governance.\r\n     * @param _market the market address (not PT address) for the new maturity to rollover into\r\n     * @param _minAssetAmountOut the acceptable minimum amount of asset out for the PT amount currently held by the strategy\r\n     */\r\n    function rolloverMaturity(\r\n        address _market,\r\n        uint256 _minAssetAmountOut\r\n    ) external onlyGovernance {\r\n        require(_isExpired(), \"not expired\");\r\n        require(_market != address(0), \"!market\");\r\n        require(market != _market, \"same market\");\r\n\r\n        //check new market exists long enough for preset oracleDuration\r\n        _checkOracle(_market, oracleDuration);\r\n\r\n        //redeem all PT to SY\r\n        uint256 currentBalance = _balanceOfPT();\r\n        if (currentBalance > 0) {\r\n            currentBalance = IPendleRouter(pendleRouter).redeemPyToSy(\r\n                address(this),\r\n                YT,\r\n                currentBalance,\r\n                0\r\n            );\r\n        }\r\n\r\n        //set addresses to new maturity\r\n        market = _market;\r\n        require(!_isExpired(), \"expired\");\r\n        (address _SY, address _PT, address _YT) = IPendleMarket(_market)\r\n            .readTokens();\r\n        require(_SY == SY, \"wrong SY\");\r\n        PT = _PT;\r\n        YT = _YT;\r\n        ERC20(_PT).forceApprove(pendleRouter, type(uint256).max);\r\n\r\n        //redeem all SY into asset (let keeper move asset to new PT over time)\r\n        if (currentBalance == 0 && _minAssetAmountOut == 0) return;\r\n        ISY(SY).redeem(\r\n            address(this),\r\n            currentBalance,\r\n            address(asset),\r\n            _minAssetAmountOut,\r\n            false\r\n        );\r\n    }\r\n\r\n    /**\r\n     * @notice Sweep of non-asset ERC20 tokens to governance (onlyGovernance)\r\n     * @param _token The ERC20 token to sweep\r\n     */\r\n    function sweep(address _token) external onlyGovernance {\r\n        require(_token != address(asset), \"!asset\");\r\n        require(_token != PT, \"!PT\");\r\n        ERC20(_token).safeTransfer(GOV, ERC20(_token).balanceOf(address(this)));\r\n    }\r\n\r\n    modifier onlyGovernance() {\r\n        require(msg.sender == GOV, \"!gov\");\r\n        _;\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_GOV\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"GOV\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"availableDepositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"availableWithdrawLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfPT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bufferSlippageBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deployFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"doHealthCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"freeFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"harvestAndReport\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalAssets\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lossLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedAssetAmountOut\",\"type\":\"uint256\"}],\"name\":\"manualWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"open\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"profitLimitRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAssetAmountOut\",\"type\":\"uint256\"}],\"name\":\"rolloverMaturity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"routerParams\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"guessMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guessMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guessOffchain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"eps\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allowed\",\"type\":\"bool\"}],\"name\":\"setAllowed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bufferSlippageBPS\",\"type\":\"uint256\"}],\"name\":\"setBufferSlippageBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_depositLimit\",\"type\":\"uint256\"}],\"name\":\"setDepositLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_doHealthCheck\",\"type\":\"bool\"}],\"name\":\"setDoHealthCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newLossLimitRatio\",\"type\":\"uint256\"}],\"name\":\"setLossLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_open\",\"type\":\"bool\"}],\"name\":\"setOpen\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_oracleDuration\",\"type\":\"uint32\"}],\"name\":\"setOracleDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newProfitLimitRatio\",\"type\":\"uint256\"}],\"name\":\"setProfitLimitRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_guessMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_guessMax\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxIteration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_eps\",\"type\":\"uint256\"}],\"name\":\"setRouterParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_swapSlippageBPS\",\"type\":\"uint256\"}],\"name\":\"setSwapSlippageBPS\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_depositTrigger\",\"type\":\"uint128\"},{\"internalType\":\"uint48\",\"name\":\"_maxTendBaseFee\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"_minDepositInterval\",\"type\":\"uint40\"}],\"name\":\"setTendTriggerParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_minAssetAmountToPT\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_maxSingleTrade\",\"type\":\"uint128\"}],\"name\":\"setTradeParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"shutdownWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swapSlippageBPS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalIdle\",\"type\":\"uint256\"}],\"name\":\"tendThis\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tendTrigger\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tendTriggerParams\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"depositTrigger\",\"type\":\"uint128\"},{\"internalType\":\"uint48\",\"name\":\"maxTendBaseFee\",\"type\":\"uint48\"},{\"internalType\":\"uint40\",\"name\":\"minDepositInterval\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"lastDeposit\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenizedStrategyAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeParams\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"minAssetAmountToPT\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"maxSingleTrade\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "SingleSidedPTcore", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "00000000000000000000000035fa164735182de50811e8e2e824cfb9b6118ac2000000000000000000000000f32e58f92e60f4b0a37a69b95d642a471365eae800000000000000000000000066a1096c6366b2529274df4f5d8247827fe4cea8000000000000000000000000feb4acf3df3cdea7399794d0869ef76a6efaff5200000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000217950542d6545544820286175746f2d726f6c6c696e672050656e646c652050542900000000000000000000000000000000000000000000000000000000000000", "EVMVersion": "Default", "Library": "", "LicenseType": "GNU AGPLv3", "Proxy": "1", "Implementation": "0xbb51273d6c746910c7c06fe718f30c936170fed0", "SwarmSource": "ipfs://80aa6f66d3610913017e3c5a184bde24093d96e2dfe9bd5e62ab7b7ce4dbbc96"}