{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/BigChungusSale.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title $CHUNGUS Sale\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender's allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller's\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC-20 standard.\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Permit.sol)\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\r\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\r\\n *\\r\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\r\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\r\\n * need to send a transaction, and thus is not required to hold Ether at all.\\r\\n */\\r\\ninterface IERC20Permit {\\r\\n    /**\\r\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\r\\n     * given ``owner``'s signed approval.\\r\\n     *\\r\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\r\\n     * ordering also apply here.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `deadline` must be a timestamp in the future.\\r\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\r\\n     * over the EIP712-formatted function arguments.\\r\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\r\\n     *\\r\\n     * For more information on the signature format, see the\\r\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\r\\n     * section].\\r\\n     */\\r\\n    function permit(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the current nonce for `owner`. This value must be\\r\\n     * included whenever a signature is generated for {permit}.\\r\\n     *\\r\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\r\\n     * prevents a signature from being used multiple times.\\r\\n     */\\r\\n    function nonces(address owner) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     *\\r\\n     * Furthermore, `isContract` will also return true if the target contract within\\r\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\r\\n     * which only has an effect at the end of a transaction.\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\r\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\r\\n     *\\r\\n     * _Available since v4.8._\\r\\n     */\\r\\n    function verifyCallResultFromTarget(\\r\\n        address target,\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        if (success) {\\r\\n            if (returndata.length == 0) {\\r\\n                // only check isContract if the call was successful and the return data is empty\\r\\n                // otherwise we already know that it was a contract\\r\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n            }\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason or using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            _revert(returndata, errorMessage);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\r\\n        // Look for revert reason and bubble it up if present\\r\\n        if (returndata.length > 0) {\\r\\n            // The easiest way to bubble the revert reason is using memory via assembly\\r\\n            /// @solidity memory-safe-assembly\\r\\n            assembly {\\r\\n                let returndata_size := mload(returndata)\\r\\n                revert(add(32, returndata), returndata_size)\\r\\n            }\\r\\n        } else {\\r\\n            revert(errorMessage);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\r\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful.\\r\\n     */\\r\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\r\\n     * non-reverting calls are assumed to be successful. Compatible with tokens that require the approval to be set to\\r\\n     * 0 before setting it to a non-zero value.\\r\\n     */\\r\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\r\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\r\\n\\r\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\r\\n            _callOptionalReturn(token, approvalCall);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\r\\n     * Revert on invalid signature.\\r\\n     */\\r\\n    function safePermit(\\r\\n        IERC20Permit token,\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 value,\\r\\n        uint256 deadline,\\r\\n        uint8 v,\\r\\n        bytes32 r,\\r\\n        bytes32 s\\r\\n    ) internal {\\r\\n        uint256 nonceBefore = token.nonces(owner);\\r\\n        token.permit(owner, spender, value, deadline, v, r, s);\\r\\n        uint256 nonceAfter = token.nonces(owner);\\r\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     *\\r\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\r\\n     */\\r\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\r\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\r\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\r\\n        // and not revert is the subcall reverts.\\r\\n\\r\\n        (bool success, bytes memory returndata) = address(token).call(data);\\r\\n        return\\r\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _transferOwnership(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        _checkOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if the sender is not the owner.\\r\\n     */\\r\\n    function _checkOwner() internal view virtual {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby disabling any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _transferOwnership(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _transferOwnership(address newOwner) internal virtual {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\r\\n\\r\\n/**\\r\\n * @dev Contract module that helps prevent reentrant calls to a function.\\r\\n *\\r\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\r\\n * available, which can be applied to functions to make sure there are no nested\\r\\n * (reentrant) calls to them.\\r\\n *\\r\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\r\\n * `nonReentrant` may not call one another. This can be worked around by making\\r\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\r\\n * points to them.\\r\\n *\\r\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\r\\n * to protect against it, check out our blog post\\r\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\r\\n */\\r\\nabstract contract ReentrancyGuard {\\r\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\r\\n    // word because each write operation emits an extra SLOAD to first read the\\r\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\r\\n    // back. This is the compiler's defense against contract upgrades and\\r\\n    // pointer aliasing, and it cannot be disabled.\\r\\n\\r\\n    // The values being non-zero value makes deployment a bit more expensive,\\r\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\r\\n    // amount. Since refunds are capped to a percentage of the total\\r\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\r\\n    // increase the likelihood of the full refund coming into effect.\\r\\n    uint256 private constant _NOT_ENTERED = 1;\\r\\n    uint256 private constant _ENTERED = 2;\\r\\n\\r\\n    uint256 private _status;\\r\\n\\r\\n    constructor() {\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\r\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\r\\n     * function is not supported. It is possible to prevent this from happening\\r\\n     * by making the `nonReentrant` function external, and making it call a\\r\\n     * `private` function that does the actual work.\\r\\n     */\\r\\n    modifier nonReentrant() {\\r\\n        _nonReentrantBefore();\\r\\n        _;\\r\\n        _nonReentrantAfter();\\r\\n    }\\r\\n\\r\\n    function _nonReentrantBefore() private {\\r\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\r\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\r\\n\\r\\n        // Any calls to nonReentrant after this point will fail\\r\\n        _status = _ENTERED;\\r\\n    }\\r\\n\\r\\n    function _nonReentrantAfter() private {\\r\\n        // By storing the original value once again, a refund is triggered (see\\r\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\r\\n        _status = _NOT_ENTERED;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\r\\n     * `nonReentrant` function in the call stack.\\r\\n     */\\r\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\r\\n        return _status == _ENTERED;\\r\\n    }\\r\\n}\\r\\n\\r\\ninterface AggregatorV3Interface {\\r\\n\\r\\n  function decimals()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint8\\r\\n    );\\r\\n\\r\\n  function description()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      string memory\\r\\n    );\\r\\n\\r\\n  function version()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256\\r\\n    );\\r\\n\\r\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\r\\n  // if they do not have data to report, instead of returning unset values\\r\\n  // which could be misinterpreted as actual reported values.\\r\\n  function getRoundData(\\r\\n    uint80 _roundId\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n  function latestRoundData()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint80 roundId,\\r\\n      int256 answer,\\r\\n      uint256 startedAt,\\r\\n      uint256 updatedAt,\\r\\n      uint80 answeredInRound\\r\\n    );\\r\\n\\r\\n}\\r\\n\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev These functions deal with verification of Merkle Trees proofs.\\r\\n *\\r\\n * The proofs can be generated using the JavaScript library\\r\\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\\r\\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\\r\\n *\\r\\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\\r\\n */\\r\\nlibrary MerkleProof {\\r\\n    /**\\r\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\r\\n     * defined by `root`. For this, a `proof` must be provided, containing\\r\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\r\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\r\\n     */\\r\\n    function verify(\\r\\n        bytes32[] memory proof,\\r\\n        bytes32 root,\\r\\n        bytes32 leaf\\r\\n    ) internal pure returns (bool) {\\r\\n        return processProof(proof, leaf) == root;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\\r\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\r\\n     * hash matches the root of the tree. When processing the proof, the pairs\\r\\n     * of leafs & pre-images are assumed to be sorted.\\r\\n     *\\r\\n     * _Available since v4.4._\\r\\n     */\\r\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\r\\n        bytes32 computedHash = leaf;\\r\\n        for (uint256 i = 0; i < proof.length; i++) {\\r\\n            bytes32 proofElement = proof[i];\\r\\n            if (computedHash <= proofElement) {\\r\\n                // Hash(current computed hash + current element of the proof)\\r\\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\\r\\n            } else {\\r\\n                // Hash(current element of the proof + current computed hash)\\r\\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\\r\\n            }\\r\\n        }\\r\\n        return computedHash;\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract BigChungusSale is Ownable, ReentrancyGuard {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    using Address for address payable;\\r\\n\\r\\n    IERC20 public tokenContract; // token contract\\r\\n\\r\\n    enum ContractState {\\r\\n        OFF,\\r\\n        SEED,\\r\\n        FARMERS,\\r\\n        PUBLIC,\\r\\n        CLAIM\\r\\n    }\\r\\n    ContractState public contractState = ContractState.OFF;\\r\\n\\r\\n    mapping(uint256 => uint256) public totalTokensBought;\\r\\n\\r\\n    uint256 public totalTokensSeed = 1500000000 * 10 ** 18;\\r\\n    uint256 public totalTokensFarmers=  2999999999 * 10 ** 18;\\r\\n    uint256 public totalTokensPublic =  1000000000 * 10 ** 18;\\r\\n\\r\\n\\r\\n    mapping(address => mapping(uint256 => uint256)) public tokensBought; // tokensBought[address] = number of tokens bought by address\\r\\n    mapping(address => uint256) public claimedTokens; // claimedTokens[address] = number of tokens claimed by address\\r\\n\\r\\n    uint256 public tokenPrice = 100000000 ether; //USD price has 8 decimals (5$ = 500000000), we also need to add ether (18 decimals)\\r\\n\\r\\n    AggregatorV3Interface public priceFeed;\\r\\n    // Supported payment methods\\r\\n    mapping(address => bool) public supportedPaymentMethods;\\r\\n\\r\\n    bytes32 public merkleRootSeed;\\r\\n    bytes32 public merkleRootFarmers;\\r\\n\\r\\n    uint256 public seedTGE = 20;\\r\\n    uint256 public farmersTGE = 25;\\r\\n    uint256 public publicTGE = 30;\\r\\n\\r\\n    uint256 public vestingDurationSeed = 8 weeks; // Total duration of vesting\\r\\n    uint256 public vestingDurationFarmers = 7 weeks;\\r\\n    uint256 public vestingDurationPublic = 6 weeks;\\r\\n\\r\\n    uint256 public claimStartTimestamp;\\r\\n\\r\\n    // Define min and max buy amounts as global variables\\r\\n    uint256 public minBuyAmount;\\r\\n    uint256 public maxBuyAmount;\\r\\n\\r\\n    address public treasury;\\r\\n\\r\\n    // Events\\r\\n    event TokensBought(address indexed buyer, address indexed paymentToken, uint256 numberOfTokens);\\r\\n\\r\\n    event TokensClaimed(address indexed claimer, uint256 numberOfTokens);\\r\\n\\r\\n    constructor() {\\r\\n\\r\\n        // tokenContract = ;\\r\\n        // treasury = ;\\r\\n\\r\\n        // supportedPaymentMethods[] = true; // USDT\\r\\n        // supportedPaymentMethods[] = true; // USDC\\r\\n\\r\\n\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Ensure current state is correct for this method.\\r\\n     */\\r\\n    modifier isContractState(ContractState contractState_) {\\r\\n        require(contractState == contractState_, \\\"Invalid state\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // Modifiers to check if the mint amount is within the allowed range for each stage\\r\\n    // modifier withinLimit(uint256 numberOfTokens) {\\r\\n    //     if (contractState == ContractState.SEED) {\\r\\n    //         require(totalTokensBought + numberOfTokens <= totalTokensSeed, \\\"Exceeds Seed stage limit\\\");\\r\\n    //     }\\r\\n    //     else if (contractState == ContractState.FARMERS) {\\r\\n    //         require(totalTokensBought + numberOfTokens <= totalTokensFarmers, \\\"Exceeds Seed stage limit\\\");\\r\\n    //     }\\r\\n    //     else {\\r\\n    //         require(totalTokensBought + numberOfTokens <= totalTokensPublic, \\\"Exceeds Seed stage limit\\\");\\r\\n    //     }\\r\\n    //     _;\\r\\n    // }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @notice Throws if called when presale is not active\\r\\n     * @param paymentToken the method of payment\\r\\n     * @param numberOfTokens the number of tokens to buy\\r\\n     */\\r\\n    function buyTokensSeed(uint256 numberOfTokens, address paymentToken, bytes32[] calldata proof) external payable nonReentrant isContractState(ContractState.SEED) {\\r\\n        require((tokensBought[msg.sender][1] + numberOfTokens) >= minBuyAmount && (tokensBought[msg.sender][1] + numberOfTokens) <= maxBuyAmount, \\\"Purchase amount outside allowed range\\\");\\r\\n\\r\\n        /// Check if user is on the allow list\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));\\r\\n        // Check the merkle proof\\r\\n        require(MerkleProof.verify(proof, merkleRootSeed, leaf), \\\"Invalid proof\\\");\\r\\n        \\r\\n\\r\\n        if (numberOfTokens + totalTokensBought[1] > totalTokensSeed) {\\r\\n            numberOfTokens = totalTokensSeed - totalTokensBought[1];\\r\\n        }\\r\\n        \\r\\n        if (msg.value > 0) {\\r\\n            require(address(paymentToken) == address(0), \\\"Cannot Have Both ETH & ERC20 Payment Methodd!\\\");\\r\\n\\r\\n            uint256 cost = getCost(paymentToken, numberOfTokens);\\r\\n            require(msg.value >= cost, \\\"Insufficient Funds Sent!\\\");\\r\\n            tokensBought[msg.sender][1] += numberOfTokens;\\r\\n            totalTokensBought[1] += numberOfTokens;\\r\\n\\r\\n            (bool sent, ) = payable(treasury).call{value: cost}(\\\"\\\");\\r\\n            require(sent, \\\"Failed To Send!\\\");\\r\\n            uint256 remainder = msg.value - cost;\\r\\n            if (remainder > 0) {\\r\\n                (sent, ) = payable(msg.sender).call{value: remainder}(\\\"\\\");\\r\\n                require(sent, \\\"Failed To Refund Extra!\\\");\\r\\n            }\\r\\n        } else {\\r\\n            uint256 cost = getCost(paymentToken, numberOfTokens);\\r\\n            require(IERC20(paymentToken).allowance(msg.sender, address(this)) >= cost, \\\"Not Enough Allowance!\\\");\\r\\n            tokensBought[msg.sender][1] += numberOfTokens;\\r\\n            totalTokensBought[1] += numberOfTokens;\\r\\n\\r\\n            IERC20(paymentToken).safeTransferFrom(msg.sender, treasury, cost);\\r\\n        }\\r\\n\\r\\n        // Emit event\\r\\n        emit TokensBought(\\r\\n            msg.sender,\\r\\n            paymentToken,\\r\\n            numberOfTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @notice Throws if called when presale is not active\\r\\n     * @param paymentToken the method of payment\\r\\n     * @param numberOfTokens the number of tokens to buy\\r\\n     */\\r\\n    function buyTokensFarmers(uint256 numberOfTokens, address paymentToken, bytes32[] calldata proof) external payable nonReentrant isContractState(ContractState.FARMERS) {\\r\\n        require((tokensBought[msg.sender][2] + numberOfTokens) >= minBuyAmount && (tokensBought[msg.sender][2] + numberOfTokens) <= maxBuyAmount, \\\"Purchase amount outside allowed range\\\");\\r\\n\\r\\n        /// Check if user is on the allow list\\r\\n        bytes32 leaf = keccak256(abi.encodePacked(_msgSender()));\\r\\n        // Check the merkle proof\\r\\n        require(MerkleProof.verify(proof, merkleRootFarmers, leaf), \\\"Invalid proof\\\");\\r\\n        \\r\\n\\r\\n        if (numberOfTokens + totalTokensBought[2] > totalTokensFarmers) {\\r\\n            numberOfTokens = totalTokensFarmers - totalTokensBought[2];\\r\\n        }\\r\\n        \\r\\n        if (msg.value > 0) {\\r\\n            require(address(paymentToken) == address(0), \\\"Cannot Have Both ETH & ERC20 Payment Methodd!\\\");\\r\\n\\r\\n            uint256 cost = getCost(paymentToken, numberOfTokens);\\r\\n            require(msg.value >= cost, \\\"Insufficient Funds Sent!\\\");\\r\\n            tokensBought[msg.sender][2] += numberOfTokens;\\r\\n            totalTokensBought[2] += numberOfTokens;\\r\\n\\r\\n            (bool sent, ) = payable(treasury).call{value: cost}(\\\"\\\");\\r\\n            require(sent, \\\"Failed To Send!\\\");\\r\\n            uint256 remainder = msg.value - cost;\\r\\n            if (remainder > 0) {\\r\\n                (sent, ) = payable(msg.sender).call{value: remainder}(\\\"\\\");\\r\\n                require(sent, \\\"Failed To Refund Extra!\\\");\\r\\n            }\\r\\n        } else {\\r\\n            uint256 cost = getCost(paymentToken, numberOfTokens);\\r\\n            require(IERC20(paymentToken).allowance(msg.sender, address(this)) >= cost, \\\"Not Enough Allowance!\\\");\\r\\n            tokensBought[msg.sender][2] += numberOfTokens;\\r\\n            totalTokensBought[2] += numberOfTokens;\\r\\n\\r\\n            IERC20(paymentToken).safeTransferFrom(msg.sender, treasury, cost);\\r\\n        }\\r\\n\\r\\n        // Emit event\\r\\n        emit TokensBought(\\r\\n            msg.sender,\\r\\n            paymentToken,\\r\\n            numberOfTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     *\\r\\n     * @notice Throws if called when presale is not active\\r\\n     * @param paymentToken the method of payment\\r\\n     * @param numberOfTokens the number of tokens to buy\\r\\n     */\\r\\n    function buyTokensPublic(uint256 numberOfTokens, address paymentToken) external payable nonReentrant isContractState(ContractState.PUBLIC) {\\r\\n        require((tokensBought[msg.sender][3] + numberOfTokens) >= minBuyAmount && (tokensBought[msg.sender][3] + numberOfTokens) <= maxBuyAmount, \\\"Purchase amount outside allowed range\\\");\\r\\n\\r\\n        if (numberOfTokens + totalTokensBought[3] > totalTokensPublic) {\\r\\n            numberOfTokens = totalTokensPublic - totalTokensBought[3];\\r\\n        }\\r\\n        \\r\\n        if (msg.value > 0) {\\r\\n            require(address(paymentToken) == address(0), \\\"Cannot Have Both ETH & ERC20 Payment Methodd!\\\");\\r\\n\\r\\n            uint256 cost = getCost(paymentToken, numberOfTokens);\\r\\n            require(msg.value >= cost, \\\"Insufficient Funds Sent!\\\");\\r\\n            tokensBought[msg.sender][3] += numberOfTokens;\\r\\n            totalTokensBought[3] += numberOfTokens;\\r\\n\\r\\n            (bool sent, ) = payable(treasury).call{value: cost}(\\\"\\\");\\r\\n            require(sent, \\\"Failed To Send!\\\");\\r\\n            uint256 remainder = msg.value - cost;\\r\\n            if (remainder > 0) {\\r\\n                (sent, ) = payable(msg.sender).call{value: remainder}(\\\"\\\");\\r\\n                require(sent, \\\"Failed To Refund Extra!\\\");\\r\\n            }\\r\\n        } else {\\r\\n            uint256 cost = getCost(paymentToken, numberOfTokens);\\r\\n            require(IERC20(paymentToken).allowance(msg.sender, address(this)) >= cost, \\\"Not Enough Allowance!\\\");\\r\\n            tokensBought[msg.sender][3] += numberOfTokens;\\r\\n            totalTokensBought[3] += numberOfTokens;\\r\\n\\r\\n            IERC20(paymentToken).safeTransferFrom(msg.sender, treasury, cost);\\r\\n        }\\r\\n\\r\\n        // Check if we exceeded total amount\\r\\n        if (totalTokensBought[3] == totalTokensPublic) {\\r\\n            contractState = ContractState.OFF;\\r\\n        }\\r\\n\\r\\n        // Emit event\\r\\n        emit TokensBought(\\r\\n            msg.sender,\\r\\n            paymentToken,\\r\\n            numberOfTokens\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer the number of tokens that can currently be claimed by the user (if any)\\r\\n     */\\r\\n    function claimTokens() external nonReentrant isContractState(ContractState.CLAIM) {\\r\\n        require(block.timestamp > claimStartTimestamp, \\\"Vesting Has Not Started Yet\\\");\\r\\n\\r\\n        uint256 tokensToClaim = calculateVestedTokens(msg.sender);\\r\\n\\r\\n        require(tokensToClaim > 0, \\\"No Tokens available for claim yet\\\");\\r\\n\\r\\n        claimedTokens[msg.sender] += tokensToClaim;\\r\\n        tokenContract.safeTransfer(msg.sender, tokensToClaim);\\r\\n\\r\\n        // Emit event\\r\\n        emit TokensClaimed(msg.sender, tokensToClaim);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Calculates the amount of tokens that have vested for a user based on the global claimStartTimestamp.\\r\\n     * @param user The address of the user.\\r\\n     * @return The amount of vested tokens.\\r\\n     */\\r\\n    function calculateVestedTokens(address user) public view returns (uint256) {\\r\\n        \\r\\n        uint256 totalTokens;\\r\\n        uint256 vestedTokens;\\r\\n        for (uint i = 1; i < 4; i++) {\\r\\n            uint256 timeElapsed = block.timestamp - claimStartTimestamp;\\r\\n            if (i == 1) {\\r\\n                if (timeElapsed >= vestingDurationSeed) {\\r\\n                    vestedTokens = tokensBought[user][i];\\r\\n                }\\r\\n                else {\\r\\n                    vestedTokens = (tokensBought[user][i] * seedTGE / 100) + (((tokensBought[user][i] * (100 - seedTGE)) / 100) * timeElapsed) / vestingDurationSeed;\\r\\n\\r\\n                }\\r\\n            }\\r\\n            else if (i == 2) {\\r\\n                if (timeElapsed >= vestingDurationFarmers) {\\r\\n                    vestedTokens = tokensBought[user][i];\\r\\n                }\\r\\n                else {\\r\\n                    vestedTokens = (tokensBought[user][i] * farmersTGE / 100) + (((tokensBought[user][i] * (100 - farmersTGE)) / 100) * timeElapsed) / vestingDurationFarmers;\\r\\n                }\\r\\n            }\\r\\n            else {\\r\\n                if (timeElapsed >= vestingDurationPublic) {\\r\\n                    vestedTokens = tokensBought[user][i];\\r\\n                }\\r\\n                else {\\r\\n                    vestedTokens = (tokensBought[user][i] * publicTGE / 100) + (((tokensBought[user][i] * (100 - publicTGE)) / 100) * timeElapsed) / vestingDurationPublic;\\r\\n                }\\r\\n            }\\r\\n\\r\\n            totalTokens += vestedTokens;\\r\\n        }\\r\\n\\r\\n        return totalTokens - claimedTokens[user];\\r\\n    }\\r\\n\\r\\n    function getTokentoUSD() public view returns(int) {\\r\\n          (,int price,,,) = priceFeed.latestRoundData();\\r\\n          return price;\\r\\n    }\\r\\n\\r\\n    function getPriceEth() public view returns(uint256) {\\r\\n          int price = getTokentoUSD();\\r\\n          return tokenPrice / uint256(price);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Calculate the cost of buying a number of tokens\\r\\n     * @param paymentToken method of payment\\r\\n     * @param numberOfTokens number of tokens to buy\\r\\n     */\\r\\n    function getCost(\\r\\n        address paymentToken,\\r\\n        uint256 numberOfTokens\\r\\n    ) public view returns (uint256) {\\r\\n        uint256 cost;\\r\\n        if (paymentToken == address(0)) {\\r\\n            cost = (numberOfTokens * getPriceEth()) / 10 ** 18;\\r\\n        }\\r\\n        else {\\r\\n            require(supportedPaymentMethods[paymentToken], \\\"Unsupported Payment Method!\\\");\\r\\n            cost = (numberOfTokens * tokenPrice * 10 ** IERC20Metadata(paymentToken).decimals()) / 10 ** 44;\\r\\n        }\\r\\n\\r\\n        return cost;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Function to retrieve the tokens avialable for purchase in a specific round\\r\\n    * @param _buyer Address of the buyer\\r\\n    * @param _round Active State (1 - SEED, 2 - FARMERS, 3 - PUBLIC)\\r\\n    * @dev Make sure to input the correct active state of the contract. You can queue it by calling contractState(). \\r\\n    * Otherwise calculations within the function are irrelevant\\r\\n    */\\r\\n    function getTokensAvailable(address _buyer, uint256 _round) public view returns(uint256) {\\r\\n        uint256 amount = maxBuyAmount - tokensBought[_buyer][_round];\\r\\n        return amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set price\\r\\n     * @param _tokenPrice token price\\r\\n     */\\r\\n    function setTokenPrice(\\r\\n        uint256 _tokenPrice\\r\\n    ) external onlyOwner {\\r\\n        tokenPrice = _tokenPrice;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the price feed contract address.\\r\\n     * Can only be called by the contract owner.\\r\\n     *\\r\\n     * @param _priceFeedAddress The address of the new price feed contract.\\r\\n     */\\r\\n    function setPriceFeed(address _priceFeedAddress) external onlyOwner {\\r\\n        require(_priceFeedAddress != address(0), \\\"Invalid address\\\"); // Ensuring the provided address is not the zero address.\\r\\n        priceFeed = AggregatorV3Interface(_priceFeedAddress); // Setting the new price feed address.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the token contract address.\\r\\n     * Can only be called by the contract owner.\\r\\n     *\\r\\n     * @param _tokenContractAddress The address of the new token contract.\\r\\n     */\\r\\n    function setTokenContract(address _tokenContractAddress) external onlyOwner {\\r\\n        require(_tokenContractAddress != address(0), \\\"Invalid address\\\"); // Ensuring the provided address is not the zero address.\\r\\n        tokenContract = IERC20(_tokenContractAddress); // Setting the new token contract address.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the treasury address.\\r\\n     * Can only be called by the contract owner.\\r\\n     *\\r\\n     * @param _treasuryAddress The address of the new treasury.\\r\\n     */\\r\\n    function setTreasury(address _treasuryAddress) external onlyOwner {\\r\\n        require(_treasuryAddress != address(0), \\\"Invalid address\\\"); // Ensuring the provided address is not the zero address.\\r\\n        treasury = _treasuryAddress; // Setting the new treasury address.\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the TGE percentage for Seed stage.\\r\\n     * Can only be called when claimStartTimestamp is 0 and by the contract owner.\\r\\n     *\\r\\n     * @param _seedTGE The new TGE percentage for Seed stage.\\r\\n     */\\r\\n    function setSeedTGE(uint256 _seedTGE) external onlyOwner {\\r\\n        require(claimStartTimestamp == 0, \\\"Cannot change TGE after claims have started\\\");\\r\\n        require(_seedTGE <= 100, \\\"TGE percentage cannot exceed 100\\\");\\r\\n        seedTGE = _seedTGE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the TGE percentage for Farmers stage.\\r\\n     * Can only be called when claimStartTimestamp is 0 and by the contract owner.\\r\\n     *\\r\\n     * @param _farmersTGE The new TGE percentage for Farmers stage.\\r\\n     */\\r\\n    function setFarmersTGE(uint256 _farmersTGE) external onlyOwner {\\r\\n        require(claimStartTimestamp == 0, \\\"Cannot change TGE after claims have started\\\");\\r\\n        require(_farmersTGE <= 100, \\\"TGE percentage cannot exceed 100\\\");\\r\\n        farmersTGE = _farmersTGE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the TGE percentage for Public stage.\\r\\n     * Can only be called when claimStartTimestamp is 0 and by the contract owner.\\r\\n     *\\r\\n     * @param _publicTGE The new TGE percentage for Public stage.\\r\\n     */\\r\\n    function setPublicTGE(uint256 _publicTGE) external onlyOwner {\\r\\n        require(claimStartTimestamp == 0, \\\"Cannot change TGE after claims have started\\\");\\r\\n        require(_publicTGE <= 100, \\\"TGE percentage cannot exceed 100\\\");\\r\\n        publicTGE = _publicTGE;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the vesting duration for the Seed stage.\\r\\n     * Can only be called by the contract owner before claiming starts.\\r\\n     *\\r\\n     * @param _duration The new vesting duration for the Seed stage in seconds.\\r\\n     */\\r\\n    function setVestingDurationSeed(uint256 _duration) external onlyOwner {\\r\\n        require(claimStartTimestamp == 0, \\\"Cannot change duration after claims have started\\\");\\r\\n        vestingDurationSeed = _duration;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the vesting duration for the Farmers stage.\\r\\n     * Can only be called by the contract owner before claiming starts.\\r\\n     *\\r\\n     * @param _duration The new vesting duration for the Farmers stage in seconds.\\r\\n     */\\r\\n    function setVestingDurationFarmers(uint256 _duration) external onlyOwner {\\r\\n        require(claimStartTimestamp == 0, \\\"Cannot change duration after claims have started\\\");\\r\\n        vestingDurationFarmers = _duration;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the vesting duration for the Public stage.\\r\\n     * Can only be called by the contract owner before claiming starts.\\r\\n     *\\r\\n     * @param _duration The new vesting duration for the Public stage in seconds.\\r\\n     */\\r\\n    function setVestingDurationPublic(uint256 _duration) external onlyOwner {\\r\\n        require(claimStartTimestamp == 0, \\\"Cannot change duration after claims have started\\\");\\r\\n        vestingDurationPublic = _duration;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the minimum buy amount.\\r\\n     * Can only be called by the contract owner.\\r\\n     *\\r\\n     * @param _minBuyAmount The new minimum buy amount.\\r\\n     */\\r\\n    function setMinBuyAmount(uint256 _minBuyAmount) external onlyOwner {\\r\\n        require(_minBuyAmount <= maxBuyAmount, \\\"Min buy amount cannot exceed max buy amount\\\");\\r\\n        minBuyAmount = _minBuyAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the maximum buy amount.\\r\\n     * Can only be called by the contract owner.\\r\\n     *\\r\\n     * @param _maxBuyAmount The new maximum buy amount.\\r\\n     */\\r\\n    function setMaxBuyAmount(uint256 _maxBuyAmount) external onlyOwner {\\r\\n        require(_maxBuyAmount >= minBuyAmount, \\\"Max buy amount cannot be less than min buy amount\\\");\\r\\n        maxBuyAmount = _maxBuyAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the contract's operational state.\\r\\n     * @param newState The new state to set the contract to\\r\\n     */\\r\\n    function setContractState(uint256 newState) external onlyOwner {\\r\\n        require(newState < 5, \\\"Invalid state.\\\");\\r\\n        contractState = ContractState(newState);\\r\\n\\r\\n        if (newState == 4) {\\r\\n            claimStartTimestamp = block.timestamp;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n    * @dev Sets the Token Seed amount\\r\\n    */\\r\\n    function setTokensSeed(uint256 _amount) external onlyOwner {\\r\\n        totalTokensSeed = _amount;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n    * @dev Sets the TokensFarmers amount\\r\\n    */\\r\\n    function setTokensFarmers(uint256 _amount) external onlyOwner {\\r\\n        totalTokensFarmers = _amount;\\r\\n    }\\r\\n\\r\\n    /** \\r\\n    * @dev Sets the TokensPublic amount\\r\\n    */\\r\\n    function setTokensPublic(uint256 _amount) external onlyOwner {\\r\\n        totalTokensPublic = _amount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param merkleRoot_ The new merkle root\\r\\n     */\\r\\n    function setMerkleRootSeed(bytes32 merkleRoot_) external onlyOwner {\\r\\n        merkleRootSeed = merkleRoot_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @param merkleRoot_ The new merkle root\\r\\n     */\\r\\n    function setMerkleRootFarmers(bytes32 merkleRoot_) external onlyOwner {\\r\\n        merkleRootFarmers = merkleRoot_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Set a price feed for a given payment method\\r\\n     * @param paymentToken IERC20 token to set price feed for\\r\\n     */\\r\\n    function setPaymentMethod(address paymentToken) external onlyOwner {\\r\\n        require(paymentToken != address(0), \\\"Invalid Address!\\\");\\r\\n        supportedPaymentMethods[paymentToken] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Transfer ownership of the contract to a new owner after the presale ends\\r\\n     * @param newOwner new owner of the contract\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public override onlyOwner {\\r\\n        Ownable.transferOwnership(newOwner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Revert any funds sent to the contract directly\\r\\n     */\\r\\n    receive() external payable {\\r\\n        revert();\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokensBought\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"TokensClaimed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyTokensFarmers\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"buyTokensPublic\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"buyTokensSeed\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"calculateVestedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimStartTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractState\",\"outputs\":[{\"internalType\":\"enum BigChungusSale.ContractState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmersTGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"numberOfTokens\",\"type\":\"uint256\"}],\"name\":\"getCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceEth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_round\",\"type\":\"uint256\"}],\"name\":\"getTokensAvailable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokentoUSD\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootFarmers\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"merkleRootSeed\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBuyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"publicTGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seedTGE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newState\",\"type\":\"uint256\"}],\"name\":\"setContractState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_farmersTGE\",\"type\":\"uint256\"}],\"name\":\"setFarmersTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxBuyAmount\",\"type\":\"uint256\"}],\"name\":\"setMaxBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRootFarmers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot_\",\"type\":\"bytes32\"}],\"name\":\"setMerkleRootSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minBuyAmount\",\"type\":\"uint256\"}],\"name\":\"setMinBuyAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"}],\"name\":\"setPaymentMethod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeedAddress\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_publicTGE\",\"type\":\"uint256\"}],\"name\":\"setPublicTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_seedTGE\",\"type\":\"uint256\"}],\"name\":\"setSeedTGE\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenContractAddress\",\"type\":\"address\"}],\"name\":\"setTokenContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenPrice\",\"type\":\"uint256\"}],\"name\":\"setTokenPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokensFarmers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokensPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"setTokensSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setVestingDurationFarmers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setVestingDurationPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_duration\",\"type\":\"uint256\"}],\"name\":\"setVestingDurationSeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"supportedPaymentMethods\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenContract\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalTokensBought\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensFarmers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDurationFarmers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDurationPublic\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingDurationSeed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "BigChungusSale", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}