{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"./extensions/IERC20MetadataUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20PermitUpgradeable {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20Upgradeable.sol\\\";\\nimport \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20Upgradeable.sol\\\";\\nimport \\\"../extensions/draft-IERC20PermitUpgradeable.sol\\\";\\nimport \\\"../../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(\\n        IERC20Upgradeable token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20Upgradeable token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20Upgradeable token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20PermitUpgradeable token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165CheckerUpgradeable {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165Upgradeable).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(address account, bytes4[] memory interfaceIds)\\n        internal\\n        view\\n        returns (bool[] memory)\\n    {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165Upgradeable.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCastUpgradeable {\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        require(value <= type(uint248).max, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        require(value <= type(uint240).max, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        require(value <= type(uint232).max, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        require(value <= type(uint216).max, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        require(value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        require(value <= type(uint200).max, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        require(value <= type(uint192).max, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        require(value <= type(uint184).max, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        require(value <= type(uint176).max, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        require(value <= type(uint168).max, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        require(value <= type(uint160).max, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        require(value <= type(uint152).max, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        require(value <= type(uint144).max, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        require(value <= type(uint136).max, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        require(value <= type(uint120).max, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        require(value <= type(uint112).max, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        require(value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.2._\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        require(value <= type(uint88).max, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        require(value <= type(uint80).max, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        require(value <= type(uint72).max, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        require(value <= type(uint56).max, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        require(value <= type(uint48).max, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        require(value <= type(uint40).max, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        require(value <= type(uint24).max, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v2.5._\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 248 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 240 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 232 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 216 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 200 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 192 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 184 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 176 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 168 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 160 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 152 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 144 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 136 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 120 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 112 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 88 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 80 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 72 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 56 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 48 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 40 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     *\\n     * _Available since v4.7._\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 24 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        require(downcasted == value, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     *\\n     * _Available since v3.0._\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Address.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\"\r\n    },\r\n    \"contracts/Constants.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nabstract contract Constants {\\n    /**\\n     * @notice Maximum value is equal to 500 because Chainlink can provide only\\n     *         500 random numbers per one request.\\n     */\\n    uint256 public constant MAX_DISTRIBUTION_LENGTH = 500;\\n\\n    /**\\n     * @notice Maximum value is equal to 256 because DrawRingBuffer can store\\n     *         only 256 draws maximum. An oldest draws always will be rewritten\\n     *         by a newest one.\\n     */\\n    uint256 public constant MAX_DRAW_IDS_LENGTH = 256;\\n\\n    /**\\n     * @notice Maximum value is equal to 10000 because it is no reason to do it\\n     *         greater.\\n     */\\n    uint256 public constant MAX_TIMESTAMPS_LENGTH = 10_000;\\n\\n    /**\\n     * @notice Maximum value is equal to 1000 because it is no reason to do it\\n     *         greater.\\n     */\\n    uint256 public constant MAX_TOKEN_IDS_LENGTH = 1_000;\\n\\n    /**\\n     * @notice Maximum value is equal to 1000 because it is no reason to do it\\n     *         greater.\\n     */\\n    uint256 public constant MAX_EPOCH_IDS_LENGTH = 1_000;\\n}\\n\"\r\n    },\r\n    \"contracts/core/external/compound/ICompLike.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\ninterface ICompLike is IERC20Upgradeable {\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    function delegate(address delegate) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IControlledToken.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\n/** @title IControlledToken\\n * @author Asymetrix Protocol Inc Team\\n * @notice ERC20 Tokens with a controller for minting & burning.\\n */\\ninterface IControlledToken is IERC20Upgradeable {\\n    /**\\n        @notice Interface to the contract responsible for controlling mint/burn\\n    */\\n    function controller() external view returns (address);\\n\\n    /**\\n     * @notice Allows the controller to mint tokens for a user account\\n     * @dev    May be overridden to provide more granular control over minting\\n     * @param user Address of the receiver of the minted tokens\\n     * @param amount Amount of tokens to mint\\n     */\\n    function controllerMint(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows the controller to burn tokens from a user account\\n     * @dev    May be overridden to provide more granular control over burning\\n     * @param user Address of the holder account to burn tokens from\\n     * @param amount Amount of tokens to burn\\n     */\\n    function controllerBurn(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Allows an operator via the controller to burn tokens on behalf of\\n     *         a user account\\n     * @dev    May be overridden to provide more granular control over\\n     *         operator-burning\\n     * @param operator Address of the operator performing the burn action via\\n     *        the controller contract\\n     * @param user Address of the holder account to burn tokens from\\n     * @param amount Amount of tokens to burn\\n     */\\n    function controllerBurnFrom(address operator, address user, uint256 amount) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IDrawBeacon.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IDrawBuffer.sol\\\";\\n\\n/**\\n * @title  IDrawBeacon\\n * @author Asymetrix Protocol Inc Team\\n * @notice The DrawBeacon interface.\\n */\\ninterface IDrawBeacon {\\n    /// @notice Draw struct created every draw\\n    /// @param drawId The monotonically increasing drawId for each draw\\n    /// @param timestamp Unix timestamp of the draw. Recorded when the draw is\\n    ///                  created by the DrawBeacon.\\n    /// @param beaconPeriodStartedAt Unix timestamp of when the draw started\\n    /// @param beaconPeriodSeconds Unix timestamp of the beacon draw period for\\n    ///                            this draw.\\n    /// @param rngRequestInternalId An internal ID of RNG service request.\\n    /// @param participantsHash A unique hash of participants of the draw.\\n    /// @param picksNumber A number of picks for the draw.\\n    /// @param randomness An array of random numbers for the draw.\\n    /// @param isEmpty A flag that indicates if the draw doesn't have\\n    ///                participants.\\n    /// @param paid A flag that indicates if prizes for the draw are paid or not.\\n    struct Draw {\\n        uint32 drawId;\\n        uint64 timestamp;\\n        uint64 beaconPeriodStartedAt;\\n        uint32 beaconPeriodSeconds;\\n        uint32 rngRequestInternalId;\\n        bytes participantsHash;\\n        uint256[] randomness;\\n        uint256 picksNumber;\\n        bool isEmpty;\\n        bool paid;\\n    }\\n\\n    /**\\n     * @notice Emit when a new DrawBuffer has been set.\\n     * @param newDrawBuffer The new DrawBuffer address\\n     */\\n    event DrawBufferUpdated(IDrawBuffer indexed newDrawBuffer);\\n\\n    /**\\n     * @notice Emit when a draw has opened.\\n     * @param startedAt Start timestamp\\n     */\\n    event BeaconPeriodStarted(uint64 indexed startedAt);\\n\\n    /**\\n     * @notice Emit when a draw has started.\\n     * @param drawId Draw id\\n     */\\n    event DrawStarted(uint32 indexed drawId);\\n\\n    /**\\n     * @notice Emit when the drawPeriodSeconds is set.\\n     * @param drawPeriodSeconds Time between draw\\n     */\\n    event BeaconPeriodSecondsUpdated(uint32 drawPeriodSeconds);\\n\\n    /**\\n     * @notice Returns the number of seconds remaining until the beacon period\\n     *         can be complete.\\n     * @return The number of seconds remaining until the beacon period can be\\n     *         complete.\\n     */\\n    function beaconPeriodRemainingSeconds() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns beacon period seconds.\\n     * @return The number of seconds of the beacon period.\\n     */\\n    function getBeaconPeriodSeconds() external view returns (uint32);\\n\\n    /**\\n     * @notice Returns DrawBuffer contract address.\\n     * @return DrawBuffer contract address.\\n     */\\n    function getDrawBuffer() external view returns (IDrawBuffer);\\n\\n    /**\\n     * @notice Returns the time when the beacon period started at.\\n     * @return The time when the beacon period started at.\\n     */\\n    function getBeaconPeriodStartedAt() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the timestamp at which the beacon period ends.\\n     * @return The timestamp at which the beacon period ends.\\n     */\\n    function beaconPeriodEndAt() external view returns (uint64);\\n\\n    /**\\n     * @notice Returns the next draw ID.\\n     * @return The ID of the next draw to start.\\n     */\\n    function getNextDrawId() external view returns (uint32);\\n\\n    /**\\n     * @notice Calculates the next beacon start time, assuming all beacon\\n     *         periods have  occurred between the last and now.\\n     * @return The next beacon period start time.\\n     */\\n    function calculateNextBeaconPeriodStartTimeFromCurrentTime() external view returns (uint64);\\n\\n    /**\\n     * @notice Calculates when the next beacon period will start.\\n     * @param time The timestamp to use as the current time.\\n     * @return The timestamp at which the next beacon period would start.\\n     */\\n    function calculateNextBeaconPeriodStartTime(uint64 time) external view returns (uint64);\\n\\n    /**\\n     * @notice Returns whether the beacon period is over.\\n     * @return True if the beacon period is over, false otherwise.\\n     */\\n    function isBeaconPeriodOver() external view returns (bool);\\n\\n    /**\\n     * @notice Returns whether the draw can start\\n     * @return True if the beacon period is over, false otherwise\\n     */\\n    function canStartDraw() external view returns (bool);\\n\\n    /**\\n     * @notice Allows the owner to set the beacon period in seconds.\\n     * @param beaconPeriodSeconds The new beacon period in seconds. Must be\\n     *        greater than zero.\\n     */\\n    function setBeaconPeriodSeconds(uint32 beaconPeriodSeconds) external;\\n\\n    /**\\n     * @notice Starts the Draw process. The previous beacon period must have\\n     *         ended.\\n     */\\n    function startDraw() external;\\n\\n    /**\\n     * @notice Set global DrawBuffer variable.\\n     * @dev    All subsequent Draw requests/completions will be pushed to the\\n     *         new DrawBuffer.\\n     * @param newDrawBuffer DrawBuffer address\\n     * @return DrawBuffer\\n     */\\n    function setDrawBuffer(IDrawBuffer newDrawBuffer) external returns (IDrawBuffer);\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IDrawBuffer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./IDrawBeacon.sol\\\";\\n\\n/**\\n * @title  IDrawBuffer\\n * @author Asymetrix Protocol Inc Team\\n * @notice The DrawBuffer interface.\\n */\\ninterface IDrawBuffer {\\n    /**\\n     * @notice Emit when a new draw has been created.\\n     * @param drawId Draw id\\n     * @param draw The Draw struct\\n     */\\n    event DrawSet(uint32 indexed drawId, IDrawBeacon.Draw draw);\\n\\n    /**\\n     * @notice Emit when a new PrizeDistributor contract address is set.\\n     * @param prizeDistributor A new PrizeDistributor contract address\\n     */\\n    event PrizeDistributorSet(address prizeDistributor);\\n\\n    /**\\n     * @notice Emit when draw is marked is paid.\\n     * @param drawId An ID of a draw that was marked as paid\\n     */\\n    event DrawMarkedAsPaid(uint32 drawId);\\n\\n    /**\\n     * @notice Read a PrizeDistributor contract address.\\n     * @return A PrizeDistributor contract address.\\n     */\\n    function getPrizeDistributor() external view returns (address);\\n\\n    /**\\n     * @notice Read a ring buffer cardinality.\\n     * @return Ring buffer cardinality.\\n     */\\n    function getBufferCardinality() external view returns (uint32);\\n\\n    /**\\n     * @notice Read a Draw from the draws ring buffer.\\n     * @dev    Read a Draw using the Draw.drawId to calculate position in the\\n     *         draws ring buffer.\\n     * @param drawId Draw.drawId\\n     * @return IDrawBeacon.Draw\\n     */\\n    function getDraw(uint32 drawId) external view returns (IDrawBeacon.Draw memory);\\n\\n    /**\\n     * @notice Read multiple Draws from the draws ring buffer.\\n     * @dev    Read multiple Draws using each drawId to calculate position in\\n     *         the draws ring buffer.\\n     * @param drawIds Array of drawIds\\n     * @return IDrawBeacon.Draw[] array with the draw information of the\\n     *         requested draw ids\\n     */\\n    function getDraws(uint32[] calldata drawIds) external view returns (IDrawBeacon.Draw[] memory);\\n\\n    /**\\n     * @notice Gets the number of Draws held in the draw ring buffer.\\n     * @dev    If no Draws have been pushed, it will return 0.\\n     * @dev    If the ring buffer is full, it will return the cardinality.\\n     * @dev    Otherwise, it will return the NewestDraw index + 1.\\n     * @return Number of Draws held in the draw ring buffer.\\n     */\\n    function getDrawCount() external view returns (uint32);\\n\\n    /**\\n     * @notice Read newest Draw from draws ring buffer.\\n     * @dev    Uses the nextDrawIndex to calculate the most recently added Draw.\\n     * @return IDrawBeacon.Draw\\n     */\\n    function getNewestDraw() external view returns (IDrawBeacon.Draw memory);\\n\\n    /**\\n     * @notice Read oldest Draw from draws ring buffer.\\n     * @dev    Finds the oldest Draw by comparing and/or diffing totalDraws with\\n     *         the cardinality.\\n     * @return IDrawBeacon.Draw\\n     */\\n    function getOldestDraw() external view returns (IDrawBeacon.Draw memory);\\n\\n    /**\\n     * @notice Push Draw onto draws ring buffer history.\\n     * @dev    Push new draw onto draws history via authorized manager or owner.\\n     * @param draw IDrawBeacon.Draw\\n     * @return Draw.drawId\\n     */\\n    function pushDraw(IDrawBeacon.Draw calldata draw) external returns (uint32);\\n\\n    /**\\n     * @notice Set existing Draw in draws ring buffer with new parameters.\\n     * @dev    Updating a Draw should be used sparingly and only in the event an\\n     *         incorrect Draw parameter has been stored.\\n     * @param newDraw IDrawBeacon.Draw\\n     * @return Draw.drawId\\n     */\\n    function setDraw(IDrawBeacon.Draw calldata newDraw) external returns (uint32);\\n\\n    /**\\n     * @notice Set a new PrizeDistributor contract address.\\n     * @param prizeDistributor A new PrizeDistributor contract address\\n     */\\n    function setPrizeDistributor(address prizeDistributor) external;\\n\\n    /**\\n     * @notice Mark a draw as paid.\\n     * @dev    It means that the winners of the draw were paid and the draw can\\n     *         not be paid again.\\n     * @param drawId An ID of a draw that should be marked as paid\\n     */\\n    function markDrawAsPaid(uint32 drawId) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/IPrizePoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport { ICompLike } from \\\"../external/compound/ICompLike.sol\\\";\\n\\nimport { IDrawBeacon } from \\\"./IDrawBeacon.sol\\\";\\nimport { ITicket } from \\\"./ITicket.sol\\\";\\n\\ninterface IPrizePoolV2 {\\n    /**\\n     * @notice The user stake info struct.\\n     * @dev    The user stake info struct used to store information about users'\\n     *         stakes and rewards.\\n     * @param reward Claimable reward in ASX tokens that belongs to a user (with\\n     *               18 decimals accuracy).\\n     * @param former Coefficient that is used to calculate the reward in ASX\\n     *               tokens with different staked amount (when staked amount\\n     *               changes, with 18 decimals accuracy).\\n     * @param lastClaimed Timestamp of last claimed of ASX tokens.\\n     * @param esAsxLastClaimed Timestamp of last claimed of esASX tokens.\\n     * @param esAsxBoostableReward Claimable reward in esASX tokens that belongs\\n     *                             to a user (with 18 decimals accuracy). Can be\\n     *                             boosted.\\n     * @param esAsxBoostlessReward Claimable reward in esASX tokens that belongs\\n     *                             to a user. Can't be boosted.\\n     * @param esAsxFormer Coefficient that is used to calculate the reward in\\n     *                    esASX tokens with different staked amount (when staked\\n     *                    amount changes, with 18 decimals accuracy).\\n     */\\n    struct UserStakeInfo {\\n        uint256 reward;\\n        uint256 former;\\n        uint32 lastClaimed;\\n        uint32 esAsxLastClaimed;\\n        uint256 esAsxBoostableReward;\\n        uint256 esAsxBoostlessReward;\\n        uint256 esAsxFormer;\\n    }\\n\\n    /// @dev Event emitted when controlled token is added\\n    event ControlledTokenAdded(ITicket indexed token);\\n\\n    event AwardCaptured(uint256 amount);\\n\\n    /// @dev Event emitted when assets are deposited\\n    event Deposited(address indexed operator, address indexed to, ITicket indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when interest is awarded to a winner\\n    event Awarded(address indexed winner, ITicket indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC20s are awarded to a winner\\n    event AwardedExternalERC20(address indexed winner, address indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC20s are transferred out\\n    event TransferredExternalERC20(address indexed to, address indexed token, uint256 amount);\\n\\n    /// @dev Event emitted when external ERC721s are awarded to a winner\\n    event AwardedExternalERC721(address indexed winner, address indexed token, uint256[] tokenIds);\\n\\n    /// @dev Event emitted when assets are withdrawn\\n    event Withdrawal(\\n        address indexed operator,\\n        address indexed from,\\n        ITicket indexed token,\\n        uint256 amount,\\n        uint256 redeemed,\\n        uint256 fee\\n    );\\n\\n    /// @dev Event emitted when the Balance Cap is set\\n    event BalanceCapSet(uint256 balanceCap);\\n\\n    /// @dev Event emitted when the Liquidity Cap is set\\n    event LiquidityCapSet(uint256 liquidityCap);\\n\\n    /// @dev Event emitted when the Prize Flush is set\\n    event PrizeFlushSet(address indexed prizeFlush);\\n\\n    /// @dev Event emitted when the Ticket is set\\n    event TicketSet(ITicket indexed ticket);\\n\\n    /// @dev Event emitted when the DrawBeacon is set\\n    event DrawBeaconSet(IDrawBeacon indexed drawBeacond);\\n\\n    /// @dev Emitted when there was an error thrown awarding an External ERC721\\n    event ErrorAwardingExternalERC721(bytes error);\\n\\n    /// @dev Event emitted when the Reward Token is set\\n    event RewardTokenSet(IERC20Upgradeable indexed rewardToken);\\n\\n    /// @dev Event emitted when the ASX Reward Per Second is set\\n    event AsxRewardPerSecondSet(uint256 asxRewardPerSecond);\\n\\n    /// @dev Event emitted when the esASX Reward Per Second is set\\n    event EsAsxRewardPerSecondSet(uint256 esAsxRewardPerSecond);\\n\\n    /// @dev Event emitted when the liquidation threshold is set\\n    event LiquidationThresholdSet(uint16 liquidationThreshold);\\n\\n    /// @dev Event emitted when the reward updated\\n    event RewardUpdated(uint64 indexed lastUpdated);\\n\\n    /// @dev Event emitted when the First Lido Rebase Timestamp is set\\n    event FirstLidoRebaseTimestampSet(uint32 firstLidoRebaseTimestamp);\\n\\n    /// @dev Event emmited when the Lido APR is set\\n    event LidoAPRSet(uint16 lidoAPR);\\n\\n    /// @dev Event emmited when the Free Exit Duration is set\\n    event FreeExitDurationSet(uint32 freeExitDuration);\\n\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens\\n    /// @param to The address receiving the newly minted tokens\\n    /// @param amount The amount of assets to deposit\\n    function depositTo(address to, uint256 amount) external;\\n\\n    /// @notice Deposit assets into the Prize Pool in exchange for tokens,\\n    /// then sets the delegate on behalf of the caller.\\n    /// @param to The address receiving the newly minted tokens\\n    /// @param amount The amount of assets to deposit\\n    /// @param delegate The address to delegate to for the caller\\n    function depositToAndDelegate(address to, uint256 amount, address delegate) external;\\n\\n    /// @notice Withdraw assets from the Prize Pool instantly.\\n    /// @param from The address to redeem tokens from.\\n    /// @param amount The amount of tokens to redeem for assets.\\n    /// @return The actual amount withdrawn\\n    function withdrawFrom(address from, uint256 amount) external returns (uint256);\\n\\n    /// @notice Called by the ticket to update user's reward and former in time\\n    ///         of transfer.\\n    /// @param _user The user where need to update reward and former.\\n    /// @param _beforeBalance The balance of user before transfer.\\n    /// @param _afterBalance The balance of user after transfer.\\n    function updateUserRewardAndFormer(address _user, uint256 _beforeBalance, uint256 _afterBalance) external;\\n\\n    /// @notice Claim reward in ASX and esASX tokens that distributes on users'\\n    ///         deposits.\\n    /// @param _user The user for whom to claim reward.\\n    function claim(address _user) external;\\n\\n    /// @notice Liquidates a users boosted rewards in esASX tokens for the user.\\n    /// @param _users The array of users for whom to execute a liquidation. If equals to zero address liquidation will\\n    ///               be executed for esSEX tokens from `availableForLiquidationEsAsx` pool.\\n    /// @param _amounts The array of amounts of esASX tokens to liquidate.\\n    function liquidate(address[] calldata _users, uint256[] calldata _amounts) external payable;\\n\\n    /// @notice Called by the prize flush to award prizes.\\n    /// @dev The amount awarded must be less than the awardBalance()\\n    /// @param to The address of the winner that receives the award\\n    /// @param amount The amount of assets to be awarded\\n    function award(address to, uint256 amount) external;\\n\\n    /// @notice Returns the balance that is available to award.\\n    /// @dev captureAwardBalance() should be called first\\n    /// @return The total amount of assets to be awarded for the current prize\\n    function awardBalance() external view returns (uint256);\\n\\n    /// @notice Captures any available interest as award balance.\\n    /// @dev This function also captures the reserve fees.\\n    /// @return The total amount of assets to be awarded for the current prize\\n    function captureAwardBalance() external returns (uint256);\\n\\n    /// @dev Checks with the Prize Pool if a specific token type may be awarded\\n    ///      as an external prize\\n    /// @param externalToken The address of the token to check\\n    /// @return True if the token may be awarded, false otherwise\\n    function canAwardExternal(address externalToken) external view returns (bool);\\n\\n    // @dev Returns the total underlying balance of all assets. This includes\\n    ///     both principal and interest.\\n    /// @return The underlying balance of assets\\n    function balance() external returns (uint256);\\n\\n    /**\\n     * @notice Read internal Ticket accounted balance.\\n     * @return uint256 accountBalance\\n     */\\n    function getAccountedBalance() external view returns (uint256);\\n\\n    /**\\n     * @notice Read internal balanceCap variable\\n     */\\n    function getBalanceCap() external view returns (uint256);\\n\\n    /**\\n     * @notice Read internal liquidityCap variable\\n     */\\n    function getLiquidityCap() external view returns (uint256);\\n\\n    /**\\n     * @notice Read ticket variable\\n     */\\n    function getTicket() external view returns (ITicket);\\n\\n    /**\\n     * @notice Read drawBeacond variable\\n     */\\n    function getDrawBeacon() external view returns (IDrawBeacon);\\n\\n    /**\\n     * @notice Read prize flush variable\\n     */\\n    function getPrizeFlush() external view returns (address);\\n\\n    /**\\n     * @notice Read rewardToken variable\\n     */\\n    function getRewardToken() external view returns (IERC20Upgradeable);\\n\\n    /**\\n     * @notice Read token variable\\n     */\\n    function getToken() external view returns (address);\\n\\n    /**\\n     * @notice Read lastUpdated variable\\n     */\\n    function getLastUpdated() external view returns (uint64);\\n\\n    /**\\n     * @notice Read asxRewardPerSecond variable\\n     */\\n    function getAsxRewardPerSecond() external view returns (uint256);\\n\\n    /**\\n     * @notice Read asxRewardPerShare variable\\n     */\\n    function getAsxRewardPerShare() external view returns (uint256);\\n\\n    /**\\n     * @notice Read freeExitDuration variable\\n     */\\n    function getFreeExitDuration() external view returns (uint32);\\n\\n    /**\\n     * @notice Read deploymentTimestamp variable\\n     */\\n    function getDeploymentTimestamp() external view returns (uint32);\\n\\n    /**\\n     * @notice Read firstLidoRebaseTimestamp variable\\n     */\\n    function getFirstLidoRebaseTimestamp() external view returns (uint32);\\n\\n    /**\\n     * @notice Read lidoAPR variable\\n     */\\n    function getLidoAPR() external view returns (uint16);\\n\\n    /**\\n     * @notice Read userStakeInfo variable\\n     * @param user The address of the user to retrieve stake info about\\n     */\\n    function getUserStakeInfo(address user) external view returns (UserStakeInfo memory);\\n\\n    /**\\n     * @notice Read distributionEnd variable\\n     */\\n    function getDistributionEnd() external view returns (uint32);\\n\\n    /**\\n     * @notice Calculates actual claimable amount of ASX and esASX tokens for\\n     *         the user\\n     * @param user A user for whom to calculate claimable ASX and esASX rewards.\\n     * @return asxReward Claimable ASX tokens amount.\\n     * @return esAsxReward Claimable esASX tokens amount.\\n     */\\n    function getClaimableRewards(address user) external view returns (uint256 asxReward, uint256 esAsxReward);\\n\\n    /// @dev Checks if a specific token is controlled by the Prize Pool\\n    /// @param controlledToken The address of the token to check\\n    /// @return True if the token is a controlled token, false otherwise\\n    function isControlled(ITicket controlledToken) external view returns (bool);\\n\\n    /// @notice Called by the Prize-Flush to transfer out external ERC20 tokens\\n    /// @dev Used to transfer out tokens held by the Prize Pool.  Could be\\n    ///      liquidated, or anything.\\n    /// @param to The address of the winner that receives the award\\n    /// @param externalToken The address of the external asset token being\\n    ///                      awarded\\n    /// @param amount The amount of external assets to be awarded\\n    function transferExternalERC20(address to, address externalToken, uint256 amount) external;\\n\\n    /// @notice Called by the Prize-Flush to award external ERC20 prizes\\n    /// @dev Used to award any arbitrary tokens held by the Prize Pool\\n    /// @param to The address of the winner that receives the award\\n    /// @param externalToken The address of the external asset token being\\n    ///                      awarded\\n    /// @param amount The amount of external assets to be awarded\\n    function awardExternalERC20(address to, address externalToken, uint256 amount) external;\\n\\n    /// @notice Called by the prize flush to award external ERC721 prizes\\n    /// @dev Used to award any arbitrary NFTs held by the Prize Pool\\n    /// @param to The address of the winner that receives the award\\n    /// @param externalToken The address of the external NFT token being awarded\\n    /// @param tokenIds An array of NFT Token IDs to be transferred\\n    function awardExternalERC721(address to, address externalToken, uint256[] calldata tokenIds) external;\\n\\n    /// @notice Allows the owner to set a balance cap per `token` for the pool.\\n    /// @dev If a user wins, his balance can go over the cap. He will be able to\\n    ///      withdraw the excess but not deposit.\\n    /// @dev Needs to be called after deploying a prize pool to be able to\\n    ///      deposit into it.\\n    /// @param balanceCap New balance cap.\\n    /// @return True if new balance cap has been successfully set.\\n    function setBalanceCap(uint256 balanceCap) external returns (bool);\\n\\n    /// @notice Allows the Governor to set a cap on the amount of liquidity that\\n    ///         the pool can hold\\n    /// @param liquidityCap The new liquidity cap for the prize pool\\n    function setLiquidityCap(uint256 liquidityCap) external;\\n\\n    /// @notice Sets the reward per second for the prize pool that will be used\\n    ///         for ASX tokens distribution. Only callable by the owner.\\n    /// @param asxRewardPerSecond The new reward per second in ASX tokens.\\n    function setAsxRewardPerSecond(uint256 asxRewardPerSecond) external;\\n\\n    /// @notice Sets the reward per second for the prize pool that will be used\\n    ///         for esASX tokens distribution. Only callable by the owner.\\n    /// @param esAsxRewardPerSecond The new reward per second in esASX tokens.\\n    function setEsAsxRewardPerSecond(uint256 esAsxRewardPerSecond) external;\\n\\n    /// @notice Sets a new liquidation threshold. Only callable by the owner.\\n    /// @param liquidationThreshold Minimum threshold for partial liquidation of\\n    ///                             users' boosts.\\n    function setLiquidationThreshold(uint16 liquidationThreshold) external;\\n\\n    /// @notice Set prize pool ticket.\\n    /// @param ticket Address of the ticket to set.\\n    /// @return True if ticket has been successfully set.\\n    function setTicket(ITicket ticket) external returns (bool);\\n\\n    /// @notice Set draw beacon.\\n    /// @param drawBeacon DrawBeacon address to set.\\n    function setDrawBeacon(IDrawBeacon drawBeacon) external;\\n\\n    /// @notice Set prize flush.\\n    /// @param prizeFlush PrizeFlush address to set.\\n    function setPrizeFlush(address prizeFlush) external;\\n\\n    /// @notice Set a new distribution end timestamp. Only callable by the\\n    ///         owner.\\n    /// @param newDistributionEnd A new distribution end timestamp.\\n    function setDistributionEnd(uint32 newDistributionEnd) external;\\n\\n    /// @notice Set the free exit duration, in seconds. Only callable by the\\n    ///         owner.\\n    /// @param freeExitDuration The duration after finishing of a draw when\\n    ///                          user can leave the protocol without fee\\n    ///                          charging (in stETH)\\n    function setFreeExitDuration(uint32 freeExitDuration) external;\\n\\n    /// @notice Set APR of the Lido protocol. Only callable by the owner.\\n    /// @param lidoAPR An APR of the Lido protocol.\\n    function setLidoAPR(uint16 lidoAPR) external;\\n\\n    /// @notice Delegate the votes for a Compound COMP-like token held by the\\n    ///         prize pool.\\n    /// @param compLike The COMP-like token held by the prize pool that should\\n    ///                 be delegated.\\n    /// @param to The address to delegate to.\\n    function compLikeDelegate(ICompLike compLike, address to) external;\\n}\\n\"\r\n    },\r\n    \"contracts/core/interfaces/ITicket.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../libraries/TwabLib.sol\\\";\\n\\nimport \\\"./IControlledToken.sol\\\";\\n\\ninterface ITicket is IControlledToken {\\n    /**\\n     * @notice A struct containing details for an Account.\\n     * @param balance The current balance for an Account.\\n     * @param nextTwabIndex The next available index to store a new twab.\\n     * @param cardinality The number of recorded twabs (plus one!).\\n     */\\n    struct AccountDetails {\\n        uint224 balance;\\n        uint16 nextTwabIndex;\\n        uint16 cardinality;\\n    }\\n\\n    /**\\n     * @notice Combines account details with their twab history.\\n     * @param details The account details.\\n     * @param twabs The history of twabs for this account.\\n     */\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[65535] twabs;\\n    }\\n\\n    /**\\n     * @notice Emitted when TWAB balance has been delegated to another user.\\n     * @param delegator Address of the delegator.\\n     * @param delegate Address of the delegate.\\n     */\\n    event Delegated(address indexed delegator, address indexed delegate);\\n\\n    /**\\n     * @notice Emitted when ticket is initialized.\\n     * @param name Ticket name (eg: Asymetrix Protocol Dai Ticket (Compound)).\\n     * @param symbol Ticket symbol (eg: AsxDAI).\\n     * @param decimals Ticket decimals.\\n     * @param controller Token controller address.\\n     */\\n    event TicketInitialized(string name, string symbol, uint8 decimals, address indexed controller);\\n\\n    /**\\n     * @notice Emitted when a new TWAB has been recorded.\\n     * @param delegate The recipient of the ticket power (may be the same as the\\n     *                 user).\\n     * @param newTwab Updated TWAB of a ticket holder after a successful TWAB\\n     *                recording.\\n     */\\n    event NewUserTwab(address indexed delegate, ObservationLib.Observation newTwab);\\n\\n    /**\\n     * @notice Emitted when a new total supply TWAB has been recorded.\\n     * @param newTotalSupplyTwab Updated TWAB of tickets total supply after a\\n     *                           successful total supply TWAB recording.\\n     */\\n    event NewTotalSupplyTwab(ObservationLib.Observation newTotalSupplyTwab);\\n\\n    /**\\n     * @notice Retrieves the address of the delegate to whom `user` has\\n     *         delegated their tickets.\\n     * @dev Address of the delegate will be the zero address if `user` has not\\n     *      delegated their tickets.\\n     * @param user Address of the delegator.\\n     * @return Address of the delegate.\\n     */\\n    function delegateOf(address user) external view returns (address);\\n\\n    /**\\n     * @notice Delegate time-weighted average balances to an alternative address.\\n     * @dev    Transfers (including mints) trigger the storage of a TWAB in\\n     *         delegate(s) account, instead of the targetted sender and/or\\n     *         recipient address(s).\\n     * @dev    To reset the delegate, pass the zero address (0x000.000) as `to`\\n     *         parameter.\\n     * @dev    Current delegate address should be different from the new\\n     *         delegate address `to`.\\n     * @param  to Recipient of delegated TWAB.\\n     */\\n    function delegate(address to) external;\\n\\n    /**\\n     * @notice Allows the controller to delegate on a users behalf.\\n     * @param user The user for whom to delegate\\n     * @param delegate The new delegate\\n     */\\n    function controllerDelegateFor(address user, address delegate) external;\\n\\n    /**\\n     * @notice Allows a user to delegate via signature\\n     * @param user The user who is delegating\\n     * @param delegate The new delegate\\n     * @param deadline The timestamp by which this must be submitted\\n     * @param v The v portion of the ECDSA sig\\n     * @param r The r portion of the ECDSA sig\\n     * @param s The s portion of the ECDSA sig\\n     */\\n    function delegateWithSignature(\\n        address user,\\n        address delegate,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @notice Gets a users twab context.  This is a struct with their balance,\\n     *         next twab index, and cardinality.\\n     * @param user The user for whom to fetch the TWAB context.\\n     * @return The TWAB context, which includes { balance, nextTwabIndex,\\n     *         cardinality }\\n     */\\n    function getAccountDetails(address user) external view returns (TwabLib.AccountDetails memory);\\n\\n    /**\\n     * @notice Gets the TWAB at a specific index for a user.\\n     * @param user The user for whom to fetch the TWAB.\\n     * @param index The index of the TWAB to fetch.\\n     * @return The TWAB, which includes the twab amount and the timestamp.\\n     */\\n    function getTwab(address user, uint16 index) external view returns (ObservationLib.Observation memory);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balance.\\n     * @param user Address of the user whose TWAB is being fetched.\\n     * @param timestamp Timestamp at which we want to retrieve the TWAB balance.\\n     * @return The TWAB balance at the given timestamp.\\n     */\\n    function getBalanceAt(address user, uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves `user` TWAB balances.\\n     * @param user Address of the user whose TWABs are being fetched.\\n     * @param timestamps Timestamps range at which we want to retrieve the\\n     *                   TWAB balances.\\n     * @return `user` TWAB balances.\\n     */\\n    function getBalancesAt(address user, uint64[] calldata timestamps) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average balance held by a user for a given time\\n     *         frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTime The start time of the time frame.\\n     * @param endTime The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalanceBetween(address user, uint64 startTime, uint64 endTime) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the average balances held by a user for a given time\\n     *         frame.\\n     * @param user The user whose balance is checked.\\n     * @param startTimes The start time of the time frame.\\n     * @param endTimes The end time of the time frame.\\n     * @return The average balance that the user held during the time frame.\\n     */\\n    function getAverageBalancesBetween(\\n        address user,\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance at the given timestamp.\\n     * @param timestamp Timestamp at which we want to retrieve the total supply\\n     *                  TWAB balance.\\n     * @return The total supply TWAB balance at the given timestamp.\\n     */\\n    function getTotalSupplyAt(uint64 timestamp) external view returns (uint256);\\n\\n    /**\\n     * @notice Retrieves the total supply TWAB balance between the given\\n     *         timestamps range.\\n     * @param timestamps Timestamps range at which we want to retrieve the total\\n     *                   supply TWAB balance.\\n     * @return Total supply TWAB balances.\\n     */\\n    function getTotalSuppliesAt(uint64[] calldata timestamps) external view returns (uint256[] memory);\\n\\n    /**\\n     * @notice Retrieves the average total supply balance for a set of given\\n     *         time frames.\\n     * @param startTimes Array of start times.\\n     * @param endTimes Array of end times.\\n     * @return The average total supplies held during the time frame.\\n     */\\n    function getAverageTotalSuppliesBetween(\\n        uint64[] calldata startTimes,\\n        uint64[] calldata endTimes\\n    ) external view returns (uint256[] memory);\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/ExtendedSafeCastLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added\\n * overflow checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This\\n * can easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller\\n * types, by performing all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary ExtendedSafeCastLib {\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 _value) internal pure returns (uint104) {\\n        require(_value <= type(uint104).max, \\\"SafeCast: value doesn't fit in 104 bits\\\");\\n        return uint104(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 _value) internal pure returns (uint208) {\\n        require(_value <= type(uint208).max, \\\"SafeCast: value doesn't fit in 208 bits\\\");\\n        return uint208(_value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 _value) internal pure returns (uint224) {\\n        require(_value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(_value);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/ObservationLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\n\\n/**\\n * @title Observation Library\\n * @notice This library allows one to store an array of timestamped values and\\n *         efficiently binary search them.\\n * @dev Largely pulled from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/c05a0e2c8c08c460fb4d05cfdda30b3ad8deeaac/contracts/libraries/Oracle.sol\\n * @author Asymetrix Protocol Inc.\\n */\\nlibrary ObservationLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using SafeCastUpgradeable for uint256;\\n\\n    /// @notice The maximum number of observations\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /**\\n     * @notice Observation, which includes an amount and timestamp.\\n     * @param amount `amount` at `timestamp`.\\n     * @param timestamp Recorded `timestamp`.\\n     */\\n    struct Observation {\\n        uint224 amount;\\n        uint32 timestamp;\\n    }\\n\\n    /**\\n     * @notice Fetches Observations `beforeOrAt` and `atOrAfter` a `_target`, eg: where [`beforeOrAt`, `atOrAfter`] is satisfied.\\n     * The result may be the same Observation, or adjacent Observations.\\n     * @dev The answer must be contained in the array used when the target is located within the stored Observation.\\n     * boundaries: older than the most recent Observation and younger, or the same age as, the oldest Observation.\\n     * @dev  If `_newestObservationIndex` is less than `_oldestObservationIndex`, it means that we've wrapped around the circular buffer.\\n     *       So the most recent observation will be at `_oldestObservationIndex + _cardinality - 1`, at the beginning of the circular buffer.\\n     * @param _observations List of Observations to search through.\\n     * @param _newestObservationIndex Index of the newest Observation. Right side of the circular buffer.\\n     * @param _oldestObservationIndex Index of the oldest Observation. Left side of the circular buffer.\\n     * @param _target Timestamp at which we are searching the Observation.\\n     * @param _cardinality Cardinality of the circular buffer we are searching through.\\n     * @param _time Timestamp at which we perform the binary search.\\n     * @return beforeOrAt Observation recorded before, or at, the target.\\n     * @return atOrAfter Observation recorded at, or after, the target.\\n     */\\n    function binarySearch(\\n        Observation[MAX_CARDINALITY] storage _observations,\\n        uint24 _newestObservationIndex,\\n        uint24 _oldestObservationIndex,\\n        uint32 _target,\\n        uint24 _cardinality,\\n        uint32 _time\\n    ) internal view returns (Observation memory beforeOrAt, Observation memory atOrAfter) {\\n        uint256 leftSide = _oldestObservationIndex;\\n        uint256 rightSide = _newestObservationIndex < leftSide ? leftSide + _cardinality - 1 : _newestObservationIndex;\\n        uint256 currentIndex;\\n\\n        while (true) {\\n            // We start our search in the middle of the `leftSide` and `rightSide`.\\n            // After each iteration, we narrow down the search to the left or the right side while still starting our search in the middle.\\n            currentIndex = (leftSide + rightSide) / 2;\\n\\n            beforeOrAt = _observations[uint24(RingBufferLib.wrap(currentIndex, _cardinality))];\\n            uint32 beforeOrAtTimestamp = beforeOrAt.timestamp;\\n\\n            // We've landed on an uninitialized timestamp, keep searching higher (more recently).\\n            if (beforeOrAtTimestamp == 0) {\\n                leftSide = currentIndex + 1;\\n                continue;\\n            }\\n\\n            atOrAfter = _observations[uint24(RingBufferLib.nextIndex(currentIndex, _cardinality))];\\n\\n            bool targetAtOrAfter = beforeOrAtTimestamp.lte(_target, _time);\\n\\n            // Check if we've found the corresponding Observation.\\n            if (targetAtOrAfter && _target.lte(atOrAfter.timestamp, _time)) {\\n                break;\\n            }\\n\\n            // If `beforeOrAtTimestamp` is greater than `_target`, then we keep searching lower. To the left of the current index.\\n            if (!targetAtOrAfter) {\\n                rightSide = currentIndex - 1;\\n            } else {\\n                // Otherwise, we keep searching higher. To the left of the current index.\\n                leftSide = currentIndex + 1;\\n            }\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/OverflowSafeComparatorLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/// @title OverflowSafeComparatorLib library to share comparator functions between contracts\\n/// @dev Code taken from Uniswap V3 Oracle.sol: https://github.com/Uniswap/v3-core/blob/3e88af408132fc957e3e406f65a0ce2b1ca06c3d/contracts/libraries/Oracle.sol\\n/// @author Asymetrix Protocol Inc.\\nlibrary OverflowSafeComparatorLib {\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically < `_b`.\\n    function lt(uint32 _a, uint32 _b, uint32 _timestamp) internal pure returns (bool) {\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a < _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2 ** 32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2 ** 32;\\n\\n        return aAdjusted < bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamps comparator.\\n    /// @dev safe for 0 or 1 overflows, `_a` and `_b` must be chronologically before or equal to time.\\n    /// @param _a A comparison timestamp from which to determine the relative position of `_timestamp`.\\n    /// @param _b Timestamp to compare against `_a`.\\n    /// @param _timestamp A timestamp truncated to 32 bits.\\n    /// @return bool Whether `_a` is chronologically <= `_b`.\\n    function lte(uint32 _a, uint32 _b, uint32 _timestamp) internal pure returns (bool) {\\n        // No need to adjust if there hasn't been an overflow\\n        if (_a <= _timestamp && _b <= _timestamp) return _a <= _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2 ** 32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2 ** 32;\\n\\n        return aAdjusted <= bAdjusted;\\n    }\\n\\n    /// @notice 32-bit timestamp subtractor\\n    /// @dev safe for 0 or 1 overflows, where `_a` and `_b` must be chronologically before or equal to time\\n    /// @param _a The subtraction left operand\\n    /// @param _b The subtraction right operand\\n    /// @param _timestamp The current time.  Expected to be chronologically after both.\\n    /// @return The difference between a and b, adjusted for overflow\\n    function checkedSub(uint32 _a, uint32 _b, uint32 _timestamp) internal pure returns (uint32) {\\n        // No need to adjust if there hasn't been an overflow\\n\\n        if (_a <= _timestamp && _b <= _timestamp) return _a - _b;\\n\\n        uint256 aAdjusted = _a > _timestamp ? _a : _a + 2 ** 32;\\n        uint256 bAdjusted = _b > _timestamp ? _b : _b + 2 ** 32;\\n\\n        return uint32(aAdjusted - bAdjusted);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/PrizePoolV2Errors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Asymetrix Protocol V2 Errors library\\n * @author Asymetrix Protocol Inc Team\\n * @notice A library with Asymetrix Protocol V2 PrizePoolV2 errors.\\n */\\nlibrary PrizePoolV2Errors {\\n    error InvalidAddress();\\n    error InvalidTimestamp();\\n    error OnlyPrizeFlush();\\n    error OnlyTicket();\\n    error InvalidLiquidityCap();\\n    error InvalidBalanceCap();\\n    error NothingToLiquidate();\\n    error TooSmallLiquidationAmount();\\n    error AwardNotAvailable();\\n    error InvalidExternalToken();\\n    error InvalidArrayLength();\\n    error TicketAlreadySet();\\n    error InvalidLiquidationThreshold();\\n    error InvalidSlippageTolerance();\\n    error InvalidLidoAPR();\\n    error InvalidLiquidationAmount();\\n    error NotEnoughETH();\\n    error NotContract();\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/RingBufferLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nlibrary RingBufferLib {\\n    /**\\n     * @notice Returns wrapped TWAB index.\\n     * @dev  In order to navigate the TWAB circular buffer, we need to use the modulo operator.\\n     * @dev  For example, if `_index` is equal to 32 and the TWAB circular buffer is of `_cardinality` 32,\\n     *       it will return 0 and will point to the first element of the array.\\n     * @param _index Index used to navigate through the TWAB circular buffer.\\n     * @param _cardinality TWAB buffer cardinality.\\n     * @return TWAB index.\\n     */\\n    function wrap(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n        return _index % _cardinality;\\n    }\\n\\n    /**\\n     * @notice Computes the negative offset from the given index, wrapped by the cardinality.\\n     * @dev  We add `_cardinality` to `_index` to be able to offset even if `_amount` is superior to `_cardinality`.\\n     * @param _index The index from which to offset\\n     * @param _amount The number of indices to offset.  This is subtracted from the given index.\\n     * @param _cardinality The number of elements in the ring buffer\\n     * @return Offsetted index.\\n     */\\n    function offset(uint256 _index, uint256 _amount, uint256 _cardinality) internal pure returns (uint256) {\\n        return wrap(_index + _cardinality - _amount, _cardinality);\\n    }\\n\\n    /// @notice Returns the index of the last recorded TWAB\\n    /// @param _nextIndex The next available twab index.  This will be recorded to next.\\n    /// @param _cardinality The cardinality of the TWAB history.\\n    /// @return The index of the last recorded TWAB\\n    function newestIndex(uint256 _nextIndex, uint256 _cardinality) internal pure returns (uint256) {\\n        if (_cardinality == 0) {\\n            return 0;\\n        }\\n\\n        return wrap(_nextIndex + _cardinality - 1, _cardinality);\\n    }\\n\\n    /// @notice Computes the ring buffer index that follows the given one, wrapped by cardinality\\n    /// @param _index The index to increment\\n    /// @param _cardinality The number of elements in the Ring Buffer\\n    /// @return The next index relative to the given index.  Will wrap around to 0 if the next index == cardinality\\n    function nextIndex(uint256 _index, uint256 _cardinality) internal pure returns (uint256) {\\n        return wrap(_index + 1, _cardinality);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/libraries/TwabLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"./ExtendedSafeCastLib.sol\\\";\\nimport \\\"./OverflowSafeComparatorLib.sol\\\";\\nimport \\\"./RingBufferLib.sol\\\";\\nimport \\\"./ObservationLib.sol\\\";\\n\\n/**\\n  * @title  Asymetrix Protocol V1 TwabLib (Library)\\n  * @author Asymetrix Protocol Inc Team\\n  * @dev    Time-Weighted Average Balance Library for ERC20 tokens.\\n  * @notice This TwabLib adds on-chain historical lookups to a user(s) time-weighted average balance.\\n            Each user is mapped to an Account struct containing the TWAB history (ring buffer) and\\n            ring buffer parameters. Every token.transfer() creates a new TWAB checkpoint. The new TWAB\\n            checkpoint is stored in the circular ring buffer, as either a new checkpoint or rewriting\\n            a previous checkpoint with new parameters. The TwabLib (using existing blocktimes of 1block/15sec)\\n            guarantees minimum 7.4 years of search history.\\n */\\nlibrary TwabLib {\\n    using OverflowSafeComparatorLib for uint32;\\n    using ExtendedSafeCastLib for uint256;\\n\\n    /**\\n      * @notice Sets max ring buffer length in the Account.twabs Observation list.\\n                As users transfer/mint/burn tickets new Observation checkpoints are\\n                recorded. The current max cardinality guarantees a seven year minimum,\\n                of accurate historical lookups with current estimates of 1 new block\\n                every 15 seconds - assuming each block contains a transfer to trigger an\\n                observation write to storage.\\n      * @dev    The user Account.AccountDetails.cardinality parameter can NOT exceed\\n                the max cardinality variable. Preventing \\\"corrupted\\\" ring buffer lookup\\n                pointers and new observation checkpoints.\\n\\n                The MAX_CARDINALITY in fact guarantees at least 7.4 years of records:\\n                If 14 = block time in seconds\\n                (2**24) * 14 = 234881024 seconds of history\\n                234881024 / (365 * 24 * 60 * 60) ~= 7.44 years\\n    */\\n    uint24 public constant MAX_CARDINALITY = 16777215; // 2**24\\n\\n    /** @notice Struct ring buffer parameters for single user Account\\n      * @param balance       Current balance for an Account\\n      * @param nextTwabIndex Next uninitialized or updatable ring buffer checkpoint storage slot\\n      * @param cardinality   Current total \\\"initialized\\\" ring buffer checkpoints for single user AccountDetails.\\n                             Used to set initial boundary conditions for an efficient binary search.\\n    */\\n    struct AccountDetails {\\n        uint208 balance;\\n        uint24 nextTwabIndex;\\n        uint24 cardinality;\\n    }\\n\\n    /// @notice Combines account details with their twab history\\n    /// @param details The account details\\n    /// @param twabs The history of twabs for this account\\n    struct Account {\\n        AccountDetails details;\\n        ObservationLib.Observation[MAX_CARDINALITY] twabs;\\n    }\\n\\n    /// @notice Increases an account's balance and records a new twab.\\n    /// @param _account The account whose balance will be increased\\n    /// @param _amount The amount to increase the balance by\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new AccountDetails\\n    /// @return twab The user's latest TWAB\\n    /// @return isNew Whether the TWAB is new\\n    function increaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        uint32 _currentTime\\n    ) internal returns (AccountDetails memory accountDetails, ObservationLib.Observation memory twab, bool isNew) {\\n        AccountDetails memory _accountDetails = _account.details;\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        accountDetails.balance = _accountDetails.balance + _amount;\\n    }\\n\\n    /** @notice Calculates the next TWAB checkpoint for an account with a decreasing balance.\\n     * @dev    With Account struct and amount decreasing calculates the next TWAB observable checkpoint.\\n     * @param _account        Account whose balance will be decreased\\n     * @param _amount         Amount to decrease the balance by\\n     * @param _revertMessage  Revert message for insufficient balance\\n     * @return accountDetails Updated Account.details struct\\n     * @return twab           TWAB observation (with decreasing average)\\n     * @return isNew          Whether TWAB is new or calling twice in the same block\\n     */\\n    function decreaseBalance(\\n        Account storage _account,\\n        uint208 _amount,\\n        string memory _revertMessage,\\n        uint32 _currentTime\\n    ) internal returns (AccountDetails memory accountDetails, ObservationLib.Observation memory twab, bool isNew) {\\n        AccountDetails memory _accountDetails = _account.details;\\n\\n        require(_accountDetails.balance >= _amount, _revertMessage);\\n\\n        (accountDetails, twab, isNew) = _nextTwab(_account.twabs, _accountDetails, _currentTime);\\n        unchecked {\\n            accountDetails.balance -= _amount;\\n        }\\n    }\\n\\n    /** @notice Calculates the average balance held by a user for a given time frame.\\n      * @dev    Finds the average balance between start and end timestamp epochs.\\n                Validates the supplied end time is within the range of elapsed time i.e. less then timestamp of now.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _startTime      Start of timestamp range as an epoch\\n      * @param _endTime        End of timestamp range as an epoch\\n      * @param _currentTime    Block.timestamp\\n      * @return Average balance of user held between epoch timestamps start and end\\n    */\\n    function getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 endTime = _endTime > _currentTime ? _currentTime : _endTime;\\n\\n        return _getAverageBalanceBetween(_twabs, _accountDetails, _startTime, endTime, _currentTime);\\n    }\\n\\n    /// @notice Retrieves the oldest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the oldest TWAB in the twabs array\\n    /// @return twab The oldest TWAB\\n    function oldestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = _accountDetails.nextTwabIndex;\\n        twab = _twabs[index];\\n\\n        // If the TWAB is not initialized we go to the beginning of the TWAB circular buffer at index 0\\n        if (twab.timestamp == 0) {\\n            index = 0;\\n            twab = _twabs[0];\\n        }\\n    }\\n\\n    /// @notice Retrieves the newest TWAB\\n    /// @param _twabs The storage array of twabs\\n    /// @param _accountDetails The TWAB account details\\n    /// @return index The index of the newest TWAB in the twabs array\\n    /// @return twab The newest TWAB\\n    function newestTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails\\n    ) internal view returns (uint24 index, ObservationLib.Observation memory twab) {\\n        index = uint24(RingBufferLib.newestIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\\n        twab = _twabs[index];\\n    }\\n\\n    /// @notice Retrieves amount at `_targetTime` timestamp\\n    /// @param _twabs List of TWABs to search through.\\n    /// @param _accountDetails Accounts details\\n    /// @param _targetTime Timestamp at which the reserved TWAB should be for.\\n    /// @return uint256 TWAB amount at `_targetTime`.\\n    function getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) internal view returns (uint256) {\\n        uint32 timeToTarget = _targetTime > _currentTime ? _currentTime : _targetTime;\\n        return _getBalanceAt(_twabs, _accountDetails, timeToTarget, _currentTime);\\n    }\\n\\n    /// @notice Calculates the average balance held by a user for a given time frame.\\n    /// @param _startTime The start time of the time frame.\\n    /// @param _endTime The end time of the time frame.\\n    /// @return The average balance that the user held during the time frame.\\n    function _getAverageBalanceBetween(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _startTime,\\n        uint32 _endTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        (uint24 oldestTwabIndex, ObservationLib.Observation memory oldTwab) = oldestTwab(_twabs, _accountDetails);\\n\\n        (uint24 newestTwabIndex, ObservationLib.Observation memory newTwab) = newestTwab(_twabs, _accountDetails);\\n\\n        ObservationLib.Observation memory startTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _startTime,\\n            _currentTime\\n        );\\n\\n        ObservationLib.Observation memory endTwab = _calculateTwab(\\n            _twabs,\\n            _accountDetails,\\n            newTwab,\\n            oldTwab,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _endTime,\\n            _currentTime\\n        );\\n\\n        // Difference in amount / time\\n        return\\n            (endTwab.amount - startTwab.amount) /\\n            OverflowSafeComparatorLib.checkedSub(endTwab.timestamp, startTwab.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Searches TWAB history and calculate the difference between amount(s)/timestamp(s) to return average balance\\n                between the Observations closes to the supplied targetTime.\\n      * @param _twabs          Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails User AccountDetails struct loaded in memory\\n      * @param _targetTime     Target timestamp to filter Observations in the ring buffer binary search\\n      * @param _currentTime    Block.timestamp\\n      * @return uint256 Time-weighted average amount between two closest observations.\\n    */\\n    function _getBalanceAt(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _targetTime,\\n        uint32 _currentTime\\n    ) private view returns (uint256) {\\n        uint24 newestTwabIndex;\\n        ObservationLib.Observation memory afterOrAt;\\n        ObservationLib.Observation memory beforeOrAt;\\n        (newestTwabIndex, beforeOrAt) = newestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically after the newest TWAB, we can simply return the current balance\\n        if (beforeOrAt.timestamp.lte(_targetTime, _currentTime)) {\\n            return _accountDetails.balance;\\n        }\\n\\n        uint24 oldestTwabIndex;\\n        // Now, set before to the oldest TWAB\\n        (oldestTwabIndex, beforeOrAt) = oldestTwab(_twabs, _accountDetails);\\n\\n        // If `_targetTime` is chronologically before the oldest TWAB, we can early return\\n        if (_targetTime.lt(beforeOrAt.timestamp, _currentTime)) {\\n            return 0;\\n        }\\n\\n        // Otherwise, we perform the `binarySearch`\\n        (beforeOrAt, afterOrAt) = ObservationLib.binarySearch(\\n            _twabs,\\n            newestTwabIndex,\\n            oldestTwabIndex,\\n            _targetTime,\\n            _accountDetails.cardinality,\\n            _currentTime\\n        );\\n\\n        // Sum the difference in amounts and divide by the difference in timestamps.\\n        // The time-weighted average balance uses time measured between two epoch timestamps as\\n        // a constaint on the measurement when calculating the time weighted average balance.\\n        return\\n            (afterOrAt.amount - beforeOrAt.amount) /\\n            OverflowSafeComparatorLib.checkedSub(afterOrAt.timestamp, beforeOrAt.timestamp, _currentTime);\\n    }\\n\\n    /** @notice Calculates a user TWAB for a target timestamp using the historical TWAB records.\\n                The balance is linearly interpolated: amount differences / timestamp differences\\n                using the simple (after.amount - before.amount / end.timestamp - start.timestamp) formula.\\n    /** @dev    Binary search in _calculateTwab fails when searching out of bounds. Thus, before\\n                searching we exclude target timestamps out of range of newest/oldest TWAB(s).\\n                IF a search is before or after the range we \\\"extrapolate\\\" a Observation from the expected state.\\n      * @param _twabs           Individual user Observation recorded checkpoints passed as storage pointer\\n      * @param _accountDetails  User AccountDetails struct loaded in memory\\n      * @param _newestTwab      Newest TWAB in history (end of ring buffer)\\n      * @param _oldestTwab      Olderst TWAB in history (end of ring buffer)\\n      * @param _newestTwabIndex Pointer in ring buffer to newest TWAB\\n      * @param _oldestTwabIndex Pointer in ring buffer to oldest TWAB\\n      * @param _targetTimestamp Epoch timestamp to calculate for time (T) in the TWAB\\n      * @param _time            Block.timestamp\\n      * @return accountDetails Updated Account.details struct\\n    */\\n    function _calculateTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        ObservationLib.Observation memory _newestTwab,\\n        ObservationLib.Observation memory _oldestTwab,\\n        uint24 _newestTwabIndex,\\n        uint24 _oldestTwabIndex,\\n        uint32 _targetTimestamp,\\n        uint32 _time\\n    ) private view returns (ObservationLib.Observation memory) {\\n        // If `_targetTimestamp` is chronologically after the newest TWAB, we extrapolate a new one\\n        if (_newestTwab.timestamp.lt(_targetTimestamp, _time)) {\\n            return _computeNextTwab(_newestTwab, _accountDetails.balance, _targetTimestamp);\\n        }\\n\\n        if (_newestTwab.timestamp == _targetTimestamp) {\\n            return _newestTwab;\\n        }\\n\\n        if (_oldestTwab.timestamp == _targetTimestamp) {\\n            return _oldestTwab;\\n        }\\n\\n        // If `_targetTimestamp` is chronologically before the oldest TWAB, we create a zero twab\\n        if (_targetTimestamp.lt(_oldestTwab.timestamp, _time)) {\\n            return ObservationLib.Observation({ amount: 0, timestamp: _targetTimestamp });\\n        }\\n\\n        // Otherwise, both timestamps must be surrounded by twabs.\\n        (\\n            ObservationLib.Observation memory beforeOrAtStart,\\n            ObservationLib.Observation memory afterOrAtStart\\n        ) = ObservationLib.binarySearch(\\n                _twabs,\\n                _newestTwabIndex,\\n                _oldestTwabIndex,\\n                _targetTimestamp,\\n                _accountDetails.cardinality,\\n                _time\\n            );\\n\\n        uint224 heldBalance = (afterOrAtStart.amount - beforeOrAtStart.amount) /\\n            OverflowSafeComparatorLib.checkedSub(afterOrAtStart.timestamp, beforeOrAtStart.timestamp, _time);\\n\\n        return _computeNextTwab(beforeOrAtStart, heldBalance, _targetTimestamp);\\n    }\\n\\n    /**\\n     * @notice Calculates the next TWAB using the newestTwab and updated balance.\\n     * @dev    Storage of the TWAB obersation is managed by the calling function and not _computeNextTwab.\\n     * @param _currentTwab    Newest Observation in the Account.twabs list\\n     * @param _currentBalance User balance at time of most recent (newest) checkpoint write\\n     * @param _time           Current block.timestamp\\n     * @return TWAB Observation\\n     */\\n    function _computeNextTwab(\\n        ObservationLib.Observation memory _currentTwab,\\n        uint224 _currentBalance,\\n        uint32 _time\\n    ) private pure returns (ObservationLib.Observation memory) {\\n        // New twab amount = last twab amount (or zero) + (current amount * elapsed seconds)\\n        return\\n            ObservationLib.Observation({\\n                amount: _currentTwab.amount + _currentBalance * (_time.checkedSub(_currentTwab.timestamp, _time)),\\n                timestamp: _time\\n            });\\n    }\\n\\n    /// @notice Sets a new TWAB Observation at the next available index and returns the new account details.\\n    /// @dev Note that if _currentTime is before the last observation timestamp, it appears as an overflow\\n    /// @param _twabs The twabs array to insert into\\n    /// @param _accountDetails The current account details\\n    /// @param _currentTime The current time\\n    /// @return accountDetails The new account details\\n    /// @return twab The newest twab (may or may not be brand-new)\\n    /// @return isNew Whether the newest twab was created by this call\\n    function _nextTwab(\\n        ObservationLib.Observation[MAX_CARDINALITY] storage _twabs,\\n        AccountDetails memory _accountDetails,\\n        uint32 _currentTime\\n    ) private returns (AccountDetails memory accountDetails, ObservationLib.Observation memory twab, bool isNew) {\\n        (, ObservationLib.Observation memory _newestTwab) = newestTwab(_twabs, _accountDetails);\\n\\n        // if we're in the same block, return\\n        if (_newestTwab.timestamp == _currentTime) {\\n            return (_accountDetails, _newestTwab, false);\\n        }\\n\\n        ObservationLib.Observation memory newTwab = _computeNextTwab(\\n            _newestTwab,\\n            _accountDetails.balance,\\n            _currentTime\\n        );\\n\\n        _twabs[_accountDetails.nextTwabIndex] = newTwab;\\n\\n        AccountDetails memory nextAccountDetails = push(_accountDetails);\\n\\n        return (nextAccountDetails, newTwab, true);\\n    }\\n\\n    /// @notice \\\"Pushes\\\" a new element on the AccountDetails ring buffer, and returns the new AccountDetails\\n    /// @param _accountDetails The account details from which to pull the cardinality and next index\\n    /// @return The new AccountDetails\\n    function push(AccountDetails memory _accountDetails) internal pure returns (AccountDetails memory) {\\n        _accountDetails.nextTwabIndex = uint24(RingBufferLib.nextIndex(_accountDetails.nextTwabIndex, MAX_CARDINALITY));\\n\\n        // Prevent the Account specific cardinality from exceeding the MAX_CARDINALITY.\\n        // The ring buffer length is limited by MAX_CARDINALITY. IF the account.cardinality\\n        // exceeds the max cardinality, new observations would be incorrectly set or the\\n        // observation would be out of \\\"bounds\\\" of the ring buffer. Once reached the\\n        // AccountDetails.cardinality will continue to be equal to max cardinality.\\n        if (_accountDetails.cardinality < MAX_CARDINALITY) {\\n            _accountDetails.cardinality += 1;\\n        }\\n\\n        return _accountDetails;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/core/prize-pool/PrizePoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport { ERC20BurnableUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\n\\nimport { ERC165CheckerUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\\\";\\n\\nimport { IERC721ReceiverUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport { IERC721Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\nimport { ReentrancyGuardUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\n\\nimport { SafeERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\\\";\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport { SafeCastUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\\\";\\n\\nimport { AddressUpgradeable } from \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport { IRewardsBooster } from \\\"../../rewards-booster/interfaces/IRewardsBooster.sol\\\";\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IESASXVesting } from \\\"../../vesting/interfaces/IESASXVesting.sol\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport { PrizePoolV2Errors } from \\\"../libraries/PrizePoolV2Errors.sol\\\";\\n\\nimport { UniswapWrapper } from \\\"../../vesting/UniswapWrapper.sol\\\";\\n\\nimport { ICompLike } from \\\"../external/compound/ICompLike.sol\\\";\\n\\nimport { IOracle } from \\\"../../vesting/interfaces/IOracle.sol\\\";\\n\\nimport { IPrizePoolV2 } from \\\"../interfaces/IPrizePoolV2.sol\\\";\\nimport { IDrawBeacon } from \\\"../interfaces/IDrawBeacon.sol\\\";\\nimport { ITicket } from \\\"../interfaces/ITicket.sol\\\";\\n\\nimport { Ownable } from \\\"../../owner-manager/Ownable.sol\\\";\\n\\nimport { Constants } from \\\"../../Constants.sol\\\";\\n\\n/**\\n * @title  Asymetrix Protocol V2 PrizePoolV2\\n * @author Asymetrix Protocol Inc Team\\n * @notice Escrows assets and deposits them into a yield source. Exposes interest to Prize Flush. Users deposit and\\n *         withdraw from thi contract to participate in Prize Pool V2. Accounting is managed using Controlled Tokens,\\n *         whose mint and burn functions can only be called by this contract. Must be inherited to provide specific\\n *         yield-bearing asset control, such as Compound cTokens.\\n */\\nabstract contract PrizePoolV2 is\\n    Initializable,\\n    IPrizePoolV2,\\n    Ownable,\\n    Constants,\\n    ReentrancyGuardUpgradeable,\\n    IERC721ReceiverUpgradeable\\n{\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using ERC165CheckerUpgradeable for address;\\n    using SafeCastUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n    using SafeERC20 for IERC20;\\n\\n    //************************************************************************//\\n    //                                V1                                      //\\n    //************************************************************************//\\n\\n    /// @notice Semver Version.\\n    string public constant VERSION = \\\"4.0.0\\\";\\n\\n    /// @notice Accuracy for calculations.\\n    uint256 internal constant ACCURACY = 10 ** 18;\\n\\n    /// @notice Prize Pool ticket. Can only be set once by calling `setTicket()`.\\n    ITicket internal ticket;\\n\\n    /// @notice Draw Beacon contract. Can only be set once by calling `setDrawBeacon()`.\\n    IDrawBeacon internal drawBeacon;\\n\\n    /// @notice ASX token contract. Can only be set once in the constructor.\\n    IERC20Upgradeable internal rewardToken;\\n\\n    /// @notice The Prize Flush that this Prize Pool V2 is bound to.\\n    address internal prizeFlush;\\n\\n    /// @notice The reward last updated timestamp.\\n    uint64 internal lastUpdated;\\n\\n    /// @notice The reward claim interval, in seconds.\\n    /// @dev Unused in PrizePoolV2\\n    uint32 internal claimInterval;\\n\\n    /// @notice The total amount of tickets a user can hold.\\n    uint256 internal balanceCap;\\n\\n    /// @notice The total amount of funds that the prize pool can hold.\\n    uint256 internal liquidityCap;\\n\\n    /// @notice The awardable balance.\\n    uint256 internal _currentAwardBalance;\\n\\n    /// @notice The reward per second that will be used in time of distribution of ASX tokens.\\n    /// @custom:oz-renamed-from rewardPerSecond\\n    uint256 internal asxRewardPerSecond;\\n\\n    /// @notice The ASX reward per share coefficient.\\n    /// @custom:oz-renamed-from rewardPerShare\\n    uint256 internal asxRewardPerShare;\\n\\n    /// @notice Stores information about users' stakes and rewards.\\n    mapping(address => UserStakeInfo) internal userStakeInfo;\\n\\n    /// @notice The timestamp when ASX tokens distribution will finish.\\n    uint32 internal distributionEnd;\\n\\n    /// @notice The duration after finishing of a draw when user can leave the protocol without fee charging (in stETH).\\n    uint32 internal freeExitDuration;\\n\\n    /// @notice The timestamp of the deployment of this contract.\\n    uint32 internal deploymentTimestamp;\\n\\n    /// @notice The timestamp of the first Lido's rebase that will take place after the deployment of this contract.\\n    uint32 internal firstLidoRebaseTimestamp;\\n\\n    /// @notice The maximum claim interval, in seconds.\\n    /// @dev Unused in PrizePoolV2\\n    uint32 internal maxClaimInterval;\\n\\n    /// @notice The APR of the Lido protocol, percentage with 2 decimals.\\n    uint16 internal lidoAPR;\\n\\n    //************************************************************************//\\n    //                                V2                                      //\\n    //************************************************************************//\\n\\n    /**\\n     * @notice esASX token contract. Can only be set once during initialization.\\n     */\\n    IERC20 public esAsx;\\n\\n    /**\\n     * @notice RewardsBooster contract. Can only be set once during initialization.\\n     */\\n    IRewardsBooster public rewardsBooster;\\n\\n    /**\\n     * @notice ESASXVesting contract. Used for creation of vestings in time of  esASX tokens claim. Can only be set once\\n     *         during initialization.\\n     */\\n    IESASXVesting public esAsxVesting;\\n\\n    /**\\n     * @notice A wrapper contract address that helps to interact with Uniswap V3.\\n     */\\n    UniswapWrapper public uniswapWrapper;\\n\\n    /**\\n     * @notice An oracle for ASX token that returns price of ASX token in WETH.\\n     */\\n    IOracle public asxOracle;\\n\\n    /**\\n     * @notice The reward per second that will be used in time of distribution of esASX tokens.\\n     */\\n    uint256 public esAsxRewardPerSecond;\\n\\n    /**\\n     * @notice The esASX reward per share coefficient.\\n     */\\n    uint256 public esAsxRewardPerShare;\\n\\n    /**\\n     * @notice Amount of esASX tokens that are available for liquidation.\\n     */\\n    uint256 public availableForLiquidationEsAsx;\\n\\n    /**\\n     * @notice WETH token address.\\n     */\\n    address public weth;\\n\\n    /**\\n     * @notice Minimum threshold for partial liquidation of users' boosts.\\n     */\\n    uint16 public liquidationThreshold;\\n\\n    /**\\n     * @notice A slippage tolerance to apply in time of swap 0f ETH for ASX.\\n     */\\n    uint16 public slippageTolerance;\\n\\n    uint24 private constant UNISWAP_V3_POOL_FEE = 3000; // 0.3000%\\n    uint16 public constant ONE_HUNDRED_PERCENTS = 10000; // 100.00%\\n\\n    /* ============ Modifiers ============ */\\n\\n    /// @dev Function modifier to ensure caller is the prize-flush.\\n    modifier onlyPrizeFlush() {\\n        if (msg.sender != prizeFlush) revert PrizePoolV2Errors.OnlyPrizeFlush();\\n        _;\\n    }\\n\\n    /// @dev Function modifier to ensure caller is the ticket.\\n    modifier onlyTicket() {\\n        if (msg.sender != address(ticket)) revert PrizePoolV2Errors.OnlyTicket();\\n        _;\\n    }\\n\\n    /// @dev Function modifier to ensure the deposit amount does not exceed the liquidity cap (if set).\\n    modifier canAddLiquidity(uint256 _amount) {\\n        if (!_canAddLiquidity(_amount)) revert PrizePoolV2Errors.InvalidLiquidityCap();\\n        _;\\n    }\\n\\n    /* ============ Initialize ============ */\\n\\n    /**\\n     * @notice Deploy the Prize Pool V2 contract.\\n     * @param _esAsx esASX token address.\\n     * @param _rewardsBooster RewardsBooster contract address.\\n     * @param _esAsxVesting ESASXVesting contract address.\\n     * @param _uniswapWrapper A wrapper contract address that helps to interact with Uniswap V3.\\n     * @param _asxOracle An oracle for ASX token that returns price of ASX token in ETH.\\n     * @param _weth WETH token address.\\n     * @param _esAsxRewardPerSecond The reward per second that will be used in time of distribution of esASX tokens.\\n     * @param _liquidationThreshold Minimum threshold for partial liquidation of users' boosts.\\n     * @param _slippageTolerance A slippage tolerance to apply in time of swap of ETH for ASX.\\n     */\\n    function __PrizePoolV2_init_unchained(\\n        address _esAsx,\\n        address _rewardsBooster,\\n        address _esAsxVesting,\\n        address _uniswapWrapper,\\n        address _asxOracle,\\n        address _weth,\\n        uint256 _esAsxRewardPerSecond,\\n        uint16 _liquidationThreshold,\\n        uint16 _slippageTolerance\\n    ) internal onlyInitializing {\\n        _onlyContract(_esAsx);\\n        _onlyContract(_rewardsBooster);\\n        _onlyContract(_esAsxVesting);\\n        _setUniswapWrapper(_uniswapWrapper);\\n        _setAsxOracle(_asxOracle);\\n        _onlyContract(_weth);\\n\\n        esAsx = IERC20(_esAsx);\\n        rewardsBooster = IRewardsBooster(_rewardsBooster);\\n        esAsxVesting = IESASXVesting(_esAsxVesting);\\n        weth = _weth;\\n\\n        _setEsAsxRewardPerSecond(_esAsxRewardPerSecond);\\n        _setLiquidationThreshold(_liquidationThreshold);\\n        _setSlippageTolerance(_slippageTolerance);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function balance() external override returns (uint256) {\\n        return _balance();\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function awardBalance() external view override returns (uint256) {\\n        return _currentAwardBalance;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function canAwardExternal(address _externalToken) external view override returns (bool) {\\n        return _canAwardExternal(_externalToken);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function isControlled(ITicket _controlledToken) external view override returns (bool) {\\n        return _isControlled(_controlledToken);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getAccountedBalance() external view override returns (uint256) {\\n        return _ticketTotalSupply();\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getBalanceCap() external view override returns (uint256) {\\n        return balanceCap;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getLiquidityCap() external view override returns (uint256) {\\n        return liquidityCap;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getTicket() external view override returns (ITicket) {\\n        return ticket;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getDrawBeacon() external view override returns (IDrawBeacon) {\\n        return drawBeacon;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getRewardToken() external view override returns (IERC20Upgradeable) {\\n        return rewardToken;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getPrizeFlush() external view override returns (address) {\\n        return prizeFlush;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getToken() external view override returns (address) {\\n        return address(_token());\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getLastUpdated() external view override returns (uint64) {\\n        return lastUpdated;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getAsxRewardPerSecond() external view override returns (uint256) {\\n        return asxRewardPerSecond;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getAsxRewardPerShare() external view override returns (uint256) {\\n        return asxRewardPerShare;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getFreeExitDuration() external view override returns (uint32) {\\n        return freeExitDuration;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getDeploymentTimestamp() external view override returns (uint32) {\\n        return deploymentTimestamp;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getFirstLidoRebaseTimestamp() external view override returns (uint32) {\\n        return firstLidoRebaseTimestamp;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getLidoAPR() external view override returns (uint16) {\\n        return lidoAPR;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getUserStakeInfo(address _user) external view override returns (UserStakeInfo memory) {\\n        return userStakeInfo[_user];\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getDistributionEnd() external view override returns (uint32) {\\n        return distributionEnd;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function getClaimableRewards(\\n        address _user\\n    ) external view override returns (uint256 _asxReward, uint256 _esAsxReward) {\\n        UserStakeInfo memory _userInfo = userStakeInfo[_user];\\n        uint256 _bal = ticket.balanceOf(_user);\\n        (uint256 _asxRewardPerShare, uint256 _esAsxRewardPerShare) = _getUpdatedAsxAndEsAsxRewardPerShare();\\n\\n        _asxReward = (_userInfo.reward + ((_bal * _asxRewardPerShare) - _userInfo.former)) / ACCURACY;\\n        _esAsxReward =\\n            (_userInfo.esAsxBoostableReward + ((_bal * _esAsxRewardPerShare) - _userInfo.esAsxFormer)) /\\n            ACCURACY;\\n\\n        (uint32 _boost, bool _isAppliable) = rewardsBooster.getBoost(_user);\\n\\n        if (_isAppliable) {\\n            _esAsxReward = (_esAsxReward * _boost) / 100;\\n        }\\n\\n        _esAsxReward += _userInfo.esAsxBoostlessReward;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function captureAwardBalance() external override nonReentrant returns (uint256) {\\n        uint256 ticketTotalSupply = _ticketTotalSupply();\\n        uint256 currentAwardBalance = _currentAwardBalance;\\n\\n        /**\\n         * It's possible for the balance to be slightly less due to rounding\\n         * errors in the underlying yield source\\n         */\\n        uint256 currentBalance = _balance();\\n        uint256 totalInterest = (currentBalance > ticketTotalSupply) ? currentBalance - ticketTotalSupply : 0;\\n        uint256 unaccountedPrizeBalance = (totalInterest > currentAwardBalance)\\n            ? totalInterest - currentAwardBalance\\n            : 0;\\n\\n        if (unaccountedPrizeBalance > 0) {\\n            currentAwardBalance = totalInterest;\\n            _currentAwardBalance = currentAwardBalance;\\n\\n            emit AwardCaptured(unaccountedPrizeBalance);\\n        }\\n\\n        return currentAwardBalance;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function depositTo(address _to, uint256 _amount) external override nonReentrant canAddLiquidity(_amount) {\\n        _depositTo(msg.sender, _to, _amount);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function depositToAndDelegate(\\n        address _to,\\n        uint256 _amount,\\n        address _delegate\\n    ) external override nonReentrant canAddLiquidity(_amount) {\\n        _depositTo(msg.sender, _to, _amount);\\n\\n        ticket.controllerDelegateFor(msg.sender, _delegate);\\n    }\\n\\n    /// @notice Transfers tokens in from one user and mints tickets to another.\\n    /// @notice _operator The user to transfer tokens from.\\n    /// @notice _to The user to mint tickets to.\\n    /// @notice _amount The amount to transfer and mint.\\n    function _depositTo(address _operator, address _to, uint256 _amount) internal {\\n        if (!_canDeposit(_to, _amount)) revert PrizePoolV2Errors.InvalidBalanceCap();\\n\\n        _updateReward();\\n\\n        UserStakeInfo storage userInfo = userStakeInfo[_to];\\n        uint256 _asxRewardPerShare = asxRewardPerShare;\\n        uint256 _esAsxRewardPerShare = esAsxRewardPerShare;\\n        ITicket _ticket = ticket;\\n        uint256 _beforeTicketBalance = _ticket.balanceOf(_to);\\n\\n        _token().safeTransferFrom(_operator, address(this), _amount);\\n\\n        userInfo.reward += (_beforeTicketBalance * _asxRewardPerShare) - userInfo.former;\\n        userInfo.esAsxBoostableReward += (_beforeTicketBalance * _esAsxRewardPerShare) - userInfo.esAsxFormer;\\n\\n        _mint(_to, _amount, _ticket);\\n\\n        uint256 _afterTicketBalance = _ticket.balanceOf(_to);\\n\\n        userInfo.former = _afterTicketBalance * _asxRewardPerShare;\\n        userInfo.esAsxFormer = _afterTicketBalance * _esAsxRewardPerShare;\\n\\n        emit Deposited(_operator, _to, _ticket, _amount);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function withdrawFrom(address _from, uint256 _amount) external override nonReentrant returns (uint256) {\\n        _updateReward();\\n\\n        UserStakeInfo storage userInfo = userStakeInfo[_from];\\n        uint256 _asxRewardPerShare = asxRewardPerShare;\\n        uint256 _esAsxRewardPerShare = esAsxRewardPerShare;\\n        ITicket _ticket = ticket;\\n        uint256 _beforeTicketBalance = _ticket.balanceOf(_from);\\n\\n        userInfo.reward += (_beforeTicketBalance * _asxRewardPerShare) - userInfo.former;\\n        userInfo.esAsxBoostableReward += (_beforeTicketBalance * _esAsxRewardPerShare) - userInfo.esAsxFormer;\\n\\n        // Burn the tickets\\n        _ticket.controllerBurnFrom(msg.sender, _from, _amount);\\n\\n        // Redeem the tickets\\n        uint256 _redeemed = _amount;\\n        uint256 _afterTicketBalance = _ticket.balanceOf(_from);\\n\\n        userInfo.former = _afterTicketBalance * _asxRewardPerShare;\\n        userInfo.esAsxFormer = _afterTicketBalance * _esAsxRewardPerShare;\\n\\n        if (\\n            drawBeacon.getNextDrawId() == 1 ||\\n            uint32(block.timestamp) - drawBeacon.getBeaconPeriodStartedAt() > freeExitDuration\\n        ) {\\n            uint256 _secondsNumber = uint256(_getSecondsNumberToPayExitFee(uint32(block.timestamp)));\\n            uint256 _percent = ((_secondsNumber * uint256(lidoAPR)) * 1 ether) / 31_536_000 / 10 ** 4;\\n            uint256 _actualRedeemed = (_redeemed * (1 ether - _percent)) / 1 ether;\\n\\n            _redeemed = _actualRedeemed;\\n        }\\n\\n        _token().safeTransfer(_from, _redeemed);\\n\\n        emit Withdrawal(msg.sender, _from, _ticket, _amount, _redeemed, _amount - _redeemed);\\n\\n        return _redeemed;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function updateUserRewardAndFormer(\\n        address _user,\\n        uint256 _beforeBalance,\\n        uint256 _afterBalance\\n    ) external override onlyTicket {\\n        _updateReward();\\n\\n        UserStakeInfo storage userInfo = userStakeInfo[_user];\\n        uint256 _asxRewardPerShare = asxRewardPerShare;\\n        uint256 _esAsxRewardPerShare = esAsxRewardPerShare;\\n\\n        userInfo.reward += (_beforeBalance * _asxRewardPerShare) - userInfo.former;\\n        userInfo.esAsxBoostableReward += (_beforeBalance * _esAsxRewardPerShare) - userInfo.esAsxFormer;\\n\\n        userInfo.former = _afterBalance * _asxRewardPerShare;\\n        userInfo.esAsxFormer = _afterBalance * _esAsxRewardPerShare;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function claim(address _user) external override nonReentrant {\\n        _updateReward();\\n\\n        UserStakeInfo storage userInfo = userStakeInfo[_user];\\n        uint256 _asxRewardPerShare = asxRewardPerShare;\\n        uint256 _esAsxRewardPerShare = esAsxRewardPerShare;\\n        uint256 _ticketBalance = ticket.balanceOf(_user);\\n\\n        userInfo.reward += (_ticketBalance * _asxRewardPerShare) - userInfo.former;\\n        userInfo.esAsxBoostableReward += (_ticketBalance * _esAsxRewardPerShare) - userInfo.esAsxFormer;\\n\\n        _claimEsAsxAndVest(userInfo, _user);\\n\\n        userInfo.former = _ticketBalance * _asxRewardPerShare;\\n        userInfo.esAsxFormer = _ticketBalance * _esAsxRewardPerShare;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function liquidate(address[] calldata _users, uint256[] calldata _amounts) external payable override nonReentrant {\\n        if (_users.length != _amounts.length) revert PrizePoolV2Errors.InvalidArrayLength();\\n\\n        _liquidate(_users, _amounts);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function award(address _to, uint256 _amount) external override onlyPrizeFlush {\\n        if (_amount == 0) {\\n            return;\\n        }\\n\\n        uint256 currentAwardBalance = _currentAwardBalance;\\n\\n        if (_amount > currentAwardBalance) revert PrizePoolV2Errors.AwardNotAvailable();\\n\\n        unchecked {\\n            _currentAwardBalance = currentAwardBalance - _amount;\\n        }\\n\\n        ITicket _ticket = ticket;\\n\\n        _mint(_to, _amount, _ticket);\\n\\n        emit Awarded(_to, _ticket, _amount);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function transferExternalERC20(\\n        address _to,\\n        address _externalToken,\\n        uint256 _amount\\n    ) external override onlyPrizeFlush {\\n        if (_transferOut(_to, _externalToken, _amount)) {\\n            emit TransferredExternalERC20(_to, _externalToken, _amount);\\n        }\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function awardExternalERC20(address _to, address _externalToken, uint256 _amount) external override onlyPrizeFlush {\\n        if (_transferOut(_to, _externalToken, _amount)) {\\n            emit AwardedExternalERC20(_to, _externalToken, _amount);\\n        }\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function awardExternalERC721(\\n        address _to,\\n        address _externalToken,\\n        uint256[] calldata _tokenIds\\n    ) external override onlyPrizeFlush {\\n        if (!_canAwardExternal(_externalToken)) revert PrizePoolV2Errors.InvalidExternalToken();\\n\\n        if (_tokenIds.length == 0) {\\n            return;\\n        }\\n\\n        if (_tokenIds.length > MAX_TOKEN_IDS_LENGTH) revert PrizePoolV2Errors.InvalidArrayLength();\\n\\n        uint256[] memory _awardedTokenIds = new uint256[](_tokenIds.length);\\n        bool hasAwardedTokenIds;\\n\\n        for (uint256 i; i < _tokenIds.length; ++i) {\\n            try IERC721Upgradeable(_externalToken).safeTransferFrom(address(this), _to, _tokenIds[i]) {\\n                hasAwardedTokenIds = true;\\n                _awardedTokenIds[i] = _tokenIds[i];\\n            } catch (bytes memory error) {\\n                emit ErrorAwardingExternalERC721(error);\\n            }\\n        }\\n        if (hasAwardedTokenIds) {\\n            emit AwardedExternalERC721(_to, _externalToken, _awardedTokenIds);\\n        }\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setBalanceCap(uint256 _balanceCap) external override onlyOwner returns (bool) {\\n        _setBalanceCap(_balanceCap);\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setLiquidityCap(uint256 _liquidityCap) external override onlyOwner {\\n        _setLiquidityCap(_liquidityCap);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setTicket(ITicket _ticket) external override onlyOwner returns (bool) {\\n        if (address(_ticket) == address(0)) revert PrizePoolV2Errors.InvalidAddress();\\n        if (address(ticket) != address(0)) revert PrizePoolV2Errors.TicketAlreadySet();\\n\\n        ticket = _ticket;\\n\\n        emit TicketSet(_ticket);\\n\\n        _setBalanceCap(type(uint256).max);\\n\\n        return true;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setDrawBeacon(IDrawBeacon _drawBeacon) external onlyOwner {\\n        if (address(_drawBeacon) == address(0)) revert PrizePoolV2Errors.InvalidAddress();\\n\\n        drawBeacon = _drawBeacon;\\n\\n        emit DrawBeaconSet(_drawBeacon);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setPrizeFlush(address _prizeFlush) external onlyOwner {\\n        _setPrizeFlush(_prizeFlush);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setAsxRewardPerSecond(uint256 _asxRewardPerSecond) external override onlyOwner {\\n        _setAsxRewardPerSecond(_asxRewardPerSecond);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setEsAsxRewardPerSecond(uint256 _esAsxRewardPerSecond) external override onlyOwner {\\n        _setEsAsxRewardPerSecond(_esAsxRewardPerSecond);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setLiquidationThreshold(uint16 _liquidationThreshold) external override onlyOwner {\\n        _setLiquidationThreshold(_liquidationThreshold);\\n    }\\n\\n    /**\\n     * @notice Sets a new UniswapWrapper contract by an owner.\\n     * @param _newUniswapWrapper A new UniswapWrapper contract address.\\n     */\\n    function setUniswapWrapper(address _newUniswapWrapper) external onlyOwner {\\n        _setUniswapWrapper(_newUniswapWrapper);\\n    }\\n\\n    /**\\n     * @notice Sets a new oracle for ASX token that returns price of ASX token in ETH by an owner.\\n     * @param _newAsxOracle A new oracle for ASX token that returns price of ASX token in ETH.\\n     */\\n    function setAsxOracle(address _newAsxOracle) external onlyOwner {\\n        _setAsxOracle(_newAsxOracle);\\n    }\\n\\n    /**\\n     * @notice Sets a new slippage tolerance by an owner.\\n     * @param _newSlippageTolerance A new slippage tolerance.\\n     */\\n    function setSlippageTolerance(uint16 _newSlippageTolerance) external onlyOwner {\\n        _setSlippageTolerance(_newSlippageTolerance);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setDistributionEnd(uint32 _newDistributionEnd) external onlyOwner {\\n        if (_newDistributionEnd < uint32(block.timestamp)) revert PrizePoolV2Errors.InvalidTimestamp();\\n\\n        distributionEnd = _newDistributionEnd;\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setFreeExitDuration(uint32 _freeExitDuration) external override onlyOwner {\\n        _setFreeExitDuration(_freeExitDuration);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function setLidoAPR(uint16 _lidoAPR) external override onlyOwner {\\n        _setLidoAPR(_lidoAPR);\\n    }\\n\\n    /// @inheritdoc IPrizePoolV2\\n    function compLikeDelegate(ICompLike _compLike, address _to) external override onlyOwner {\\n        if (_compLike.balanceOf(address(this)) > 0) {\\n            _compLike.delegate(_to);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721ReceiverUpgradeable\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure override returns (bytes4) {\\n        return IERC721ReceiverUpgradeable.onERC721Received.selector;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /// @notice Transfer out `amount` of `externalToken` to recipient `to`.\\n    /// @dev Only awardable `externalToken` can be transferred out.\\n    /// @param _to Recipient address.\\n    /// @param _externalToken Address of the external asset token being transferred.\\n    /// @param _amount Amount of external assets to be transferred.\\n    /// @return `true` if transfer is successful.\\n    function _transferOut(address _to, address _externalToken, uint256 _amount) internal returns (bool) {\\n        if (!_canAwardExternal(_externalToken)) revert PrizePoolV2Errors.InvalidAddress();\\n\\n        if (_amount == 0) {\\n            return false;\\n        }\\n\\n        IERC20Upgradeable(_externalToken).safeTransfer(_to, _amount);\\n\\n        return true;\\n    }\\n\\n    /// @notice Called to mint controlled tokens.  Ensures that token listener callbacks are fired.\\n    /// @param _to The user who is receiving the tokens.\\n    /// @param _amount The amount of tokens they are receiving.\\n    /// @param _controlledToken The token that is going to be minted.\\n    function _mint(address _to, uint256 _amount, ITicket _controlledToken) internal {\\n        _controlledToken.controllerMint(_to, _amount);\\n    }\\n\\n    /// @dev Checks if `user` can deposit in the Prize Pool based on the current balance cap.\\n    /// @param _user Address of the user depositing.\\n    /// @param _amount The amount of tokens to be deposited into the Prize Pool.\\n    /// @return True if the Prize Pool can receive the specified `amount` of tokens.\\n    function _canDeposit(address _user, uint256 _amount) internal view returns (bool) {\\n        uint256 _balanceCap = balanceCap;\\n\\n        if (_balanceCap == type(uint256).max) return true;\\n\\n        return (ticket.balanceOf(_user) + _amount <= _balanceCap);\\n    }\\n\\n    /// @dev Checks if the Prize Pool can receive liquidity based on the current cap.\\n    /// @param _amount The amount of liquidity to be added to the Prize Pool.\\n    /// @return True if the Prize Pool can receive the specified amount of liquidity.\\n    function _canAddLiquidity(uint256 _amount) internal view returns (bool) {\\n        uint256 _liquidityCap = liquidityCap;\\n\\n        if (_liquidityCap == type(uint256).max) return true;\\n\\n        return (_ticketTotalSupply() + _amount <= _liquidityCap);\\n    }\\n\\n    /// @dev Checks if a specific token is controlled by the Prize Pool.\\n    /// @param _controlledToken The address of the token to check.\\n    /// @return `true` if the token is a controlled token, `false` otherwise.\\n    function _isControlled(ITicket _controlledToken) internal view returns (bool) {\\n        return (ticket == _controlledToken);\\n    }\\n\\n    /// @notice Allows the owner to set a balance cap per `token` for the pool.\\n    /// @param _balanceCap New balance cap.\\n    function _setBalanceCap(uint256 _balanceCap) internal {\\n        balanceCap = _balanceCap;\\n\\n        emit BalanceCapSet(_balanceCap);\\n    }\\n\\n    /// @notice Allows the owner to set a liquidity cap for the pool.\\n    /// @param _liquidityCap New liquidity cap.\\n    function _setLiquidityCap(uint256 _liquidityCap) internal {\\n        if (address(ticket) != address(0)) {\\n            if (_liquidityCap < _ticketTotalSupply()) revert PrizePoolV2Errors.InvalidLiquidityCap();\\n        }\\n\\n        liquidityCap = _liquidityCap;\\n\\n        emit LiquidityCapSet(_liquidityCap);\\n    }\\n\\n    /// @notice Sets the prize flush of the prize pool.\\n    /// @param _prizeFlush The new prize flush.\\n    function _setPrizeFlush(address _prizeFlush) internal {\\n        if (_prizeFlush == address(0)) revert PrizePoolV2Errors.InvalidAddress();\\n\\n        prizeFlush = _prizeFlush;\\n\\n        emit PrizeFlushSet(_prizeFlush);\\n    }\\n\\n    /// @notice Sets the reward per second for the prize pool that will be used for ASX tokens distribution.\\n    /// @param _asxRewardPerSecond The new reward per second in ASX tokens.\\n    function _setAsxRewardPerSecond(uint256 _asxRewardPerSecond) internal {\\n        _updateReward();\\n\\n        asxRewardPerSecond = _asxRewardPerSecond;\\n\\n        emit AsxRewardPerSecondSet(_asxRewardPerSecond);\\n    }\\n\\n    /// @notice Sets the reward per second for the prize pool that will be used for esASX tokens distribution.\\n    /// @param _esAsxRewardPerSecond The new reward per second in esASX tokens.\\n    function _setEsAsxRewardPerSecond(uint256 _esAsxRewardPerSecond) internal {\\n        _updateReward();\\n\\n        esAsxRewardPerSecond = _esAsxRewardPerSecond;\\n\\n        emit EsAsxRewardPerSecondSet(_esAsxRewardPerSecond);\\n    }\\n\\n    /// @notice Sets a new liquidation threshold.\\n    /// @param _liquidationThreshold Minimum threshold for partial liquidation of users' boosts.\\n    function _setLiquidationThreshold(uint16 _liquidationThreshold) internal {\\n        if (_liquidationThreshold == 0 || _liquidationThreshold > ONE_HUNDRED_PERCENTS)\\n            revert PrizePoolV2Errors.InvalidLiquidationThreshold();\\n\\n        liquidationThreshold = _liquidationThreshold;\\n\\n        emit LiquidationThresholdSet(_liquidationThreshold);\\n    }\\n\\n    /**\\n     * @notice Sets a new UniswapWrapper contract.\\n     * @param _newUniswapWrapper A new UniswapWrapper contract address.\\n     */\\n    function _setUniswapWrapper(address _newUniswapWrapper) private {\\n        _onlyContract(_newUniswapWrapper);\\n\\n        uniswapWrapper = UniswapWrapper(_newUniswapWrapper);\\n    }\\n\\n    /**\\n     * @notice Sets a new oracle for ASX token that reruns price of ASX token in ETH.\\n     * @param _newAsxOracle A new oracle for ASX token that reruns price of ASX token in ETH.\\n     */\\n    function _setAsxOracle(address _newAsxOracle) private {\\n        _onlyContract(_newAsxOracle);\\n\\n        asxOracle = IOracle(_newAsxOracle);\\n    }\\n\\n    /**\\n     * @notice Sets a new slippage tolerance.\\n     * @param _newSlippageTolerance A new slippage tolerance.\\n     */\\n    function _setSlippageTolerance(uint16 _newSlippageTolerance) private {\\n        if (_newSlippageTolerance == 0 || _newSlippageTolerance > ONE_HUNDRED_PERCENTS)\\n            revert PrizePoolV2Errors.InvalidSlippageTolerance();\\n\\n        slippageTolerance = _newSlippageTolerance;\\n    }\\n\\n    /// @notice Sets the free exit duration, in seconds.\\n    /// @param _freeExitDuration The duration after finishing of a draw when user can leave the protocol without fee\\n    ///                          charging (in stETH).\\n    function _setFreeExitDuration(uint32 _freeExitDuration) internal {\\n        freeExitDuration = _freeExitDuration;\\n\\n        emit FreeExitDurationSet(_freeExitDuration);\\n    }\\n\\n    /// @notice Set APR of the Lido protocol.\\n    /// @dev 10000 is equal to 100.00% (2 decimals). Zero (0) is a valid value.\\n    /// @param _lidoAPR An APR of the Lido protocol.\\n    function _setLidoAPR(uint16 _lidoAPR) internal {\\n        if (_lidoAPR > ONE_HUNDRED_PERCENTS) revert PrizePoolV2Errors.InvalidLidoAPR();\\n\\n        lidoAPR = _lidoAPR;\\n\\n        emit LidoAPRSet(_lidoAPR);\\n    }\\n\\n    /// @notice The current total of tickets.\\n    /// @return Ticket total supply.\\n    function _ticketTotalSupply() internal view returns (uint256) {\\n        return ticket.totalSupply();\\n    }\\n\\n    /// @dev Gets the current time as represented by the current block.\\n    /// @return The timestamp of the current block.\\n    function _currentTime() internal view virtual returns (uint256) {\\n        return block.timestamp;\\n    }\\n\\n    /// @dev Updates the reward during each deposit, withdraw and transfer.\\n    function _updateReward() internal {\\n        if (lastUpdated <= uint64(distributionEnd)) {\\n            (asxRewardPerShare, esAsxRewardPerShare) = _getUpdatedAsxAndEsAsxRewardPerShare();\\n            lastUpdated = uint64(block.timestamp);\\n\\n            emit RewardUpdated(lastUpdated);\\n        }\\n    }\\n\\n    /// @dev Calculates new ASX and esASX reward per share.\\n    /// @return _asxRewardPerShare Updated ASX reward per share.\\n    /// @return _esAsxRewardPerShare Updated esASX reward per share.\\n    function _getUpdatedAsxAndEsAsxRewardPerShare()\\n        internal\\n        view\\n        returns (uint256 _asxRewardPerShare, uint256 _esAsxRewardPerShare)\\n    {\\n        _asxRewardPerShare = asxRewardPerShare;\\n        _esAsxRewardPerShare = esAsxRewardPerShare;\\n\\n        if (address(ticket) != address(0)) {\\n            uint256 _totalSupply = _ticketTotalSupply();\\n\\n            if (_totalSupply != 0) {\\n                uint32 _distributionEnd = distributionEnd;\\n                uint64 _timeDelta = uint32(block.timestamp) > _distributionEnd\\n                    ? uint64(_distributionEnd) - lastUpdated\\n                    : uint64(block.timestamp) - lastUpdated;\\n                uint256 _asxReward = uint256(_timeDelta) * asxRewardPerSecond;\\n                uint256 _esAsxReward = uint256(_timeDelta) * esAsxRewardPerSecond;\\n\\n                _asxRewardPerShare += (_asxReward * ACCURACY) / _totalSupply;\\n                _esAsxRewardPerShare += (_esAsxReward * ACCURACY) / _totalSupply;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims earned ASX tokens for the user and sends them to him.\\n     * @param userInfo A structure with stake user info.\\n     * @param _user A user for whom to claim the rewards in ASX tokens.\\n     */\\n    function _claimAsx(UserStakeInfo storage userInfo, address _user) private {\\n        uint256 _asxReward = userInfo.reward / ACCURACY;\\n        uint256 _rewardTokenBalance = rewardToken.balanceOf(address(this));\\n\\n        if (_rewardTokenBalance < _asxReward) {\\n            _asxReward = _rewardTokenBalance;\\n        }\\n\\n        if (_asxReward > 0) {\\n            userInfo.reward = userInfo.reward - (_asxReward * ACCURACY);\\n            userInfo.lastClaimed = uint32(block.timestamp);\\n\\n            rewardToken.safeTransfer(_user, _asxReward);\\n        }\\n    }\\n\\n    /**\\n     * @notice Claims earned esASX tokens for the user, applies a boost, and creates a new esASX vesting position for\\n     *         the user.\\n     * @param userInfo A structure with stake user info.\\n     * @param _user A user for whom to claim the rewards in esASX tokens.\\n     */\\n    function _claimEsAsxAndVest(UserStakeInfo storage userInfo, address _user) private {\\n        uint256 _esAsxReward = userInfo.esAsxBoostableReward / ACCURACY;\\n        uint256 _prevEsAsxReward = _esAsxReward;\\n        (uint32 _boost, bool _isAppliable) = rewardsBooster.getBoost(_user);\\n        uint256 _boostedEsAsxReward = (_esAsxReward * _boost) / 100;\\n\\n        if (!_isAppliable) {\\n            availableForLiquidationEsAsx += _boostedEsAsxReward - _esAsxReward;\\n        } else {\\n            _esAsxReward = _boostedEsAsxReward;\\n        }\\n\\n        _esAsxReward += userInfo.esAsxBoostlessReward;\\n        userInfo.esAsxBoostlessReward = 0;\\n\\n        IERC20 _esAsx = esAsx;\\n        uint256 _esAsxBalance = _esAsx.balanceOf(address(this));\\n\\n        if (_esAsxBalance < _esAsxReward) {\\n            userInfo.esAsxBoostlessReward = _esAsxReward - _esAsxBalance;\\n            _esAsxReward = _esAsxBalance;\\n        }\\n\\n        IESASXVesting _esAsxVesting = esAsxVesting;\\n\\n        userInfo.esAsxBoostableReward = userInfo.esAsxBoostableReward - (_prevEsAsxReward * ACCURACY);\\n        userInfo.esAsxLastClaimed = uint32(block.timestamp);\\n\\n        uint256 _asxAvailable = _esAsxVesting.getWithdrawableASXAmount();\\n\\n        if (_esAsxReward < _esAsxVesting.getMinVestingAmount() || _asxAvailable == 0) {\\n            userInfo.esAsxBoostlessReward += _esAsxReward;\\n        } else if (_esAsxReward <= _asxAvailable) {\\n            _esAsx.approve(address(_esAsxVesting), _esAsxReward);\\n            _esAsxVesting.createVestingPosition(_user, _esAsxReward);\\n        } else {\\n            _esAsx.approve(address(_esAsxVesting), _asxAvailable);\\n            _esAsxVesting.createVestingPosition(_user, _asxAvailable);\\n\\n            userInfo.esAsxBoostlessReward += _esAsxReward - _asxAvailable;\\n        }\\n    }\\n\\n    /// @notice Liquidates a user boosted rewards in esASX tokens for the user.\\n    /// @param _users The array of the users for whom to execute a liquidation. If element in the array equals to zero\\n    ///               address liquidation will be executed for esSEX tokens from `availableForLiquidationEsAsx` pool\\n    /// @param _amounts An array of the amounts of esASX tokens to liquidate.\\n    function _liquidate(address[] calldata _users, uint256[] calldata _amounts) private {\\n        _updateReward();\\n\\n        uint256 _totalAmountToLiquidate;\\n\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            if (_users[i] == address(0)) {\\n                if (_amounts[i] > availableForLiquidationEsAsx) revert PrizePoolV2Errors.NothingToLiquidate();\\n\\n                _totalAmountToLiquidate += _amounts[i];\\n\\n                availableForLiquidationEsAsx -= _amounts[i];\\n            } else {\\n                (uint32 _boost, bool _isAppliable) = rewardsBooster.getBoost(_users[i]);\\n\\n                if (_isAppliable || _boost <= 100) revert PrizePoolV2Errors.NothingToLiquidate();\\n\\n                UserStakeInfo storage userInfo = userStakeInfo[_users[i]];\\n                uint256 _esAsxRewardPerShare = esAsxRewardPerShare;\\n                uint256 _ticketBalance = ticket.balanceOf(_users[i]);\\n\\n                userInfo.esAsxBoostableReward += (_ticketBalance * _esAsxRewardPerShare) - userInfo.esAsxFormer;\\n\\n                uint256 _esAsxReward = userInfo.esAsxBoostableReward / ACCURACY;\\n                uint256 _boostedEsAsxReward = (_esAsxReward * _boost) / 100;\\n                uint256 _availableForLiquidationEsAsx = _boostedEsAsxReward - _esAsxReward;\\n\\n                if (_amounts[i] > _availableForLiquidationEsAsx) revert PrizePoolV2Errors.InvalidLiquidationAmount();\\n\\n                if (_amounts[i] < (_availableForLiquidationEsAsx * liquidationThreshold) / ONE_HUNDRED_PERCENTS)\\n                    revert PrizePoolV2Errors.TooSmallLiquidationAmount();\\n\\n                _totalAmountToLiquidate += _amounts[i];\\n\\n                availableForLiquidationEsAsx += _availableForLiquidationEsAsx - _amounts[i];\\n\\n                userInfo.esAsxBoostlessReward += _esAsxReward;\\n                userInfo.esAsxBoostableReward = userInfo.esAsxBoostableReward - (_esAsxReward * ACCURACY);\\n                userInfo.esAsxFormer = _ticketBalance * _esAsxRewardPerShare;\\n            }\\n        }\\n\\n        _liquidateESASX(_totalAmountToLiquidate);\\n    }\\n\\n    /**\\n     * @notice Liquidates a specified amount of esASX tokens.\\n     * @param _amount An amount of esASX tokens to liquidate.\\n     */\\n    function _liquidateESASX(uint256 _amount) private {\\n        if (_amount == 0) revert PrizePoolV2Errors.InvalidLiquidationAmount();\\n\\n        IESASXVesting _esAsxVesting = esAsxVesting;\\n        uint256 _asxAvailable = _esAsxVesting.getWithdrawableASXAmount();\\n\\n        if (_amount > _asxAvailable) revert PrizePoolV2Errors.NothingToLiquidate();\\n\\n        address _asx = address(rewardToken);\\n\\n        if (msg.value == 0) {\\n            uint256 _asxAmountToPayAndBurn = _amount >> 1;\\n\\n            IERC20(_asx).safeTransferFrom(msg.sender, address(this), _asxAmountToPayAndBurn);\\n            _buybackAndBurn(0, _asxAmountToPayAndBurn);\\n        } else {\\n            IOracle _asxOracle = asxOracle;\\n            uint256 _asxPriceInWeth = uint256(_asxOracle.latestAnswer());\\n            uint256 _ethNeeded = ((_asxPriceInWeth * _amount) >> 1) / (10 ** _asxOracle.decimals());\\n\\n            if (msg.value > _ethNeeded) {\\n                payable(msg.sender).transfer(msg.value - _ethNeeded);\\n            } else {\\n                if (msg.value != _ethNeeded) revert PrizePoolV2Errors.NotEnoughETH();\\n            }\\n\\n            _buybackAndBurn(_ethNeeded, 0);\\n        }\\n\\n        esAsx.approve(address(_esAsxVesting), _amount);\\n        _esAsxVesting.createVestingPosition(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * @notice Swaps ETH for ASX and burns output ASX tokens.\\n     * @param _ethAmount An amount of ETH to swap for ASX.\\n     * @param _asxAmount An amount of ASX to burn with swapped ASX.\\n     */\\n    function _buybackAndBurn(uint256 _ethAmount, uint256 _asxAmount) internal {\\n        uint256 _swappedAsxAmount;\\n        address _asx = address(rewardToken);\\n\\n        if (_ethAmount > 0) {\\n            IOracle _asxOracle = asxOracle;\\n            uint256 _asxPriceInEth = (uint256(_asxOracle.latestAnswer()) * 1e18) / 10 ** _asxOracle.decimals();\\n            uint256 _amountOut = _ethAmount / _asxPriceInEth;\\n            uint256 _amountOutMin = _amountOut - ((_amountOut * slippageTolerance) / ONE_HUNDRED_PERCENTS);\\n\\n            _swappedAsxAmount = uniswapWrapper.swapSingle{ value: _ethAmount }(\\n                _asx,\\n                UNISWAP_V3_POOL_FEE,\\n                _ethAmount,\\n                _amountOutMin\\n            );\\n        }\\n\\n        uint256 _asxAmountToBurn = _swappedAsxAmount + _asxAmount;\\n\\n        if (_asxAmountToBurn > 0) ERC20BurnableUpgradeable(_asx).burn(_asxAmountToBurn);\\n    }\\n\\n    /// @notice Calculates a number of seconds for which the user has to pay the exit fee.\\n    /// @dev If Lido's rebase operatio didn't happen yet, calculates the seconds difference between contract's\\n    ///      deployment timestamp and user's current withdraw timestamp.\\n    /// @dev If at least one Lido's rebase operation took place, calculates the seconds difference between last Lido's\\n    ///      rebase timestamp and user's current withdraw timestamp.\\n    /// @param _withdrawTimestamp The timestamp of the withdraw transaction.\\n    /// @return The number of seconds for which the user has to pay the exit fee.\\n    function _getSecondsNumberToPayExitFee(uint32 _withdrawTimestamp) private view returns (uint32) {\\n        uint32 _firstLidoRebaseTimestamp = firstLidoRebaseTimestamp;\\n\\n        if (_withdrawTimestamp < _firstLidoRebaseTimestamp) {\\n            return _withdrawTimestamp - deploymentTimestamp;\\n        } else {\\n            return _withdrawTimestamp - _getLastLidoRebaseTimestamp(_firstLidoRebaseTimestamp, _withdrawTimestamp);\\n        }\\n    }\\n\\n    /**\\n     * @notice Checks if an address is a contract.\\n     * @param _contract An address to check.\\n     */\\n    function _onlyContract(address _contract) private view {\\n        if (!_contract.isContract()) revert PrizePoolV2Errors.NotContract();\\n    }\\n\\n    /// @notice Calculates Lido's last rebase timestamp using Lido's first rebase timestamp.\\n    /// @param _firstLidoRebaseTimestamp The timestamp of Lido's first rebase operation.\\n    /// @param _actionTimestamp The timestamp of an operation for which to calculate Lido's last rebase timestamp.\\n    /// @return The Lido's last rebase timestamp.\\n    function _getLastLidoRebaseTimestamp(\\n        uint32 _firstLidoRebaseTimestamp,\\n        uint32 _actionTimestamp\\n    ) private pure returns (uint32) {\\n        uint32 _secondsPerDay = 86_400;\\n        uint32 _daysDiff = (_actionTimestamp - _firstLidoRebaseTimestamp) / _secondsPerDay;\\n\\n        return _firstLidoRebaseTimestamp + (_daysDiff * _secondsPerDay);\\n    }\\n\\n    /* ============ Abstract Contract Implementatiton ============ */\\n\\n    /// @notice Determines whether the passed token can be transferred out as an external award.\\n    /// @dev Different yield sources will hold the deposits as another kind of token: such a Compound's cToken. The\\n    ///      prize flush should not be allowed to move those tokens.\\n    /// @dev Should be implemented in a child contract during the inheritance.\\n    /// @param _externalToken The address of the token to check.\\n    /// @return `true` if the token may be awarded, `false` otherwise.\\n    function _canAwardExternal(address _externalToken) internal view virtual returns (bool);\\n\\n    /// @notice Returns the ERC20 asset token used for deposits.\\n    /// @dev Should be implemented in a child contract during the inheritance.\\n    /// @return The ERC20 asset token.\\n    function _token() internal view virtual returns (IERC20Upgradeable);\\n\\n    /// @notice Returns the total balance (in asset tokens). This includes the deposits and interest.\\n    /// @dev Should be implemented in a child contract during the inheritance.\\n    /// @return The underlying balance of asset tokens.\\n    function _balance() internal virtual returns (uint256);\\n\\n    uint256[36] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/core/prize-pool/StakePrizePoolV2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport { IERC20Upgradeable } from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\\\";\\n\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport { PrizePoolV2 } from \\\"./PrizePoolV2.sol\\\";\\n\\n/**\\n * @title  Asymetrix Protocol V2 StakePrizePoolV2\\n * @author Asymetrix Protocol Inc Team\\n * @notice The Stake Prize Pool V2 is a prize pool in which users can deposit an\\n *         ERC20 token. These tokens are simply held by the Stake Prize Pool V2\\n *         and become eligible for prizes. Prizes are added manually by the\\n *         Stake Prize Pool V2 owner and are distributed to users at the end of\\n *         the prize period.\\n */\\ncontract StakePrizePoolV2 is PrizePoolV2 {\\n    /// @notice Address of the stake token.\\n    IERC20Upgradeable private stakeToken;\\n\\n    /// @dev Emitted when stake prize pool is deployed.\\n    /// @param stakeToken Address of the stake token.\\n    event Deployed(IERC20Upgradeable indexed stakeToken);\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @notice Deploy the Stake Prize Pool V2 contract.\\n     * @param _esAsx esASX token address.\\n     * @param _rewardsBooster RewardsBooster contract address.\\n     * @param _esAsxVesting EsAsxVesting contract address.\\n     * @param _uniswapWrapper A wrapper contract address that helps to interact\\n     *                        with Uniswap V3.\\n     * @param _asxOracle An oracle for ASX token that returns price of ASX token\\n     *                   in WETH.\\n     * @param _weth WETH token address.\\n     * @param _esAsxRewardPerSecond The reward per second that will be used in\\n     *                              time of distribution of esASX tokens.\\n     * @param _liquidationThreshold Minimum threshold for partial liquidation of\\n     *                              users' boosts.\\n     * @param _slippageTolerance A slippage tolerance to apply in time of swap\\n     *                           of ETH/WETH for ASX.\\n     */\\n    function initializeV2(\\n        address _esAsx,\\n        address _rewardsBooster,\\n        address _esAsxVesting,\\n        address _uniswapWrapper,\\n        address _asxOracle,\\n        address _weth,\\n        uint256 _esAsxRewardPerSecond,\\n        uint16 _liquidationThreshold,\\n        uint16 _slippageTolerance\\n    ) external reinitializer(2) {\\n        __PrizePoolV2_init_unchained(\\n            _esAsx,\\n            _rewardsBooster,\\n            _esAsxVesting,\\n            _uniswapWrapper,\\n            _asxOracle,\\n            _weth,\\n            _esAsxRewardPerSecond,\\n            _liquidationThreshold,\\n            _slippageTolerance\\n        );\\n    }\\n\\n    /// @notice Determines whether the passed token can be transferred out as an\\n    ///         external award.\\n    /// @dev Different yield sources will hold the deposits as another kind of\\n    ///      token: such a Compound's cToken. The prize flush should not be\\n    ///      allowed to move those tokens.\\n    /// @param _externalToken The address of the token to check.\\n    /// @return True if the token may be awarded, false otherwise.\\n    function _canAwardExternal(address _externalToken) internal view override returns (bool) {\\n        return address(stakeToken) != _externalToken;\\n    }\\n\\n    /// @notice Returns the total balance (in asset tokens). This includes the\\n    ///         deposits and interest.\\n    /// @return The underlying balance of asset tokens.\\n    function _balance() internal view override returns (uint256) {\\n        return stakeToken.balanceOf(address(this));\\n    }\\n\\n    /// @notice Returns the address of the ERC20 asset token used for deposits.\\n    /// @return Address of the ERC20 asset token.\\n    function _token() internal view override returns (IERC20Upgradeable) {\\n        return stakeToken;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/owner-manager/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Abstract ownable contract that can be inherited by other contracts.\\n * @notice Contract module which provides a basic access control mechanism,\\n *         where there is an account (an owner) that can be granted exclusive\\n *         access to specific functions.\\n *\\n *         The `owner` is first set by passing the address of the `initialOwner`\\n *         to the Ownable Initialize.\\n *\\n *         The owner account can be transferred through a two steps process:\\n *         1. The current `owner` calls {transferOwnership} to set a\\n *            `pendingOwner`.\\n *         2. The `pendingOwner` calls {claimOwnership} to accept the ownership\\n *            transfer.\\n *\\n *         This module is used through inheritance. It will make available the\\n *         modifier `onlyOwner`, which can be applied to your functions to\\n *         restrict their use to the owner.\\n */\\nabstract contract Ownable is Initializable {\\n    address private _owner;\\n    address private _pendingOwner;\\n\\n    /**\\n     * @dev Emitted when `_pendingOwner` has been changed.\\n     * @param pendingOwner new `_pendingOwner` address.\\n     */\\n    event OwnershipOffered(address indexed pendingOwner);\\n\\n    /**\\n     * @dev Emitted when `_owner` has been changed.\\n     * @param previousOwner previous `_owner` address.\\n     * @param newOwner new `_owner` address.\\n     */\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /* ============ Deploy ============ */\\n\\n    /**\\n     * @notice Initializes the contract setting `_initialOwner` as the initial\\n     *         owner.\\n     * @param _initialOwner Initial owner of the contract.\\n     */\\n    function __Ownable_init_unchained(address _initialOwner) internal onlyInitializing {\\n        _setOwner(_initialOwner);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * @notice Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @notice Gets current `_pendingOwner`.\\n     * @return Current `_pendingOwner` address.\\n     */\\n    function pendingOwner() external view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @notice Renounce ownership of the contract.\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() external virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @notice Allows current owner to set the `_pendingOwner` address.\\n     * @param _newOwner Address to transfer ownership to.\\n     */\\n    function transferOwnership(address _newOwner) external onlyOwner {\\n        require(_newOwner != address(0), \\\"Ownable/pendingOwner-not-zero-address\\\");\\n\\n        _pendingOwner = _newOwner;\\n\\n        emit OwnershipOffered(_newOwner);\\n    }\\n\\n    /**\\n     * @notice Allows the `_pendingOwner` address to finalize the transfer.\\n     * @dev This function is only callable by the `_pendingOwner`.\\n     */\\n    function claimOwnership() external onlyPendingOwner {\\n        _setOwner(_pendingOwner);\\n\\n        _pendingOwner = address(0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * @notice Internal function to set the `_owner` of the contract.\\n     * @param _newOwner New `_owner` address.\\n     */\\n    function _setOwner(address _newOwner) private {\\n        address _oldOwner = _owner;\\n\\n        _owner = _newOwner;\\n\\n        emit OwnershipTransferred(_oldOwner, _newOwner);\\n    }\\n\\n    /* ============ Modifier Functions ============ */\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == msg.sender, \\\"Ownable/caller-not-owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the `pendingOwner`.\\n     */\\n    modifier onlyPendingOwner() {\\n        require(msg.sender == _pendingOwner, \\\"Ownable/caller-not-pendingOwner\\\");\\n        _;\\n    }\\n\\n    uint256[45] private __gap;\\n}\\n\"\r\n    },\r\n    \"contracts/rewards-booster/interfaces/IRewardsBooster.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Asymetrix Protocol V2 IRewardsBooster\\n * @author Asymetrix Protocol Inc Team\\n * @notice An interface of the RewardsBooster contract.\\n */\\ninterface IRewardsBooster {\\n    /**\\n     * @notice Initial parameters structure.\\n     * @param ticket A Ticket contract address.\\n     * @param stEthOracle An oracle for stETH token.\\n     * @param asxOracle An oracle for ASX token that returns price of ASX token in WETH.\\n     * @param nonfungiblePositionManager A NonfungiblePositionManager contract address.\\n     * @param uniswapWrapper A wrapper contract address that helps to interact with Uniswap V3.\\n     * @param weth WETH token address.\\n     * @param asx ASX token address.\\n     * @param maxBoost A maximum possible boost coefficient. Is used when lock (position) is created by a user.\\n     * @param minBoostThreshold A threshold (in %) that all of the user's locks (positions) together must overcome for a\\n     *                          boost to be awarded during a rewards claim on the StakePrizePool contract.\\n     * @param maxBoostThreshold A threshold (in %) that all of the user's locks (positions) together must achieve to get\\n     *                          the maximum boost during a rewards claim on the StakePrizePool contract.\\n     * @param slippageTolerance A slippage tolerance to apply in time of swap of ETH/WETH for ASX.\\n     */\\n    struct InitParams {\\n        address ticket;\\n        address stEthOracle;\\n        address asxOracle;\\n        address nonfungiblePositionManager;\\n        address uniswapWrapper;\\n        address weth;\\n        address asx;\\n        uint16 maxBoost;\\n        uint16 minBoostThreshold;\\n        uint16 maxBoostThreshold;\\n        uint16 slippageTolerance;\\n    }\\n\\n    /**\\n     * @notice Staking pool structure.\\n     * @param isFungible Indicates if pool accepts fungible ERC-20 or non fungible ERC-721 tokens.\\n     * @param stakeToken Token address to stake in the staking pool.\\n     * @param stakeTokenValuer Valuer for the staked token.\\n     * @param liquidityPool Liquidity pool where liquidity is stored.\\n     * @param validator Validator whose main role is to execute different validations in time of stakes and unstakes.\\n     * @param minLockDuration Minimum look duration in the staking pool.\\n     * @param maxLockDuration Maximum look duration in the staking pool.\\n     * @param lockDurationSettingsNumber An amount of settings in the mapping with lock duration settings.\\n     */\\n    struct Pool {\\n        uint256 isFungible;\\n        address stakeToken;\\n        address stakeTokenValuer;\\n        address liquidityPool;\\n        address validator;\\n        uint32 minLockDuration;\\n        uint32 maxLockDuration;\\n        uint8 lockDurationSettingsNumber;\\n    }\\n\\n    /**\\n     * @notice User structure.\\n     * @param initializedLocksNumber Number of locks (positions) created and initialized by user.\\n     */\\n    struct User {\\n        uint8 initializedLocksNumber;\\n    }\\n\\n    /**\\n     * @notice Lock (position) structure.\\n     * @param amountOrId Amount of ERC-20 locked tokens (or ERC-721 NFT locked position ID).\\n     * @param createdAt Timestamp when the lock (position) was created.\\n     * @param updatedAt Timestamp when the lock (position) was updated last ime.\\n     * @param duration Duration of the lock (position).\\n     * @param maxBoost A maximum possible boost coefficient for user. Is set when lock (position) is created by a user.\\n     * @param isInitialized Indicates if the lock (position) is initialized or not.\\n     */\\n    struct Lock {\\n        uint256 amountOrId;\\n        uint32 createdAt;\\n        uint32 updatedAt;\\n        uint32 duration;\\n        uint16 maxBoost;\\n        bool isInitialized;\\n    }\\n\\n    /**\\n     * @notice LockDurationSettings structure.\\n     * @param lowerLockDuration Lower lock duration (in seconds).\\n     * @param upperLockDuration Upper lock duration (in seconds).\\n     * @param additionalBoost An additional boost that will be applied for locks that are in range of above durations.\\n     */\\n    struct LockDurationSettings {\\n        uint32 lowerLockDuration;\\n        uint32 upperLockDuration;\\n        uint16 additionalBoost;\\n    }\\n\\n    /**\\n     * @notice Event emitted when a new lock (position) is created by a user.\\n     * @param _pid Staking pool ID.\\n     * @param _user Lock (position) creator address.\\n     * @param _lid Lock (position) ID.\\n     * @param _lock Lock (position) structure.\\n     */\\n    event LockCreated(uint8 indexed _pid, address indexed _user, uint8 indexed _lid, Lock _lock);\\n\\n    /**\\n     * @notice Event emitted when a lock (position) is closed by a user.\\n     * @param _pid Staking pool ID.\\n     * @param _user Lock (position) creator address.\\n     * @param _lid Lock (position) ID.\\n     */\\n    event LockClosed(uint8 indexed _pid, address indexed _user, uint8 indexed _lid);\\n\\n    /**\\n     * @notice Event emitted when a lock duration was extended.\\n     * @param _pid Staking pool ID where to extend a lock duration for the position.\\n     * @param _user Lock (position) creator address.\\n     * @param _lid An ID of the lock (position) where to extend a lock duration.\\n     * @param _newDuration A new duration (in seconds) for the lock of the position.\\n     */\\n    event LockExtended(uint8 indexed _pid, address indexed _user, uint8 indexed _lid, uint32 _newDuration);\\n\\n    /**\\n     * @notice Event emitted when a new staking pool was added by an owner.\\n     * @param _pid Staking pool ID.\\n     * @param _pool Staking pool structure.\\n     */\\n    event PoolCreated(uint8 indexed _pid, Pool _pool);\\n\\n    /**\\n     * @notice Event emitted when accidentally transferred to this contract token (including ETH) was withdrawn\\n     *         (rescued) by an owner.\\n     * @param token A token that was withdraw. If token address is equal to zero address - ETH was withdrawn.\\n     * @param amountOrId An amount of native/ERC-20 tokens or ID of ERC-721 NFT token that was withdraw.\\n     * @param isFungible Indicates if token that was withdraw is fungible ERC-20 token.\\n     * @param recipient A recipient of withdrawn tokens.\\n     */\\n    event Rescued(address indexed token, uint256 amountOrId, bool indexed isFungible, address indexed recipient);\\n\\n    /**\\n     * @notice Calculates a boost coefficient for the array of users.\\n     * @param _users An array users to calculate boost coefficient for.\\n     * @return An array with boost coefficients for the users.\\n     * @return An array with flags that indicate if a user is able to use this coefficient to multiply his rewards.\\n     */\\n    function getBoostBatch(address[] calldata _users) external view returns (uint32[] memory, bool[] memory);\\n\\n    /**\\n     * @notice Calculates a boost coefficient for a user.\\n     * @param _user A user to calculate boost coefficient for.\\n     * @return A boost coefficient for a user.\\n     * @return A flag that indicates if a user is able to use this coefficient to multiply his rewards.\\n     */\\n    function getBoost(address _user) external view returns (uint32, bool);\\n\\n    /**\\n     * @notice Returns staking pool info by its ID.\\n     * @param _pid Staking pool ID.\\n     * @return Staking pool info.\\n     */\\n    function getPoolInfo(uint8 _pid) external view returns (Pool memory);\\n}\\n\"\r\n    },\r\n    \"contracts/vesting/interfaces/IESASXVesting.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title An interface for the ESASXVesting contract\\n * @author Asymetrix Protocol Inc Team\\n * @notice An interface that describes data structures and events for the ESASXVesting contract.\\n */\\ninterface IESASXVesting {\\n    /**\\n     * @notice Vesting Position structure.\\n     * @param lockPeriod A vesting period of esASX tokens.\\n     * @param amount An amount of esASX tokens to be vested.\\n     * @param releasedAmount An amount of ASX tokens has been released.\\n     * @param createdAt A timestamp when a vesting position created.\\n     */\\n    struct VestingPosition {\\n        uint256 lockPeriod;\\n        uint256 amount;\\n        uint256 releasedAmount;\\n        uint32 createdAt;\\n    }\\n\\n    /**\\n     * @notice Event emitted when a part of ASX tokens from a vesting position was released.\\n     * @param vpid An ID of a vesting position.\\n     * @param recipient An address of ASX tokens recipient.\\n     * @param amount An amount of tokens that were released.\\n     */\\n    event Released(uint256 indexed vpid, address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when a part of ASX tokens from a vesting position was released with penalty.\\n     * @param vpid An ID of a vesting position.\\n     * @param recipient An address of ASX tokens recipient.\\n     * @param received An amount of tokens that were released.\\n     * @param lost An amount of tokens that were lost by user and put on sale with discount.\\n     */\\n    event ReleasedWithPenalty(uint256 indexed vpid, address indexed recipient, uint256 received, uint256 lost);\\n\\n    /**\\n     * @notice Event emitted when a part of unused ASX tokens or other tokens (including ETH) was withdrawn by an owner.\\n     * @param token A token that was withdraw. If token address was equal to zero address - ETH were withdrawn.\\n     * @param owner An address of an owner that withdrawn unused tokens.\\n     * @param amount An amount of tokens that were withdrawn.\\n     */\\n    event Withdrawn(address indexed token, address indexed owner, uint256 amount);\\n\\n    /**\\n     * @notice Event emitted when a vesting position is created.\\n     * @param positionId Id of the user vesting position.\\n     * @param user Address of the user.\\n     * @param vestingPosition Created vesting position.\\n     */\\n    event VestingPositionCreated(uint256 positionId, address user, VestingPosition vestingPosition);\\n\\n    /**\\n     * @notice Creates a new vesting position.\\n     * @param user An address of a user for whom vestin position will be created.\\n     * @param amount An amount of esASX to be vested.\\n     */\\n    function createVestingPosition(address user, uint256 amount) external;\\n\\n    /**\\n     * @notice Returns an amount of ASX tokens available for withdrawal (unused ASX tokens amount).\\n     * @return A withdrawable ASX amount.\\n     */\\n    function getWithdrawableASXAmount() external view returns (uint256);\\n\\n    /**\\n     * @notice Returns the minimum vesting amount any user must set in order to create a vesting position.\\n     * @return Minimum vesting amount for a vesting position.\\n     */\\n    function getMinVestingAmount() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/vesting/interfaces/IOracle.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Asymetrix Protocol V2 IOracle\\n * @author Asymetrix Protocol Inc Team\\n * @notice An interface that all custom oracles should implement.\\n */\\ninterface IOracle {\\n    /**\\n     * @notice Returns the latest answer in ETH.\\n     * @return _answer The latest answer in ETH.\\n     */\\n    function latestAnswer() external view returns (int256 _answer);\\n\\n    /**\\n     * @notice Returns the data from the latest round.\\n     * @return _roundId The round ID.\\n     * @return _answer The answer from the latest round.\\n     * @return _startedAt Timestamp of when the round started.\\n     * @return _updatedAt Timestamp of when the round was updated.\\n     * @return _answeredInRound Deprecated. Previously used when answers could take multiple rounds to be computed.\\n     */\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 _roundId, int256 _answer, uint256 _startedAt, uint256 _updatedAt, uint80 _answeredInRound);\\n\\n    /**\\n     * @notice Returns the number of decimals in the answer.\\n     * @return The number of decimals in the answer.\\n     */\\n    function decimals() external pure returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/vesting/libraries/ESASXErrors.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @title Asymetrix Protocol V2 Errors library\\n * @author Asymetrix Protocol Inc Team\\n * @notice A library with Asymetrix Protocol V2 ESASX errors.\\n */\\nlibrary ESASXErrors {\\n    error InvalidAddress();\\n    error WrongVestingPeriod();\\n    error WrongVestingAmount();\\n    error NotExistingVP();\\n    error InvalidLength();\\n    error InvalidRange();\\n    error OutOfBounds();\\n    error NothingToRelease();\\n    error NotEnoughUnlockedASX();\\n    error NotEnoughUnlockedESASX();\\n    error NotEnoughASXWithDiscount();\\n    error NotEnoughETH();\\n    error WrongETHAmount();\\n    error InvalidEsASXAmount();\\n    error InvalidSlippageTolerance();\\n    error NotContract();\\n    error WrongBalancerPoolTokensNumber();\\n    error NonTransferable();\\n}\\n\"\r\n    },\r\n    \"contracts/vesting/UniswapWrapper.sol\": {\r\n      \"content\": \"//SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.10;\\n\\nimport { ISwapRouter } from \\\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ESASXErrors } from \\\"./libraries/ESASXErrors.sol\\\";\\n\\n/**\\n * @title Asymetrix Protocol V2 UniswapWrapper contract\\n * @author Asymetrix Protocol Inc Team\\n * @notice Implements helper functions for Uniswap V3 interactions.\\n */\\ncontract UniswapWrapper {\\n    ISwapRouter public immutable router;\\n    address public immutable weth;\\n\\n    uint16 public constant DEADLINE = 1000;\\n\\n    /**\\n     * @notice \u0421onstructor of this UniswapWrapper contract.\\n     * @dev Sets _router, uniswap router contract address, and _weth, WETH token contract address.\\n     * @param _router uniswap router contract address.\\n     * @param _weth WETH token contract address.\\n     */\\n    constructor(address _router, address _weth) {\\n        if (_router == address(0)) revert ESASXErrors.InvalidAddress();\\n        if (_weth == address(0)) revert ESASXErrors.InvalidAddress();\\n\\n        router = ISwapRouter(_router);\\n        weth = _weth;\\n    }\\n\\n    /**\\n     * @notice Swaps ETH for out tokens using Uniswap V3.\\n     * @param _tokenOut An address of a token out.\\n     * @param _fee A fee of the pool.\\n     * @param _amountIn An amount of ETH to swap.\\n     * @param _amountOutMinimum A min amount of a token out to receive.\\n     * @return amountOut An amount of a token out to receive.\\n     */\\n    function swapSingle(\\n        address _tokenOut,\\n        uint24 _fee,\\n        uint256 _amountIn,\\n        uint256 _amountOutMinimum\\n    ) external payable returns (uint256) {\\n        if (msg.value != _amountIn) revert ESASXErrors.WrongETHAmount();\\n\\n        ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\n            tokenIn: weth,\\n            tokenOut: _tokenOut,\\n            fee: _fee,\\n            recipient: msg.sender,\\n            deadline: block.timestamp + DEADLINE,\\n            amountIn: _amountIn,\\n            amountOutMinimum: _amountOutMinimum,\\n            sqrtPriceLimitX96: 0\\n        });\\n\\n        return router.exactInputSingle{ value: msg.value }(params);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 2000\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": true\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AwardNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBalanceCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExternalToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLidoAPR\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidationAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidationThreshold\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidLiquidityCap\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSlippageTolerance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotContract\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToLiquidate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyPrizeFlush\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlyTicket\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TicketAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TooSmallLiquidationAmount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"asxRewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"AsxRewardPerSecondSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AwardCaptured\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ITicket\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Awarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AwardedExternalERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"AwardedExternalERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"balanceCap\",\"type\":\"uint256\"}],\"name\":\"BalanceCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITicket\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"ControlledTokenAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"stakeToken\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ITicket\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IDrawBeacon\",\"name\":\"drawBeacond\",\"type\":\"address\"}],\"name\":\"DrawBeaconSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"error\",\"type\":\"bytes\"}],\"name\":\"ErrorAwardingExternalERC721\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"esAsxRewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"EsAsxRewardPerSecondSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"firstLidoRebaseTimestamp\",\"type\":\"uint32\"}],\"name\":\"FirstLidoRebaseTimestampSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"freeExitDuration\",\"type\":\"uint32\"}],\"name\":\"FreeExitDurationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"lidoAPR\",\"type\":\"uint16\"}],\"name\":\"LidoAPRSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"liquidationThreshold\",\"type\":\"uint16\"}],\"name\":\"LiquidationThresholdSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidityCap\",\"type\":\"uint256\"}],\"name\":\"LiquidityCapSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pendingOwner\",\"type\":\"address\"}],\"name\":\"OwnershipOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"prizeFlush\",\"type\":\"address\"}],\"name\":\"PrizeFlushSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"rewardToken\",\"type\":\"address\"}],\"name\":\"RewardTokenSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"lastUpdated\",\"type\":\"uint64\"}],\"name\":\"RewardUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract ITicket\",\"name\":\"ticket\",\"type\":\"address\"}],\"name\":\"TicketSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TransferredExternalERC20\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract ITicket\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemed\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_DISTRIBUTION_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_DRAW_IDS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_EPOCH_IDS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TIMESTAMPS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_TOKEN_IDS_LENGTH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ONE_HUNDRED_PERCENTS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asxOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableForLiquidationEsAsx\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"award\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"awardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"awardExternalERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalToken\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"awardExternalERC721\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_externalToken\",\"type\":\"address\"}],\"name\":\"canAwardExternal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"captureAwardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ICompLike\",\"name\":\"_compLike\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"compLikeDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_delegate\",\"type\":\"address\"}],\"name\":\"depositToAndDelegate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esAsx\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esAsxRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esAsxRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"esAsxVesting\",\"outputs\":[{\"internalType\":\"contract IESASXVesting\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccountedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsxRewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsxRewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalanceCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getClaimableRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_asxReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_esAsxReward\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeploymentTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributionEnd\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDrawBeacon\",\"outputs\":[{\"internalType\":\"contract IDrawBeacon\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFirstLidoRebaseTimestamp\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFreeExitDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastUpdated\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLidoAPR\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLiquidityCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrizeFlush\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardToken\",\"outputs\":[{\"internalType\":\"contract IERC20Upgradeable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTicket\",\"outputs\":[{\"internalType\":\"contract ITicket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStakeInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"former\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"lastClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"esAsxLastClaimed\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"esAsxBoostableReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"esAsxBoostlessReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"esAsxFormer\",\"type\":\"uint256\"}],\"internalType\":\"struct IPrizePoolV2.UserStakeInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_esAsx\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_rewardsBooster\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_esAsxVesting\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapWrapper\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asxOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_esAsxRewardPerSecond\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_liquidationThreshold\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_slippageTolerance\",\"type\":\"uint16\"}],\"name\":\"initializeV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITicket\",\"name\":\"_controlledToken\",\"type\":\"address\"}],\"name\":\"isControlled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsBooster\",\"outputs\":[{\"internalType\":\"contract IRewardsBooster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newAsxOracle\",\"type\":\"address\"}],\"name\":\"setAsxOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_asxRewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setAsxRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_balanceCap\",\"type\":\"uint256\"}],\"name\":\"setBalanceCap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_newDistributionEnd\",\"type\":\"uint32\"}],\"name\":\"setDistributionEnd\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IDrawBeacon\",\"name\":\"_drawBeacon\",\"type\":\"address\"}],\"name\":\"setDrawBeacon\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_esAsxRewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setEsAsxRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_freeExitDuration\",\"type\":\"uint32\"}],\"name\":\"setFreeExitDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_lidoAPR\",\"type\":\"uint16\"}],\"name\":\"setLidoAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_liquidationThreshold\",\"type\":\"uint16\"}],\"name\":\"setLiquidationThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityCap\",\"type\":\"uint256\"}],\"name\":\"setLiquidityCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_prizeFlush\",\"type\":\"address\"}],\"name\":\"setPrizeFlush\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_newSlippageTolerance\",\"type\":\"uint16\"}],\"name\":\"setSlippageTolerance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITicket\",\"name\":\"_ticket\",\"type\":\"address\"}],\"name\":\"setTicket\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newUniswapWrapper\",\"type\":\"address\"}],\"name\":\"setUniswapWrapper\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippageTolerance\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_externalToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"transferExternalERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapWrapper\",\"outputs\":[{\"internalType\":\"contract UniswapWrapper\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_beforeBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_afterBalance\",\"type\":\"uint256\"}],\"name\":\"updateUserRewardAndFormer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weth\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFrom\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "StakePrizePoolV2", "CompilerVersion": "v0.8.10+commit.fc410830", "OptimizationUsed": "1", "Runs": "2000", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}