{"SourceCode": "{\"AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IAccessControl.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\nimport \\\"./Strings.sol\\\";\\r\\nimport \\\"./ERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module that allows children to implement role-based access\\r\\n * control mechanisms. This is a lightweight version that doesn\\u0027t allow enumerating role\\r\\n * members except through off-chain means by accessing the contract event logs. Some\\r\\n * applications may benefit from on-chain enumerability, for those cases see\\r\\n * {AccessControlEnumerable}.\\r\\n *\\r\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\r\\n * in the external API and be unique. The best way to achieve this is by\\r\\n * using `public constant` hash digests:\\r\\n *\\r\\n * ```\\r\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\r\\n * ```\\r\\n *\\r\\n * Roles can be used to represent a set of permissions. To restrict access to a\\r\\n * function call, use {hasRole}:\\r\\n *\\r\\n * ```\\r\\n * function foo() public {\\r\\n *     require(hasRole(MY_ROLE, msg.sender));\\r\\n *     ...\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\r\\n * {revokeRole} functions. Each role has an associated admin role, and only\\r\\n * accounts that have a role\\u0027s admin role can call {grantRole} and {revokeRole}.\\r\\n *\\r\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\r\\n * that only accounts with this role will be able to grant or revoke other\\r\\n * roles. More complex role relationships can be created by using\\r\\n * {_setRoleAdmin}.\\r\\n *\\r\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\r\\n * grant and revoke this role. Extra precautions should be taken to secure\\r\\n * accounts that have been granted it.\\r\\n */\\r\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\r\\n    struct RoleData {\\r\\n        mapping(address =\\u003e bool) members;\\r\\n        bytes32 adminRole;\\r\\n    }\\r\\n\\r\\n    mapping(bytes32 =\\u003e RoleData) private _roles;\\r\\n\\r\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\r\\n     * with a standardized message including the required role.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     *\\r\\n     * _Available since v4.1._\\r\\n     */\\r\\n    modifier onlyRole(bytes32 role) {\\r\\n        _checkRole(role, _msgSender());\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\r\\n        return _roles[role].members[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revert with a standard message if `account` is missing `role`.\\r\\n     *\\r\\n     * The format of the revert reason is given by the following regular expression:\\r\\n     *\\r\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\r\\n     */\\r\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\r\\n        if (!hasRole(role, account)) {\\r\\n            revert(\\r\\n                string(\\r\\n                    abi.encodePacked(\\r\\n                        \\\"AccessControl: account \\\",\\r\\n                        Strings.toHexString(uint160(account), 20),\\r\\n                        \\\" is missing role \\\",\\r\\n                        Strings.toHexString(uint256(role), 32)\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role\\u0027s admin, use {_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\r\\n        return _roles[role].adminRole;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) public virtual override {\\r\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\r\\n\\r\\n        _revokeRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event. Note that unlike {grantRole}, this function doesn\\u0027t perform any\\r\\n     * checks on the calling account.\\r\\n     *\\r\\n     * [WARNING]\\r\\n     * ====\\r\\n     * This function should only be called from the constructor when setting\\r\\n     * up the initial roles for the system.\\r\\n     *\\r\\n     * Using this function in any other way is effectively circumventing the admin\\r\\n     * system imposed by {AccessControl}.\\r\\n     * ====\\r\\n     *\\r\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\r\\n     */\\r\\n    function _setupRole(bytes32 role, address account) internal virtual {\\r\\n        _grantRole(role, account);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `adminRole` as ``role``\\u0027s admin role.\\r\\n     *\\r\\n     * Emits a {RoleAdminChanged} event.\\r\\n     */\\r\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\r\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\r\\n        _roles[role].adminRole = adminRole;\\r\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _grantRole(bytes32 role, address account) internal virtual {\\r\\n        if (!hasRole(role, account)) {\\r\\n            _roles[role].members[account] = true;\\r\\n            emit RoleGranted(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * Internal function without access restriction.\\r\\n     */\\r\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\r\\n        if (hasRole(role, account)) {\\r\\n            _roles[role].members[account] = false;\\r\\n            emit RoleRevoked(role, account, _msgSender());\\r\\n        }\\r\\n    }\\r\\n}\"},\"Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\r\\n\\r\\npragma solidity ^0.8.1;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * You shouldn\\u0027t rely on `isContract` to protect against flash loan attacks!\\r\\n     *\\r\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\r\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\r\\n     * constructor.\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize/address.code.length, which returns 0\\r\\n        // for contracts in construction, since the code is only stored at the end\\r\\n        // of the constructor execution.\\r\\n\\r\\n        return account.code.length \\u003e 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity\\u0027s `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance \\u003e= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance \\u003e= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn\\u0027t, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length \\u003e 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"},\"Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\"},\"DSF.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\u0027./ERC20.sol\\u0027;\\r\\nimport \\u0027./IERC20Metadata.sol\\u0027;\\r\\nimport \\u0027./SafeERC20.sol\\u0027;\\r\\nimport \\u0027./Pausable.sol\\u0027;\\r\\nimport \\u0027./AccessControl.sol\\u0027;\\r\\nimport \\u0027./IStrategy.sol\\u0027;\\r\\n\\r\\n/**\\r\\n *\\r\\n * @title DSF Protocol\\r\\n *\\r\\n * @notice Contract for Convex\\u0026Curve protocols optimize.\\r\\n * Users can use this contract for optimize yield and gas.\\r\\n *\\r\\n *\\r\\n * @dev DSF is main contract.\\r\\n * Contract does not store user funds.\\r\\n * All user funds goes to Convex\\u0026Curve pools.\\r\\n *\\r\\n */\\r\\n\\r\\ncontract DSF is ERC20, Pausable, AccessControl {\\r\\n    using SafeERC20 for IERC20Metadata;\\r\\n\\r\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\u0027OPERATOR_ROLE\\u0027);\\r\\n\\r\\n    struct PendingWithdrawal {\\r\\n        uint256 lpShares;\\r\\n        uint256[3] tokenAmounts;\\r\\n    }\\r\\n\\r\\n    struct PoolInfo {\\r\\n        IStrategy strategy;\\r\\n        uint256 startTime;\\r\\n        uint256 lpShares;\\r\\n    }\\r\\n\\r\\n    uint8 public constant POOL_ASSETS = 3;\\r\\n    uint256 public constant LP_RATIO_MULTIPLIER = 1e18;\\r\\n    uint256 public constant FEE_DENOMINATOR = 1000;\\r\\n    uint256 public constant MIN_LOCK_TIME = 1 days;\\r\\n    uint256 public constant FUNDS_DENOMINATOR = 10_000;\\r\\n    uint8 public constant ALL_WITHDRAWAL_TYPES_MASK = uint8(3); // Binary 11 = 2^0 + 2^1;\\r\\n\\r\\n    PoolInfo[] internal _poolInfo;\\r\\n    uint256 public defaultDepositPid;\\r\\n    uint256 public defaultWithdrawPid;\\r\\n    uint8 public availableWithdrawalTypes;\\r\\n\\r\\n    address[POOL_ASSETS] public tokens;\\r\\n    uint256[POOL_ASSETS] public decimalsMultipliers;\\r\\n\\r\\n    mapping(address =\\u003e uint256[POOL_ASSETS]) internal _pendingDeposits;\\r\\n    mapping(address =\\u003e PendingWithdrawal) internal _pendingWithdrawals;\\r\\n\\r\\n    uint256 public totalDeposited = 0;\\r\\n    uint256 public managementFee = 100; // 10%\\r\\n    bool public launched = false;\\r\\n\\r\\n    event CreatedPendingDeposit(address indexed depositor, uint256[POOL_ASSETS] amounts);\\r\\n    event CreatedPendingWithdrawal(\\r\\n        address indexed withdrawer,\\r\\n        uint256 lpShares,\\r\\n        uint256[POOL_ASSETS] tokenAmounts\\r\\n    );\\r\\n    event Deposited(address indexed depositor, uint256[POOL_ASSETS] amounts, uint256 lpShares);\\r\\n    event Withdrawn(\\r\\n        address indexed withdrawer,\\r\\n        IStrategy.WithdrawalType withdrawalType,\\r\\n        uint256[POOL_ASSETS] tokenAmounts,\\r\\n        uint256 lpShares,\\r\\n        uint128 tokenIndex\\r\\n    );\\r\\n\\r\\n    event AddedPool(uint256 pid, address strategyAddr, uint256 startTime);\\r\\n    event FailedDeposit(address indexed depositor, uint256[POOL_ASSETS] amounts, uint256 lpShares);\\r\\n    event FailedWithdrawal(\\r\\n        address indexed withdrawer,\\r\\n        uint256[POOL_ASSETS] amounts,\\r\\n        uint256 lpShares\\r\\n    );\\r\\n    event SetDefaultDepositPid(uint256 pid);\\r\\n    event SetDefaultWithdrawPid(uint256 pid);\\r\\n    event ClaimedAllManagementFee(uint256 feeValue);\\r\\n    event AutoCompoundAll();\\r\\n\\r\\n    modifier startedPool() {\\r\\n        require(_poolInfo.length != 0, \\u0027DSF: pool not existed!\\u0027);\\r\\n        require(\\r\\n            block.timestamp \\u003e= _poolInfo[defaultDepositPid].startTime,\\r\\n            \\u0027DSF: default deposit pool not started yet!\\u0027\\r\\n        );\\r\\n        require(\\r\\n            block.timestamp \\u003e= _poolInfo[defaultWithdrawPid].startTime,\\r\\n            \\u0027DSF: default withdraw pool not started yet!\\u0027\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor(address[POOL_ASSETS] memory _tokens) ERC20(\\u0027DSFLP\\u0027, \\u0027DSFLP\\u0027) {\\r\\n        tokens = _tokens;\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        _setupRole(OPERATOR_ROLE, msg.sender);\\r\\n\\r\\n        for (uint256 i; i \\u003c POOL_ASSETS; i++) {\\r\\n            uint256 decimals = IERC20Metadata(tokens[i]).decimals();\\r\\n            if (decimals \\u003c 18) {\\r\\n                decimalsMultipliers[i] = 10**(18 - decimals);\\r\\n            } else {\\r\\n                decimalsMultipliers[i] = 1;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        availableWithdrawalTypes = ALL_WITHDRAWAL_TYPES_MASK;\\r\\n    }\\r\\n\\r\\n    function poolInfo(uint256 pid) external view returns (PoolInfo memory) {\\r\\n        return _poolInfo[pid];\\r\\n    }\\r\\n\\r\\n    function pendingDeposits(address user) external view returns (uint256[POOL_ASSETS] memory) {\\r\\n        return _pendingDeposits[user];\\r\\n    }\\r\\n\\r\\n    function pendingDepositsToken(address user, uint256 tokenIndex) external view returns (uint256) {\\r\\n        return _pendingDeposits[user][tokenIndex];\\r\\n    }\\r\\n\\r\\n    function pendingWithdrawals(address user) external view returns (PendingWithdrawal memory) {\\r\\n        return _pendingWithdrawals[user];\\r\\n    }\\r\\n\\r\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _pause();\\r\\n    }\\r\\n\\r\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _unpause();\\r\\n    }\\r\\n\\r\\n    function setAvailableWithdrawalTypes(uint8 newAvailableWithdrawalTypes)\\r\\n        external\\r\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\r\\n    {\\r\\n        require(\\r\\n            newAvailableWithdrawalTypes \\u003c= ALL_WITHDRAWAL_TYPES_MASK,\\r\\n            \\u0027DSF: wrong available withdrawal types\\u0027\\r\\n        );\\r\\n        availableWithdrawalTypes = newAvailableWithdrawalTypes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev update managementFee, this is a DSF commission from protocol profit\\r\\n     * @param  newManagementFee - minAmount 0, maxAmount FEE_DENOMINATOR - 1\\r\\n     */\\r\\n    function setManagementFee(uint256 newManagementFee) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(newManagementFee \\u003c FEE_DENOMINATOR, \\u0027DSF: wrong fee\\u0027);\\r\\n        managementFee = newManagementFee;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns managementFee for strategy\\u0027s when contract sell rewards\\r\\n     * @return Returns commission on the amount of profit in the transaction\\r\\n     * @param amount - amount of profit for calculate managementFee\\r\\n     */\\r\\n    function calcManagementFee(uint256 amount) external view returns (uint256) {\\r\\n        return (amount * managementFee) / FEE_DENOMINATOR;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Claims managementFee from all active strategies\\r\\n     */\\r\\n    function claimAllManagementFee() external {\\r\\n        uint256 feeTotalValue;\\r\\n        for (uint256 i = 0; i \\u003c _poolInfo.length; i++) {\\r\\n            feeTotalValue += _poolInfo[i].strategy.claimManagementFees();\\r\\n        }\\r\\n\\r\\n        emit ClaimedAllManagementFee(feeTotalValue);\\r\\n    }\\r\\n\\r\\n    function autoCompoundAll() external {\\r\\n        for (uint256 i = 0; i \\u003c _poolInfo.length; i++) {\\r\\n            _poolInfo[i].strategy.autoCompound();\\r\\n        }\\r\\n        emit AutoCompoundAll();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns total holdings for all pools (strategy\\u0027s)\\r\\n     * @return Returns sum holdings (USD) for all pools\\r\\n     */\\r\\n    function totalHoldings() public view returns (uint256) {\\r\\n        uint256 length = _poolInfo.length;\\r\\n        uint256 totalHold = 0;\\r\\n        for (uint256 pid = 0; pid \\u003c length; pid++) {\\r\\n            totalHold += _poolInfo[pid].strategy.totalHoldings();\\r\\n        }\\r\\n        return totalHold;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns price depends on the income of users\\r\\n     * @return Returns currently price of ZLP (1e18 = 1$)\\r\\n     */\\r\\n    function lpPrice() external view returns (uint256) {\\r\\n        return (totalHoldings() * 1e18) / totalSupply();\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns number of pools\\r\\n     * @return number of pools\\r\\n     */\\r\\n    function poolCount() external view returns (uint256) {\\r\\n        return _poolInfo.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev in this func user sends funds to the contract and then waits for the completion\\r\\n     * of the transaction for all users\\r\\n     * @param amounts - array of deposit amounts by user\\r\\n     */\\r\\n    function delegateDeposit(uint256[3] memory amounts) external whenNotPaused {\\r\\n        for (uint256 i = 0; i \\u003c amounts.length; i++) {\\r\\n            if (amounts[i] \\u003e 0) {\\r\\n                IERC20Metadata(tokens[i]).safeTransferFrom(_msgSender(), address(this), amounts[i]);\\r\\n                _pendingDeposits[_msgSender()][i] += amounts[i];\\r\\n            }\\r\\n        }\\r\\n\\r\\n        emit CreatedPendingDeposit(_msgSender(), amounts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev in this func user sends pending withdraw to the contract and then waits\\r\\n     * for the completion of the transaction for all users\\r\\n     * @param  lpShares - amount of ZLP for withdraw\\r\\n     * @param tokenAmounts - array of amounts stablecoins that user want minimum receive\\r\\n     */\\r\\n    function delegateWithdrawal(uint256 lpShares, uint256[POOL_ASSETS] memory tokenAmounts)\\r\\n        external\\r\\n        whenNotPaused\\r\\n    {\\r\\n        require(lpShares \\u003e 0, \\u0027DSF: lpAmount must be higher 0\\u0027);\\r\\n\\r\\n        PendingWithdrawal memory withdrawal;\\r\\n        address userAddr = _msgSender();\\r\\n\\r\\n        withdrawal.lpShares = lpShares;\\r\\n        withdrawal.tokenAmounts = tokenAmounts;\\r\\n\\r\\n        _pendingWithdrawals[userAddr] = withdrawal;\\r\\n\\r\\n        emit CreatedPendingWithdrawal(userAddr, lpShares, tokenAmounts);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev DSF protocol owner complete all active pending deposits of users\\r\\n     * @param userList - dev send array of users from pending to complete\\r\\n     */\\r\\n    function completeDeposits(address[] memory userList)\\r\\n        external\\r\\n        onlyRole(OPERATOR_ROLE)\\r\\n        startedPool\\r\\n    {\\r\\n        IStrategy strategy = _poolInfo[defaultDepositPid].strategy;\\r\\n        uint256 currentTotalHoldings = totalHoldings();\\r\\n\\r\\n        uint256 newHoldings = 0;\\r\\n        uint256[3] memory totalAmounts;\\r\\n        uint256[] memory userCompleteHoldings = new uint256[](userList.length);\\r\\n        for (uint256 i = 0; i \\u003c userList.length; i++) {\\r\\n            newHoldings = 0;\\r\\n\\r\\n            for (uint256 x = 0; x \\u003c totalAmounts.length; x++) {\\r\\n                uint256 userTokenDeposit = _pendingDeposits[userList[i]][x];\\r\\n                totalAmounts[x] += userTokenDeposit;\\r\\n                newHoldings += userTokenDeposit * decimalsMultipliers[x];\\r\\n            }\\r\\n            userCompleteHoldings[i] = newHoldings;\\r\\n        }\\r\\n\\r\\n        newHoldings = 0;\\r\\n        for (uint256 y = 0; y \\u003c POOL_ASSETS; y++) {\\r\\n            uint256 totalTokenAmount = totalAmounts[y];\\r\\n            if (totalTokenAmount \\u003e 0) {\\r\\n                newHoldings += totalTokenAmount * decimalsMultipliers[y];\\r\\n                IERC20Metadata(tokens[y]).safeTransfer(address(strategy), totalTokenAmount);\\r\\n            }\\r\\n        }\\r\\n        uint256 totalDepositedNow = strategy.deposit(totalAmounts);\\r\\n        require(totalDepositedNow \\u003e 0, \\u0027DSF: too low deposit!\\u0027);\\r\\n        uint256 lpShares = 0;\\r\\n        uint256 addedHoldings = 0;\\r\\n        uint256 userDeposited = 0;\\r\\n\\r\\n        for (uint256 z = 0; z \\u003c userList.length; z++) {\\r\\n            userDeposited = (totalDepositedNow * userCompleteHoldings[z]) / newHoldings;\\r\\n            address userAddr = userList[z];\\r\\n            if (totalSupply() == 0) {\\r\\n                lpShares = userDeposited;\\r\\n            } else {\\r\\n                lpShares = (totalSupply() * userDeposited) / (currentTotalHoldings + addedHoldings);\\r\\n            }\\r\\n            addedHoldings += userDeposited;\\r\\n            _mint(userAddr, lpShares);\\r\\n            _poolInfo[defaultDepositPid].lpShares += lpShares;\\r\\n            emit Deposited(userAddr, _pendingDeposits[userAddr], lpShares);\\r\\n\\r\\n            // remove deposit from list\\r\\n            delete _pendingDeposits[userAddr];\\r\\n        }\\r\\n        totalDeposited += addedHoldings;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev DSF protocol owner complete all active pending withdrawals of users\\r\\n     * @param userList - array of users from pending withdraw to complete\\r\\n     */\\r\\n    function completeWithdrawals(address[] memory userList)\\r\\n        external\\r\\n        onlyRole(OPERATOR_ROLE)\\r\\n        startedPool\\r\\n    {\\r\\n        require(userList.length \\u003e 0, \\u0027DSF: there are no pending withdrawals requests\\u0027);\\r\\n\\r\\n        IStrategy strategy = _poolInfo[defaultWithdrawPid].strategy;\\r\\n\\r\\n        address user;\\r\\n        PendingWithdrawal memory withdrawal;\\r\\n        for (uint256 i = 0; i \\u003c userList.length; i++) {\\r\\n            user = userList[i];\\r\\n            withdrawal = _pendingWithdrawals[user];\\r\\n\\r\\n            if (balanceOf(user) \\u003c withdrawal.lpShares) {\\r\\n                emit FailedWithdrawal(user, withdrawal.tokenAmounts, withdrawal.lpShares);\\r\\n                delete _pendingWithdrawals[user];\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            if (\\r\\n                !(\\r\\n                    strategy.withdraw(\\r\\n                        user,\\r\\n                        calcLpRatioSafe(\\r\\n                            withdrawal.lpShares,\\r\\n                            _poolInfo[defaultWithdrawPid].lpShares\\r\\n                        ),\\r\\n                        withdrawal.tokenAmounts,\\r\\n                        IStrategy.WithdrawalType.Base,\\r\\n                        0\\r\\n                    )\\r\\n                )\\r\\n            ) {\\r\\n                emit FailedWithdrawal(user, withdrawal.tokenAmounts, withdrawal.lpShares);\\r\\n                delete _pendingWithdrawals[user];\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            uint256 userDeposit = (totalDeposited * withdrawal.lpShares) / totalSupply();\\r\\n            _burn(user, withdrawal.lpShares);\\r\\n            _poolInfo[defaultWithdrawPid].lpShares -= withdrawal.lpShares;\\r\\n            totalDeposited -= userDeposit;\\r\\n\\r\\n            emit Withdrawn(\\r\\n                user,\\r\\n                IStrategy.WithdrawalType.Base,\\r\\n                withdrawal.tokenAmounts,\\r\\n                withdrawal.lpShares,\\r\\n                0\\r\\n            );\\r\\n            delete _pendingWithdrawals[user];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function calcLpRatioSafe(uint256 outLpShares, uint256 strategyLpShares)\\r\\n        internal\\r\\n        pure\\r\\n        returns (uint256 lpShareRatio)\\r\\n    {\\r\\n        lpShareRatio = (outLpShares * LP_RATIO_MULTIPLIER) / strategyLpShares;\\r\\n        require(\\r\\n            lpShareRatio \\u003e 0 \\u0026\\u0026 lpShareRatio \\u003c= LP_RATIO_MULTIPLIER,\\r\\n            \\u0027DSF: Wrong out lp Ratio\\u0027\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function completeWithdrawalsOptimized(address[] memory userList)\\r\\n        external\\r\\n        onlyRole(OPERATOR_ROLE)\\r\\n        startedPool\\r\\n    {\\r\\n        require(userList.length \\u003e 0, \\u0027DSF: there are no pending withdrawals requests\\u0027);\\r\\n\\r\\n        IStrategy strategy = _poolInfo[defaultWithdrawPid].strategy;\\r\\n\\r\\n        uint256 lpSharesTotal;\\r\\n        uint256[POOL_ASSETS] memory minAmountsTotal;\\r\\n\\r\\n        uint256 i;\\r\\n        address user;\\r\\n        PendingWithdrawal memory withdrawal;\\r\\n        for (i = 0; i \\u003c userList.length; i++) {\\r\\n            user = userList[i];\\r\\n            withdrawal = _pendingWithdrawals[user];\\r\\n\\r\\n            if (balanceOf(user) \\u003c withdrawal.lpShares) {\\r\\n                emit FailedWithdrawal(user, withdrawal.tokenAmounts, withdrawal.lpShares);\\r\\n                delete _pendingWithdrawals[user];\\r\\n                continue;\\r\\n            }\\r\\n\\r\\n            lpSharesTotal += withdrawal.lpShares;\\r\\n            minAmountsTotal[0] += withdrawal.tokenAmounts[0];\\r\\n            minAmountsTotal[1] += withdrawal.tokenAmounts[1];\\r\\n            minAmountsTotal[2] += withdrawal.tokenAmounts[2];\\r\\n\\r\\n            emit Withdrawn(\\r\\n                user,\\r\\n                IStrategy.WithdrawalType.Base,\\r\\n                withdrawal.tokenAmounts,\\r\\n                withdrawal.lpShares,\\r\\n                0\\r\\n            );\\r\\n        }\\r\\n\\r\\n        require(\\r\\n            lpSharesTotal \\u003c= _poolInfo[defaultWithdrawPid].lpShares,\\r\\n            \\u0027DSF: Insufficient pool LP shares\\u0027\\r\\n        );\\r\\n\\r\\n        uint256[POOL_ASSETS] memory prevBalances;\\r\\n        for (i = 0; i \\u003c 3; i++) {\\r\\n            prevBalances[i] = IERC20Metadata(tokens[i]).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        if (\\r\\n            !strategy.withdraw(\\r\\n                address(this),\\r\\n                calcLpRatioSafe(lpSharesTotal, _poolInfo[defaultWithdrawPid].lpShares),\\r\\n                minAmountsTotal,\\r\\n                IStrategy.WithdrawalType.Base,\\r\\n                0\\r\\n            )\\r\\n        ) {\\r\\n            for (i = 0; i \\u003c userList.length; i++) {\\r\\n                user = userList[i];\\r\\n                withdrawal = _pendingWithdrawals[user];\\r\\n\\r\\n                emit FailedWithdrawal(user, withdrawal.tokenAmounts, withdrawal.lpShares);\\r\\n                delete _pendingWithdrawals[user];\\r\\n            }\\r\\n            return;\\r\\n        }\\r\\n\\r\\n        uint256[POOL_ASSETS] memory diffBalances;\\r\\n        for (i = 0; i \\u003c 3; i++) {\\r\\n            diffBalances[i] = IERC20Metadata(tokens[i]).balanceOf(address(this)) - prevBalances[i];\\r\\n        }\\r\\n\\r\\n        for (i = 0; i \\u003c userList.length; i++) {\\r\\n            user = userList[i];\\r\\n            withdrawal = _pendingWithdrawals[user];\\r\\n\\r\\n            uint256 userDeposit = (totalDeposited * withdrawal.lpShares) / totalSupply();\\r\\n            _burn(user, withdrawal.lpShares);\\r\\n            _poolInfo[defaultWithdrawPid].lpShares -= withdrawal.lpShares;\\r\\n            totalDeposited -= userDeposit;\\r\\n\\r\\n            uint256 transferAmount;\\r\\n            for (uint256 j = 0; j \\u003c 3; j++) {\\r\\n                transferAmount = (diffBalances[j] * withdrawal.lpShares) / lpSharesTotal;\\r\\n                if(transferAmount \\u003e 0) {\\r\\n                    IERC20Metadata(tokens[j]).safeTransfer(\\r\\n                        user,\\r\\n                        transferAmount\\r\\n                    );\\r\\n                }\\r\\n            }\\r\\n\\r\\n            delete _pendingWithdrawals[user];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev deposit in one tx, without waiting complete by dev\\r\\n     * @return Returns amount of lpShares minted for user\\r\\n     * @param amounts - user send amounts of stablecoins to deposit\\r\\n     */\\r\\n    function deposit(uint256[POOL_ASSETS] memory amounts)\\r\\n        external\\r\\n        whenNotPaused\\r\\n        startedPool\\r\\n        returns (uint256)\\r\\n    {\\r\\n        IStrategy strategy = _poolInfo[defaultDepositPid].strategy;\\r\\n        uint256 holdings = totalHoldings();\\r\\n\\r\\n        for (uint256 i = 0; i \\u003c amounts.length; i++) {\\r\\n            if (amounts[i] \\u003e 0) {\\r\\n                IERC20Metadata(tokens[i]).safeTransferFrom(\\r\\n                    _msgSender(),\\r\\n                    address(strategy),\\r\\n                    amounts[i]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        uint256 newDeposited = strategy.deposit(amounts);\\r\\n        require(newDeposited \\u003e 0, \\u0027DSF: too low deposit!\\u0027);\\r\\n\\r\\n        uint256 lpShares = 0;\\r\\n        if (totalSupply() == 0) {\\r\\n            lpShares = newDeposited;\\r\\n        } else {\\r\\n            lpShares = (totalSupply() * newDeposited) / holdings;\\r\\n        }\\r\\n        _mint(_msgSender(), lpShares);\\r\\n        _poolInfo[defaultDepositPid].lpShares += lpShares;\\r\\n        totalDeposited += newDeposited;\\r\\n\\r\\n        emit Deposited(_msgSender(), amounts, lpShares);\\r\\n        return lpShares;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev withdraw in one tx, without waiting complete by dev\\r\\n     * @param lpShares - amount of ZLP for withdraw\\r\\n     * @param tokenAmounts -  array of amounts stablecoins that user want minimum receive\\r\\n     */\\r\\n    function withdraw(\\r\\n        uint256 lpShares,\\r\\n        uint256[POOL_ASSETS] memory tokenAmounts,\\r\\n        IStrategy.WithdrawalType withdrawalType,\\r\\n        uint128 tokenIndex\\r\\n    ) external whenNotPaused startedPool {\\r\\n        require(\\r\\n            checkBit(availableWithdrawalTypes, uint8(withdrawalType)),\\r\\n            \\u0027DSF: withdrawal type not available\\u0027\\r\\n        );\\r\\n        IStrategy strategy = _poolInfo[defaultWithdrawPid].strategy;\\r\\n        address userAddr = _msgSender();\\r\\n\\r\\n        require(balanceOf(userAddr) \\u003e= lpShares, \\u0027DSF: not enough LP balance\\u0027);\\r\\n        require(\\r\\n            strategy.withdraw(\\r\\n                userAddr,\\r\\n                calcLpRatioSafe(lpShares, _poolInfo[defaultWithdrawPid].lpShares),\\r\\n                tokenAmounts,\\r\\n                withdrawalType,\\r\\n                tokenIndex\\r\\n            ),\\r\\n            \\u0027DSF: incorrect withdraw params\\u0027\\r\\n        );\\r\\n\\r\\n        uint256 userDeposit = (totalDeposited * lpShares) / totalSupply();\\r\\n        _burn(userAddr, lpShares);\\r\\n        _poolInfo[defaultWithdrawPid].lpShares -= lpShares;\\r\\n\\r\\n        totalDeposited -= userDeposit;\\r\\n\\r\\n        emit Withdrawn(userAddr, withdrawalType, tokenAmounts, lpShares, tokenIndex);\\r\\n    }\\r\\n\\r\\n    function calcWithdrawOneCoin(uint256 lpShares, uint128 tokenIndex)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 tokenAmount)\\r\\n    {\\r\\n        require(lpShares \\u003c= balanceOf(_msgSender()), \\u0027DSF: not enough LP balance\\u0027);\\r\\n\\r\\n        uint256 lpShareRatio = calcLpRatioSafe(lpShares, _poolInfo[defaultWithdrawPid].lpShares);\\r\\n        return _poolInfo[defaultWithdrawPid].strategy.calcWithdrawOneCoin(lpShareRatio, tokenIndex);\\r\\n    }\\r\\n\\r\\n    function calcSharesAmount(uint256[3] memory tokenAmounts, bool isDeposit)\\r\\n        external\\r\\n        view\\r\\n        returns (uint256 lpShares)\\r\\n    {\\r\\n        return _poolInfo[defaultWithdrawPid].strategy.calcSharesAmount(tokenAmounts, isDeposit);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev add a new pool, deposits in the new pool are blocked for one day for safety\\r\\n     * @param _strategyAddr - the new pool strategy address\\r\\n     */\\r\\n\\r\\n    function addPool(address _strategyAddr) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(_strategyAddr != address(0), \\u0027DSF: zero strategy addr\\u0027);\\r\\n        uint256 startTime = block.timestamp + (launched ? MIN_LOCK_TIME : 0);\\r\\n        _poolInfo.push(\\r\\n            PoolInfo({ strategy: IStrategy(_strategyAddr), startTime: startTime, lpShares: 0 })\\r\\n        );\\r\\n        emit AddedPool(_poolInfo.length - 1, _strategyAddr, startTime);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set a default pool for deposit funds\\r\\n     * @param _newPoolId - new pool id\\r\\n     */\\r\\n    function setDefaultDepositPid(uint256 _newPoolId) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(_newPoolId \\u003c _poolInfo.length, \\u0027DSF: incorrect default deposit pool id\\u0027);\\r\\n\\r\\n        defaultDepositPid = _newPoolId;\\r\\n        emit SetDefaultDepositPid(_newPoolId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev set a default pool for withdraw funds\\r\\n     * @param _newPoolId - new pool id\\r\\n     */\\r\\n    function setDefaultWithdrawPid(uint256 _newPoolId) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(_newPoolId \\u003c _poolInfo.length, \\u0027DSF: incorrect default withdraw pool id\\u0027);\\r\\n\\r\\n        defaultWithdrawPid = _newPoolId;\\r\\n        emit SetDefaultWithdrawPid(_newPoolId);\\r\\n    }\\r\\n\\r\\n    function launch() external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        launched = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev dev can transfer funds from few strategy\\u0027s to one strategy for better APY\\r\\n     * @param _strategies - array of strategy\\u0027s, from which funds are withdrawn\\r\\n     * @param withdrawalsPercents - A percentage of the funds that should be transfered\\r\\n     * @param _receiverStrategyId - number strategy, to which funds are deposited\\r\\n     */\\r\\n    function moveFundsBatch(\\r\\n        uint256[] memory _strategies,\\r\\n        uint256[] memory withdrawalsPercents,\\r\\n        uint256 _receiverStrategyId\\r\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        require(\\r\\n            _strategies.length == withdrawalsPercents.length,\\r\\n            \\u0027DSF: incorrect arguments for the moveFundsBatch\\u0027\\r\\n        );\\r\\n        require(_receiverStrategyId \\u003c _poolInfo.length, \\u0027DSF: incorrect a reciver strategy ID\\u0027);\\r\\n\\r\\n        uint256[POOL_ASSETS] memory tokenBalance;\\r\\n        for (uint256 y = 0; y \\u003c POOL_ASSETS; y++) {\\r\\n            tokenBalance[y] = IERC20Metadata(tokens[y]).balanceOf(address(this));\\r\\n        }\\r\\n\\r\\n        uint256 pid;\\r\\n        uint256 DSFLp;\\r\\n        for (uint256 i = 0; i \\u003c _strategies.length; i++) {\\r\\n            pid = _strategies[i];\\r\\n            DSFLp += _moveFunds(pid, withdrawalsPercents[i]);\\r\\n        }\\r\\n\\r\\n        uint256[POOL_ASSETS] memory tokensRemainder;\\r\\n        for (uint256 y = 0; y \\u003c POOL_ASSETS; y++) {\\r\\n            tokensRemainder[y] =\\r\\n                IERC20Metadata(tokens[y]).balanceOf(address(this)) -\\r\\n                tokenBalance[y];\\r\\n            if (tokensRemainder[y] \\u003e 0) {\\r\\n                IERC20Metadata(tokens[y]).safeTransfer(\\r\\n                    address(_poolInfo[_receiverStrategyId].strategy),\\r\\n                    tokensRemainder[y]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n\\r\\n        _poolInfo[_receiverStrategyId].lpShares += DSFLp;\\r\\n\\r\\n        require(\\r\\n            _poolInfo[_receiverStrategyId].strategy.deposit(tokensRemainder) \\u003e 0,\\r\\n            \\u0027DSF: Too low amount!\\u0027\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function _moveFunds(uint256 pid, uint256 withdrawAmount) private returns (uint256) {\\r\\n        uint256 currentLpAmount;\\r\\n\\r\\n        if (withdrawAmount == FUNDS_DENOMINATOR) {\\r\\n            _poolInfo[pid].strategy.withdrawAll();\\r\\n\\r\\n            currentLpAmount = _poolInfo[pid].lpShares;\\r\\n            _poolInfo[pid].lpShares = 0;\\r\\n        } else {\\r\\n            currentLpAmount = (_poolInfo[pid].lpShares * withdrawAmount) / FUNDS_DENOMINATOR;\\r\\n            uint256[POOL_ASSETS] memory minAmounts;\\r\\n\\r\\n            _poolInfo[pid].strategy.withdraw(\\r\\n                address(this),\\r\\n                calcLpRatioSafe(currentLpAmount, _poolInfo[pid].lpShares),\\r\\n                minAmounts,\\r\\n                IStrategy.WithdrawalType.Base,\\r\\n                0\\r\\n            );\\r\\n            _poolInfo[pid].lpShares = _poolInfo[pid].lpShares - currentLpAmount;\\r\\n        }\\r\\n\\r\\n        return currentLpAmount;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev user remove his active pending deposit\\r\\n     */\\r\\n    function removePendingDeposit() external {\\r\\n        for (uint256 i = 0; i \\u003c POOL_ASSETS; i++) {\\r\\n            if (_pendingDeposits[_msgSender()][i] \\u003e 0) {\\r\\n                IERC20Metadata(tokens[i]).safeTransfer(\\r\\n                    _msgSender(),\\r\\n                    _pendingDeposits[_msgSender()][i]\\r\\n                );\\r\\n            }\\r\\n        }\\r\\n        delete _pendingDeposits[_msgSender()];\\r\\n    }\\r\\n\\r\\n    function removePendingWithdrawal() external {\\r\\n        delete _pendingWithdrawals[_msgSender()];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev governance can withdraw all stuck funds in emergency case\\r\\n     * @param _token - IERC20Metadata token that should be fully withdraw from DSF\\r\\n     */\\r\\n    function withdrawStuckToken(IERC20Metadata _token) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        uint256 tokenBalance = _token.balanceOf(address(this));\\r\\n        if(tokenBalance \\u003e 0) {\\r\\n            _token.safeTransfer(_msgSender(), tokenBalance);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev governance can add new operator for complete pending deposits and withdrawals\\r\\n     * @param _newOperator - address that governance add in list of operators\\r\\n     */\\r\\n    function updateOperator(address _newOperator) external onlyRole(DEFAULT_ADMIN_ROLE) {\\r\\n        _grantRole(OPERATOR_ROLE, _newOperator);\\r\\n    }\\r\\n\\r\\n    // Get bit value at position\\r\\n    function checkBit(uint8 mask, uint8 bit) internal pure returns (bool) {\\r\\n        return mask \\u0026 (0x01 \\u003c\\u003c bit) != 0;\\r\\n    }\\r\\n}\"},\"ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC165.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\"},\"ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./IERC20Metadata.sol\\\";\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC20} interface.\\r\\n *\\r\\n * This implementation is agnostic to the way tokens are created. This means\\r\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\r\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\r\\n *\\r\\n * TIP: For a detailed writeup see our guide\\r\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\r\\n * to implement supply mechanisms].\\r\\n *\\r\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\r\\n * instead returning `false` on failure. This behavior is nonetheless\\r\\n * conventional and does not conflict with the expectations of ERC20\\r\\n * applications.\\r\\n *\\r\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\r\\n * This allows applications to reconstruct the allowance for all accounts just\\r\\n * by listening to said events. Other implementations of the EIP may not emit\\r\\n * these events, as it isn\\u0027t required by the specification.\\r\\n *\\r\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\r\\n * functions have been added to mitigate the well-known issues around setting\\r\\n * allowances. See {IERC20-approve}.\\r\\n */\\r\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\r\\n    mapping(address =\\u003e uint256) private _balances;\\r\\n\\r\\n    mapping(address =\\u003e mapping(address =\\u003e uint256)) private _allowances;\\r\\n\\r\\n    uint256 private _totalSupply;\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n\\r\\n    /**\\r\\n     * @dev Sets the values for {name} and {symbol}.\\r\\n     *\\r\\n     * The default value of {decimals} is 18. To select a different value for\\r\\n     * {decimals} you should overload it.\\r\\n     *\\r\\n     * All two of these values are immutable: they can only be set once during\\r\\n     * construction.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\r\\n     * name.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of decimals used to get its user representation.\\r\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\r\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\r\\n     *\\r\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\r\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\r\\n     * overridden;\\r\\n     *\\r\\n     * NOTE: This information is only used for _display_ purposes: it in\\r\\n     * no way affects any of the arithmetic of the contract, including\\r\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\r\\n     */\\r\\n    function decimals() public view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transfer}.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - the caller must have a balance of at least `amount`.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-allowance}.\\r\\n     */\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-approve}.\\r\\n     *\\r\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\r\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC20-transferFrom}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\r\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\r\\n     *\\r\\n     * NOTE: Does not update the allowance if the current allowance\\r\\n     * is the maximum `uint256`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` and `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     * - the caller must have allowance for ``from``\\u0027s tokens of at least\\r\\n     * `amount`.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) public virtual override returns (bool) {\\r\\n        address spender = _msgSender();\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\r\\n     *\\r\\n     * This is an alternative to {approve} that can be used as a mitigation for\\r\\n     * problems described in {IERC20-approve}.\\r\\n     *\\r\\n     * Emits an {Approval} event indicating the updated allowance.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `spender` cannot be the zero address.\\r\\n     * - `spender` must have allowance for the caller of at least\\r\\n     * `subtractedValue`.\\r\\n     */\\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\r\\n        address owner = _msgSender();\\r\\n        uint256 currentAllowance = _allowances[owner][spender];\\r\\n        require(currentAllowance \\u003e= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\r\\n     *\\r\\n     * This internal function is equivalent to {transfer}, and can be used to\\r\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `from` must have a balance of at least `amount`.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, amount);\\r\\n\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance \\u003e= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n        }\\r\\n        _balances[to] += amount;\\r\\n\\r\\n        emit Transfer(from, to, amount);\\r\\n\\r\\n        _afterTokenTransfer(from, to, amount);\\r\\n    }\\r\\n\\r\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\r\\n     * the total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `from` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     */\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), account, amount);\\r\\n\\r\\n        _totalSupply += amount;\\r\\n        _balances[account] += amount;\\r\\n        emit Transfer(address(0), account, amount);\\r\\n\\r\\n        _afterTokenTransfer(address(0), account, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\r\\n     * total supply.\\r\\n     *\\r\\n     * Emits a {Transfer} event with `to` set to the zero address.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `account` cannot be the zero address.\\r\\n     * - `account` must have at least `amount` tokens.\\r\\n     */\\r\\n    function _burn(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(account, address(0), amount);\\r\\n\\r\\n        uint256 accountBalance = _balances[account];\\r\\n        require(accountBalance \\u003e= amount, \\\"ERC20: burn amount exceeds balance\\\");\\r\\n        unchecked {\\r\\n            _balances[account] = accountBalance - amount;\\r\\n        }\\r\\n        _totalSupply -= amount;\\r\\n\\r\\n        emit Transfer(account, address(0), amount);\\r\\n\\r\\n        _afterTokenTransfer(account, address(0), amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\r\\n     *\\r\\n     * This internal function is equivalent to `approve`, and can be used to\\r\\n     * e.g. set automatic allowances for certain subsystems, etc.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `owner` cannot be the zero address.\\r\\n     * - `spender` cannot be the zero address.\\r\\n     */\\r\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\r\\n     *\\r\\n     * Does not update the allowance amount in case of infinite allowance.\\r\\n     * Revert if not enough allowance is available.\\r\\n     *\\r\\n     * Might emit an {Approval} event.\\r\\n     */\\r\\n    function _spendAllowance(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance \\u003e= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * will be transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called after any transfer of tokens. This includes\\r\\n     * minting and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``\\u0027s tokens\\r\\n     * has been transferred to `to`.\\r\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\r\\n     * - when `to` is zero, `amount` of ``from``\\u0027s tokens have been burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _afterTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) internal virtual {}\\r\\n}\"},\"IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\r\\n */\\r\\ninterface IAccessControl {\\r\\n    /**\\r\\n     * @dev Emitted when `newAdminRole` is set as ``role``\\u0027s admin role, replacing `previousAdminRole`\\r\\n     *\\r\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\r\\n     * {RoleAdminChanged} not being emitted signaling this.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is granted `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call, an admin role\\r\\n     * bearer except when using {AccessControl-_setupRole}.\\r\\n     */\\r\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `account` is revoked `role`.\\r\\n     *\\r\\n     * `sender` is the account that originated the contract call:\\r\\n     *   - if using `revokeRole`, it is the admin role bearer\\r\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\r\\n     */\\r\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns `true` if `account` has been granted `role`.\\r\\n     */\\r\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\r\\n     * {revokeRole}.\\r\\n     *\\r\\n     * To change a role\\u0027s admin, use {AccessControl-_setRoleAdmin}.\\r\\n     */\\r\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * @dev Grants `role` to `account`.\\r\\n     *\\r\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function grantRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from `account`.\\r\\n     *\\r\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must have ``role``\\u0027s admin role.\\r\\n     */\\r\\n    function revokeRole(bytes32 role, address account) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Revokes `role` from the calling account.\\r\\n     *\\r\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function\\u0027s\\r\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\r\\n     * if they are compromised (such as when a trusted device is misplaced).\\r\\n     *\\r\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\r\\n     * event.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the caller must be `account`.\\r\\n     */\\r\\n    function renounceRole(bytes32 role, address account) external;\\r\\n}\"},\"IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\"},\"IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens in existence.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the amount of tokens owned by `account`.\\r\\n     */\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from the caller\\u0027s account to `to`.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remaining number of tokens that `spender` will be\\r\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\r\\n     * zero by default.\\r\\n     *\\r\\n     * This value changes when {approve} or {transferFrom} are called.\\r\\n     */\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Sets `amount` as the allowance of `spender` over the caller\\u0027s tokens.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\r\\n     * that someone may use both the old and the new allowance by unfortunate\\r\\n     * transaction ordering. One possible solution to mitigate this race\\r\\n     * condition is to first reduce the spender\\u0027s allowance to 0 and set the\\r\\n     * desired value afterwards:\\r\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\r\\n     * allowance mechanism. `amount` is then deducted from the caller\\u0027s\\r\\n     * allowance.\\r\\n     *\\r\\n     * Returns a boolean value indicating whether the operation succeeded.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 amount\\r\\n    ) external returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\r\\n     * another (`to`).\\r\\n     *\\r\\n     * Note that `value` may be zero.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\r\\n     * a call to {approve}. `value` is the new allowance.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\"},\"IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\r\\n *\\r\\n * _Available since v4.1._\\r\\n */\\r\\ninterface IERC20Metadata is IERC20 {\\r\\n    /**\\r\\n     * @dev Returns the name of the token.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the symbol of the token.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the decimals places of the token.\\r\\n     */\\r\\n    function decimals() external view returns (uint8);\\r\\n}\"},\"IStrategy.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IStrategy {\\r\\n    enum WithdrawalType { Base, OneCoin }\\r\\n\\r\\n    function deposit(uint256[3] memory amounts) external returns (uint256);\\r\\n\\r\\n    function withdraw(\\r\\n        address withdrawer,\\r\\n        uint256 userRatioOfCrvLps, // multiplied by 1e18\\r\\n        uint256[3] memory tokenAmounts,\\r\\n        WithdrawalType withdrawalType,\\r\\n        uint128 tokenIndex\\r\\n    ) external returns (bool);\\r\\n\\r\\n    function withdrawAll() external;\\r\\n\\r\\n    function totalHoldings() external view returns (uint256);\\r\\n\\r\\n    function claimManagementFees() external returns (uint256);\\r\\n\\r\\n    function autoCompound() external;\\r\\n\\r\\n    function calcWithdrawOneCoin(\\r\\n        uint256 userRatioOfCrvLps,\\r\\n        uint128 tokenIndex\\r\\n    ) external view returns(uint256 tokenAmount);\\r\\n\\r\\n    function calcSharesAmount(\\r\\n        uint256[3] memory tokenAmounts,\\r\\n        bool isDeposit\\r\\n    ) external view returns(uint256 sharesAmount);\\r\\n}\"},\"Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./Context.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\"},\"SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./IERC20.sol\\\";\\r\\nimport \\\"./Address.sol\\\";\\r\\n\\r\\n/**\\r\\n * @title SafeERC20\\r\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\r\\n * contract returns false). Tokens that return no value (and instead revert or\\r\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\r\\n * successful.\\r\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\r\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\r\\n */\\r\\nlibrary SafeERC20 {\\r\\n    using Address for address;\\r\\n\\r\\n    function safeTransfer(\\r\\n        IERC20 token,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        IERC20 token,\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Deprecated. This function has issues similar to the ones found in\\r\\n     * {IERC20-approve}, and its usage is discouraged.\\r\\n     *\\r\\n     * Whenever possible, use {safeIncreaseAllowance} and\\r\\n     * {safeDecreaseAllowance} instead.\\r\\n     */\\r\\n    function safeApprove(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        // safeApprove should only be called when setting an initial allowance,\\r\\n        // or when resetting it to zero. To increase and decrease it, use\\r\\n        // \\u0027safeIncreaseAllowance\\u0027 and \\u0027safeDecreaseAllowance\\u0027\\r\\n        require(\\r\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\r\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\r\\n        );\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\r\\n    }\\r\\n\\r\\n    function safeIncreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\r\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n    }\\r\\n\\r\\n    function safeDecreaseAllowance(\\r\\n        IERC20 token,\\r\\n        address spender,\\r\\n        uint256 value\\r\\n    ) internal {\\r\\n        unchecked {\\r\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\r\\n            require(oldAllowance \\u003e= value, \\\"SafeERC20: decreased allowance below zero\\\");\\r\\n            uint256 newAllowance = oldAllowance - value;\\r\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\r\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\r\\n     * @param token The token targeted by the call.\\r\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\r\\n     */\\r\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\r\\n        // We need to perform a low level call here, to bypass Solidity\\u0027s return data size checking mechanism, since\\r\\n        // we\\u0027re implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\r\\n        // the target address contains contract code and also asserts for success in the low-level call.\\r\\n\\r\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\r\\n        if (returndata.length \\u003e 0) {\\r\\n            // Return data is optional\\r\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\r\\n        }\\r\\n    }\\r\\n}\"},\"Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI\\u0027s implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp \\u003e\\u003e= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i \\u003e 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value \\u0026 0xf];\\r\\n            value \\u003e\\u003e= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\"}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address[3]\",\"name\":\"_tokens\",\"type\":\"address[3]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategyAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"}],\"name\":\"AddedPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"AutoCompoundAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeValue\",\"type\":\"uint256\"}],\"name\":\"ClaimedAllManagementFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"CreatedPendingDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[3]\"}],\"name\":\"CreatedPendingWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"}],\"name\":\"FailedDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"}],\"name\":\"FailedWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"SetDefaultDepositPid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"SetDefaultWithdrawPid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"withdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum IStrategy.WithdrawalType\",\"name\":\"withdrawalType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256[3]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[3]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"tokenIndex\",\"type\":\"uint128\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ALL_WITHDRAWAL_TYPES_MASK\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEE_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FUNDS_DENOMINATOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LP_RATIO_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MIN_LOCK_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POOL_ASSETS\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategyAddr\",\"type\":\"address\"}],\"name\":\"addPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"autoCompoundAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableWithdrawalTypes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calcManagementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool\",\"name\":\"isDeposit\",\"type\":\"bool\"}],\"name\":\"calcSharesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"tokenIndex\",\"type\":\"uint128\"}],\"name\":\"calcWithdrawOneCoin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAllManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"}],\"name\":\"completeDeposits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"}],\"name\":\"completeWithdrawals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"userList\",\"type\":\"address[]\"}],\"name\":\"completeWithdrawalsOptimized\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"decimalsMultipliers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultDepositPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultWithdrawPid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"delegateDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[3]\"}],\"name\":\"delegateWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"amounts\",\"type\":\"uint256[3]\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"managementFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_strategies\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"withdrawalsPercents\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_receiverStrategyId\",\"type\":\"uint256\"}],\"name\":\"moveFundsBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingDeposits\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenIndex\",\"type\":\"uint256\"}],\"name\":\"pendingDepositsToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"pendingWithdrawals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[3]\"}],\"internalType\":\"struct DSF.PendingWithdrawal\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"}],\"internalType\":\"struct DSF.PoolInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removePendingDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removePendingWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"newAvailableWithdrawalTypes\",\"type\":\"uint8\"}],\"name\":\"setAvailableWithdrawalTypes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPoolId\",\"type\":\"uint256\"}],\"name\":\"setDefaultDepositPid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPoolId\",\"type\":\"uint256\"}],\"name\":\"setDefaultWithdrawPid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newManagementFee\",\"type\":\"uint256\"}],\"name\":\"setManagementFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalHoldings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOperator\",\"type\":\"address\"}],\"name\":\"updateOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lpShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256[3]\",\"name\":\"tokenAmounts\",\"type\":\"uint256[3]\"},{\"internalType\":\"enum IStrategy.WithdrawalType\",\"name\":\"withdrawalType\",\"type\":\"uint8\"},{\"internalType\":\"uint128\",\"name\":\"tokenIndex\",\"type\":\"uint128\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20Metadata\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"withdrawStuckToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "DSF", "CompilerVersion": "v0.8.15+commit.e14f2714", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000006b175474e89094c44da98b954eedeac495271d0f000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8e733684a203f4709c2f7704c952d9bf1d173b70c443d4f5327813dd34be003f"}