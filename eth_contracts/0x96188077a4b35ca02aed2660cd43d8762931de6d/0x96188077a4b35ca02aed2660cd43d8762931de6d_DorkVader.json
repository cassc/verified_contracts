{"SourceCode": "/*\r\nDork Vader\r\nGather \u2019round meme enthusiasts! From the imaginative galaxy of Matt Furie, \r\nemerges the meme masterpiece that\u2019s about to blow up the memeverse: Dork Vader.\r\n\r\nSome memecoins had their fleeting moments of glory and then rusted away. However, here stands \u15eaO\u1587K \u142f\u15e9\u15eaE\u1587 \u2013 unyielding, invincible, and always shining,just like Iron Man. \r\nWhile others might bend and break, Dork Vader is built to last, designed to reign supreme in the meme world. No rust, just robust meme magic!\r\n\r\n$$$$$$$\\   $$$$$$\\  $$$$$$$\\  $$\\   $$\\       $$\\    $$\\  $$$$$$\\  $$$$$$$\\  $$$$$$$$\\ $$$$$$$\\  \r\n$$  __$$\\ $$  __$$\\ $$  __$$\\ $$ | $$  |      $$ |   $$ |$$  __$$\\ $$  __$$\\ $$  _____|$$  __$$\\ \r\n$$ |  $$ |$$ /  $$ |$$ |  $$ |$$ |$$  /       $$ |   $$ |$$ /  $$ |$$ |  $$ |$$ |      $$ |  $$ |\r\n$$ |  $$ |$$ |  $$ |$$$$$$$  |$$$$$  /        \\$$\\  $$  |$$$$$$$$ |$$ |  $$ |$$$$$\\    $$$$$$$  |\r\n$$ |  $$ |$$ |  $$ |$$  __$$< $$  $$<          \\$$\\$$  / $$  __$$ |$$ |  $$ |$$  __|   $$  __$$< \r\n$$ |  $$ |$$ |  $$ |$$ |  $$ |$$ |\\$$\\          \\$$$  /  $$ |  $$ |$$ |  $$ |$$ |      $$ |  $$ |\r\n$$$$$$$  | $$$$$$  |$$ |  $$ |$$ | \\$$\\          \\$  /   $$ |  $$ |$$$$$$$  |$$$$$$$$\\ $$ |  $$ |\r\n\\_______/  \\______/ \\__|  \\__|\\__|  \\__|          \\_/    \\__|  \\__|\\_______/ \\________|\\__|  \\__|\r\n\r\n\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@&#G5J7!^:..      ..:^!7J5G#&@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@#PJ!^.        ...^~^::::      .^!JP#@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@#P?^.    .^~!?JY555YJ5G#BGGG5Y?!^:.    .^?P#@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@&5!.    .~7J5PPGGBBBGJ77!^~P#GPPPG55YJ?~:     .!5&@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@G7.     :7J55PPPPPPPPPY?YYY?::BBYJ?JY!7J55J7~:     :7G@@@@@@@@@@@@@\r\n@@@@@@@@@@@P~      .!J5555P55YYY555YYYYJJ?.J#J~~^5??77J55?7!:      ~P@@@@@@@@@@@\r\n@@@@@@@@@G~       .7J5555YJJJYY5PPPYYYJJ?J!7#Y:^:J!!?J77YGY!7~       ~G@@@@@@@@@\r\n@@@@@@@#7        .?J555Y?JYJ7^~7Y55YJJJ?7?J7BP^^^J?~^~JJ?YGY~?~        7#@@@@@@@\r\n@@@@@@P:         7JPP5?755YJ!~!J555YJYY7!?J?BG~!~JY77~~JJJ5P7^J.        :P@@@@@@\r\n@@@@@J          .JYPP?YG5YYJ!^~J5PPYYYJ!!7JJBG77!JY7??!7JJ5GJ~!!          J@@@@@\r\n@@@@?           ^YPP?Y#G5555YY5PPGGP55Y???Y5#P!!!YJ77???YYPGJ~^J           ?@@@@\r\n@@@J            ~YG5JBGPYJ??J5PGPPPY7!~~!!?5BP7??PJJY5YJ??YGPJ!Y            J@@@\r\n@@P             ^5YY5G5J!!!?J5PGGGGPYJ77!~!!JPPP5GGGPY?7!!75P57?^            P@@\r\n@&:             ?~?Y555YY55P5PGGG5YYJJ7?YPP5Y55PPPP555YYJ?YG#BJ!Y            :&@\r\n@Y              Y77???J5P5YYPGP55Y55P55P5555GPPPPGP5P55P5YYYPB#G57            Y@\r\n@^             !7!77?5P5J?PGBP5J777P#Y55JJJYG75JPGJP5JJYBYJJ55G&BY7           ^@\r\nB.            !!~??5P55?Y#P55YYJ!~~75P55P55PJ?5PYG55555PP7~^~J&###Y!          .B\r\nP            ~7!?JPPY57YPB##BBPP5YYJJY55555Y55JYGP55PP5Y???JYB#####J~          P\r\n5           ^7!J5P5YY!55??JPGGGGGGGGPPPPGGGG5J?~J#BGPPPPPPGGPB######?^         5\r\nP          :?~J5P55J~P5YYJJJJJJYY555PP55YJ???JY?~P55PPPP55YJ??YB&##&G?^        P\r\n#.        .?~JPPY5J^P5P5YYYYYYYYYYYYJJJ??????JJJ7?J????77777JY5PYG&#&G?^      .#\r\n@~        7!JPPYYJ:5GGPJYBBB55P5YYYYYYYY555555555YY5555YYY5YYYJJYP&##&G?^     ~@\r\n@P       7!?PP5Y5:YBPGGYYG#BJY&##Y5#BB55GPP55555YY5555555555PGPYG&####&P?:    P@\r\n@@~     ^?7PP5J5^7GBBGGGG5Y5YYBBBJY&&#JY&&#JY&&&YY&#&YJ##&Y?#&#Y?B#####&5?.  ~@@\r\n@@#.   .?!5PP5P~!&5YGBGGGBGPPP555YY555JYPGGYYGBBJYBBBJJBBBYJGG5J5#######&Y? .#@@\r\n@@@G.  7!JPGGB#G#&&#PP5PGGGGBGGPGGGGGPPPPP5P555555YYY555555P5PGB########&#5JP@@@\r\n@@@@P..YJ5G###&&&&&&&&#5JPGPPGBGG55PP5YYY555PPPPPPGGPGBBBGGGB&&######&&#BP5B@@@@\r\n@@@@@G~Y?&&&&&&##&&&&&B&7!GPPPPPBBBPYP5J?7!7??J???????Y55PB#####&&##BGPY!~G@@@@@\r\n@@@@@@#?~?5PGB#&&&BGG#PB5^YGPP55PGB#B55PJ?7!!????????J5B#&&###BBP5J?!^. !#@@@@@@\r\n@@@@@@@@5: .~JGGBBYPB#PYBY!GPP5P5GGB#&55PY?7!!??????JBY5B###BG5?!^.   :P@@@@@@@@\r\n@@@@@@@@@&YY5JYP#57BG#5JYBY5BGP5PGGBB#&JPPJ?!!!???J?GBPYJ55GBBGP5Y!.:J&@@@@@@@@@\r\n@@@@@@@@@@@@BJYG&Y?BPBGYJ?GBBGGPPPGGB#&Y5PPY?77?JJJ?B#BGPP5555G#G5P5&@@@@@@@@@@@\r\n@@@@@@@@@@@@@@##&YJB5G#5Y?7PB5J???7!!7?JYY55YJJJJJJYGBGGBBGGPPPB&B@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@BP#55BGYYJ7YBB5Y??!~!7??J55YJ7!~^~7??JJYY555G#&@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@#GG#PYYY7JG#BP5YYJJYYPPP5YJ??7!7??JJYPB#@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@&BGP5?JP##&##BBBBBBBBBBBBBBBB#&&&@@@@@@@@@@@@@@@@@@@@@@@\r\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&###&@&#BGGGGGGGGB#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\r\n\r\n\r\nhttps://dorkvader.cc\r\nhttps://t.me/DorkVaderOfficialPortal\r\nhttps://twitter.com/DorkVaderToken\r\n\r\nLocked Liquidity \r\nRenounced Contract\r\n\r\n*/\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.20;\r\n\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n        return c;\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n        return c;\r\n    }\r\n\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n        return c;\r\n    }\r\n\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        return c;\r\n    }\r\n\r\n}\r\n\r\ncontract Ownable is Context {\r\n    address private _owner;\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor () {\r\n        address msgSender = _msgSender();\r\n        _owner = msgSender;\r\n        emit OwnershipTransferred(address(0), msgSender);\r\n    }\r\n\r\n    function owner() public view returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\r\n        _;\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        emit OwnershipTransferred(_owner, address(0));\r\n        _owner = address(0);\r\n    }\r\n\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IUniswapV2Router02 {\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n}\r\n\r\ncontract DorkVader is Context, IERC20, Ownable {\r\n    using SafeMath for uint256;\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => bool) private _isExcludedFromFee;\r\n    mapping (address => bool) private bots;\r\n    mapping(address => uint256) private _holderLastTransferTimestamp;\r\n    bool public transferDelayEnabled = false;\r\n    address payable private _taxWallet;\r\n\r\n    uint256 private _initialBuyTax=16;\r\n    uint256 private _initialSellTax=42;\r\n    uint256 private _finalBuyTax=1;\r\n    uint256 private _finalSellTax=1;\r\n    uint256 private _reduceBuyTaxAt=50;\r\n    uint256 private _reduceSellTaxAt=50;\r\n    uint256 private _preventSwapBefore=4;\r\n    uint256 private _buyCount=0;\r\n\r\n    uint8 private constant _decimals = 8;\r\n    uint256 private constant _tTotal = 1000000000000 * 10**_decimals;\r\n    string private constant _name = unicode\"DorkVader\";\r\n    string private constant _symbol = unicode\"DORKV\";\r\n    uint256 public _maxTxAmount =   10000000000 * 10**_decimals;\r\n    uint256 public _maxWalletSize = 20000000000 * 10**_decimals;\r\n    uint256 public _taxSwapThreshold=50 * 10**_decimals;\r\n    uint256 public _maxTaxSwap= 20000000000 * 10**_decimals;\r\n\r\n    IUniswapV2Router02 private uniswapV2Router;\r\n    address private uniswapV2Pair;\r\n    bool private tradingOpen;\r\n    bool private inSwap = false;\r\n    bool private swapEnabled = false;\r\n\r\n    event MaxTxAmountUpdated(uint _maxTxAmount);\r\n    modifier lockTheSwap {\r\n        inSwap = true;\r\n        _;\r\n        inSwap = false;\r\n    }\r\n\r\n    constructor () {\r\n        _taxWallet = payable(_msgSender());\r\n        _balances[_msgSender()] = _tTotal;\r\n        _isExcludedFromFee[owner()] = true;\r\n        _isExcludedFromFee[address(this)] = true;\r\n        _isExcludedFromFee[_taxWallet] = true;\r\n\r\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n        _approve(address(this), address(uniswapV2Router), _tTotal);\r\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\r\n        \r\n        emit Transfer(address(0), _msgSender(), _tTotal);\r\n    }\r\n\r\n    function name() public pure returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() public pure returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() public pure returns (uint8) {\r\n        return _decimals;\r\n    }\r\n\r\n    function totalSupply() public pure override returns (uint256) {\r\n        return _tTotal;\r\n    }\r\n\r\n    function balanceOf(address account) public view override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(_msgSender(), recipient, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _approve(_msgSender(), spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\r\n        _transfer(sender, recipient, amount);\r\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\r\n        return true;\r\n    }\r\n\r\n    function _approve(address owner, address spender, uint256 amount) private {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n        uint256 taxAmount=0;\r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n\r\n            if (transferDelayEnabled) {\r\n                if (to != address(uniswapV2Router) && to != address(uniswapV2Pair)) {\r\n                  require(_holderLastTransferTimestamp[tx.origin] < block.number,\"Only one transfer per block allowed.\");\r\n                  _holderLastTransferTimestamp[tx.origin] = block.number;\r\n                }\r\n            }\r\n\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] ) {\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\r\n                if(_buyCount<_preventSwapBefore){\r\n                  require(!isContract(to));\r\n                }\r\n                _buyCount++;\r\n            }\r\n\r\n\r\n            taxAmount = amount.mul((_buyCount>_reduceBuyTaxAt)?_finalBuyTax:_initialBuyTax).div(100);\r\n            if(to == uniswapV2Pair && from!= address(this) ){\r\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\r\n                taxAmount = amount.mul((_buyCount>_reduceSellTaxAt)?_finalSellTax:_initialSellTax).div(100);\r\n            }\r\n\r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && to == uniswapV2Pair && swapEnabled && contractTokenBalance>_taxSwapThreshold && _buyCount>_preventSwapBefore) {\r\n                swapTokensForEth(min(amount,min(contractTokenBalance,_maxTaxSwap)));\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\r\n        if(taxAmount>0){\r\n          _balances[address(this)]=_balances[address(this)].add(taxAmount);\r\n          emit Transfer(from, address(this),taxAmount);\r\n        }\r\n        _balances[from]=_balances[from].sub(amount);\r\n        _balances[to]=_balances[to].add(amount.sub(taxAmount));\r\n        emit Transfer(from, to, amount.sub(taxAmount));\r\n    }\r\n\r\n\r\n    function min(uint256 a, uint256 b) private pure returns (uint256){\r\n      return (a>b)?b:a;\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        if(tokenAmount==0){return;}\r\n        if(!tradingOpen){return;}\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }\r\n\r\n    function removeLimits() external onlyOwner{\r\n        _maxTxAmount = _tTotal;\r\n        _maxWalletSize=_tTotal;\r\n        transferDelayEnabled=false;\r\n        emit MaxTxAmountUpdated(_tTotal);\r\n    }\r\n\r\n    function sendETHToFee(uint256 amount) private {\r\n        _taxWallet.transfer(amount);\r\n    }\r\n\r\n    function isBot(address a) public view returns (bool){\r\n      return bots[a];\r\n    }\r\n\r\n    function addBots(address[] memory bots_) external onlyOwner{\r\n        for (uint i = 0; i < bots_.length; i++) {\r\n            bots[bots_[i]] = true;\r\n        }\r\n    }\r\n    \r\n    function openTrading() external onlyOwner() {\r\n        require(!tradingOpen,\"trading is already open\");\r\n        \r\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\r\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\r\n        swapEnabled = true;\r\n        tradingOpen = true;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function isContract(address account) private view returns (bool) {\r\n        uint256 size;\r\n        assembly {\r\n            size := extcodesize(account)\r\n        }\r\n        return size > 0;\r\n    }\r\n\r\n    function manualSwap() external {\r\n        require(_msgSender()==_taxWallet);\r\n        uint256 tokenBalance=balanceOf(address(this));\r\n        if(tokenBalance>0){\r\n          swapTokensForEth(tokenBalance);\r\n        }\r\n        uint256 ethBalance=address(this).balance;\r\n        if(ethBalance>0){\r\n          sendETHToFee(ethBalance);\r\n        }\r\n    }\r\n\r\n    \r\n    \r\n    \r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_maxTxAmount\",\"type\":\"uint256\"}],\"name\":\"MaxTxAmountUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_maxTaxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_taxSwapThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"bots_\",\"type\":\"address[]\"}],\"name\":\"addBots\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"}],\"name\":\"isBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLimits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDelayEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "DorkVader", "CompilerVersion": "v0.8.20+commit.a1b79de6", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://8d6846d11178fc46aa4f3d4e7b687f393dc1d4cf49733ead548ec9fac9c84499"}