{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"Canary.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\n/*\\nBecause sometimes 'Production' is just another phrase for 'Our Largest Beta Test!' - Canary\\n\\nWelcome to Canary - where a splash of humor meets a surge of innovation! \\nDesigned with a twinkle in our eyes and a robust roadmap in our hands, Canary is not your everyday meme Coin. \\nIt's a hilariously serious, technology-driven mechanism to pre-test our next big product. \\nCanary Coin embodies our philosophy that there's nothing quite as thrilling - or informative - as testing in live production.\\n\\nBacked by a myriad of robust features, our Coin doesn't just chirp; it sings tunes of progress, foresight, and unorthodox strategy. \\nAfter all, if you're going to fail, why not fail fast, iterate faster, and have a hearty laugh along the way? \\nThe biggest production stage in the world is waiting for us - let's embrace the chaos with Canary!\\n\\nTelegram: https://t.me/CanaryCoin\\n\\nFeatures:\\n- Launch protection\\n- Base Buy/Sell tax: 5%\\n- MaxTx: 1%\\n- MaxWallet: 2%\\n- Trade tax: 0% (Between wallets)\\n- Enable/Disable Base tax (For marketing and promotions)\\n- RenounceOwnership\\n\\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@\\n@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@\\n@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@\\n@@@@@@@,,,,,,,,,,,,,,,,@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@\\n@@@@@,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,@@@@\\n@@@@,,,,,,,,,,,,@@@@@@@@@@@@,,,@@@@@#,,,,,,,,,,,,,,,,,,,,,,,,@@@\\n@@@,,,,,,,,,,,@@@@@@@@@@@@@@,,,@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,@@\\n@@,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,@\\n@,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@/,,,,,,,,,,,,,,,,,,,,,,,,,,\\n@,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,\\n,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,\\n,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,\\n@,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,\\n@,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,\\n@,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,@\\n@@,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,@\\n@@@,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,@@\\n@@@@#,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@,,,,@@@@\\n@@@@@@,,,,,,,,,,,,,,(@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@,,,,,,,,,,,,,,,,,(@@@@@@@@@@@@@,,,,,,@@@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@\\n@@@@@@@@@@@@@@@@@@@@@@@,,,,,,,,,,,,,,,,,,@@@@@@@@@@@@@@@@@@@@@@@\\n*/\\n\\npragma solidity 0.8.19;\\n\\n//CAUTION\\n//This version of SafeMath should only be used with Solidity 0.8 or later,\\n//because it relies on the compiler's built in overflow checks.\\n//https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol\\nlibrary SafeMath {\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\\n//https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Context.sol\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n//https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\\nabstract contract Ownable is Context {\\n    address private _owner;\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\n//https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function transfer(address recipient, uint256 amount)external returns (bool);\\n    function allowance(address owner, address spender)external view returns (uint256);\\n    function approve(address spender, uint256 amount) external returns (bool);\\n    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n    event Approval(address indexed owner,address indexed spender,uint256 value);\\n}\\n\\n//https://github.com/Uniswap/v2-core/blob/master/contracts/interfaces/IUniswapV2Factory.sol\\ninterface IUniswapV2Factory {\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n}\\n\\n//https://github.com/Uniswap/v2-periphery/blob/master/contracts/interfaces/IUniswapV2Router02.sol\\ninterface IUniswapV2Router02 {\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n}\\n\\ncontract CanaryCoin is IERC20, Ownable {\\n    \\n    using SafeMath for uint256;\\n    string private _name = \\\"Canary\\\";\\n    string private _symbol = \\\"CNY\\\";\\n    uint8 private _decimals = 18;\\n    \\n    mapping(address => uint256) internal _balances;\\n    mapping(address => mapping(address => uint256)) internal _allowances;\\n    \\n    uint256 internal _totalSupply = 1000000000*10**18; \\n    uint256 public _maxTxAmount = 10000000*10**18; //1%\\n    uint256 public _maxWalletSize = 20000000*10**18; //2%\\n    \\n    mapping(address => bool) private isExcludedFromTax;\\n    \\n    uint256 public _buyTax = 500; //  5%\\n    uint256 public _sellTax = 500; // 5%\\n    address public taxWallet = 0xa0e230B8E6A2E0b8a0D4C57a78C3D7e9D7dAA2e3;  //Tax wallet\\n    uint256 public tradingStartTime;\\n    address private uniswapV2Pair;\\n    bool private tradingOpen;\\n    IUniswapV2Router02 private uniswapV2Router;\\n    bool private swapEnabled = false;\\n    bool private taxEnabled = true;\\n    uint256 public _inbetweenTax_ = 0; // 0%\\n    uint256 public _buyTaxTotal;\\n    uint256 public _sellTaxTotal;\\n    uint256 public _inbetweenTaxTotal;    \\n    \\n    constructor() {\\n        isExcludedFromTax[msg.sender] = true;\\n        isExcludedFromTax[address(this)] = true;\\n        isExcludedFromTax[taxWallet] = true; //Add multiple times with different wallets that need to be excluded.\\n        _balances[msg.sender] = _totalSupply;           \\n        emit Transfer(address(0), msg.sender, _totalSupply);\\n    }\\n\\n    function name() public view returns (string memory) {\\n        return _name;\\n    }\\n    function symbol() public view returns (string memory) {\\n        return _symbol;\\n    }\\n    function decimals() public view returns (uint8) {\\n        return _decimals;\\n    }\\n    function totalSupply() public override view returns (uint256) {\\n        return _totalSupply;\\n    }\\n    function balanceOf(address account) public override view returns (uint256) {\\n         return _balances[account];\\n    }\\n    function transfer(address recipient, uint256 amount) public override virtual returns (bool) {\\n       _transfer(msg.sender,recipient,amount);\\n        return true;\\n    }\\n    function allowance(address owner, address spender) public override view returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n    function approve(address spender, uint256 amount) public override returns (bool) {\\n        _approve(msg.sender, spender, amount);\\n        return true;\\n    }\\n    function transferFrom(address sender, address recipient, uint256 amount) public override virtual returns (bool) {\\n        _transfer(sender,recipient,amount);       \\n        _approve(sender,msg.sender,_allowances[sender][msg.sender].sub( amount,\\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n    function _approve(address owner, address spender, uint256 amount) private {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    //Transfer transactions\\n    function _transfer(address sender, address recipient, uint256 amount) private {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n        require(amount <= _maxTxAmount, \\\"Exceeds the maxTxAmount.\\\");\\n        require(balanceOf(recipient) + amount <= _maxWalletSize, \\\"Exceeds the maxWalletSize.\\\");\\n        uint256 transferAmount = amount;\\n     if(taxEnabled){\\n         updateTaxRate();\\n            if(isExcludedFromTax[sender] && isExcludedFromTax[recipient]){\\n                transferAmount = amount;\\n            }\\n            if(!isExcludedFromTax[sender] && !isExcludedFromTax[recipient]){\\n                transferAmount = betweenTax(sender,amount);\\n            }\\n            if(isExcludedFromTax[sender] && !isExcludedFromTax[recipient]){\\n                transferAmount = BuyTax(sender,amount);\\n            }\\n            if(!isExcludedFromTax[sender] && isExcludedFromTax[recipient]){\\n                transferAmount = SellTax(sender,amount);       \\n            }   \\n        }\\n        _balances[sender] = _balances[sender].sub(amount);\\n        _balances[recipient] = _balances[recipient].add(transferAmount);    \\n        emit Transfer(sender, recipient, transferAmount);\\n    }\\n    \\n    //Buy tax on transactions\\n    function BuyTax(address account, uint256 amount) private returns (uint256) {\\n        uint256 transferAmount = amount;\\n        uint256 buyTax = amount.mul(_buyTax).div(10000); //amount * 500 / 10000 = 5% base tax \\n        if(buyTax > 0){\\n            transferAmount = transferAmount.sub(buyTax);\\n            _balances[address(taxWallet)] = _balances[address(taxWallet)].add(buyTax);\\n            _buyTaxTotal = _buyTaxTotal.add(buyTax);\\n            emit Transfer(account,address(taxWallet),buyTax);\\n        }  \\n        return transferAmount;\\n    }\\n\\n    //Sell tax on transactions\\n    function SellTax(address account, uint256 amount) private  returns (uint256) {      \\n        uint256 transferAmount = amount;\\n        uint256 sellTax = amount.mul(_sellTax).div(10000);  //amount * 500 / 10000 = 5% base tax \\n        if (sellTax > 0){\\n            transferAmount = transferAmount.sub(sellTax);\\n            _balances[address(taxWallet)] = _balances[address(taxWallet)].add(sellTax);\\n            _sellTaxTotal = _sellTaxTotal.add(sellTax);\\n            emit Transfer(account,address(taxWallet),sellTax);\\n        }\\n        return transferAmount;\\n    }\\n\\n    //Tax on transactions between traders/ wallets\\n    function betweenTax(address account, uint256 amount) private  returns (uint256) {\\n        uint256 transferAmount = amount;\\n        uint256 _inbetweenTax = amount.mul(_inbetweenTax_).div(10000); // amount * 0 / 10000 = 0% base tax \\n        if (_inbetweenTax > 0){\\n            transferAmount = transferAmount.sub(_inbetweenTax);\\n            _balances[address(taxWallet)] = _balances[address(taxWallet)].add(_inbetweenTax);\\n            _inbetweenTaxTotal = _inbetweenTaxTotal.add(_inbetweenTax);\\n            emit Transfer(account,address(taxWallet),_inbetweenTax);\\n        }\\n        return transferAmount;\\n    }\\n\\n    /*\\n       Launch Taxes: \\n       - First 10 minutes tax is 45%\\n       - After 10 minutes tax is 25%\\n       - After 20 minutes tax is 5% = Base tax\\n    */\\n     function updateTaxRate() internal {\\n        if (block.timestamp <= tradingStartTime + 10 minutes ) { // 1st 10 minutes tax will be 45%\\n            if (_buyTax != 4500) { //45%\\n                _buyTax = 4500;\\n            }\\n            if (_sellTax != 4500) {\\n                _sellTax = 4500;\\n            }\\n        }\\n        else if (block.timestamp  >= tradingStartTime + 10 minutes && block.timestamp  <= tradingStartTime + 20 minutes  ) { // after 10 minutes tax will be 25%\\n             if (_buyTax != 2500) {//25%\\n                _buyTax = 2500;\\n            }\\n            if (_sellTax != 2500) {\\n                _sellTax = 2500;\\n            }\\n        }\\n        else if (block.timestamp  >= tradingStartTime + 20 minutes) { // after 20 minutes tax will be 5% = base tax\\n              if (_buyTax != 500) {//5%\\n                _buyTax = 500;\\n            }\\n            if (_sellTax != 500) {\\n                _sellTax = 500;\\n            }\\n        }\\n    }\\n    \\n    //Will open the trading, create pair and fill LP\\n    function openTrading() external onlyOwner() {\\n        require(!tradingOpen,\\\"trading is already open\\\");\\n        uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n        _approve(address(this), address(uniswapV2Router), _totalSupply);\\n        uniswapV2Pair = IUniswapV2Factory(uniswapV2Router.factory()).createPair(address(this), uniswapV2Router.WETH());\\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\\n        isExcludedFromTax[address(uniswapV2Router)] = true;\\n        swapEnabled = true;\\n        tradingOpen = true;\\n        tradingStartTime = block.timestamp;\\n    }\\n    \\n    //Enables base tax on transactions\\n    function taxEnable() public onlyOwner {\\n        taxEnabled = true;\\n    }\\n    //Disables base tax on transactions, used for marketing and promotions.\\n    function taxDisable() public onlyOwner {\\n        taxEnabled = false;\\n    }\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    }\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_buyTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_buyTaxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inbetweenTaxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_inbetweenTax_\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxTxAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_maxWalletSize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTax\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_sellTaxTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxDisable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxEnable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taxWallet\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradingStartTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "CanaryCoin", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}