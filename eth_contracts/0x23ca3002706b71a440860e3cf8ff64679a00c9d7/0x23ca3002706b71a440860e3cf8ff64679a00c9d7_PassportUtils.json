{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/governance/IVotingEscrow.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IVotingEscrow is IERC20 {\\n    struct LockedBalance {\\n        int128 amount;\\n        uint256 end;\\n    }\\n\\n    function locked(address) external view returns (LockedBalance memory);\\n}\\n\"\r\n    },\r\n    \"contracts/passport/IPassportIssuer.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\ninterface IPassportIssuer {\\n    function revokeUnderBalance() external view returns (uint256);\\n\\n    function passportStatus(address account) external view returns (uint8);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/IPassportUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\n/**\\n *        ---------::::\\n *     ---------:---::::::\\n *   -----------::---:::::::\\n *  ------------:.:--::::::::\\n * -------------: .:--::::::::\\n * -------------:   .:::::::::\\n * -------------:.......::::::\\n * -----:..    .:-------::::::\\n * --------:.. .:-------::::::\\n * ----------:..:--------:::::\\n *  -----------.:--------::::\\n *   ----------::--------:::\\n *     -------------------\\n *        -------------\\n *\\n *         Nation3 DAO\\n *     https://nation3.org\\n */\\ninterface IPassportUtils {\\n    /**\\n     * Returns `true` if an account is the owner of a passport.\\n     */\\n    function isOwner(address account) external view returns (bool);\\n\\n    /**\\n     * Returns the owner of a passport.\\n     *\\n     * @param passportID The identifier of an NFT passport\\n     */\\n    function getOwnerAddress(uint16 passportID) external view returns (address);\\n\\n    /**\\n     * Returns `true` if a citizen's passport has become revocable.\\n     *\\n     * @param citizen The address of an NFT passport's owner\\n     */\\n    function isExpired(address citizen) external view returns (bool);\\n\\n    /**\\n     * Returns the Unix epoch time when a citizen's passport will become revocable.\\n     *\\n     * @param citizen The address of an NFT passport's owner\\n     */\\n    function getExpirationTimestamp(\\n        address citizen\\n    ) external view returns (uint256);\\n\\n    /**\\n     * Calculates the Unix epoch time when vote-escrowed `$NATION` will drop below a given threshold.\\n     *\\n     * @param lockAmount The amount of `$NATION` tokens that were locked\\n     * @param lockEnd The lock expiration date in seconds\\n     * @param votingEscrowThreshold The vote-escrowed `$NATION` balance when a passport will become revocable\\n     * @return Timestamp in seconds, or `0` if the lock amount is below the threshold\\n     */\\n    function calculateThresholdTimestamp(\\n        uint256 lockAmount,\\n        uint256 lockEnd,\\n        uint256 votingEscrowThreshold\\n    ) external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/utils/PassportUtils.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.21;\\n\\nimport \\\"./IPassportUtils.sol\\\";\\nimport \\\"../passport/IPassportIssuer.sol\\\";\\nimport \\\"../governance/IVotingEscrow.sol\\\";\\n\\n/**\\n *        ---------::::\\n *     ---------:---::::::\\n *   -----------::---:::::::\\n *  ------------:.:--::::::::\\n * -------------: .:--::::::::\\n * -------------:   .:::::::::\\n * -------------:.......::::::\\n * -----:..    .:-------::::::\\n * --------:.. .:-------::::::\\n * ----------:..:--------:::::\\n *  -----------.:--------::::\\n *   ----------::--------:::\\n *     -------------------\\n *        -------------\\n *\\n *         Nation3 DAO\\n *     https://nation3.org\\n */\\ncontract PassportUtils is IPassportUtils {\\n    string public constant VERSION = \\\"0.6.9\\\";\\n    IPassportIssuer public passportIssuer;\\n    IVotingEscrow public votingEscrow;\\n\\n    constructor(address passportIssuerAddress, address votingEscrowAddress) {\\n        passportIssuer = IPassportIssuer(passportIssuerAddress);\\n        votingEscrow = IVotingEscrow(votingEscrowAddress);\\n    }\\n\\n    /**\\n     * @inheritdoc IPassportUtils\\n     */\\n    function isOwner(address account) public view returns (bool) {\\n        uint8 passportStatus = passportIssuer.passportStatus(account);\\n        return passportStatus == 1;\\n    }\\n\\n    /**\\n     * @inheritdoc IPassportUtils\\n     */\\n    function getOwnerAddress(uint16 passportID) public view returns (address) {\\n        // TO DO\\n    }\\n\\n    /**\\n     * @inheritdoc IPassportUtils\\n     */\\n    function isExpired(address citizen) public view returns (bool) {\\n        uint256 revokeUnderBalance = passportIssuer.revokeUnderBalance();\\n        uint256 votingEscrowBalance = votingEscrow.balanceOf(citizen);\\n        return votingEscrowBalance < revokeUnderBalance;\\n    }\\n\\n    /**\\n     * @inheritdoc IPassportUtils\\n     */\\n    function getExpirationTimestamp(\\n        address citizen\\n    ) public view returns (uint256) {\\n        IVotingEscrow.LockedBalance memory lockedBalance = votingEscrow.locked(\\n            citizen\\n        );\\n        uint256 lockAmount = uint256(int256(lockedBalance.amount));\\n        uint256 lockEnd = lockedBalance.end;\\n        uint256 revokeUnderBalance = passportIssuer.revokeUnderBalance();\\n        return\\n            calculateThresholdTimestamp(\\n                lockAmount,\\n                lockEnd,\\n                revokeUnderBalance\\n            );\\n    }\\n\\n    /**\\n     * @inheritdoc IPassportUtils\\n     */\\n    function calculateThresholdTimestamp(\\n        uint256 lockAmount,\\n        uint256 lockEnd,\\n        uint256 votingEscrowThreshold\\n    ) public pure returns (uint256) {\\n        if (lockAmount < votingEscrowThreshold) {\\n            return 0;\\n        }\\n\\n        uint256 maxLockPeriod = 4 * 365 days;\\n\\n        uint256 thresholdPercentageOfLocked = (100 ether *\\n            votingEscrowThreshold) / lockAmount;\\n\\n        uint256 secondsFromThresholdToUnlock = (maxLockPeriod *\\n            thresholdPercentageOfLocked) / 100 ether;\\n\\n        return lockEnd - secondsFromThresholdToUnlock;\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"evmVersion\": \"paris\",\r\n    \"optimizer\": {\r\n      \"enabled\": false,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"passportIssuerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"votingEscrowAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"lockAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"votingEscrowThreshold\",\"type\":\"uint256\"}],\"name\":\"calculateThresholdTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"}],\"name\":\"getExpirationTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"passportID\",\"type\":\"uint16\"}],\"name\":\"getOwnerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"citizen\",\"type\":\"address\"}],\"name\":\"isExpired\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passportIssuer\",\"outputs\":[{\"internalType\":\"contract IPassportIssuer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"votingEscrow\",\"outputs\":[{\"internalType\":\"contract IVotingEscrow\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "PassportUtils", "CompilerVersion": "v0.8.21+commit.d9974bed", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000279c0b6bfcbba977eaf4ad1b2ffe3c208aa068ac000000000000000000000000f7def1d2fbda6b74bee7452fdf7894da9201065d", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}