{"SourceCode": "// File: contracts/StorageContract.sol\r\n\r\n\r\n\r\npragma solidity ^0.8.6;\r\n\r\ncontract StorageContract {\r\n    address public nativeCryptoReceiver;\r\n    address[] public owners;\r\n\r\n    constructor(address defaultNativeCryptoReceiver, address firstOwner) {\r\n        nativeCryptoReceiver = defaultNativeCryptoReceiver;\r\n        owners.push(firstOwner);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        bool isOwner = false;\r\n        for (uint256 i = 0; i < owners.length; i++) {\r\n            if (msg.sender == owners[i]) {\r\n                isOwner = true;\r\n                break;\r\n            }\r\n        }\r\n        require(isOwner, \"Caller is not an owner\");\r\n        _;\r\n    }\r\n\r\n    function addOwner(address newOwner) public onlyOwner {\r\n        owners.push(newOwner);\r\n    }\r\n\r\n    function getOwners() public view returns (address[] memory) {\r\n        return owners;\r\n    }\r\n\r\n    function changeNativeCryptoReceiver(address newNativeCryptoReceiver)\r\n        public\r\n        onlyOwner\r\n    {\r\n        nativeCryptoReceiver = newNativeCryptoReceiver;\r\n    }\r\n}\r\n\r\n// File: contracts/Receiver.sol\r\n\r\n\r\npragma solidity ^0.8.4;\r\n\r\n\r\ncontract Receiver {\r\n    StorageContract storageContract;\r\n\r\n    mapping(address => uint256) private balances;\r\n\r\n    constructor(address storageContractAddress) {\r\n        storageContract = StorageContract(storageContractAddress);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        bool isOwner = false;\r\n        for (uint256 i = 0; i < storageContract.getOwners().length; i++) {\r\n            if (msg.sender == storageContract.owners(i)) {\r\n                isOwner = true;\r\n                break;\r\n            }\r\n        }\r\n        require(isOwner, \"Caller is not an owner\");\r\n        _;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    function withdraw(uint256 amount, address recipient) public onlyOwner {\r\n        require(\r\n            amount <= address(this).balance,\r\n            \"Not enough balance in the contract\"\r\n        );\r\n\r\n        (bool sent, ) = payable(recipient).call{value: amount}(\"\");\r\n        require(sent, \"Fail\");\r\n    }\r\n\r\n    function bulkWithdraw(uint256[] memory amounts, address[] memory recipients)\r\n        public\r\n        onlyOwner\r\n    {\r\n        require(\r\n            amounts.length == recipients.length,\r\n            \"The amounts and recipients length mismatch\"\r\n        );\r\n\r\n        for (uint256 i = 0; i < recipients.length; i++) {\r\n            uint256 amount = amounts[i];\r\n            address recipient = recipients[i];\r\n\r\n            require(\r\n                amount <= address(this).balance,\r\n                \"Not enough balance in the contract\"\r\n            );\r\n\r\n            (bool sent, ) = payable(recipient).call{value: amount}(\"\");\r\n            require(sent, \"Fail\");\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storageContractAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"}],\"name\":\"bulkWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "Receiver", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "0000000000000000000000000000af47ea981360736ca580661b5f5425200000", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://fed96c3e5fbcc4d4e200ec611c546acf643c06819f3a29a0beb48bb8ac56b752"}