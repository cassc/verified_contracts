{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\r\n    },\r\n    \"contracts/common/EIP712.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ncontract EIP712 {\\n    // --- Public fields ---\\n\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    // --- Constructor ---\\n\\n    constructor(bytes memory name, bytes memory version) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                keccak256(\\n                    \\\"EIP712Domain(\\\"\\n                    \\\"string name,\\\"\\n                    \\\"string version,\\\"\\n                    \\\"uint256 chainId,\\\"\\n                    \\\"address verifyingContract\\\"\\n                    \\\")\\\"\\n                ),\\n                keccak256(name),\\n                keccak256(version),\\n                chainId,\\n                address(this)\\n            )\\n        );\\n    }\\n\\n    // --- Internal methods ---\\n\\n    /**\\n     * @dev Get the EIP712 hash of a struct hash\\n     *\\n     * @param structHash Struct hash to get the EIP712 hash for\\n     *\\n     * @return eip712Hash The resulting EIP712 hash\\n     */\\n    function _getEIP712Hash(\\n        bytes32 structHash\\n    ) internal view returns (bytes32 eip712Hash) {\\n        eip712Hash = keccak256(\\n            abi.encodePacked(hex\\\"1901\\\", DOMAIN_SEPARATOR, structHash)\\n        );\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IEIP2612.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IEIP2612 {\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/interfaces/IPermit2.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\ninterface IPermit2 {\\n    event Permit(\\n        address indexed owner,\\n        address indexed token,\\n        address indexed spender,\\n        uint160 amount,\\n        uint48 expiration,\\n        uint48 nonce\\n    );\\n\\n    struct PermitDetails {\\n        address token;\\n        uint160 amount;\\n        uint48 expiration;\\n        uint48 nonce;\\n    }\\n\\n    struct PermitSingle {\\n        PermitDetails details;\\n        address spender;\\n        uint256 sigDeadline;\\n    }\\n\\n    function permit(\\n        address owner,\\n        PermitSingle memory permitSingle,\\n        bytes calldata signature\\n    ) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint160 amount,\\n        address token\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/common/PermitExecutor.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IPermit2} from \\\"./interfaces/IPermit2.sol\\\";\\nimport {IEIP2612} from \\\"./interfaces/IEIP2612.sol\\\";\\n\\ncontract PermitExecutor {\\n    // --- Structs and enums ---\\n\\n    enum Kind {\\n        EIP2612,\\n        PERMIT2\\n    }\\n\\n    struct Permit {\\n        Kind kind;\\n        bytes data;\\n    }\\n\\n    // --- Public fields ---\\n\\n    address public immutable permit2 =\\n        0x000000000022D473030F116dDEE9F6B43aC78BA3;\\n\\n    // --- Modifiers ---\\n\\n    /**\\n     * @dev Execute permits\\n     *\\n     * @param permits Permits to execute\\n     */\\n    modifier executePermits(Permit[] calldata permits) {\\n        unchecked {\\n            uint256 permitsLength = permits.length;\\n            for (uint256 i; i < permitsLength; i++) {\\n                Permit calldata permit = permits[i];\\n                if (permit.kind == Kind.EIP2612) {\\n                    (\\n                        address token,\\n                        address owner,\\n                        address spender,\\n                        uint256 value,\\n                        uint256 deadline,\\n                        uint8 v,\\n                        bytes32 r,\\n                        bytes32 s\\n                    ) = abi.decode(\\n                            permit.data,\\n                            (\\n                                address,\\n                                address,\\n                                address,\\n                                uint256,\\n                                uint256,\\n                                uint8,\\n                                bytes32,\\n                                bytes32\\n                            )\\n                        );\\n\\n                    IEIP2612(token).permit(\\n                        owner,\\n                        spender,\\n                        value,\\n                        deadline,\\n                        v,\\n                        r,\\n                        s\\n                    );\\n                } else {\\n                    (\\n                        address owner,\\n                        IPermit2.PermitSingle memory permitSingle,\\n                        bytes memory signature\\n                    ) = abi.decode(\\n                            permit.data,\\n                            (address, IPermit2.PermitSingle, bytes)\\n                        );\\n\\n                    IPermit2(permit2).permit(owner, permitSingle, signature);\\n                }\\n            }\\n        }\\n\\n        _;\\n    }\\n\\n    // --- Internal methods ---\\n\\n    function _permit2TransferFrom(\\n        address from,\\n        address to,\\n        uint160 amount,\\n        address token\\n    ) internal {\\n        IPermit2(permit2).transferFrom(from, to, amount, token);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/common/SignatureVerification.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {EIP712} from \\\"./EIP712.sol\\\";\\n\\n// Copied from Seaport's source code\\nabstract contract SignatureVerification is EIP712 {\\n    // --- Errors ---\\n\\n    error InvalidSignature();\\n\\n    // --- Virtual methods ---\\n\\n    function _lookupBulkOrderTypehash(\\n        uint256 treeHeight\\n    ) internal pure virtual returns (bytes32 typeHash);\\n\\n    // --- Internal methods ---\\n\\n    function _verifySignature(\\n        bytes32 intentHash,\\n        address signer,\\n        bytes memory signature\\n    ) internal view {\\n        // Skip signature verification if the signer is the caller\\n        if (signer == msg.sender) {\\n            return;\\n        }\\n\\n        bytes32 originalDigest = _getEIP712Hash(intentHash);\\n        uint256 originalSignatureLength = signature.length;\\n\\n        bytes32 digest;\\n        if (_isValidBulkOrderSize(originalSignatureLength)) {\\n            (intentHash) = _computeBulkOrderProof(signature, intentHash);\\n            digest = _getEIP712Hash(intentHash);\\n        } else {\\n            digest = originalDigest;\\n        }\\n\\n        _assertValidSignature(\\n            signer,\\n            digest,\\n            originalDigest,\\n            originalSignatureLength,\\n            signature\\n        );\\n    }\\n\\n    function _isValidBulkOrderSize(\\n        uint256 signatureLength\\n    ) internal pure returns (bool validLength) {\\n        // Utilize assembly to validate the length:\\n        // (64 + x) + 3 + 32y where (0 <= x <= 1) and (1 <= y <= 24)\\n        assembly {\\n            validLength := and(\\n                lt(sub(signatureLength, 0x63), 0x2e2),\\n                lt(and(add(signatureLength, 0x1d), 0x1f), 0x2)\\n            )\\n        }\\n    }\\n\\n    function _computeBulkOrderProof(\\n        bytes memory proofAndSignature,\\n        bytes32 leaf\\n    ) internal pure returns (bytes32 bulkOrderHash) {\\n        // Declare arguments for the root hash and the height of the proof\\n        bytes32 root;\\n        uint256 height;\\n\\n        // Utilize assembly to efficiently derive the root hash using the proof\\n        assembly {\\n            // Retrieve the length of the proof, key, and signature combined\\n            let fullLength := mload(proofAndSignature)\\n\\n            // If proofAndSignature has odd length, it is a compact signature with 64 bytes\\n            let signatureLength := sub(65, and(fullLength, 1))\\n\\n            // Derive height (or depth of tree) with signature and proof length\\n            height := shr(0x5, sub(fullLength, signatureLength))\\n\\n            // Update the length in memory to only include the signature\\n            mstore(proofAndSignature, signatureLength)\\n\\n            // Derive the pointer for the key using the signature length\\n            let keyPtr := add(proofAndSignature, add(0x20, signatureLength))\\n\\n            // Retrieve the three-byte key using the derived pointer\\n            let key := shr(0xe8, mload(keyPtr))\\n\\n            // Retrieve pointer to first proof element by applying a constant for the key size to the derived key pointer\\n            let proof := add(keyPtr, 0x3)\\n\\n            // Compute level 1\\n            let scratchPtr1 := shl(0x5, and(key, 1))\\n            mstore(scratchPtr1, leaf)\\n            mstore(xor(scratchPtr1, 0x20), mload(proof))\\n\\n            // Compute remaining proofs\\n            for {\\n                let i := 1\\n            } lt(i, height) {\\n                i := add(i, 1)\\n            } {\\n                proof := add(proof, 0x20)\\n                let scratchPtr := shl(0x5, and(shr(i, key), 1))\\n                mstore(scratchPtr, keccak256(0, 0x40))\\n                mstore(xor(scratchPtr, 0x20), mload(proof))\\n            }\\n\\n            // Compute root hash\\n            root := keccak256(0, 0x40)\\n        }\\n\\n        // Retrieve appropriate typehash constant based on height.\\n        bytes32 rootTypeHash = _lookupBulkOrderTypehash(height);\\n\\n        // Use the typehash and the root hash to derive final bulk order hash\\n        assembly {\\n            mstore(0, rootTypeHash)\\n            mstore(0x20, root)\\n            bulkOrderHash := keccak256(0, 0x40)\\n        }\\n    }\\n\\n    function _assertValidSignature(\\n        address signer,\\n        bytes32 digest,\\n        bytes32 originalDigest,\\n        uint256 originalSignatureLength,\\n        bytes memory signature\\n    ) internal view {\\n        // Declare value for ecrecover equality or 1271 call success status\\n        bool success;\\n\\n        // Utilize assembly to perform optimized signature verification check\\n        assembly {\\n            // Ensure that first word of scratch space is empty\\n            mstore(0, 0)\\n\\n            // Get the length of the signature.\\n            let signatureLength := mload(signature)\\n\\n            // Get the pointer to the value preceding the signature length\\n            // This will be used for temporary memory overrides - either the signature head for isValidSignature or the digest for ecrecover\\n            let wordBeforeSignaturePtr := sub(signature, 0x20)\\n\\n            // Cache the current value behind the signature to restore it later\\n            let cachedWordBeforeSignature := mload(wordBeforeSignaturePtr)\\n\\n            // Declare lenDiff + recoveredSigner scope to manage stack pressure\\n            {\\n                // Take the difference between the max ECDSA signature length and the actual signature length (overflow desired for any values > 65)\\n                // If the diff is not 0 or 1, it is not a valid ECDSA signature - move on to EIP1271 check\\n                let lenDiff := sub(65, signatureLength)\\n\\n                // Declare variable for recovered signer\\n                let recoveredSigner\\n\\n                // If diff is 0 or 1, it may be an ECDSA signature\\n                // Try to recover signer\\n                if iszero(gt(lenDiff, 1)) {\\n                    // Read the signature `s` value\\n                    let originalSignatureS := mload(add(signature, 0x40))\\n\\n                    // Read the first byte of the word after `s`\\n                    // If the signature is 65 bytes, this will be the real `v` value\\n                    // If not, it will need to be modified - doing it this way saves an extra condition.\\n                    let v := byte(0, mload(add(signature, 0x60)))\\n\\n                    // If lenDiff is 1, parse 64-byte signature as ECDSA\\n                    if lenDiff {\\n                        // Extract yParity from highest bit of vs and add 27 to get v\\n                        v := add(shr(0xff, originalSignatureS), 27)\\n\\n                        // Extract canonical s from vs, all but the highest bit\\n                        // Temporarily overwrite the original `s` value in the signature\\n                        mstore(\\n                            add(signature, 0x40),\\n                            and(\\n                                originalSignatureS,\\n                                0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\n                            )\\n                        )\\n                    }\\n                    // Temporarily overwrite the signature length with `v` to conform to the expected input for ecrecover\\n                    mstore(signature, v)\\n\\n                    // Temporarily overwrite the word before the length with `digest` to conform to the expected input for ecrecover\\n                    mstore(wordBeforeSignaturePtr, digest)\\n\\n                    // Attempt to recover the signer for the given signature\\n                    // Do not check the call status as ecrecover will return a null address if the signature is invalid\\n                    pop(\\n                        staticcall(\\n                            gas(),\\n                            0x1, // Call ecrecover precompile\\n                            wordBeforeSignaturePtr, // Use data memory location\\n                            0x80, // Size of digest, v, r, and s\\n                            0, // Write result to scratch space\\n                            0x20 // Provide size of returned result\\n                        )\\n                    )\\n\\n                    // Restore cached word before signature\\n                    mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\n\\n                    // Restore cached signature length\\n                    mstore(signature, signatureLength)\\n\\n                    // Restore cached signature `s` value\\n                    mstore(add(signature, 0x40), originalSignatureS)\\n\\n                    // Read the recovered signer from the buffer given as return space for ecrecover\\n                    recoveredSigner := mload(0)\\n                }\\n\\n                // Set success to true if the signature provided was a valid\\n                // ECDSA signature and the signer is not the null address\\n                // Use gt instead of direct as success is used outside of assembly\\n                success := and(eq(signer, recoveredSigner), gt(signer, 0))\\n            }\\n\\n            // If the signature was not verified with ecrecover, try EIP1271\\n            if iszero(success) {\\n                // Reset the original signature length\\n                mstore(signature, originalSignatureLength)\\n\\n                // Temporarily overwrite the word before the signature length and use it as the\\n                // head of the signature input to `isValidSignature`, which has a value of 64\\n                mstore(wordBeforeSignaturePtr, 0x40)\\n\\n                // Get pointer to use for the selector of `isValidSignature`\\n                let selectorPtr := sub(signature, 0x44)\\n\\n                // Cache the value currently stored at the selector pointer\\n                let cachedWordOverwrittenBySelector := mload(selectorPtr)\\n\\n                // Cache the value currently stored at the digest pointer\\n                let cachedWordOverwrittenByDigest := mload(sub(signature, 0x40))\\n\\n                // Write the selector first, since it overlaps the digest\\n                mstore(selectorPtr, 0x44)\\n\\n                // Next, write the original digest\\n                mstore(sub(signature, 0x40), originalDigest)\\n\\n                // Call signer with `isValidSignature` to validate signature\\n                success := staticcall(\\n                    gas(),\\n                    signer,\\n                    selectorPtr,\\n                    add(originalSignatureLength, 0x64),\\n                    0,\\n                    0x20\\n                )\\n\\n                // Determine if the signature is valid on successful calls\\n                if success {\\n                    // If first word of scratch space does not contain EIP-1271 signature selector, revert\\n                    if iszero(\\n                        eq(\\n                            mload(0),\\n                            0x1626ba7e00000000000000000000000000000000000000000000000000000000\\n                        )\\n                    ) {\\n                        success := 0\\n                    }\\n                }\\n\\n                // Restore the cached values overwritten by selector, digest and signature head\\n                mstore(wordBeforeSignaturePtr, cachedWordBeforeSignature)\\n                mstore(selectorPtr, cachedWordOverwrittenBySelector)\\n                mstore(sub(signature, 0x40), cachedWordOverwrittenByDigest)\\n            }\\n        }\\n\\n        if (!success) {\\n            revert InvalidSignature();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/interfaces/ISolution.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {MemswapERC721} from \\\"../MemswapERC721.sol\\\";\\n\\ninterface ISolution {\\n    function callback(\\n        MemswapERC721.Intent memory intent,\\n        MemswapERC721.TokenDetails[] memory tokenDetailsToFill,\\n        bytes memory data\\n    ) external;\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/MemswapERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {EIP712} from \\\"../common/EIP712.sol\\\";\\nimport {PermitExecutor} from \\\"../common/PermitExecutor.sol\\\";\\nimport {SignatureVerification} from \\\"../common/SignatureVerification.sol\\\";\\n\\nimport {ISolution} from \\\"./interfaces/ISolution.sol\\\";\\n\\ncontract MemswapERC721 is\\n    ReentrancyGuard,\\n    PermitExecutor,\\n    SignatureVerification\\n{\\n    // --- Structs and enums ---\\n\\n    struct Intent {\\n        // When isBuy = true:\\n        // amount = buy amount\\n        // endAmount = sell end amount\\n        // startAmountBps = sell start amount bps\\n        // expectedAmountBps = sell expected amount bps\\n\\n        // When isBuy = false:\\n        // amount = sell amount\\n        // endAmount = buy end amount\\n        // startAmountBps = buy start amount bps\\n        // expectedAmountBps = buy expected amount bps\\n\\n        // Exact output (isBuy = true) or exact input (isBuy = false)\\n        bool isBuy;\\n        address buyToken;\\n        address sellToken;\\n        address maker;\\n        // The address allowed to solve or authorize others to solve\\n        address solver;\\n        address source;\\n        uint16 feeBps;\\n        uint16 surplusBps;\\n        uint32 startTime;\\n        uint32 endTime;\\n        bool isPartiallyFillable;\\n        bool isSmartOrder;\\n        bool isCriteriaOrder;\\n        uint256 tokenIdOrCriteria;\\n        uint128 amount;\\n        uint128 endAmount;\\n        uint16 startAmountBps;\\n        uint16 expectedAmountBps;\\n        bytes signature;\\n    }\\n\\n    struct IntentStatus {\\n        bool isPrevalidated;\\n        bool isCancelled;\\n        uint128 amountFilled;\\n    }\\n\\n    struct Authorization {\\n        // When isBuy = true:\\n        // fillAmountToCheck = buy amount to fill\\n        // executeAmountToCheck = maximum sell amount pulled from user\\n\\n        // When isBuy = false:\\n        // fillAmountToCheck = sell amount to fill\\n        // executeAmountToCheck = minimum buy amount pushed to user\\n\\n        uint128 fillAmountToCheck;\\n        uint128 executeAmountToCheck;\\n        uint32 blockDeadline;\\n    }\\n\\n    struct TokenDetails {\\n        uint256 tokenId;\\n        bytes32[] criteriaProof;\\n    }\\n\\n    struct Solution {\\n        // When isBuy = true:\\n        // fillTokenDetails = tokens to push to user\\n\\n        // When isBuy = false:\\n        // fillTokenDetails = tokens to pull from user\\n\\n        bytes data;\\n        TokenDetails[] fillTokenDetails;\\n    }\\n\\n    // --- Events ---\\n\\n    event IntentCancelled(bytes32 indexed intentHash);\\n    event IntentPrevalidated(bytes32 indexed intentHash);\\n    event IntentSolved(\\n        bytes32 indexed intentHash,\\n        bool isBuy,\\n        address buyToken,\\n        address sellToken,\\n        address maker,\\n        address solver,\\n        uint128 amount,\\n        uint256[] tokenIds\\n    );\\n    event IntentsPosted();\\n    event NonceIncremented(address maker, uint256 newNonce);\\n\\n    // --- Errors ---\\n\\n    error AmountCheckFailed();\\n    error AuthorizationAmountMismatch();\\n    error AuthorizationIsExpired();\\n    error IntentCannotBePrevalidated();\\n    error IntentIsCancelled();\\n    error IntentIsExpired();\\n    error IntentIsFilled();\\n    error IntentIsNotPartiallyFillable();\\n    error IntentIsNotStarted();\\n    error InvalidCriteriaProof();\\n    error InvalidFillAmount();\\n    error InvalidSolution();\\n    error InvalidStartAndEndTimes();\\n    error InvalidTokenId();\\n    error MerkleTreeTooLarge();\\n    error Unauthorized();\\n    error UnsuccessfulCall();\\n\\n    // --- Fields ---\\n\\n    bytes32 public immutable AUTHORIZATION_TYPEHASH;\\n    bytes32 public immutable INTENT_TYPEHASH;\\n\\n    mapping(address => uint256) public nonce;\\n    mapping(bytes32 => bytes32) public intentPrivateData;\\n    mapping(bytes32 => IntentStatus) public intentStatus;\\n    mapping(bytes32 => Authorization) public authorization;\\n\\n    // --- Constructor ---\\n\\n    constructor() EIP712(\\\"MemswapERC721\\\", \\\"1.0\\\") {\\n        AUTHORIZATION_TYPEHASH = keccak256(\\n            abi.encodePacked(\\n                \\\"Authorization(\\\",\\n                \\\"bytes32 intentHash,\\\",\\n                \\\"address solver,\\\",\\n                \\\"uint128 fillAmountToCheck,\\\",\\n                \\\"uint128 executeAmountToCheck,\\\",\\n                \\\"uint32 blockDeadline\\\",\\n                \\\")\\\"\\n            )\\n        );\\n\\n        INTENT_TYPEHASH = keccak256(\\n            abi.encodePacked(\\n                \\\"Intent(\\\",\\n                \\\"bool isBuy,\\\",\\n                \\\"address buyToken,\\\",\\n                \\\"address sellToken,\\\",\\n                \\\"address maker,\\\",\\n                \\\"address solver,\\\",\\n                \\\"address source,\\\",\\n                \\\"uint16 feeBps,\\\",\\n                \\\"uint16 surplusBps,\\\",\\n                \\\"uint32 startTime,\\\",\\n                \\\"uint32 endTime,\\\",\\n                \\\"uint256 nonce,\\\",\\n                \\\"bool isPartiallyFillable,\\\",\\n                \\\"bool isSmartOrder,\\\",\\n                \\\"bool isCriteriaOrder,\\\",\\n                \\\"uint256 tokenIdOrCriteria,\\\",\\n                \\\"uint128 amount,\\\",\\n                \\\"uint128 endAmount,\\\",\\n                \\\"uint16 startAmountBps,\\\",\\n                \\\"uint16 expectedAmountBps\\\",\\n                \\\")\\\"\\n            )\\n        );\\n    }\\n\\n    // Fallback\\n\\n    receive() external payable {}\\n\\n    // Public methods\\n\\n    /**\\n     * @notice Authorize an address to solve particular intents\\n     *\\n     * @param intents Intents to solve\\n     * @param auths Authorizations\\n     * @param solver The address authorized to solve\\n     */\\n    function authorize(\\n        Intent[] calldata intents,\\n        Authorization[] calldata auths,\\n        address solver\\n    ) external {\\n        unchecked {\\n            uint256 intentsLength = intents.length;\\n            for (uint256 i; i < intentsLength; i++) {\\n                Intent calldata intent = intents[i];\\n                Authorization calldata auth = auths[i];\\n\\n                if (intent.solver != msg.sender) {\\n                    revert Unauthorized();\\n                }\\n\\n                bytes32 intentHash = getIntentHash(intent);\\n                bytes32 authId = keccak256(\\n                    abi.encodePacked(intentHash, solver)\\n                );\\n                authorization[authId] = auth;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Make intents available on-chain (this method doesn't do anything\\n     *         useful - it's only used as a mechanism for intent distribution)\\n     *\\n     * @custom:param intents Intents being made available\\n     */\\n    function post(\\n        /**\\n         * @custom:name intents\\n         */\\n        Intent[] calldata\\n    ) external {\\n        emit IntentsPosted();\\n    }\\n\\n    /**\\n     * @notice Pre-validate an arbitrary number of intents (the signature of each\\n     *         intent will be checked, thus resulting in skipping verification on\\n     *         further attempts to solve the intent, unless the intent explicitly\\n     *         enforces checking the signature on every fill)\\n     *\\n     * @param intents Intents to validate\\n     */\\n    function prevalidate(Intent[] calldata intents) external {\\n        unchecked {\\n            uint256 intentsLength = intents.length;\\n            for (uint256 i; i < intentsLength; i++) {\\n                Intent calldata intent = intents[i];\\n                if (intent.isSmartOrder) {\\n                    revert IntentCannotBePrevalidated();\\n                }\\n\\n                bytes32 intentHash = getIntentHash(intent);\\n\\n                _prevalidateIntent(\\n                    intentHash,\\n                    intent.maker,\\n                    intent.isSmartOrder,\\n                    intent.signature\\n                );\\n                emit IntentPrevalidated(intentHash);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Cancel an arbitrary number of intents\\n     *\\n     * @param intents Intents to cancel\\n     */\\n    function cancel(Intent[] calldata intents) external {\\n        unchecked {\\n            uint256 intentsLength = intents.length;\\n            for (uint256 i; i < intentsLength; i++) {\\n                Intent calldata intent = intents[i];\\n                if (intent.maker != msg.sender) {\\n                    revert Unauthorized();\\n                }\\n\\n                bytes32 intentHash = getIntentHash(intent);\\n                IntentStatus memory status = intentStatus[intentHash];\\n                status.isPrevalidated = false;\\n                status.isCancelled = true;\\n\\n                intentStatus[intentHash] = status;\\n                emit IntentCancelled(intentHash);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Increment the nonce for `msg.sender`. This will result in\\n     *         the invalidation of any intents signed with a lower nonce\\n     *         than the latest value.\\n     */\\n    function incrementNonce() external {\\n        unchecked {\\n            uint256 newNonce = nonce[msg.sender] + 1;\\n            nonce[msg.sender] = newNonce;\\n            emit NonceIncremented(msg.sender, newNonce);\\n        }\\n    }\\n\\n    /**\\n     * @notice Reveal intents by making available data assumed to not be publicly\\n     *         available (maker + signature prefix). This method should be called\\n     *         right before the solution transaction, ideally bundled, so that no\\n     *         details are revealed sooner than it should be.\\n     *\\n     * @param intents Intents to reveal\\n     */\\n    function reveal(Intent[] memory intents) external {\\n        unchecked {\\n            uint256 intentsLength = intents.length;\\n            for (uint256 i; i < intentsLength; i++) {\\n                Intent memory intent = intents[i];\\n\\n                // Ensure the intent is valid\\n                bytes32 intentHash = getIntentHash(intent);\\n                _verifySignature(intentHash, intent.maker, intent.signature);\\n\\n                // Extract the private data (intent + signature prefix)\\n                address maker = intent.maker;\\n                bytes12 signaturePrefix = bytes12(intent.signature);\\n\\n                // Override the maker with the zero address to get the correct partial intent hash\\n                intent.maker = address(0);\\n\\n                // Store the private data (intent + signature prefix)\\n                bytes32 partialIntentHash = getIntentHash(intent);\\n                intentPrivateData[partialIntentHash] = bytes32(\\n                    abi.encodePacked(maker, signaturePrefix)\\n                );\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice Solve intent\\n     *\\n     * @param intent Intent to solve\\n     * @param solution Solution\\n     * @param permits Permits to execute prior to the solution\\n     */\\n    function solve(\\n        Intent memory intent,\\n        Solution calldata solution,\\n        PermitExecutor.Permit[] calldata permits\\n    ) external payable nonReentrant executePermits(permits) {\\n        // Make any private data available\\n        _includePrivateData(intent);\\n\\n        // Check authorization\\n        if (intent.solver != address(0) && intent.solver != msg.sender) {\\n            revert Unauthorized();\\n        }\\n\\n        // Solve\\n        _solve(intent, solution, intent.isBuy ? type(uint128).max : 0);\\n    }\\n\\n    /**\\n     * @notice Solve intent with authorization. Compared to the regular `solve`,\\n     *         this method allows solving intents of a different solver, as long\\n     *         as there's a valid authorization in-place for the current caller.\\n     *         The authorization will be checked via a storage slot.\\n     *\\n     * @param intent Intent to solve\\n     * @param solution Solution\\n     * @param permits Permits to execute prior to the solution\\n     */\\n    function solveWithOnChainAuthorizationCheck(\\n        Intent memory intent,\\n        Solution calldata solution,\\n        PermitExecutor.Permit[] calldata permits\\n    ) external payable nonReentrant executePermits(permits) {\\n        // Make any private data available\\n        _includePrivateData(intent);\\n\\n        // Check authorization\\n        bytes32 intentHash = getIntentHash(intent);\\n        bytes32 authId = keccak256(abi.encodePacked(intentHash, msg.sender));\\n        Authorization memory auth = authorization[authId];\\n        _checkAuthorization(auth, uint128(solution.fillTokenDetails.length));\\n\\n        // Solve\\n        _solve(intent, solution, auth.executeAmountToCheck);\\n    }\\n\\n    /**\\n     * @notice Solve intent with authorization. Compared to the regular `solve`,\\n     *         this method allows solving intents of a different solver, as long\\n     *         as there's a valid authorization in-place for the current caller.\\n     *         The authorization will be checked via a signature.\\n     *\\n     * @param intent Intent to solve\\n     * @param solution Solution for the intent\\n     * @param auth Authorization\\n     * @param authSignature Authorization signature\\n     * @param permits Permits to execute prior to the solution\\n     */\\n    function solveWithSignatureAuthorizationCheck(\\n        Intent memory intent,\\n        Solution calldata solution,\\n        Authorization calldata auth,\\n        bytes calldata authSignature,\\n        PermitExecutor.Permit[] calldata permits\\n    ) external payable nonReentrant executePermits(permits) {\\n        // Make any private data available\\n        _includePrivateData(intent);\\n\\n        // Check authorization\\n        bytes32 intentHash = getIntentHash(intent);\\n        bytes32 authorizationHash = getAuthorizationHash(\\n            intentHash,\\n            msg.sender,\\n            auth\\n        );\\n        bytes32 digest = _getEIP712Hash(authorizationHash);\\n        _assertValidSignature(\\n            intent.solver,\\n            digest,\\n            digest,\\n            authSignature.length,\\n            authSignature\\n        );\\n        _checkAuthorization(auth, uint128(solution.fillTokenDetails.length));\\n\\n        // Solve\\n        _solve(intent, solution, auth.executeAmountToCheck);\\n    }\\n\\n    // View methods\\n\\n    /**\\n     * @notice Get the EIP712 struct hash for an authorization\\n     *\\n     * @param intentHash Intent EIP712 struct hash to authorize\\n     * @param solver Solver to authorize\\n     * @param auth Authorization details/conditions\\n     *\\n     * @return authorizationHash The EIP712 struct hash of the authorization\\n     */\\n    function getAuthorizationHash(\\n        bytes32 intentHash,\\n        address solver,\\n        Authorization memory auth\\n    ) public view returns (bytes32 authorizationHash) {\\n        authorizationHash = keccak256(\\n            abi.encode(\\n                AUTHORIZATION_TYPEHASH,\\n                intentHash,\\n                solver,\\n                auth.fillAmountToCheck,\\n                auth.executeAmountToCheck,\\n                auth.blockDeadline\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice Get the EIP712 struct hash for an intent\\n     *\\n     * @param intent Intent to compute the hash for\\n     *\\n     * @return intentHash The EIP712 struct hash of the intent\\n     */\\n    function getIntentHash(\\n        Intent memory intent\\n    ) public view returns (bytes32 intentHash) {\\n        intentHash = keccak256(\\n            bytes.concat(\\n                abi.encode(\\n                    INTENT_TYPEHASH,\\n                    intent.isBuy,\\n                    intent.buyToken,\\n                    intent.sellToken,\\n                    intent.maker,\\n                    intent.solver,\\n                    intent.source,\\n                    intent.feeBps,\\n                    intent.surplusBps,\\n                    intent.startTime,\\n                    intent.endTime,\\n                    nonce[intent.maker]\\n                ),\\n                abi.encode(\\n                    intent.isPartiallyFillable,\\n                    intent.isSmartOrder,\\n                    intent.isCriteriaOrder,\\n                    intent.tokenIdOrCriteria,\\n                    intent.amount,\\n                    intent.endAmount,\\n                    intent.startAmountBps,\\n                    intent.expectedAmountBps\\n                )\\n            )\\n        );\\n    }\\n\\n    // Internal methods\\n\\n    function _preProcess(\\n        Intent memory intent,\\n        TokenDetails[] memory tokenDetailsToFill\\n    ) internal returns (TokenDetails[] memory actualTokenDetailsToFill) {\\n        bytes32 intentHash = getIntentHash(intent);\\n\\n        // Verify start and end times\\n\\n        if (intent.startTime > block.timestamp) {\\n            revert IntentIsNotStarted();\\n        }\\n\\n        if (intent.endTime < block.timestamp) {\\n            revert IntentIsExpired();\\n        }\\n\\n        if (intent.startTime >= intent.endTime) {\\n            revert InvalidStartAndEndTimes();\\n        }\\n\\n        // Verify cancellation status and signature\\n\\n        IntentStatus memory status = intentStatus[intentHash];\\n\\n        if (status.isCancelled) {\\n            revert IntentIsCancelled();\\n        }\\n\\n        if (!status.isPrevalidated) {\\n            _prevalidateIntent(\\n                intentHash,\\n                intent.maker,\\n                intent.isSmartOrder,\\n                intent.signature\\n            );\\n        }\\n\\n        // Ensure there's still some amount left to be filled\\n        uint128 amountAvailable = intent.amount - status.amountFilled;\\n        if (amountAvailable == 0) {\\n            revert IntentIsFilled();\\n        }\\n\\n        uint128 amountToFill = uint128(tokenDetailsToFill.length);\\n\\n        // Ensure non-partially-fillable intents are fully filled\\n        if (!intent.isPartiallyFillable && amountToFill < amountAvailable) {\\n            revert IntentIsNotPartiallyFillable();\\n        }\\n\\n        // Compute the actual amount to fill\\n        uint128 actualAmountToFill = amountToFill > amountAvailable\\n            ? amountAvailable\\n            : amountToFill;\\n        if (actualAmountToFill == 0) {\\n            revert InvalidFillAmount();\\n        }\\n\\n        // Update the storage\\n        intentStatus[intentHash].amountFilled += actualAmountToFill;\\n\\n        actualTokenDetailsToFill = new TokenDetails[](actualAmountToFill);\\n        unchecked {\\n            for (uint256 i; i < actualAmountToFill; i++) {\\n                actualTokenDetailsToFill[i] = tokenDetailsToFill[i];\\n            }\\n        }\\n\\n        if (intent.isBuy) {\\n            // When isBuy = true:\\n            // amount = buy amount\\n            // endAmount = sell end amount\\n            // startAmountBps = sell start amount bps\\n            // expectedAmountBps = sell expected amount bps\\n\\n            uint128 endAmount = (intent.endAmount * actualAmountToFill) /\\n                intent.amount;\\n            uint128 startAmount = endAmount -\\n                (endAmount * intent.startAmountBps) /\\n                10000;\\n\\n            //                                                      (now() - startTime)\\n            // maxAmount = startAmount + (endAmount - startAmount) ---------------------\\n            //                                                     (endTime - startTime)\\n\\n            uint128 maxAmount = startAmount +\\n                ((endAmount - startAmount) *\\n                    (uint32(block.timestamp) - intent.startTime)) /\\n                (intent.endTime - intent.startTime);\\n\\n            // Transfer inputs to solver\\n            _transferNativeOrERC20(\\n                intent.maker,\\n                msg.sender,\\n                intent.sellToken,\\n                maxAmount\\n            );\\n\\n            // Ensure the maker doesn't own any of the tokens that are being filled with\\n            unchecked {\\n                for (uint256 i; i < actualAmountToFill; i++) {\\n                    TokenDetails memory details = tokenDetailsToFill[i];\\n                    try\\n                        IERC721(intent.buyToken).ownerOf(details.tokenId)\\n                    returns (address owner) {\\n                        if (owner == intent.maker) {\\n                            revert InvalidSolution();\\n                        }\\n                    } catch {\\n                        // Skip errors (to support not-yet-minted tokens)\\n                    }\\n                }\\n            }\\n        } else {\\n            // When isBuy = false:\\n            // amount = sell amount\\n            // endAmount = buy end amount\\n            // startAmountBps = buy start amount bps\\n            // expectedAmountBps = buy expected amount bps\\n\\n            unchecked {\\n                for (uint256 i; i < actualAmountToFill; i++) {\\n                    TokenDetails memory details = tokenDetailsToFill[i];\\n\\n                    if (intent.isCriteriaOrder) {\\n                        if (intent.tokenIdOrCriteria != 0) {\\n                            _verifyCriteriaProof(\\n                                details.tokenId,\\n                                intent.tokenIdOrCriteria,\\n                                details.criteriaProof\\n                            );\\n                        }\\n                    } else {\\n                        if (intent.tokenIdOrCriteria != details.tokenId) {\\n                            revert InvalidTokenId();\\n                        }\\n                    }\\n\\n                    // Transfer inputs to solver\\n                    _transferERC721(\\n                        intent.maker,\\n                        msg.sender,\\n                        intent.sellToken,\\n                        details.tokenId\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    function _postProcess(\\n        Intent memory intent,\\n        TokenDetails[] memory tokenDetailsToFill,\\n        uint128 amountToCheck,\\n        uint128 makerBuyBalanceDiff,\\n        uint128 makerSellBalanceDiff,\\n        uint128 sourceBalanceDiff\\n    ) internal {\\n        bytes32 intentHash = getIntentHash(intent);\\n\\n        uint128 amountToFill = uint128(tokenDetailsToFill.length);\\n        if (intent.isBuy) {\\n            // When isBuy = true:\\n            // amount = buy amount\\n            // endAmount = sell end amount\\n            // startAmountBps = sell start amount bps\\n            // expectedAmountBps = sell expected amount bps\\n\\n            uint128 endAmount = (intent.endAmount * amountToFill) /\\n                intent.amount;\\n            uint128 startAmount = endAmount -\\n                (endAmount * intent.startAmountBps) /\\n                10000;\\n            uint128 expectedAmount = endAmount -\\n                (endAmount * intent.expectedAmountBps) /\\n                10000;\\n\\n            //                                                      (now() - startTime)\\n            // maxAmount = startAmount + (endAmount - startAmount) ---------------------\\n            //                                                     (endTime - startTime)\\n\\n            uint128 maxAmount = startAmount +\\n                ((endAmount - startAmount) *\\n                    (uint32(block.timestamp) - intent.startTime)) /\\n                (intent.endTime - intent.startTime);\\n\\n            uint128 executeAmount = makerSellBalanceDiff;\\n\\n            // The amount to execute should be lower than the maximum allowed amount\\n            if (executeAmount > maxAmount) {\\n                revert InvalidSolution();\\n            }\\n\\n            // The amount to execute should be lower than the check amount\\n            if (executeAmount > amountToCheck) {\\n                revert AmountCheckFailed();\\n            }\\n\\n            // Compute total fees\\n            uint128 sourceFees;\\n            if (intent.source != address(0)) {\\n                // Fee\\n                if (intent.feeBps > 0) {\\n                    sourceFees += (executeAmount * intent.feeBps) / 10000;\\n                }\\n\\n                // Surplus fee\\n                if (intent.surplusBps > 0 && executeAmount < expectedAmount) {\\n                    sourceFees +=\\n                        ((expectedAmount - executeAmount) * intent.surplusBps) /\\n                        10000;\\n                }\\n            }\\n\\n            // Ensure the correct amount of fees were paid\\n            if (sourceBalanceDiff < sourceFees) {\\n                revert InvalidSolution();\\n            }\\n\\n            // Ensure the maker got the correct amount of tokens\\n            if (makerBuyBalanceDiff < amountToFill) {\\n                revert InvalidSolution();\\n            }\\n\\n            // Ensure the maker owns all tokens that are being filled with\\n            uint256[] memory filledTokenIds = new uint256[](amountToFill);\\n            unchecked {\\n                for (uint256 i; i < amountToFill; i++) {\\n                    TokenDetails memory details = tokenDetailsToFill[i];\\n\\n                    if (intent.isCriteriaOrder) {\\n                        if (intent.tokenIdOrCriteria != 0) {\\n                            _verifyCriteriaProof(\\n                                details.tokenId,\\n                                intent.tokenIdOrCriteria,\\n                                details.criteriaProof\\n                            );\\n                        }\\n                    } else {\\n                        if (intent.tokenIdOrCriteria != details.tokenId) {\\n                            revert InvalidTokenId();\\n                        }\\n                    }\\n\\n                    if (\\n                        IERC721(intent.buyToken).ownerOf(details.tokenId) !=\\n                        intent.maker\\n                    ) {\\n                        revert InvalidSolution();\\n                    }\\n\\n                    filledTokenIds[i] = details.tokenId;\\n                }\\n            }\\n\\n            emit IntentSolved(\\n                intentHash,\\n                intent.isBuy,\\n                intent.buyToken,\\n                intent.sellToken,\\n                intent.maker,\\n                msg.sender,\\n                executeAmount,\\n                filledTokenIds\\n            );\\n        } else {\\n            // When isBuy = false:\\n            // amount = sell amount\\n            // endAmount = buy end amount\\n            // startAmountBps = buy start amount bps\\n            // expectedAmountBps = buy expected amount bps\\n\\n            uint128 endAmount = (intent.endAmount * amountToFill) /\\n                intent.amount;\\n            uint128 startAmount = endAmount +\\n                (endAmount * intent.startAmountBps) /\\n                10000;\\n            uint128 expectedAmount = endAmount +\\n                (endAmount * intent.expectedAmountBps) /\\n                10000;\\n\\n            //                                                      (now() - startTime)\\n            // minAmount = startAmount - (startAmount - endAmount) ---------------------\\n            //                                                     (endTime - startTime)\\n\\n            uint128 minAmount = startAmount -\\n                ((startAmount - endAmount) *\\n                    (uint32(block.timestamp) - intent.startTime)) /\\n                (intent.endTime - intent.startTime);\\n\\n            uint128 executeAmount = makerBuyBalanceDiff + sourceBalanceDiff;\\n\\n            // The amount to execute should be greater than the minimum amount\\n            if (executeAmount < minAmount) {\\n                revert InvalidSolution();\\n            }\\n\\n            // The amount to execute should be greater than the check amount\\n            if (executeAmount < amountToCheck) {\\n                revert AmountCheckFailed();\\n            }\\n\\n            // Compute total fees\\n            uint128 sourceFees;\\n            if (intent.source != address(0)) {\\n                // Fee\\n                if (intent.feeBps > 0) {\\n                    sourceFees += (executeAmount * intent.feeBps) / 10000;\\n                }\\n\\n                // Surplus fee\\n                if (intent.surplusBps > 0 && executeAmount > expectedAmount) {\\n                    sourceFees +=\\n                        ((executeAmount - expectedAmount) * intent.surplusBps) /\\n                        10000;\\n                }\\n            }\\n\\n            // Ensure the correct amount of fees were paid\\n            if (sourceBalanceDiff < sourceFees) {\\n                revert InvalidSolution();\\n            }\\n\\n            // Ensure the maker spent the correct amount of tokens\\n            if (makerSellBalanceDiff < amountToFill) {\\n                revert InvalidSolution();\\n            }\\n\\n            uint256[] memory filledTokenIds = new uint256[](amountToFill);\\n            unchecked {\\n                for (uint256 i; i < amountToFill; i++) {\\n                    TokenDetails memory details = tokenDetailsToFill[i];\\n                    filledTokenIds[i] = details.tokenId;\\n                }\\n            }\\n\\n            emit IntentSolved(\\n                intentHash,\\n                intent.isBuy,\\n                intent.buyToken,\\n                intent.sellToken,\\n                intent.maker,\\n                msg.sender,\\n                executeAmount,\\n                filledTokenIds\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Solve intent\\n     *\\n     * @param intent Intent to solve\\n     * @param solution Solution for the intent\\n     * @param amountToCheck The amount to check the solution against\\n     */\\n    function _solve(\\n        Intent memory intent,\\n        Solution calldata solution,\\n        uint128 amountToCheck\\n    ) internal {\\n        // Determine the token for which the amount is variable\\n        // - isBuy = true -> sellToken (exact output, variable input)\\n        // - isBuy = false -> buyToken (exact input, variable output)\\n        address relevantToken = intent.isBuy\\n            ? intent.sellToken\\n            : intent.buyToken;\\n\\n        // Fetch the balances before the solution execution\\n        uint128 makerBuyBalanceBefore = _getBalanceNativeOrERC20OrERC721(\\n            intent.buyToken,\\n            intent.maker\\n        );\\n        uint128 makerSellBalanceBefore = _getBalanceNativeOrERC20OrERC721(\\n            intent.sellToken,\\n            intent.maker\\n        );\\n        uint128 sourceBalanceBefore = _getBalanceNativeOrERC20OrERC721(\\n            relevantToken,\\n            intent.source\\n        );\\n\\n        // Pre-process\\n        TokenDetails[] memory actualTokenDetailsToFill = _preProcess(\\n            intent,\\n            solution.fillTokenDetails\\n        );\\n\\n        // Solve\\n        ISolution(msg.sender).callback(\\n            intent,\\n            actualTokenDetailsToFill,\\n            solution.data\\n        );\\n\\n        // Fetch the balances after the solution execution\\n        uint128 makerBuyBalanceAfter = _getBalanceNativeOrERC20OrERC721(\\n            intent.buyToken,\\n            intent.maker\\n        );\\n        uint128 makerSellBalanceAfter = _getBalanceNativeOrERC20OrERC721(\\n            intent.sellToken,\\n            intent.maker\\n        );\\n        uint128 sourceBalanceAfter = _getBalanceNativeOrERC20OrERC721(\\n            relevantToken,\\n            intent.source\\n        );\\n\\n        // Post-process\\n        _postProcess(\\n            intent,\\n            actualTokenDetailsToFill,\\n            amountToCheck,\\n            makerBuyBalanceAfter - makerBuyBalanceBefore,\\n            makerSellBalanceBefore - makerSellBalanceAfter,\\n            sourceBalanceAfter - sourceBalanceBefore\\n        );\\n    }\\n\\n    /**\\n     * @dev Check an authorization\\n     *\\n     * @param auth Authorization to check\\n     * @param amount Amount to check the authorization against\\n     */\\n    function _checkAuthorization(\\n        Authorization memory auth,\\n        uint128 amount\\n    ) internal view {\\n        // Ensure the authorization is not expired\\n        if (auth.blockDeadline < block.number) {\\n            revert AuthorizationIsExpired();\\n        }\\n\\n        // Ensure the amount to fill matches the authorized amount\\n        if (auth.fillAmountToCheck != amount) {\\n            revert AuthorizationAmountMismatch();\\n        }\\n    }\\n\\n    /**\\n     * @dev Pre-validate an intent by checking its signature\\n     *\\n     * @param intentHash EIP712 intent struct hash to verify\\n     * @param maker The maker of the intent\\n     * @param hasDynamicSignature Whether the intent has a dynamic signature\\n     * @param signature The signature of the intent\\n     */\\n    function _prevalidateIntent(\\n        bytes32 intentHash,\\n        address maker,\\n        bool hasDynamicSignature,\\n        bytes memory signature\\n    ) internal {\\n        _verifySignature(intentHash, maker, signature);\\n\\n        // Mark the intent as validated if allowed\\n        if (!hasDynamicSignature) {\\n            intentStatus[intentHash].isPrevalidated = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Make any private data available for an intent\\n     *\\n     * @param intent Intent to make private data available for\\n     */\\n    function _includePrivateData(Intent memory intent) internal view {\\n        if (intent.maker == address(0)) {\\n            bytes32 intentHash = getIntentHash(intent);\\n            bytes32 privateData = intentPrivateData[intentHash];\\n\\n            // For byte conversions, right bits are stripped (we use `bytes20(...)`)\\n            address revealedMaker = address(uint160(bytes20(privateData)));\\n            // For numeric conversions, left bits are stripped (we use `uint96(uint256(...))`)\\n            bytes12 revealedSignaturePrefix = bytes12(\\n                uint96(uint256(privateData))\\n            );\\n\\n            // Override the maker\\n            intent.maker = revealedMaker;\\n\\n            // Override the signature prefix\\n            bytes memory signature = intent.signature;\\n            assembly {\\n                mstore(\\n                    add(signature, 0x20),\\n                    or(\\n                        and(\\n                            mload(add(signature, 0x20)),\\n                            not(shl(160, 0xFFFFFFFFFFFFFFFFFFFFFFFF))\\n                        ),\\n                        revealedSignaturePrefix\\n                    )\\n                )\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method to get the balance of native or ERC20/ERC721 tokens\\n     *\\n     * @param token Token to get the balance for (native tokens are represented by the zero address)\\n     * @param owner Wallet to get the balance of\\n     *\\n     * @return balance The amount of `token` owned by `owner`\\n     */\\n    function _getBalanceNativeOrERC20OrERC721(\\n        address token,\\n        address owner\\n    ) internal view returns (uint128 balance) {\\n        if (token == address(0)) {\\n            balance = uint128(owner.balance);\\n        } else {\\n            // Same interface for ERC20 and ERC721\\n            balance = uint128(IERC20(token).balanceOf(owner));\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method for transferring native and ERC20 tokens\\n     *\\n     * @param from Transfer from this address\\n     * @param to Transfer to this address\\n     * @param token Token to transfer (native tokens are represented by the zero address)\\n     * @param amount Amonut to transfer\\n     */\\n    function _transferNativeOrERC20(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        bool success;\\n        if (address(token) == address(0)) {\\n            (success, ) = to.call{value: amount}(\\\"\\\");\\n        } else {\\n            // First, attempt to transfer directly\\n            try IERC20(token).transferFrom(from, to, amount) {\\n                success = true;\\n            } catch {\\n                // Secondly, attempt to transfer via permit2\\n                _permit2TransferFrom(from, to, uint160(amount), token);\\n                success = true;\\n            }\\n        }\\n\\n        if (!success) {\\n            revert UnsuccessfulCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper method for transferring ERC721 tokens\\n     *\\n     * @param from Transfer from this address\\n     * @param to Transfer to this address\\n     * @param token Token to transfer\\n     * @param tokenId Token id to transfer\\n     */\\n    function _transferERC721(\\n        address from,\\n        address to,\\n        address token,\\n        uint256 tokenId\\n    ) internal {\\n        IERC721(token).transferFrom(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Verify a merkle proof\\n     *      Taken from: https://github.com/ProjectOpenSea/seaport/blob/dfce06d02413636f324f73352b54a4497d63c310/contracts/lib/CriteriaResolution.sol#L243-L247\\n     *\\n     * @param leaf Leaf to verify\\n     * @param root Merkle root\\n     * @param criteriaProof Merkle proof for the inclusion of `leaf` in `root`\\n     */\\n    function _verifyCriteriaProof(\\n        uint256 leaf,\\n        uint256 root,\\n        bytes32[] memory criteriaProof\\n    ) internal pure {\\n        bool isValid;\\n\\n        assembly {\\n            // Store the leaf at the beginning of scratch space\\n            mstore(0, leaf)\\n\\n            // Derive the hash of the leaf to use as the initial proof element\\n            let computedHash := keccak256(0, 0x20)\\n            // Get memory start location of the first element in proof array\\n            let data := add(criteriaProof, 0x20)\\n\\n            for {\\n                // Left shift by 5 is equivalent to multiplying by 0x20\\n                let end := add(data, shl(5, mload(criteriaProof)))\\n            } lt(data, end) {\\n                // Increment by one word at a time\\n                data := add(data, 0x20)\\n            } {\\n                // Get the proof element\\n                let loadedData := mload(data)\\n\\n                // Sort proof elements and place them in scratch space\\n                let scratch := shl(5, gt(computedHash, loadedData))\\n                mstore(scratch, computedHash)\\n                mstore(xor(scratch, 0x20), loadedData)\\n\\n                // Derive the updated hash\\n                computedHash := keccak256(0, 0x40)\\n            }\\n\\n            isValid := eq(computedHash, root)\\n        }\\n\\n        if (!isValid) {\\n            revert InvalidCriteriaProof();\\n        }\\n    }\\n\\n    // --- Overridden methods ---\\n\\n    function _lookupBulkOrderTypehash(\\n        uint256 treeHeight\\n    ) internal pure override returns (bytes32 typeHash) {\\n        // keccak256(\\\"BatchIntent(Intent[2]...[2] tree)Intent(bool isBuy,address buyToken,address sellToken,address maker,address solver,address source,uint16 feeBps,uint16 surplusBps,uint32 startTime,uint32 endTime,uint256 nonce,bool isPartiallyFillable,bool isSmartOrder,bool isCriteriaOrder,uint256 tokenIdOrCriteria,uint128 amount,uint128 endAmount,uint16 startAmountBps,uint16 expectedAmountBps)\\\")\\n        if (treeHeight == 1) {\\n            typeHash = 0xd816b95a11d40d32035f81a04cfdf1c5ec0824d5bd737f56f07c9b7ba1f48cf0;\\n        } else if (treeHeight == 2) {\\n            typeHash = 0x635255fbff32fdc0de1ea086ac3b980a482aab837c959678ddc747aff917d8f2;\\n        } else if (treeHeight == 3) {\\n            typeHash = 0x2495330cc098a21759208e1e2a52928af2da4da2eb91602510d7f802799f0545;\\n        } else if (treeHeight == 4) {\\n            typeHash = 0x44d6b9ee9078785878dc4a7e6861911c727e4ecd700ce89285c3e34dfe17447d;\\n        } else if (treeHeight == 5) {\\n            typeHash = 0xb751c63860c7d6d023c60ce1c5778a2241f3617f27f16a9c1d8a8818348f509a;\\n        } else if (treeHeight == 6) {\\n            typeHash = 0x5acb5ce19e40ef6bf66a9a0a3dbe00e7f2be0fad966ead55c775eeacad8b851f;\\n        } else if (treeHeight == 7) {\\n            typeHash = 0x9496383c5e1cf9357fa1195c016a7b3d5a8cb55d01f96143ca7f348e3a19dc4e;\\n        } else if (treeHeight == 8) {\\n            typeHash = 0xd8b574aec11b6732fd05f0e0c1b3bd24084c1d0078d9c9f6aebbdaffff96f88c;\\n        } else {\\n            revert MerkleTreeTooLarge();\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/erc721/utils/SolutionProxyERC721.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\nimport {MemswapERC721} from \\\"../MemswapERC721.sol\\\";\\nimport {PermitExecutor} from \\\"../../common/PermitExecutor.sol\\\";\\n\\nimport {ISolution} from \\\"../interfaces/ISolution.sol\\\";\\n\\ncontract SolutionProxyERC721 is ISolution {\\n    // --- Structs ---\\n\\n    struct Call {\\n        address to;\\n        bytes data;\\n        uint256 value;\\n    }\\n\\n    // --- Errors ---\\n\\n    error NotSupported();\\n    error Unauthorized();\\n    error UnsuccessfulCall();\\n\\n    // --- Fields ---\\n\\n    address public immutable owner;\\n    address public immutable memswap;\\n\\n    // --- Constructor ---\\n\\n    constructor(address ownerAddress, address memswapAddress) {\\n        owner = ownerAddress;\\n        memswap = memswapAddress;\\n    }\\n\\n    // --- Fallback ---\\n\\n    receive() external payable {}\\n\\n    // --- Modifiers ---\\n\\n    modifier restrictCaller(address caller) {\\n        if (msg.sender != caller) {\\n            revert Unauthorized();\\n        }\\n\\n        _;\\n    }\\n\\n    // --- Public methods ---\\n\\n    function solve(\\n        MemswapERC721.Intent calldata intent,\\n        MemswapERC721.Solution calldata solution,\\n        PermitExecutor.Permit[] calldata permits\\n    ) external restrictCaller(owner) {\\n        MemswapERC721(payable(memswap)).solve(intent, solution, permits);\\n    }\\n\\n    function solveWithOnChainAuthorizationCheck(\\n        MemswapERC721.Intent calldata intent,\\n        MemswapERC721.Solution calldata solution,\\n        PermitExecutor.Permit[] calldata permits\\n    ) external restrictCaller(owner) {\\n        MemswapERC721(payable(memswap)).solveWithOnChainAuthorizationCheck(\\n            intent,\\n            solution,\\n            permits\\n        );\\n    }\\n\\n    function solveWithSignatureAuthorizationCheck(\\n        MemswapERC721.Intent calldata intent,\\n        MemswapERC721.Solution calldata solution,\\n        MemswapERC721.Authorization calldata auth,\\n        bytes calldata authSignature,\\n        PermitExecutor.Permit[] calldata permits\\n    ) external restrictCaller(owner) {\\n        MemswapERC721(payable(memswap)).solveWithSignatureAuthorizationCheck(\\n            intent,\\n            solution,\\n            auth,\\n            authSignature,\\n            permits\\n        );\\n    }\\n\\n    function callback(\\n        MemswapERC721.Intent memory intent,\\n        MemswapERC721.TokenDetails[] memory tokenDetails,\\n        bytes memory data\\n    ) external override restrictCaller(memswap) {\\n        Call[] memory calls = abi.decode(data, (Call[]));\\n\\n        // Make calls\\n        unchecked {\\n            uint256 callsLength = calls.length;\\n            for (uint256 i; i < callsLength; i++) {\\n                makeCall(calls[i]);\\n            }\\n        }\\n\\n        uint256 amountToFill = tokenDetails.length;\\n        if (intent.isBuy) {\\n            // Push outputs to maker\\n            unchecked {\\n                for (uint256 i; i < amountToFill; i++) {\\n                    IERC721(intent.buyToken).transferFrom(\\n                        owner,\\n                        intent.maker,\\n                        tokenDetails[i].tokenId\\n                    );\\n                }\\n            }\\n\\n            uint256 amountLeft;\\n\\n            // Take profits in sell token\\n            amountLeft = IERC20(intent.sellToken).balanceOf(address(this));\\n            if (amountLeft > 0) {\\n                IERC20(intent.sellToken).transfer(owner, amountLeft);\\n            }\\n\\n            // Take profits in native token\\n            amountLeft = address(this).balance;\\n            if (amountLeft > 0) {\\n                makeCall(Call(owner, \\\"\\\", amountLeft));\\n            }\\n        } else {\\n            revert NotSupported();\\n        }\\n    }\\n\\n    // --- Internal methods ---\\n\\n    function makeCall(Call memory call) internal {\\n        (bool success, ) = call.to.call{value: call.value}(call.data);\\n        if (!success) {\\n            revert UnsuccessfulCall();\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"viaIR\": true,\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"memswapAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotSupported\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsuccessfulCall\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MemswapERC721.TokenDetails[]\",\"name\":\"tokenDetails\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"memswap\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MemswapERC721.TokenDetails[]\",\"name\":\"fillTokenDetails\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MemswapERC721.Solution\",\"name\":\"solution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PermitExecutor.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct PermitExecutor.Permit[]\",\"name\":\"permits\",\"type\":\"tuple[]\"}],\"name\":\"solve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MemswapERC721.TokenDetails[]\",\"name\":\"fillTokenDetails\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MemswapERC721.Solution\",\"name\":\"solution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"enum PermitExecutor.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct PermitExecutor.Permit[]\",\"name\":\"permits\",\"type\":\"tuple[]\"}],\"name\":\"solveWithOnChainAuthorizationCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isBuy\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"buyToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sellToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"solver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"feeBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"surplusBps\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"startTime\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"endTime\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"isPartiallyFillable\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSmartOrder\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isCriteriaOrder\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"tokenIdOrCriteria\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"amount\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"endAmount\",\"type\":\"uint128\"},{\"internalType\":\"uint16\",\"name\":\"startAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"expectedAmountBps\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct MemswapERC721.Intent\",\"name\":\"intent\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"criteriaProof\",\"type\":\"bytes32[]\"}],\"internalType\":\"struct MemswapERC721.TokenDetails[]\",\"name\":\"fillTokenDetails\",\"type\":\"tuple[]\"}],\"internalType\":\"struct MemswapERC721.Solution\",\"name\":\"solution\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint128\",\"name\":\"fillAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"executeAmountToCheck\",\"type\":\"uint128\"},{\"internalType\":\"uint32\",\"name\":\"blockDeadline\",\"type\":\"uint32\"}],\"internalType\":\"struct MemswapERC721.Authorization\",\"name\":\"auth\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"authSignature\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"enum PermitExecutor.Kind\",\"name\":\"kind\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct PermitExecutor.Permit[]\",\"name\":\"permits\",\"type\":\"tuple[]\"}],\"name\":\"solveWithSignatureAuthorizationCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "SolutionProxyERC721", "CompilerVersion": "v0.8.19+commit.7dd6d404", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000743dbd073d951bc1e7ee276eb79a285595993d63000000000000000000000000db4f0db998bc1d429499fb11638fd3705e8e60cc", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}