{"SourceCode": "/**\r\n * https://t.me/ElonMuskAOC_ERC\r\n * https://twitter.com/ElonMuskAOC\r\n *\r\n                   ,,,, \r\n             ,;) .';;;;',\r\n ;;,,_,-.-.,;;'_,|I\\;;;/),,_\r\n  `';;/:|:);{ ;;;|| \\;/ /;;;\\__\r\n      L;/-';/ \\;;\\',/;\\/;;;.') \\\r\n      .:`''` - \\;;'.__/;;;/  . _'-._ \r\n    .'/   \\     \\;;;;;;/.'_7:.  '). \\_\r\n  .''/     | '._ );}{;//.'    '-:  '.,L\r\n.'. /       \\  ( |;;;/_/         \\._./;\\   _,\r\n . /        |\\ ( /;;/_/             ';;;\\,;;_,\r\n. /         )__(/;;/_/                (;;'''''\r\n /        _;:':;;;;:';-._             );\r\n/        /   \\  `'`   --.'-._         \\/\r\n       .'     '.  ,'         '-,\r\n      /    /   r--,..__       '.\\\r\n    .'    '  .'        '--._     ]\r\n    (     :.(;>        _ .' '- ;/\r\n    |      /:;(    ,_.';(   __.'\r\n     '- -'\"|;:/    (;;;;-'--'\r\n           |;/      ;;(\r\n           ''      /;;|\r\n                   \\;;|\r\n                    \\/\r\n */\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\npragma solidity ^0.8.16;\r\n\r\nabstract contract Ownership {\r\n\r\n\taddress public owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\terror NotOwner();\r\n\r\n\tmodifier onlyOwner {\r\n\t\tif (msg.sender != owner) {\r\n\t\t\trevert NotOwner();\r\n\t\t}\r\n\t\t_;\r\n\t}\r\n\r\n\tconstructor(address owner_) {\r\n\t\towner = owner_;\r\n\t}\r\n\r\n\tfunction _renounceOwnership() internal virtual {\r\n\t\towner = address(0);\r\n\t\temit OwnershipTransferred(owner, address(0));\r\n\t}\r\n\r\n\tfunction renounceOwnership() external onlyOwner {\r\n\t\t_renounceOwnership();\r\n\t}\r\n}\r\n\r\nabstract contract ERC20 {\r\n\r\n\tuint256 immutable internal _totalSupply;\r\n\tstring internal _name;\r\n\tstring internal _symbol;\r\n\tuint8 immutable internal _decimals;\r\n\r\n\tmapping (address => uint256) internal _balances;\r\n\tmapping (address => mapping (address => uint256)) internal _allowances;\r\n\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\terror ExceedsAllowance();\r\n\terror ExceedsBalance();\r\n\r\n\tconstructor(string memory name_, string memory symbol_, uint256 totalSupply_, uint8 decimals_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t\t_totalSupply = totalSupply_;\r\n\t\t_balances[msg.sender] = totalSupply_;\r\n\t\t_decimals = decimals_;\r\n\t\temit Transfer(address(0), msg.sender, totalSupply_);\r\n\t}\r\n\r\n\tfunction name() external view returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() external view returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() external view returns (uint8) {\r\n\t\treturn _decimals;\r\n\t}\r\n\r\n\tfunction totalSupply() external view returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address recipient, uint256 amount) external returns (bool) {\r\n\t\t_transfer(msg.sender, recipient, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(address owner_, address spender) external view returns (uint256) {\r\n\t\treturn _allowances[owner_][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) external returns (bool) {\r\n\t\t_approve(msg.sender, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _approve(address owner_, address spender, uint256 amount) internal {\r\n\t\t_allowances[owner_][spender] = amount;\r\n\t\temit Approval(owner_, spender, amount);\r\n\t}\r\n\r\n\tfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\r\n\t\t_transfer(sender, recipient, amount);\r\n\r\n\t\tuint256 currentAllowance = _allowances[sender][msg.sender];\r\n\t\tif (currentAllowance < amount) {\r\n\t\t\trevert ExceedsAllowance();\r\n\t\t}\r\n\t\t_approve(sender, msg.sender, currentAllowance - amount);\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(address sender, address recipient, uint256 amount) internal virtual returns (uint256) {}\r\n\r\n\tfunction _transfer(address sender, address recipient, uint256 amount) internal {\r\n\t\tuint256 senderBalance = _balances[sender];\r\n\t\tif (senderBalance < amount) {\r\n\t\t\trevert ExceedsBalance();\r\n\t\t}\r\n\t\tuint256 amountReceived = _beforeTokenTransfer(sender, recipient, amount);\r\n\t\tunchecked {\r\n\t\t\t_balances[sender] = senderBalance - amount;\r\n\t\t\t_balances[recipient] += amountReceived;\r\n\t\t}\r\n\r\n\t\temit Transfer(sender, recipient, amount);\r\n\t}\r\n}\r\n\r\ninterface IUniRouter {\r\n\tfunction WETH() external pure returns (address);\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline) external;\r\n}\r\n\r\ncontract ElonMuskAOC is ERC20, Ownership {\r\n\r\n\tbool private _inSwap;\r\n\tbool public launched;\r\n\tbool public limited = true;\r\n\tuint8 private _buyTax = 10;\r\n    uint8 private _saleTax = 10;\r\n\taddress private _pair;\r\n\taddress payable private immutable _devWallet;\r\n\taddress private _router;\r\n\tuint64 private immutable _maxTx;\r\n\tuint64 private immutable _maxWallet;\r\n\tuint64 private _swapThreshold;\r\n\tuint64 private _swapAmount;\r\n\tmapping (address => bool) private _isBot;\r\n\terror ExceedsLimit();\r\n\terror NotTradeable();\r\n\r\n\tmodifier swapping {\r\n\t\t_inSwap = true;\r\n\t\t_;\r\n\t\t_inSwap = false;\r\n\t}\r\n\r\n\tconstructor(address router) ERC20(\"ElonMuskAOC\", \"AOC\", 1_000_000_000 gwei, 9) Ownership(msg.sender) {\r\n\t\t_devWallet = payable(msg.sender);\r\n\t\tuint64 opct = uint64(_totalSupply / 100);\r\n\t\t_maxTx = opct;\r\n\t\t_maxWallet = opct * 2;\r\n\t\t_swapThreshold = opct;\r\n\t\t_swapAmount = opct / 100;\r\n\t\t_router = router;\r\n\t\t_approve(address(this), router, type(uint256).max);\r\n\t}\r\n\r\n\treceive() external payable {}\r\n\r\n\t/**\r\n\t * @dev Allow everyone to trade the token. To be called after liquidity is added.\r\n\t */\r\n\tfunction allowTrading(address tradingPair) external onlyOwner {\r\n\t\t_pair = tradingPair;\r\n\t\tlaunched = true;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Update main trading pair in case allowTrading was called wrongly.\r\n\t */\r\n\tfunction setTradingPair(address tradingPair) external onlyOwner {\r\n\t\t_pair = tradingPair;\r\n\t}\r\n\r\n\tfunction setRouter(address r) external onlyOwner {\r\n\t\t_router = r;\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(address sender, address recipient, uint256 amount) internal override returns (uint256) {\r\n\t\taddress owner_ = owner;\r\n\t\tif (tx.origin == owner_ || sender == owner_ || recipient == owner_ || sender == address(this)) {\r\n\t\t\treturn amount;\r\n\t\t}\r\n\r\n\t\tif (!launched || _isBot[sender] || _isBot[recipient]) {\r\n\t\t\trevert NotTradeable();\r\n\t\t}\r\n\r\n\t\taddress tradingPair = _pair;\r\n\t\tbool isBuy = sender == tradingPair;\r\n\t\tbool isSale = recipient == tradingPair;\r\n\t\tuint256 amountToRecieve = amount;\r\n\r\n\t\tif (isSale) {\r\n\t\t\tuint256 contractBalance = balanceOf(address(this));\r\n\t\t\tif (contractBalance > 0) {\r\n\t\t\t\tif (!_inSwap && contractBalance >= _swapThreshold) {\r\n\t\t\t\t\tuint256 maxSwap = _swapAmount;\r\n\t\t\t\t\tuint256 toSwap = contractBalance > maxSwap ? maxSwap : contractBalance;\r\n\t\t\t\t\t_swap(toSwap);\r\n\t\t\t\t\tif (address(this).balance > 0) {\r\n\t\t\t\t\t\tmarketingFunds();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tuint8 saleTax = _saleTax;\r\n\t\t\tif (saleTax > 0) {\r\n\t\t\t\tuint256 fee = amount * _saleTax / 100;\r\n\t\t\t\tunchecked {\r\n\t\t\t\t\t// fee cannot be higher than amount\r\n\t\t\t\t\tamountToRecieve = amount - fee;\r\n\t\t\t\t\t// Impossible to overflow, max token supply fits in uint64\r\n\t\t\t\t\t_balances[address(this)] += fee;\r\n\t\t\t\t}\r\n\t\t\t\temit Transfer(sender, address(this), fee);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (isBuy) {\r\n\t\t\t// Gas savings to assign and check here :)\r\n\t\t\tuint8 buyTax = _buyTax;\r\n\t\t\tif (buyTax > 0) {\r\n\t\t\t\tuint256 fee = amount * _buyTax / 100;\r\n\t\t\t\t// Same comments as above.\r\n\t\t\t\tunchecked {\r\n\t\t\t\t\tamountToRecieve = amount - fee;\r\n\t\t\t\t\t_balances[address(this)] += fee;\r\n\t\t\t\t}\r\n\t\t\t\temit Transfer(sender, address(this), fee);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (recipient != address(this)) {\r\n\t\t\tif (limited) {\r\n\t\t\t\tif (\r\n\t\t\t\t\tamountToRecieve > _maxTx\r\n\t\t\t\t\t|| (!isSale && balanceOf(recipient) + amountToRecieve > _maxWallet)\r\n\t\t\t\t) {\r\n\t\t\t\t\trevert ExceedsLimit();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn amountToRecieve;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Removes wallet and TX limits. Cannot be undone.\r\n\t */\r\n\tfunction setUnlimited() external onlyOwner {\r\n\t\tlimited = false;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Automatically removes tax and limits when renouncing contract. This makes it impossible to raise taxes from 0 just before renounce and bamboozle gamblers.\r\n\t */\r\n\tfunction _renounceOwnership() internal override {\r\n\t\t_buyTax = 0;\r\n\t\t_saleTax = 0;\r\n\t\tlimited = false;\r\n\t\t// No need to update max tx / wallet because they are only check when `limited` is true.\r\n\t\tsuper._renounceOwnership();\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets temporary buy tax. Taxes are entirely removed when ownership is renounced.\r\n\t */\r\n\tfunction setBuyTax(uint8 buyTax) external onlyOwner {\r\n\t\tif (buyTax > 99) {\r\n\t\t\trevert ExceedsLimit();\r\n\t\t}\r\n\t\t_buyTax = buyTax;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Sets temporary sale tax. Taxes are entirely removed when ownership is renounced.\r\n\t */\r\n\tfunction setSaleTax(uint8 saleTax) external onlyOwner {\r\n\t\tif (saleTax > 99) {\r\n\t\t\trevert ExceedsLimit();\r\n\t\t}\r\n\t\t_saleTax = saleTax;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Amount at which the swap triggers if set.\r\n\t */\r\n\tfunction setSwapThreshold(uint64 t) external onlyOwner {\r\n\t\t_swapThreshold = t;\r\n\t}\r\n\r\n\t/**\r\n\t * @dev Contract swap limit.\r\n\t */\r\n\tfunction setSwapAmount(uint64 amount) external onlyOwner {\r\n\t\t_swapAmount = amount;\r\n\t}\r\n\r\n\tfunction _swap(uint256 amount) private swapping {\r\n\t\taddress[] memory path = new address[](2);\r\n\t\tpath[0] = address(this);\r\n\t\tIUniRouter router = IUniRouter(_router);\r\n\t\tpath[1] = router.WETH();\r\n\t\trouter.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\t\tamount,\r\n\t\t\t0,\r\n\t\t\tpath,\r\n\t\t\taddress(this),\r\n\t\t\tblock.timestamp\r\n\t\t);\r\n\t}\r\n\r\n\tfunction manualSwap(uint256 amount) external {\r\n\t\trequire(msg.sender == _devWallet);\r\n\t\t_swap(amount);\r\n\t\tmarketingFunds();\r\n\t}\r\n\r\n\tfunction marketingFunds() public returns (bool success) {\r\n\t\t// warning,,,\r\n\t\t(success,) = _devWallet.call{value: address(this).balance}(\"\");\r\n\t}\r\n\r\n\tfunction marketingFundsWithGas(uint256 gasgasgas) external returns (bool success) {\r\n\t\t(success,) = _devWallet.call{value: address(this).balance, gas: gasgasgas}(\"\");\r\n\t}\r\n\r\n\tfunction areTheyNonHuman(address account, bool notOnlyAHuman) external onlyOwner {\r\n\t\t_isBot[account] = notOnlyAHuman;\r\n\t}\r\n\r\n\tfunction getTaxes() external view returns (uint8 buyTax, uint8 saleTax) {\r\n\t\tbuyTax = _buyTax;\r\n\t\tsaleTax = _saleTax;\r\n\t}\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ExceedsAllowance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedsLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotTradeable\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingPair\",\"type\":\"address\"}],\"name\":\"allowTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"notOnlyAHuman\",\"type\":\"bool\"}],\"name\":\"areTheyNonHuman\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTaxes\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"saleTax\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launched\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"limited\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingFunds\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gasgasgas\",\"type\":\"uint256\"}],\"name\":\"marketingFundsWithGas\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"buyTax\",\"type\":\"uint8\"}],\"name\":\"setBuyTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"r\",\"type\":\"address\"}],\"name\":\"setRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"saleTax\",\"type\":\"uint8\"}],\"name\":\"setSaleTax\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"amount\",\"type\":\"uint64\"}],\"name\":\"setSwapAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"t\",\"type\":\"uint64\"}],\"name\":\"setSwapThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tradingPair\",\"type\":\"address\"}],\"name\":\"setTradingPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setUnlimited\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "ElonMuskAOC", "CompilerVersion": "v0.8.16+commit.07a7930e", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "0000000000000000000000007a250d5630b4cf539739df2c5dacb4c659f2488d", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://23a2f2999ccbe2177e729f9f5991756bb078e71a0aaa339e7c7d5a9823f1e768"}