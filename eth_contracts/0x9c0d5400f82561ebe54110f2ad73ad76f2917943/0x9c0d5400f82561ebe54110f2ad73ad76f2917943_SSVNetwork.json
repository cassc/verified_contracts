{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OwnableUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    function __Ownable2Step_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822ProxiableUpgradeable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/interfaces/IERC1967Upgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967Upgradeable {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/beacon/IBeaconUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeaconUpgradeable {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeaconUpgradeable.sol\\\";\\nimport \\\"../../interfaces/IERC1967Upgradeable.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/StorageSlotUpgradeable.sol\\\";\\nimport \\\"../utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\\n    function __ERC1967Upgrade_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\\n    }\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(AddressUpgradeable.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(AddressUpgradeable.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\\n        }\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822Upgradeable.sol\\\";\\nimport \\\"../ERC1967/ERC1967UpgradeUpgradeable.sol\\\";\\nimport \\\"./Initializable.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\\n    function __UUPSUpgradeable_init() internal onlyInitializing {\\n    }\\n\\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\\n    }\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     *\\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts-upgradeable/utils/StorageSlotUpgradeable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlotUpgradeable {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Counters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVClusters.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"./ISSVNetworkCore.sol\\\";\\n\\ninterface ISSVClusters is ISSVNetworkCore {\\n    /// @notice Registers a new validator on the SSV Network\\n    /// @param publicKey The public key of the new validator\\n    /// @param operatorIds Array of IDs of operators managing this validator\\n    /// @param sharesData Encrypted shares related to the new validator\\n    /// @param amount Amount of SSV tokens to be deposited\\n    /// @param cluster Cluster to be used with the new validator\\n    function registerValidator(\\n        bytes calldata publicKey,\\n        uint64[] memory operatorIds,\\n        bytes calldata sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    /// @notice Registers new validators on the SSV Network\\n    /// @param publicKeys The public keys of the new validators\\n    /// @param operatorIds Array of IDs of operators managing this validator\\n    /// @param sharesData Encrypted shares related to the new validators\\n    /// @param amount Amount of SSV tokens to be deposited\\n    /// @param cluster Cluster to be used with the new validator\\n    function bulkRegisterValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] memory operatorIds,\\n        bytes[] calldata sharesData,\\n        uint256 amount,\\n        Cluster memory cluster\\n    ) external;\\n\\n    /// @notice Removes an existing validator from the SSV Network\\n    /// @param publicKey The public key of the validator to be removed\\n    /// @param operatorIds Array of IDs of operators managing the validator\\n    /// @param cluster Cluster associated with the validator\\n    function removeValidator(bytes calldata publicKey, uint64[] memory operatorIds, Cluster memory cluster) external;\\n\\n    /// @notice Bulk removes a set of existing validators in the same cluster from the SSV Network\\n    /// @notice Reverts if publicKeys contains duplicates or non-existent validators\\n    /// @param publicKeys The public keys of the validators to be removed\\n    /// @param operatorIds Array of IDs of operators managing the validator\\n    /// @param cluster Cluster associated with the validator\\n    function bulkRemoveValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external;\\n\\n    /**************************/\\n    /* Cluster External Functions */\\n    /**************************/\\n\\n    /// @notice Liquidates a cluster\\n    /// @param owner The owner of the cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param cluster Cluster to be liquidated\\n    function liquidate(address owner, uint64[] memory operatorIds, Cluster memory cluster) external;\\n\\n    /// @notice Reactivates a cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param amount Amount of SSV tokens to be deposited for reactivation\\n    /// @param cluster Cluster to be reactivated\\n    function reactivate(uint64[] memory operatorIds, uint256 amount, Cluster memory cluster) external;\\n\\n    /******************************/\\n    /* Balance External Functions */\\n    /******************************/\\n\\n    /// @notice Deposits tokens into a cluster\\n    /// @param owner The owner of the cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param amount Amount of SSV tokens to be deposited\\n    /// @param cluster Cluster where the deposit will be made\\n    function deposit(address owner, uint64[] memory operatorIds, uint256 amount, Cluster memory cluster) external;\\n\\n    /// @notice Withdraws tokens from a cluster\\n    /// @param operatorIds Array of IDs of operators managing the cluster\\n    /// @param tokenAmount Amount of SSV tokens to be withdrawn\\n    /// @param cluster Cluster where the withdrawal will be made\\n    function withdraw(uint64[] memory operatorIds, uint256 tokenAmount, Cluster memory cluster) external;\\n\\n    /// @notice Fires the exit event for a validator\\n    /// @param publicKey The public key of the validator to be exited\\n    /// @param operatorIds Array of IDs of operators managing the validator\\n    function exitValidator(bytes calldata publicKey, uint64[] calldata operatorIds) external;\\n\\n    /// @notice Fires the exit event for a set of validators\\n    /// @param publicKeys The public keys of the validators to be exited\\n    /// @param operatorIds Array of IDs of operators managing the validators\\n    function bulkExitValidator(bytes[] calldata publicKeys, uint64[] calldata operatorIds) external;\\n\\n    /**\\n     * @dev Emitted when the validator has been added.\\n     * @param publicKey The public key of a validator.\\n     * @param operatorIds The operator ids list.\\n     * @param shares snappy compressed shares(a set of encrypted and public shares).\\n     * @param cluster All the cluster data.\\n     */\\n    event ValidatorAdded(address indexed owner, uint64[] operatorIds, bytes publicKey, bytes shares, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when the validator is removed.\\n     * @param publicKey The public key of a validator.\\n     * @param operatorIds The operator ids list.\\n     * @param cluster All the cluster data.\\n     */\\n    event ValidatorRemoved(address indexed owner, uint64[] operatorIds, bytes publicKey, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when a cluster is liquidated.\\n     * @param owner The owner of the liquidated cluster.\\n     * @param operatorIds The operator IDs managing the cluster.\\n     * @param cluster The liquidated cluster data.\\n     */\\n    event ClusterLiquidated(address indexed owner, uint64[] operatorIds, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when a cluster is reactivated.\\n     * @param owner The owner of the reactivated cluster.\\n     * @param operatorIds The operator IDs managing the cluster.\\n     * @param cluster The reactivated cluster data.\\n     */\\n    event ClusterReactivated(address indexed owner, uint64[] operatorIds, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when tokens are withdrawn from a cluster.\\n     * @param owner The owner of the cluster.\\n     * @param operatorIds The operator IDs managing the cluster.\\n     * @param value The amount of tokens withdrawn.\\n     * @param cluster The cluster from which tokens were withdrawn.\\n     */\\n    event ClusterWithdrawn(address indexed owner, uint64[] operatorIds, uint256 value, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when tokens are deposited into a cluster.\\n     * @param owner The owner of the cluster.\\n     * @param operatorIds The operator IDs managing the cluster.\\n     * @param value The amount of SSV tokens deposited.\\n     * @param cluster The cluster into which SSV tokens were deposited.\\n     */\\n    event ClusterDeposited(address indexed owner, uint64[] operatorIds, uint256 value, Cluster cluster);\\n\\n    /**\\n     * @dev Emitted when a validator begins the exit process.\\n     * @param owner The owner of the exiting validator.\\n     * @param operatorIds The operator IDs managing the validator.\\n     * @param publicKey The public key of the exiting validator.\\n     */\\n    event ValidatorExited(address indexed owner, uint64[] operatorIds, bytes publicKey);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVDAO.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"./ISSVNetworkCore.sol\\\";\\n\\ninterface ISSVDAO is ISSVNetworkCore {\\n    /// @notice Updates the network fee\\n    /// @param fee The new network fee (SSV) to be set\\n    function updateNetworkFee(uint256 fee) external;\\n\\n    /// @notice Withdraws network earnings\\n    /// @param amount The amount (SSV) to be withdrawn\\n    function withdrawNetworkEarnings(uint256 amount) external;\\n\\n    /// @notice Updates the limit on the percentage increase in operator fees\\n    /// @param percentage The new percentage limit\\n    function updateOperatorFeeIncreaseLimit(uint64 percentage) external;\\n\\n    /// @notice Updates the period for declaring operator fees\\n    /// @param timeInSeconds The new period in seconds\\n    function updateDeclareOperatorFeePeriod(uint64 timeInSeconds) external;\\n\\n    /// @notice Updates the period for executing operator fees\\n    /// @param timeInSeconds The new period in seconds\\n    function updateExecuteOperatorFeePeriod(uint64 timeInSeconds) external;\\n\\n    /// @notice Updates the liquidation threshold period\\n    /// @param blocks The new liquidation threshold in blocks\\n    function updateLiquidationThresholdPeriod(uint64 blocks) external;\\n\\n    /// @notice Updates the minimum collateral required to prevent liquidation\\n    /// @param amount The new minimum collateral amount (SSV)\\n    function updateMinimumLiquidationCollateral(uint256 amount) external;\\n\\n    /// @notice Updates the maximum fee an operator that uses SSV token can set\\n    /// @param maxFee The new maximum fee (SSV)\\n    function updateMaximumOperatorFee(uint64 maxFee) external;\\n\\n    event OperatorFeeIncreaseLimitUpdated(uint64 value);\\n\\n    event DeclareOperatorFeePeriodUpdated(uint64 value);\\n\\n    event ExecuteOperatorFeePeriodUpdated(uint64 value);\\n\\n    event LiquidationThresholdPeriodUpdated(uint64 value);\\n\\n    event MinimumLiquidationCollateralUpdated(uint256 value);\\n\\n    /**\\n     * @dev Emitted when the network fee is updated.\\n     * @param oldFee The old fee\\n     * @param newFee The new fee\\n     */\\n    event NetworkFeeUpdated(uint256 oldFee, uint256 newFee);\\n\\n    /**\\n     * @dev Emitted when transfer fees are withdrawn.\\n     * @param value The amount of tokens withdrawn.\\n     * @param recipient The recipient address.\\n     */\\n    event NetworkEarningsWithdrawn(uint256 value, address recipient);\\n\\n    event OperatorMaximumFeeUpdated(uint64 maxFee);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVNetwork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"./ISSVNetworkCore.sol\\\";\\nimport \\\"./ISSVOperators.sol\\\";\\nimport \\\"./ISSVClusters.sol\\\";\\nimport \\\"./ISSVDAO.sol\\\";\\nimport \\\"./ISSVViews.sol\\\";\\n\\nimport {SSVModules} from \\\"../libraries/SSVStorage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ISSVNetwork {\\n    function initialize(\\n        IERC20 token_,\\n        ISSVOperators ssvOperators_,\\n        ISSVClusters ssvClusters_,\\n        ISSVDAO ssvDAO_,\\n        ISSVViews ssvViews_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint256 minimumLiquidationCollateral_,\\n        uint32 validatorsPerOperatorLimit_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_,\\n        uint64 operatorMaxFeeIncrease_\\n    ) external;\\n\\n    function getVersion() external pure returns (string memory version);\\n\\n    function setFeeRecipientAddress(address feeRecipientAddress) external;\\n\\n    function updateModule(SSVModules moduleId, address moduleAddress) external;\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVNetworkCore.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\ninterface ISSVNetworkCore {\\n    /***********/\\n    /* Structs */\\n    /***********/\\n\\n    /// @notice Represents a snapshot of an operator's or a DAO's state at a certain block\\n    struct Snapshot {\\n        /// @dev The block number when the snapshot was taken\\n        uint32 block;\\n        /// @dev The last index calculated by the formula index += (currentBlock - block) * fee\\n        uint64 index;\\n        /// @dev Total accumulated earnings calculated by the formula accumulated + lastIndex * validatorCount\\n        uint64 balance;\\n    }\\n\\n    /// @notice Represents an SSV operator\\n    struct Operator {\\n        /// @dev The number of validators associated with this operator\\n        uint32 validatorCount;\\n        /// @dev The fee charged by the operator, set to zero for private operators and cannot be increased once set\\n        uint64 fee;\\n        /// @dev The address of the operator's owner\\n        address owner;\\n        /// @dev Whitelisted flag for this operator\\n        bool whitelisted;\\n        /// @dev The state snapshot of the operator\\n        Snapshot snapshot;\\n    }\\n\\n    /// @notice Represents a request to change an operator's fee\\n    struct OperatorFeeChangeRequest {\\n        /// @dev The new fee proposed by the operator\\n        uint64 fee;\\n        /// @dev The time when the approval period for the fee change begins\\n        uint64 approvalBeginTime;\\n        /// @dev The time when the approval period for the fee change ends\\n        uint64 approvalEndTime;\\n    }\\n\\n    /// @notice Represents a cluster of validators\\n    struct Cluster {\\n        /// @dev The number of validators in the cluster\\n        uint32 validatorCount;\\n        /// @dev The index of network fees related to this cluster\\n        uint64 networkFeeIndex;\\n        /// @dev The last index calculated for the cluster\\n        uint64 index;\\n        /// @dev Flag indicating whether the cluster is active\\n        bool active;\\n        /// @dev The balance of the cluster\\n        uint256 balance;\\n    }\\n\\n    /**********/\\n    /* Errors */\\n    /**********/\\n\\n    error CallerNotOwner(); // 0x5cd83192\\n    error CallerNotWhitelisted(); // 0x8c6e5d71\\n    error FeeTooLow(); // 0x732f9413\\n    error FeeExceedsIncreaseLimit(); // 0x958065d9\\n    error NoFeeDeclared(); // 0x1d226c30\\n    error ApprovalNotWithinTimeframe(); // 0x97e4b518\\n    error OperatorDoesNotExist(); // 0x961e3e8c\\n    error InsufficientBalance(); // 0xf4d678b8\\n    error ValidatorDoesNotExist(); // 0xe51315d2\\n    error ClusterNotLiquidatable(); // 0x60300a8d\\n    error InvalidPublicKeyLength(); // 0x637297a4\\n    error InvalidOperatorIdsLength(); // 0x38186224\\n    error ClusterAlreadyEnabled(); // 0x3babafd2\\n    error ClusterIsLiquidated(); // 0x95a0cf33\\n    error ClusterDoesNotExists(); // 0x185e2b16\\n    error IncorrectClusterState(); // 0x12e04c87\\n    error UnsortedOperatorsList(); // 0xdd020e25\\n    error NewBlockPeriodIsBelowMinimum(); // 0x6e6c9cac\\n    error ExceedValidatorLimit(); // 0x6df5ab76\\n    error TokenTransferFailed(); // 0x045c4b02\\n    error SameFeeChangeNotAllowed(); // 0xc81272f8\\n    error FeeIncreaseNotAllowed(); // 0x410a2b6c\\n    error NotAuthorized(); // 0xea8e4eb5\\n    error OperatorsListNotUnique(); // 0xa5a1ff5d\\n    error OperatorAlreadyExists(); // 0x289c9494\\n    error TargetModuleDoesNotExist(); // 0x8f9195fb\\n    error MaxValueExceeded(); // 0x91aa3017\\n    error FeeTooHigh(); // 0xcd4e6167\\n    error PublicKeysSharesLengthMismatch(); // 0x9ad467b8\\n    error IncorrectValidatorStateWithData(bytes publicKey); // 0x89307938\\n    error ValidatorAlreadyExistsWithData(bytes publicKey); // 0x388e7999\\n\\n    // legacy errors\\n    error ValidatorAlreadyExists(); // 0x8d09a73e\\n    error IncorrectValidatorState(); // 0x2feda3c1\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVOperators.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"./ISSVNetworkCore.sol\\\";\\n\\ninterface ISSVOperators is ISSVNetworkCore {\\n    /// @notice Registers a new operator\\n    /// @param publicKey The public key of the operator\\n    /// @param fee The operator's fee (SSV)\\n    function registerOperator(bytes calldata publicKey, uint256 fee) external returns (uint64);\\n\\n    /// @notice Removes an existing operator\\n    /// @param operatorId The ID of the operator to be removed\\n    function removeOperator(uint64 operatorId) external;\\n\\n    /// @notice Sets the whitelist for an operator\\n    /// @param operatorId The ID of the operator\\n    /// @param whitelisted The address to be whitelisted\\n    function setOperatorWhitelist(uint64 operatorId, address whitelisted) external;\\n\\n    /// @notice Declares the operator's fee\\n    /// @param operatorId The ID of the operator\\n    /// @param fee The fee to be declared (SSV)\\n    function declareOperatorFee(uint64 operatorId, uint256 fee) external;\\n\\n    /// @notice Executes the operator's fee\\n    /// @param operatorId The ID of the operator\\n    function executeOperatorFee(uint64 operatorId) external;\\n\\n    /// @notice Cancels the declared operator's fee\\n    /// @param operatorId The ID of the operator\\n    function cancelDeclaredOperatorFee(uint64 operatorId) external;\\n\\n    /// @notice Reduces the operator's fee\\n    /// @param operatorId The ID of the operator\\n    /// @param fee The new Operator's fee (SSV)\\n    function reduceOperatorFee(uint64 operatorId, uint256 fee) external;\\n\\n    /// @notice Withdraws operator earnings\\n    /// @param operatorId The ID of the operator\\n    /// @param tokenAmount The amount of tokens to withdraw (SSV)\\n    function withdrawOperatorEarnings(uint64 operatorId, uint256 tokenAmount) external;\\n\\n    /// @notice Withdraws all operator earnings\\n    /// @param operatorId The ID of the operator\\n    function withdrawAllOperatorEarnings(uint64 operatorId) external;\\n\\n    /**\\n     * @dev Emitted when a new operator has been added.\\n     * @param operatorId operator's ID.\\n     * @param owner Operator's ethereum address that can collect fees.\\n     * @param publicKey Operator's public key. Will be used to encrypt secret shares of validators keys.\\n     * @param fee Operator's fee.\\n     */\\n    event OperatorAdded(uint64 indexed operatorId, address indexed owner, bytes publicKey, uint256 fee);\\n\\n    /**\\n     * @dev Emitted when operator has been removed.\\n     * @param operatorId operator's ID.\\n     */\\n    event OperatorRemoved(uint64 indexed operatorId);\\n\\n    /**\\n     * @dev Emitted when the whitelist of an operator is updated.\\n     * @param operatorId operator's ID.\\n     * @param whitelisted operator's new whitelisted address.\\n     */\\n    event OperatorWhitelistUpdated(uint64 indexed operatorId, address whitelisted);\\n    event OperatorFeeDeclared(address indexed owner, uint64 indexed operatorId, uint256 blockNumber, uint256 fee);\\n\\n    event OperatorFeeDeclarationCancelled(address indexed owner, uint64 indexed operatorId);\\n    /**\\n     * @dev Emitted when an operator's fee is updated.\\n     * @param owner Operator's owner.\\n     * @param blockNumber from which block number.\\n     * @param fee updated fee value.\\n     */\\n    event OperatorFeeExecuted(address indexed owner, uint64 indexed operatorId, uint256 blockNumber, uint256 fee);\\n    event OperatorWithdrawn(address indexed owner, uint64 indexed operatorId, uint256 value);\\n    event FeeRecipientAddressUpdated(address indexed owner, address recipientAddress);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/ISSVViews.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"./ISSVNetworkCore.sol\\\";\\n\\ninterface ISSVViews is ISSVNetworkCore {\\n    /// @notice Gets the validator status\\n    /// @param owner The address of the validator's owner\\n    /// @param publicKey The public key of the validator\\n    /// @return active A boolean indicating if the validator is active. If it does not exist, returns false.\\n    function getValidator(address owner, bytes calldata publicKey) external view returns (bool);\\n\\n    /// @notice Gets the operator fee\\n    /// @param operatorId The ID of the operator\\n    /// @return fee The fee associated with the operator (SSV). If the operator does not exist, the returned value is 0.\\n    function getOperatorFee(uint64 operatorId) external view returns (uint256 fee);\\n\\n    /// @notice Gets the declared operator fee\\n    /// @param operatorId The ID of the operator\\n    /// @return isFeeDeclared A boolean indicating if the fee is declared\\n    /// @return fee The declared operator fee (SSV)\\n    /// @return approvalBeginTime The time when the fee approval process begins\\n    /// @return approvalEndTime The time when the fee approval process ends\\n    function getOperatorDeclaredFee(\\n        uint64 operatorId\\n    ) external view returns (bool isFeeDeclared, uint256 fee, uint64 approvalBeginTime, uint64 approvalEndTime);\\n\\n    /// @notice Gets operator details by ID\\n    /// @param operatorId The ID of the operator\\n    /// @return owner The owner of the operator\\n    /// @return fee The fee associated with the operator (SSV)\\n    /// @return validatorCount The count of validators associated with the operator\\n    /// @return whitelisted The whitelisted address of the operator, if any\\n    /// @return isPrivate A boolean indicating if the operator is private\\n    /// @return active A boolean indicating if the operator is active\\n    function getOperatorById(\\n        uint64 operatorId\\n    )\\n        external\\n        view\\n        returns (address owner, uint256 fee, uint32 validatorCount, address whitelisted, bool isPrivate, bool active);\\n\\n    /// @notice Checks if the cluster can be liquidated\\n    /// @param owner The owner address of the cluster\\n    /// @param operatorIds The IDs of the operators in the cluster\\n    /// @return isLiquidatable A boolean indicating if the cluster can be liquidated\\n    function isLiquidatable(\\n        address owner,\\n        uint64[] calldata operatorIds,\\n        Cluster memory cluster\\n    ) external view returns (bool isLiquidatable);\\n\\n    /// @notice Checks if the cluster is liquidated\\n    /// @param owner The owner address of the cluster\\n    /// @param operatorIds The IDs of the operators in the cluster\\n    /// @return isLiquidated A boolean indicating if the cluster is liquidated\\n    function isLiquidated(\\n        address owner,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external view returns (bool isLiquidated);\\n\\n    /// @notice Gets the burn rate of the cluster\\n    /// @param owner The owner address of the cluster\\n    /// @param operatorIds The IDs of the operators in the cluster\\n    /// @return burnRate The burn rate of the cluster (SSV)\\n    function getBurnRate(\\n        address owner,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external view returns (uint256 burnRate);\\n\\n    /// @notice Gets operator earnings\\n    /// @param operatorId The ID of the operator\\n    /// @return earnings The earnings associated with the operator (SSV)\\n    function getOperatorEarnings(uint64 operatorId) external view returns (uint256 earnings);\\n\\n    /// @notice Gets the balance of the cluster\\n    /// @param owner The owner address of the cluster\\n    /// @param operatorIds The IDs of the operators in the cluster\\n    /// @return balance The balance of the cluster (SSV)\\n    function getBalance(\\n        address owner,\\n        uint64[] memory operatorIds,\\n        Cluster memory cluster\\n    ) external view returns (uint256 balance);\\n\\n    /// @notice Gets the network fee\\n    /// @return networkFee The fee associated with the network (SSV)\\n    function getNetworkFee() external view returns (uint256 networkFee);\\n\\n    /// @notice Gets the network earnings\\n    /// @return networkEarnings The earnings associated with the network (SSV)\\n    function getNetworkEarnings() external view returns (uint256 networkEarnings);\\n\\n    /// @notice Gets the operator fee increase limit\\n    /// @return The maximum limit of operator fee increase\\n    function getOperatorFeeIncreaseLimit() external view returns (uint64);\\n\\n    /// @notice Gets the operator maximum fee for operators that use SSV token\\n    /// @return The maximum fee value (SSV)\\n    function getMaximumOperatorFee() external view returns (uint64);\\n\\n    /// @notice Gets the periods of operator fee declaration and execution\\n    /// @return The period for declaring operator fee\\n    /// @return The period for executing operator fee\\n    function getOperatorFeePeriods() external view returns (uint64, uint64);\\n\\n    /// @notice Gets the liquidation threshold period\\n    /// @return blocks The number of blocks for the liquidation threshold period\\n    function getLiquidationThresholdPeriod() external view returns (uint64 blocks);\\n\\n    /// @notice Gets the minimum liquidation collateral\\n    /// @return amount The minimum amount of collateral for liquidation (SSV)\\n    function getMinimumLiquidationCollateral() external view returns (uint256 amount);\\n\\n    /// @notice Gets the maximum limit of validators per operator\\n    /// @return validators The maximum number of validators per operator\\n    function getValidatorsPerOperatorLimit() external view returns (uint32 validators);\\n\\n    /// @notice Gets the total number of validators in the network\\n    /// @return validatorsCount The total number of validators in the network\\n    function getNetworkValidatorsCount() external view returns (uint32 validatorsCount);\\n\\n    /// @notice Gets the version of the contract\\n    /// @return The version of the contract\\n    function getVersion() external view returns (string memory);\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/CoreLib.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"./SSVStorage.sol\\\";\\n\\nlibrary CoreLib {\\n    event ModuleUpgraded(SSVModules indexed moduleId, address moduleAddress);\\n\\n    function getVersion() internal pure returns (string memory) {\\n        return \\\"v1.1.0\\\";\\n    }\\n\\n    function transferBalance(address to, uint256 amount) internal {\\n        if (!SSVStorage.load().token.transfer(to, amount)) {\\n            revert ISSVNetworkCore.TokenTransferFailed();\\n        }\\n    }\\n\\n    function deposit(uint256 amount) internal {\\n        if (!SSVStorage.load().token.transferFrom(msg.sender, address(this), amount)) {\\n            revert ISSVNetworkCore.TokenTransferFailed();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        if (account == address(0)) {\\n            return false;\\n        }\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n\\n    function setModuleContract(SSVModules moduleId, address moduleAddress) internal {\\n        if (!isContract(moduleAddress)) revert ISSVNetworkCore.TargetModuleDoesNotExist();\\n\\n        SSVStorage.load().ssvContracts[moduleId] = moduleAddress;\\n        emit ModuleUpgraded(moduleId, moduleAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SSVStorage.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"../interfaces/ISSVNetworkCore.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nenum SSVModules {\\n    SSV_OPERATORS,\\n    SSV_CLUSTERS,\\n    SSV_DAO,\\n    SSV_VIEWS\\n}\\n\\n/// @title SSV Network Storage Data\\n/// @notice Represents all operational state required by the SSV Network\\nstruct StorageData {\\n    /// @notice Maps each validator's public key to its hashed representation of: operator Ids used by the validator and active / inactive flag (uses LSB)\\n    mapping(bytes32 => bytes32) validatorPKs;\\n    /// @notice Maps each cluster's bytes32 identifier to its hashed representation of ISSVNetworkCore.Cluster\\n    mapping(bytes32 => bytes32) clusters;\\n    /// @notice Maps each operator's public key to its corresponding ID\\n    mapping(bytes32 => uint64) operatorsPKs;\\n    /// @notice Maps each SSVModules' module to its corresponding contract address\\n    mapping(SSVModules => address) ssvContracts;\\n    /// @notice Operators' whitelist: Maps each operator's ID to its corresponding whitelisted Ethereum address\\n    mapping(uint64 => address) operatorsWhitelist;\\n    /// @notice Maps each operator's ID to its corresponding operator fee change request data\\n    mapping(uint64 => ISSVNetworkCore.OperatorFeeChangeRequest) operatorFeeChangeRequests;\\n    /// @notice Maps each operator's ID to its corresponding operator data\\n    mapping(uint64 => ISSVNetworkCore.Operator) operators;\\n    /// @notice The SSV token used within the network (fees, rewards)\\n    IERC20 token;\\n    /// @notice Counter keeping track of the last Operator ID issued\\n    Counters.Counter lastOperatorId;\\n}\\n\\nlibrary SSVStorage {\\n    uint256 constant private SSV_STORAGE_POSITION = uint256(keccak256(\\\"ssv.network.storage.main\\\")) - 1;\\n\\n    function load() internal pure returns (StorageData storage sd) {\\n        uint256 position = SSV_STORAGE_POSITION;\\n        assembly {\\n            sd.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/SSVStorageProtocol.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\n/// @title SSV Network Storage Protocol\\n/// @notice Represents the operational settings and parameters required by the SSV Network\\nstruct StorageProtocol {\\n    /// @notice The block number when the network fee index was last updated\\n    uint32 networkFeeIndexBlockNumber;\\n    /// @notice The count of validators governed by the DAO\\n    uint32 daoValidatorCount;\\n    /// @notice The block number when the DAO index was last updated\\n    uint32 daoIndexBlockNumber;\\n    /// @notice The maximum limit of validators per operator\\n    uint32 validatorsPerOperatorLimit;\\n    /// @notice The current network fee value\\n    uint64 networkFee;\\n    /// @notice The current network fee index value\\n    uint64 networkFeeIndex;\\n    /// @notice The current balance of the DAO\\n    uint64 daoBalance;\\n    /// @notice The minimum number of blocks before a liquidation event can be triggered\\n    uint64 minimumBlocksBeforeLiquidation;\\n    /// @notice The minimum collateral required for liquidation\\n    uint64 minimumLiquidationCollateral;\\n    /// @notice The period in which an operator can declare a fee change\\n    uint64 declareOperatorFeePeriod;\\n    /// @notice The period in which an operator fee change can be executed\\n    uint64 executeOperatorFeePeriod;\\n    /// @notice The maximum increase in operator fee that is allowed (percentage)\\n    uint64 operatorMaxFeeIncrease;\\n    /// @notice The maximum value in operator fee that is allowed (SSV)\\n    uint64 operatorMaxFee;\\n}\\n\\nlibrary SSVStorageProtocol {\\n    uint256 constant private SSV_STORAGE_POSITION = uint256(keccak256(\\\"ssv.network.storage.protocol\\\")) - 1;\\n\\n    function load() internal pure returns (StorageProtocol storage sd) {\\n        uint256 position = SSV_STORAGE_POSITION;\\n        assembly {\\n            sd.slot := position\\n        }\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/libraries/Types.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nuint256 constant DEDUCTED_DIGITS = 10_000_000;\\n\\nlibrary Types64 {\\n    function expand(uint64 value) internal pure returns (uint256) {\\n        return value * DEDUCTED_DIGITS;\\n    }\\n}\\n\\nlibrary Types256 {\\n    function shrink(uint256 value) internal pure returns (uint64) {\\n        require(value < (2 ** 64 * DEDUCTED_DIGITS), \\\"Max value exceeded\\\");\\n        return uint64(shrinkable(value) / DEDUCTED_DIGITS);\\n    }\\n\\n    function shrinkable(uint256 value) internal pure returns (uint256) {\\n        require(value % DEDUCTED_DIGITS == 0, \\\"Max precision exceeded\\\");\\n        return value;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SSVNetwork.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport \\\"./interfaces/ISSVNetwork.sol\\\";\\n\\nimport \\\"./interfaces/ISSVClusters.sol\\\";\\nimport \\\"./interfaces/ISSVOperators.sol\\\";\\nimport \\\"./interfaces/ISSVDAO.sol\\\";\\nimport \\\"./interfaces/ISSVViews.sol\\\";\\n\\nimport \\\"./libraries/Types.sol\\\";\\nimport \\\"./libraries/CoreLib.sol\\\";\\nimport \\\"./libraries/SSVStorage.sol\\\";\\nimport \\\"./libraries/SSVStorageProtocol.sol\\\";\\n\\nimport \\\"./SSVProxy.sol\\\";\\n\\nimport {SSVModules} from \\\"./libraries/SSVStorage.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\n\\ncontract SSVNetwork is\\n    UUPSUpgradeable,\\n    Ownable2StepUpgradeable,\\n    ISSVNetwork,\\n    ISSVOperators,\\n    ISSVClusters,\\n    ISSVDAO,\\n    SSVProxy\\n{\\n    using Types256 for uint256;\\n\\n    /****************/\\n    /* Initializers */\\n    /****************/\\n\\n    function initialize(\\n        IERC20 token_,\\n        ISSVOperators ssvOperators_,\\n        ISSVClusters ssvClusters_,\\n        ISSVDAO ssvDAO_,\\n        ISSVViews ssvViews_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint256 minimumLiquidationCollateral_,\\n        uint32 validatorsPerOperatorLimit_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_,\\n        uint64 operatorMaxFeeIncrease_\\n    ) external override initializer onlyProxy {\\n        __UUPSUpgradeable_init();\\n        __Ownable_init_unchained();\\n        __SSVNetwork_init_unchained(\\n            token_,\\n            ssvOperators_,\\n            ssvClusters_,\\n            ssvDAO_,\\n            ssvViews_,\\n            minimumBlocksBeforeLiquidation_,\\n            minimumLiquidationCollateral_,\\n            validatorsPerOperatorLimit_,\\n            declareOperatorFeePeriod_,\\n            executeOperatorFeePeriod_,\\n            operatorMaxFeeIncrease_\\n        );\\n    }\\n\\n    function __SSVNetwork_init_unchained(\\n        IERC20 token_,\\n        ISSVOperators ssvOperators_,\\n        ISSVClusters ssvClusters_,\\n        ISSVDAO ssvDAO_,\\n        ISSVViews ssvViews_,\\n        uint64 minimumBlocksBeforeLiquidation_,\\n        uint256 minimumLiquidationCollateral_,\\n        uint32 validatorsPerOperatorLimit_,\\n        uint64 declareOperatorFeePeriod_,\\n        uint64 executeOperatorFeePeriod_,\\n        uint64 operatorMaxFeeIncrease_\\n    ) internal onlyInitializing {\\n        StorageData storage s = SSVStorage.load();\\n        StorageProtocol storage sp = SSVStorageProtocol.load();\\n        s.token = token_;\\n        s.ssvContracts[SSVModules.SSV_OPERATORS] = address(ssvOperators_);\\n        s.ssvContracts[SSVModules.SSV_CLUSTERS] = address(ssvClusters_);\\n        s.ssvContracts[SSVModules.SSV_DAO] = address(ssvDAO_);\\n        s.ssvContracts[SSVModules.SSV_VIEWS] = address(ssvViews_);\\n        sp.minimumBlocksBeforeLiquidation = minimumBlocksBeforeLiquidation_;\\n        sp.minimumLiquidationCollateral = minimumLiquidationCollateral_.shrink();\\n        sp.validatorsPerOperatorLimit = validatorsPerOperatorLimit_;\\n        sp.declareOperatorFeePeriod = declareOperatorFeePeriod_;\\n        sp.executeOperatorFeePeriod = executeOperatorFeePeriod_;\\n        sp.operatorMaxFeeIncrease = operatorMaxFeeIncrease_;\\n    }\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /*****************/\\n    /* UUPS required */\\n    /*****************/\\n\\n    function _authorizeUpgrade(address) internal override onlyOwner {}\\n\\n    /*********************/\\n    /* Fallback function */\\n    /*********************/\\n    fallback() external {\\n        // Delegates the call to the address of the SSV Views module\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_VIEWS]);\\n    }\\n\\n    /*******************************/\\n    /* Operator External Functions */\\n    /*******************************/\\n\\n    function registerOperator(bytes calldata publicKey, uint256 fee) external override returns (uint64 id) {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_OPERATORS]);\\n    }\\n\\n    function removeOperator(uint64 operatorId) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_OPERATORS]);\\n    }\\n\\n    function setOperatorWhitelist(uint64 operatorId, address whitelisted) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_OPERATORS]);\\n    }\\n\\n    function declareOperatorFee(uint64 operatorId, uint256 fee) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_OPERATORS]);\\n    }\\n\\n    function executeOperatorFee(uint64 operatorId) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_OPERATORS]);\\n    }\\n\\n    function cancelDeclaredOperatorFee(uint64 operatorId) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_OPERATORS]);\\n    }\\n\\n    function reduceOperatorFee(uint64 operatorId, uint256 fee) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_OPERATORS]);\\n    }\\n\\n    function withdrawOperatorEarnings(uint64 operatorId, uint256 amount) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_OPERATORS]);\\n    }\\n\\n    function withdrawAllOperatorEarnings(uint64 operatorId) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_OPERATORS]);\\n    }\\n\\n    /*******************************/\\n    /* Address External Functions */\\n    /*******************************/\\n\\n    function setFeeRecipientAddress(address recipientAddress) external override {\\n        emit FeeRecipientAddressUpdated(msg.sender, recipientAddress);\\n    }\\n\\n    /*******************************/\\n    /* Validator External Functions */\\n    /*******************************/\\n\\n    function registerValidator(\\n        bytes calldata publicKey,\\n        uint64[] calldata operatorIds,\\n        bytes calldata sharesData,\\n        uint256 amount,\\n        ISSVNetworkCore.Cluster memory cluster\\n    ) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function bulkRegisterValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] calldata operatorIds,\\n        bytes[] calldata sharesData,\\n        uint256 amount,\\n        ISSVNetworkCore.Cluster memory cluster\\n    ) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function removeValidator(\\n        bytes calldata publicKey,\\n        uint64[] calldata operatorIds,\\n        ISSVNetworkCore.Cluster memory cluster\\n    ) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function bulkRemoveValidator(\\n        bytes[] calldata publicKeys,\\n        uint64[] calldata operatorIds,\\n        Cluster memory cluster\\n    ) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function liquidate(\\n        address clusterOwner,\\n        uint64[] calldata operatorIds,\\n        ISSVNetworkCore.Cluster memory cluster\\n    ) external {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function reactivate(\\n        uint64[] calldata operatorIds,\\n        uint256 amount,\\n        ISSVNetworkCore.Cluster memory cluster\\n    ) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function deposit(\\n        address clusterOwner,\\n        uint64[] calldata operatorIds,\\n        uint256 amount,\\n        ISSVNetworkCore.Cluster memory cluster\\n    ) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function withdraw(\\n        uint64[] calldata operatorIds,\\n        uint256 amount,\\n        ISSVNetworkCore.Cluster memory cluster\\n    ) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function exitValidator(bytes calldata publicKey, uint64[] calldata operatorIds) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function bulkExitValidator(bytes[] calldata publicKeys, uint64[] calldata operatorIds) external override {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_CLUSTERS]);\\n    }\\n\\n    function updateNetworkFee(uint256 fee) external override onlyOwner {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_DAO]);\\n    }\\n\\n    function withdrawNetworkEarnings(uint256 amount) external override onlyOwner {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_DAO]);\\n    }\\n\\n    function updateOperatorFeeIncreaseLimit(uint64 percentage) external override onlyOwner {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_DAO]);\\n    }\\n\\n    function updateDeclareOperatorFeePeriod(uint64 timeInSeconds) external override onlyOwner {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_DAO]);\\n    }\\n\\n    function updateExecuteOperatorFeePeriod(uint64 timeInSeconds) external override onlyOwner {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_DAO]);\\n    }\\n\\n    function updateLiquidationThresholdPeriod(uint64 blocks) external override onlyOwner {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_DAO]);\\n    }\\n\\n    function updateMinimumLiquidationCollateral(uint256 amount) external override onlyOwner {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_DAO]);\\n    }\\n\\n    function updateMaximumOperatorFee(uint64 maxFee) external override onlyOwner {\\n        _delegate(SSVStorage.load().ssvContracts[SSVModules.SSV_DAO]);\\n    }\\n\\n    function getVersion() external pure override returns (string memory version) {\\n        return CoreLib.getVersion();\\n    }\\n\\n    /*******************************/\\n    /* Upgrade Modules Function    */\\n    /*******************************/\\n    function updateModule(SSVModules moduleId, address moduleAddress) external onlyOwner {\\n        CoreLib.setModuleContract(moduleId, moduleAddress);\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/SSVProxy.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity 0.8.18;\\n\\nimport {SSVModules, SSVStorage, StorageData} from \\\"./libraries/SSVStorage.sol\\\";\\n\\nabstract contract SSVProxy {\\n\\n    function _delegate(address implementation) internal {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 10000\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ApprovalNotWithinTimeframe\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotWhitelisted\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClusterAlreadyEnabled\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClusterDoesNotExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClusterIsLiquidated\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ClusterNotLiquidatable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExceedValidatorLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeExceedsIncreaseLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeIncreaseNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FeeTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectClusterState\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectValidatorState\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"IncorrectValidatorStateWithData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidOperatorIdsLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicKeyLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MaxValueExceeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NewBlockPeriodIsBelowMinimum\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFeeDeclared\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OperatorsListNotUnique\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"PublicKeysSharesLengthMismatch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SameFeeChangeNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TargetModuleDoesNotExist\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TokenTransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"UnsortedOperatorsList\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidatorAlreadyExists\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorAlreadyExistsWithData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ValidatorDoesNotExist\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ClusterDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ClusterLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ClusterReactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ClusterWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"DeclareOperatorFeePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"ExecuteOperatorFeePeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"}],\"name\":\"FeeRecipientAddressUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"LiquidationThresholdPeriodUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"MinimumLiquidationCollateralUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"NetworkEarningsWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"NetworkFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OperatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"}],\"name\":\"OperatorFeeDeclarationCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OperatorFeeDeclared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"OperatorFeeExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"value\",\"type\":\"uint64\"}],\"name\":\"OperatorFeeIncreaseLimitUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"maxFee\",\"type\":\"uint64\"}],\"name\":\"OperatorMaximumFeeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"}],\"name\":\"OperatorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"}],\"name\":\"OperatorWhitelistUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"OperatorWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"shares\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ValidatorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"}],\"name\":\"ValidatorExited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"ValidatorRemoved\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"bulkExitValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes[]\",\"name\":\"sharesData\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"bulkRegisterValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"publicKeys\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"bulkRemoveValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"}],\"name\":\"cancelDeclaredOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"declareOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clusterOwner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"}],\"name\":\"executeOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"}],\"name\":\"exitValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"contract ISSVOperators\",\"name\":\"ssvOperators_\",\"type\":\"address\"},{\"internalType\":\"contract ISSVClusters\",\"name\":\"ssvClusters_\",\"type\":\"address\"},{\"internalType\":\"contract ISSVDAO\",\"name\":\"ssvDAO_\",\"type\":\"address\"},{\"internalType\":\"contract ISSVViews\",\"name\":\"ssvViews_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"minimumBlocksBeforeLiquidation_\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"minimumLiquidationCollateral_\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"validatorsPerOperatorLimit_\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"declareOperatorFeePeriod_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"executeOperatorFeePeriod_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"operatorMaxFeeIncrease_\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"clusterOwner\",\"type\":\"address\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"reactivate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"reduceOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"registerOperator\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"id\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"bytes\",\"name\":\"sharesData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"registerValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"}],\"name\":\"removeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"publicKey\",\"type\":\"bytes\"},{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"removeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipientAddress\",\"type\":\"address\"}],\"name\":\"setFeeRecipientAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"whitelisted\",\"type\":\"address\"}],\"name\":\"setOperatorWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timeInSeconds\",\"type\":\"uint64\"}],\"name\":\"updateDeclareOperatorFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"timeInSeconds\",\"type\":\"uint64\"}],\"name\":\"updateExecuteOperatorFeePeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"blocks\",\"type\":\"uint64\"}],\"name\":\"updateLiquidationThresholdPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"maxFee\",\"type\":\"uint64\"}],\"name\":\"updateMaximumOperatorFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"updateMinimumLiquidationCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum SSVModules\",\"name\":\"moduleId\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"moduleAddress\",\"type\":\"address\"}],\"name\":\"updateModule\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"updateNetworkFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"percentage\",\"type\":\"uint64\"}],\"name\":\"updateOperatorFeeIncreaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64[]\",\"name\":\"operatorIds\",\"type\":\"uint64[]\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint32\",\"name\":\"validatorCount\",\"type\":\"uint32\"},{\"internalType\":\"uint64\",\"name\":\"networkFeeIndex\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"index\",\"type\":\"uint64\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"internalType\":\"struct ISSVNetworkCore.Cluster\",\"name\":\"cluster\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"}],\"name\":\"withdrawAllOperatorEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNetworkEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"operatorId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawOperatorEarnings\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "SSVNetwork", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "10000", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}