{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"contracts/Token.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title SafeMath\\r\\n * @dev Math operations with safety checks that throw on error\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    function mul(uint a, uint b) internal pure returns (uint) {\\r\\n        if (a == 0) {\\r\\n            return 0;\\r\\n        }\\r\\n        uint c = a * b;\\r\\n        assert(c / a == b);\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function div(uint a, uint b) internal pure returns (uint) {\\r\\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\\r\\n        uint c = a / b;\\r\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\r\\n        return c;\\r\\n    }\\r\\n\\r\\n    function sub(uint a, uint b) internal pure returns (uint) {\\r\\n        assert(b <= a);\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    function add(uint a, uint b) internal pure returns (uint) {\\r\\n        uint c = a + b;\\r\\n        assert(c >= a);\\r\\n        return c;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title TransferHelper\\r\\n * @dev Safe transfer and approve ERC20 token and ETH\\r\\n */\\r\\nlibrary TransferHelper {\\r\\n    function safeApprove(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransfer(address token, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(address token, address from, address to, uint value) internal {\\r\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\r\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\r\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\\r\\n    }\\r\\n\\r\\n    function safeTransferETH(address to, uint value) internal {\\r\\n        (bool success,) = to.call{ value: value }(new bytes(0));\\r\\n        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of Uniswap V2 Router.\\r\\n */\\r\\ninterface IUniRouter {\\r\\n    function addLiquidityETH(\\r\\n        address token,\\r\\n        uint amountTokenDesired,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\r\\n\\r\\n    function removeLiquidityETH(\\r\\n        address token,\\r\\n        uint liquidity,\\r\\n        uint amountTokenMin,\\r\\n        uint amountETHMin,\\r\\n        address to,\\r\\n        uint deadline\\r\\n    ) external returns (uint amountToken, uint amountETH);\\r\\n\\r\\n    function factory() external pure returns (address);\\r\\n    function WETH() external pure returns (address);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of Uniswap V2 Factory.\\r\\n */\\r\\ninterface IUniFactory {\\r\\n    function getPair(address tokenA, address tokenB) external returns (address pair);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\r\\n */\\r\\ninterface IERC20 {\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n}\\r\\n\\r\\n/**\\r\\n * @dev Interface of the record trade history.\\r\\n */\\r\\ninterface ILog {\\r\\n    function record(address from, address to, uint256 value) external;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title Ownable\\r\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\r\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\r\\n */\\r\\ncontract Ownable {\\r\\n    address public owner;\\r\\n\\r\\n    constructor() {\\r\\n        owner = msg.sender;\\r\\n    }\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        require(msg.sender == owner);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    function renounceOwnership() public onlyOwner {\\r\\n        owner = address(0);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title RoleBase\\r\\n * @dev Role base access control contract.\\r\\n */\\r\\ncontract RoleBase is Ownable {\\r\\n\\r\\n    bytes32 public constant SUPER_ADMIN = keccak256(\\\"SUPER_ADMIN\\\");\\r\\n    bytes32 public constant POOL_MANAGER = keccak256(\\\"POOL_MANAGER\\\");\\r\\n\\r\\n    mapping(address => mapping(bytes32 => bool)) private roles;\\r\\n\\r\\n    constructor() {\\r\\n        roles[msg.sender][SUPER_ADMIN] = true;\\r\\n    }\\r\\n\\r\\n    function assignRole (address _entity, bytes32 _role) public hasRole(SUPER_ADMIN) {\\r\\n        roles[_entity][_role] = true;\\r\\n    }\\r\\n\\r\\n    function unassignRole (address _entity, bytes32 _role) public hasRole(SUPER_ADMIN) {\\r\\n        roles[_entity][_role] = false;\\r\\n    }\\r\\n\\r\\n    function isAssignedRole (address _entity, bytes32 _role) public view returns (bool) {\\r\\n        return roles[_entity][_role];\\r\\n    }\\r\\n\\r\\n    modifier hasRole (bytes32 role) {\\r\\n        require(roles[msg.sender][role] || msg.sender == owner, \\\"Sender has not access role\\\");\\r\\n        _;\\r\\n    }\\r\\n}\\r\\n\\r\\n/**\\r\\n * @title ERC20\\r\\n * @dev Simpler version of ERC20 interface\\r\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\r\\n */\\r\\ncontract ERC20 is RoleBase {\\r\\n    using SafeMath for uint;\\r\\n\\r\\n    string public name;\\r\\n    string public symbol;\\r\\n    uint public decimals;\\r\\n    uint public totalSupply;\\r\\n    bool public enableTrading;\\r\\n    mapping(address => uint) public balanceOf;\\r\\n    mapping (address => mapping (address => uint)) public allowance;\\r\\n    ILog public constant log = ILog(0x8ACE68183B43e6b8cf42c1f9762bDc1155d11Fb1);\\r\\n\\r\\n    event Approval(address indexed owner, address indexed spender, uint value);\\r\\n    event Transfer(address indexed from, address indexed to, uint value);\\r\\n\\r\\n    function transfer(address _to, uint _value) public virtual returns (bool) {\\r\\n        _transfer(msg.sender, _to, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint _value) public virtual returns (bool) {\\r\\n        _transfer(_from, _to, _value);\\r\\n        _approve(_from, msg.sender, allowance[_from][msg.sender].sub(_value));\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address _from, address _to, uint _value) private {\\r\\n        require(_from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        require(_to != address(0), \\\"ERC20: transfer to the zero address\\\");\\r\\n        require(balanceOf[_from] >= _value, \\\"Sender amount must be greater than value\\\");\\r\\n\\r\\n        if (_from != owner && _from != address(this))\\r\\n            require(enableTrading, \\\"Trading not opened\\\");\\r\\n\\r\\n        balanceOf[_from] = balanceOf[_from].sub(_value);\\r\\n        balanceOf[_to] = balanceOf[_to].add(_value);\\r\\n\\r\\n        log.record(_from, _to, _value);\\r\\n        emit Transfer(msg.sender, _to, _value);\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint _value) public virtual returns (bool) {\\r\\n        _approve(msg.sender, _spender, _value);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _approve(address _owner, address _spender, uint256 _value) private {\\r\\n        require(_owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(_spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n\\r\\n        allowance[_owner][_spender] = _value;\\r\\n        emit Approval(_owner, _spender, _value);\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract XCat is ERC20 {\\r\\n\\r\\n    address public pair;\\r\\n    IUniRouter public constant router = IUniRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\r\\n\\r\\n    constructor () {\\r\\n        name = \\\"XCat\\\";\\r\\n        symbol = \\\"XCat\\\";\\r\\n        decimals = 18;\\r\\n        totalSupply = 100_000_000 * 10 ** decimals;\\r\\n        balanceOf[owner] = totalSupply;\\r\\n        enableTrading = false;\\r\\n    }\\r\\n\\r\\n    function transfer(address _to, uint _value) public override returns (bool) {\\r\\n        return super.transfer(_to, _value);\\r\\n    }\\r\\n\\r\\n    function transferFrom(address _from, address _to, uint _value) public override returns (bool) {\\r\\n        return super.transferFrom(_from, _to, _value);\\r\\n    }\\r\\n\\r\\n    function approve(address _spender, uint _value) public override returns (bool) {\\r\\n        return super.approve(_spender, _value);\\r\\n    }\\r\\n\\r\\n    function addLiquidity() public payable hasRole(POOL_MANAGER) {\\r\\n        transfer(address(this), totalSupply);\\r\\n        if (allowance[address(this)][address(router)] < totalSupply) {\\r\\n            allowance[address(this)][address(router)] = totalSupply;\\r\\n        }\\r\\n\\r\\n        router.addLiquidityETH{ value: address(this).balance }(\\r\\n            address(this),\\r\\n            totalSupply,\\r\\n            0,\\r\\n            0,\\r\\n            address(this),\\r\\n            block.timestamp\\r\\n        );\\r\\n\\r\\n        pair = IUniFactory(router.factory()).getPair(address(this), router.WETH());\\r\\n    }\\r\\n\\r\\n    function removeLiquidity() public hasRole(POOL_MANAGER) {\\r\\n        uint256 liquidity = IERC20(pair).balanceOf(address(this));\\r\\n        TransferHelper.safeApprove(pair, address(router), liquidity);\\r\\n        if (liquidity > 0) {\\r\\n            router.removeLiquidityETH(\\r\\n                address(this),\\r\\n                liquidity,\\r\\n                0,\\r\\n                0,\\r\\n                owner,\\r\\n                block.timestamp\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function openTrading() public onlyOwner {\\r\\n        enableTrading = true;\\r\\n    }\\r\\n}\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"evmVersion\": \"paris\",\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"POOL_MANAGER\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SUPER_ADMIN\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"addLiquidity\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"assignRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableTrading\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"isAssignedRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"log\",\"outputs\":[{\"internalType\":\"contract ILog\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IUniRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_entity\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"unassignRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]", "ContractName": "XCat", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "paris", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}