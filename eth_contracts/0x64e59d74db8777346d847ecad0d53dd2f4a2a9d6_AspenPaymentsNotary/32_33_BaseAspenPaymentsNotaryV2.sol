// SPDX-License-Identifier: Apache-2.0

// Generated by impl.ts. Will be overwritten.
// Filename: './BaseAspenPaymentsNotaryV2.sol'

pragma solidity ^0.8.4;

import "../../api/impl/IPaymentsNotary.sol";
import "../../api/IAspenFeatures.sol";
import "../../api/IAspenVersioned.sol";
import "../../api/payments/IPaymentNotary.sol";

/// Inherit from this base to implement introspection
abstract contract BaseAspenPaymentsNotaryV2 is IAspenFeaturesV1, IAspenVersionedV2, IPaymentNotaryV2 {
    function supportedFeatureCodes() override public pure returns (uint256[] memory features) {
        features = new uint256[](3);
        /// IAspenFeatures.sol:IAspenFeaturesV1
        features[0] = 0x6efbb19b;
        /// IAspenVersioned.sol:IAspenVersionedV2
        features[1] = 0xe4144b09;
        /// payments/IPaymentNotary.sol:IPaymentNotaryV2
        features[2] = 0x88c19781;
    }

    /// This needs to be public to be callable from initialize via delegatecall
    function minorVersion() virtual override public pure returns (uint256 minor, uint256 patch);

    function implementationVersion() override public pure returns (uint256 major, uint256 minor, uint256 patch) {
        (minor, patch) = minorVersion();
        major = 2;
    }

    function implementationInterfaceId() virtual override public pure returns (string memory interfaceId) {
        interfaceId = "impl/IPaymentsNotary.sol:IAspenPaymentsNotaryV2";
    }

    function supportsInterface(bytes4 interfaceID) virtual override public view returns (bool) {
        return (interfaceID != 0x0) && ((interfaceID != 0xffffffff) && ((interfaceID == 0x01ffc9a7) || ((interfaceID == type(IAspenFeaturesV1).interfaceId) || ((interfaceID == type(IAspenVersionedV2).interfaceId) || ((interfaceID == type(IPaymentNotaryV2).interfaceId) || (interfaceID == type(IAspenPaymentsNotaryV2).interfaceId))))));
    }

    function isIAspenFeaturesV1() override public pure returns (bool) {
        return true;
    }
}