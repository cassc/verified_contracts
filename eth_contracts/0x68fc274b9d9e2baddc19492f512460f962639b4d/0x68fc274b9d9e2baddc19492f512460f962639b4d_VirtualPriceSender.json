{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\r\n    },\r\n    \"@openzeppelin/contracts/utils/Context.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/I3Pool.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity 0.8.17;\\n\\ninterface I3Pool {\\n    function get_virtual_price() external view returns (uint256);\\n}\\n\"\r\n    },\r\n    \"contracts/interfaces/IAddressBook.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity 0.8.17;\\n\\n\\ninterface IAddressBook {\\n    /// @dev returns portal by given chainId\\n    function portal(uint64 chainId) external view returns (address);\\n\\n    /// @dev returns synthesis by given chainId\\n    function synthesis(uint64 chainId) external view returns (address);\\n\\n    /// @dev returns router by given chainId\\n    function router(uint64 chainId) external view returns (address);\\n\\n    /// @dev returns whitelist\\n    function whitelist() external view returns (address);\\n\\n    /// @dev returns treasury\\n    function treasury() external view returns (address);\\n\\n    /// @dev returns gateKeeper\\n    function gateKeeper() external view returns (address);\\n\\n    /// @dev returns bridge\\n    function bridge() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IGateKeeper.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity 0.8.17;\\n\\n\\ninterface IGateKeeper {\\n\\n    function calculateCost(\\n        address payToken,\\n        uint256 dataLength,\\n        uint64 chainIdTo,\\n        address sender\\n    ) external returns (uint256 amountToPay);\\n\\n    function sendData(\\n        bytes calldata data,\\n        address to,\\n        uint64 chainIdTo,\\n        address payToken\\n    ) external payable;\\n\\n    function getNonce() external view returns (uint256);\\n\\n    function bridge() external view returns (address);\\n}\"\r\n    },\r\n    \"contracts/interfaces/IVirtualPriceReceiver.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity 0.8.17;\\n\\n\\ninterface IVirtualPriceReceiver {\\n    \\n    function receiveVirtualPrice(uint256 _virtualPriceStable, uint256 _virtualPriceCrypto, uint64 chainIdFrom) external;\\n}\\n\"\r\n    },\r\n    \"contracts/vp/VirtualPriceSender.sol\": {\r\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\n// Copyright (c) Eywa.Fi, 2021-2023 - all rights reserved\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IGateKeeper.sol\\\";\\nimport \\\"../interfaces/IAddressBook.sol\\\";\\nimport \\\"../interfaces/IVirtualPriceReceiver.sol\\\";\\nimport \\\"../interfaces/I3Pool.sol\\\";\\n\\n\\ncontract VirtualPriceSender is Ownable {\\n\\n    /// @dev addressBook contract\\n    address public addressBook;\\n    /// @dev stablePool from which get virtual price\\n    address public stablePool;\\n    /// @dev cryptoPool from which get virtual price\\n    address public cryptoPool;\\n    /// @dev virtual price receiver contract where send virtual price\\n    address public virtualPriceReceiver;\\n    /// @dev chainId of virtual price receiver contract where send virtual price\\n    uint64 public virtualPriceReceiverChainId;\\n\\n    event PriceSent(uint256 virtualPriceStable, uint256 virtualPriceCrypto);\\n    \\n    constructor(address addressBook_, address stablePool_, address cryptoPool_, address virtualPriceReceiver_, uint64 virtualPriceReceiverChainId_) {\\n        require(addressBook_ != address(0), \\\"VirtualPriceReceiver: zero addressBook address\\\");\\n        addressBook = addressBook_;\\n        stablePool = stablePool_;\\n        cryptoPool = cryptoPool_;\\n        virtualPriceReceiver = virtualPriceReceiver_;\\n        virtualPriceReceiverChainId = virtualPriceReceiverChainId_;\\n    }\\n\\n    function setAddressBook(address addressBook_) external onlyOwner {\\n        addressBook = addressBook_;\\n    }\\n\\n    function setStablePool(address newPool) external onlyOwner {\\n        stablePool = newPool;\\n    }\\n\\n    function setCryptoPool(address newPool) external onlyOwner {\\n        cryptoPool = newPool;\\n    }\\n\\n    function setVirtualPriceReceiver(address newVirtualPriceReceiver) external onlyOwner {\\n        virtualPriceReceiver = newVirtualPriceReceiver;\\n    }\\n\\n    function setVirtualPriceReceiverChainId(uint64 newVirtualPriceReceiverChainId) external onlyOwner {\\n        virtualPriceReceiverChainId = newVirtualPriceReceiverChainId;\\n    }\\n\\n    function sendVirtualPrice() onlyOwner public {\\n        I3Pool poolImpl = I3Pool(stablePool);\\n        uint256 virtualPriceStable = poolImpl.get_virtual_price();\\n        uint256 virtualPriceCrypto = 0;\\n        if (cryptoPool != address(0)) {\\n            poolImpl = I3Pool(cryptoPool);\\n            virtualPriceCrypto = poolImpl.get_virtual_price();\\n        }\\n\\n        bytes memory out = abi.encodeWithSelector(\\n            IVirtualPriceReceiver.receiveVirtualPrice.selector,\\n            virtualPriceStable,\\n            virtualPriceCrypto,\\n            block.chainid\\n        );\\n        address gateKeeper = IAddressBook(addressBook).gateKeeper();\\n        IGateKeeper gateKeeperImpl = IGateKeeper(gateKeeper);\\n        gateKeeperImpl.sendData(out, virtualPriceReceiver, virtualPriceReceiverChainId, address(0));\\n        emit PriceSent(virtualPriceStable, virtualPriceCrypto);\\n    }\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressBook_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stablePool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cryptoPool_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"virtualPriceReceiver_\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"virtualPriceReceiverChainId_\",\"type\":\"uint64\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"virtualPriceStable\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"virtualPriceCrypto\",\"type\":\"uint256\"}],\"name\":\"PriceSent\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"addressBook\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendVirtualPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addressBook_\",\"type\":\"address\"}],\"name\":\"setAddressBook\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setCryptoPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newPool\",\"type\":\"address\"}],\"name\":\"setStablePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newVirtualPriceReceiver\",\"type\":\"address\"}],\"name\":\"setVirtualPriceReceiver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"newVirtualPriceReceiverChainId\",\"type\":\"uint64\"}],\"name\":\"setVirtualPriceReceiverChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stablePool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualPriceReceiver\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"virtualPriceReceiverChainId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "VirtualPriceSender", "CompilerVersion": "v0.8.17+commit.8df45f5f", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "000000000000000000000000564a0c04877e4ca6f5d0cad8c20522226321d9b0000000000000000000000000390f3595bca2df7d23783dfd126427cceb997bf4000000000000000000000000c4ad29ba4b3c580e6d59105fff484999997675ff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000fa", "EVMVersion": "Default", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}