{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.15;\r\n\r\n/*\r\n\r\n /$$   /$$ /$$$$$$$$       /$$$$$$$$ /$$\r\n| $$  / $$|_____ $$/      | $$_____/|__/\r\n|  $$/ $$/     /$$/       | $$       /$$ /$$$$$$$   /$$$$$$  /$$$$$$$   /$$$$$$$  /$$$$$$\r\n \\  $$$$/     /$$/        | $$$$$   | $$| $$__  $$ |____  $$| $$__  $$ /$$_____/ /$$__  $$\r\n  >$$  $$    /$$/         | $$__/   | $$| $$  \\ $$  /$$$$$$$| $$  \\ $$| $$      | $$$$$$$$\r\n /$$/\\  $$  /$$/          | $$      | $$| $$  | $$ /$$__  $$| $$  | $$| $$      | $$_____/\r\n| $$  \\ $$ /$$/           | $$      | $$| $$  | $$|  $$$$$$$| $$  | $$|  $$$$$$$|  $$$$$$$\r\n|__/  |__/|__/            |__/      |__/|__/  |__/ \\_______/|__/  |__/ \\_______/ \\_______/\r\n\r\nContract: Smart Contract representing the treasury (v3)\r\n\r\nThis contract will NOT be renounced.\r\n\r\nThe following are the only functions that can be called on the contract that affect the contract:\r\n\r\n    function freezeOutlet(Outlet outlet) external onlyOwner {\r\n        require(outlet != Outlet.OTHER_SLOT1 && outlet != Outlet.OTHER_SLOT2 && outlet != Outlet.NONE);\r\n        require(!outletFrozen[outlet]);\r\n        outletFrozen[outlet] = true;\r\n        emit OutletFrozen(outlet);\r\n    }\r\n\r\n    function setOutletRecipient(Outlet outlet, address recipient) external onlyOwner {\r\n        // Check that outlet is not frozen\r\n        require(!outletFrozen[outlet]);\r\n\r\n        // Check that the recipient is not already in use\r\n        require(outletLookup[recipient] == Outlet.NONE);\r\n\r\n        address oldRecipient = outletRecipient[outlet];\r\n        outletLookup[recipient] = outlet;\r\n        outletRecipient[outlet] = recipient;\r\n\r\n        emit OutletRecipientSet(outlet, oldRecipient, recipient);\r\n    }\r\n\r\n    function setSlotShares(uint256 slot1Share, uint256 slot2Share, uint256 rewardPoolShare) external onlyOwner {\r\n        require(slot1Share + slot2Share + rewardPoolShare == 51000);\r\n        divvyUp();\r\n\r\n        uint256 oldOtherSlot1Share = outletShare[Outlet.OTHER_SLOT1];\r\n        uint256 oldOtherSlot2Share = outletShare[Outlet.OTHER_SLOT2];\r\n        uint256 oldRewardPoolShare = outletShare[Outlet.REWARD_POOL];\r\n        outletShare[Outlet.OTHER_SLOT1] = slot1Share;\r\n        outletShare[Outlet.OTHER_SLOT2] = slot2Share;\r\n        outletShare[Outlet.REWARD_POOL] = rewardPoolShare;\r\n\r\n        emit SharesSet(oldOtherSlot1Share, oldOtherSlot2Share, oldRewardPoolShare, slot1Share, slot2Share, rewardPoolShare);\r\n    }\r\n\r\nThese functions will be passed to DAO governance once the ecosystem stabilizes.\r\n\r\n*/\r\n\r\nabstract contract Ownable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    constructor(address owner_) {\r\n        _transferOwnership(owner_);\r\n    }\r\n\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n\r\ninterface IWETH {\r\n    function withdraw(uint) external;\r\n}\r\n\r\ninterface IERC20 {\r\n    function transfer(address to, uint value) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n}\r\n\r\ncontract X7TreasurySplitterV3 is Ownable {\r\n\r\n    enum Outlet {\r\n        NONE,\r\n        PROFITSHARE,\r\n        REWARD_POOL,\r\n        OTHER_SLOT1,\r\n        OTHER_SLOT2\r\n    }\r\n\r\n    uint256 public reservedETH;\r\n    address public WETH;\r\n\r\n    mapping(Outlet => uint256) public outletBalance;\r\n    mapping(Outlet => address) public outletRecipient;\r\n    mapping(Outlet => uint256) public outletShare;\r\n    mapping(address => Outlet) public outletLookup;\r\n    mapping(Outlet => bool) public outletFrozen;\r\n\r\n    event OutletRecipientSet(Outlet indexed outlet, address indexed oldRecipient, address indexed newRecipient);\r\n    event SharesSet(uint256 oldOtherSlot1Share, uint256 oldOtherSlot2Share, uint256 oldRewardPoolShare, uint256 newOtherSlot1Share, uint256 newOtherSlot2Share, uint256 newRewardPoolShare);\r\n    event OutletFrozen(Outlet indexed outlet);\r\n\r\n    constructor (address weth) Ownable(msg.sender) {\r\n        WETH = weth;\r\n\r\n        outletShare[Outlet.PROFITSHARE] = 49000;\r\n        outletShare[Outlet.REWARD_POOL] = 6000;\r\n        outletShare[Outlet.OTHER_SLOT1] = 15000;\r\n        outletShare[Outlet.OTHER_SLOT2] = 30000;\r\n\r\n        // Profit Share\r\n        outletRecipient[Outlet.PROFITSHARE] = address(0x0000000000000000000000000000000000000000);\r\n\r\n        // Reward Pool\r\n        outletRecipient[Outlet.REWARD_POOL] = address(0x0000000000000000000000000000000000000000);\r\n\r\n        // Initial Community Gnosis Wallet\r\n        outletRecipient[Outlet.OTHER_SLOT1] = address(0x0000000000000000000000000000000000000000);\r\n\r\n        // Initial Project Gnosis Wallet\r\n        outletRecipient[Outlet.OTHER_SLOT2] = address(0x0000000000000000000000000000000000000000);\r\n    }\r\n\r\n    receive () external payable {}\r\n\r\n    function divvyUp() public {\r\n        uint256 newETH = address(this).balance - reservedETH;\r\n\r\n        if (newETH > 0) {\r\n            outletBalance[Outlet.PROFITSHARE] += newETH * outletShare[Outlet.PROFITSHARE] / 100000;\r\n            outletBalance[Outlet.REWARD_POOL] += newETH * outletShare[Outlet.REWARD_POOL] / 100000;\r\n            outletBalance[Outlet.OTHER_SLOT1] += newETH * outletShare[Outlet.OTHER_SLOT1] / 100000;\r\n\r\n            outletBalance[Outlet.OTHER_SLOT2] = address(this).balance -\r\n            outletBalance[Outlet.PROFITSHARE] -\r\n            outletBalance[Outlet.OTHER_SLOT1] -\r\n            outletBalance[Outlet.REWARD_POOL];\r\n\r\n            reservedETH = address(this).balance;\r\n        }\r\n    }\r\n\r\n    function freezeOutlet(Outlet outlet) external onlyOwner {\r\n        require(outlet != Outlet.OTHER_SLOT1 && outlet != Outlet.OTHER_SLOT2 && outlet != Outlet.NONE);\r\n        require(!outletFrozen[outlet]);\r\n        outletFrozen[outlet] = true;\r\n        emit OutletFrozen(outlet);\r\n    }\r\n\r\n    function setOutletRecipient(Outlet outlet, address recipient) external onlyOwner {\r\n        // Check that outlet is not frozen\r\n        require(!outletFrozen[outlet]);\r\n\r\n        // Check that the recipient is not already in use\r\n        require(outletLookup[recipient] == Outlet.NONE);\r\n\r\n        address oldRecipient = outletRecipient[outlet];\r\n        outletLookup[recipient] = outlet;\r\n        outletRecipient[outlet] = recipient;\r\n\r\n        emit OutletRecipientSet(outlet, oldRecipient, recipient);\r\n    }\r\n\r\n    function setSlotShares(uint256 slot1Share, uint256 slot2Share, uint256 rewardPoolShare) external onlyOwner {\r\n        require(slot1Share + slot2Share + rewardPoolShare == 51000);\r\n        divvyUp();\r\n\r\n        uint256 oldOtherSlot1Share = outletShare[Outlet.OTHER_SLOT1];\r\n        uint256 oldOtherSlot2Share = outletShare[Outlet.OTHER_SLOT2];\r\n        uint256 oldRewardPoolShare = outletShare[Outlet.REWARD_POOL];\r\n        outletShare[Outlet.OTHER_SLOT1] = slot1Share;\r\n        outletShare[Outlet.OTHER_SLOT2] = slot2Share;\r\n        outletShare[Outlet.REWARD_POOL] = rewardPoolShare;\r\n\r\n        emit SharesSet(oldOtherSlot1Share, oldOtherSlot2Share, oldRewardPoolShare, slot1Share, slot2Share, rewardPoolShare);\r\n    }\r\n\r\n    function takeBalance() external {\r\n        Outlet outlet = outletLookup[msg.sender];\r\n        require(outlet != Outlet.NONE);\r\n        divvyUp();\r\n        _sendBalance(outlet);\r\n    }\r\n\r\n    function takeCurrentBalance() external {\r\n        Outlet outlet = outletLookup[msg.sender];\r\n        require(outlet != Outlet.NONE);\r\n        _sendBalance(outlet);\r\n    }\r\n\r\n    function pushAll() public {\r\n        divvyUp();\r\n        _sendBalance(Outlet.PROFITSHARE);\r\n        _sendBalance(Outlet.REWARD_POOL);\r\n        _sendBalance(Outlet.OTHER_SLOT1);\r\n        _sendBalance(Outlet.OTHER_SLOT2);\r\n    }\r\n\r\n    function rescueWETH() public {\r\n        IWETH(WETH).withdraw(IERC20(WETH).balanceOf(address(this)));\r\n        pushAll();\r\n    }\r\n\r\n    function rescueTokens(address tokenAddress) external {\r\n        if (tokenAddress == WETH) {\r\n            rescueWETH();\r\n        } else {\r\n            IERC20(tokenAddress).transfer(outletRecipient[Outlet.OTHER_SLOT2], IERC20(tokenAddress).balanceOf(address(this)));\r\n        }\r\n    }\r\n\r\n    function _sendBalance(Outlet outlet) internal {\r\n        bool success;\r\n        address recipient = outletRecipient[outlet];\r\n\r\n        if (recipient == address(0)) {\r\n            return;\r\n        }\r\n\r\n        uint256 ethToSend = outletBalance[outlet];\r\n\r\n        if (ethToSend > 0) {\r\n            outletBalance[outlet] = 0;\r\n            reservedETH -= ethToSend;\r\n\r\n            (success,) = recipient.call{value: ethToSend}(\"\");\r\n            if (!success) {\r\n                outletBalance[outlet] += ethToSend;\r\n                reservedETH += ethToSend;\r\n            }\r\n        }\r\n    }\r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"weth\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum X7TreasurySplitterV3.Outlet\",\"name\":\"outlet\",\"type\":\"uint8\"}],\"name\":\"OutletFrozen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"enum X7TreasurySplitterV3.Outlet\",\"name\":\"outlet\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldRecipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newRecipient\",\"type\":\"address\"}],\"name\":\"OutletRecipientSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOtherSlot1Share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldOtherSlot2Share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRewardPoolShare\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOtherSlot1Share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newOtherSlot2Share\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRewardPoolShare\",\"type\":\"uint256\"}],\"name\":\"SharesSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"divvyUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum X7TreasurySplitterV3.Outlet\",\"name\":\"outlet\",\"type\":\"uint8\"}],\"name\":\"freezeOutlet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum X7TreasurySplitterV3.Outlet\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"outletBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum X7TreasurySplitterV3.Outlet\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"outletFrozen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"outletLookup\",\"outputs\":[{\"internalType\":\"enum X7TreasurySplitterV3.Outlet\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum X7TreasurySplitterV3.Outlet\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"outletRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum X7TreasurySplitterV3.Outlet\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"outletShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"}],\"name\":\"rescueTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rescueWETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservedETH\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum X7TreasurySplitterV3.Outlet\",\"name\":\"outlet\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"setOutletRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot1Share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"slot2Share\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPoolShare\",\"type\":\"uint256\"}],\"name\":\"setSlotShares\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"takeCurrentBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "X7TreasurySplitterV3", "CompilerVersion": "v0.8.18+commit.87f61d96", "OptimizationUsed": "1", "Runs": "777", "ConstructorArguments": "000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2", "EVMVersion": "Default", "Library": "", "LicenseType": "MIT", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://4fbcaa7aaf0cd768bdd832610adba941f314116200cb47e16fdaaad4c8ad6356"}