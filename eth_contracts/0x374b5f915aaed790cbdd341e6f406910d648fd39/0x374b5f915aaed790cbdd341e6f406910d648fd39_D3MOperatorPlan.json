{"SourceCode": "{{\r\n  \"language\": \"Solidity\",\r\n  \"sources\": {\r\n    \"src/plans/D3MOperatorPlan.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: \u00a9 2022 Dai Foundation <www.daifoundation.org>\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.14;\\n\\nimport \\\"./ID3MPlan.sol\\\";\\n\\n/**\\n *  @title D3M Operator Plan\\n *  @notice An operator sets the desired target assets.\\n */\\ncontract D3MOperatorPlan is ID3MPlan {\\n\\n    mapping (address => uint256) public wards;\\n    uint256                      public enabled;\\n\\n    address public operator;\\n    uint256 public targetAssets;\\n\\n    // --- Events ---\\n    event Rely(address indexed usr);\\n    event Deny(address indexed usr);\\n    event File(bytes32 indexed what, address data);\\n    event File(bytes32 indexed what, uint256 data);\\n\\n    constructor() {\\n        enabled = 1;\\n\\n        wards[msg.sender] = 1;\\n        emit Rely(msg.sender);\\n    }\\n\\n    modifier auth {\\n        require(wards[msg.sender] == 1, \\\"D3MOperatorPlan/not-authorized\\\");\\n        _;\\n    }\\n\\n    // --- Admin ---\\n    function rely(address usr) external auth {\\n        wards[usr] = 1;\\n        emit Rely(usr);\\n    }\\n    function deny(address usr) external auth {\\n        wards[usr] = 0;\\n        emit Deny(usr);\\n    }\\n\\n    function file(bytes32 what, address data) external auth {\\n        if (what == \\\"operator\\\") {\\n            operator = data;\\n        } else revert(\\\"D3MOperatorPlan/file-unrecognized-param\\\");\\n        emit File(what, data);\\n    }\\n\\n    function file(bytes32 what, uint256 data) external auth {\\n        if (what == \\\"enabled\\\") {\\n            require(data <= 1, \\\"D3MOperatorPlan/invalid-value\\\");\\n            enabled = data;\\n        } else revert(\\\"D3MOperatorPlan/file-unrecognized-param\\\");\\n        emit File(what, data);\\n    }\\n\\n    function setTargetAssets(uint256 value) external {\\n        require(msg.sender == operator, \\\"D3MOperatorPlan/not-operator\\\");\\n\\n        targetAssets = value;\\n    }\\n\\n    function getTargetAssets(uint256) external override view returns (uint256) {\\n        if (enabled == 0) return 0;\\n\\n        return targetAssets;\\n    }\\n\\n    function active() public view override returns (bool) {\\n        return enabled == 1;\\n    }\\n\\n    function disable() external override auth {\\n        enabled = 0;\\n        emit Disable();\\n    }\\n}\\n\"\r\n    },\r\n    \"src/plans/ID3MPlan.sol\": {\r\n      \"content\": \"// SPDX-FileCopyrightText: \u00a9 2022 Dai Foundation <www.daifoundation.org>\\n// SPDX-License-Identifier: AGPL-3.0-or-later\\n//\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU Affero General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n//\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU Affero General Public License for more details.\\n//\\n// You should have received a copy of the GNU Affero General Public License\\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\\n\\npragma solidity >=0.8.0;\\n\\n/**\\n    @title D3M Plan Interface\\n    @notice Plan contracts are contracts that the Hub uses to determine how\\n    much to change its position.\\n*/\\ninterface ID3MPlan {\\n    event Disable();\\n\\n    /**\\n        @notice Determines what the position should be based on current assets\\n        and the custom plan rules.\\n        @param currentAssets asset balance from a specific pool in Dai [wad]\\n        denomination\\n        @return uint256 target assets the Hub should wind or unwind to in Dai\\n    */\\n    function getTargetAssets(uint256 currentAssets) external view returns (uint256);\\n\\n    /// @notice Reports whether the plan is active\\n    function active() external view returns (bool);\\n\\n    /**\\n        @notice Disables the plan so that it would instruct the Hub to unwind\\n        its entire position.\\n        @dev Implementation should be permissioned.\\n    */\\n    function disable() external;\\n}\\n\"\r\n    }\r\n  },\r\n  \"settings\": {\r\n    \"remappings\": [\r\n      \"@openzeppelin/contracts/=lib/metamorpho/lib/openzeppelin-contracts/contracts/\",\r\n      \"ds-test/=lib/solmate/lib/ds-test/src/\",\r\n      \"dss-interfaces/=lib/dss-test/lib/dss-interfaces/src/\",\r\n      \"dss-test/=lib/dss-test/src/\",\r\n      \"erc4626-tests/=lib/metamorpho/lib/erc4626-tests/\",\r\n      \"forge-std/=lib/metamorpho/lib/forge-std/src/\",\r\n      \"metamorpho/=lib/metamorpho/src/\",\r\n      \"morpho-blue/=lib/metamorpho/lib/morpho-blue/\",\r\n      \"murky/=lib/metamorpho/lib/universal-rewards-distributor/lib/murky/src/\",\r\n      \"openzeppelin-contracts/=lib/metamorpho/lib/openzeppelin-contracts/\",\r\n      \"openzeppelin/=lib/metamorpho/lib/universal-rewards-distributor/lib/openzeppelin-contracts/contracts/\",\r\n      \"solmate/=lib/solmate/src/\",\r\n      \"universal-rewards-distributor/=lib/metamorpho/lib/universal-rewards-distributor/src/\"\r\n    ],\r\n    \"optimizer\": {\r\n      \"enabled\": true,\r\n      \"runs\": 200\r\n    },\r\n    \"metadata\": {\r\n      \"useLiteralContent\": false,\r\n      \"bytecodeHash\": \"ipfs\"\r\n    },\r\n    \"outputSelection\": {\r\n      \"*\": {\r\n        \"*\": [\r\n          \"evm.bytecode\",\r\n          \"evm.deployedBytecode\",\r\n          \"devdoc\",\r\n          \"userdoc\",\r\n          \"metadata\",\r\n          \"abi\"\r\n        ]\r\n      }\r\n    },\r\n    \"evmVersion\": \"london\",\r\n    \"libraries\": {}\r\n  }\r\n}}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Deny\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Disable\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"File\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"Rely\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"active\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"deny\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enabled\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"what\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"data\",\"type\":\"address\"}],\"name\":\"file\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTargetAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"usr\",\"type\":\"address\"}],\"name\":\"rely\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setTargetAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"targetAssets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"wards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]", "ContractName": "D3MOperatorPlan", "CompilerVersion": "v0.8.14+commit.80d49f37", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "london", "Library": "", "LicenseType": "", "Proxy": "0", "Implementation": "", "SwarmSource": ""}