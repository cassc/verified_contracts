{"SourceCode": "/*\r\n\r\n   /`-.      /`-.       .-.          /`-.     /`-.  .'(   )\\  )\\  .-,.-.,-.  )\\.---.     /`-.  \r\n ,' _  \\   ,' _  \\  ,'  /  )       ,' _  \\  ,' _  \\ \\  ) (  \\, /  ) ,, ,. ( (   ,-._(  ,' _  \\ \r\n(  '-' (  (  '-' ( (  ) | (       (  '-' ( (  '-' ( ) (   ) \\ (   \\( |(  )/  \\  '-,   (  '-' ( \r\n )   _  )  ) ,._.'  ) '._\\ )       ) ,._.'  ) ,_ .' \\  ) ( ( \\ \\     ) \\      ) ,-`    ) ,_ .' \r\n(  ,' ) \\ (  '     (  ,   (       (  '     (  ' ) \\  ) \\  `.)/  )    \\ (     (  ``-.  (  ' ) \\ \r\n )/    )/  )/       )/ ._.'        )/       )/   )/   )/     '.(      )/      )..-.(   )/   )/ \r\n\r\n*/\r\n\r\n//                                                            ....                                      \r\n//                                            .*(#(((##/*&@@@@@@@@@@(,                                 \r\n//                                          .(((((((/(@@@@@@@@@@@@@@@@@%,                              \r\n//                                     ,,**(((((((/@@@@@@@@@@@@&%#%&@@@@@@%*                           \r\n//                                  ,//**((((((*#@@@@@@@@@@&/*,,**///////*,###,                        \r\n//                               ,((((*((((((/&@@@@@@@@@&(///////////////////,%@(,                     \r\n//                            .*(((((/((((/*&@@@@@@@@@#///////*********/*******///**,,.                \r\n//                           ,(((((((((((/&@@@@@@@@@#*********//////********//*****,,,***,             \r\n//                          /((((((((((,%@@@@@@@@@#***,,,*****,,***,**///****.    .,(&&%#/,.           \r\n//                        ,((((((((((/(@@@@@@@@@&////////////**,,*///**/%@#  #@(     .%@@@@%,          \r\n//                       *(((((((((#/%@@@@@@@@@%,. .      ,#@@@@&/,/%@@@@(      ,&@%  .@@@@&*          \r\n//                     ./((((((((((*@@@@@@@@@@(%. ,%/  %@(  .&@@@&&@@@@@@/   ,(*      .(#/,            \r\n//                    ./((((((((((/@@@@@@@@@@(&     #, ./.   *&@#(%&&&&&&#*   .,. ..,***,,..           \r\n//                   ./((((((((((/&@@@@@@@@@##@/    /%.     ,******//////////////////*,*@@#            \r\n//                  ./(((((((((#/#@@@@@@@@@%**//*,,.,****////////////////////////////*(@@@@@           \r\n//                 ./((((((((((#*&@@@@@@@@@*///**,,,,**/////////////////////////////*,**@@@@           \r\n//                 /#((((((((((#*&@@@@@@@@&,/*, .,*////***,,,,,***/////////***,,,,*//*,&@@@@           \r\n//                /((((((((((((#*#@@@@@@@@%,,*/*,,,*,,,.,,,***////////////**,,.,,. .*#@@@@@@           \r\n//               *(((((((((((((((/@@@@@@@@@*//*,*//,..,....,,,**,,,,,,,,.*%&&%&%*,*/*/@@@@@@.          \r\n//              ,((((((((((((((((//@@@@@@@@@*////*,**/**,*(%%%(,..,,,*,*,./%%%%%%#,,/,#@@@@,/.         \r\n//             .(((((((((((((((((((,&@@@@@@@@#//////*,,,*///**,,*,. .  ./(///*****/**(@@@&*(((,        \r\n//             *((((((((((((((((((((//@@@@@@@@@#*////////*,,,,*******////*****,,./&@@@@@%/((((,        \r\n//            *#((((((((((((((((((((((//@@@@@@@@@@#**////////////*,,,,,,,,***(&@@@@@@@%/(((((/         \r\n//           .(((((((((((((((((((((((((((/#@@@@@@@@@@&(*//////////******,,(@@@@@@@@@#/((((((/.         \r\n//           *((((((((((((((((((((((((((((((*#@@@@@@@@@@@@#//*,,,,,,,/(&@@@@@@@@@&//(((((((#*.         \r\n//          ,((((((((((((((((((((((((((((((((((,(@@@@@@@@@@@@@&*/%%@@@@@@@@@@@@%*(((((((((((/          \r\n//          *(((((((((((((((((((((((((((///******/,*&@@@@@@@@@@@@@%,(%&@@@@@&*(((((((((((((((,         \r\n//         ./(((((((((((((((((((((((((((((((((((((((/*,#@@@@@@@@@@@@@&/(%&/,/((((((((((((/(((/.        \r\n//         ,(((((((((((((((((((((((((((((((((((((((((((((*/&@@@@@@@@@@@@#***(((((((((((((/((((*        \r\n//        .*(((((((((((((((((((((((((((((((((((((((((((((((#*/&@@@@@@@@@@@(*((((((((((((/(((((#.       \r\n//        ./(((((((%@&&&&&%##((((((((((((((((((((((((((((((((((*/&@@@@@@@@@%*((((((((((((((((((#,      \r\n//     ,*(**((((((((%@#(#%(((#%&#(((((((((((((((((((((((((((((((((*%@@@@@@@@%/(((((((((((((((((((*     \r\n//   *####/*/((((((((#%(#@#(((((((((((((((((((((((((((((((((((((((((/%@@@@@@@((((((((((((((((((((/(@*  \r\n// ./%###%#,*/(((((((((((@%((((((((((((((((((((((((((((((((((((((((((/(@@@@@@(/((((((((((((((((#/#@@@# \r\n// .(#######**/((((((((((&&(((((((((((((((((((((((((((((((((((((((((((*@@@@@@//((((((((((((((//&@@@@@@/\r\n//  *######&@#*//((((((((((((((((((((((((((((((((((((((((((((((((((((/#@@@@@%/((((((((((///%@@@@@@@@@@/\r\n//   *###&@@@@@@/*(((((((((((((((((((((((((((((((((((((((((((((((((//&@@@@@%*(//((#%&@@@@@@@@@@@@@@@@/ \r\n//     .(&@@@@@@@@@%///((((((((((((((((((((((((((((((((((((((((//(@@@@@@@&/#%@@@@@@@@@@@@@@@@@@@@&#.   \r\n//         (%@@@@@@@@@@@@%#(//////((((((((((((((((((//////(#&@@@@@@@@@@#/#%#&@@@@@@@@@@@@@&%#/,        \r\n//             .,/#&@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@&#/.       . ....                    \r\n//                      .,**/(#%&&@@@@@@@@@@@@@@@@@@@@@@@@&%#(*,                                       \r\n\r\n\r\n// warning: dev is retarded\r\n\r\n// SPDX-License-Identifier: Unlicensed\r\n\r\npragma solidity ^0.8.25;\r\n\r\nlibrary SafeMath {\r\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        uint256 c = a + b;\r\n        require(c >= a, \"SafeMath: addition overflow\");\r\n\r\n        return c;\r\n    }\r\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return sub(a, b, \"SafeMath: subtraction overflow\");\r\n    }\r\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        require(b <= a, errorMessage);\r\n        uint256 c = a - b;\r\n\r\n        return c;\r\n    }\r\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        uint256 c = a * b;\r\n        require(c / a == b, \"SafeMath: multiplication overflow\");\r\n\r\n        return c;\r\n    }\r\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return div(a, b, \"SafeMath: division by zero\");\r\n    }\r\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\r\n        // Solidity only automatically asserts when dividing by 0\r\n        require(b > 0, errorMessage);\r\n        uint256 c = a / b;\r\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\r\n\r\n        return c;\r\n    }\r\n}\r\n\r\ninterface IERC20 {\r\n    function totalSupply() external view returns (uint256);\r\n    function decimals() external view returns (uint8);\r\n    function symbol() external view returns (string memory);\r\n    function name() external view returns (string memory);\r\n    function getOwner() external view returns (address);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address recipient, uint256 amount) external returns (bool);\r\n    function allowance(address _owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n}\r\n\r\nabstract contract Auth {\r\n    address internal owner;\r\n\r\n    constructor(address _owner) {\r\n        owner = _owner;\r\n    }\r\n\r\n    /**\r\n     * Function modifier to require caller to be contract deployer\r\n     */\r\n    modifier onlyOwner() {\r\n        require(isOwner(msg.sender), \"!Owner\"); _;\r\n    }\r\n\r\n    /**\r\n     * Check if address is owner\r\n     */\r\n    function isOwner(address account) public view returns (bool) {\r\n        return account == owner;\r\n    }\r\n\r\n    /**\r\n     * Transfer ownership to new address. Caller must be deployer. Leaves old deployer authorized\r\n     */\r\n    function transferOwnership(address payable adr) public onlyOwner {\r\n        owner = adr;\r\n        emit OwnershipTransferred(adr);\r\n    }\r\n\r\n    event OwnershipTransferred(address owner);\r\n}\r\n\r\ninterface IDEXFactory {\r\n    function createPair(address tokenA, address tokenB) external returns (address pair);\r\n}\r\n\r\ninterface IDEXRouter {\r\n    function factory() external pure returns (address);\r\n    function WETH() external pure returns (address);\r\n\r\n    function addLiquidity(\r\n        address tokenA,\r\n        address tokenB,\r\n        uint amountADesired,\r\n        uint amountBDesired,\r\n        uint amountAMin,\r\n        uint amountBMin,\r\n        address to,\r\n        uint deadline\r\n    ) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n    function addLiquidityETH(\r\n        address token,\r\n        uint amountTokenDesired,\r\n        uint amountTokenMin,\r\n        uint amountETHMin,\r\n        address to,\r\n        uint deadline\r\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n\r\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external payable;\r\n\r\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n        uint amountIn,\r\n        uint amountOutMin,\r\n        address[] calldata path,\r\n        address to,\r\n        uint deadline\r\n    ) external;\r\n}\r\n\r\ninterface IDividendDistributor {\r\n    function setShare(address shareholder, uint256 amount) external;\r\n    function deposit(uint256 amount) external;\r\n    function claimDividend(address shareholder) external;\r\n    function getDividendsClaimedOf (address shareholder) external returns (uint256);\r\n}\r\n\r\ncontract DividendDistributor is IDividendDistributor {\r\n    using SafeMath for uint256;\r\n\r\n    address public _token;\r\n    address public _owner;\r\n\r\n    address public immutable APU = address(0x594DaaD7D77592a2b97b725A7AD59D7E188b5bFa); //APU\r\n\r\n    struct Share {\r\n        uint256 amount;\r\n        uint256 totalExcluded;\r\n        uint256 totalClaimed;\r\n    }\r\n\r\n    address[] private shareholders;\r\n    mapping (address => uint256) private shareholderIndexes;\r\n\r\n    mapping (address => Share) public shares;\r\n\r\n    uint256 public totalShares;\r\n    uint256 public totalDividends;\r\n    uint256 public totalClaimed;\r\n    uint256 public dividendsPerShare;\r\n    uint256 private dividendsPerShareAccuracyFactor = 10 ** 36;\r\n\r\n    modifier onlyToken() {\r\n        require(msg.sender == _token); _;\r\n    }\r\n    \r\n    modifier onlyOwner() {\r\n        require(msg.sender == _owner); _;\r\n    }\r\n\r\n    constructor (address owner) {\r\n        _token = msg.sender;\r\n        _owner = owner;\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function setShare(address shareholder, uint256 amount) external override onlyToken {\r\n        if(shares[shareholder].amount > 0){\r\n            distributeDividend(shareholder);\r\n        }\r\n\r\n        if(amount > 0 && shares[shareholder].amount == 0){\r\n            addShareholder(shareholder);\r\n        }else if(amount == 0 && shares[shareholder].amount > 0){\r\n            removeShareholder(shareholder);\r\n        }\r\n\r\n        totalShares = totalShares.sub(shares[shareholder].amount).add(amount);\r\n        shares[shareholder].amount = amount;\r\n        shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n    }\r\n\r\n    function deposit(uint256 amount) external override onlyToken {\r\n        \r\n        if (amount > 0) {        \r\n            totalDividends = totalDividends.add(amount);\r\n            dividendsPerShare = dividendsPerShare.add(dividendsPerShareAccuracyFactor.mul(amount).div(totalShares));\r\n        }\r\n    }\r\n\r\n    function distributeDividend(address shareholder) internal {\r\n        if(shares[shareholder].amount == 0){ return; }\r\n\r\n        uint256 amount = getClaimableDividendOf(shareholder);\r\n        if(amount > 0){\r\n            totalClaimed = totalClaimed.add(amount);\r\n            shares[shareholder].totalClaimed = shares[shareholder].totalClaimed.add(amount);\r\n            shares[shareholder].totalExcluded = getCumulativeDividends(shares[shareholder].amount);\r\n            IERC20(APU).transfer(shareholder, amount);\r\n        }\r\n    }\r\n\r\n    function claimDividend(address shareholder) external override onlyToken {\r\n        distributeDividend(shareholder);\r\n    }\r\n\r\n    function getClaimableDividendOf(address shareholder) public view returns (uint256) {\r\n        if(shares[shareholder].amount == 0){ return 0; }\r\n\r\n        uint256 shareholderTotalDividends = getCumulativeDividends(shares[shareholder].amount);\r\n        uint256 shareholderTotalExcluded = shares[shareholder].totalExcluded;\r\n\r\n        if(shareholderTotalDividends <= shareholderTotalExcluded){ return 0; }\r\n\r\n        return shareholderTotalDividends.sub(shareholderTotalExcluded);\r\n    }\r\n\r\n    function getCumulativeDividends(uint256 share) internal view returns (uint256) {\r\n        return share.mul(dividendsPerShare).div(dividendsPerShareAccuracyFactor);\r\n    }\r\n\r\n    function addShareholder(address shareholder) internal {\r\n        shareholderIndexes[shareholder] = shareholders.length;\r\n        shareholders.push(shareholder);\r\n    }\r\n\r\n    function removeShareholder(address shareholder) internal {\r\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\r\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\r\n        shareholders.pop();\r\n    }\r\n    \r\n    function manualSend(uint256 amount, address holder) external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(holder).transfer(amount > 0 ? amount : contractETHBalance);\r\n    }\r\n\r\n\r\n    function getDividendsClaimedOf (address shareholder) external view returns (uint256) {\r\n        require (shares[shareholder].amount > 0, \"You're not a PRINTER shareholder!\");\r\n        return shares[shareholder].totalClaimed;\r\n    }\r\n\r\n    }\r\n\r\ncontract PrintApu is IERC20, Auth {\r\n    using SafeMath for uint256;\r\n\r\n    address private WETH;\r\n    address private DEAD = 0x000000000000000000000000000000000000dEaD;\r\n    address private ZERO = 0x0000000000000000000000000000000000000000;\r\n\r\n    address public immutable APU = address(0x594DaaD7D77592a2b97b725A7AD59D7E188b5bFa); //APU\r\n    \r\n    string private constant  _name = \"Print Apu\";\r\n    string private constant _symbol = \"PAPU\";\r\n    uint8 private constant _decimals = 9;\r\n\r\n    uint256 private _totalSupply = 100000000 * (10 ** _decimals);\r\n    uint256 private _maxTxAmountBuy = _totalSupply;\r\n    \r\n    event DividendsDistributed(uint256 amount);\r\n    event EthDistributed(uint256 amount);\r\n    event SwapFailed(string message, string reason);\r\n    event Debug(string message);\r\n\r\n    mapping (address => uint256) private _balances;\r\n    mapping (address => mapping (address => uint256)) private _allowances;\r\n    mapping (address => uint256) private cooldown;\r\n\r\n    mapping (address => bool) private isFeeExempt;\r\n    mapping (address => bool) private isDividendExempt;\r\n    mapping (address => bool) private isBot;\r\n            \r\n    uint256 private totalFee = 49; // initial fee is ridiculously high to punish snipers, will be set to 3% on launch\r\n    uint256 private feeDenominator = 100;\r\n\r\n    address payable public marketingWallet = payable(0x437cAB3eCEa4f71907b7375c43F0eB4B4FB2340E);\r\n\r\n    IDEXRouter public router;\r\n    address public pair;\r\n\r\n    uint256 public launchedAt;\r\n    bool private tradingOpen;\r\n    bool private buyLimit = true;\r\n    uint256 private maxBuy = 100000 * (10 ** _decimals);\r\n    uint256 public numTokensSellToAddToLiquidity = 10000 * 10 ** _decimals;\r\n    uint256 public maxSwap = 1000000 * 10 ** _decimals;\r\n\r\n    DividendDistributor private distributor;    \r\n    \r\n    bool public blacklistEnabled = false;\r\n    bool public cooldownEnabled = true;\r\n    bool private inSwap;\r\n    modifier swapping() { inSwap = true; _; inSwap = false; }\r\n\r\n    constructor (\r\n        address _owner        \r\n    ) Auth(_owner) {\r\n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\r\n            \r\n        WETH = router.WETH();\r\n        \r\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\r\n        \r\n        // add approvals for contract and owner to router\r\n        _allowances[address(this)][address(router)] = type(uint256).max;\r\n        _allowances[_owner][address(router)] = type(uint256).max;\r\n\r\n        distributor = new DividendDistributor(_owner);\r\n\r\n        isFeeExempt[_owner] = true;\r\n        isFeeExempt[marketingWallet] = true;             \r\n              \r\n        isDividendExempt[pair] = true;\r\n        isDividendExempt[address(this)] = true;\r\n        isDividendExempt[DEAD] = true;        \r\n\r\n        _balances[_owner] = _totalSupply;\r\n    \r\n        emit Transfer(address(0), _owner, _totalSupply);\r\n\r\n        // Approve the distributor to manage all APU tokens that may come to this contract\r\n        IERC20(APU).approve(address(distributor), type(uint256).max);\r\n    }\r\n\r\n    receive() external payable { }\r\n\r\n    function totalSupply() external view override returns (uint256) { return _totalSupply; }\r\n    function decimals() external pure override returns (uint8) { return _decimals; }\r\n    function symbol() external pure override returns (string memory) { return _symbol; }\r\n    function name() external pure override returns (string memory) { return _name; }\r\n    function getOwner() external view override returns (address) { return owner; }\r\n    function getFee() external view returns (uint256) { return totalFee; }\r\n    function balanceOf(address account) public view override returns (uint256) { return _balances[account]; }\r\n    function allowance(address holder, address spender) external view override returns (uint256) { return _allowances[holder][spender]; }\r\n\r\n    function approve(address spender, uint256 amount) public override returns (bool) {\r\n        _allowances[msg.sender][spender] = amount;\r\n        emit Approval(msg.sender, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    function approveMax(address spender) external returns (bool) {\r\n        return approve(spender, type(uint256).max);\r\n    }\r\n\r\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\r\n        return _transferFrom(msg.sender, recipient, amount);\r\n    }\r\n\r\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\r\n        if(_allowances[sender][msg.sender] != type(uint256).max){\r\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender].sub(amount, \"Insufficient Allowance\");\r\n        }\r\n\r\n        return _transferFrom(sender, recipient, amount);\r\n    }\r\n\r\n    function _transferFrom(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        if (sender!= owner && recipient!= owner) require(tradingOpen, \"Trading not yet enabled\"); //transfers disabled before openTrading\r\n        if (blacklistEnabled) {\r\n            require (!isBot[sender] && !isBot[recipient], \"Address blacklisted due to sniping\");\r\n        }\r\n        if (buyLimit) { \r\n            if (sender!=owner && recipient!= owner) require (amount<=maxBuy, \"Transfer amount above temporary buy limit\");        \r\n        }\r\n\r\n        if (cooldownEnabled) {\r\n            if (sender == pair && recipient != address(router) && !isFeeExempt[recipient]) {\r\n                require (cooldown[recipient] < block.timestamp, \"Buy cooldown, try again in 60 seconds\");\r\n                cooldown[recipient] = block.timestamp + 60 seconds; \r\n            }\r\n        }\r\n\r\n        if(inSwap){ return _basicTransfer(sender, recipient, amount); }      \r\n        \r\n        // Subtract the balance before checking for swap to not consider current transaction's amount if it is not exempt from fees.\r\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, amount) : amount;\r\n        \r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amountReceived);\r\n\r\n        // Update dividend shares\r\n        if(sender != pair && !isDividendExempt[sender]){ try distributor.setShare(sender, _balances[sender]) {} catch {} }\r\n        if(recipient != pair && !isDividendExempt[recipient]){ try distributor.setShare(recipient, _balances[recipient]) {} catch {} }\r\n\r\n        // we dont autoswap in this version of the contract\r\n        // uint256 contractTokenBalance = balanceOf(address(this));\r\n        // bool overMinTokenBalance = contractTokenBalance >= numTokensSellToAddToLiquidity;\r\n        // // Perform swap after balances are updated and fees are taken\r\n        // if (overMinTokenBalance && balanceOf(address(this)) > 0 && (recipient == pair || sender == pair)) {\r\n        //     swapBack();\r\n        // }\r\n\r\n        emit Transfer(sender, recipient, amountReceived);\r\n        return true;\r\n    }\r\n\r\n    \r\n    function _basicTransfer(address sender, address recipient, uint256 amount) internal returns (bool) {\r\n        _balances[sender] = _balances[sender].sub(amount, \"Insufficient Balance\");\r\n        _balances[recipient] = _balances[recipient].add(amount);\r\n        emit Transfer(sender, recipient, amount);\r\n        return true;\r\n    }\r\n\r\n \r\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\r\n        return ( !(isFeeExempt[sender] || isFeeExempt[recipient]) &&  (sender == pair || recipient == pair) );\r\n    }\r\n\r\n    function takeFee(address sender, uint256 amount) internal returns (uint256) {\r\n        uint256 feeAmount;\r\n        feeAmount = amount.mul(totalFee).div(feeDenominator);\r\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\r\n        emit Transfer(sender, address(this), feeAmount);   \r\n\r\n        return amount.sub(feeAmount);\r\n    }\r\n\r\n    function mineFees() external returns (bool) {\r\n        // function will take the token balance of the contract, up to a max swap limit\r\n        // tokens will be swapped for eth and apu\r\n        // emit Debug('starting mine fees');\r\n        uint256 amountToSwap = balanceOf(address(this));\r\n        require(amountToSwap > 1000, \"Insufficient balance to mine\"); // prevent underflows\r\n        if (amountToSwap > maxSwap) amountToSwap = maxSwap; // sets a maximum reasonable amount to sell per tx to prevent red dildos\r\n        uint256 ethSwapAmount = amountToSwap * 15 / 100; // 15% of tokens will be swapped for eth and added to liquidity\r\n        uint256 liqAddAmount  = amountToSwap *  5 / 100; //  5% of tokens paired with the eth to add to liq, prevents errors\r\n        uint256 apuSwapAmount = amountToSwap * 75 / 100; // 75% of tokens will be swapped for apu\r\n        uint256 mineRewards   = amountToSwap - ethSwapAmount - apuSwapAmount - 1000; // 5% of tokens will be rewarded to the miner, minus reserve\r\n\r\n        // swap for eth and then add to lp\r\n        swapTokensForEth(ethSwapAmount);\r\n        // emit Debug('finish eth swap');\r\n        uint256 ethBalance = address(this).balance;\r\n        if (ethBalance > 0) {\r\n            // add raw eth to LP, this the coins\r\n            addLiquidity(liqAddAmount, ethBalance);\r\n            emit EthDistributed(ethBalance);\r\n        }\r\n\r\n        // swap for apu and then distribute accordingly\r\n        swapTokensForAPU(apuSwapAmount);\r\n        // emit Debug('finish apu swap');\r\n        uint256 apuBalance = IERC20(APU).balanceOf(address(this));\r\n        uint256 dividendsApu = apuBalance * 65 / 100; // majority of tokens are sent to dividends\r\n        uint256 marketingApu = apuBalance * 35 / 100; // rest goes to marketing wallet, around 25% total of fees\r\n\r\n        bool divSuccess = IERC20(APU).transfer(address(distributor), dividendsApu);\r\n        if (divSuccess) {\r\n            // emit Debug('divSuccess true');\r\n            distributor.deposit(dividendsApu);\r\n            emit DividendsDistributed(dividendsApu);\r\n        }\r\n\r\n        IERC20(APU).transfer(address(marketingWallet), marketingApu);\r\n\r\n        // finally, send papu rewards to miner\r\n        _basicTransfer(address(this), msg.sender, mineRewards);\r\n\r\n        emit Debug('finish all');\r\n\r\n        return true; // great success, pat urself on the back\r\n    }\r\n\r\n    // function swapBack() internal swapping {\r\n    //     uint256 amountToSwap = balanceOf(address(this));\r\n    //     if (amountToSwap == 0) return;\r\n    //     uint256 half = amountToSwap.div(2);\r\n\r\n    //     swapTokensForEth(half);\r\n    //     uint256 ethBalance = address(this).balance;\r\n    //     if (ethBalance > 0) {\r\n    //         payable(marketingWallet).transfer(ethBalance);\r\n    //         emit EthDistributed(ethBalance);\r\n    //     }\r\n\r\n    //     swapTokensForAPU(half);\r\n    //     uint256 dividends = IERC20(APU).balanceOf(address(this));\r\n    //     bool success = IERC20(APU).transfer(address(distributor), dividends);\r\n    //     if (success) {\r\n    //         distributor.deposit(dividends);\r\n    //         emit DividendsDistributed(dividends);\r\n    //     }\r\n    // }\r\n\r\n    function swapTokensForAPU(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](3);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n        path[2] = APU;\r\n\r\n        try router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        ) {\r\n            // emit Debug('swapped for apu');\r\n        } catch Error(string memory reason) {\r\n            emit SwapFailed(\"Failed to swap tokens for APU\", reason);\r\n        }\r\n    }\r\n\r\n    function swapTokensForEth(uint256 tokenAmount) private {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = WETH;\r\n\r\n        try router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount, \r\n            0,  // minimum amount of tokens\r\n            path, \r\n            address(this), \r\n            block.timestamp\r\n        ) {\r\n            // emit Debug('swapped for eth');\r\n        } catch Error(string memory reason) {\r\n            emit SwapFailed(\"Failed to swap tokens for ETH\", reason);\r\n        }\r\n    }\r\n\r\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\r\n        // add the liquidity\r\n        try router.addLiquidityETH{value: ethAmount}(\r\n            address(this),\r\n            tokenAmount,\r\n            0, // slippage is unavoidable\r\n            0, // slippage is unavoidable\r\n            owner,\r\n            block.timestamp\r\n        ) {\r\n            // emit Debug('added liquidity');\r\n        } catch Error(string memory reason) {\r\n            emit SwapFailed(\"Failed to add liquidity\", reason);\r\n        }\r\n    }\r\n\r\n    \r\n    function openTrading() external onlyOwner {\r\n        launchedAt = block.number;\r\n        tradingOpen = true;\r\n    }    \r\n  \r\n    function sweepETH() external onlyOwner {\r\n        // emergency transfer for when things fail\r\n        uint256 balance = address(this).balance;\r\n        payable(owner).transfer(balance);\r\n    }\r\n  \r\n    function sweepAPU() external onlyOwner {\r\n        // emergency transfer for when things fail\r\n        uint256 balance = IERC20(APU).balanceOf(address(this));\r\n        IERC20(APU).transfer(address(owner), balance);\r\n    }\r\n  \r\n    function sweepPAPU() external onlyOwner {\r\n        // emergency transfer for when things fail\r\n        uint256 balance = balanceOf(address(this));\r\n        _basicTransfer(address(this), address(owner), balance);\r\n    }\r\n    \r\n    function setBot(address _address, bool toggle) external onlyOwner {\r\n        isBot[_address] = toggle;\r\n        _setIsDividendExempt(_address, toggle);\r\n    }\r\n    \r\n    \r\n    function _setIsDividendExempt(address holder, bool exempt) internal {\r\n        require(holder != address(this) && holder != pair);\r\n        isDividendExempt[holder] = exempt;\r\n        if(exempt){\r\n            distributor.setShare(holder, 0);\r\n        }else{\r\n            distributor.setShare(holder, _balances[holder]);\r\n        }\r\n    }\r\n\r\n    function setIsDividendExempt(address holder, bool exempt) external onlyOwner {\r\n        _setIsDividendExempt(holder, exempt);\r\n    }\r\n\r\n    function setIsFeeExempt(address holder, bool exempt) external onlyOwner {\r\n        isFeeExempt[holder] = exempt;\r\n    }\r\n\r\n    function setFee (uint256 _fee) external onlyOwner {\r\n        require (_fee <= 14, \"Fee can't exceed 14%\");\r\n        totalFee = _fee;\r\n    }\r\n\r\n    function setMaxSwap (uint256 _maxSwap) external onlyOwner {\r\n        require (_maxSwap >= 10000 * 10 ** _decimals, \"Must be above 0.01% of total supply\");\r\n        maxSwap = _maxSwap;\r\n    }\r\n  \r\n    function manualSend() external onlyOwner {\r\n        uint256 contractETHBalance = address(this).balance;\r\n        payable(marketingWallet).transfer(contractETHBalance);\r\n    }\r\n\r\n    function claimDividend() external {\r\n        distributor.claimDividend(msg.sender);\r\n    }\r\n    \r\n    function claimDividend(address holder) external onlyOwner {\r\n        distributor.claimDividend(holder);\r\n    }\r\n    \r\n    function getClaimableDividendOf(address shareholder) public view returns (uint256) {\r\n        return distributor.getClaimableDividendOf(shareholder);\r\n    }\r\n    \r\n    function manualBurn(uint256 amount) external onlyOwner returns (bool) {\r\n        return _basicTransfer(address(this), DEAD, amount);\r\n    }\r\n    \r\n    function getCirculatingSupply() public view returns (uint256) {\r\n        return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(ZERO));\r\n    }\r\n\r\n    function setMarketingWallet(address _marketingWallet) external onlyOwner {\r\n        marketingWallet = payable(_marketingWallet);\r\n    } \r\n\r\n    function getTotalDividends() external view returns (uint256) {\r\n        return distributor.totalDividends();\r\n    }    \r\n\r\n    function getTotalClaimed() external view returns (uint256) {\r\n        return distributor.totalClaimed();\r\n    }\r\n\r\n     function getDividendsClaimedOf (address shareholder) external view returns (uint256) {\r\n        return distributor.getDividendsClaimedOf(shareholder);\r\n    }\r\n\r\n    function removeBuyLimit() external onlyOwner {\r\n        buyLimit = false;\r\n    }\r\n\r\n    function checkBot(address account) public view returns (bool) {\r\n        return isBot[account];\r\n    }\r\n\r\n    function setBlacklistEnabled() external onlyOwner {\r\n        require (blacklistEnabled == false, \"can only be called once\");\r\n        blacklistEnabled = true;\r\n    }\r\n\r\n    function setCooldown(bool enabled) external onlyOwner {\r\n        cooldownEnabled = enabled;\r\n    }\r\n\r\n    function setSwapThresholdAmount (uint256 amount) external onlyOwner {\r\n        require (amount <= _totalSupply.div(100), \"can't exceed 1%\");\r\n        numTokensSellToAddToLiquidity = amount * 10 ** 9;\r\n    } \r\n   \r\n}", "ABI": "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"Debug\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DividendsDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EthDistributed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"reason\",\"type\":\"string\"}],\"name\":\"SwapFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"APU\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"approveMax\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blacklistEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"checkBot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimDividend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cooldownEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getClaimableDividendOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"shareholder\",\"type\":\"address\"}],\"name\":\"getDividendsClaimedOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalClaimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDividends\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"launchedAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"manualBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manualSend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketingWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSwap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mineFees\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numTokensSellToAddToLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"openTrading\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeBuyLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"contract IDEXRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setBlacklistEnabled\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"toggle\",\"type\":\"bool\"}],\"name\":\"setBot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setCooldown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsDividendExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"exempt\",\"type\":\"bool\"}],\"name\":\"setIsFeeExempt\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketingWallet\",\"type\":\"address\"}],\"name\":\"setMarketingWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxSwap\",\"type\":\"uint256\"}],\"name\":\"setMaxSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setSwapThresholdAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepAPU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepPAPU\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}]", "ContractName": "PrintApu", "CompilerVersion": "v0.8.25+commit.b61c2a91", "OptimizationUsed": "0", "Runs": "200", "ConstructorArguments": "000000000000000000000000437cab3ecea4f71907b7375c43f0eb4b4fb2340e", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://0c4309fd9853899c171ecd60910601b87ec04dd1bd493893537361a7d583f53e"}